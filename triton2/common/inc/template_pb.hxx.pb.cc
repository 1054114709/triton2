// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "template_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBItemSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBConfigTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBConfigTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHandinEncourage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHandinEncourage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHandinTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHandinTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSkillBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSkillBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBindStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBindStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemScroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemScroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemTeleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemTeleport_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemReturnPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemReturnPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemTeleSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemTeleSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemStove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemStove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemPetEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemPetEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemPetFood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemPetFood_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemRelife_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemRelife_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemUpg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemUpg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemUpgLuck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemUpgLuck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemUpgLeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemUpgLeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemStuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemStuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemChangeCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemChangeCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBComRuneUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBComRuneUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBComRuneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBComRuneConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemShout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemShout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemAutoShout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemAutoShout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemPhysic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemPhysic_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBluePrint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBluePrint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemRune_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemRune_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemJewel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemJewel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemYuanBug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemYuanBug_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemYuanEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemYuanEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipArmor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipArmor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplateProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplateProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPropertyPercent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPropertyPercent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplatePropertyTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplatePropertyTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMetier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMetier_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSellTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSellTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTotalDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTotalDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNPCCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNPCCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOgreProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOgreProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBox_Click_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBox_Click_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOgreBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOgreBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBShowPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBShowPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattlePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattlePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMineOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMineOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMineOgre_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMineOgre_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillTreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillTreeNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUseCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUseCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAureoleType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAureoleType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAureoleSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAureoleSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNormalSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNormalSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTrapSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTrapSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuffFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuffFunc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLevelExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLevelExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleMoneyLmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleMoneyLmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLevelMoneyLmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLevelMoneyLmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPetLevelExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPetLevelExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProduceExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProduceExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUpg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUpg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipUpg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipUpg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSuitProducer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSuitProducer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSuitNormal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSuitNormal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSpell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSpell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProduceEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProduceEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProducePhysic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProducePhysic_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOpenSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOpenSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMultiCompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMultiCompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeleTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeleTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSummonBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSummonBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBeginner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBeginner_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOgreTran_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOgreTran_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMetierPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMetierPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLevelProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLevelProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHonorToExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHonorToExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHonorObtain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHonorObtain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDiploidTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDiploidTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRedStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRedStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRedStoneExpTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRedStoneExpTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBReliveTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBReliveTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBQuestionExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBQuestionExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBindChargeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBindChargeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMinePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMinePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMineEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMineEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemMineMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemMineMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRelatively_Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRelatively_Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPKDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPKDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPKValueTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPKValueTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemKitBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemKitBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemGiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemAdapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemAdapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTplHierogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTplHierogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTitleManager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTitleManager_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTplBuffImmunity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTplBuffImmunity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplateTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplateTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMagicWeaponProIncValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMagicWeaponProIncValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplateLifeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplateLifeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDecompondTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDecompondTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCTemplateDecompound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCTemplateDecompound_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTplMagicWeaponProIncTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTplMagicWeaponProIncTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleMWDecomposeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleMWDecomposeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMagicWeaponDecomposeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMagicWeaponDecomposeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMagicWeaponQuickUpTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMagicWeaponQuickUpTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemMagicWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemMagicWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleSkillStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleSkillStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemMagicStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemMagicStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLifeSkillScroll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLifeSkillScroll_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillBoxProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillBoxProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMagicWeaponSkillBoxProTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMagicWeaponSkillBoxProTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMWProJudgeEffTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMWProJudgeEffTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMWProJudgeSpirTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMWProJudgeSpirTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMWLevelQuotietyTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMWLevelQuotietyTab_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFuncItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFuncItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipExchangeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipExchangeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMultiBuffEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMultiBuffEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMultiBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMultiBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCDGroupTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCDGroupTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMetierAp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMetierAp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLightTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLightTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWizardTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWizardTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBJudgeLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBJudgeLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBJudgeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBJudgeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPaperValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPaperValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemRedPaper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemRedPaper_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTrend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTrend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAchieveAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAchieveAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOfficial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOfficial_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOfficialTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOfficialTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBConstructExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBConstructExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAddPKTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAddPKTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMapTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMapTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMultiAttackTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMultiAttackTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemClean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemClean_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLeagueItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLeagueItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLeagueBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLeagueBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMatrixTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMatrixTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWeddingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWeddingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBKeepsnakeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBKeepsnakeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplateMarriageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplateMarriageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBInvitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBInvitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGressInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGressInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProGressConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProGressConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSysInvitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSysInvitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCountTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCountTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSummon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSummon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDirectTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDirectTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemDirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemDirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemGetStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemGetStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWarDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWarDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTax_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBattleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBattleConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDegreeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDegreeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemAutoCollect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemAutoCollect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFangCunTreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFangCunTreeNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFangCunTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFangCunTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBlackPills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBlackPills_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTemplateTalentStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTemplateTalentStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExpContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExpContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExpPills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExpPills_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemExpTome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemExpTome_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAccuseConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAccuseConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGlobalMapConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGlobalMapConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsBOSS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsBOSS_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBOffLineExpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBOffLineExpConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepeFameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepeFameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCastingSpiritTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCastingSpiritTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSpiritItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSpiritItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_template_5fpb_2ehxx() {
  protobuf_AddDesc_template_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "template_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBItemSet_descriptor_ = file->message_type(0);
  static const int PBItemSet_offsets_[61] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, bindstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, blueprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itembook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, jewel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, petegg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, petfood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, physic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, relife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, return__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, returnpaper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, rune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, scroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, shout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, stove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, stuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, teleport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, telesymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, upgleast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, upgluck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, yuanbug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, yuanegg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, redstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, autoshout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, kitbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemupg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemremove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemadapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, minemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemcall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, giftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, magicweapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, funcitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, skillbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, redpaper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, magicstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, vipitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, cleanitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, awardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, leaguebag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, sysinvitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemsummon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemdirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemgetstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemautocollect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, itemblackpills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, expcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, exppills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, spirititem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, exptome_),
  };
  PBItemSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSet_descriptor_,
      PBItemSet::default_instance_,
      PBItemSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSet));
  PBConfigTable_descriptor_ = file->message_type(1);
  static const int PBConfigTable_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, beginner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, diploid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, droplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, droptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, redstonetable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, relivetable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, selltable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, teletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, addpktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, officialtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, ogretran_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, magicweaponprotable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, bindchargetabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, pktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, magicweaponskillbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, equipexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, maptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, multiattacktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, matrixtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, marriageconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, progressconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, counttable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, activityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, directtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, battleconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, moneylmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, handintable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, handinencourage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, changecamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, accuseconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, comruneconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, mwdecompostab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, mwquickuptab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, globalmapconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, offlineexpconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, repefametable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, castingspirittable_),
  };
  PBConfigTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBConfigTable_descriptor_,
      PBConfigTable::default_instance_,
      PBConfigTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConfigTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBConfigTable));
  PBSkillSet_descriptor_ = file->message_type(2);
  static const int PBSkillSet_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, aureoleskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, normalskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, skilltree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, skilltreenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, trapskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, multibuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, fangcuntree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, fangcunnode_),
  };
  PBSkillSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillSet_descriptor_,
      PBSkillSet::default_instance_,
      PBSkillSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillSet));
  PBEquipSet_descriptor_ = file->message_type(3);
  static const int PBEquipSet_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, equiparmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, equipfashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, equipupg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, openslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, produceequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, produceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, producephysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, spell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, suitnormal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, suitproducer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, multicompose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, compose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, decompound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, lighttable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, mwjudgeeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, mwjudgespir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, mwquotiety_),
  };
  PBEquipSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipSet_descriptor_,
      PBEquipSet::default_instance_,
      PBEquipSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipSet));
  PBTemplate_descriptor_ = file->message_type(4);
  static const int PBTemplate_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, itemset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, configtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, skillset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, equipset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, battlepet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, honorobtain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, honortoexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, levelexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, levelpro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, metierpro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, mine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, npccollect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, ogreproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, petlevelexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, questionexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, showpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, summonbeast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, tplproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, tplprotable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, totaldrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, hierogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, buffimmunity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, lifeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, lifeskillscroll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, titlemanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, magicweaponskillstorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, cdgrouptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, apconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, judgeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, wizardtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, achieveaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, constructexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, talentstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, corpsboss_),
  };
  PBTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplate_descriptor_,
      PBTemplate::default_instance_,
      PBTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplate));
  PBHandinEncourage_descriptor_ = file->message_type(5);
  static const int PBHandinEncourage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, handinitemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, handinitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, handinitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, encouragetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, encourageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, encouragenum_),
  };
  PBHandinEncourage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHandinEncourage_descriptor_,
      PBHandinEncourage::default_instance_,
      PBHandinEncourage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinEncourage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHandinEncourage));
  PBHandinTable_descriptor_ = file->message_type(6);
  static const int PBHandinTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinTable, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinTable, encouragetplid_),
  };
  PBHandinTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHandinTable_descriptor_,
      PBHandinTable::default_instance_,
      PBHandinTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHandinTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHandinTable));
  PBItemBase_descriptor_ = file->message_type(7);
  static const int PBItemBase_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, processtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, pilelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, iconname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, purchaseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, saleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, purchasebindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, salebindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, stopattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, typedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, canuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, disappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, cdgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, lmtmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, validtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, validtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, commonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, eattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, eatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, counttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, lmtlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, lmtusemapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, lmtrepetionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, compid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, inviliddate_),
  };
  PBItemBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBase_descriptor_,
      PBItemBase::default_instance_,
      PBItemBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBase));
  PBItemReturn_descriptor_ = file->message_type(8);
  static const int PBItemReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturn, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturn, timer_),
  };
  PBItemReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemReturn_descriptor_,
      PBItemReturn::default_instance_,
      PBItemReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemReturn));
  PBItemSkillBook_descriptor_ = file->message_type(9);
  static const int PBItemSkillBook_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, succprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, needmoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, needmoney_),
  };
  PBItemSkillBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSkillBook_descriptor_,
      PBItemSkillBook::default_instance_,
      PBItemSkillBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkillBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSkillBook));
  PBItemBindStone_descriptor_ = file->message_type(10);
  static const int PBItemBindStone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBindStone, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBindStone, facegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBindStone, bindstonetype_),
  };
  PBItemBindStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBindStone_descriptor_,
      PBItemBindStone::default_instance_,
      PBItemBindStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBindStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBindStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBindStone));
  PBItemScroll_descriptor_ = file->message_type(11);
  static const int PBItemScroll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemScroll, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemScroll, gettaskid_),
  };
  PBItemScroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemScroll_descriptor_,
      PBItemScroll::default_instance_,
      PBItemScroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemScroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemScroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemScroll));
  PBItemCall_descriptor_ = file->message_type(12);
  static const int PBItemCall_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, callnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, isdestroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, lmtmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, lmtx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, lmty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, lmtwide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, lmtheight_),
  };
  PBItemCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemCall_descriptor_,
      PBItemCall::default_instance_,
      PBItemCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemCall));
  PBItemCard_descriptor_ = file->message_type(13);
  static const int PBItemCard_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, showtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, canexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, canchallenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, skillid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, skillid2_),
  };
  PBItemCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemCard_descriptor_,
      PBItemCard::default_instance_,
      PBItemCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemCard));
  PBItemTeleport_descriptor_ = file->message_type(14);
  static const int PBItemTeleport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleport, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleport, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleport, usetimes_),
  };
  PBItemTeleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemTeleport_descriptor_,
      PBItemTeleport::default_instance_,
      PBItemTeleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemTeleport));
  PBItemReturnPaper_descriptor_ = file->message_type(15);
  static const int PBItemReturnPaper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, posy_),
  };
  PBItemReturnPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemReturnPaper_descriptor_,
      PBItemReturnPaper::default_instance_,
      PBItemReturnPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemReturnPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemReturnPaper));
  PBItemTeleSymbol_descriptor_ = file->message_type(16);
  static const int PBItemTeleSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleSymbol, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleSymbol, teletable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleSymbol, usetimes_),
  };
  PBItemTeleSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemTeleSymbol_descriptor_,
      PBItemTeleSymbol::default_instance_,
      PBItemTeleSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTeleSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemTeleSymbol));
  PBItemStove_descriptor_ = file->message_type(17);
  static const int PBItemStove_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, metierlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, levellimit_),
  };
  PBItemStove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemStove_descriptor_,
      PBItemStove::default_instance_,
      PBItemStove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemStove));
  PBItemPetEgg_descriptor_ = file->message_type(18);
  static const int PBItemPetEgg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, pettempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, needitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, revertprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initadvice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initskillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, initskilllevel_),
  };
  PBItemPetEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemPetEgg_descriptor_,
      PBItemPetEgg::default_instance_,
      PBItemPetEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemPetEgg));
  PBItemPetFood_descriptor_ = file->message_type(19);
  static const int PBItemPetFood_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, fulllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, typemask_),
  };
  PBItemPetFood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemPetFood_descriptor_,
      PBItemPetFood::default_instance_,
      PBItemPetFood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPetFood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemPetFood));
  PBItemRelife_descriptor_ = file->message_type(20);
  static const int PBItemRelife_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, sharecd_),
  };
  PBItemRelife_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemRelife_descriptor_,
      PBItemRelife::default_instance_,
      PBItemRelife_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRelife, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemRelife));
  PBItemSkill_descriptor_ = file->message_type(21);
  static const int PBItemSkill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, sharecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, oprtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, buffid_),
  };
  PBItemSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSkill_descriptor_,
      PBItemSkill::default_instance_,
      PBItemSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSkill));
  PBItemBook_descriptor_ = file->message_type(22);
  static const int PBItemBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBook, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBook, optype_),
  };
  PBItemBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBook_descriptor_,
      PBItemBook::default_instance_,
      PBItemBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBook));
  PBItemUpg_descriptor_ = file->message_type(23);
  static const int PBItemUpg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, luck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, uptype_),
  };
  PBItemUpg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemUpg_descriptor_,
      PBItemUpg::default_instance_,
      PBItemUpg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemUpg));
  PBItemUpgLuck_descriptor_ = file->message_type(24);
  static const int PBItemUpgLuck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, incluck1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, incluck2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, incluck3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, level_),
  };
  PBItemUpgLuck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemUpgLuck_descriptor_,
      PBItemUpgLuck::default_instance_,
      PBItemUpgLuck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLuck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemUpgLuck));
  PBItemUpgLeast_descriptor_ = file->message_type(25);
  static const int PBItemUpgLeast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, incluck1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, incluck2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, type_),
  };
  PBItemUpgLeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemUpgLeast_descriptor_,
      PBItemUpgLeast::default_instance_,
      PBItemUpgLeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUpgLeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemUpgLeast));
  PBItemRemove_descriptor_ = file->message_type(26);
  static const int PBItemRemove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, low_),
  };
  PBItemRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemRemove_descriptor_,
      PBItemRemove::default_instance_,
      PBItemRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemRemove));
  PBItemChange_descriptor_ = file->message_type(27);
  static const int PBItemChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, metierrequire_),
  };
  PBItemChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemChange_descriptor_,
      PBItemChange::default_instance_,
      PBItemChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemChange));
  PBItemQuestion_descriptor_ = file->message_type(28);
  static const int PBItemQuestion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, questionrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, expaddrae_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, eachtimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, totaltimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, repeattimeallowed_),
  };
  PBItemQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemQuestion_descriptor_,
      PBItemQuestion::default_instance_,
      PBItemQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemQuestion));
  PBItemTask_descriptor_ = file->message_type(29);
  static const int PBItemTask_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, validtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, showtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, gettaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, giveitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, changetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, changeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, failtaskid_),
  };
  PBItemTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemTask_descriptor_,
      PBItemTask::default_instance_,
      PBItemTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemTask));
  PBItemStuff_descriptor_ = file->message_type(30);
  static const int PBItemStuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStuff, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStuff, showcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStuff, composeid_),
  };
  PBItemStuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemStuff_descriptor_,
      PBItemStuff::default_instance_,
      PBItemStuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemStuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemStuff));
  PBItemExp_descriptor_ = file->message_type(31);
  static const int PBItemExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExp, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExp, incrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExp, time_),
  };
  PBItemExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExp_descriptor_,
      PBItemExp::default_instance_,
      PBItemExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExp));
  PBItemChangeCamp_descriptor_ = file->message_type(32);
  static const int PBItemChangeCamp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, m_giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, m_cd_time_),
  };
  PBItemChangeCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemChangeCamp_descriptor_,
      PBItemChangeCamp::default_instance_,
      PBItemChangeCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemChangeCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemChangeCamp));
  PBComRuneUnit_descriptor_ = file->message_type(33);
  static const int PBComRuneUnit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_whitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_bluenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_purplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, m_runelevel_),
  };
  PBComRuneUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBComRuneUnit_descriptor_,
      PBComRuneUnit::default_instance_,
      PBComRuneUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBComRuneUnit));
  PBComRuneConfig_descriptor_ = file->message_type(34);
  static const int PBComRuneConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, m_uprunerand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, m_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, m_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, m_upruneunit_),
  };
  PBComRuneConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBComRuneConfig_descriptor_,
      PBComRuneConfig::default_instance_,
      PBComRuneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBComRuneConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBComRuneConfig));
  PBItemShout_descriptor_ = file->message_type(35);
  static const int PBItemShout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemShout, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemShout, facegroupid_),
  };
  PBItemShout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemShout_descriptor_,
      PBItemShout::default_instance_,
      PBItemShout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemShout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemShout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemShout));
  PBItemAutoShout_descriptor_ = file->message_type(36);
  static const int PBItemAutoShout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoShout, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoShout, facegroupid_),
  };
  PBItemAutoShout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemAutoShout_descriptor_,
      PBItemAutoShout::default_instance_,
      PBItemAutoShout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoShout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoShout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemAutoShout));
  PBItemPhysic_descriptor_ = file->message_type(37);
  static const int PBItemPhysic_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, hpmaxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, hptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, hpinctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, hpinvvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, mpmaxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, mptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, mpinctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, mpinvvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, sharecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, mppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, maxhppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, maxmppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, lifeskiltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, degreevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, phisictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, apvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, color_),
  };
  PBItemPhysic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemPhysic_descriptor_,
      PBItemPhysic::default_instance_,
      PBItemPhysic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemPhysic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemPhysic));
  PBItemHorse_descriptor_ = file->message_type(38);
  static const int PBItemHorse_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, metierlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, personlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, increasespeedper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, sharecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, speedbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, usingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, showtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, offhorseprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, offbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, initap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, deltaap_),
  };
  PBItemHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemHorse_descriptor_,
      PBItemHorse::default_instance_,
      PBItemHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemHorse));
  PBStuff_descriptor_ = file->message_type(39);
  static const int PBStuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStuff, stuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStuff, number_),
  };
  PBStuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStuff_descriptor_,
      PBStuff::default_instance_,
      PBStuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStuff));
  PBProduct_descriptor_ = file->message_type(40);
  static const int PBProduct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduct, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduct, percent_),
  };
  PBProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProduct_descriptor_,
      PBProduct::default_instance_,
      PBProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProduct));
  PBItemBluePrint_descriptor_ = file->message_type(41);
  static const int PBItemBluePrint_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, needskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, needskilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, producecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, producecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, obtainexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, stuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, product_),
  };
  PBItemBluePrint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBluePrint_descriptor_,
      PBItemBluePrint::default_instance_,
      PBItemBluePrint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBluePrint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBluePrint));
  PBItemRune_descriptor_ = file->message_type(42);
  static const int PBItemRune_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, insertcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, propertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, runeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, showcolor_),
  };
  PBItemRune_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemRune_descriptor_,
      PBItemRune::default_instance_,
      PBItemRune_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRune, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemRune));
  PBItemJewel_descriptor_ = file->message_type(43);
  static const int PBItemJewel_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, showcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, unique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, jewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, insertcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, removecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, composecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, newjewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, newrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, carvejewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, carverand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, carvecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, cancarve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, affectrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, jewcomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, comlevel_),
  };
  PBItemJewel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemJewel_descriptor_,
      PBItemJewel::default_instance_,
      PBItemJewel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemJewel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemJewel));
  PBItemYuanBug_descriptor_ = file->message_type(44);
  static const int PBItemYuanBug_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, yuan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, eggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, yuantype_),
  };
  PBItemYuanBug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemYuanBug_descriptor_,
      PBItemYuanBug::default_instance_,
      PBItemYuanBug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanBug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemYuanBug));
  PBItemYuanEgg_descriptor_ = file->message_type(45);
  static const int PBItemYuanEgg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, maxequip_),
  };
  PBItemYuanEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemYuanEgg_descriptor_,
      PBItemYuanEgg::default_instance_,
      PBItemYuanEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemYuanEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemYuanEgg));
  PBItemSequence_descriptor_ = file->message_type(46);
  static const int PBItemSequence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSequence, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSequence, sequence_),
  };
  PBItemSequence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSequence_descriptor_,
      PBItemSequence::default_instance_,
      PBItemSequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSequence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSequence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSequence));
  PBEquipment_descriptor_ = file->message_type(47);
  static const int PBEquipment_offsets_[62] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, modalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, showlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, showcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, strrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, conrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, starequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, wisrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, sprrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, metierrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, levelrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, sexrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, yuanvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, equipdurability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, basemendcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, npcabrasionrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, playerabrasionrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, canupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, upgcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, needbindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, upgpropertyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, upgvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, maxslotnumber1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, maxslotnumber2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, propertypercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, propertytableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, propertypercentex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, propertytableidex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, pattackdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, judgepercent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, judgepercent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, resdefpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, resattpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, resdefvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, resattvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, suitpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, mattackdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, opencharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, addcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, judgecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, rejudgecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, defupgcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, defchangecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, attupgcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, attchangecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, candefupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, canattupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, bindbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, multicompose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, canchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, changecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, cansplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, splitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, splitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, splitcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, upgextra1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, upgextra2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, extcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, resisttran_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, isshenqi_),
  };
  PBEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipment_descriptor_,
      PBEquipment::default_instance_,
      PBEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipment));
  PBEquipFashion_descriptor_ = file->message_type(48);
  static const int PBEquipFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipFashion, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipFashion, buffid_),
  };
  PBEquipFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipFashion_descriptor_,
      PBEquipFashion::default_instance_,
      PBEquipFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipFashion));
  PBEquipWeapon_descriptor_ = file->message_type(49);
  static const int PBEquipWeapon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, weapontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, attacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, attackdistance_),
  };
  PBEquipWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipWeapon_descriptor_,
      PBEquipWeapon::default_instance_,
      PBEquipWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipWeapon));
  PBEquipArmor_descriptor_ = file->message_type(50);
  static const int PBEquipArmor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipArmor, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipArmor, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipArmor, armorsuit_),
  };
  PBEquipArmor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipArmor_descriptor_,
      PBEquipArmor::default_instance_,
      PBEquipArmor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipArmor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipArmor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipArmor));
  PBTemplateProperty_descriptor_ = file->message_type(51);
  static const int PBTemplateProperty_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, propertyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, propertyfunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, canout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, intminvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, intmaxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, floatminvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, floatmaxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, area_),
  };
  PBTemplateProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplateProperty_descriptor_,
      PBTemplateProperty::default_instance_,
      PBTemplateProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplateProperty));
  PBPropertyPercent_descriptor_ = file->message_type(52);
  static const int PBPropertyPercent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyPercent, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyPercent, percent_),
  };
  PBPropertyPercent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPropertyPercent_descriptor_,
      PBPropertyPercent::default_instance_,
      PBPropertyPercent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyPercent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyPercent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPropertyPercent));
  PBTemplatePropertyTable_descriptor_ = file->message_type(53);
  static const int PBTemplatePropertyTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplatePropertyTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplatePropertyTable, property_),
  };
  PBTemplatePropertyTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplatePropertyTable_descriptor_,
      PBTemplatePropertyTable::default_instance_,
      PBTemplatePropertyTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplatePropertyTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplatePropertyTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplatePropertyTable));
  PBMetier_descriptor_ = file->message_type(54);
  static const int PBMetier_offsets_[112] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, metiername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, generid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, propertypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, walkspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, runspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, inithp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initpattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initpdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initmattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initmdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initabnresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initwindresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initfireresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initwaterresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initlightresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initearthresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initsadowresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initdeathrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initdeathvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initnmlhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initnormalduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initskillduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltahp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltapattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltapdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltamattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltamdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltaabnresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltawindresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltafireresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltawaterresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltalightresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltaearthresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltashadowresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltadeathrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltadeathvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltanormalhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltanormalduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltaskillduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pattackperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathvalueperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxhpperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pdefensepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, hprspeedpercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxhppersta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, abnresistpersta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mattackperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxmpperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathvalueperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mdefenseperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxmpperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mprspeedperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalhprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalsithprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, battlehprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, battlesithprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalmprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalsitmprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, battlemprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, battlesitmprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initignoreduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltaignoreduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mattackperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathrateperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxmpperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pdefenseperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mdefenseperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, nmlhitrateperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalduckperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, ignoreduckperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pattackpercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mattackpercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathratepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathvaluepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxhppercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxmppercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mdefensepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, nmlhitratepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalduckpercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, ignoreduckpercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, preducepersta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mreducepersta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pattackperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxhpperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathrateperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pdefenseperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mdefenseperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, nmlhitrateperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalduckperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, ignoreduckperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pattackperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, mattackperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathrateperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathvalueperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, maxhpperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, pdefenseperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, nmlhitrateperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, normalduckperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, ignoreduckperspr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, initdeathdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deltadeathdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathdefenseperstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathdefensepercon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathdefensepersta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathdefenseperwis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, deathdefenseperspr_),
  };
  PBMetier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMetier_descriptor_,
      PBMetier::default_instance_,
      PBMetier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMetier));
  PBNpc_descriptor_ = file->message_type(55);
  static const int PBNpc_offsets_[98] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, ogre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, functype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, talk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, talkserviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, sellserviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mailservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, storageservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, upgservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, eqtbindservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, welfareservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, studyskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, townx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, towny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, storagetasknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, storagetaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, downlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, uplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, diploidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, resetpservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, familyservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, changeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, judgeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, activityservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, exchangeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, honorservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, lifeskillservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, bidday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, bidhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, bidminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, coprsbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, minbidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, battlecity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwprojudgeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwskilljudgeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, equipexchangeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, exchangetableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwclearpointservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwsecondjudgeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, unionservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, countryservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, friendservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, countrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, goldenybservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, chairmantaskservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, chairmantaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, marriageservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, matrixservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, familytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, stonebuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, disappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, refreshservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, pedalindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, directservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, extraservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, warservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, waroptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, warvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, warcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, equiplevelservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, warhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, fangcunservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, resisttran_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, fbfunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, fbfunc_parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, fbfunc_parame2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, fbfunc_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, taxservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, changecampservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, weakprotectservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, yaoqianshurank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, handin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, specialevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, yaoqianinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, treasurebowl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwdecomposeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwimprintservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwupdateservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwupdateexservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidstartday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidstarthour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, corpsbidstartminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, lastoneservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, familybidstarthour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, familybidstartminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, mwqlcomposeservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, randomteleservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, introducemapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, shituservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, swornservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, globalwarservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, superequipexchange_),
  };
  PBNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBNpc_descriptor_,
      PBNpc::default_instance_,
      PBNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBNpc));
  PBSellItem_descriptor_ = file->message_type(56);
  static const int PBSellItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, pagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, itemgoldprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, itemrefreshday_),
  };
  PBSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSellItem_descriptor_,
      PBSellItem::default_instance_,
      PBSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSellItem));
  PBSellTable_descriptor_ = file->message_type(57);
  static const int PBSellTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, selltabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, warcitymapid_),
  };
  PBSellTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSellTable_descriptor_,
      PBSellTable::default_instance_,
      PBSellTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSellTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSellTable));
  PBTotalDrop_descriptor_ = file->message_type(58);
  static const int PBTotalDrop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTotalDrop, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTotalDrop, droptableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTotalDrop, dropcount_),
  };
  PBTotalDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTotalDrop_descriptor_,
      PBTotalDrop::default_instance_,
      PBTotalDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTotalDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTotalDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTotalDrop));
  PBDropItem_descriptor_ = file->message_type(59);
  static const int PBDropItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, dropitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, dropprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, levelprobablity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, show_),
  };
  PBDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropItem_descriptor_,
      PBDropItem::default_instance_,
      PBDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropItem));
  PBDropTable_descriptor_ = file->message_type(60);
  static const int PBDropTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, dropturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, dropnumberrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, dropitem_),
  };
  PBDropTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropTable_descriptor_,
      PBDropTable::default_instance_,
      PBDropTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropTable));
  PBNPCCollect_descriptor_ = file->message_type(61);
  static const int PBNPCCollect_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, skillkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, collectdegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, probality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, degreevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, apcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, itemprobality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, collectlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, extraitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, extraitemprobality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, collecttasktype_),
  };
  PBNPCCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBNPCCollect_descriptor_,
      PBNPCCollect::default_instance_,
      PBNPCCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNPCCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBNPCCollect));
  PBOgreProperty_descriptor_ = file->message_type(62);
  static const int PBOgreProperty_offsets_[66] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, ogretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, strategyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, displayelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, attackrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, hprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mprspeeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, runspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, pattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, pattackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, preduceper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mattackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, mreduceper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, deathrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, deathvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, deathdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, normalhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, normalduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, ignoreduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, resdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, resatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, needdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, patroltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, isinitiative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, walkdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, teletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, enmitydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, enmitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, cleartimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, initmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, deltamoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, tranid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, searchdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, resshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, failtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, justicevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, buffimmunity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, obtaintitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, lmtlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, redstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, ogreevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, corpsvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, dropsdescid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, diffcultindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, diffcultaward_),
  };
  PBOgreProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOgreProperty_descriptor_,
      PBOgreProperty::default_instance_,
      PBOgreProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOgreProperty));
  PBBox_Click_descriptor_ = file->message_type(63);
  static const int PBBox_Click_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBox_Click, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBox_Click, probability_),
  };
  PBBox_Click_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBox_Click_descriptor_,
      PBBox_Click::default_instance_,
      PBBox_Click_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBox_Click, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBox_Click, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBox_Click));
  PBOgreBox_descriptor_ = file->message_type(64);
  static const int PBOgreBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, ogreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, click_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, boxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, keyid_),
  };
  PBOgreBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOgreBox_descriptor_,
      PBOgreBox::default_instance_,
      PBOgreBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOgreBox));
  PBShowPet_descriptor_ = file->message_type(65);
  static const int PBShowPet_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, iconname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, levelrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, exceedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, petitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, revertcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, initstorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, levelincstorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, incstorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, exppermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, repletionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, repletionhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, reverthpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, minrepletion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxrepletion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, expspeedrate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, minrepletion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxrepletion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, expspeedrate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, minrepletion3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxrepletion3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, expspeedrate3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, minrepletion4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxrepletion4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, expspeedrate4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, minrepletion5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, maxrepletion5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, expspeedrate5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, foodcombo_),
  };
  PBShowPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBShowPet_descriptor_,
      PBShowPet::default_instance_,
      PBShowPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShowPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBShowPet));
  PBBattlePet_descriptor_ = file->message_type(66);
  static const int PBBattlePet_offsets_[67] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, iconname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, levelrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, exceedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, petitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, revertcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, repletionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, minrepletion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxrepletion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, expspeedrate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hprate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, attackrate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, minrepletion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxrepletion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, expspeedrate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hprate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, attackrate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, minrepletion3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxrepletion3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, expspeedrate3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hprate3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, attackrate3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, minrepletion4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxrepletion4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, expspeedrate4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hprate4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, attackrate4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, minrepletion5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, maxrepletion5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, expspeedrate5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hprate5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, attackrate5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, hppotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mpvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mppotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, pattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, pattackpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mattackpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, pdefencepotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mdefencepotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, presist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, presistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, mresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, abnresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, abnresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, fireresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, fireresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, windresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, windresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, lightresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, lightresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, shadowresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, shadowresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, waterresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, waterresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, earthresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, earthresistpotential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, foodcombo_),
  };
  PBBattlePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattlePet_descriptor_,
      PBBattlePet::default_instance_,
      PBBattlePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattlePet));
  PBMineOutput_descriptor_ = file->message_type(67);
  static const int PBMineOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOutput, stuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOutput, percent_),
  };
  PBMineOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMineOutput_descriptor_,
      PBMineOutput::default_instance_,
      PBMineOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMineOutput));
  PBMineOgre_descriptor_ = file->message_type(68);
  static const int PBMineOgre_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOgre, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOgre, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOgre, percent_),
  };
  PBMineOgre_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMineOgre_descriptor_,
      PBMineOgre::default_instance_,
      PBMineOgre_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOgre, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineOgre, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMineOgre));
  PBMine_descriptor_ = file->message_type(69);
  static const int PBMine_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, levelrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, toolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, decrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, minetimelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, minetimehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, mineogre_),
  };
  PBMine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMine_descriptor_,
      PBMine::default_instance_,
      PBMine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMine));
  PBSkillTreeNode_descriptor_ = file->message_type(70);
  static const int PBSkillTreeNode_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, needskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, needskillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, needgenerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, needgenerpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, needbook_),
  };
  PBSkillTreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillTreeNode_descriptor_,
      PBSkillTreeNode::default_instance_,
      PBSkillTreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillTreeNode));
  PBSkillTree_descriptor_ = file->message_type(71);
  static const int PBSkillTree_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, genername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, generid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, skillnode_),
  };
  PBSkillTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillTree_descriptor_,
      PBSkillTree::default_instance_,
      PBSkillTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillTree));
  PBCost_descriptor_ = file->message_type(72);
  static const int PBCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCost, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCost, costparam_),
  };
  PBCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCost_descriptor_,
      PBCost::default_instance_,
      PBCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCost));
  PBUseCondition_descriptor_ = file->message_type(73);
  static const int PBUseCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseCondition, conditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseCondition, param_),
  };
  PBUseCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUseCondition_descriptor_,
      PBUseCondition::default_instance_,
      PBUseCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUseCondition));
  PBSkill_descriptor_ = file->message_type(74);
  static const int PBSkill_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, requireweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, generid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilldescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, firetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, anitime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, firetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, needdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillfuncid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, parameter1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillfuncid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, parameter2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillfuncid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, parameter3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillfuncid4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, parameter4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, autorepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, autonormalattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, autocoolingskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, usecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, studygold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, studybindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilllistshowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilltemptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, studyskilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, insertautostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, breakautostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, needtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, needpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, actioncamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, damagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, bindstudygold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, attackfix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, attackper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, resvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, ismwskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skilltypedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, ismwoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, cdgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, canclean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, targetlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, summonindex_),
  };
  PBSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkill_descriptor_,
      PBSkill::default_instance_,
      PBSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkill));
  PBAureoleType_descriptor_ = file->message_type(75);
  static const int PBAureoleType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleType, aureolearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleType, buffid_),
  };
  PBAureoleType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAureoleType_descriptor_,
      PBAureoleType::default_instance_,
      PBAureoleType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAureoleType));
  PBAureoleSkill_descriptor_ = file->message_type(76);
  static const int PBAureoleSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, inceessary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, inceessarytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, aureoledistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, aureoletype_),
  };
  PBAureoleSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAureoleSkill_descriptor_,
      PBAureoleSkill::default_instance_,
      PBAureoleSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAureoleSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAureoleSkill));
  PBNormalSkill_descriptor_ = file->message_type(77);
  static const int PBNormalSkill_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, skillhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, mindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, maxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, efktmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, attackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, randparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, buffgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, continuedrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, continuedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, continuednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, ignorearmor_),
  };
  PBNormalSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBNormalSkill_descriptor_,
      PBNormalSkill::default_instance_,
      PBNormalSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNormalSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBNormalSkill));
  PBTrapSkill_descriptor_ = file->message_type(78);
  static const int PBTrapSkill_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, touchrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, applyrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, trapres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, buffgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, effectmaxnumber_),
  };
  PBTrapSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTrapSkill_descriptor_,
      PBTrapSkill::default_instance_,
      PBTrapSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrapSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTrapSkill));
  PBBuffFunc_descriptor_ = file->message_type(79);
  static const int PBBuffFunc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffFunc, functype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffFunc, parame_),
  };
  PBBuffFunc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuffFunc_descriptor_,
      PBBuffFunc::default_instance_,
      PBBuffFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffFunc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffFunc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuffFunc));
  PBBuff_descriptor_ = file->message_type(80);
  static const int PBBuff_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffserviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, idenvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, firstactivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, bufffunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, bufficon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, resisttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, cancelbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, enablebattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffani_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffdiedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, timertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffclear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, bufflineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffmaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, countrybuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffsuperposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, offremove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, removecountid_),
  };
  PBBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuff_descriptor_,
      PBBuff::default_instance_,
      PBBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuff));
  PBLevelExp_descriptor_ = file->message_type(81);
  static const int PBLevelExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelExp, levelexp_),
  };
  PBLevelExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLevelExp_descriptor_,
      PBLevelExp::default_instance_,
      PBLevelExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLevelExp));
  PBSingleMoneyLmt_descriptor_ = file->message_type(82);
  static const int PBSingleMoneyLmt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, bagmoneylmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, bagbindmoneylmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, storagemoneylmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, storagebindmoneylmt_),
  };
  PBSingleMoneyLmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleMoneyLmt_descriptor_,
      PBSingleMoneyLmt::default_instance_,
      PBSingleMoneyLmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleMoneyLmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleMoneyLmt));
  PBLevelMoneyLmt_descriptor_ = file->message_type(83);
  static const int PBLevelMoneyLmt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelMoneyLmt, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelMoneyLmt, lmttable_),
  };
  PBLevelMoneyLmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLevelMoneyLmt_descriptor_,
      PBLevelMoneyLmt::default_instance_,
      PBLevelMoneyLmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelMoneyLmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelMoneyLmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLevelMoneyLmt));
  PBPetLevelExp_descriptor_ = file->message_type(84);
  static const int PBPetLevelExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetLevelExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetLevelExp, levelexp_),
  };
  PBPetLevelExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPetLevelExp_descriptor_,
      PBPetLevelExp::default_instance_,
      PBPetLevelExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetLevelExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetLevelExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPetLevelExp));
  PBProduceExp_descriptor_ = file->message_type(85);
  static const int PBProduceExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceExp, levelexp_),
  };
  PBProduceExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProduceExp_descriptor_,
      PBProduceExp::default_instance_,
      PBProduceExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProduceExp));
  PBUpg_descriptor_ = file->message_type(86);
  static const int PBUpg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, inclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, extsuccess_),
  };
  PBUpg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUpg_descriptor_,
      PBUpg::default_instance_,
      PBUpg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUpg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUpg));
  PBEquipUpg_descriptor_ = file->message_type(87);
  static const int PBEquipUpg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipUpg, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipUpg, equipupg_),
  };
  PBEquipUpg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipUpg_descriptor_,
      PBEquipUpg::default_instance_,
      PBEquipUpg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipUpg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipUpg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipUpg));
  PBSuitProducer_descriptor_ = file->message_type(88);
  static const int PBSuitProducer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, propertytempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, upgtempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, exttempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, describetext_),
  };
  PBSuitProducer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSuitProducer_descriptor_,
      PBSuitProducer::default_instance_,
      PBSuitProducer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitProducer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSuitProducer));
  PBSuitNormal_descriptor_ = file->message_type(89);
  static const int PBSuitNormal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, equiptempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, activetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, propertytempid_),
  };
  PBSuitNormal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSuitNormal_descriptor_,
      PBSuitNormal::default_instance_,
      PBSuitNormal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSuitNormal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSuitNormal));
  PBSpell_descriptor_ = file->message_type(90);
  static const int PBSpell_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, suitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, letterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, require_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, propertytempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, describetext_),
  };
  PBSpell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSpell_descriptor_,
      PBSpell::default_instance_,
      PBSpell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSpell));
  PBProduceEquip_descriptor_ = file->message_type(91);
  static const int PBProduceEquip_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, detailid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, detailid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, materialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, materialrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemrand1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemrand2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, itemrand3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, bindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, exp_),
  };
  PBProduceEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProduceEquip_descriptor_,
      PBProduceEquip::default_instance_,
      PBProduceEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProduceEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProduceEquip));
  PBProducePhysic_descriptor_ = file->message_type(92);
  static const int PBProducePhysic_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, materialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, bindmoney_),
  };
  PBProducePhysic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProducePhysic_descriptor_,
      PBProducePhysic::default_instance_,
      PBProducePhysic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProducePhysic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProducePhysic));
  PBOpenSlot_descriptor_ = file->message_type(93);
  static const int PBOpenSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOpenSlot, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOpenSlot, slotlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOpenSlot, slotnumber_),
  };
  PBOpenSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOpenSlot_descriptor_,
      PBOpenSlot::default_instance_,
      PBOpenSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOpenSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOpenSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOpenSlot));
  PBCompose_descriptor_ = file->message_type(94);
  static const int PBCompose_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, materialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, itemnum_),
  };
  PBCompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCompose_descriptor_,
      PBCompose::default_instance_,
      PBCompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCompose));
  PBMultiCompose_descriptor_ = file->message_type(95);
  static const int PBMultiCompose_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, materialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, lifeskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, lifeskillkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, specializeddegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, lifecomposetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, creatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, studymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, skillcreatdegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, probality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, degreevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, apneedcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, minvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, composetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, equipmetiertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, srcequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, desequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, upgitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, upgitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, needvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, needvalue_),
  };
  PBMultiCompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMultiCompose_descriptor_,
      PBMultiCompose::default_instance_,
      PBMultiCompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiCompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMultiCompose));
  PBTeleTable_descriptor_ = file->message_type(96);
  static const int PBTeleTable_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, bindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, needtempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, needbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, needlevel_),
  };
  PBTeleTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeleTable_descriptor_,
      PBTeleTable::default_instance_,
      PBTeleTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeleTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeleTable));
  PBData_descriptor_ = file->message_type(97);
  static const int PBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBData, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBData, levelfix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBData, teamfix_),
  };
  PBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBData_descriptor_,
      PBData::default_instance_,
      PBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBData));
  PBPetData_descriptor_ = file->message_type(98);
  static const int PBPetData_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, namecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, attacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, pattackup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, pattacklow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, mattackup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, mattacklow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, hprspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, deathrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, deathvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, normalduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, skillduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, pattackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, mattackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, preduceper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, mreduceper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, deathdefense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, ignoreduck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, resdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, resatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, attpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, defpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, hppercent_),
  };
  PBPetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPetData_descriptor_,
      PBPetData::default_instance_,
      PBPetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPetData));
  PBSummonBeast_descriptor_ = file->message_type(99);
  static const int PBSummonBeast_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, levelupdelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, petdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, attackfrequency_),
  };
  PBSummonBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSummonBeast_descriptor_,
      PBSummonBeast::default_instance_,
      PBSummonBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSummonBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSummonBeast));
  PBBeginner_descriptor_ = file->message_type(100);
  static const int PBBeginner_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, equipitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, equipitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, baggageitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, baggageitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, strnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, connum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, stanum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, wisnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, sprnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, poxx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, poxx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, poxy1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, poxy2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skillid6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, skilllevel6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, beginnerprotectlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, transprotecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, deathdurarate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, canmendusebindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, beginnerap_),
  };
  PBBeginner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBeginner_descriptor_,
      PBBeginner::default_instance_,
      PBBeginner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBeginner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBeginner));
  PBDropLevel_descriptor_ = file->message_type(101);
  static const int PBDropLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropLevel, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropLevel, ran_),
  };
  PBDropLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropLevel_descriptor_,
      PBDropLevel::default_instance_,
      PBDropLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropLevel));
  PBOgreTran_descriptor_ = file->message_type(102);
  static const int PBOgreTran_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, pa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, pd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, ignore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, death_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, resdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, resatt_),
  };
  PBOgreTran_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOgreTran_descriptor_,
      PBOgreTran::default_instance_,
      PBOgreTran_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOgreTran, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOgreTran));
  PBMetierPro_descriptor_ = file->message_type(103);
  static const int PBMetierPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, metierrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, metierproperty_),
  };
  PBMetierPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMetierPro_descriptor_,
      PBMetierPro::default_instance_,
      PBMetierPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMetierPro));
  PBLevelProperty_descriptor_ = file->message_type(104);
  static const int PBLevelProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelProperty, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelProperty, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelProperty, levelproperty_),
  };
  PBLevelProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLevelProperty_descriptor_,
      PBLevelProperty::default_instance_,
      PBLevelProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLevelProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLevelProperty));
  PBHonorToExp_descriptor_ = file->message_type(105);
  static const int PBHonorToExp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, explimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, itemhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, itemlimit_),
  };
  PBHonorToExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHonorToExp_descriptor_,
      PBHonorToExp::default_instance_,
      PBHonorToExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorToExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHonorToExp));
  PBHonorObtain_descriptor_ = file->message_type(106);
  static const int PBHonorObtain_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, inlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, outlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, outdieexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, indieexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, borderdieexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, outlowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, outhighexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, inlowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, inhighexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, borderlowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, borderhighexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, lostlowexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, losthighexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, basicexp_),
  };
  PBHonorObtain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHonorObtain_descriptor_,
      PBHonorObtain::default_instance_,
      PBHonorObtain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorObtain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHonorObtain));
  PBDiploidTable_descriptor_ = file->message_type(107);
  static const int PBDiploidTable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, validmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, typenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, buffid_),
  };
  PBDiploidTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDiploidTable_descriptor_,
      PBDiploidTable::default_instance_,
      PBDiploidTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDiploidTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDiploidTable));
  PBRedStone_descriptor_ = file->message_type(108);
  static const int PBRedStone_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, baseitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, magiciconname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, guagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, magicsustaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, exptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, redstonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, familyexprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, exptableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, numbereffected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, keybuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, encbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, encpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, iseternal_),
  };
  PBRedStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRedStone_descriptor_,
      PBRedStone::default_instance_,
      PBRedStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRedStone));
  PBRedStoneExpTable_descriptor_ = file->message_type(109);
  static const int PBRedStoneExpTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStoneExpTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStoneExpTable, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStoneExpTable, effectname_),
  };
  PBRedStoneExpTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRedStoneExpTable_descriptor_,
      PBRedStoneExpTable::default_instance_,
      PBRedStoneExpTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStoneExpTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRedStoneExpTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRedStoneExpTable));
  PBReliveTable_descriptor_ = file->message_type(110);
  static const int PBReliveTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBReliveTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBReliveTable, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBReliveTable, rate_),
  };
  PBReliveTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBReliveTable_descriptor_,
      PBReliveTable::default_instance_,
      PBReliveTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBReliveTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBReliveTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBReliveTable));
  PBQuestionExp_descriptor_ = file->message_type(111);
  static const int PBQuestionExp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, npcquestionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, npcexpaddrate_),
  };
  PBQuestionExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBQuestionExp_descriptor_,
      PBQuestionExp::default_instance_,
      PBQuestionExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestionExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBQuestionExp));
  PBBindChargeTable_descriptor_ = file->message_type(112);
  static const int PBBindChargeTable_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, moneybindneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, canbindusebm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, moneyunbindneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, unbindusebm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, moneyresumebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, canresumebind_),
  };
  PBBindChargeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBindChargeTable_descriptor_,
      PBBindChargeTable::default_instance_,
      PBBindChargeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBindChargeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBindChargeTable));
  PBMinePos_descriptor_ = file->message_type(113);
  static const int PBMinePos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, probability_),
  };
  PBMinePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMinePos_descriptor_,
      PBMinePos::default_instance_,
      PBMinePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMinePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMinePos));
  PBMineEvent_descriptor_ = file->message_type(114);
  static const int PBMineEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineEvent, touchrate_),
  };
  PBMineEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMineEvent_descriptor_,
      PBMineEvent::default_instance_,
      PBMineEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMineEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMineEvent));
  PBItemMineMap_descriptor_ = file->message_type(115);
  static const int PBItemMineMap_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, minepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, mineevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, droptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, decbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, ogreid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, ogrenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, special_),
  };
  PBItemMineMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemMineMap_descriptor_,
      PBItemMineMap::default_instance_,
      PBItemMineMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMineMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemMineMap));
  PBRelatively_Pos_descriptor_ = file->message_type(116);
  static const int PBRelatively_Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelatively_Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelatively_Pos, y_),
  };
  PBRelatively_Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRelatively_Pos_descriptor_,
      PBRelatively_Pos::default_instance_,
      PBRelatively_Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelatively_Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelatively_Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRelatively_Pos));
  PBBlock_descriptor_ = file->message_type(117);
  static const int PBBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBlock, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBlock, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBlock, pos_),
  };
  PBBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBlock_descriptor_,
      PBBlock::default_instance_,
      PBBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBlock));
  PBPKDrop_descriptor_ = file->message_type(118);
  static const int PBPKDrop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, equipdroprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, bagdroprate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, bagdroprate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, goprisonrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, prisontime_),
  };
  PBPKDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPKDrop_descriptor_,
      PBPKDrop::default_instance_,
      PBPKDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPKDrop));
  PBPKValueTable_descriptor_ = file->message_type(119);
  static const int PBPKValueTable_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, navyblue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, cambridgeblue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, white_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, rosiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, carmine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, redtoplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, yellowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, decvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, decexprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, toplimitdecexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, pricechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, freemapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, freeposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, freeposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, prisontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, basepkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, pkvaluelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, droprateinenemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, prisonbuffid_),
  };
  PBPKValueTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPKValueTable_descriptor_,
      PBPKValueTable::default_instance_,
      PBPKValueTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPKValueTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPKValueTable));
  PBItemToken_descriptor_ = file->message_type(120);
  static const int PBItemToken_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, ogreid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, ogrenum_),
  };
  PBItemToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemToken_descriptor_,
      PBItemToken::default_instance_,
      PBItemToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemToken));
  PBItemKitBag_descriptor_ = file->message_type(121);
  static const int PBItemKitBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemKitBag, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemKitBag, indexnum_),
  };
  PBItemKitBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemKitBag_descriptor_,
      PBItemKitBag::default_instance_,
      PBItemKitBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemKitBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemKitBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemKitBag));
  PBItemGiftBag_descriptor_ = file->message_type(122);
  static const int PBItemGiftBag_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, droptableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, minmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, minbindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, minsilveryb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, dropinbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, maxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, maxbindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, maxsilveryb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, checkbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, minexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, maxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, leveltableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, lihuaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, openitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, opentableid_),
  };
  PBItemGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemGiftBag_descriptor_,
      PBItemGiftBag::default_instance_,
      PBItemGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemGiftBag));
  PBItemAdapter_descriptor_ = file->message_type(123);
  static const int PBItemAdapter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, realtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, realtempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, maxlevelminus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, maxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, minvalue_),
  };
  PBItemAdapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemAdapter_descriptor_,
      PBItemAdapter::default_instance_,
      PBItemAdapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAdapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemAdapter));
  PBTplHierogram_descriptor_ = file->message_type(124);
  static const int PBTplHierogram_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, parame2_),
  };
  PBTplHierogram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTplHierogram_descriptor_,
      PBTplHierogram::default_instance_,
      PBTplHierogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplHierogram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTplHierogram));
  PBStep_descriptor_ = file->message_type(125);
  static const int PBStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, skilltree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, maxpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, stagedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, layer_),
  };
  PBStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStep_descriptor_,
      PBStep::default_instance_,
      PBStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStep));
  PBTitle_descriptor_ = file->message_type(126);
  static const int PBTitle_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, obtaincondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, subcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, addproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, ishidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, isreplace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, descrbe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, validtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, isteamtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, detail_),
  };
  PBTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTitle_descriptor_,
      PBTitle::default_instance_,
      PBTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTitle));
  PBTitleManager_descriptor_ = file->message_type(127);
  static const int PBTitleManager_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitleManager, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitleManager, title_),
  };
  PBTitleManager_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTitleManager_descriptor_,
      PBTitleManager::default_instance_,
      PBTitleManager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitleManager, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTitleManager, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTitleManager));
  PBTplBuffImmunity_descriptor_ = file->message_type(128);
  static const int PBTplBuffImmunity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplBuffImmunity, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplBuffImmunity, bufftype_),
  };
  PBTplBuffImmunity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTplBuffImmunity_descriptor_,
      PBTplBuffImmunity::default_instance_,
      PBTplBuffImmunity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplBuffImmunity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplBuffImmunity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTplBuffImmunity));
  PBTemplateTalent_descriptor_ = file->message_type(129);
  static const int PBTemplateTalent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalent, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalent, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalent, exp_),
  };
  PBTemplateTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplateTalent_descriptor_,
      PBTemplateTalent::default_instance_,
      PBTemplateTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplateTalent));
  PBMagicWeaponProIncValue_descriptor_ = file->message_type(130);
  static const int PBMagicWeaponProIncValue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelprocessval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelprocesscurel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelprocesscurelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelkeen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelcalm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelbier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, levelimmortal_),
  };
  PBMagicWeaponProIncValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMagicWeaponProIncValue_descriptor_,
      PBMagicWeaponProIncValue::default_instance_,
      PBMagicWeaponProIncValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponProIncValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMagicWeaponProIncValue));
  PBTemplateLifeSkill_descriptor_ = file->message_type(131);
  static const int PBTemplateLifeSkill_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, lifeskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, lifeskillkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, degreestarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, studymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, skillname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, characternameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, studydegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, subskilllevellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, degreevalue_),
  };
  PBTemplateLifeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplateLifeSkill_descriptor_,
      PBTemplateLifeSkill::default_instance_,
      PBTemplateLifeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateLifeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplateLifeSkill));
  PBDecompondTable_descriptor_ = file->message_type(132);
  static const int PBDecompondTable_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, fstitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, fstprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, secitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, secprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, thirditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, thirdprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, degreeneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, fstitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, secitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, thirditemnum_),
  };
  PBDecompondTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDecompondTable_descriptor_,
      PBDecompondTable::default_instance_,
      PBDecompondTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDecompondTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDecompondTable));
  PBCTemplateDecompound_descriptor_ = file->message_type(133);
  static const int PBCTemplateDecompound_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, whitedecompond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, bluedecompond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, purpledecompond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, degreevalue_),
  };
  PBCTemplateDecompound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCTemplateDecompound_descriptor_,
      PBCTemplateDecompound::default_instance_,
      PBCTemplateDecompound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCTemplateDecompound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCTemplateDecompound));
  PBTplMagicWeaponProIncTable_descriptor_ = file->message_type(134);
  static const int PBTplMagicWeaponProIncTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplMagicWeaponProIncTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplMagicWeaponProIncTable, values_),
  };
  PBTplMagicWeaponProIncTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTplMagicWeaponProIncTable_descriptor_,
      PBTplMagicWeaponProIncTable::default_instance_,
      PBTplMagicWeaponProIncTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplMagicWeaponProIncTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTplMagicWeaponProIncTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTplMagicWeaponProIncTable));
  SingleMWDecomposeData_descriptor_ = file->message_type(135);
  static const int SingleMWDecomposeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, nummin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, nummax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, prob_),
  };
  SingleMWDecomposeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleMWDecomposeData_descriptor_,
      SingleMWDecomposeData::default_instance_,
      SingleMWDecomposeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMWDecomposeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleMWDecomposeData));
  PBMagicWeaponDecomposeTable_descriptor_ = file->message_type(136);
  static const int PBMagicWeaponDecomposeTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, needmoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, items_),
  };
  PBMagicWeaponDecomposeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMagicWeaponDecomposeTable_descriptor_,
      PBMagicWeaponDecomposeTable::default_instance_,
      PBMagicWeaponDecomposeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponDecomposeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMagicWeaponDecomposeTable));
  PBMagicWeaponQuickUpTable_descriptor_ = file->message_type(137);
  static const int PBMagicWeaponQuickUpTable_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, needitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, needitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, needmoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, successprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, newmwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, needlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, leastleve_),
  };
  PBMagicWeaponQuickUpTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMagicWeaponQuickUpTable_descriptor_,
      PBMagicWeaponQuickUpTable::default_instance_,
      PBMagicWeaponQuickUpTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponQuickUpTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMagicWeaponQuickUpTable));
  PBItemMagicWeapon_descriptor_ = file->message_type(138);
  static const int PBItemMagicWeapon_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, showlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, newweaponname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, ummibuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, inithp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initmaxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initmaxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, initspir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, incmaxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, incmaxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, mpincvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, hpincvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, mpincvaluepermagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, hpincvaluepermagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, attackinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, recovinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, maxmpinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, maxhpinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, deadlineinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, canusebook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, getskillscl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, leveltableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, skillboxtableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, dieoffhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, projudgecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, dispresname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, defaultskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, defaultskill2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, judgeefftableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, judgespirtableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, levelquotietytabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, decomposetabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, lvbynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, quickuptabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, upleveltabid_),
  };
  PBItemMagicWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemMagicWeapon_descriptor_,
      PBItemMagicWeapon::default_instance_,
      PBItemMagicWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemMagicWeapon));
  PBSingleSkillStorage_descriptor_ = file->message_type(139);
  static const int PBSingleSkillStorage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleSkillStorage, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleSkillStorage, firstprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleSkillStorage, otherprob_),
  };
  PBSingleSkillStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleSkillStorage_descriptor_,
      PBSingleSkillStorage::default_instance_,
      PBSingleSkillStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleSkillStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleSkillStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleSkillStorage));
  PBItemMagicStone_descriptor_ = file->message_type(140);
  static const int PBItemMagicStone_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, levellimit_),
  };
  PBItemMagicStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemMagicStone_descriptor_,
      PBItemMagicStone::default_instance_,
      PBItemMagicStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemMagicStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemMagicStone));
  PBLifeSkillScroll_descriptor_ = file->message_type(141);
  static const int PBLifeSkillScroll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillScroll, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillScroll, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillScroll, composetype_),
  };
  PBLifeSkillScroll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLifeSkillScroll_descriptor_,
      PBLifeSkillScroll::default_instance_,
      PBLifeSkillScroll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillScroll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillScroll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLifeSkillScroll));
  PBSkillStorage_descriptor_ = file->message_type(142);
  static const int PBSkillStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillStorage, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillStorage, values_),
  };
  PBSkillStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillStorage_descriptor_,
      PBSkillStorage::default_instance_,
      PBSkillStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillStorage));
  PBSkillBoxProperty_descriptor_ = file->message_type(143);
  static const int PBSkillBoxProperty_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxneedval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, initstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, initskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxactmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, skillboxskillstorage_),
  };
  PBSkillBoxProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillBoxProperty_descriptor_,
      PBSkillBoxProperty::default_instance_,
      PBSkillBoxProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBoxProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillBoxProperty));
  PBMagicWeaponSkillBoxProTable_descriptor_ = file->message_type(144);
  static const int PBMagicWeaponSkillBoxProTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponSkillBoxProTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponSkillBoxProTable, values_),
  };
  PBMagicWeaponSkillBoxProTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMagicWeaponSkillBoxProTable_descriptor_,
      PBMagicWeaponSkillBoxProTable::default_instance_,
      PBMagicWeaponSkillBoxProTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponSkillBoxProTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMagicWeaponSkillBoxProTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMagicWeaponSkillBoxProTable));
  PBMWProJudgeEffTable_descriptor_ = file->message_type(145);
  static const int PBMWProJudgeEffTable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, probfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, probsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, showname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, judgelevel_),
  };
  PBMWProJudgeEffTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMWProJudgeEffTable_descriptor_,
      PBMWProJudgeEffTable::default_instance_,
      PBMWProJudgeEffTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeEffTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMWProJudgeEffTable));
  PBMWProJudgeSpirTable_descriptor_ = file->message_type(146);
  static const int PBMWProJudgeSpirTable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, probfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, probsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, showname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, judgelevel_),
  };
  PBMWProJudgeSpirTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMWProJudgeSpirTable_descriptor_,
      PBMWProJudgeSpirTable::default_instance_,
      PBMWProJudgeSpirTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWProJudgeSpirTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMWProJudgeSpirTable));
  PBMWLevelQuotietyTab_descriptor_ = file->message_type(147);
  static const int PBMWLevelQuotietyTab_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, keenquotiety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, calmquotiety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, magicquotiety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, bierquotiety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, immorquotiety_),
  };
  PBMWLevelQuotietyTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMWLevelQuotietyTab_descriptor_,
      PBMWLevelQuotietyTab::default_instance_,
      PBMWLevelQuotietyTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMWLevelQuotietyTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMWLevelQuotietyTab));
  PBFuncItem_descriptor_ = file->message_type(148);
  static const int PBFuncItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFuncItem, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFuncItem, funccode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFuncItem, params_),
  };
  PBFuncItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFuncItem_descriptor_,
      PBFuncItem::default_instance_,
      PBFuncItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFuncItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFuncItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFuncItem));
  PBEquipExchangeTable_descriptor_ = file->message_type(149);
  static const int PBEquipExchangeTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipExchangeTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipExchangeTable, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipExchangeTable, exchangetype_),
  };
  PBEquipExchangeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipExchangeTable_descriptor_,
      PBEquipExchangeTable::default_instance_,
      PBEquipExchangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipExchangeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipExchangeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipExchangeTable));
  PBMultiBuffEvent_descriptor_ = file->message_type(150);
  static const int PBMultiBuffEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, teamflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, repetionindex_),
  };
  PBMultiBuffEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMultiBuffEvent_descriptor_,
      PBMultiBuffEvent::default_instance_,
      PBMultiBuffEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuffEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMultiBuffEvent));
  PBMultiBuff_descriptor_ = file->message_type(151);
  static const int PBMultiBuff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, buffevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, newbuff_),
  };
  PBMultiBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMultiBuff_descriptor_,
      PBMultiBuff::default_instance_,
      PBMultiBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMultiBuff));
  PBCDGroupTable_descriptor_ = file->message_type(152);
  static const int PBCDGroupTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCDGroupTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCDGroupTable, cdtime_),
  };
  PBCDGroupTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCDGroupTable_descriptor_,
      PBCDGroupTable::default_instance_,
      PBCDGroupTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCDGroupTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCDGroupTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCDGroupTable));
  PBMetierAp_descriptor_ = file->message_type(153);
  static const int PBMetierAp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierAp, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierAp, ap_),
  };
  PBMetierAp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMetierAp_descriptor_,
      PBMetierAp::default_instance_,
      PBMetierAp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierAp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMetierAp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMetierAp));
  PBApConfig_descriptor_ = file->message_type(154);
  static const int PBApConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, consumehook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, worldchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, campchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, incapmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, metierap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, redphysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, bluephysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, apphysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, fbhpphysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, fbmpphysic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, mendphysic_),
  };
  PBApConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApConfig_descriptor_,
      PBApConfig::default_instance_,
      PBApConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApConfig));
  PBLightTable_descriptor_ = file->message_type(155);
  static const int PBLightTable_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, levelpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, jewelpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, levelgrade1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, jewelgrade1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, levelgrade2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, jewelgrade2_),
  };
  PBLightTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLightTable_descriptor_,
      PBLightTable::default_instance_,
      PBLightTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLightTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLightTable));
  PBWizardTable_descriptor_ = file->message_type(156);
  static const int PBWizardTable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, keeprand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, trendrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, trendresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, money_),
  };
  PBWizardTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWizardTable_descriptor_,
      PBWizardTable::default_instance_,
      PBWizardTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizardTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWizardTable));
  PBJudgeLevel_descriptor_ = file->message_type(157);
  static const int PBJudgeLevel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, judgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, levelmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, levelmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, leveltype_),
  };
  PBJudgeLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBJudgeLevel_descriptor_,
      PBJudgeLevel::default_instance_,
      PBJudgeLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBJudgeLevel));
  PBJudgeConfig_descriptor_ = file->message_type(158);
  static const int PBJudgeConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, opencd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, judgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, scorebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, scorerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, scorelevel_),
  };
  PBJudgeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBJudgeConfig_descriptor_,
      PBJudgeConfig::default_instance_,
      PBJudgeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBJudgeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBJudgeConfig));
  PBPaperValue_descriptor_ = file->message_type(159);
  static const int PBPaperValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPaperValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPaperValue, probality_),
  };
  PBPaperValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPaperValue_descriptor_,
      PBPaperValue::default_instance_,
      PBPaperValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPaperValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPaperValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPaperValue));
  PBItemRedPaper_descriptor_ = file->message_type(160);
  static const int PBItemRedPaper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, basecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, moneyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, bindmoneyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, redpapertype_),
  };
  PBItemRedPaper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemRedPaper_descriptor_,
      PBItemRedPaper::default_instance_,
      PBItemRedPaper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRedPaper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemRedPaper));
  PBTrend_descriptor_ = file->message_type(161);
  static const int PBTrend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, desc_),
  };
  PBTrend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTrend_descriptor_,
      PBTrend::default_instance_,
      PBTrend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTrend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTrend));
  PBAward_descriptor_ = file->message_type(162);
  static const int PBAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAward, itemnum_),
  };
  PBAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAward_descriptor_,
      PBAward::default_instance_,
      PBAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAward));
  PBAchieveAward_descriptor_ = file->message_type(163);
  static const int PBAchieveAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, awardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, sysmailid_),
  };
  PBAchieveAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAchieveAward_descriptor_,
      PBAchieveAward::default_instance_,
      PBAchieveAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAchieveAward));
  PBPower_descriptor_ = file->message_type(164);
  static const int PBPower_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, usetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, construct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, starthour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, startmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, endhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, endmin_),
  };
  PBPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPower_descriptor_,
      PBPower::default_instance_,
      PBPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPower));
  PBOfficial_descriptor_ = file->message_type(165);
  static const int PBOfficial_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, countrylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, constructlevel_),
  };
  PBOfficial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOfficial_descriptor_,
      PBOfficial::default_instance_,
      PBOfficial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOfficial));
  PBOfficialTable_descriptor_ = file->message_type(166);
  static const int PBOfficialTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialTable, officialdata_),
  };
  PBOfficialTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOfficialTable_descriptor_,
      PBOfficialTable::default_instance_,
      PBOfficialTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOfficialTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOfficialTable));
  PBConstructExp_descriptor_ = file->message_type(167);
  static const int PBConstructExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConstructExp, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConstructExp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConstructExp, bonus_),
  };
  PBConstructExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBConstructExp_descriptor_,
      PBConstructExp::default_instance_,
      PBConstructExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConstructExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBConstructExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBConstructExp));
  PBAddPKTable_descriptor_ = file->message_type(168);
  static const int PBAddPKTable_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kfchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kpchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kwchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, dfchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, dpchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, dwchangepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kfchangefriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kpchangefriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kwchangefriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kfchangepk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kwchangepk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kpchangepk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, pfriendmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, pfriendmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kfchangehonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kpchangehonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, kwchangehonor_),
  };
  PBAddPKTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAddPKTable_descriptor_,
      PBAddPKTable::default_instance_,
      PBAddPKTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddPKTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAddPKTable));
  PBMapTable_descriptor_ = file->message_type(169);
  static const int PBMapTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapTable, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapTable, power_),
  };
  PBMapTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMapTable_descriptor_,
      PBMapTable::default_instance_,
      PBMapTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMapTable));
  PBMultiAttackTable_descriptor_ = file->message_type(170);
  static const int PBMultiAttackTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiAttackTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiAttackTable, reduce_),
  };
  PBMultiAttackTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMultiAttackTable_descriptor_,
      PBMultiAttackTable::default_instance_,
      PBMultiAttackTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiAttackTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMultiAttackTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMultiAttackTable));
  PBItemVip_descriptor_ = file->message_type(171);
  static const int PBItemVip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemVip, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemVip, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemVip, viptime_),
  };
  PBItemVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemVip_descriptor_,
      PBItemVip::default_instance_,
      PBItemVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemVip));
  PBItemClean_descriptor_ = file->message_type(172);
  static const int PBItemClean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, cleantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, cleanlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, step_),
  };
  PBItemClean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemClean_descriptor_,
      PBItemClean::default_instance_,
      PBItemClean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemClean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemClean));
  PBAwardInfo_descriptor_ = file->message_type(173);
  static const int PBAwardInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, nofamily_),
  };
  PBAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAwardInfo_descriptor_,
      PBAwardInfo::default_instance_,
      PBAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAwardInfo));
  PBLeagueItem_descriptor_ = file->message_type(174);
  static const int PBLeagueItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueItem, probality_),
  };
  PBLeagueItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLeagueItem_descriptor_,
      PBLeagueItem::default_instance_,
      PBLeagueItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLeagueItem));
  PBLeagueBag_descriptor_ = file->message_type(175);
  static const int PBLeagueBag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, leagueiteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, leaguebagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, exchangetableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, posy_),
  };
  PBLeagueBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLeagueBag_descriptor_,
      PBLeagueBag::default_instance_,
      PBLeagueBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLeagueBag));
  PBMatrixTable_descriptor_ = file->message_type(176);
  static const int PBMatrixTable_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, maxlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, minlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, masteritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, masteritemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, formallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, educatedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, enterlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, removeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, removemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, formalpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, educatedpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, returnlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, altermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, altermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, returnmailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, slaveitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, slaveitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, alterall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, alterdefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, slavemailid_),
  };
  PBMatrixTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMatrixTable_descriptor_,
      PBMatrixTable::default_instance_,
      PBMatrixTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMatrixTable));
  PBWeddingInfo_descriptor_ = file->message_type(177);
  static const int PBWeddingInfo_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, weddinglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, moneyneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, delaymoneyneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, weddingredstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, weddinghallredstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, weddinghallmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, invitationcardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, invitationcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, femalekeepsakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, malekeepsakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, femalekeepsaketwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, malekeepsaketwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, femalekeepsakethree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, malekeepsakethree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, malebufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, femalebufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, maleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, femaleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, groomposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, groomposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, brideposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, brideposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, groombufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, bridebufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, marriageitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, weddingscroll_),
  };
  PBWeddingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWeddingInfo_descriptor_,
      PBWeddingInfo::default_instance_,
      PBWeddingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWeddingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWeddingInfo));
  PBKeepsnakeInfo_descriptor_ = file->message_type(178);
  static const int PBKeepsnakeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKeepsnakeInfo, keepsakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKeepsnakeInfo, equipid_),
  };
  PBKeepsnakeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBKeepsnakeInfo_descriptor_,
      PBKeepsnakeInfo::default_instance_,
      PBKeepsnakeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKeepsnakeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKeepsnakeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBKeepsnakeInfo));
  PBTemplateMarriageConfig_descriptor_ = file->message_type(179);
  static const int PBTemplateMarriageConfig_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, weddinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, femalekeepsakeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, malekeepsakeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, weddingnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, divorceitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagetitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, malekeepsakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, femalekeepsakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, invitationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, invitationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, maleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, femaleitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, baitangbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, basicmarriageitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, basicmarriageitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagenpcmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagenpcposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriagenpcposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, marriageintimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, intimacyitemnum_),
  };
  PBTemplateMarriageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplateMarriageConfig_descriptor_,
      PBTemplateMarriageConfig::default_instance_,
      PBTemplateMarriageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateMarriageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplateMarriageConfig));
  PBInvitation_descriptor_ = file->message_type(180);
  static const int PBInvitation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitation, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitation, exchangeitemid_),
  };
  PBInvitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBInvitation_descriptor_,
      PBInvitation::default_instance_,
      PBInvitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBInvitation));
  ProGressInfo_descriptor_ = file->message_type(181);
  static const int ProGressInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGressInfo, functype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGressInfo, progresstime_),
  };
  ProGressInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGressInfo_descriptor_,
      ProGressInfo::default_instance_,
      ProGressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGressInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGressInfo));
  PBProGressConfig_descriptor_ = file->message_type(182);
  static const int PBProGressConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProGressConfig, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProGressConfig, progress_),
  };
  PBProGressConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProGressConfig_descriptor_,
      PBProGressConfig::default_instance_,
      PBProGressConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProGressConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProGressConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProGressConfig));
  PBSysInvitation_descriptor_ = file->message_type(183);
  static const int PBSysInvitation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSysInvitation, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSysInvitation, invitationid_),
  };
  PBSysInvitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSysInvitation_descriptor_,
      PBSysInvitation::default_instance_,
      PBSysInvitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSysInvitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSysInvitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSysInvitation));
  PBCount_descriptor_ = file->message_type(184);
  static const int PBCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, counttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, counttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, viptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, cleartype_),
  };
  PBCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCount_descriptor_,
      PBCount::default_instance_,
      PBCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCount));
  PBCountTable_descriptor_ = file->message_type(185);
  static const int PBCountTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCountTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCountTable, countdata_),
  };
  PBCountTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCountTable_descriptor_,
      PBCountTable::default_instance_,
      PBCountTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCountTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCountTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCountTable));
  PBActivityConfig_descriptor_ = file->message_type(186);
  static const int PBActivityConfig_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangeathrowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangeasugarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, sugarspreadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, sugarspreadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangeaactivitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangeaholdertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangearabtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangearedstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, hydrangeaexptableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminarytitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminarybasescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminaryextralscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminarytipstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminaryanswertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminaryquestiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminaryquestionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, preliminaryexptableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, effectiveofflineexchangerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, maxonlineeffectivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, maxeffectiveofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, maxofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, offlinetimelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, vipofflineexchangerate_),
  };
  PBActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivityConfig_descriptor_,
      PBActivityConfig::default_instance_,
      PBActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivityConfig));
  PBItemRefresh_descriptor_ = file->message_type(187);
  static const int PBItemRefresh_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, limitpos_),
  };
  PBItemRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemRefresh_descriptor_,
      PBItemRefresh::default_instance_,
      PBItemRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemRefresh));
  PBItemSummon_descriptor_ = file->message_type(188);
  static const int PBItemSummon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSummon, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSummon, summontype_),
  };
  PBItemSummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSummon_descriptor_,
      PBItemSummon::default_instance_,
      PBItemSummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSummon));
  PBDirectTable_descriptor_ = file->message_type(189);
  static const int PBDirectTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, directid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, luckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, luckrate_),
  };
  PBDirectTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDirectTable_descriptor_,
      PBDirectTable::default_instance_,
      PBDirectTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDirectTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDirectTable));
  PBItemDirect_descriptor_ = file->message_type(190);
  static const int PBItemDirect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemDirect, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemDirect, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemDirect, star_),
  };
  PBItemDirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemDirect_descriptor_,
      PBItemDirect::default_instance_,
      PBItemDirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemDirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemDirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemDirect));
  PBItemGetStar_descriptor_ = file->message_type(191);
  static const int PBItemGetStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGetStar, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGetStar, level_),
  };
  PBItemGetStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemGetStar_descriptor_,
      PBItemGetStar::default_instance_,
      PBItemGetStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGetStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemGetStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemGetStar));
  PBWarDate_descriptor_ = file->message_type(192);
  static const int PBWarDate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWarDate, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWarDate, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWarDate, minute_),
  };
  PBWarDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWarDate_descriptor_,
      PBWarDate::default_instance_,
      PBWarDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWarDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWarDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWarDate));
  PBTax_descriptor_ = file->message_type(193);
  static const int PBTax_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTax, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTax, incomerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTax, limit_),
  };
  PBTax_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTax_descriptor_,
      PBTax::default_instance_,
      PBTax_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTax, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTax, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTax));
  PBWorldBattleConfig_descriptor_ = file->message_type(194);
  static const int PBWorldBattleConfig_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, submitbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, battlebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, battleend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, initbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, flagsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, killsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, flagbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, pernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, submitmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, submitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, outmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, outposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, outposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, flagindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, bidend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, maxwarhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, noticebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, titlevalidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, stoneposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, stoneposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, wintax_),
  };
  PBWorldBattleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBattleConfig_descriptor_,
      PBWorldBattleConfig::default_instance_,
      PBWorldBattleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBattleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBattleConfig));
  PBDegreeInfo_descriptor_ = file->message_type(195);
  static const int PBDegreeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDegreeInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDegreeInfo, probality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDegreeInfo, degreevalue_),
  };
  PBDegreeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDegreeInfo_descriptor_,
      PBDegreeInfo::default_instance_,
      PBDegreeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDegreeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDegreeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDegreeInfo));
  PBItemInfo_descriptor_ = file->message_type(196);
  static const int PBItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemInfo, probality_),
  };
  PBItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemInfo_descriptor_,
      PBItemInfo::default_instance_,
      PBItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemInfo));
  PBItemAutoCollect_descriptor_ = file->message_type(197);
  static const int PBItemAutoCollect_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, degreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, maxusetimes_),
  };
  PBItemAutoCollect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemAutoCollect_descriptor_,
      PBItemAutoCollect::default_instance_,
      PBItemAutoCollect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAutoCollect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemAutoCollect));
  PBFangCunTreeNode_descriptor_ = file->message_type(198);
  static const int PBFangCunTreeNode_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, needskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, needskillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, needbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, order_),
  };
  PBFangCunTreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFangCunTreeNode_descriptor_,
      PBFangCunTreeNode::default_instance_,
      PBFangCunTreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFangCunTreeNode));
  PBFangCunTree_descriptor_ = file->message_type(199);
  static const int PBFangCunTree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTree, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTree, skillnode_),
  };
  PBFangCunTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFangCunTree_descriptor_,
      PBFangCunTree::default_instance_,
      PBFangCunTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFangCunTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFangCunTree));
  PBItemBlackPills_descriptor_ = file->message_type(200);
  static const int PBItemBlackPills_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBlackPills, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBlackPills, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBlackPills, exptableid_),
  };
  PBItemBlackPills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBlackPills_descriptor_,
      PBItemBlackPills::default_instance_,
      PBItemBlackPills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBlackPills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBlackPills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBlackPills));
  PBStage_descriptor_ = file->message_type(201);
  static const int PBStage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStage, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStage, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStage, layer_),
  };
  PBStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStage_descriptor_,
      PBStage::default_instance_,
      PBStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStage));
  PBTemplateTalentStage_descriptor_ = file->message_type(202);
  static const int PBTemplateTalentStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalentStage, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalentStage, stage_),
  };
  PBTemplateTalentStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTemplateTalentStage_descriptor_,
      PBTemplateTalentStage::default_instance_,
      PBTemplateTalentStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalentStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTemplateTalentStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTemplateTalentStage));
  PBItemExpContainer_descriptor_ = file->message_type(203);
  static const int PBItemExpContainer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, maxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, ogreexprate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, exppillsid_),
  };
  PBItemExpContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExpContainer_descriptor_,
      PBItemExpContainer::default_instance_,
      PBItemExpContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExpContainer));
  PBItemExpPills_descriptor_ = file->message_type(204);
  static const int PBItemExpPills_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpPills, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpPills, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpPills, levellimit_),
  };
  PBItemExpPills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExpPills_descriptor_,
      PBItemExpPills::default_instance_,
      PBItemExpPills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpPills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpPills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExpPills));
  PBItemExpTome_descriptor_ = file->message_type(205);
  static const int PBItemExpTome_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, itembase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, openitemid_),
  };
  PBItemExpTome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemExpTome_descriptor_,
      PBItemExpTome::default_instance_,
      PBItemExpTome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemExpTome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemExpTome));
  PBAccuseConfig_descriptor_ = file->message_type(206);
  static const int PBAccuseConfig_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusebeginhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusebeginminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accuselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accuseendhour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accuseendminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accuseperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, awardpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, gatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, flagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, gatepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, flagpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusenoticehour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, accusenoticeminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, noticepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, gateparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, flagparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, gateparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, flagparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, gateparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, flagparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, lwpercent_),
  };
  PBAccuseConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAccuseConfig_descriptor_,
      PBAccuseConfig::default_instance_,
      PBAccuseConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccuseConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAccuseConfig));
  PBGlobalMapConfig_descriptor_ = file->message_type(207);
  static const int PBGlobalMapConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, outmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, outx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, outy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, escapebuffid_),
  };
  PBGlobalMapConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGlobalMapConfig_descriptor_,
      PBGlobalMapConfig::default_instance_,
      PBGlobalMapConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalMapConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGlobalMapConfig));
  PBCorpsBOSS_descriptor_ = file->message_type(208);
  static const int PBCorpsBOSS_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, hardbossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, valuelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, dropdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, harddropdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, summonminlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, hardsummonminlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, summonminvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, hardsummonminvalue_),
  };
  PBCorpsBOSS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsBOSS_descriptor_,
      PBCorpsBOSS::default_instance_,
      PBCorpsBOSS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBOSS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsBOSS));
  PBOffLineExpConfig_descriptor_ = file->message_type(209);
  static const int PBOffLineExpConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, offlineunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, offlineexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, offlinelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, explimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, offlinepercent_),
  };
  PBOffLineExpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBOffLineExpConfig_descriptor_,
      PBOffLineExpConfig::default_instance_,
      PBOffLineExpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBOffLineExpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBOffLineExpConfig));
  PBRepeFameTable_descriptor_ = file->message_type(210);
  static const int PBRepeFameTable_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, fametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, famevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, itemvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, combatitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, repeitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, commonitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, combatlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, repelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, commonlimit_),
  };
  PBRepeFameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepeFameTable_descriptor_,
      PBRepeFameTable::default_instance_,
      PBRepeFameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepeFameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepeFameTable));
  PBCastingSpiritTable_descriptor_ = file->message_type(211);
  static const int PBCastingSpiritTable_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, openstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, positionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, positiondesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, spirittypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, spirittypedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, spirititem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, spirititemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, upgrademoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, downgrademoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, upgradeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, downgradeitem_),
  };
  PBCastingSpiritTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCastingSpiritTable_descriptor_,
      PBCastingSpiritTable::default_instance_,
      PBCastingSpiritTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCastingSpiritTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCastingSpiritTable));
  PBSpiritItem_descriptor_ = file->message_type(212);
  static const int PBSpiritItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, colorgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, spirittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, effectpoint_),
  };
  PBSpiritItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSpiritItem_descriptor_,
      PBSpiritItem::default_instance_,
      PBSpiritItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSpiritItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_template_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSet_descriptor_, &PBItemSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBConfigTable_descriptor_, &PBConfigTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillSet_descriptor_, &PBSkillSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipSet_descriptor_, &PBEquipSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplate_descriptor_, &PBTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHandinEncourage_descriptor_, &PBHandinEncourage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHandinTable_descriptor_, &PBHandinTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBase_descriptor_, &PBItemBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemReturn_descriptor_, &PBItemReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSkillBook_descriptor_, &PBItemSkillBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBindStone_descriptor_, &PBItemBindStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemScroll_descriptor_, &PBItemScroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemCall_descriptor_, &PBItemCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemCard_descriptor_, &PBItemCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemTeleport_descriptor_, &PBItemTeleport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemReturnPaper_descriptor_, &PBItemReturnPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemTeleSymbol_descriptor_, &PBItemTeleSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemStove_descriptor_, &PBItemStove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemPetEgg_descriptor_, &PBItemPetEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemPetFood_descriptor_, &PBItemPetFood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemRelife_descriptor_, &PBItemRelife::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSkill_descriptor_, &PBItemSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBook_descriptor_, &PBItemBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemUpg_descriptor_, &PBItemUpg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemUpgLuck_descriptor_, &PBItemUpgLuck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemUpgLeast_descriptor_, &PBItemUpgLeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemRemove_descriptor_, &PBItemRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemChange_descriptor_, &PBItemChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemQuestion_descriptor_, &PBItemQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemTask_descriptor_, &PBItemTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemStuff_descriptor_, &PBItemStuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExp_descriptor_, &PBItemExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemChangeCamp_descriptor_, &PBItemChangeCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBComRuneUnit_descriptor_, &PBComRuneUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBComRuneConfig_descriptor_, &PBComRuneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemShout_descriptor_, &PBItemShout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemAutoShout_descriptor_, &PBItemAutoShout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemPhysic_descriptor_, &PBItemPhysic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemHorse_descriptor_, &PBItemHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStuff_descriptor_, &PBStuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProduct_descriptor_, &PBProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBluePrint_descriptor_, &PBItemBluePrint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemRune_descriptor_, &PBItemRune::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemJewel_descriptor_, &PBItemJewel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemYuanBug_descriptor_, &PBItemYuanBug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemYuanEgg_descriptor_, &PBItemYuanEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSequence_descriptor_, &PBItemSequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipment_descriptor_, &PBEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipFashion_descriptor_, &PBEquipFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipWeapon_descriptor_, &PBEquipWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipArmor_descriptor_, &PBEquipArmor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplateProperty_descriptor_, &PBTemplateProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPropertyPercent_descriptor_, &PBPropertyPercent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplatePropertyTable_descriptor_, &PBTemplatePropertyTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMetier_descriptor_, &PBMetier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBNpc_descriptor_, &PBNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSellItem_descriptor_, &PBSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSellTable_descriptor_, &PBSellTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTotalDrop_descriptor_, &PBTotalDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropItem_descriptor_, &PBDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropTable_descriptor_, &PBDropTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBNPCCollect_descriptor_, &PBNPCCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOgreProperty_descriptor_, &PBOgreProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBox_Click_descriptor_, &PBBox_Click::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOgreBox_descriptor_, &PBOgreBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBShowPet_descriptor_, &PBShowPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattlePet_descriptor_, &PBBattlePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMineOutput_descriptor_, &PBMineOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMineOgre_descriptor_, &PBMineOgre::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMine_descriptor_, &PBMine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillTreeNode_descriptor_, &PBSkillTreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillTree_descriptor_, &PBSkillTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCost_descriptor_, &PBCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUseCondition_descriptor_, &PBUseCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkill_descriptor_, &PBSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAureoleType_descriptor_, &PBAureoleType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAureoleSkill_descriptor_, &PBAureoleSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBNormalSkill_descriptor_, &PBNormalSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTrapSkill_descriptor_, &PBTrapSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuffFunc_descriptor_, &PBBuffFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuff_descriptor_, &PBBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLevelExp_descriptor_, &PBLevelExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleMoneyLmt_descriptor_, &PBSingleMoneyLmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLevelMoneyLmt_descriptor_, &PBLevelMoneyLmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPetLevelExp_descriptor_, &PBPetLevelExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProduceExp_descriptor_, &PBProduceExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUpg_descriptor_, &PBUpg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipUpg_descriptor_, &PBEquipUpg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSuitProducer_descriptor_, &PBSuitProducer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSuitNormal_descriptor_, &PBSuitNormal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSpell_descriptor_, &PBSpell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProduceEquip_descriptor_, &PBProduceEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProducePhysic_descriptor_, &PBProducePhysic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOpenSlot_descriptor_, &PBOpenSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCompose_descriptor_, &PBCompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMultiCompose_descriptor_, &PBMultiCompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeleTable_descriptor_, &PBTeleTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBData_descriptor_, &PBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPetData_descriptor_, &PBPetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSummonBeast_descriptor_, &PBSummonBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBeginner_descriptor_, &PBBeginner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropLevel_descriptor_, &PBDropLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOgreTran_descriptor_, &PBOgreTran::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMetierPro_descriptor_, &PBMetierPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLevelProperty_descriptor_, &PBLevelProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHonorToExp_descriptor_, &PBHonorToExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHonorObtain_descriptor_, &PBHonorObtain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDiploidTable_descriptor_, &PBDiploidTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRedStone_descriptor_, &PBRedStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRedStoneExpTable_descriptor_, &PBRedStoneExpTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBReliveTable_descriptor_, &PBReliveTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBQuestionExp_descriptor_, &PBQuestionExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBindChargeTable_descriptor_, &PBBindChargeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMinePos_descriptor_, &PBMinePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMineEvent_descriptor_, &PBMineEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemMineMap_descriptor_, &PBItemMineMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRelatively_Pos_descriptor_, &PBRelatively_Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBlock_descriptor_, &PBBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPKDrop_descriptor_, &PBPKDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPKValueTable_descriptor_, &PBPKValueTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemToken_descriptor_, &PBItemToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemKitBag_descriptor_, &PBItemKitBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemGiftBag_descriptor_, &PBItemGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemAdapter_descriptor_, &PBItemAdapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTplHierogram_descriptor_, &PBTplHierogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStep_descriptor_, &PBStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTitle_descriptor_, &PBTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTitleManager_descriptor_, &PBTitleManager::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTplBuffImmunity_descriptor_, &PBTplBuffImmunity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplateTalent_descriptor_, &PBTemplateTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMagicWeaponProIncValue_descriptor_, &PBMagicWeaponProIncValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplateLifeSkill_descriptor_, &PBTemplateLifeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDecompondTable_descriptor_, &PBDecompondTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCTemplateDecompound_descriptor_, &PBCTemplateDecompound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTplMagicWeaponProIncTable_descriptor_, &PBTplMagicWeaponProIncTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleMWDecomposeData_descriptor_, &SingleMWDecomposeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMagicWeaponDecomposeTable_descriptor_, &PBMagicWeaponDecomposeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMagicWeaponQuickUpTable_descriptor_, &PBMagicWeaponQuickUpTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemMagicWeapon_descriptor_, &PBItemMagicWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleSkillStorage_descriptor_, &PBSingleSkillStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemMagicStone_descriptor_, &PBItemMagicStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLifeSkillScroll_descriptor_, &PBLifeSkillScroll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillStorage_descriptor_, &PBSkillStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillBoxProperty_descriptor_, &PBSkillBoxProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMagicWeaponSkillBoxProTable_descriptor_, &PBMagicWeaponSkillBoxProTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMWProJudgeEffTable_descriptor_, &PBMWProJudgeEffTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMWProJudgeSpirTable_descriptor_, &PBMWProJudgeSpirTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMWLevelQuotietyTab_descriptor_, &PBMWLevelQuotietyTab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFuncItem_descriptor_, &PBFuncItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipExchangeTable_descriptor_, &PBEquipExchangeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMultiBuffEvent_descriptor_, &PBMultiBuffEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMultiBuff_descriptor_, &PBMultiBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCDGroupTable_descriptor_, &PBCDGroupTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMetierAp_descriptor_, &PBMetierAp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApConfig_descriptor_, &PBApConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLightTable_descriptor_, &PBLightTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWizardTable_descriptor_, &PBWizardTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBJudgeLevel_descriptor_, &PBJudgeLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBJudgeConfig_descriptor_, &PBJudgeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPaperValue_descriptor_, &PBPaperValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemRedPaper_descriptor_, &PBItemRedPaper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTrend_descriptor_, &PBTrend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAward_descriptor_, &PBAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAchieveAward_descriptor_, &PBAchieveAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPower_descriptor_, &PBPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOfficial_descriptor_, &PBOfficial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOfficialTable_descriptor_, &PBOfficialTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBConstructExp_descriptor_, &PBConstructExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAddPKTable_descriptor_, &PBAddPKTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMapTable_descriptor_, &PBMapTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMultiAttackTable_descriptor_, &PBMultiAttackTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemVip_descriptor_, &PBItemVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemClean_descriptor_, &PBItemClean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAwardInfo_descriptor_, &PBAwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLeagueItem_descriptor_, &PBLeagueItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLeagueBag_descriptor_, &PBLeagueBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMatrixTable_descriptor_, &PBMatrixTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWeddingInfo_descriptor_, &PBWeddingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBKeepsnakeInfo_descriptor_, &PBKeepsnakeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplateMarriageConfig_descriptor_, &PBTemplateMarriageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBInvitation_descriptor_, &PBInvitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGressInfo_descriptor_, &ProGressInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProGressConfig_descriptor_, &PBProGressConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSysInvitation_descriptor_, &PBSysInvitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCount_descriptor_, &PBCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCountTable_descriptor_, &PBCountTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivityConfig_descriptor_, &PBActivityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemRefresh_descriptor_, &PBItemRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSummon_descriptor_, &PBItemSummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDirectTable_descriptor_, &PBDirectTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemDirect_descriptor_, &PBItemDirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemGetStar_descriptor_, &PBItemGetStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWarDate_descriptor_, &PBWarDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTax_descriptor_, &PBTax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBattleConfig_descriptor_, &PBWorldBattleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDegreeInfo_descriptor_, &PBDegreeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemInfo_descriptor_, &PBItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemAutoCollect_descriptor_, &PBItemAutoCollect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFangCunTreeNode_descriptor_, &PBFangCunTreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFangCunTree_descriptor_, &PBFangCunTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBlackPills_descriptor_, &PBItemBlackPills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStage_descriptor_, &PBStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTemplateTalentStage_descriptor_, &PBTemplateTalentStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExpContainer_descriptor_, &PBItemExpContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExpPills_descriptor_, &PBItemExpPills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemExpTome_descriptor_, &PBItemExpTome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAccuseConfig_descriptor_, &PBAccuseConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGlobalMapConfig_descriptor_, &PBGlobalMapConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsBOSS_descriptor_, &PBCorpsBOSS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBOffLineExpConfig_descriptor_, &PBOffLineExpConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepeFameTable_descriptor_, &PBRepeFameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCastingSpiritTable_descriptor_, &PBCastingSpiritTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSpiritItem_descriptor_, &PBSpiritItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_template_5fpb_2ehxx() {
  delete PBItemSet::default_instance_;
  delete PBItemSet_reflection_;
  delete PBConfigTable::default_instance_;
  delete PBConfigTable_reflection_;
  delete PBSkillSet::default_instance_;
  delete PBSkillSet_reflection_;
  delete PBEquipSet::default_instance_;
  delete PBEquipSet_reflection_;
  delete PBTemplate::default_instance_;
  delete PBTemplate_reflection_;
  delete PBHandinEncourage::default_instance_;
  delete PBHandinEncourage_reflection_;
  delete PBHandinTable::default_instance_;
  delete PBHandinTable_reflection_;
  delete PBItemBase::default_instance_;
  delete PBItemBase_reflection_;
  delete PBItemReturn::default_instance_;
  delete PBItemReturn_reflection_;
  delete PBItemSkillBook::default_instance_;
  delete PBItemSkillBook_reflection_;
  delete PBItemBindStone::default_instance_;
  delete PBItemBindStone_reflection_;
  delete PBItemScroll::default_instance_;
  delete PBItemScroll_reflection_;
  delete PBItemCall::default_instance_;
  delete PBItemCall_reflection_;
  delete PBItemCard::default_instance_;
  delete PBItemCard_reflection_;
  delete PBItemTeleport::default_instance_;
  delete PBItemTeleport_reflection_;
  delete PBItemReturnPaper::default_instance_;
  delete PBItemReturnPaper_reflection_;
  delete PBItemTeleSymbol::default_instance_;
  delete PBItemTeleSymbol_reflection_;
  delete PBItemStove::default_instance_;
  delete PBItemStove_reflection_;
  delete PBItemPetEgg::default_instance_;
  delete PBItemPetEgg_reflection_;
  delete PBItemPetFood::default_instance_;
  delete PBItemPetFood_reflection_;
  delete PBItemRelife::default_instance_;
  delete PBItemRelife_reflection_;
  delete PBItemSkill::default_instance_;
  delete PBItemSkill_reflection_;
  delete PBItemBook::default_instance_;
  delete PBItemBook_reflection_;
  delete PBItemUpg::default_instance_;
  delete PBItemUpg_reflection_;
  delete PBItemUpgLuck::default_instance_;
  delete PBItemUpgLuck_reflection_;
  delete PBItemUpgLeast::default_instance_;
  delete PBItemUpgLeast_reflection_;
  delete PBItemRemove::default_instance_;
  delete PBItemRemove_reflection_;
  delete PBItemChange::default_instance_;
  delete PBItemChange_reflection_;
  delete PBItemQuestion::default_instance_;
  delete PBItemQuestion_reflection_;
  delete PBItemTask::default_instance_;
  delete PBItemTask_reflection_;
  delete PBItemStuff::default_instance_;
  delete PBItemStuff_reflection_;
  delete PBItemExp::default_instance_;
  delete PBItemExp_reflection_;
  delete PBItemChangeCamp::default_instance_;
  delete PBItemChangeCamp_reflection_;
  delete PBComRuneUnit::default_instance_;
  delete PBComRuneUnit_reflection_;
  delete PBComRuneConfig::default_instance_;
  delete PBComRuneConfig_reflection_;
  delete PBItemShout::default_instance_;
  delete PBItemShout_reflection_;
  delete PBItemAutoShout::default_instance_;
  delete PBItemAutoShout_reflection_;
  delete PBItemPhysic::default_instance_;
  delete PBItemPhysic_reflection_;
  delete PBItemHorse::default_instance_;
  delete PBItemHorse_reflection_;
  delete PBStuff::default_instance_;
  delete PBStuff_reflection_;
  delete PBProduct::default_instance_;
  delete PBProduct_reflection_;
  delete PBItemBluePrint::default_instance_;
  delete PBItemBluePrint_reflection_;
  delete PBItemRune::default_instance_;
  delete PBItemRune_reflection_;
  delete PBItemJewel::default_instance_;
  delete PBItemJewel_reflection_;
  delete PBItemYuanBug::default_instance_;
  delete PBItemYuanBug_reflection_;
  delete PBItemYuanEgg::default_instance_;
  delete PBItemYuanEgg_reflection_;
  delete PBItemSequence::default_instance_;
  delete PBItemSequence_reflection_;
  delete PBEquipment::default_instance_;
  delete PBEquipment_reflection_;
  delete PBEquipFashion::default_instance_;
  delete PBEquipFashion_reflection_;
  delete PBEquipWeapon::default_instance_;
  delete PBEquipWeapon_reflection_;
  delete PBEquipArmor::default_instance_;
  delete PBEquipArmor_reflection_;
  delete PBTemplateProperty::default_instance_;
  delete PBTemplateProperty_reflection_;
  delete PBPropertyPercent::default_instance_;
  delete PBPropertyPercent_reflection_;
  delete PBTemplatePropertyTable::default_instance_;
  delete PBTemplatePropertyTable_reflection_;
  delete PBMetier::default_instance_;
  delete PBMetier_reflection_;
  delete PBNpc::default_instance_;
  delete PBNpc_reflection_;
  delete PBSellItem::default_instance_;
  delete PBSellItem_reflection_;
  delete PBSellTable::default_instance_;
  delete PBSellTable_reflection_;
  delete PBTotalDrop::default_instance_;
  delete PBTotalDrop_reflection_;
  delete PBDropItem::default_instance_;
  delete PBDropItem_reflection_;
  delete PBDropTable::default_instance_;
  delete PBDropTable_reflection_;
  delete PBNPCCollect::default_instance_;
  delete PBNPCCollect_reflection_;
  delete PBOgreProperty::default_instance_;
  delete PBOgreProperty_reflection_;
  delete PBBox_Click::default_instance_;
  delete PBBox_Click_reflection_;
  delete PBOgreBox::default_instance_;
  delete PBOgreBox_reflection_;
  delete PBShowPet::default_instance_;
  delete PBShowPet_reflection_;
  delete PBBattlePet::default_instance_;
  delete PBBattlePet_reflection_;
  delete PBMineOutput::default_instance_;
  delete PBMineOutput_reflection_;
  delete PBMineOgre::default_instance_;
  delete PBMineOgre_reflection_;
  delete PBMine::default_instance_;
  delete PBMine_reflection_;
  delete PBSkillTreeNode::default_instance_;
  delete PBSkillTreeNode_reflection_;
  delete PBSkillTree::default_instance_;
  delete PBSkillTree_reflection_;
  delete PBCost::default_instance_;
  delete PBCost_reflection_;
  delete PBUseCondition::default_instance_;
  delete PBUseCondition_reflection_;
  delete PBSkill::default_instance_;
  delete PBSkill_reflection_;
  delete PBAureoleType::default_instance_;
  delete PBAureoleType_reflection_;
  delete PBAureoleSkill::default_instance_;
  delete PBAureoleSkill_reflection_;
  delete PBNormalSkill::default_instance_;
  delete PBNormalSkill_reflection_;
  delete PBTrapSkill::default_instance_;
  delete PBTrapSkill_reflection_;
  delete PBBuffFunc::default_instance_;
  delete PBBuffFunc_reflection_;
  delete PBBuff::default_instance_;
  delete PBBuff_reflection_;
  delete PBLevelExp::default_instance_;
  delete PBLevelExp_reflection_;
  delete PBSingleMoneyLmt::default_instance_;
  delete PBSingleMoneyLmt_reflection_;
  delete PBLevelMoneyLmt::default_instance_;
  delete PBLevelMoneyLmt_reflection_;
  delete PBPetLevelExp::default_instance_;
  delete PBPetLevelExp_reflection_;
  delete PBProduceExp::default_instance_;
  delete PBProduceExp_reflection_;
  delete PBUpg::default_instance_;
  delete PBUpg_reflection_;
  delete PBEquipUpg::default_instance_;
  delete PBEquipUpg_reflection_;
  delete PBSuitProducer::default_instance_;
  delete PBSuitProducer_reflection_;
  delete PBSuitNormal::default_instance_;
  delete PBSuitNormal_reflection_;
  delete PBSpell::default_instance_;
  delete PBSpell_reflection_;
  delete PBProduceEquip::default_instance_;
  delete PBProduceEquip_reflection_;
  delete PBProducePhysic::default_instance_;
  delete PBProducePhysic_reflection_;
  delete PBOpenSlot::default_instance_;
  delete PBOpenSlot_reflection_;
  delete PBCompose::default_instance_;
  delete PBCompose_reflection_;
  delete PBMultiCompose::default_instance_;
  delete PBMultiCompose_reflection_;
  delete PBTeleTable::default_instance_;
  delete PBTeleTable_reflection_;
  delete PBData::default_instance_;
  delete PBData_reflection_;
  delete PBPetData::default_instance_;
  delete PBPetData_reflection_;
  delete PBSummonBeast::default_instance_;
  delete PBSummonBeast_reflection_;
  delete PBBeginner::default_instance_;
  delete PBBeginner_reflection_;
  delete PBDropLevel::default_instance_;
  delete PBDropLevel_reflection_;
  delete PBOgreTran::default_instance_;
  delete PBOgreTran_reflection_;
  delete PBMetierPro::default_instance_;
  delete PBMetierPro_reflection_;
  delete PBLevelProperty::default_instance_;
  delete PBLevelProperty_reflection_;
  delete PBHonorToExp::default_instance_;
  delete PBHonorToExp_reflection_;
  delete PBHonorObtain::default_instance_;
  delete PBHonorObtain_reflection_;
  delete PBDiploidTable::default_instance_;
  delete PBDiploidTable_reflection_;
  delete PBRedStone::default_instance_;
  delete PBRedStone_reflection_;
  delete PBRedStoneExpTable::default_instance_;
  delete PBRedStoneExpTable_reflection_;
  delete PBReliveTable::default_instance_;
  delete PBReliveTable_reflection_;
  delete PBQuestionExp::default_instance_;
  delete PBQuestionExp_reflection_;
  delete PBBindChargeTable::default_instance_;
  delete PBBindChargeTable_reflection_;
  delete PBMinePos::default_instance_;
  delete PBMinePos_reflection_;
  delete PBMineEvent::default_instance_;
  delete PBMineEvent_reflection_;
  delete PBItemMineMap::default_instance_;
  delete PBItemMineMap_reflection_;
  delete PBRelatively_Pos::default_instance_;
  delete PBRelatively_Pos_reflection_;
  delete PBBlock::default_instance_;
  delete PBBlock_reflection_;
  delete PBPKDrop::default_instance_;
  delete PBPKDrop_reflection_;
  delete PBPKValueTable::default_instance_;
  delete PBPKValueTable_reflection_;
  delete PBItemToken::default_instance_;
  delete PBItemToken_reflection_;
  delete PBItemKitBag::default_instance_;
  delete PBItemKitBag_reflection_;
  delete PBItemGiftBag::default_instance_;
  delete PBItemGiftBag_reflection_;
  delete PBItemAdapter::default_instance_;
  delete PBItemAdapter_reflection_;
  delete PBTplHierogram::default_instance_;
  delete PBTplHierogram_reflection_;
  delete PBStep::default_instance_;
  delete PBStep_reflection_;
  delete PBTitle::default_instance_;
  delete PBTitle_reflection_;
  delete PBTitleManager::default_instance_;
  delete PBTitleManager_reflection_;
  delete PBTplBuffImmunity::default_instance_;
  delete PBTplBuffImmunity_reflection_;
  delete PBTemplateTalent::default_instance_;
  delete PBTemplateTalent_reflection_;
  delete PBMagicWeaponProIncValue::default_instance_;
  delete PBMagicWeaponProIncValue_reflection_;
  delete PBTemplateLifeSkill::default_instance_;
  delete PBTemplateLifeSkill_reflection_;
  delete PBDecompondTable::default_instance_;
  delete PBDecompondTable_reflection_;
  delete PBCTemplateDecompound::default_instance_;
  delete PBCTemplateDecompound_reflection_;
  delete PBTplMagicWeaponProIncTable::default_instance_;
  delete PBTplMagicWeaponProIncTable_reflection_;
  delete SingleMWDecomposeData::default_instance_;
  delete SingleMWDecomposeData_reflection_;
  delete PBMagicWeaponDecomposeTable::default_instance_;
  delete PBMagicWeaponDecomposeTable_reflection_;
  delete PBMagicWeaponQuickUpTable::default_instance_;
  delete PBMagicWeaponQuickUpTable_reflection_;
  delete PBItemMagicWeapon::default_instance_;
  delete PBItemMagicWeapon_reflection_;
  delete PBSingleSkillStorage::default_instance_;
  delete PBSingleSkillStorage_reflection_;
  delete PBItemMagicStone::default_instance_;
  delete PBItemMagicStone_reflection_;
  delete PBLifeSkillScroll::default_instance_;
  delete PBLifeSkillScroll_reflection_;
  delete PBSkillStorage::default_instance_;
  delete PBSkillStorage_reflection_;
  delete PBSkillBoxProperty::default_instance_;
  delete PBSkillBoxProperty_reflection_;
  delete PBMagicWeaponSkillBoxProTable::default_instance_;
  delete PBMagicWeaponSkillBoxProTable_reflection_;
  delete PBMWProJudgeEffTable::default_instance_;
  delete PBMWProJudgeEffTable_reflection_;
  delete PBMWProJudgeSpirTable::default_instance_;
  delete PBMWProJudgeSpirTable_reflection_;
  delete PBMWLevelQuotietyTab::default_instance_;
  delete PBMWLevelQuotietyTab_reflection_;
  delete PBFuncItem::default_instance_;
  delete PBFuncItem_reflection_;
  delete PBEquipExchangeTable::default_instance_;
  delete PBEquipExchangeTable_reflection_;
  delete PBMultiBuffEvent::default_instance_;
  delete PBMultiBuffEvent_reflection_;
  delete PBMultiBuff::default_instance_;
  delete PBMultiBuff_reflection_;
  delete PBCDGroupTable::default_instance_;
  delete PBCDGroupTable_reflection_;
  delete PBMetierAp::default_instance_;
  delete PBMetierAp_reflection_;
  delete PBApConfig::default_instance_;
  delete PBApConfig_reflection_;
  delete PBLightTable::default_instance_;
  delete PBLightTable_reflection_;
  delete PBWizardTable::default_instance_;
  delete PBWizardTable_reflection_;
  delete PBJudgeLevel::default_instance_;
  delete PBJudgeLevel_reflection_;
  delete PBJudgeConfig::default_instance_;
  delete PBJudgeConfig_reflection_;
  delete PBPaperValue::default_instance_;
  delete PBPaperValue_reflection_;
  delete PBItemRedPaper::default_instance_;
  delete PBItemRedPaper_reflection_;
  delete PBTrend::default_instance_;
  delete PBTrend_reflection_;
  delete PBAward::default_instance_;
  delete PBAward_reflection_;
  delete PBAchieveAward::default_instance_;
  delete PBAchieveAward_reflection_;
  delete PBPower::default_instance_;
  delete PBPower_reflection_;
  delete PBOfficial::default_instance_;
  delete PBOfficial_reflection_;
  delete PBOfficialTable::default_instance_;
  delete PBOfficialTable_reflection_;
  delete PBConstructExp::default_instance_;
  delete PBConstructExp_reflection_;
  delete PBAddPKTable::default_instance_;
  delete PBAddPKTable_reflection_;
  delete PBMapTable::default_instance_;
  delete PBMapTable_reflection_;
  delete PBMultiAttackTable::default_instance_;
  delete PBMultiAttackTable_reflection_;
  delete PBItemVip::default_instance_;
  delete PBItemVip_reflection_;
  delete PBItemClean::default_instance_;
  delete PBItemClean_reflection_;
  delete PBAwardInfo::default_instance_;
  delete PBAwardInfo_reflection_;
  delete PBLeagueItem::default_instance_;
  delete PBLeagueItem_reflection_;
  delete PBLeagueBag::default_instance_;
  delete PBLeagueBag_reflection_;
  delete PBMatrixTable::default_instance_;
  delete PBMatrixTable_reflection_;
  delete PBWeddingInfo::default_instance_;
  delete PBWeddingInfo_reflection_;
  delete PBKeepsnakeInfo::default_instance_;
  delete PBKeepsnakeInfo_reflection_;
  delete PBTemplateMarriageConfig::default_instance_;
  delete PBTemplateMarriageConfig_reflection_;
  delete PBInvitation::default_instance_;
  delete PBInvitation_reflection_;
  delete ProGressInfo::default_instance_;
  delete ProGressInfo_reflection_;
  delete PBProGressConfig::default_instance_;
  delete PBProGressConfig_reflection_;
  delete PBSysInvitation::default_instance_;
  delete PBSysInvitation_reflection_;
  delete PBCount::default_instance_;
  delete PBCount_reflection_;
  delete PBCountTable::default_instance_;
  delete PBCountTable_reflection_;
  delete PBActivityConfig::default_instance_;
  delete PBActivityConfig_reflection_;
  delete PBItemRefresh::default_instance_;
  delete PBItemRefresh_reflection_;
  delete PBItemSummon::default_instance_;
  delete PBItemSummon_reflection_;
  delete PBDirectTable::default_instance_;
  delete PBDirectTable_reflection_;
  delete PBItemDirect::default_instance_;
  delete PBItemDirect_reflection_;
  delete PBItemGetStar::default_instance_;
  delete PBItemGetStar_reflection_;
  delete PBWarDate::default_instance_;
  delete PBWarDate_reflection_;
  delete PBTax::default_instance_;
  delete PBTax_reflection_;
  delete PBWorldBattleConfig::default_instance_;
  delete PBWorldBattleConfig_reflection_;
  delete PBDegreeInfo::default_instance_;
  delete PBDegreeInfo_reflection_;
  delete PBItemInfo::default_instance_;
  delete PBItemInfo_reflection_;
  delete PBItemAutoCollect::default_instance_;
  delete PBItemAutoCollect_reflection_;
  delete PBFangCunTreeNode::default_instance_;
  delete PBFangCunTreeNode_reflection_;
  delete PBFangCunTree::default_instance_;
  delete PBFangCunTree_reflection_;
  delete PBItemBlackPills::default_instance_;
  delete PBItemBlackPills_reflection_;
  delete PBStage::default_instance_;
  delete PBStage_reflection_;
  delete PBTemplateTalentStage::default_instance_;
  delete PBTemplateTalentStage_reflection_;
  delete PBItemExpContainer::default_instance_;
  delete PBItemExpContainer_reflection_;
  delete PBItemExpPills::default_instance_;
  delete PBItemExpPills_reflection_;
  delete PBItemExpTome::default_instance_;
  delete PBItemExpTome_reflection_;
  delete PBAccuseConfig::default_instance_;
  delete PBAccuseConfig_reflection_;
  delete PBGlobalMapConfig::default_instance_;
  delete PBGlobalMapConfig_reflection_;
  delete PBCorpsBOSS::default_instance_;
  delete PBCorpsBOSS_reflection_;
  delete PBOffLineExpConfig::default_instance_;
  delete PBOffLineExpConfig_reflection_;
  delete PBRepeFameTable::default_instance_;
  delete PBRepeFameTable_reflection_;
  delete PBCastingSpiritTable::default_instance_;
  delete PBCastingSpiritTable_reflection_;
  delete PBSpiritItem::default_instance_;
  delete PBSpiritItem_reflection_;
}

void protobuf_AddDesc_template_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017template_pb.hxx\"\231\020\n\tPBItemSet\022\031\n\004Item\030"
    "\001 \003(\0132\013.PBItemBase\022#\n\tBindStone\030\002 \003(\0132\020."
    "PBItemBindStone\022#\n\tBluePrint\030\003 \003(\0132\020.PBI"
    "temBluePrint\022\035\n\010ItemBook\030\004 \003(\0132\013.PBItemB"
    "ook\022\035\n\010ItemCard\030\005 \003(\0132\013.PBItemCard\022\033\n\007It"
    "emExp\030\006 \003(\0132\n.PBItemExp\022\033\n\005Horse\030\007 \003(\0132\014"
    ".PBItemHorse\022\033\n\005Jewel\030\010 \003(\0132\014.PBItemJewe"
    "l\022\035\n\006PetEgg\030\t \003(\0132\r.PBItemPetEgg\022\037\n\007PetF"
    "ood\030\n \003(\0132\016.PBItemPetFood\022\035\n\006Physic\030\013 \003("
    "\0132\r.PBItemPhysic\022!\n\010Question\030\014 \003(\0132\017.PBI"
    "temQuestion\022\035\n\006Relife\030\r \003(\0132\r.PBItemReli"
    "fe\022\035\n\006Return\030\016 \003(\0132\r.PBItemReturn\022\'\n\013Ret"
    "urnPaper\030\017 \003(\0132\022.PBItemReturnPaper\022\031\n\004Ru"
    "ne\030\020 \003(\0132\013.PBItemRune\022\035\n\006Scroll\030\021 \003(\0132\r."
    "PBItemScroll\022!\n\010Sequence\030\022 \003(\0132\017.PBItemS"
    "equence\022\033\n\005Shout\030\023 \003(\0132\014.PBItemShout\022\037\n\t"
    "ItemSkill\030\024 \003(\0132\014.PBItemSkill\022\033\n\005Stove\030\025"
    " \003(\0132\014.PBItemStove\022\033\n\005Stuff\030\026 \003(\0132\014.PBIt"
    "emStuff\022\035\n\010ItemTask\030\027 \003(\0132\013.PBItemTask\022!"
    "\n\010Teleport\030\030 \003(\0132\017.PBItemTeleport\022%\n\nTel"
    "eSymbol\030\031 \003(\0132\021.PBItemTeleSymbol\022!\n\010UpgL"
    "east\030\032 \003(\0132\017.PBItemUpgLeast\022\037\n\007UpgLuck\030\033"
    " \003(\0132\016.PBItemUpgLuck\022\037\n\007YuanBug\030\034 \003(\0132\016."
    "PBItemYuanBug\022\037\n\007YuanEgg\030\035 \003(\0132\016.PBItemY"
    "uanEgg\022\035\n\010RedStone\030\036 \003(\0132\013.PBRedStone\022#\n"
    "\tAutoShout\030\037 \003(\0132\020.PBItemAutoShout\022\035\n\006Ki"
    "tBag\030  \003(\0132\r.PBItemKitBag\022\033\n\007ItemUpg\030! \003"
    "(\0132\n.PBItemUpg\022!\n\nItemRemove\030\" \003(\0132\r.PBI"
    "temRemove\022!\n\nItemChange\030# \003(\0132\r.PBItemCh"
    "ange\022#\n\013ItemAdapter\030$ \003(\0132\016.PBItemAdapte"
    "r\022\037\n\007MineMap\030% \003(\0132\016.PBItemMineMap\022\035\n\010It"
    "emCall\030& \003(\0132\013.PBItemCall\022\037\n\007GiftBag\030\' \003"
    "(\0132\016.PBItemGiftBag\022(\n\014MagicWeapons\030( \003(\013"
    "2\022.PBItemMagicWeapon\022\033\n\005Token\030) \003(\0132\014.PB"
    "ItemToken\022\035\n\010FuncItem\030* \003(\0132\013.PBFuncItem"
    "\022#\n\tSkillBook\030+ \003(\0132\020.PBItemSkillBook\022!\n"
    "\010RedPaper\030, \003(\0132\017.PBItemRedPaper\022%\n\nMagi"
    "cStone\030- \003(\0132\021.PBItemMagicStone\022\033\n\007VipIt"
    "em\030. \003(\0132\n.PBItemVip\022\037\n\tCleanItem\030/ \003(\0132"
    "\014.PBItemClean\022\037\n\tAwardInfo\0300 \003(\0132\014.PBAwa"
    "rdInfo\022\037\n\tLeagueBag\0301 \003(\0132\014.PBLeagueBag\022"
    "!\n\nInvitation\0302 \003(\0132\r.PBInvitation\022\'\n\rSy"
    "sInvitation\0303 \003(\0132\020.PBSysInvitation\022#\n\013I"
    "temRefresh\0304 \003(\0132\016.PBItemRefresh\022!\n\nItem"
    "Summon\0305 \003(\0132\r.PBItemSummon\022!\n\nItemDirec"
    "t\0306 \003(\0132\r.PBItemDirect\022#\n\013ItemGetStar\0307 "
    "\003(\0132\016.PBItemGetStar\022+\n\017ItemAutoCollect\0308"
    " \003(\0132\022.PBItemAutoCollect\022)\n\016ItemBlackPil"
    "ls\0309 \003(\0132\021.PBItemBlackPills\022)\n\014ExpContai"
    "ner\030: \003(\0132\023.PBItemExpContainer\022!\n\010ExpPil"
    "ls\030; \003(\0132\017.PBItemExpPills\022!\n\nSpiritItem\030"
    "< \003(\0132\r.PBSpiritItem\022\037\n\007ExpTome\030= \003(\0132\016."
    "PBItemExpTome\"\230\014\n\rPBConfigTable\022\035\n\010Begin"
    "ner\030\001 \003(\0132\013.PBBeginner\022\025\n\004Data\030\002 \003(\0132\007.P"
    "BData\022 \n\007Diploid\030\003 \003(\0132\017.PBDiploidTable\022"
    "\037\n\tDropLevel\030\004 \003(\0132\014.PBDropLevel\022\037\n\tDrop"
    "Table\030\005 \003(\0132\014.PBDropTable\022*\n\rRedStoneTab"
    "le\030\006 \003(\0132\023.PBRedStoneExpTable\022#\n\013ReliveT"
    "able\030\007 \003(\0132\016.PBReliveTable\022\037\n\tSellTable\030"
    "\010 \003(\0132\014.PBSellTable\022\037\n\tTeleTable\030\t \003(\0132\014"
    ".PBTeleTable\022!\n\nAddPkTable\030\n \003(\0132\r.PBAdd"
    "PKTable\022\'\n\rOfficialTable\030\013 \003(\0132\020.PBOffic"
    "ialTable\022\035\n\010OgreTran\030\014 \003(\0132\013.PBOgreTran\022"
    "9\n\023MagicWeaponProTable\030\r \003(\0132\034.PBTplMagi"
    "cWeaponProIncTable\022+\n\017BindChargeTabel\030\016 "
    "\003(\0132\022.PBBindChargeTable\022 \n\007PKTable\030\017 \003(\013"
    "2\017.PBPKValueTable\022;\n\023MagicWeaponSkillBox"
    "\030\020 \003(\0132\036.PBMagicWeaponSkillBoxProTable\022,"
    "\n\rEquipExchange\030\021 \003(\0132\025.PBEquipExchangeT"
    "able\022\035\n\010MapTable\030\022 \003(\0132\013.PBMapTable\022-\n\020M"
    "ultiAttackTable\030\023 \003(\0132\023.PBMultiAttackTab"
    "le\022#\n\013MatrixTable\030\024 \003(\0132\016.PBMatrixTable\022"
    "1\n\016MarriageConfig\030\025 \003(\0132\031.PBTemplateMarr"
    "iageConfig\022)\n\016ProgressConfig\030\026 \003(\0132\021.PBP"
    "roGressConfig\022!\n\nCountTable\030\027 \003(\0132\r.PBCo"
    "untTable\022)\n\016ActivityConfig\030\030 \003(\0132\021.PBAct"
    "ivityConfig\022#\n\013DirectTable\030\031 \003(\0132\016.PBDir"
    "ectTable\022*\n\014BattleConfig\030\032 \003(\0132\024.PBWorld"
    "BattleConfig\022\"\n\010MoneyLmt\030\033 \003(\0132\020.PBLevel"
    "MoneyLmt\022#\n\013HandinTable\030\034 \003(\0132\016.PBHandin"
    "Table\022+\n\017HandinEncourage\030\035 \003(\0132\022.PBHandi"
    "nEncourage\022%\n\nchangeCamp\030\036 \003(\0132\021.PBItemC"
    "hangeCamp\022%\n\014AccuseConfig\030\037 \003(\0132\017.PBAccu"
    "seConfig\022\'\n\rComRuneConfig\030  \003(\0132\020.PBComR"
    "uneConfig\0223\n\rMWDecomposTab\030! \003(\0132\034.PBMag"
    "icWeaponDecomposeTable\0220\n\014MWQuickUpTab\030\""
    " \003(\0132\032.PBMagicWeaponQuickUpTable\022+\n\017Glob"
    "alMapConfig\030# \003(\0132\022.PBGlobalMapConfig\022-\n"
    "\020OffLineExpConfig\030$ \003(\0132\023.PBOffLineExpCo"
    "nfig\022\'\n\rRepeFameTable\030% \003(\0132\020.PBRepeFame"
    "Table\0221\n\022CastingSpiritTable\030& \003(\0132\025.PBCa"
    "stingSpiritTable\"\342\002\n\nPBSkillSet\022%\n\014Aureo"
    "leSkill\030\001 \003(\0132\017.PBAureoleSkill\022\025\n\004Buff\030\002"
    " \003(\0132\007.PBBuff\022#\n\013NormalSkill\030\003 \003(\0132\016.PBN"
    "ormalSkill\022\027\n\005Skill\030\004 \003(\0132\010.PBSkill\022\037\n\tS"
    "killTree\030\005 \003(\0132\014.PBSkillTree\022\'\n\rSkillTre"
    "eNode\030\006 \003(\0132\020.PBSkillTreeNode\022\037\n\tTrapSki"
    "ll\030\007 \003(\0132\014.PBTrapSkill\022\037\n\tMultiBuff\030\010 \003("
    "\0132\014.PBMultiBuff\022#\n\013FangCunTree\030\t \003(\0132\016.P"
    "BFangCunTree\022\'\n\013FangCunNode\030\n \003(\0132\022.PBFa"
    "ngCunTreeNode\"\301\005\n\nPBEquipSet\022!\n\nEquipArm"
    "or\030\001 \003(\0132\r.PBEquipArmor\022%\n\014EquipFashion\030"
    "\002 \003(\0132\017.PBEquipFashion\022\037\n\tEquipment\030\003 \003("
    "\0132\014.PBEquipment\022\035\n\010EquipUpg\030\004 \003(\0132\013.PBEq"
    "uipUpg\022\036\n\006Weapon\030\005 \003(\0132\016.PBEquipWeapon\022\035"
    "\n\010OpenSlot\030\006 \003(\0132\013.PBOpenSlot\022%\n\014Produce"
    "Equip\030\007 \003(\0132\017.PBProduceEquip\022!\n\nProduceE"
    "xp\030\010 \003(\0132\r.PBProduceExp\022\'\n\rProducePhysic"
    "\030\t \003(\0132\020.PBProducePhysic\022\027\n\005Spell\030\n \003(\0132"
    "\010.PBSpell\022!\n\nSuitNormal\030\013 \003(\0132\r.PBSuitNo"
    "rmal\022%\n\014SuitProducer\030\014 \003(\0132\017.PBSuitProdu"
    "cer\022%\n\014MultiCompose\030\r \003(\0132\017.PBMultiCompo"
    "se\022\033\n\007Compose\030\016 \003(\0132\n.PBCompose\022*\n\nDecom"
    "pound\030\017 \003(\0132\026.PBCTemplateDecompound\022!\n\nL"
    "ightTable\030\020 \003(\0132\r.PBLightTable\022)\n\nMWJudg"
    "eEff\030\021 \003(\0132\025.PBMWProJudgeEffTable\022+\n\013MWJ"
    "udgeSpir\030\022 \003(\0132\026.PBMWProJudgeSpirTable\022)"
    "\n\nMWQuotiety\030\023 \003(\0132\025.PBMWLevelQuotietyTa"
    "b\"\277\013\n\nPBTemplate\022\033\n\007ItemSet\030\001 \001(\0132\n.PBIt"
    "emSet\022#\n\013ConfigTable\030\002 \001(\0132\016.PBConfigTab"
    "le\022\035\n\010SkillSet\030\003 \001(\0132\013.PBSkillSet\022\035\n\010Equ"
    "ipSet\030\004 \001(\0132\013.PBEquipSet\022\037\n\tBattlePet\030\005 "
    "\003(\0132\014.PBBattlePet\022#\n\013HonorObtain\030\006 \003(\0132\016"
    ".PBHonorObtain\022!\n\nHonorToExp\030\007 \003(\0132\r.PBH"
    "onorToExp\022\035\n\010LevelExp\030\010 \003(\0132\013.PBLevelExp"
    "\022\"\n\010LevelPro\030\t \003(\0132\020.PBLevelProperty\022\031\n\006"
    "Metier\030\n \003(\0132\t.PBMetier\022\037\n\tMetierPro\030\013 \003"
    "(\0132\014.PBMetierPro\022\025\n\004Mine\030\014 \003(\0132\007.PBMine\022"
    "\023\n\003Npc\030\r \003(\0132\006.PBNpc\022!\n\nNpcCollect\030\017 \003(\013"
    "2\r.PBNPCCollect\022\027\n\003Box\030\020 \003(\0132\n.PBOgreBox"
    "\022%\n\014OgreProperty\030\021 \003(\0132\017.PBOgreProperty\022"
    "#\n\013PetLevelExp\030\022 \003(\0132\016.PBPetLevelExp\022#\n\013"
    "QuestionExp\030\023 \003(\0132\016.PBQuestionExp\022\033\n\007Sho"
    "wPet\030\024 \003(\0132\n.PBShowPet\022#\n\013SummonBeast\030\025 "
    "\003(\0132\016.PBSummonBeast\022(\n\013TplProperty\030\026 \003(\013"
    "2\023.PBTemplateProperty\022-\n\013TplProTable\030\027 \003"
    "(\0132\030.PBTemplatePropertyTable\022\037\n\tTotalDro"
    "p\030\030 \003(\0132\014.PBTotalDrop\022\027\n\005Block\030\031 \003(\0132\010.P"
    "BBlock\022\"\n\tHierogram\030\032 \003(\0132\017.PBTplHierogr"
    "am\022!\n\006Talent\030\033 \003(\0132\021.PBTemplateTalent\022(\n"
    "\014BuffImmunity\030\034 \003(\0132\022.PBTplBuffImmunity\022"
    "\'\n\tLifeSkill\030\035 \003(\0132\024.PBTemplateLifeSkill"
    "\022+\n\017LifeSkillScroll\030\036 \003(\0132\022.PBLifeSkillS"
    "croll\022%\n\014TitleManager\030\037 \003(\0132\017.PBTitleMan"
    "ager\0220\n\027MagicWeaponSkillStorage\030  \003(\0132\017."
    "PBSkillStorage\022%\n\014CDGroupTable\030! \003(\0132\017.P"
    "BCDGroupTable\022\035\n\010ApConfig\030\" \003(\0132\013.PBApCo"
    "nfig\022#\n\013JudgeConfig\030# \003(\0132\016.PBJudgeConfi"
    "g\022#\n\013WizardTable\030$ \003(\0132\016.PBWizardTable\022\027"
    "\n\005Trend\030% \003(\0132\010.PBTrend\022%\n\014AchieveAward\030"
    "& \003(\0132\017.PBAchieveAward\022\027\n\005Power\030\' \003(\0132\010."
    "PBPower\022\035\n\010Official\030( \003(\0132\013.PBOfficial\022%"
    "\n\014ConstructExp\030) \003(\0132\017.PBConstructExp\022+\n"
    "\013TalentStage\030* \003(\0132\026.PBTemplateTalentSta"
    "ge\022\037\n\tCorpsBOSS\030+ \003(\0132\014.PBCorpsBOSS\"\252\001\n\021"
    "PBHandinEncourage\022\016\n\006TempId\030\001 \001(\r\022\026\n\016Han"
    "dinItemType\030\002 \001(\r\022\024\n\014HandinItemID\030\003 \001(\r\022"
    "\025\n\rHandinItemNum\030\004 \001(\r\022\025\n\rEncourageType\030"
    "\005 \001(\r\022\023\n\013EncourageId\030\006 \001(\r\022\024\n\014EncourageN"
    "um\030\007 \001(\r\"K\n\rPBHandinTable\022\016\n\006TempID\030\001 \001("
    "\r\022\022\n\nActivityId\030\002 \001(\r\022\026\n\016EncourageTplID\030"
    "\003 \003(\r\"\353\004\n\nPBItemBase\022\016\n\006TempID\030\001 \001(\r\022\020\n\010"
    "ItemType\030\002 \001(\r\022\023\n\013ProcessType\030\003 \001(\r\022\021\n\tP"
    "ileLimit\030\004 \001(\r\022\020\n\010ItemName\030\005 \001(\t\022\021\n\tMode"
    "lName\030\006 \001(\t\022\020\n\010IconName\030\007 \001(\t\022\025\n\rPurchas"
    "ePrice\030\010 \001(\r\022\021\n\tSalePrice\030\t \001(\r\022\031\n\021Purch"
    "aseBindMoney\030\n \001(\r\022\025\n\rSaleBindMoney\030\013 \001("
    "\r\022\020\n\010Describe\030\014 \001(\t\022\020\n\010LastTime\030\r \001(\r\022\022\n"
    "\nStopAttack\030\016 \001(\r\022\020\n\010TypeDesc\030\017 \001(\t\022\016\n\006C"
    "anUse\030\020 \001(\r\022\017\n\007SkillID\030\021 \001(\r\022\r\n\005Level\030\022 "
    "\001(\r\022\021\n\tDisappear\030\023 \001(\r\022\017\n\007CDGroup\030\024 \003(\r\022"
    "\020\n\010LmtMapID\030\025 \003(\r\022\021\n\tValidTime\030\026 \001(\r\022\021\n\t"
    "ValidType\030\027 \001(\r\022\020\n\010CommonID\030\030 \001(\r\022\017\n\007Eat"
    "Type\030\031 \001(\r\022\020\n\010EatValue\030\032 \001(\r\022\021\n\tCountTyp"
    "e\030\033 \001(\r\022\021\n\tLmtLineID\030\034 \001(\r\022\023\n\013LmtUseMapI"
    "D\030\035 \003(\r\022\025\n\rLmtRepetionID\030\036 \003(\r\022\016\n\006CompID"
    "\030\037 \001(\r\022\023\n\013InvilidDate\030  \001(\r\"<\n\014PBItemRet"
    "urn\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\r\n\005Ti"
    "mer\030\002 \001(\r\"\214\001\n\017PBItemSkillBook\022\035\n\010BaseInf"
    "o\030\001 \001(\0132\013.PBItemBase\022\r\n\005Color\030\002 \001(\r\022\017\n\007S"
    "killID\030\003 \001(\r\022\020\n\010SuccProb\030\004 \001(\r\022\025\n\rNeedMo"
    "neyType\030\005 \001(\r\022\021\n\tNeedMoney\030\006 \001(\r\"\\\n\017PBIt"
    "emBindStone\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBa"
    "se\022\023\n\013FaceGroupID\030\002 \001(\r\022\025\n\rBindStoneType"
    "\030\003 \001(\r\"@\n\014PBItemScroll\022\035\n\010BaseInfo\030\001 \001(\013"
    "2\013.PBItemBase\022\021\n\tGetTaskID\030\002 \001(\r\"\310\001\n\nPBI"
    "temCall\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\021"
    "\n\tCallNpcID\030\002 \001(\r\022\t\n\001X\030\003 \001(\005\022\t\n\001Y\030\004 \001(\005\022"
    "\021\n\tIsDestroy\030\005 \001(\005\022\r\n\005MapID\030\006 \001(\005\022\020\n\010Lmt"
    "MapID\030\007 \001(\005\022\014\n\004LmtX\030\010 \001(\005\022\014\n\004LmtY\030\t \001(\005\022"
    "\017\n\007LmtWide\030\n \001(\005\022\021\n\tLmtHeight\030\013 \001(\005\"\200\002\n\n"
    "PBItemCard\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBas"
    "e\022\020\n\010ShowText\030\002 \001(\t\022\r\n\005Order\030\003 \001(\r\022\016\n\006We"
    "apon\030\004 \001(\t\022\r\n\005Skill\030\005 \001(\t\022\r\n\005Level\030\006 \001(\t"
    "\022\013\n\003Exp\030\007 \001(\r\022\023\n\013CanExchange\030\010 \001(\r\022\024\n\014Ca"
    "nChallenge\030\t \001(\r\022\014\n\004Type\030\n \001(\r\022\013\n\003Pos\030\013 "
    "\001(\r\022\r\n\005Bonus\030\014 \001(\r\022\020\n\010SkillID1\030\r \001(\r\022\020\n\010"
    "SkillID2\030\016 \001(\r\"P\n\016PBItemTeleport\022\035\n\010Base"
    "Info\030\001 \001(\0132\013.PBItemBase\022\r\n\005MapID\030\002 \001(\r\022\020"
    "\n\010UseTimes\030\003 \001(\r\"m\n\021PBItemReturnPaper\022\035\n"
    "\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\016\n\006LineID\030\002"
    " \001(\r\022\r\n\005MapID\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r\022\014\n\004Pos"
    "Y\030\005 \001(\r\"V\n\020PBItemTeleSymbol\022\035\n\010BaseInfo\030"
    "\001 \001(\0132\013.PBItemBase\022\021\n\tTeleTable\030\002 \001(\r\022\020\n"
    "\010UseTimes\030\003 \001(\r\"\242\001\n\013PBItemStove\022\035\n\010BaseI"
    "nfo\030\001 \001(\0132\013.PBItemBase\022\016\n\006LineID\030\002 \001(\r\022\r"
    "\n\005MapID\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r\022\014\n\004PosY\030\005 \001("
    "\r\022\020\n\010CoolTime\030\006 \001(\r\022\023\n\013MetierLimit\030\007 \001(\r"
    "\022\022\n\nLevelLimit\030\010 \001(\r\"\346\001\n\014PBItemPetEgg\022\035\n"
    "\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\021\n\tPetTempI"
    "D\030\002 \001(\r\022\022\n\nNeedItemID\030\003 \001(\r\022\023\n\013RevertPri"
    "ce\030\004 \001(\r\022\022\n\nInitAdvice\030\005 \001(\r\022\021\n\tInitLeve"
    "l\030\006 \001(\r\022\017\n\007InitExp\030\007 \001(\r\022\026\n\016InitSkillPoi"
    "nt\030\010 \001(\r\022\023\n\013InitSkillID\030\t \003(\r\022\026\n\016InitSki"
    "llLevel\030\n \003(\r\"f\n\rPBItemPetFood\022\035\n\010BaseIn"
    "fo\030\001 \001(\0132\013.PBItemBase\022\021\n\tInitLevel\030\002 \001(\r"
    "\022\021\n\tFullLevel\030\003 \001(\r\022\020\n\010TypeMask\030\004 \001(\r\"_\n"
    "\014PBItemRelife\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItem"
    "Base\022\r\n\005Timer\030\002 \001(\r\022\020\n\010CoolTime\030\003 \001(\r\022\017\n"
    "\007ShareCD\030\004 \001(\r\"\225\001\n\013PBItemSkill\022\035\n\010BaseIn"
    "fo\030\001 \001(\0132\013.PBItemBase\022\022\n\nLevelLimit\030\002 \001("
    "\r\022\017\n\007SkillID\030\003 \001(\r\022\020\n\010CoolTime\030\004 \001(\r\022\017\n\007"
    "ShareCD\030\005 \001(\r\022\017\n\007OprType\030\006 \001(\r\022\016\n\006BuffID"
    "\030\007 \001(\r\";\n\nPBItemBook\022\035\n\010BaseInfo\030\001 \001(\0132\013"
    ".PBItemBase\022\016\n\006OPType\030\002 \001(\r\"\205\001\n\tPBItemUp"
    "g\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010MaxL"
    "evel\030\002 \001(\r\022\014\n\004Type\030\003 \001(\r\022\r\n\005Limit\030\004 \001(\r\022"
    "\014\n\004Fail\030\005 \001(\r\022\014\n\004Luck\030\006 \003(\r\022\016\n\006UpType\030\007 "
    "\001(\r\"s\n\rPBItemUpgLuck\022\035\n\010BaseInfo\030\001 \001(\0132\013"
    ".PBItemBase\022\020\n\010IncLuck1\030\002 \001(\r\022\020\n\010IncLuck"
    "2\030\003 \001(\r\022\020\n\010IncLuck3\030\004 \003(\r\022\r\n\005Level\030\005 \001(\r"
    "\"a\n\016PBItemUpgLeast\022\035\n\010BaseInfo\030\001 \001(\0132\013.P"
    "BItemBase\022\020\n\010IncLuck1\030\002 \001(\r\022\020\n\010IncLuck2\030"
    "\003 \001(\r\022\014\n\004Type\030\004 \001(\r\"e\n\014PBItemRemove\022\035\n\010B"
    "aseInfo\030\001 \001(\0132\013.PBItemBase\022\014\n\004Rand\030\002 \003(\r"
    "\022\014\n\004Bind\030\003 \001(\r\022\r\n\005Level\030\004 \001(\r\022\013\n\003Low\030\005 \001"
    "(\r\"_\n\014PBItemChange\022\035\n\010BaseInfo\030\001 \001(\0132\013.P"
    "BItemBase\022\014\n\004Type\030\002 \001(\r\022\013\n\003Res\030\003 \001(\r\022\025\n\r"
    "MetierRequire\030\004 \001(\r\"\244\001\n\016PBItemQuestion\022\035"
    "\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\024\n\014Questio"
    "nRate\030\002 \003(\r\022\021\n\tExpAddRae\030\003 \001(\r\022\026\n\016EachTi"
    "meLength\030\004 \001(\r\022\027\n\017TotalTimeLength\030\005 \001(\r\022"
    "\031\n\021RepeatTimeAllowed\030\006 \001(\r\"\217\002\n\nPBItemTas"
    "k\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010UseT"
    "imes\030\002 \001(\r\022\021\n\tValidTime\030\003 \001(\r\022\020\n\010ShowTex"
    "t\030\004 \001(\t\022\r\n\005MapID\030\005 \001(\r\022\014\n\004PosX\030\006 \001(\r\022\014\n\004"
    "PosY\030\007 \001(\r\022\r\n\005Width\030\010 \001(\r\022\016\n\006Height\030\t \001("
    "\r\022\021\n\tGetTaskID\030\n \001(\r\022\022\n\nGiveItemID\030\013 \001(\r"
    "\022\022\n\nChangeTime\030\014 \001(\r\022\022\n\nChangeItem\030\r \001(\r"
    "\022\022\n\nFailTaskID\030\016 \001(\r\"R\n\013PBItemStuff\022\035\n\010B"
    "aseInfo\030\001 \001(\0132\013.PBItemBase\022\021\n\tShowColor\030"
    "\002 \001(\r\022\021\n\tComposeID\030\003 \001(\r\"I\n\tPBItemExp\022\035\n"
    "\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\017\n\007IncRate\030"
    "\002 \001(\r\022\014\n\004Time\030\003 \001(\r\"X\n\020PBItemChangeCamp\022"
    "\r\n\005TmpID\030\001 \001(\r\022\020\n\010m_itemId\030\002 \001(\r\022\020\n\010m_gi"
    "ftId\030\003 \001(\r\022\021\n\tm_cd_time\030\004 \001(\r\"\201\001\n\rPBComR"
    "uneUnit\022\022\n\nm_whitenum\030\001 \001(\r\022\021\n\tm_bluenum"
    "\030\002 \001(\r\022\023\n\013m_purplenum\030\003 \001(\r\022\016\n\006m_rand\030\004 "
    "\001(\r\022\017\n\007m_money\030\005 \001(\r\022\023\n\013m_runeLevel\030\006 \001("
    "\r\"z\n\017PBComRuneConfig\022\r\n\005TmpID\030\001 \001(\r\022\024\n\014m"
    "_upRuneRand\030\002 \001(\r\022\r\n\005m_max\030\003 \001(\r\022\r\n\005m_mi"
    "n\030\004 \001(\r\022$\n\014m_upRuneUnit\030\005 \003(\0132\016.PBComRun"
    "eUnit\"A\n\013PBItemShout\022\035\n\010BaseInfo\030\001 \001(\0132\013"
    ".PBItemBase\022\023\n\013FaceGroupID\030\002 \001(\r\"E\n\017PBIt"
    "emAutoShout\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBa"
    "se\022\023\n\013FaceGroupID\030\002 \001(\r\"\315\003\n\014PBItemPhysic"
    "\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010ShowT"
    "ype\030\002 \001(\r\022\016\n\006BuffID\030\003 \001(\r\022\022\n\nLevelLimit\030"
    "\004 \001(\r\022\022\n\nHPMaxValue\030\005 \001(\r\022\016\n\006HPTime\030\006 \001("
    "\r\022\021\n\tHPIncTime\030\007 \001(\r\022\022\n\nHPInvValue\030\010 \001(\r"
    "\022\022\n\nMPMaxValue\030\t \001(\r\022\016\n\006MPTime\030\n \001(\r\022\021\n\t"
    "MPIncTime\030\013 \001(\r\022\022\n\nMPInvValue\030\014 \001(\r\022\020\n\010C"
    "oolTime\030\r \001(\r\022\017\n\007ShareCD\030\016 \001(\r\022\021\n\tHPPerc"
    "ent\030\017 \001(\r\022\021\n\tMPPercent\030\020 \001(\r\022\024\n\014MaxHPPer"
    "cent\030\021 \001(\r\022\024\n\014MaxMPPercent\030\022 \001(\r\022\024\n\014Life"
    "SkilType\030\023 \001(\r\022\023\n\013DegreeValue\030\024 \001(\r\022\022\n\nP"
    "hisicType\030\025 \001(\r\022\017\n\007ApValue\030\026 \001(\r\022\r\n\005Colo"
    "r\030\027 \001(\r\"\315\002\n\013PBItemHorse\022\035\n\010BaseInfo\030\001 \001("
    "\0132\013.PBItemBase\022\023\n\013MetierLimit\030\002 \001(\r\022\022\n\nL"
    "evelLimit\030\003 \001(\r\022\023\n\013PersonLimit\030\004 \001(\r\022\017\n\007"
    "UseTime\030\005 \001(\r\022\030\n\020IncreaseSpeedPer\030\006 \001(\r\022"
    "\021\n\tModelName\030\007 \001(\t\022\020\n\010CoolTime\030\010 \001(\r\022\017\n\007"
    "ShareCD\030\t \001(\r\022\021\n\tSpeedBuff\030\n \001(\r\022\021\n\tUsin"
    "gTime\030\013 \001(\r\022\020\n\010ShowText\030\014 \001(\t\022\024\n\014OffHors"
    "eProb\030\r \001(\r\022\021\n\tOffBuffID\030\016 \001(\r\022\016\n\006InitAP"
    "\030\017 \001(\r\022\017\n\007DeltaAP\030\020 \001(\r\"*\n\007PBStuff\022\017\n\007St"
    "uffID\030\001 \001(\r\022\016\n\006Number\030\002 \001(\r\"/\n\tPBProduct"
    "\022\021\n\tProductID\030\001 \001(\r\022\017\n\007Percent\030\002 \001(\r\"\341\001\n"
    "\017PBItemBluePrint\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBI"
    "temBase\022\016\n\006TempID\030\002 \001(\r\022\023\n\013NeedSkillID\030\003"
    " \001(\r\022\026\n\016NeedSkillLevel\030\004 \001(\r\022\024\n\014ProduceC"
    "ount\030\005 \001(\r\022\023\n\013ProduceCost\030\006 \001(\r\022\021\n\tObtai"
    "nExp\030\007 \001(\r\022\027\n\005Stuff\030\010 \003(\0132\010.PBStuff\022\033\n\007P"
    "roduct\030\t \003(\0132\n.PBProduct\"\252\001\n\nPBItemRune\022"
    "\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\016\n\006SuitID"
    "\030\002 \001(\r\022\014\n\004Word\030\003 \001(\t\022\017\n\007OrderID\030\004 \001(\r\022\024\n"
    "\014InsertCharge\030\005 \001(\r\022\022\n\nPropertyID\030\006 \001(\r\022"
    "\021\n\tRuneIndex\030\007 \001(\r\022\021\n\tShowColor\030\010 \001(\r\"\277\003"
    "\n\013PBItemJewel\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItem"
    "Base\022\016\n\006TypeID\030\002 \001(\r\022\013\n\003Pos\030\003 \001(\r\022\021\n\tSho"
    "wColor\030\004 \001(\r\022\020\n\010Property\030\005 \001(\r\022\016\n\006Unique"
    "\030\006 \001(\r\022\017\n\007JewelID\030\007 \003(\r\022\021\n\tComposeID\030\010 \001"
    "(\r\022\024\n\014InsertCharge\030\t \001(\r\022\024\n\014RemoveCharge"
    "\030\n \001(\r\022\025\n\rComposeCharge\030\013 \001(\r\022\r\n\005Level\030\014"
    " \001(\r\022\014\n\004Rand\030\r \003(\r\022\022\n\nNewJewelID\030\016 \001(\r\022\017"
    "\n\007NewRand\030\017 \003(\r\022\024\n\014CarveJewelID\030\020 \003(\r\022\021\n"
    "\tCarveRand\030\021 \003(\r\022\023\n\013CarveCharge\030\022 \001(\r\022\016\n"
    "\006CardID\030\023 \001(\r\022\020\n\010CanCarve\030\024 \001(\r\022\022\n\nAffec"
    "tRand\030\025 \001(\r\022\020\n\010JewComID\030\026 \001(\r\022\020\n\010ComLeve"
    "l\030\027 \001(\r\"]\n\rPBItemYuanBug\022\035\n\010BaseInfo\030\001 \001"
    "(\0132\013.PBItemBase\022\014\n\004Yuan\030\002 \001(\r\022\r\n\005EggID\030\003"
    " \001(\r\022\020\n\010YuanType\030\004 \001(\r\"b\n\rPBItemYuanEgg\022"
    "\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\r\n\005Level\030"
    "\002 \001(\r\022\021\n\tComposeID\030\003 \001(\r\022\020\n\010MaxEquip\030\004 \001"
    "(\r\"2\n\016PBItemSequence\022\016\n\006TempID\030\001 \001(\r\022\020\n\010"
    "Sequence\030\002 \003(\r\"\300\n\n\013PBEquipment\022\035\n\010BaseIn"
    "fo\030\001 \001(\0132\013.PBItemBase\022\021\n\tModalName\030\002 \001(\t"
    "\022\021\n\tShowLevel\030\003 \001(\r\022\021\n\tEquipType\030\004 \001(\r\022\021"
    "\n\tShowColor\030\005 \001(\r\022\022\n\nStrRequire\030\006 \003(\r\022\022\n"
    "\nConRequire\030\007 \003(\r\022\022\n\nStaRequire\030\010 \003(\r\022\022\n"
    "\nWisRequire\030\t \003(\r\022\022\n\nSprRequire\030\n \003(\r\022\025\n"
    "\rMetierRequire\030\013 \001(\r\022\024\n\014LevelRequire\030\014 \001"
    "(\r\022\022\n\nSexRequire\030\r \001(\r\022\021\n\tYuanValue\030\016 \001("
    "\r\022\027\n\017EquipDurability\030\017 \001(\r\022\026\n\016BaseMendCh"
    "arge\030\020 \001(\r\022\027\n\017NpcAbrasionRate\030\021 \001(\r\022\032\n\022P"
    "layerAbrasionRate\030\022 \001(\r\022\022\n\nCanUpGrade\030\023 "
    "\001(\r\022\021\n\tUpgCharge\030\024 \001(\r\022\025\n\rNeedBindMoney\030"
    "\025 \001(\r\022\025\n\rUpgPropertyID\030\026 \003(\r\022\020\n\010UpgValue"
    "\030\027 \003(\r\022\026\n\016MaxSlotNumber1\030\030 \003(\r\022\026\n\016MaxSlo"
    "tNumber2\030\031 \001(\r\022\027\n\017PropertyPercent\030\032 \003(\r\022"
    "\027\n\017PropertyTableID\030\033 \003(\r\022\031\n\021PropertyPerc"
    "entEx\030\034 \003(\r\022\031\n\021PropertyTableIDEx\030\035 \003(\r\022\023"
    "\n\013PAttackDiff\030\036 \003(\r\022\025\n\rJudgePercent1\030\037 \003"
    "(\r\022\025\n\rJudgePercent2\030  \003(\r\022\025\n\rResDefPerce"
    "nt\030! \003(\r\022\025\n\rResAttPercent\030\" \003(\r\022\023\n\013ResDe"
    "fValue\030# \003(\r\022\023\n\013ResAttValue\030$ \003(\r\022\016\n\006Sui"
    "tID\030% \001(\r\022\017\n\007SuitPos\030& \001(\r\022\023\n\013MAttackDif"
    "f\030\' \003(\r\022\022\n\nOpenCharge\030( \001(\r\022\021\n\tAddCharge"
    "\030) \001(\r\022\023\n\013JudgeCharge\030* \001(\r\022\025\n\rReJudgeCh"
    "arge\030+ \001(\r\022\024\n\014DefUpgCharge\030, \001(\r\022\027\n\017DefC"
    "hangeCharge\030- \001(\r\022\024\n\014AttUpgCharge\030. \001(\r\022"
    "\027\n\017AttChangeCharge\030/ \001(\r\022\025\n\rCanDefUpgrad"
    "e\0300 \001(\r\022\025\n\rCanAttUpgrade\0301 \001(\r\022\021\n\tBindBo"
    "nus\0302 \001(\r\022\024\n\014MultiCompose\0303 \001(\r\022\021\n\tCanCh"
    "ange\0304 \001(\r\022\024\n\014ChangeCharge\0305 \001(\r\022\020\n\010CanS"
    "plit\0306 \001(\r\022\017\n\007SplitID\0307 \003(\r\022\020\n\010SplitNum\030"
    "8 \003(\r\022\023\n\013SplitCharge\0309 \001(\r\022\021\n\tUpgExtra1\030"
    ": \003(\r\022\021\n\tUpgExtra2\030; \003(\r\022\021\n\tExtCharge\030< "
    "\001(\r\022\022\n\nResistTran\030= \001(\r\022\020\n\010IsShenQi\030> \001("
    "\r\"A\n\016PBEquipFashion\022\037\n\tEquipInfo\030\001 \001(\0132\014"
    ".PBEquipment\022\016\n\006BuffID\030\002 \001(\r\"p\n\rPBEquipW"
    "eapon\022\037\n\tEquipInfo\030\001 \001(\0132\014.PBEquipment\022\022"
    "\n\nWeaponType\030\002 \001(\r\022\022\n\nAttackType\030\003 \001(\r\022\026"
    "\n\016AttackDistance\030\004 \001(\r\"T\n\014PBEquipArmor\022\037"
    "\n\tEquipInfo\030\001 \001(\0132\014.PBEquipment\022\020\n\010ShowT"
    "ype\030\002 \001(\r\022\021\n\tArmorSuit\030\003 \001(\t\"\327\001\n\022PBTempl"
    "ateProperty\022\016\n\006TempID\030\001 \001(\r\022\024\n\014PropertyN"
    "ame\030\002 \001(\t\022\024\n\014PropertyFunc\030\003 \001(\r\022\016\n\006CanOu"
    "t\030\004 \001(\r\022\023\n\013IntMinValue\030\005 \001(\r\022\023\n\013IntMaxVa"
    "lue\030\006 \001(\r\022\025\n\rFloatMinValue\030\007 \001(\r\022\025\n\rFloa"
    "tMaxValue\030\010 \001(\r\022\017\n\007SkillID\030\t \001(\r\022\014\n\004Area"
    "\030\n \001(\r\"4\n\021PBPropertyPercent\022\016\n\006TempID\030\001 "
    "\001(\r\022\017\n\007Percent\030\002 \001(\r\"O\n\027PBTemplateProper"
    "tyTable\022\016\n\006TempID\030\001 \001(\r\022$\n\010Property\030\002 \003("
    "\0132\022.PBPropertyPercent\"\346\024\n\010PBMetier\022\016\n\006Te"
    "mpID\030\001 \001(\r\022\022\n\nMetierName\030\002 \001(\t\022\020\n\010Metier"
    "ID\030\003 \001(\r\022\017\n\007GenerID\030\004 \003(\r\022\022\n\nSkillPoint\030"
    "\005 \001(\r\022\025\n\rPropertyPoint\030\006 \001(\r\022\021\n\tWalkSpee"
    "d\030\007 \001(\r\022\020\n\010RunSpeed\030\010 \001(\r\022\021\n\tInitLevel\030\t"
    " \001(\r\022\016\n\006InitHP\030\n \001(\r\022\016\n\006InitMP\030\013 \001(\r\022\023\n\013"
    "InitPAttack\030\014 \001(\r\022\024\n\014InitPDefense\030\r \001(\r\022"
    "\023\n\013InitMAttack\030\016 \001(\r\022\024\n\014InitMDefense\030\017 \001"
    "(\r\022\025\n\rInitAbnResist\030\020 \001(\r\022\026\n\016InitWindRes"
    "ist\030\021 \001(\r\022\026\n\016InitFireResist\030\022 \001(\r\022\027\n\017Ini"
    "tWaterResist\030\023 \001(\r\022\027\n\017InitLightResist\030\024 "
    "\001(\r\022\027\n\017InitEarthResist\030\025 \001(\r\022\027\n\017InitSado"
    "wResist\030\026 \001(\r\022\025\n\rInitDeathRate\030\027 \001(\r\022\026\n\016"
    "InitDeathValue\030\030 \001(\r\022\026\n\016InitNmlHitrate\030\031"
    " \001(\r\022\026\n\016InitNormalDuck\030\032 \001(\r\022\025\n\rInitSkil"
    "lDuck\030\033 \001(\r\022\017\n\007DeltaHP\030\034 \001(\r\022\017\n\007DeltaMP\030"
    "\035 \001(\r\022\024\n\014DeltaPAttack\030\036 \001(\r\022\025\n\rDeltaPDef"
    "ense\030\037 \001(\r\022\024\n\014DeltaMAttack\030  \001(\r\022\025\n\rDelt"
    "aMDefense\030! \001(\r\022\026\n\016DeltaAbnResist\030\" \001(\r\022"
    "\027\n\017DeltaWindResist\030# \001(\r\022\027\n\017DeltaFireRes"
    "ist\030$ \001(\r\022\030\n\020DeltaWaterResist\030% \001(\r\022\030\n\020D"
    "eltaLightResist\030& \001(\r\022\030\n\020DeltaEarthResis"
    "t\030\' \001(\r\022\031\n\021DeltaShadowResist\030( \001(\r\022\026\n\016De"
    "ltaDeathRate\030) \001(\r\022\027\n\017DeltaDeathValue\030* "
    "\001(\r\022\032\n\022DeltaNormalHitrate\030+ \001(\r\022\027\n\017Delta"
    "NormalDuck\030, \001(\r\022\026\n\016DeltaSkillDuck\030- \001(\r"
    "\022\025\n\rPAttackPerStr\030. \001(\r\022\030\n\020DeathValuePer"
    "Str\030/ \001(\r\022\023\n\013MaxHPPerStr\0300 \001(\r\022\026\n\016PDefen"
    "sePerCon\0301 \001(\r\022\026\n\016HPRSpeedPerCon\0302 \001(\r\022\023"
    "\n\013MaxHPPerSta\0303 \001(\r\022\027\n\017AbnResistPerSta\0304"
    " \001(\r\022\025\n\rMAttackPerWis\0305 \001(\r\022\023\n\013MaxMPPerW"
    "is\0306 \001(\r\022\030\n\020DeathValuePerWis\0307 \001(\r\022\026\n\016MD"
    "efensePerSpr\0308 \001(\r\022\023\n\013MaxMPPerSpr\0309 \001(\r\022"
    "\026\n\016MPRSpeedPerSpr\030: \001(\r\022\026\n\016NormalHPRSpee"
    "d\030; \001(\r\022\031\n\021NormalSitHPRSpeed\030< \001(\r\022\026\n\016Ba"
    "ttleHPRSpeed\030= \001(\r\022\031\n\021BattleSitHPRSpeed\030"
    "> \001(\r\022\026\n\016NormalMPRSpeed\030? \001(\r\022\031\n\021NormalS"
    "itMPRSpeed\030@ \001(\r\022\026\n\016BattleMPRSpeed\030A \001(\r"
    "\022\031\n\021BattleSitMPRSpeed\030B \001(\r\022\026\n\016InitIgnor"
    "eDuck\030C \001(\r\022\027\n\017DeltaIgnoreDuck\030D \001(\r\022\025\n\r"
    "MAttackPerStr\030E \001(\r\022\027\n\017DeathRatePerStr\030F"
    " \001(\r\022\023\n\013MaxMPPerStr\030G \001(\r\022\026\n\016PDefensePer"
    "Str\030H \001(\r\022\026\n\016MDefensePerStr\030I \001(\r\022\030\n\020Nml"
    "HitratePerStr\030J \001(\r\022\030\n\020NormalDuckPerStr\030"
    "K \001(\r\022\030\n\020IgnoreDuckPerStr\030L \001(\r\022\025\n\rPAtta"
    "ckPerCon\030M \001(\r\022\025\n\rMAttackPerCon\030N \001(\r\022\027\n"
    "\017DeathRatePerCon\030O \001(\r\022\030\n\020DeathValuePerC"
    "on\030P \001(\r\022\023\n\013MaxHPPerCon\030Q \001(\r\022\023\n\013MaxMPPe"
    "rCon\030R \001(\r\022\026\n\016MDefensePerCon\030S \001(\r\022\030\n\020Nm"
    "lHitratePerCon\030T \001(\r\022\030\n\020NormalDuckPerCon"
    "\030U \001(\r\022\030\n\020IgnoreDuckPerCon\030V \001(\r\022\025\n\rPRed"
    "ucePerSta\030W \001(\r\022\025\n\rMReducePerSta\030X \001(\r\022\025"
    "\n\rPAttackPerWis\030Y \001(\r\022\023\n\013MaxHPPerWis\030Z \001"
    "(\r\022\027\n\017DeathRatePerWis\030[ \001(\r\022\026\n\016PDefenseP"
    "erWis\030\\ \001(\r\022\026\n\016MDefensePerWis\030] \001(\r\022\030\n\020N"
    "mlHitratePerWis\030^ \001(\r\022\030\n\020NormalDuckPerWi"
    "s\030_ \001(\r\022\030\n\020IgnoreDuckPerWis\030` \001(\r\022\025\n\rPAt"
    "tackPerSpr\030a \001(\r\022\025\n\rMAttackPerSpr\030b \001(\r\022"
    "\027\n\017DeathRatePerSpr\030c \001(\r\022\030\n\020DeathValuePe"
    "rSpr\030d \001(\r\022\023\n\013MaxHPPerSpr\030e \001(\r\022\026\n\016PDefe"
    "nsePerSpr\030f \001(\r\022\030\n\020NmlHitratePerSpr\030g \001("
    "\r\022\030\n\020NormalDuckPerSpr\030h \001(\r\022\030\n\020IgnoreDuc"
    "kPerSpr\030i \001(\r\022\030\n\020InitDeathDefense\030j \001(\r\022"
    "\031\n\021DeltaDeathDefense\030k \001(\r\022\032\n\022DeathDefen"
    "sePerStr\030l \001(\r\022\032\n\022DeathDefensePerCon\030m \001"
    "(\r\022\032\n\022DeathDefensePerSta\030n \001(\r\022\032\n\022DeathD"
    "efensePerWis\030o \001(\r\022\032\n\022DeathDefensePerSpr"
    "\030p \001(\r\"\273\021\n\005PBNpc\022\035\n\004Ogre\030\001 \001(\0132\017.PBOgreP"
    "roperty\022\020\n\010FuncType\030\002 \001(\r\022\014\n\004Talk\030\003 \001(\t\022"
    "\017\n\007StageID\030\004 \001(\r\022\025\n\rTalkServiceID\030\005 \001(\r\022"
    "\025\n\rSellServiceID\030\006 \001(\r\022\023\n\013MailService\030\007 "
    "\001(\r\022\026\n\016StorageService\030\010 \001(\r\022\022\n\nUpgServic"
    "e\030\t \001(\r\022\026\n\016EqtBindService\030\n \001(\r\022\026\n\016Welfa"
    "reService\030\013 \001(\r\022\020\n\010Describe\030\014 \001(\t\022\024\n\014Stu"
    "dySkillID\030\r \001(\r\022\r\n\005TownX\030\016 \001(\r\022\r\n\005TownY\030"
    "\017 \001(\r\022\026\n\016StorageTaskNpc\030\020 \001(\r\022\025\n\rStorage"
    "TaskID\030\021 \001(\r\022\021\n\tDownLevel\030\022 \001(\r\022\017\n\007UpLev"
    "el\030\023 \001(\r\022\024\n\014DiploidTable\030\024 \001(\r\022\025\n\rResetP"
    "Service\030\025 \001(\r\022\025\n\rFamilyService\030\026 \001(\r\022\023\n\013"
    "CorpService\030\027 \001(\r\022\025\n\rChangeService\030\030 \001(\r"
    "\022\024\n\014JudgeService\030\031 \001(\r\022\027\n\017ActivityServic"
    "e\030\032 \001(\r\022\027\n\017ExchangeService\030\033 \001(\r\022\024\n\014Hono"
    "rService\030\034 \001(\r\022\016\n\006Battle\030\035 \001(\r\022\030\n\020LifeSk"
    "illService\030\036 \001(\r\022\016\n\006BidDay\030\037 \001(\r\022\017\n\007BidH"
    "our\030  \001(\r\022\021\n\tBidMinute\030! \001(\r\022\023\n\013CoprsBat"
    "tle\030\" \001(\r\022\023\n\013MinBidPrice\030# \001(\r\022\022\n\nBattle"
    "City\030$ \001(\r\022\031\n\021MWProJudgeService\030% \001(\r\022\033\n"
    "\023MWSkillJudgeService\030& \001(\r\022\034\n\024EquipExcha"
    "ngeService\030\' \001(\r\022\027\n\017ExchangeTableID\030( \001("
    "\r\022\023\n\013CorpsBidDay\030) \001(\r\022\024\n\014CorpsBidHour\030*"
    " \001(\r\022\026\n\016CorpsBidMinute\030+ \001(\r\022\033\n\023MWClearP"
    "ointService\030, \001(\r\022\034\n\024MWSecondJudgeServic"
    "e\030- \001(\r\022\024\n\014UnionService\030. \001(\r\022\026\n\016Country"
    "Service\030/ \001(\r\022\025\n\rFriendService\0300 \001(\r\022\023\n\013"
    "CountryType\0301 \001(\r\022\027\n\017GoldenYBService\0302 \001"
    "(\r\022\033\n\023ChairManTaskService\0303 \001(\r\022\026\n\016Chair"
    "ManTaskID\0304 \001(\r\022\027\n\017MarriageService\0305 \001(\r"
    "\022\025\n\rMatrixService\0306 \001(\r\022\022\n\nFamilyType\0307 "
    "\001(\r\022\021\n\tStoneBuff\0308 \001(\r\022\021\n\tDisappear\0309 \001("
    "\r\022\026\n\016RefreshService\030: \001(\r\022\022\n\nPedalIndex\030"
    "; \001(\r\022\025\n\rDirectService\030< \001(\r\022\024\n\014ExtraSer"
    "vice\030= \001(\r\022\022\n\nWarService\030> \001(\r\022\021\n\tWarOpT"
    "ype\030? \001(\r\022\020\n\010WarValue\030@ \001(\r\022\017\n\007WarCamp\030A"
    " \001(\r\022\031\n\021EquipLevelService\030B \001(\r\022\020\n\010WarHo"
    "nor\030C \001(\r\022\026\n\016FangCunService\030D \001(\r\022\022\n\nRes"
    "istTran\030E \001(\r\022\016\n\006FBFunc\030F \001(\r\022\026\n\016FBFunc_"
    "Parame1\030G \001(\r\022\026\n\016FBFunc_Parame2\030H \001(\r\022\022\n"
    "\nFBFunc_Str\030I \001(\t\022\022\n\nTaxService\030J \001(\r\022\031\n"
    "\021ChangeCampService\030K \001(\r\022\032\n\022WeakProtectS"
    "ervice\030L \001(\r\022\026\n\016YaoQianShuRank\030M \001(\r\022\016\n\006"
    "Handin\030N \001(\r\022\024\n\014SpecialEvent\030O \001(\r\022\023\n\013Ya"
    "oQianInfo\030P \001(\r\022\024\n\014TreasureBowl\030Q \001(\r\022\032\n"
    "\022MWDecomposeService\030R \001(\r\022\030\n\020MWImprintSe"
    "rvice\030S \001(\r\022\027\n\017MWUpdateService\030T \001(\r\022\031\n\021"
    "MWUpdateExService\030U \001(\r\022\030\n\020CorpsBidStart"
    "Day\030V \001(\r\022\031\n\021CorpsBidStartHour\030W \001(\r\022\033\n\023"
    "CorpsBidStartMinute\030X \001(\r\022\026\n\016LastOneServ"
    "ice\030Y \001(\r\022\032\n\022FamilyBidStartHour\030Z \001(\r\022\034\n"
    "\024FamilyBidStartMinute\030[ \001(\r\022\032\n\022MWQLCompo"
    "seService\030\\ \001(\r\022\031\n\021RandomTeleService\030] \001"
    "(\r\022\026\n\016IntroduceMapID\030^ \001(\r\022\024\n\014ShiTuServi"
    "ce\030_ \001(\r\022\024\n\014SwornService\030` \001(\r\022\030\n\020Global"
    "WarService\030a \001(\r\022\032\n\022SuperEquipExchange\030b"
    " \001(\r\"n\n\nPBSellItem\022\020\n\010PageName\030\001 \001(\t\022\016\n\006"
    "ItemID\030\002 \003(\r\022\025\n\rItemGoldPrice\030\003 \003(\r\022\017\n\007I"
    "temNum\030\004 \003(\r\022\026\n\016ItemRefreshDay\030\005 \003(\r\"e\n\013"
    "PBSellTable\022\016\n\006TempID\030\001 \001(\r\022\031\n\004Item\030\002 \003("
    "\0132\013.PBSellItem\022\025\n\rSellTableType\030\003 \001(\r\022\024\n"
    "\014WarCityMapID\030\004 \001(\r\"E\n\013PBTotalDrop\022\016\n\006Te"
    "mpID\030\001 \001(\r\022\023\n\013DropTableID\030\002 \003(\r\022\021\n\tDropC"
    "ount\030\003 \003(\r\"\201\001\n\nPBDropItem\022\022\n\nDropItemID\030"
    "\001 \001(\r\022\027\n\017DropProbability\030\002 \001(\r\022\027\n\017LevelP"
    "robablity\030\003 \001(\r\022\016\n\006Notify\030\004 \001(\r\022\017\n\007Speci"
    "al\030\005 \001(\r\022\014\n\004Show\030\006 \001(\r\"f\n\013PBDropTable\022\016\n"
    "\006TempID\030\001 \001(\r\022\020\n\010DropTurn\030\002 \001(\r\022\026\n\016DropN"
    "umberRate\030\003 \003(\r\022\035\n\010DropItem\030\004 \003(\0132\013.PBDr"
    "opItem\"\214\003\n\014PBNPCCollect\022\016\n\006TempID\030\001 \001(\r\022"
    "\014\n\004Name\030\002 \001(\t\022\021\n\tModelName\030\003 \001(\t\022\016\n\006Task"
    "ID\030\004 \003(\r\022\016\n\006ItemID\030\005 \003(\r\022\016\n\006DropID\030\006 \001(\r"
    "\022\016\n\006Number\030\007 \001(\r\022\021\n\tSkillType\030\010 \001(\r\022\021\n\tS"
    "killKind\030\t \001(\r\022\025\n\rCollectDegree\030\n \001(\r\022\r\n"
    "\005value\030\013 \003(\r\022\021\n\tProbality\030\014 \003(\r\022\023\n\013Degre"
    "eValue\030\r \003(\r\022\016\n\006apcost\030\016 \001(\r\022\017\n\007ItemNum\030"
    "\017 \003(\r\022\025\n\rItemProbality\030\020 \003(\r\022\024\n\014CollectL"
    "evel\030\021 \001(\r\022\024\n\014ExtraItemNum\030\022 \003(\r\022\032\n\022Extr"
    "aItemProbality\030\023 \003(\r\022\027\n\017CollectTaskType\030"
    "\024 \001(\r\"\361\t\n\016PBOgreProperty\022\016\n\006TempID\030\001 \001(\r"
    "\022\014\n\004Name\030\002 \001(\t\022\021\n\tModelName\030\003 \001(\t\022\020\n\010Ogr"
    "eType\030\004 \001(\r\022\020\n\010DropType\030\005 \001(\r\022\022\n\nStrateg"
    "yID\030\006 \001(\r\022\016\n\006DropID\030\007 \001(\r\022\r\n\005Level\030\010 \001(\r"
    "\022\025\n\rDisplayeLevel\030\t \001(\r\022\022\n\nAttackRate\030\n "
    "\001(\r\022\022\n\nAttackTime\030\013 \001(\r\022\020\n\010HPRSpeed\030\014 \001("
    "\r\022\021\n\tMPRSpeeds\030\r \001(\r\022\020\n\010RunSpeed\030\016 \001(\r\022\021"
    "\n\tInitLevel\030\017 \001(\r\022\n\n\002HP\030\020 \001(\r\022\n\n\002MP\030\021 \001("
    "\r\022\017\n\007PAttack\030\022 \001(\r\022\020\n\010PDefence\030\023 \001(\r\022\024\n\014"
    "PAttackRange\030\024 \001(\r\022\022\n\nPReducePer\030\025 \001(\r\022\017"
    "\n\007MAttack\030\026 \001(\r\022\020\n\010MDefence\030\027 \001(\r\022\024\n\014MAt"
    "tackRange\030\030 \001(\r\022\022\n\nMReducePer\030\031 \001(\r\022\021\n\tD"
    "eathRate\030\032 \001(\r\022\022\n\nDeathValue\030\033 \001(\r\022\024\n\014De"
    "athDefense\030\034 \001(\r\022\025\n\rNormalHitrate\030\035 \001(\r\022"
    "\022\n\nNormalDuck\030\036 \001(\r\022\017\n\007Recover\030\037 \001(\r\022\022\n\n"
    "IgnoreDuck\030  \001(\r\022\016\n\006ResDef\030! \003(\r\022\016\n\006ResA"
    "tt\030\" \003(\r\022\021\n\tNeedDelay\030# \001(\r\022\022\n\nPatrolTyp"
    "e\030$ \001(\r\022\024\n\014IsInitiative\030% \001(\r\022\024\n\014WalkDis"
    "tance\030& \001(\r\022\020\n\010TeleTime\030\' \001(\r\022\026\n\016EnmityD"
    "istance\030( \001(\r\022\022\n\nEnmityTime\030) \001(\r\022\022\n\nCle"
    "arTimer\030* \001(\r\022\013\n\003Exp\030+ \001(\r\022\021\n\tInitMoney\030"
    ", \001(\r\022\022\n\nDeltaMoney\030- \001(\r\022\016\n\006Resist\030. \001("
    "\r\022\016\n\006TranID\030/ \001(\r\022\016\n\006PkType\0300 \001(\r\022\017\n\007Gro"
    "upID\0301 \001(\r\022\017\n\007SkillID\0302 \001(\r\022\022\n\nSkillLeve"
    "l\0303 \001(\r\022\026\n\016SearchDistance\0304 \001(\r\022\020\n\010LeftT"
    "ime\0309 \001(\r\022\017\n\007ResShow\030: \001(\r\022\022\n\nFailTaskID"
    "\030; \003(\r\022\024\n\014JusticeValue\030< \001(\r\022\024\n\014BuffImmu"
    "nity\030= \001(\r\022\023\n\013ObtainTitle\030> \001(\r\022\017\n\007Award"
    "ID\030? \001(\r\022\021\n\tLmtLineID\030@ \001(\r\022\022\n\nRedstoneI"
    "D\030A \001(\r\022\021\n\tOgreEvent\030B \001(\r\022\022\n\nCorpsValue"
    "\030C \001(\r\022\023\n\013DropsDescID\030E \001(\r\022\025\n\rDiffcultI"
    "ndex\030F \001(\r\022\025\n\rDiffcultAward\030G \001(\r\"1\n\013PBB"
    "ox_Click\022\r\n\005Event\030\001 \001(\r\022\023\n\013Probability\030\002"
    " \001(\r\"k\n\tPBOgreBox\022!\n\010OgreInfo\030\001 \001(\0132\017.PB"
    "OgreProperty\022\033\n\005Click\030\002 \003(\0132\014.PBBox_Clic"
    "k\022\017\n\007BoxType\030\003 \001(\r\022\r\n\005KeyID\030\004 \001(\r\"\305\005\n\tPB"
    "ShowPet\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\r\n"
    "\005Model\030\003 \001(\t\022\020\n\010IconName\030\004 \001(\t\022\020\n\010Metier"
    "ID\030\005 \001(\r\022\020\n\010MaxLevel\030\006 \001(\r\022\024\n\014LevelRequi"
    "re\030\007 \001(\r\022\023\n\013ExceedLevel\030\010 \001(\r\022\021\n\tPetItem"
    "ID\030\t \001(\r\022\022\n\nRevertCost\030\n \001(\r\022\023\n\013InitStor"
    "age\030\013 \001(\r\022\027\n\017LevelIncStorage\030\014 \001(\r\022\022\n\nIn"
    "cStorage\030\r \001(\r\022\021\n\tExpPerMin\030\016 \001(\r\022\026\n\016Rep"
    "letionLimit\030\017 \001(\r\022\023\n\013RepletionHP\030\020 \001(\r\022\025"
    "\n\rRevertHPValue\030\021 \001(\r\022\025\n\rMinRepletion1\030\022"
    " \001(\r\022\025\n\rMaxRepletion1\030\023 \001(\r\022\025\n\rExpSpeedR"
    "ate1\030\024 \001(\r\022\025\n\rMinRepletion2\030\025 \001(\r\022\025\n\rMax"
    "Repletion2\030\026 \001(\r\022\025\n\rExpSpeedRate2\030\027 \001(\r\022"
    "\025\n\rMinRepletion3\030\030 \001(\r\022\025\n\rMaxRepletion3\030"
    "\031 \001(\r\022\025\n\rExpSpeedRate3\030\032 \001(\r\022\025\n\rMinReple"
    "tion4\030\033 \001(\r\022\025\n\rMaxRepletion4\030\034 \001(\r\022\025\n\rEx"
    "pSpeedRate4\030\035 \001(\r\022\025\n\rMinRepletion5\030\036 \001(\r"
    "\022\025\n\rMaxRepletion5\030\037 \001(\r\022\025\n\rExpSpeedRate5"
    "\030  \001(\r\022\021\n\tFoodCombo\030! \001(\r\"\265\013\n\013PBBattlePe"
    "t\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\r\n\005Model"
    "\030\003 \001(\t\022\020\n\010IconName\030\004 \001(\t\022\020\n\010MetierID\030\005 \001"
    "(\r\022\020\n\010MaxLevel\030\006 \001(\r\022\024\n\014LevelRequire\030\007 \001"
    "(\r\022\023\n\013ExceedLevel\030\010 \001(\r\022\021\n\tPetItemID\030\t \001"
    "(\r\022\022\n\nRevertCost\030\n \001(\r\022\026\n\016RepletionLimit"
    "\030\013 \001(\r\022\025\n\rMinRepletion1\030\014 \001(\r\022\025\n\rMaxRepl"
    "etion1\030\r \001(\r\022\025\n\rExpSpeedRate1\030\016 \001(\r\022\017\n\007H"
    "PRate1\030\017 \001(\r\022\023\n\013AttackRate1\030\020 \001(\r\022\025\n\rMin"
    "Repletion2\030\021 \001(\r\022\025\n\rMaxRepletion2\030\022 \001(\r\022"
    "\025\n\rExpSpeedRate2\030\023 \001(\r\022\017\n\007HPRate2\030\024 \001(\r\022"
    "\023\n\013AttackRate2\030\025 \001(\r\022\025\n\rMinRepletion3\030\026 "
    "\001(\r\022\025\n\rMaxRepletion3\030\027 \001(\r\022\025\n\rExpSpeedRa"
    "te3\030\030 \001(\r\022\017\n\007HPRate3\030\031 \001(\r\022\023\n\013AttackRate"
    "3\030\032 \001(\r\022\025\n\rMinRepletion4\030\033 \001(\r\022\025\n\rMaxRep"
    "letion4\030\034 \001(\r\022\025\n\rExpSpeedRate4\030\035 \001(\r\022\017\n\007"
    "HPRate4\030\036 \001(\r\022\023\n\013AttackRate4\030\037 \001(\r\022\025\n\rMi"
    "nRepletion5\030  \001(\r\022\025\n\rMaxRepletion5\030! \001(\r"
    "\022\025\n\rExpSpeedRate5\030\" \001(\r\022\017\n\007HPRate5\030# \001(\r"
    "\022\023\n\013AttackRate5\030$ \001(\r\022\017\n\007HPValue\030% \001(\r\022\023"
    "\n\013HPPotential\030& \001(\r\022\017\n\007MPValue\030\' \001(\r\022\023\n\013"
    "MPPotential\030( \001(\r\022\017\n\007PAttack\030) \001(\r\022\030\n\020PA"
    "ttackPotential\030* \001(\r\022\017\n\007MAttack\030+ \001(\r\022\030\n"
    "\020MAttackPotential\030, \001(\r\022\020\n\010PDefence\030- \001("
    "\r\022\031\n\021PDefencePotential\030. \001(\r\022\020\n\010MDefence"
    "\030/ \001(\r\022\031\n\021MDefencePotential\0300 \001(\r\022\017\n\007PRe"
    "sist\0301 \001(\r\022\030\n\020PResistPotential\0302 \001(\r\022\017\n\007"
    "MResist\0303 \001(\r\022\030\n\020MResistPotential\0304 \001(\r\022"
    "\021\n\tAbnResist\0305 \001(\r\022\032\n\022AbnResistPotential"
    "\0306 \001(\r\022\022\n\nFireResist\0307 \001(\r\022\033\n\023FireResist"
    "Potential\0308 \001(\r\022\022\n\nWindResist\0309 \001(\r\022\033\n\023W"
    "indResistPotential\030: \001(\r\022\023\n\013LightResist\030"
    "; \001(\r\022\034\n\024LightResistPotential\030< \001(\r\022\024\n\014S"
    "hadowResist\030= \001(\r\022\035\n\025ShadowResistPotenti"
    "al\030> \001(\r\022\023\n\013WaterResist\030? \001(\r\022\034\n\024WaterRe"
    "sistPotential\030@ \001(\r\022\023\n\013EarthResist\030A \001(\r"
    "\022\034\n\024EarthResistPotential\030B \001(\r\022\021\n\tFoodCo"
    "mbo\030C \001(\r\"0\n\014PBMineOutput\022\017\n\007StuffID\030\001 \001"
    "(\r\022\017\n\007Percent\030\002 \001(\r\"<\n\nPBMineOgre\022\r\n\005Npc"
    "ID\030\001 \001(\r\022\016\n\006Number\030\002 \001(\r\022\017\n\007Percent\030\003 \001("
    "\r\"\344\001\n\006PBMine\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001"
    "(\t\022\r\n\005Level\030\003 \001(\r\022\024\n\014LevelRequire\030\004 \001(\r\022"
    "\016\n\006ToolID\030\005 \001(\r\022\017\n\007DecRate\030\006 \001(\r\022\023\n\013Mine"
    "TimeLow\030\007 \001(\r\022\024\n\014MineTimeHigh\030\010 \001(\r\022\r\n\005M"
    "odel\030\t \001(\t\022\035\n\006Output\030\n \003(\0132\r.PBMineOutpu"
    "t\022\035\n\010MineOgre\030\013 \003(\0132\013.PBMineOgre\"\257\001\n\017PBS"
    "killTreeNode\022\017\n\007SkillID\030\001 \001(\r\022\020\n\010MaxLeve"
    "l\030\002 \001(\r\022\023\n\013NeedSkillID\030\003 \001(\r\022\026\n\016NeedSkil"
    "lPoint\030\004 \001(\r\022\023\n\013NeedGenerID\030\005 \001(\r\022\026\n\016Nee"
    "dGenerPoint\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\022\020\n\010Need"
    "Book\030\010 \001(\r\"f\n\013PBSkillTree\022\016\n\006TempID\030\001 \001("
    "\r\022\021\n\tGenerName\030\002 \001(\t\022\017\n\007GenerID\030\003 \001(\r\022#\n"
    "\tSkillNode\030\004 \003(\0132\020.PBSkillTreeNode\"-\n\006PB"
    "Cost\022\020\n\010CostType\030\001 \001(\r\022\021\n\tCostParam\030\002 \003("
    "\r\"6\n\016PBUseCondition\022\025\n\rConditionType\030\001 \001"
    "(\r\022\r\n\005Param\030\002 \001(\r\"\317\010\n\007PBSkill\022\016\n\006TempID\030"
    "\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\017\n\007SkillID\030\003 \001(\r\022\025\n\r"
    "RequireWeapon\030\004 \001(\r\022\020\n\010MetierID\030\005 \001(\r\022\017\n"
    "\007GenerID\030\006 \001(\r\022\022\n\nSkillLevel\030\007 \001(\r\022\021\n\tSk"
    "illIcon\030\010 \001(\t\022\025\n\rSkillDescribe\030\t \001(\t\022\020\n\010"
    "FireType\030\n \001(\r\022\021\n\tSkillType\030\013 \001(\r\022\020\n\010Tim"
    "eType\030\014 \001(\r\022\017\n\007AniTime\030\r \001(\r\022\020\n\010FireTime"
    "\030\016 \001(\r\022\016\n\006CDTime\030\017 \001(\r\022\025\n\004Cost\030\020 \003(\0132\007.P"
    "BCost\022\021\n\tNeedDelay\030\021 \001(\r\022\024\n\014SkillFuncID1"
    "\030\022 \001(\r\022\022\n\nParameter1\030\023 \003(\r\022\024\n\014SkillFuncI"
    "D2\030\024 \001(\r\022\022\n\nParameter2\030\025 \003(\r\022\024\n\014SkillFun"
    "cID3\030\026 \001(\r\022\022\n\nParameter3\030\027 \003(\r\022\024\n\014SkillF"
    "uncID4\030\030 \001(\r\022\022\n\nParameter4\030\031 \003(\r\022\023\n\013Skil"
    "lAction\030\032 \001(\t\022\022\n\nAutoRepeat\030\033 \001(\r\022\030\n\020Aut"
    "oNormalAttack\030\034 \001(\r\022\030\n\020AutoCoolingSkill\030"
    "\035 \001(\r\022%\n\014UseCondition\030\036 \003(\0132\017.PBUseCondi"
    "tion\022\021\n\tStudyGold\030\037 \001(\r\022\026\n\016StudyBindMone"
    "y\030  \001(\r\022\031\n\021SkillListShowType\030! \001(\r\022\025\n\rSk"
    "illTempType\030\" \001(\r\022\027\n\017StudySkillLevel\030# \001"
    "(\r\022\027\n\017InsertAutoState\030$ \001(\r\022\026\n\016BreakAuto"
    "State\030% \001(\r\022\022\n\nNeedTarget\030& \001(\r\022\017\n\007NeedP"
    "et\030\' \001(\r\022\022\n\nActionCamp\030( \001(\r\022\022\n\nDamageTy"
    "pe\030) \001(\r\022\025\n\rBindStudyGold\030* \001(\r\022\021\n\tAttac"
    "kFix\030+ \001(\r\022\021\n\tAttackPer\030, \001(\r\022\017\n\007ResType"
    "\030- \001(\r\022\020\n\010ResValue\030. \001(\r\022\021\n\tIsMWSkill\030/ "
    "\001(\r\022\025\n\rSkillTypeDesc\0300 \001(\t\022\022\n\nIsMWOffset"
    "\0301 \001(\r\022\017\n\007CDGroup\0302 \003(\r\022\020\n\010CanClean\0303 \001("
    "\r\022\023\n\013TargetLevel\0304 \001(\r\022\023\n\013SummonIndex\0305 "
    "\001(\r\"4\n\rPBAureoleType\022\023\n\013AureoleArea\030\001 \001("
    "\r\022\016\n\006BuffID\030\002 \001(\r\"\256\001\n\016PBAureoleSkill\022\033\n\t"
    "SkillInfo\030\001 \001(\0132\010.PBSkill\022\022\n\nInceessary\030"
    "\002 \001(\r\022\026\n\016InceessaryTime\030\003 \001(\r\022\025\n\004Cost\030\004 "
    "\003(\0132\007.PBCost\022\027\n\017AureoleDistance\030\005 \001(\r\022#\n"
    "\013AureoleType\030\006 \003(\0132\016.PBAureoleType\"\226\002\n\rP"
    "BNormalSkill\022\033\n\tSkillInfo\030\001 \001(\0132\010.PBSkil"
    "l\022\024\n\014SkillHitrate\030\002 \001(\r\022\023\n\013MinDistance\030\003"
    " \001(\r\022\023\n\013MaxDistance\030\004 \001(\r\022\022\n\nEfktMaxNum\030"
    "\005 \001(\r\022\023\n\013AttackRange\030\006 \001(\r\022\021\n\tRandParam\030"
    "\007 \003(\r\022\023\n\013BuffGroupID\030\010 \003(\r\022\025\n\rContinuedR"
    "ule\030\t \001(\r\022\025\n\rContinuedTime\030\n \001(\r\022\024\n\014Cont"
    "inuedNum\030\013 \001(\r\022\023\n\013IgnoreArmor\030\014 \001(\r\"\311\001\n\013"
    "PBTrapSkill\022\033\n\tSkillInfo\030\001 \001(\0132\010.PBSkill"
    "\022\020\n\010LastTime\030\002 \001(\r\022\021\n\tApplyType\030\003 \001(\r\022\022\n"
    "\nTouchRange\030\004 \001(\r\022\022\n\nApplyRange\030\005 \001(\r\022\017\n"
    "\007TrapRes\030\006 \001(\t\022\023\n\013BuffGroupID\030\007 \003(\r\022\021\n\tC"
    "ondition\030\010 \003(\r\022\027\n\017EffectMaxNumber\030\t \001(\r\""
    ".\n\nPBBuffFunc\022\020\n\010FuncType\030\001 \001(\r\022\016\n\006Param"
    "e\030\002 \003(\r\"\214\005\n\006PBBuff\022\016\n\006TempID\030\001 \001(\r\022\025\n\rBu"
    "ffServiceID\030\002 \001(\r\022\021\n\tIdenValue\030\003 \001(\r\022\021\n\t"
    "BuffStyle\030\004 \001(\r\022\027\n\017FirstActiveTime\030\005 \001(\r"
    "\022\022\n\nActiveTime\030\006 \001(\r\022\035\n\010BuffFunc\030\007 \003(\0132\013"
    ".PBBuffFunc\022\020\n\010BuffName\030\010 \001(\t\022\020\n\010BuffIco"
    "n\030\t \001(\t\022\024\n\014BuffDescribe\030\n \001(\t\022\017\n\007Hitrate"
    "\030\013 \001(\r\022\021\n\tBuffValue\030\014 \001(\r\022\022\n\nResistType\030"
    "\r \001(\r\022\020\n\010LastTime\030\016 \001(\r\022\020\n\010BuffType\030\017 \001("
    "\r\022\022\n\nCancelBuff\030\020 \001(\r\022\024\n\014EnableBattle\030\021 "
    "\001(\r\022\017\n\007BuffAni\030\022 \001(\t\022\017\n\007BuffRow\030\023 \001(\r\022\022\n"
    "\nBuffDieDel\030\024 \001(\r\022\021\n\tTimerType\030\025 \001(\r\022\021\n\t"
    "BuffClear\030\026 \001(\r\022\021\n\tBuffMapID\030\027 \001(\r\022\022\n\nBu"
    "ffLineID\030\030 \001(\r\022\022\n\nSkillLevel\030\031 \001(\r\022\023\n\013Bu"
    "ffMapType\030\032 \001(\r\022\023\n\013CountryBuff\030\033 \001(\r\022\031\n\021"
    "BuffSuperposition\030\034 \001(\r\022\020\n\010Accurate\030\035 \001("
    "\r\022\021\n\tOffRemove\030\036 \001(\r\022\021\n\tTransform\030\037 \001(\r\022"
    "\025\n\rRemoveCountID\030  \001(\r\".\n\nPBLevelExp\022\016\n\006"
    "TempID\030\001 \001(\r\022\020\n\010LevelExp\030\002 \003(\004\"v\n\020PBSing"
    "leMoneyLmt\022\023\n\013BagMoneyLmt\030\001 \001(\r\022\027\n\017BagBi"
    "ndMoneyLmt\030\002 \001(\r\022\027\n\017StorageMoneyLmt\030\003 \001("
    "\r\022\033\n\023StorageBindMoneyLmt\030\004 \001(\r\"F\n\017PBLeve"
    "lMoneyLmt\022\016\n\006TempID\030\001 \001(\r\022#\n\010LmtTable\030\002 "
    "\003(\0132\021.PBSingleMoneyLmt\"1\n\rPBPetLevelExp\022"
    "\016\n\006TempID\030\001 \001(\r\022\020\n\010LevelExp\030\002 \003(\r\"0\n\014PBP"
    "roduceExp\022\016\n\006TempID\030\001 \001(\r\022\020\n\010LevelExp\030\002 "
    "\003(\r\"_\n\005PBUpg\022\017\n\007Success\030\001 \001(\r\022\017\n\007Failure"
    "\030\002 \001(\r\022\016\n\006Result\030\003 \001(\r\022\020\n\010IncLevel\030\004 \001(\r"
    "\022\022\n\nExtSuccess\030\005 \001(\r\"6\n\nPBEquipUpg\022\016\n\006Te"
    "mpID\030\001 \001(\r\022\030\n\010EquipUpg\030\002 \003(\0132\006.PBUpg\"t\n\016"
    "PBSuitProducer\022\016\n\006TempID\030\001 \001(\r\022\026\n\016Proper"
    "tyTempID\030\002 \003(\r\022\021\n\tUpgTempID\030\003 \003(\r\022\021\n\tExt"
    "TempID\030\004 \003(\r\022\024\n\014DescribeText\030\005 \003(\t\"n\n\014PB"
    "SuitNormal\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t"
    "\022\023\n\013EquipTempID\030\003 \003(\r\022\023\n\013ActiveTitle\030\004 \001"
    "(\t\022\026\n\016PropertyTempID\030\005 \003(\r\"\210\001\n\007PBSpell\022\016"
    "\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\016\n\006SuitID\030\003"
    " \001(\r\022\020\n\010LetterID\030\004 \003(\r\022\017\n\007Require\030\005 \003(\r\022"
    "\026\n\016PropertyTempID\030\006 \003(\r\022\024\n\014DescribeText\030"
    "\007 \003(\t\"\355\002\n\016PBProduceEquip\022\016\n\006TempID\030\001 \001(\r"
    "\022\014\n\004Type\030\002 \001(\r\022\021\n\tDetailID1\030\003 \001(\r\022\021\n\tDet"
    "ailID2\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\014\n\004Name\030\006 \001("
    "\t\022\022\n\nMaterialID\030\007 \001(\r\022\023\n\013MaterialNum\030\010 \001"
    "(\r\022\024\n\014MaterialRank\030\t \001(\r\022\017\n\007ItemID1\030\n \001("
    "\r\022\021\n\tItemRand1\030\013 \001(\r\022\017\n\007ItemID2\030\014 \001(\r\022\021\n"
    "\tItemRand2\030\r \001(\r\022\017\n\007ItemID3\030\016 \001(\r\022\021\n\tIte"
    "mRand3\030\017 \001(\r\022\r\n\005Money\030\020 \001(\r\022\021\n\tBindMoney"
    "\030\021 \001(\r\022\016\n\006IconID\030\022 \001(\r\022\020\n\010Describe\030\023 \001(\t"
    "\022\013\n\003Exp\030\024 \001(\r\"\264\001\n\017PBProducePhysic\022\016\n\006Tem"
    "pID\030\001 \001(\r\022\014\n\004Type\030\002 \001(\r\022\r\n\005Level\030\003 \001(\r\022\014"
    "\n\004Name\030\004 \001(\t\022\022\n\nMaterialID\030\005 \001(\r\022\023\n\013Mate"
    "rialNum\030\006 \001(\r\022\016\n\006ItemID\030\007 \001(\r\022\013\n\003Exp\030\010 \001"
    "(\r\022\r\n\005Money\030\t \001(\r\022\021\n\tBindMoney\030\n \001(\r\"C\n\n"
    "PBOpenSlot\022\016\n\006TempID\030\001 \001(\r\022\021\n\tSlotLevel\030"
    "\002 \003(\r\022\022\n\nSlotNumber\030\003 \003(\r\"e\n\tPBCompose\022\016"
    "\n\006TempID\030\001 \001(\r\022\022\n\nMaterialID\030\002 \001(\r\022\023\n\013Ma"
    "terialNum\030\003 \001(\r\022\016\n\006ItemID\030\004 \001(\r\022\017\n\007ItemN"
    "um\030\005 \001(\r\"\347\004\n\016PBMultiCompose\022\016\n\006TempID\030\001 "
    "\001(\r\022\020\n\010Describe\030\002 \001(\t\022\022\n\nMaterialID\030\003 \003("
    "\r\022\023\n\013MaterialNum\030\004 \003(\r\022\016\n\006ItemID\030\005 \003(\r\022\017"
    "\n\007ItemNum\030\006 \003(\r\022\013\n\003Exp\030\007 \001(\r\022\r\n\005Order\030\010 "
    "\001(\r\022\025\n\rLifeSkillType\030\t \001(\r\022\025\n\rLifeSkillK"
    "ind\030\n \001(\r\022\031\n\021SpecializedDegree\030\013 \001(\r\022\027\n\017"
    "LifeComposeType\030\014 \001(\r\022\022\n\nCreatValue\030\r \001("
    "\r\022\022\n\nStudyMoney\030\016 \001(\r\022\030\n\020SkillCreatDegre"
    "e\030\017 \001(\r\022\r\n\005value\030\020 \003(\r\022\021\n\tProbality\030\021 \003("
    "\r\022\023\n\013DegreeValue\030\022 \003(\r\022\022\n\nApNeedCost\030\023 \001"
    "(\r\022\021\n\tUsedTimes\030\024 \001(\r\022\020\n\010MinValue\030\025 \001(\r\022"
    "\023\n\013ComposeType\030\026 \001(\r\022\027\n\017EquipMetierType\030"
    "\027 \001(\r\022\022\n\nSrcEquipID\030\030 \001(\r\022\022\n\nDesEquipID\030"
    "\031 \001(\r\022\022\n\nContribute\030\032 \001(\r\022\021\n\tUpgItemID\030\033"
    " \003(\r\022\022\n\nUpgItemNum\030\034 \003(\r\022\025\n\rNeedValueTyp"
    "e\030\035 \003(\r\022\021\n\tNeedValue\030\036 \003(\r\"\307\001\n\013PBTeleTab"
    "le\022\016\n\006TempID\030\001 \001(\r\022\016\n\006LineID\030\002 \003(\r\022\r\n\005Ma"
    "pID\030\003 \003(\r\022\014\n\004PosX\030\004 \003(\r\022\014\n\004PosY\030\005 \003(\r\022\020\n"
    "\010Describe\030\006 \003(\t\022\r\n\005Money\030\007 \003(\r\022\021\n\tBindMo"
    "ney\030\010 \001(\r\022\022\n\nNeedTempID\030\t \003(\r\022\022\n\nNeedBuf"
    "fID\030\n \003(\r\022\021\n\tNeedLevel\030\013 \003(\r\";\n\006PBData\022\016"
    "\n\006TempID\030\001 \001(\r\022\020\n\010LevelFix\030\002 \003(\r\022\017\n\007Team"
    "Fix\030\003 \003(\r\"\240\004\n\tPBPetData\022\021\n\tNameColor\030\001 \001"
    "(\r\022\022\n\nAttackType\030\002 \001(\r\022\021\n\tPAttackUp\030\003 \001("
    "\r\022\022\n\nPAttackLow\030\004 \001(\r\022\021\n\tMAttackUp\030\005 \001(\r"
    "\022\022\n\nMAttackLow\030\006 \001(\r\022\r\n\005Speed\030\007 \001(\r\022\020\n\010P"
    "Defence\030\010 \001(\r\022\020\n\010MDefence\030\t \001(\r\022\r\n\005MaxHP"
    "\030\n \001(\r\022\020\n\010HPRSpeed\030\013 \001(\r\022\021\n\tDeathRate\030\014 "
    "\001(\r\022\022\n\nDeathValue\030\r \001(\r\022\022\n\nNormalDuck\030\016 "
    "\001(\r\022\021\n\tSkillDuck\030\017 \001(\r\022\017\n\007SkillID\030\020 \001(\r\022"
    "\022\n\nSkillLevel\030\021 \001(\r\022\024\n\014PAttackRange\030\022 \001("
    "\r\022\024\n\014MAttackRange\030\023 \001(\r\022\022\n\nPReducePer\030\024 "
    "\001(\r\022\022\n\nMReducePer\030\025 \001(\r\022\024\n\014DeathDefense\030"
    "\026 \001(\r\022\022\n\nIgnoreDuck\030\027 \001(\r\022\016\n\006ResDef\030\030 \003("
    "\r\022\016\n\006ResAtt\030\031 \003(\r\022\022\n\nAttPercent\030\032 \001(\r\022\022\n"
    "\nDefPercent\030\033 \001(\r\022\021\n\tHPPercent\030\034 \001(\r\"\233\001\n"
    "\rPBSummonBeast\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002"
    " \001(\t\022\r\n\005Model\030\003 \001(\t\022\r\n\005Level\030\004 \001(\r\022\030\n\020Le"
    "velUpDelayTime\030\005 \003(\r\022\033\n\007PetData\030\006 \003(\0132\n."
    "PBPetData\022\027\n\017AttackFrequency\030\007 \001(\r\"\262\005\n\nP"
    "BBeginner\022\016\n\006TempID\030\001 \001(\r\022\023\n\013EquipItemID"
    "\030\002 \003(\r\022\024\n\014EquipItemNum\030\003 \003(\r\022\025\n\rBaggageI"
    "temID\030\004 \003(\r\022\026\n\016BaggageItemNum\030\005 \003(\r\022\017\n\007S"
    "killID\030\006 \003(\r\022\022\n\nSkillLevel\030\007 \003(\r\022\016\n\006StrN"
    "um\030\010 \001(\r\022\016\n\006ConNum\030\t \001(\r\022\016\n\006StaNum\030\n \001(\r"
    "\022\016\n\006WisNum\030\013 \001(\r\022\016\n\006SprNum\030\014 \001(\r\022\020\n\010Skil"
    "lNum\030\r \001(\r\022\r\n\005PoxX1\030\016 \001(\r\022\r\n\005PoxX2\030\017 \001(\r"
    "\022\r\n\005PoxY1\030\020 \001(\r\022\r\n\005PoxY2\030\021 \001(\r\022\020\n\010SkillI"
    "D1\030\022 \003(\r\022\023\n\013SkillLevel1\030\023 \003(\r\022\020\n\010SkillID"
    "2\030\024 \003(\r\022\023\n\013SkillLevel2\030\025 \003(\r\022\020\n\010SkillID3"
    "\030\026 \003(\r\022\023\n\013SkillLevel3\030\027 \003(\r\022\020\n\010SkillID4\030"
    "\030 \003(\r\022\023\n\013SkillLevel4\030\031 \003(\r\022\020\n\010SkillID5\030\032"
    " \003(\r\022\023\n\013SkillLevel5\030\033 \003(\r\022\020\n\010SkillID6\030\034 "
    "\003(\r\022\023\n\013SkillLevel6\030\035 \003(\r\022\034\n\024BeginnerProt"
    "ectLevel\030\036 \001(\r\022\030\n\020TransProtectTime\030\037 \001(\r"
    "\022\r\n\005MapID\030  \001(\r\022\025\n\rDeathDuraRate\030! \001(\r\022\033"
    "\n\023CanMendUseBindMoney\030\" \001(\r\022\022\n\nBeginnerA"
    "P\030# \001(\r\"*\n\013PBDropLevel\022\016\n\006TempID\030\001 \001(\r\022\013"
    "\n\003Ran\030\002 \003(\r\"\332\001\n\nPBOgreTran\022\016\n\006TempID\030\001 \001"
    "(\r\022\014\n\004Drop\030\002 \003(\r\022\n\n\002HP\030\003 \003(\r\022\n\n\002MP\030\004 \003(\r"
    "\022\n\n\002PA\030\005 \003(\r\022\n\n\002MA\030\006 \003(\r\022\n\n\002PD\030\007 \003(\r\022\n\n\002"
    "MD\030\010 \003(\r\022\013\n\003Hit\030\t \003(\r\022\r\n\005Dodge\030\n \003(\r\022\013\n\003"
    "Exp\030\013 \003(\r\022\016\n\006Ignore\030\014 \003(\r\022\r\n\005Death\030\r \003(\r"
    "\022\016\n\006ResDef\030\016 \003(\r\022\016\n\006ResAtt\030\017 \003(\r\"\\\n\013PBMe"
    "tierPro\022\016\n\006TempID\030\001 \001(\r\022\025\n\rMetierRequire"
    "\030\002 \001(\r\022\016\n\006Option\030\003 \001(\r\022\026\n\016MetierProperty"
    "\030\004 \003(\r\"H\n\017PBLevelProperty\022\016\n\006TempID\030\001 \001("
    "\r\022\016\n\006Option\030\002 \001(\r\022\025\n\rLevelProperty\030\003 \003(\r"
    "\"\203\001\n\014PBHonorToExp\022\016\n\006TempID\030\001 \001(\r\022\013\n\003Exp"
    "\030\002 \003(\r\022\016\n\006Wizard\030\003 \003(\r\022\020\n\010ExpLimit\030\004 \001(\r"
    "\022\016\n\006ItemID\030\005 \001(\r\022\021\n\tItemHonor\030\006 \001(\r\022\021\n\tI"
    "temLimit\030\007 \001(\r\"\261\002\n\rPBHonorObtain\022\016\n\006Temp"
    "ID\030\001 \001(\r\022\017\n\007InLimit\030\002 \001(\r\022\020\n\010OutLimit\030\003 "
    "\001(\r\022\021\n\tOutDieExp\030\004 \001(\r\022\020\n\010InDieExp\030\005 \001(\r"
    "\022\024\n\014BorderDieExp\030\006 \001(\r\022\021\n\tOutLowExp\030\007 \003("
    "\r\022\022\n\nOutHighExp\030\010 \003(\r\022\020\n\010InLowExp\030\t \003(\r\022"
    "\021\n\tInHighExp\030\n \003(\r\022\024\n\014BorderLowExp\030\013 \003(\r"
    "\022\025\n\rBorderHighExp\030\014 \003(\r\022\022\n\nLostLowExp\030\r "
    "\003(\r\022\023\n\013LostHighExp\030\016 \003(\r\022\020\n\010BasicExp\030\017 \003"
    "(\r\"i\n\016PBDiploidTable\022\016\n\006TempID\030\001 \001(\r\022\021\n\t"
    "TotalTime\030\002 \001(\r\022\020\n\010ValidMax\030\003 \001(\r\022\022\n\nTyp"
    "eNumber\030\004 \001(\r\022\016\n\006BuffID\030\005 \003(\r\"\310\002\n\nPBRedS"
    "tone\022\035\n\010BaseItem\030\001 \001(\0132\013.PBItemBase\022\025\n\rM"
    "agicIconName\030\002 \001(\t\022\021\n\tGuageTime\030\003 \001(\r\022\030\n"
    "\020MagicSustainTime\030\004 \001(\r\022\017\n\007ExpTime\030\005 \001(\r"
    "\022\016\n\006Radius\030\006 \001(\r\022\024\n\014RedStoneType\030\007 \001(\r\022\025"
    "\n\rFamilyExpRate\030\010 \001(\r\022\022\n\nExpTableID\030\t \001("
    "\r\022\026\n\016NumberEffected\030\n \001(\r\022\020\n\010MetierID\030\013 "
    "\001(\r\022\021\n\tKeyBuffID\030\014 \003(\r\022\021\n\tEncBuffID\030\r \003("
    "\r\022\022\n\nEncPercent\030\016 \003(\r\022\021\n\tIsEternal\030\017 \001(\r"
    "\"E\n\022PBRedStoneExpTable\022\016\n\006TempID\030\001 \001(\r\022\013"
    "\n\003Exp\030\002 \003(\r\022\022\n\nEffectName\030\003 \001(\t\":\n\rPBRel"
    "iveTable\022\016\n\006TempID\030\001 \001(\r\022\013\n\003Fee\030\002 \003(\r\022\014\n"
    "\004Rate\030\003 \001(\r\"[\n\rPBQuestionExp\022\016\n\006TempID\030\001"
    " \001(\r\022\026\n\016NpcQuestionNum\030\002 \001(\r\022\013\n\003Exp\030\003 \003("
    "\r\022\025\n\rNpcExpAddRate\030\004 \001(\r\"\256\001\n\021PBBindCharg"
    "eTable\022\016\n\006TempID\030\001 \001(\r\022\025\n\rMoneyBindNeed\030"
    "\002 \001(\r\022\024\n\014CanBindUseBM\030\003 \001(\r\022\027\n\017MoneyUnBi"
    "ndNeed\030\004 \001(\r\022\023\n\013UnBindUseBM\030\005 \001(\r\022\027\n\017Mon"
    "eyResumeBind\030\006 \001(\r\022\025\n\rCanResumeBind\030\007 \001("
    "\r\"K\n\tPBMinePos\022\r\n\005MapID\030\001 \001(\r\022\014\n\004PosX\030\002 "
    "\001(\r\022\014\n\004PosY\030\003 \001(\r\022\023\n\013Probability\030\004 \001(\r\"1"
    "\n\013PBMineEvent\022\017\n\007EventID\030\001 \001(\r\022\021\n\tTouchR"
    "ate\030\002 \001(\r\"\375\001\n\rPBItemMineMap\022\035\n\010BaseInfo\030"
    "\001 \001(\0132\013.PBItemBase\022\033\n\007MinePos\030\002 \003(\0132\n.PB"
    "MinePos\022\037\n\tMineEvent\030\003 \003(\0132\014.PBMineEvent"
    "\022\016\n\006Radius\030\004 \001(\r\022\021\n\tDropTable\030\005 \001(\r\022\017\n\007D"
    "ecBuff\030\006 \001(\r\022\016\n\006OgreID\030\007 \001(\r\022\017\n\007OgreNum\030"
    "\010 \001(\r\022\r\n\005MapID\030\t \001(\r\022\014\n\004PosX\030\n \001(\r\022\014\n\004Po"
    "sY\030\013 \001(\r\022\017\n\007Special\030\014 \001(\r\"(\n\020PBRelativel"
    "y_Pos\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\"\\\n\007PBBlock\022!"
    "\n\010BaseInfo\030\001 \001(\0132\017.PBOgreProperty\022\016\n\006Sel"
    "ect\030\002 \001(\005\022\036\n\003Pos\030\003 \003(\0132\021.PBRelatively_Po"
    "s\"\206\001\n\010PBPKDrop\022\r\n\005State\030\001 \001(\r\022\025\n\rEquipDr"
    "opRate\030\002 \001(\005\022\024\n\014BagDropRate1\030\003 \001(\005\022\024\n\014Ba"
    "gDropRate2\030\004 \001(\005\022\024\n\014GoPrisonRate\030\005 \001(\005\022\022"
    "\n\nPrisonTime\030\006 \001(\005\"\213\004\n\016PBPKValueTable\022\016\n"
    "\006TempID\030\001 \001(\r\022\020\n\010NavyBlue\030\002 \001(\005\022\014\n\004Blue\030"
    "\003 \001(\005\022\025\n\rCambridgeBlue\030\004 \001(\005\022\r\n\005White\030\005 "
    "\001(\005\022\020\n\010Rosiness\030\006 \001(\005\022\013\n\003Red\030\007 \001(\005\022\017\n\007Ca"
    "rMine\030\010 \001(\005\022\023\n\013RedTopLimit\030\t \001(\005\022\022\n\nYell"
    "owTime\030\n \001(\005\022\020\n\010DecValue\030\013 \001(\005\022\022\n\nDecExp"
    "Rate\030\014 \003(\005\022\026\n\016TopLimitDecExp\030\r \003(\005\022\023\n\013Pr"
    "iceChange\030\016 \003(\005\022\016\n\006LineID\030\017 \001(\005\022\r\n\005MapID"
    "\030\020 \001(\005\022\014\n\004PosX\030\021 \001(\005\022\014\n\004PosY\030\022 \001(\005\022\027\n\004Dr"
    "op\030\023 \003(\0132\t.PBPKDrop\022\021\n\tFreeMapID\030\024 \001(\r\022\020"
    "\n\010FreePosX\030\025 \001(\r\022\020\n\010FreePosY\030\026 \001(\r\022\022\n\nPr"
    "isonTime\030\027 \001(\r\022\023\n\013BasePKValue\030\030 \001(\r\022\024\n\014P"
    "KValueLevel\030\031 \003(\r\022\027\n\017DropRateInEnemy\030\032 \001"
    "(\r\022\024\n\014PrisonBuffID\030\033 \001(\r\"v\n\013PBItemToken\022"
    "\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\027\n\003Pos\030\002 "
    "\003(\0132\n.PBMinePos\022\016\n\006Radius\030\003 \001(\r\022\016\n\006OgreI"
    "D\030\004 \001(\r\022\017\n\007OgreNum\030\005 \001(\r\"?\n\014PBItemKitBag"
    "\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010Index"
    "Num\030\002 \001(\r\"\344\002\n\rPBItemGiftBag\022\035\n\010BaseInfo\030"
    "\001 \001(\0132\013.PBItemBase\022\023\n\013DropTableID\030\002 \001(\r\022"
    "\020\n\010MinLevel\030\003 \001(\r\022\020\n\010MinMoney\030\004 \001(\r\022\024\n\014M"
    "inBindMoney\030\005 \001(\r\022\023\n\013MinSilverYB\030\006 \001(\r\022\021"
    "\n\tDropInBag\030\007 \001(\r\022\020\n\010MaxMoney\030\010 \001(\r\022\024\n\014M"
    "axBindMoney\030\t \001(\r\022\023\n\013MaxSilverYB\030\n \001(\r\022\020"
    "\n\010CheckBag\030\013 \001(\r\022\016\n\006MinExp\030\014 \001(\r\022\016\n\006MaxE"
    "xp\030\r \001(\r\022\024\n\014LevelTableID\030\016 \003(\r\022\017\n\007LiHuaI"
    "D\030\017 \001(\r\022\022\n\nOpenItemID\030\020 \003(\r\022\023\n\013OpenTable"
    "ID\030\021 \003(\r\"\241\001\n\rPBItemAdapter\022\016\n\006TempID\030\001 \001"
    "(\r\022\020\n\010ItemType\030\002 \001(\r\022\020\n\010RealType\030\003 \001(\r\022\022"
    "\n\nRealTempID\030\004 \001(\r\022\025\n\rMaxLevelMinus\030\005 \001("
    "\r\022\r\n\005Param\030\006 \001(\r\022\020\n\010MaxValue\030\007 \001(\r\022\020\n\010Mi"
    "nValue\030\010 \001(\r\"l\n\016PBTplHierogram\022\016\n\006TempID"
    "\030\001 \001(\r\022\013\n\003Res\030\002 \001(\t\022\r\n\005Alive\030\003 \001(\r\022\014\n\004Ty"
    "pe\030\004 \001(\r\022\017\n\007Parame1\030\005 \001(\r\022\017\n\007Parame2\030\006 \001"
    "(\r\"n\n\006PBStep\022\017\n\007StageID\030\001 \001(\r\022\021\n\tSkillTr"
    "ee\030\002 \001(\r\022\014\n\004Next\030\003 \003(\r\022\020\n\010MaxPoint\030\005 \001(\r"
    "\022\021\n\tStageDesc\030\006 \001(\t\022\r\n\005Layer\030\007 \001(\r\"\366\001\n\007P"
    "BTitle\022\r\n\005Title\030\001 \001(\t\022\014\n\004Type\030\002 \001(\r\022\027\n\017O"
    "btainCondition\030\003 \001(\r\022\024\n\014SubCondition\030\004 \001"
    "(\r\022\r\n\005Color\030\005 \001(\r\022\023\n\013AddProperty\030\006 \001(\r\022\020"
    "\n\010IsHidden\030\007 \001(\r\022\021\n\tIsReplace\030\010 \001(\r\022\017\n\007D"
    "escrbe\030\t \001(\t\022\021\n\tValidTime\030\n \001(\r\022\023\n\013IsTea"
    "mTitle\030\013 \001(\r\022\r\n\005Param\030\014 \001(\r\022\016\n\006Detail\030\r "
    "\001(\t\"9\n\016PBTitleManager\022\016\n\006TempID\030\001 \001(\r\022\027\n"
    "\005Title\030\002 \003(\0132\010.PBTitle\"5\n\021PBTplBuffImmun"
    "ity\022\016\n\006TempID\030\001 \001(\r\022\020\n\010BuffType\030\002 \003(\r\"F\n"
    "\020PBTemplateTalent\022\016\n\006TempID\030\001 \001(\r\022\025\n\004Ste"
    "p\030\002 \003(\0132\007.PBStep\022\013\n\003Exp\030\003 \003(\r\"\367\001\n\030PBMagi"
    "cWeaponProIncValue\022\023\n\013LevelPoints\030\001 \001(\r\022"
    "\020\n\010LevelExp\030\002 \001(\004\022\027\n\017LevelProcessVal\030\003 \001"
    "(\r\022\031\n\021LevelProcessCurel\030\004 \001(\r\022\034\n\024LevelPr"
    "ocessCurelVal\030\005 \001(\r\022\021\n\tLevelKeen\030\006 \001(\r\022\021"
    "\n\tLevelCalm\030\007 \001(\r\022\022\n\nLevelMagic\030\010 \001(\r\022\021\n"
    "\tLevelBier\030\t \001(\r\022\025\n\rLevelImmortal\030\n \001(\r\""
    "\377\001\n\023PBTemplateLifeSkill\022\016\n\006TempID\030\001 \001(\r\022"
    "\025\n\rLifeSkillType\030\002 \001(\r\022\025\n\rLifeSkillKind\030"
    "\003 \001(\r\022\025\n\rDegreeStarted\030\004 \003(\r\022\022\n\nStudyMon"
    "ey\030\005 \003(\r\022\021\n\tSkillName\030\006 \003(\t\022\027\n\017Character"
    "NameID\030\007 \003(\r\022\023\n\013StudyDegree\030\010 \003(\r\022\r\n\005Lev"
    "el\030\t \003(\r\022\032\n\022SubSkillLevelLimit\030\n \001(\r\022\023\n\013"
    "DegreeValue\030\013 \003(\r\"\353\001\n\020PBDecompondTable\022\021"
    "\n\tFstItemID\030\001 \001(\r\022\026\n\016FstProbability\030\002 \001("
    "\r\022\021\n\tSecItemID\030\003 \001(\r\022\026\n\016SecProbability\030\004"
    " \001(\r\022\023\n\013ThirdItemID\030\005 \001(\r\022\030\n\020ThirdProbab"
    "ility\030\006 \001(\r\022\024\n\014DegreeNeeded\030\007 \001(\r\022\022\n\nFst"
    "ItemNum\030\010 \001(\r\022\022\n\nSecItemNum\030\t \001(\r\022\024\n\014Thi"
    "rdItemNum\030\n \001(\r\"\341\001\n\025PBCTemplateDecompoun"
    "d\022\016\n\006TempID\030\001 \001(\r\022)\n\016WhiteDecompond\030\002 \003("
    "\0132\021.PBDecompondTable\022(\n\rBlueDecompond\030\003 "
    "\003(\0132\021.PBDecompondTable\022*\n\017PurpleDecompon"
    "d\030\004 \003(\0132\021.PBDecompondTable\022\r\n\005Value\030\005 \003("
    "\r\022\023\n\013Probability\030\006 \003(\r\022\023\n\013DegreeValue\030\007 "
    "\003(\r\"X\n\033PBTplMagicWeaponProIncTable\022\016\n\006Te"
    "mpID\030\001 \001(\r\022)\n\006Values\030\003 \003(\0132\031.PBMagicWeap"
    "onProIncValue\"U\n\025SingleMWDecomposeData\022\016"
    "\n\006TempID\030\001 \001(\r\022\016\n\006NumMin\030\002 \001(\r\022\016\n\006NumMax"
    "\030\003 \001(\r\022\014\n\004Prob\030\004 \001(\r\"~\n\033PBMagicWeaponDec"
    "omposeTable\022\016\n\006TempID\030\001 \001(\r\022\025\n\rNeedMoney"
    "Type\030\002 \001(\r\022\021\n\tNeedMoney\030\003 \001(\r\022%\n\005Items\030\004"
    " \003(\0132\026.SingleMWDecomposeData\"\310\001\n\031PBMagic"
    "WeaponQuickUpTable\022\016\n\006TempID\030\001 \001(\r\022\020\n\010Ne"
    "edItem\030\002 \001(\r\022\023\n\013NeedItemNum\030\003 \001(\r\022\025\n\rNee"
    "dMoneyType\030\004 \001(\r\022\021\n\tNeedMoney\030\005 \001(\r\022\023\n\013S"
    "uccessProb\030\006 \001(\r\022\017\n\007NewMWID\030\007 \001(\r\022\021\n\tNee"
    "dLevel\030\010 \001(\r\022\021\n\tLeastLeve\030\t \001(\r\"\353\006\n\021PBIt"
    "emMagicWeapon\022\032\n\004Base\030\001 \001(\0132\014.PBEquipmen"
    "t\022\021\n\tShowLevel\030\002 \001(\t\022\020\n\010ShowType\030\003 \001(\t\022\025"
    "\n\rNewWeaponName\030\004 \001(\t\022\022\n\nUmmiBuffID\030\005 \001("
    "\r\022\021\n\tInitLevel\030\006 \001(\r\022\016\n\006InitMp\030\007 \001(\r\022\016\n\006"
    "InitHp\030\010 \001(\r\022\021\n\tInitMaxMp\030\t \001(\r\022\021\n\tInitM"
    "axHp\030\n \001(\r\022\020\n\010InitBase\030\013 \001(\r\022\021\n\tInitShap"
    "e\030\014 \001(\r\022\022\n\nInitEffect\030\r \001(\r\022\020\n\010InitSpir\030"
    "\016 \001(\r\022\020\n\010IncMaxMp\030\017 \001(\r\022\020\n\010IncMaxHp\030\020 \001("
    "\r\022\022\n\nMPIncValue\030\021 \001(\r\022\022\n\nHPIncValue\030\022 \001("
    "\r\022\032\n\022MPIncValuePerMagic\030\023 \001(\r\022\032\n\022HPIncVa"
    "luePerMagic\030\024 \001(\r\022\021\n\tAttackInc\030\025 \001(\r\022\020\n\010"
    "RecovInc\030\026 \001(\r\022\020\n\010MaxMPInc\030\027 \001(\r\022\020\n\010MaxH"
    "PInc\030\030 \001(\r\022\023\n\013DeadLineInc\030\031 \001(\r\022\022\n\nCanUs"
    "eBook\030\032 \001(\r\022\023\n\013GetSkillScl\030\033 \001(\r\022\024\n\014Leve"
    "lTableID\030\034 \001(\r\022\027\n\017SkillBoxTableID\030\035 \001(\r\022"
    "\020\n\010DieOffHp\030\036 \001(\r\022\024\n\014ProJudgeCost\030\037 \001(\r\022"
    "\023\n\013DispResName\030  \001(\t\022\024\n\014DefaultSkill\030! \001"
    "(\r\022\025\n\rDefaultSkill2\030\" \001(\r\022\027\n\017JudgeEffTab"
    "leID\030# \001(\r\022\030\n\020JudgeSpirTableID\030$ \001(\r\022\032\n\022"
    "LevelQuotietyTabID\030% \001(\r\022\026\n\016DecomposeTab"
    "ID\030& \001(\r\022\017\n\007LvByNum\030\' \001(\r\022\024\n\014QuickUpTabI"
    "D\030( \001(\r\022\024\n\014UpLevelTabID\030) \001(\r\"M\n\024PBSingl"
    "eSkillStorage\022\017\n\007SkillID\030\001 \001(\r\022\021\n\tFirstP"
    "rob\030\002 \001(\r\022\021\n\tOtherProb\030\003 \001(\r\"\216\001\n\020PBItemM"
    "agicStone\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase"
    "\022\014\n\004Part\030\002 \001(\r\022\021\n\tAttribute\030\003 \003(\r\022\021\n\tUse"
    "dTimes\030\004 \001(\r\022\023\n\013Probability\030\005 \003(\r\022\022\n\nLev"
    "elLimit\030\006 \001(\r\"Z\n\021PBLifeSkillScroll\022\035\n\010Ba"
    "seInfo\030\001 \001(\0132\013.PBItemBase\022\021\n\tComposeID\030\002"
    " \001(\r\022\023\n\013ComposeType\030\003 \001(\r\"G\n\016PBSkillStor"
    "age\022\016\n\006TempID\030\001 \001(\r\022%\n\006Values\030\002 \003(\0132\025.PB"
    "SingleSkillStorage\"\321\001\n\022PBSkillBoxPropert"
    "y\022\025\n\rSkillBoxColor\030\001 \001(\r\022\027\n\017SkillBoxNeed"
    "Val\030\002 \001(\r\022\021\n\tInitState\030\003 \001(\r\022\023\n\013InitSkil"
    "lID\030\004 \001(\r\022\024\n\014SkillBoxType\030\005 \001(\r\022\025\n\rSkill"
    "BoxSkill\030\006 \001(\r\022\030\n\020SkillBoxActMoney\030\007 \001(\r"
    "\022\034\n\024SkillBoxSkillStorage\030\010 \001(\r\"T\n\035PBMagi"
    "cWeaponSkillBoxProTable\022\016\n\006TempID\030\001 \001(\r\022"
    "#\n\006Values\030\002 \003(\0132\023.PBSkillBoxProperty\"s\n\024"
    "PBMWProJudgeEffTable\022\016\n\006TempID\030\001 \001(\r\022\021\n\t"
    "ProbFirst\030\002 \003(\r\022\022\n\nProbSecond\030\003 \003(\r\022\020\n\010S"
    "howName\030\004 \003(\t\022\022\n\nJudgeLevel\030\005 \003(\r\"t\n\025PBM"
    "WProJudgeSpirTable\022\016\n\006TempID\030\001 \001(\r\022\021\n\tPr"
    "obFirst\030\002 \003(\r\022\022\n\nProbSecond\030\003 \003(\r\022\020\n\010Sho"
    "wName\030\004 \003(\t\022\022\n\nJudgeLevel\030\005 \003(\r\"\226\001\n\024PBMW"
    "LevelQuotietyTab\022\016\n\006TempID\030\001 \001(\r\022\024\n\014Keen"
    "Quotiety\030\002 \003(\r\022\024\n\014CalmQuotiety\030\003 \003(\r\022\025\n\r"
    "MagicQuotiety\030\004 \003(\r\022\024\n\014BierQuotiety\030\005 \003("
    "\r\022\025\n\rImmorQuotiety\030\006 \003(\r\"M\n\nPBFuncItem\022\035"
    "\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010FuncCod"
    "e\030\002 \001(\r\022\016\n\006Params\030\003 \003(\r\"O\n\024PBEquipExchan"
    "geTable\022\016\n\006TempID\030\001 \001(\r\022\021\n\tComposeID\030\002 \003"
    "(\r\022\024\n\014ExchangeType\030\003 \001(\r\"n\n\020PBMultiBuffE"
    "vent\022\017\n\007EventID\030\001 \001(\r\022\020\n\010TeamFlag\030\002 \001(\r\022"
    "\020\n\010Distance\030\003 \001(\r\022\016\n\006BuffID\030\004 \001(\r\022\025\n\rRep"
    "etionIndex\030\005 \003(\r\"c\n\013PBMultiBuff\022\016\n\006TempI"
    "D\030\001 \001(\r\022$\n\tBuffEvent\030\002 \003(\0132\021.PBMultiBuff"
    "Event\022\r\n\005Param\030\003 \003(\r\022\017\n\007NewBuff\030\004 \003(\r\"0\n"
    "\016PBCDGroupTable\022\016\n\006TempID\030\001 \001(\r\022\016\n\006CDTim"
    "e\030\002 \003(\r\"(\n\nPBMetierAp\022\016\n\006Metier\030\001 \001(\r\022\n\n"
    "\002Ap\030\002 \001(\r\"\374\001\n\nPBApConfig\022\016\n\006TempID\030\001 \001(\r"
    "\022\023\n\013ConsumeHook\030\002 \001(\r\022\021\n\tWorldChat\030\003 \001(\r"
    "\022\020\n\010CampChat\030\004 \001(\r\022\020\n\010IncApMax\030\005 \001(\r\022\035\n\010"
    "MetierAp\030\006 \003(\0132\013.PBMetierAp\022\021\n\tRedPhysic"
    "\030\007 \003(\r\022\022\n\nBluePhysic\030\010 \003(\r\022\020\n\010ApPhysic\030\t"
    " \003(\r\022\022\n\nFbHpPhysic\030\n \003(\r\022\022\n\nFbMpPhysic\030\013"
    " \003(\r\022\022\n\nMendPhysic\030\014 \003(\r\"\232\001\n\014PBLightTabl"
    "e\022\016\n\006TempID\030\001 \001(\r\022\022\n\nLevelPoint\030\002 \003(\r\022\022\n"
    "\nJewelPoint\030\003 \003(\r\022\023\n\013LevelGrade1\030\004 \003(\r\022\023"
    "\n\013JewelGrade1\030\005 \003(\r\022\023\n\013LevelGrade2\030\006 \003(\r"
    "\022\023\n\013JewelGrade2\030\007 \003(\r\"u\n\rPBWizardTable\022\016"
    "\n\006TempID\030\001 \001(\r\022\013\n\003Exp\030\002 \003(\r\022\020\n\010KeepRand\030"
    "\003 \001(\r\022\021\n\tTrendRand\030\004 \003(\r\022\023\n\013TrendResult\030"
    "\005 \003(\r\022\r\n\005Money\030\006 \001(\r\"f\n\014PBJudgeLevel\022\021\n\t"
    "JudgeType\030\001 \001(\r\022\020\n\010LevelMin\030\002 \001(\r\022\020\n\010Lev"
    "elMax\030\003 \001(\r\022\014\n\004Star\030\004 \001(\r\022\021\n\tLevelType\030\005"
    " \001(\r\"\214\001\n\rPBJudgeConfig\022\016\n\006TempID\030\001 \001(\r\022\016"
    "\n\006OpenCD\030\002 \001(\r\022!\n\nJudgeLevel\030\003 \003(\0132\r.PBJ"
    "udgeLevel\022\021\n\tScoreBase\030\004 \001(\r\022\021\n\tScoreRat"
    "e\030\005 \001(\r\022\022\n\nScoreLevel\030\006 \001(\r\"0\n\014PBPaperVa"
    "lue\022\r\n\005Value\030\001 \001(\r\022\021\n\tProbality\030\002 \001(\r\"\241\001"
    "\n\016PBItemRedPaper\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBI"
    "temBase\022\022\n\nBaseCharge\030\002 \001(\r\022 \n\tMoneyInfo"
    "\030\003 \003(\0132\r.PBPaperValue\022$\n\rBindMoneyInfo\030\004"
    " \003(\0132\r.PBPaperValue\022\024\n\014RedPaperType\030\005 \001("
    "\r\"D\n\007PBTrend\022\016\n\006TempID\030\001 \001(\r\022\r\n\005Bonus\030\002 "
    "\003(\r\022\014\n\004Name\030\003 \001(\t\022\014\n\004Desc\030\004 \001(\t\"*\n\007PBAwa"
    "rd\022\016\n\006ItemID\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\"e\n\016P"
    "BAchieveAward\022\016\n\006TempID\030\001 \001(\r\022\017\n\007AwardID"
    "\030\002 \003(\r\022\020\n\010AwardNum\030\003 \003(\r\022\r\n\005Point\030\004 \003(\r\022"
    "\021\n\tSysMailID\030\005 \001(\r\"\314\002\n\007PBPower\022\016\n\006TempID"
    "\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\014\n\004Desc\030\003 \001(\t\022\014\n\004Ty"
    "pe\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\020\n\010Official\030\006 \001("
    "\r\022\r\n\005Order\030\007 \001(\r\022\016\n\006Param1\030\010 \001(\r\022\016\n\006Para"
    "m2\030\t \001(\r\022\017\n\007UseTime\030\n \003(\r\022\021\n\tConstruct\030\013"
    " \001(\r\022\r\n\005Power\030\014 \001(\r\022\r\n\005Money\030\r \001(\r\022\014\n\004Ic"
    "on\030\016 \001(\t\022\017\n\007Country\030\017 \001(\r\022\020\n\010AllCount\030\020 "
    "\001(\r\022\021\n\tStartHour\030\021 \001(\r\022\020\n\010StartMin\030\022 \001(\r"
    "\022\017\n\007EndHour\030\023 \001(\r\022\016\n\006EndMin\030\024 \001(\r\"\223\001\n\nPB"
    "Official\022\016\n\006TempID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\014"
    "\n\004Desc\030\003 \001(\t\022\014\n\004Type\030\004 \001(\r\022\016\n\006Wizard\030\005 \003"
    "(\r\022\r\n\005Power\030\006 \001(\r\022\024\n\014CountryLevel\030\007 \001(\r\022"
    "\026\n\016ConstructLevel\030\010 \001(\r\"7\n\017PBOfficialTab"
    "le\022\016\n\006TempID\030\001 \001(\r\022\024\n\014OfficialData\030\002 \003(\r"
    "\"<\n\016PBConstructExp\022\016\n\006TempID\030\001 \001(\r\022\013\n\003Ex"
    "p\030\002 \003(\r\022\r\n\005Bonus\030\003 \003(\r\"\231\003\n\014PBAddPKTable\022"
    "\016\n\006TempID\030\001 \001(\r\022\025\n\rKFChangePower\030\002 \001(\r\022\025"
    "\n\rKPChangePower\030\003 \001(\r\022\025\n\rKWChangePower\030\004"
    " \001(\r\022\025\n\rDFChangePower\030\005 \001(\r\022\025\n\rDPChangeP"
    "ower\030\006 \001(\r\022\025\n\rDWChangePower\030\007 \001(\r\022\026\n\016KFC"
    "hangeFriend\030\010 \001(\r\022\026\n\016KPChangeFriend\030\t \001("
    "\r\022\026\n\016KWChangeFriend\030\n \001(\r\022\022\n\nKFChangePK\030"
    "\013 \001(\r\022\022\n\nKWChangePK\030\014 \001(\r\022\022\n\nKPChangePK\030"
    "\r \003(\r\022\022\n\nPFriendMin\030\016 \003(\r\022\022\n\nPFriendMax\030"
    "\017 \003(\r\022\025\n\rKFChangeHonor\030\020 \001(\r\022\025\n\rKPChange"
    "Honor\030\021 \001(\r\022\025\n\rKWChangeHonor\030\022 \001(\r\":\n\nPB"
    "MapTable\022\016\n\006TempID\030\001 \001(\r\022\r\n\005Level\030\002 \003(\r\022"
    "\r\n\005Power\030\003 \003(\r\"4\n\022PBMultiAttackTable\022\016\n\006"
    "TempID\030\001 \001(\r\022\016\n\006Reduce\030\002 \003(\r\"M\n\tPBItemVi"
    "p\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\020\n\010VipL"
    "evel\030\002 \001(\r\022\017\n\007VipTime\030\003 \001(\r\"a\n\013PBItemCle"
    "an\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\021\n\tCle"
    "anType\030\002 \001(\r\022\022\n\nCleanLevel\030\003 \001(\r\022\014\n\004Step"
    "\030\004 \001(\r\"\253\001\n\013PBAwardInfo\022\016\n\006TempID\030\001 \001(\r\022\014"
    "\n\004Name\030\002 \001(\t\022\014\n\004Desc\030\003 \001(\t\022\016\n\006ItemID\030\004 \003"
    "(\r\022\017\n\007ItemNum\030\005 \003(\r\022\016\n\006BuffID\030\006 \001(\r\022\r\n\005T"
    "imes\030\007 \001(\r\022\r\n\005NpcID\030\010 \001(\r\022\017\n\007Country\030\t \001"
    "(\r\022\020\n\010NoFamily\030\n \001(\r\"B\n\014PBLeagueItem\022\016\n\006"
    "ItemID\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\022\021\n\tProbali"
    "ty\030\003 \001(\r\"\256\001\n\013PBLeagueBag\022\035\n\010ItemBase\030\001 \001"
    "(\0132\013.PBItemBase\022%\n\016LeagueItemInfo\030\002 \003(\0132"
    "\r.PBLeagueItem\022\025\n\rLeagueBagType\030\003 \001(\r\022\027\n"
    "\017ExchangeTableID\030\004 \001(\r\022\r\n\005MapID\030\005 \001(\r\022\014\n"
    "\004PosX\030\006 \001(\r\022\014\n\004PosY\030\007 \001(\r\"\337\003\n\rPBMatrixTa"
    "ble\022\016\n\006TempID\030\001 \001(\r\022\r\n\005Level\030\002 \003(\r\022\020\n\010Ma"
    "xLimit\030\003 \001(\r\022\020\n\010MinLimit\030\004 \001(\r\022\024\n\014Master"
    "ItemID\030\005 \003(\r\022\025\n\rMasterItemNum\030\006 \003(\r\022\016\n\006M"
    "ailID\030\007 \003(\r\022\023\n\013FormalLevel\030\010 \001(\r\022\025\n\rEduc"
    "atedLevel\030\t \001(\r\022\022\n\nEnterLimit\030\n \001(\r\022\022\n\nR"
    "emoveItem\030\013 \001(\r\022\023\n\013RemoveMoney\030\014 \001(\r\022\025\n\r"
    "FormalPercent\030\r \001(\r\022\027\n\017EducatedPercent\030\016"
    " \001(\r\022\023\n\013ReturnLimit\030\017 \001(\r\022\020\n\010AlterMax\030\020 "
    "\001(\r\022\020\n\010AlterMin\030\021 \001(\r\022\024\n\014ReturnMailID\030\022 "
    "\001(\r\022\023\n\013SlaveItemID\030\023 \003(\r\022\024\n\014SlaveItemNum"
    "\030\024 \003(\r\022\020\n\010AlterAll\030\025 \001(\r\022\024\n\014AlterDefault"
    "\030\026 \001(\r\022\023\n\013SlaveMailID\030\027 \001(\r\"\231\005\n\rPBWeddin"
    "gInfo\022\025\n\rWeddingLength\030\001 \001(\r\022\023\n\013MoneyNee"
    "ded\030\002 \001(\r\022\030\n\020DelayMoneyNeeded\030\003 \001(\r\022\031\n\021W"
    "eddingRedstoneID\030\004 \001(\r\022\035\n\025WeddingHallRed"
    "stoneID\030\005 \001(\r\022\030\n\020WeddingHallMapID\030\006 \001(\r\022"
    "\030\n\020InvitationCardID\030\007 \001(\r\022\031\n\021InvitationC"
    "ardNum\030\010 \001(\r\022\030\n\020FemaleKeepsakeID\030\t \001(\r\022\026"
    "\n\016MaleKeepsakeID\030\n \001(\r\022\014\n\004PosX\030\013 \001(\r\022\014\n\004"
    "PosY\030\014 \001(\r\022\031\n\021FemaleKeepsakeTwo\030\r \001(\r\022\027\n"
    "\017MaleKeepsakeTwo\030\016 \001(\r\022\033\n\023FemaleKeepsake"
    "Three\030\017 \001(\r\022\031\n\021MaleKeepsakeThree\030\020 \001(\r\022\024"
    "\n\014MaleBufferID\030\021 \001(\r\022\026\n\016FemaleBufferID\030\022"
    " \001(\r\022\022\n\nMaleItemID\030\023 \001(\r\022\024\n\014FemaleItemID"
    "\030\024 \001(\r\022\021\n\tGroomPosX\030\025 \001(\r\022\021\n\tGroomPosY\030\026"
    " \001(\r\022\021\n\tBridePosX\030\027 \001(\r\022\021\n\tBridePosY\030\030 \001"
    "(\r\022\025\n\rGroomBufferID\030\031 \001(\r\022\025\n\rBrideBuffer"
    "ID\030\032 \001(\r\022\026\n\016MarriageItemID\030\033 \001(\r\022\025\n\rWedd"
    "ingScroll\030\034 \001(\r\"6\n\017PBKeepsnakeInfo\022\022\n\nKe"
    "epsakeID\030\001 \001(\r\022\017\n\007EquipID\030\002 \001(\r\"\236\005\n\030PBTe"
    "mplateMarriageConfig\022\016\n\006TempID\030\001 \001(\r\022#\n\013"
    "WeddingInfo\030\002 \003(\0132\016.PBWeddingInfo\022,\n\022Fem"
    "aleKeepsakeInfo\030\003 \003(\0132\020.PBKeepsnakeInfo\022"
    "*\n\020MaleKeepsakeInfo\030\004 \003(\0132\020.PBKeepsnakeI"
    "nfo\022\022\n\nWeddingNpc\030\005 \003(\r\022\025\n\rMarriageLevel"
    "\030\006 \001(\r\022\025\n\rMarriageMoney\030\007 \001(\r\022\r\n\005MapID\030\010"
    " \001(\r\022\014\n\004PosX\030\t \001(\r\022\014\n\004PosY\030\n \001(\r\022\025\n\rDivo"
    "rceItemID\030\013 \001(\r\022\027\n\017MarriageTitleID\030\014 \001(\r"
    "\022\026\n\016MaleKeepsakeID\030\r \001(\r\022\030\n\020FemaleKeepsa"
    "keID\030\016 \001(\r\022\024\n\014InvitationID\030\017 \001(\r\022\025\n\rInvi"
    "tationNum\030\020 \001(\r\022\022\n\nMaleItemID\030\021 \001(\r\022\024\n\014F"
    "emaleItemID\030\022 \001(\r\022\025\n\rBaitangBuffID\030\023 \001(\r"
    "\022\031\n\021BasicMarriageItem\030\024 \001(\r\022\034\n\024BasicMarr"
    "iageItemNum\030\025 \001(\r\022\030\n\020MarriageNpcMapID\030\026 "
    "\001(\r\022\027\n\017MarriageNpcPosX\030\027 \001(\r\022\027\n\017Marriage"
    "NpcPosY\030\030 \001(\r\022\030\n\020MarriageIntimacy\030\031 \001(\r\022"
    "\027\n\017IntimacyItemNum\030\032 \001(\r\"E\n\014PBInvitation"
    "\022\035\n\010ItemBase\030\001 \001(\0132\013.PBItemBase\022\026\n\016Excha"
    "ngeItemID\030\002 \001(\r\"6\n\014ProGressInfo\022\020\n\010FuncT"
    "ype\030\001 \001(\r\022\024\n\014ProGressTime\030\002 \001(\r\"B\n\020PBPro"
    "GressConfig\022\r\n\005TmpID\030\001 \001(\r\022\037\n\010Progress\030\002"
    " \003(\0132\r.ProGressInfo\"F\n\017PBSysInvitation\022\035"
    "\n\010ItemBase\030\001 \001(\0132\013.PBItemBase\022\024\n\014Invitat"
    "ionID\030\002 \001(\r\"S\n\007PBCount\022\021\n\tCountType\030\001 \001("
    "\r\022\021\n\tCountTime\030\002 \001(\r\022\017\n\007VipTime\030\003 \001(\r\022\021\n"
    "\tClearType\030\004 \001(\r\";\n\014PBCountTable\022\016\n\006Temp"
    "ID\030\001 \001(\r\022\033\n\tCountData\030\002 \003(\0132\010.PBCount\"\310\005"
    "\n\020PBActivityConfig\022\016\n\006TempID\030\001 \001(\r\022\032\n\022Hy"
    "drangeaThrowTime\030\002 \001(\r\022\030\n\020HydrangeaSugar"
    "ID\030\003 \003(\r\022\027\n\017SugarSpreadTime\030\004 \001(\r\022\026\n\016Sug"
    "arSpreadNum\030\005 \001(\r\022\035\n\025HydrangeaActivityTi"
    "me\030\006 \001(\r\022\033\n\023HydrangeaHolderTime\030\007 \001(\r\022\030\n"
    "\020HydrangeaRabTime\030\010 \001(\r\022\033\n\023HydrangeaReds"
    "toneID\030\t \001(\r\022\033\n\023HydrangeaExpTableID\030\n \001("
    "\r\022\032\n\022PreliminaryTitleID\030\013 \001(\r\022\034\n\024Prelimi"
    "naryBaseScore\030\014 \001(\r\022\036\n\026PreliminaryExtral"
    "Score\030\r \003(\r\022\033\n\023PreliminaryTipsTime\030\016 \001(\r"
    "\022\035\n\025PreliminaryAnswerTime\030\017 \001(\r\022\037\n\027Preli"
    "minaryQuestionTime\030\020 \001(\r\022\036\n\026PreliminaryQ"
    "uestionNum\030\021 \001(\r\022\035\n\025PreliminaryExpTableI"
    "D\030\022 \001(\r\022$\n\034EffectiveOffLineExchangeRate\030"
    "\023 \001(\r\022\036\n\026MaxOnLineEffectiveTime\030\024 \001(\r\022\037\n"
    "\027MaxEffectiveOffLineTime\030\025 \001(\r\022\026\n\016MaxOff"
    "LineTime\030\026 \001(\r\022\030\n\020OffLineTimeLimit\030\027 \001(\r"
    "\022\036\n\026VipOffLineExchangeRate\030\030 \001(\r\"^\n\rPBIt"
    "emRefresh\022\035\n\010ItemBase\030\001 \001(\0132\013.PBItemBase"
    "\022\r\n\005Color\030\002 \001(\r\022\r\n\005Level\030\003 \001(\r\022\020\n\010LimitP"
    "os\030\004 \003(\r\"A\n\014PBItemSummon\022\035\n\010ItemBase\030\001 \001"
    "(\0132\013.PBItemBase\022\022\n\nSummonType\030\002 \001(\r\"S\n\rP"
    "BDirectTable\022\016\n\006TempID\030\001 \001(\r\022\020\n\010DirectID"
    "\030\002 \003(\r\022\016\n\006LuckID\030\003 \003(\r\022\020\n\010LuckRate\030\004 \003(\r"
    "\"J\n\014PBItemDirect\022\035\n\010ItemBase\030\001 \001(\0132\013.PBI"
    "temBase\022\r\n\005Level\030\002 \001(\r\022\014\n\004Star\030\003 \001(\r\"=\n\r"
    "PBItemGetStar\022\035\n\010ItemBase\030\001 \001(\0132\013.PBItem"
    "Base\022\r\n\005Level\030\002 \001(\r\"6\n\tPBWarDate\022\013\n\003Day\030"
    "\001 \001(\r\022\014\n\004Hour\030\002 \001(\r\022\016\n\006Minute\030\003 \001(\r\";\n\005P"
    "BTax\022\017\n\007TaxRate\030\001 \001(\r\022\022\n\nIncomeRate\030\002 \001("
    "\r\022\r\n\005Limit\030\003 \001(\r\"\326\004\n\023PBWorldBattleConfig"
    "\022\016\n\006TempID\030\001 \001(\r\022\037\n\013SubmitBegin\030\002 \001(\0132\n."
    "PBWarDate\022\037\n\013BattleBegin\030\003 \001(\0132\n.PBWarDa"
    "te\022\035\n\tBattleEnd\030\004 \001(\0132\n.PBWarDate\022\017\n\007Sto"
    "neID\030\005 \003(\r\022\022\n\nInitBuffID\030\006 \001(\r\022\022\n\nFlagSo"
    "urce\030\007 \001(\r\022\022\n\nKillSource\030\010 \001(\r\022\021\n\tFlagBo"
    "nus\030\t \001(\r\022\016\n\006PerNum\030\n \003(\r\022\r\n\005MapID\030\013 \003(\r"
    "\022\023\n\013SubmitMoney\030\014 \003(\r\022\023\n\013SubmitLevel\030\r \001"
    "(\r\022\014\n\004PosX\030\016 \003(\r\022\014\n\004PosY\030\017 \003(\r\022\020\n\010OutMap"
    "ID\030\020 \001(\r\022\017\n\007OutPosX\030\021 \001(\r\022\017\n\007OutPosY\030\022 \001"
    "(\r\022\021\n\tFlagIndex\030\023 \003(\r\022\032\n\006BidEnd\030\024 \001(\0132\n."
    "PBWarDate\022\023\n\013MaxWarHonor\030\025 \001(\r\022\r\n\005Title\030"
    "\026 \003(\r\022\037\n\013NoticeBegin\030\027 \001(\0132\n.PBWarDate\022\026"
    "\n\016TitleValidTime\030\030 \001(\r\022\021\n\tStonePosX\030\031 \001("
    "\r\022\021\n\tStonePosY\030\032 \001(\r\022\023\n\003Tax\030\033 \003(\0132\006.PBTa"
    "x\022\016\n\006WinTax\030\034 \001(\r\"E\n\014PBDegreeInfo\022\r\n\005Val"
    "ue\030\001 \001(\r\022\021\n\tProbality\030\002 \001(\r\022\023\n\013DegreeVal"
    "ue\030\003 \001(\r\"@\n\nPBItemInfo\022\016\n\006ItemID\030\001 \001(\r\022\017"
    "\n\007ItemNum\030\002 \001(\r\022\021\n\tProbality\030\003 \001(\r\"\243\001\n\021P"
    "BItemAutoCollect\022\035\n\010ItemInfo\030\001 \003(\0132\013.PBI"
    "temInfo\022!\n\nDegreeInfo\030\002 \003(\0132\r.PBDegreeIn"
    "fo\022\r\n\005MapID\030\003 \001(\r\022\014\n\004PosX\030\004 \001(\r\022\014\n\004PosY\030"
    "\005 \001(\r\022\014\n\004Grid\030\006 \001(\r\022\023\n\013MaxUseTimes\030\007 \001(\r"
    "\"\242\001\n\021PBFangCunTreeNode\022\017\n\007SkillID\030\001 \001(\r\022"
    "\020\n\010MaxLevel\030\002 \001(\r\022\023\n\013NeedSkillID\030\003 \003(\r\022\026"
    "\n\016NeedSkillPoint\030\004 \003(\r\022\r\n\005Level\030\005 \001(\r\022\020\n"
    "\010NeedBook\030\006 \001(\r\022\r\n\005Stage\030\007 \001(\r\022\r\n\005Order\030"
    "\010 \001(\r\"F\n\rPBFangCunTree\022\016\n\006TempID\030\001 \001(\r\022%"
    "\n\tSkillNode\030\002 \003(\0132\022.PBFangCunTreeNode\"[\n"
    "\020PBItemBlackPills\022\035\n\010ItemBase\030\001 \001(\0132\013.PB"
    "ItemBase\022\024\n\014ExchangeTime\030\002 \001(\r\022\022\n\nExpTab"
    "leID\030\003 \001(\r\"7\n\007PBStage\022\017\n\007StageID\030\001 \001(\r\022\014"
    "\n\004Next\030\002 \003(\r\022\r\n\005Layer\030\003 \001(\r\"@\n\025PBTemplat"
    "eTalentStage\022\016\n\006TempID\030\001 \001(\r\022\027\n\005Stage\030\002 "
    "\003(\0132\010.PBStage\"l\n\022PBItemExpContainer\022\035\n\010I"
    "temBase\030\001 \001(\0132\013.PBItemBase\022\016\n\006MaxExp\030\002 \001"
    "(\004\022\023\n\013OgreExpRate\030\003 \001(\r\022\022\n\nExpPillsID\030\004 "
    "\001(\r\"P\n\016PBItemExpPills\022\035\n\010ItemBase\030\001 \001(\0132"
    "\013.PBItemBase\022\013\n\003Exp\030\002 \001(\004\022\022\n\nLevelLimit\030"
    "\003 \001(\r\"c\n\rPBItemExpTome\022\035\n\010ItemBase\030\001 \001(\013"
    "2\013.PBItemBase\022\013\n\003Exp\030\002 \001(\004\022\022\n\nLevelLimit"
    "\030\003 \001(\r\022\022\n\nOpenItemID\030\004 \003(\r\"\215\004\n\016PBAccuseC"
    "onfig\022\016\n\006TempID\030\001 \001(\r\022\027\n\017AccuseBeginHour"
    "\030\002 \001(\r\022\031\n\021AccuseBeginMinute\030\003 \001(\r\022\023\n\013Acc"
    "useLevel\030\004 \001(\r\022\025\n\rAccuseEndHour\030\005 \001(\r\022\027\n"
    "\017AccuseEndMinute\030\006 \001(\r\022\023\n\013AccuseMoney\030\007 "
    "\001(\r\022\024\n\014AccusePerson\030\010 \001(\r\022\025\n\rAccusePerce"
    "nt\030\t \001(\r\022\022\n\nAwardPower\030\n \001(\r\022\017\n\007GateNum\030"
    "\013 \001(\r\022\017\n\007FlagNum\030\014 \001(\r\022\021\n\tGatePower\030\r \001("
    "\r\022\021\n\tFlagPower\030\016 \001(\r\022\030\n\020AccuseNoticeHour"
    "\030\017 \001(\r\022\032\n\022AccuseNoticeMinute\030\020 \001(\r\022\023\n\013No"
    "ticePower\030\021 \001(\r\022\022\n\nGateParam1\030\022 \001(\r\022\022\n\nF"
    "lagParam1\030\023 \001(\r\022\022\n\nGateParam2\030\024 \001(\r\022\022\n\nF"
    "lagParam2\030\025 \001(\r\022\022\n\nGateParam3\030\026 \001(\r\022\022\n\nF"
    "lagParam3\030\027 \001(\r\022\021\n\tLWPercent\030\030 \001(\r\"\223\001\n\021P"
    "BGlobalMapConfig\022\016\n\006TempID\030\001 \001(\r\022\r\n\005MapI"
    "D\030\002 \001(\r\022\016\n\006BuffID\030\003 \001(\r\022\r\n\005Limit\030\004 \001(\r\022\016"
    "\n\006OutMap\030\005 \001(\r\022\014\n\004OutX\030\006 \001(\r\022\014\n\004OutY\030\007 \001"
    "(\r\022\024\n\014EscapeBuffID\030\010 \001(\r\"\345\001\n\013PBCorpsBOSS"
    "\022\016\n\006TempID\030\001 \001(\r\022\016\n\006BOSSID\030\002 \003(\r\022\022\n\nHard"
    "BOSSID\030\003 \003(\r\022\022\n\nValueLimit\030\004 \003(\r\022\020\n\010Drop"
    "Desc\030\005 \003(\t\022\024\n\014HardDropDesc\030\006 \003(\t\022\026\n\016Summ"
    "onMinLevel\030\007 \003(\r\022\032\n\022HardSummonMinLevel\030\010"
    " \003(\r\022\026\n\016SummonMinValue\030\t \003(\r\022\032\n\022HardSumm"
    "onMinValue\030\n \003(\r\"\215\001\n\022PBOffLineExpConfig\022"
    "\016\n\006TempID\030\001 \001(\r\022\023\n\013OffLineUnit\030\002 \001(\r\022\022\n\n"
    "OffLineExp\030\003 \003(\r\022\024\n\014OffLineLevel\030\004 \001(\r\022\020"
    "\n\010ExpLimit\030\005 \003(\r\022\026\n\016OffLinePercent\030\006 \001(\r"
    "\"\326\001\n\017PBRepeFameTable\022\016\n\006TempID\030\001 \001(\r\022\020\n\010"
    "FameType\030\002 \003(\r\022\021\n\tFameValue\030\003 \003(\r\022\021\n\tIte"
    "mValue\030\004 \003(\r\022\024\n\014CombatItemID\030\005 \001(\r\022\022\n\nRe"
    "peItemID\030\006 \001(\r\022\024\n\014CommonItemID\030\007 \001(\r\022\023\n\013"
    "CombatLimit\030\010 \001(\r\022\021\n\tRepeLimit\030\t \001(\r\022\023\n\013"
    "CommonLimit\030\n \001(\r\"\233\002\n\024PBCastingSpiritTab"
    "le\022\016\n\006TempID\030\001 \001(\r\022\022\n\nOpenStatus\030\002 \003(\r\022\024"
    "\n\014PositionName\030\003 \003(\t\022\024\n\014PositionDesc\030\004 \003"
    "(\t\022\026\n\016SpiritTypeName\030\005 \003(\t\022\026\n\016SpiritType"
    "Desc\030\006 \003(\t\022\022\n\nSpiritItem\030\007 \003(\r\022\025\n\rSpirit"
    "ItemNum\030\010 \003(\r\022\024\n\014UpgradeMoney\030\t \003(\r\022\026\n\016D"
    "owngradeMoney\030\n \003(\r\022\023\n\013UpgradeItem\030\013 \001(\r"
    "\022\025\n\rDowngradeItem\030\014 \001(\r\"\215\001\n\014PBSpiritItem"
    "\022\035\n\010BaseInfo\030\001 \001(\0132\013.PBItemBase\022\r\n\005Grade"
    "\030\002 \001(\r\022\022\n\nColorGrade\030\003 \001(\r\022\022\n\nSpiritType"
    "\030\004 \001(\r\022\022\n\nLevelLimit\030\005 \001(\r\022\023\n\013EffectPoin"
    "t\030\006 \001(\rB\002H\001", 49091);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "template_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBItemSet::default_instance_ = new PBItemSet();
  PBConfigTable::default_instance_ = new PBConfigTable();
  PBSkillSet::default_instance_ = new PBSkillSet();
  PBEquipSet::default_instance_ = new PBEquipSet();
  PBTemplate::default_instance_ = new PBTemplate();
  PBHandinEncourage::default_instance_ = new PBHandinEncourage();
  PBHandinTable::default_instance_ = new PBHandinTable();
  PBItemBase::default_instance_ = new PBItemBase();
  PBItemReturn::default_instance_ = new PBItemReturn();
  PBItemSkillBook::default_instance_ = new PBItemSkillBook();
  PBItemBindStone::default_instance_ = new PBItemBindStone();
  PBItemScroll::default_instance_ = new PBItemScroll();
  PBItemCall::default_instance_ = new PBItemCall();
  PBItemCard::default_instance_ = new PBItemCard();
  PBItemTeleport::default_instance_ = new PBItemTeleport();
  PBItemReturnPaper::default_instance_ = new PBItemReturnPaper();
  PBItemTeleSymbol::default_instance_ = new PBItemTeleSymbol();
  PBItemStove::default_instance_ = new PBItemStove();
  PBItemPetEgg::default_instance_ = new PBItemPetEgg();
  PBItemPetFood::default_instance_ = new PBItemPetFood();
  PBItemRelife::default_instance_ = new PBItemRelife();
  PBItemSkill::default_instance_ = new PBItemSkill();
  PBItemBook::default_instance_ = new PBItemBook();
  PBItemUpg::default_instance_ = new PBItemUpg();
  PBItemUpgLuck::default_instance_ = new PBItemUpgLuck();
  PBItemUpgLeast::default_instance_ = new PBItemUpgLeast();
  PBItemRemove::default_instance_ = new PBItemRemove();
  PBItemChange::default_instance_ = new PBItemChange();
  PBItemQuestion::default_instance_ = new PBItemQuestion();
  PBItemTask::default_instance_ = new PBItemTask();
  PBItemStuff::default_instance_ = new PBItemStuff();
  PBItemExp::default_instance_ = new PBItemExp();
  PBItemChangeCamp::default_instance_ = new PBItemChangeCamp();
  PBComRuneUnit::default_instance_ = new PBComRuneUnit();
  PBComRuneConfig::default_instance_ = new PBComRuneConfig();
  PBItemShout::default_instance_ = new PBItemShout();
  PBItemAutoShout::default_instance_ = new PBItemAutoShout();
  PBItemPhysic::default_instance_ = new PBItemPhysic();
  PBItemHorse::default_instance_ = new PBItemHorse();
  PBStuff::default_instance_ = new PBStuff();
  PBProduct::default_instance_ = new PBProduct();
  PBItemBluePrint::default_instance_ = new PBItemBluePrint();
  PBItemRune::default_instance_ = new PBItemRune();
  PBItemJewel::default_instance_ = new PBItemJewel();
  PBItemYuanBug::default_instance_ = new PBItemYuanBug();
  PBItemYuanEgg::default_instance_ = new PBItemYuanEgg();
  PBItemSequence::default_instance_ = new PBItemSequence();
  PBEquipment::default_instance_ = new PBEquipment();
  PBEquipFashion::default_instance_ = new PBEquipFashion();
  PBEquipWeapon::default_instance_ = new PBEquipWeapon();
  PBEquipArmor::default_instance_ = new PBEquipArmor();
  PBTemplateProperty::default_instance_ = new PBTemplateProperty();
  PBPropertyPercent::default_instance_ = new PBPropertyPercent();
  PBTemplatePropertyTable::default_instance_ = new PBTemplatePropertyTable();
  PBMetier::default_instance_ = new PBMetier();
  PBNpc::default_instance_ = new PBNpc();
  PBSellItem::default_instance_ = new PBSellItem();
  PBSellTable::default_instance_ = new PBSellTable();
  PBTotalDrop::default_instance_ = new PBTotalDrop();
  PBDropItem::default_instance_ = new PBDropItem();
  PBDropTable::default_instance_ = new PBDropTable();
  PBNPCCollect::default_instance_ = new PBNPCCollect();
  PBOgreProperty::default_instance_ = new PBOgreProperty();
  PBBox_Click::default_instance_ = new PBBox_Click();
  PBOgreBox::default_instance_ = new PBOgreBox();
  PBShowPet::default_instance_ = new PBShowPet();
  PBBattlePet::default_instance_ = new PBBattlePet();
  PBMineOutput::default_instance_ = new PBMineOutput();
  PBMineOgre::default_instance_ = new PBMineOgre();
  PBMine::default_instance_ = new PBMine();
  PBSkillTreeNode::default_instance_ = new PBSkillTreeNode();
  PBSkillTree::default_instance_ = new PBSkillTree();
  PBCost::default_instance_ = new PBCost();
  PBUseCondition::default_instance_ = new PBUseCondition();
  PBSkill::default_instance_ = new PBSkill();
  PBAureoleType::default_instance_ = new PBAureoleType();
  PBAureoleSkill::default_instance_ = new PBAureoleSkill();
  PBNormalSkill::default_instance_ = new PBNormalSkill();
  PBTrapSkill::default_instance_ = new PBTrapSkill();
  PBBuffFunc::default_instance_ = new PBBuffFunc();
  PBBuff::default_instance_ = new PBBuff();
  PBLevelExp::default_instance_ = new PBLevelExp();
  PBSingleMoneyLmt::default_instance_ = new PBSingleMoneyLmt();
  PBLevelMoneyLmt::default_instance_ = new PBLevelMoneyLmt();
  PBPetLevelExp::default_instance_ = new PBPetLevelExp();
  PBProduceExp::default_instance_ = new PBProduceExp();
  PBUpg::default_instance_ = new PBUpg();
  PBEquipUpg::default_instance_ = new PBEquipUpg();
  PBSuitProducer::default_instance_ = new PBSuitProducer();
  PBSuitNormal::default_instance_ = new PBSuitNormal();
  PBSpell::default_instance_ = new PBSpell();
  PBProduceEquip::default_instance_ = new PBProduceEquip();
  PBProducePhysic::default_instance_ = new PBProducePhysic();
  PBOpenSlot::default_instance_ = new PBOpenSlot();
  PBCompose::default_instance_ = new PBCompose();
  PBMultiCompose::default_instance_ = new PBMultiCompose();
  PBTeleTable::default_instance_ = new PBTeleTable();
  PBData::default_instance_ = new PBData();
  PBPetData::default_instance_ = new PBPetData();
  PBSummonBeast::default_instance_ = new PBSummonBeast();
  PBBeginner::default_instance_ = new PBBeginner();
  PBDropLevel::default_instance_ = new PBDropLevel();
  PBOgreTran::default_instance_ = new PBOgreTran();
  PBMetierPro::default_instance_ = new PBMetierPro();
  PBLevelProperty::default_instance_ = new PBLevelProperty();
  PBHonorToExp::default_instance_ = new PBHonorToExp();
  PBHonorObtain::default_instance_ = new PBHonorObtain();
  PBDiploidTable::default_instance_ = new PBDiploidTable();
  PBRedStone::default_instance_ = new PBRedStone();
  PBRedStoneExpTable::default_instance_ = new PBRedStoneExpTable();
  PBReliveTable::default_instance_ = new PBReliveTable();
  PBQuestionExp::default_instance_ = new PBQuestionExp();
  PBBindChargeTable::default_instance_ = new PBBindChargeTable();
  PBMinePos::default_instance_ = new PBMinePos();
  PBMineEvent::default_instance_ = new PBMineEvent();
  PBItemMineMap::default_instance_ = new PBItemMineMap();
  PBRelatively_Pos::default_instance_ = new PBRelatively_Pos();
  PBBlock::default_instance_ = new PBBlock();
  PBPKDrop::default_instance_ = new PBPKDrop();
  PBPKValueTable::default_instance_ = new PBPKValueTable();
  PBItemToken::default_instance_ = new PBItemToken();
  PBItemKitBag::default_instance_ = new PBItemKitBag();
  PBItemGiftBag::default_instance_ = new PBItemGiftBag();
  PBItemAdapter::default_instance_ = new PBItemAdapter();
  PBTplHierogram::default_instance_ = new PBTplHierogram();
  PBStep::default_instance_ = new PBStep();
  PBTitle::default_instance_ = new PBTitle();
  PBTitleManager::default_instance_ = new PBTitleManager();
  PBTplBuffImmunity::default_instance_ = new PBTplBuffImmunity();
  PBTemplateTalent::default_instance_ = new PBTemplateTalent();
  PBMagicWeaponProIncValue::default_instance_ = new PBMagicWeaponProIncValue();
  PBTemplateLifeSkill::default_instance_ = new PBTemplateLifeSkill();
  PBDecompondTable::default_instance_ = new PBDecompondTable();
  PBCTemplateDecompound::default_instance_ = new PBCTemplateDecompound();
  PBTplMagicWeaponProIncTable::default_instance_ = new PBTplMagicWeaponProIncTable();
  SingleMWDecomposeData::default_instance_ = new SingleMWDecomposeData();
  PBMagicWeaponDecomposeTable::default_instance_ = new PBMagicWeaponDecomposeTable();
  PBMagicWeaponQuickUpTable::default_instance_ = new PBMagicWeaponQuickUpTable();
  PBItemMagicWeapon::default_instance_ = new PBItemMagicWeapon();
  PBSingleSkillStorage::default_instance_ = new PBSingleSkillStorage();
  PBItemMagicStone::default_instance_ = new PBItemMagicStone();
  PBLifeSkillScroll::default_instance_ = new PBLifeSkillScroll();
  PBSkillStorage::default_instance_ = new PBSkillStorage();
  PBSkillBoxProperty::default_instance_ = new PBSkillBoxProperty();
  PBMagicWeaponSkillBoxProTable::default_instance_ = new PBMagicWeaponSkillBoxProTable();
  PBMWProJudgeEffTable::default_instance_ = new PBMWProJudgeEffTable();
  PBMWProJudgeSpirTable::default_instance_ = new PBMWProJudgeSpirTable();
  PBMWLevelQuotietyTab::default_instance_ = new PBMWLevelQuotietyTab();
  PBFuncItem::default_instance_ = new PBFuncItem();
  PBEquipExchangeTable::default_instance_ = new PBEquipExchangeTable();
  PBMultiBuffEvent::default_instance_ = new PBMultiBuffEvent();
  PBMultiBuff::default_instance_ = new PBMultiBuff();
  PBCDGroupTable::default_instance_ = new PBCDGroupTable();
  PBMetierAp::default_instance_ = new PBMetierAp();
  PBApConfig::default_instance_ = new PBApConfig();
  PBLightTable::default_instance_ = new PBLightTable();
  PBWizardTable::default_instance_ = new PBWizardTable();
  PBJudgeLevel::default_instance_ = new PBJudgeLevel();
  PBJudgeConfig::default_instance_ = new PBJudgeConfig();
  PBPaperValue::default_instance_ = new PBPaperValue();
  PBItemRedPaper::default_instance_ = new PBItemRedPaper();
  PBTrend::default_instance_ = new PBTrend();
  PBAward::default_instance_ = new PBAward();
  PBAchieveAward::default_instance_ = new PBAchieveAward();
  PBPower::default_instance_ = new PBPower();
  PBOfficial::default_instance_ = new PBOfficial();
  PBOfficialTable::default_instance_ = new PBOfficialTable();
  PBConstructExp::default_instance_ = new PBConstructExp();
  PBAddPKTable::default_instance_ = new PBAddPKTable();
  PBMapTable::default_instance_ = new PBMapTable();
  PBMultiAttackTable::default_instance_ = new PBMultiAttackTable();
  PBItemVip::default_instance_ = new PBItemVip();
  PBItemClean::default_instance_ = new PBItemClean();
  PBAwardInfo::default_instance_ = new PBAwardInfo();
  PBLeagueItem::default_instance_ = new PBLeagueItem();
  PBLeagueBag::default_instance_ = new PBLeagueBag();
  PBMatrixTable::default_instance_ = new PBMatrixTable();
  PBWeddingInfo::default_instance_ = new PBWeddingInfo();
  PBKeepsnakeInfo::default_instance_ = new PBKeepsnakeInfo();
  PBTemplateMarriageConfig::default_instance_ = new PBTemplateMarriageConfig();
  PBInvitation::default_instance_ = new PBInvitation();
  ProGressInfo::default_instance_ = new ProGressInfo();
  PBProGressConfig::default_instance_ = new PBProGressConfig();
  PBSysInvitation::default_instance_ = new PBSysInvitation();
  PBCount::default_instance_ = new PBCount();
  PBCountTable::default_instance_ = new PBCountTable();
  PBActivityConfig::default_instance_ = new PBActivityConfig();
  PBItemRefresh::default_instance_ = new PBItemRefresh();
  PBItemSummon::default_instance_ = new PBItemSummon();
  PBDirectTable::default_instance_ = new PBDirectTable();
  PBItemDirect::default_instance_ = new PBItemDirect();
  PBItemGetStar::default_instance_ = new PBItemGetStar();
  PBWarDate::default_instance_ = new PBWarDate();
  PBTax::default_instance_ = new PBTax();
  PBWorldBattleConfig::default_instance_ = new PBWorldBattleConfig();
  PBDegreeInfo::default_instance_ = new PBDegreeInfo();
  PBItemInfo::default_instance_ = new PBItemInfo();
  PBItemAutoCollect::default_instance_ = new PBItemAutoCollect();
  PBFangCunTreeNode::default_instance_ = new PBFangCunTreeNode();
  PBFangCunTree::default_instance_ = new PBFangCunTree();
  PBItemBlackPills::default_instance_ = new PBItemBlackPills();
  PBStage::default_instance_ = new PBStage();
  PBTemplateTalentStage::default_instance_ = new PBTemplateTalentStage();
  PBItemExpContainer::default_instance_ = new PBItemExpContainer();
  PBItemExpPills::default_instance_ = new PBItemExpPills();
  PBItemExpTome::default_instance_ = new PBItemExpTome();
  PBAccuseConfig::default_instance_ = new PBAccuseConfig();
  PBGlobalMapConfig::default_instance_ = new PBGlobalMapConfig();
  PBCorpsBOSS::default_instance_ = new PBCorpsBOSS();
  PBOffLineExpConfig::default_instance_ = new PBOffLineExpConfig();
  PBRepeFameTable::default_instance_ = new PBRepeFameTable();
  PBCastingSpiritTable::default_instance_ = new PBCastingSpiritTable();
  PBSpiritItem::default_instance_ = new PBSpiritItem();
  PBItemSet::default_instance_->InitAsDefaultInstance();
  PBConfigTable::default_instance_->InitAsDefaultInstance();
  PBSkillSet::default_instance_->InitAsDefaultInstance();
  PBEquipSet::default_instance_->InitAsDefaultInstance();
  PBTemplate::default_instance_->InitAsDefaultInstance();
  PBHandinEncourage::default_instance_->InitAsDefaultInstance();
  PBHandinTable::default_instance_->InitAsDefaultInstance();
  PBItemBase::default_instance_->InitAsDefaultInstance();
  PBItemReturn::default_instance_->InitAsDefaultInstance();
  PBItemSkillBook::default_instance_->InitAsDefaultInstance();
  PBItemBindStone::default_instance_->InitAsDefaultInstance();
  PBItemScroll::default_instance_->InitAsDefaultInstance();
  PBItemCall::default_instance_->InitAsDefaultInstance();
  PBItemCard::default_instance_->InitAsDefaultInstance();
  PBItemTeleport::default_instance_->InitAsDefaultInstance();
  PBItemReturnPaper::default_instance_->InitAsDefaultInstance();
  PBItemTeleSymbol::default_instance_->InitAsDefaultInstance();
  PBItemStove::default_instance_->InitAsDefaultInstance();
  PBItemPetEgg::default_instance_->InitAsDefaultInstance();
  PBItemPetFood::default_instance_->InitAsDefaultInstance();
  PBItemRelife::default_instance_->InitAsDefaultInstance();
  PBItemSkill::default_instance_->InitAsDefaultInstance();
  PBItemBook::default_instance_->InitAsDefaultInstance();
  PBItemUpg::default_instance_->InitAsDefaultInstance();
  PBItemUpgLuck::default_instance_->InitAsDefaultInstance();
  PBItemUpgLeast::default_instance_->InitAsDefaultInstance();
  PBItemRemove::default_instance_->InitAsDefaultInstance();
  PBItemChange::default_instance_->InitAsDefaultInstance();
  PBItemQuestion::default_instance_->InitAsDefaultInstance();
  PBItemTask::default_instance_->InitAsDefaultInstance();
  PBItemStuff::default_instance_->InitAsDefaultInstance();
  PBItemExp::default_instance_->InitAsDefaultInstance();
  PBItemChangeCamp::default_instance_->InitAsDefaultInstance();
  PBComRuneUnit::default_instance_->InitAsDefaultInstance();
  PBComRuneConfig::default_instance_->InitAsDefaultInstance();
  PBItemShout::default_instance_->InitAsDefaultInstance();
  PBItemAutoShout::default_instance_->InitAsDefaultInstance();
  PBItemPhysic::default_instance_->InitAsDefaultInstance();
  PBItemHorse::default_instance_->InitAsDefaultInstance();
  PBStuff::default_instance_->InitAsDefaultInstance();
  PBProduct::default_instance_->InitAsDefaultInstance();
  PBItemBluePrint::default_instance_->InitAsDefaultInstance();
  PBItemRune::default_instance_->InitAsDefaultInstance();
  PBItemJewel::default_instance_->InitAsDefaultInstance();
  PBItemYuanBug::default_instance_->InitAsDefaultInstance();
  PBItemYuanEgg::default_instance_->InitAsDefaultInstance();
  PBItemSequence::default_instance_->InitAsDefaultInstance();
  PBEquipment::default_instance_->InitAsDefaultInstance();
  PBEquipFashion::default_instance_->InitAsDefaultInstance();
  PBEquipWeapon::default_instance_->InitAsDefaultInstance();
  PBEquipArmor::default_instance_->InitAsDefaultInstance();
  PBTemplateProperty::default_instance_->InitAsDefaultInstance();
  PBPropertyPercent::default_instance_->InitAsDefaultInstance();
  PBTemplatePropertyTable::default_instance_->InitAsDefaultInstance();
  PBMetier::default_instance_->InitAsDefaultInstance();
  PBNpc::default_instance_->InitAsDefaultInstance();
  PBSellItem::default_instance_->InitAsDefaultInstance();
  PBSellTable::default_instance_->InitAsDefaultInstance();
  PBTotalDrop::default_instance_->InitAsDefaultInstance();
  PBDropItem::default_instance_->InitAsDefaultInstance();
  PBDropTable::default_instance_->InitAsDefaultInstance();
  PBNPCCollect::default_instance_->InitAsDefaultInstance();
  PBOgreProperty::default_instance_->InitAsDefaultInstance();
  PBBox_Click::default_instance_->InitAsDefaultInstance();
  PBOgreBox::default_instance_->InitAsDefaultInstance();
  PBShowPet::default_instance_->InitAsDefaultInstance();
  PBBattlePet::default_instance_->InitAsDefaultInstance();
  PBMineOutput::default_instance_->InitAsDefaultInstance();
  PBMineOgre::default_instance_->InitAsDefaultInstance();
  PBMine::default_instance_->InitAsDefaultInstance();
  PBSkillTreeNode::default_instance_->InitAsDefaultInstance();
  PBSkillTree::default_instance_->InitAsDefaultInstance();
  PBCost::default_instance_->InitAsDefaultInstance();
  PBUseCondition::default_instance_->InitAsDefaultInstance();
  PBSkill::default_instance_->InitAsDefaultInstance();
  PBAureoleType::default_instance_->InitAsDefaultInstance();
  PBAureoleSkill::default_instance_->InitAsDefaultInstance();
  PBNormalSkill::default_instance_->InitAsDefaultInstance();
  PBTrapSkill::default_instance_->InitAsDefaultInstance();
  PBBuffFunc::default_instance_->InitAsDefaultInstance();
  PBBuff::default_instance_->InitAsDefaultInstance();
  PBLevelExp::default_instance_->InitAsDefaultInstance();
  PBSingleMoneyLmt::default_instance_->InitAsDefaultInstance();
  PBLevelMoneyLmt::default_instance_->InitAsDefaultInstance();
  PBPetLevelExp::default_instance_->InitAsDefaultInstance();
  PBProduceExp::default_instance_->InitAsDefaultInstance();
  PBUpg::default_instance_->InitAsDefaultInstance();
  PBEquipUpg::default_instance_->InitAsDefaultInstance();
  PBSuitProducer::default_instance_->InitAsDefaultInstance();
  PBSuitNormal::default_instance_->InitAsDefaultInstance();
  PBSpell::default_instance_->InitAsDefaultInstance();
  PBProduceEquip::default_instance_->InitAsDefaultInstance();
  PBProducePhysic::default_instance_->InitAsDefaultInstance();
  PBOpenSlot::default_instance_->InitAsDefaultInstance();
  PBCompose::default_instance_->InitAsDefaultInstance();
  PBMultiCompose::default_instance_->InitAsDefaultInstance();
  PBTeleTable::default_instance_->InitAsDefaultInstance();
  PBData::default_instance_->InitAsDefaultInstance();
  PBPetData::default_instance_->InitAsDefaultInstance();
  PBSummonBeast::default_instance_->InitAsDefaultInstance();
  PBBeginner::default_instance_->InitAsDefaultInstance();
  PBDropLevel::default_instance_->InitAsDefaultInstance();
  PBOgreTran::default_instance_->InitAsDefaultInstance();
  PBMetierPro::default_instance_->InitAsDefaultInstance();
  PBLevelProperty::default_instance_->InitAsDefaultInstance();
  PBHonorToExp::default_instance_->InitAsDefaultInstance();
  PBHonorObtain::default_instance_->InitAsDefaultInstance();
  PBDiploidTable::default_instance_->InitAsDefaultInstance();
  PBRedStone::default_instance_->InitAsDefaultInstance();
  PBRedStoneExpTable::default_instance_->InitAsDefaultInstance();
  PBReliveTable::default_instance_->InitAsDefaultInstance();
  PBQuestionExp::default_instance_->InitAsDefaultInstance();
  PBBindChargeTable::default_instance_->InitAsDefaultInstance();
  PBMinePos::default_instance_->InitAsDefaultInstance();
  PBMineEvent::default_instance_->InitAsDefaultInstance();
  PBItemMineMap::default_instance_->InitAsDefaultInstance();
  PBRelatively_Pos::default_instance_->InitAsDefaultInstance();
  PBBlock::default_instance_->InitAsDefaultInstance();
  PBPKDrop::default_instance_->InitAsDefaultInstance();
  PBPKValueTable::default_instance_->InitAsDefaultInstance();
  PBItemToken::default_instance_->InitAsDefaultInstance();
  PBItemKitBag::default_instance_->InitAsDefaultInstance();
  PBItemGiftBag::default_instance_->InitAsDefaultInstance();
  PBItemAdapter::default_instance_->InitAsDefaultInstance();
  PBTplHierogram::default_instance_->InitAsDefaultInstance();
  PBStep::default_instance_->InitAsDefaultInstance();
  PBTitle::default_instance_->InitAsDefaultInstance();
  PBTitleManager::default_instance_->InitAsDefaultInstance();
  PBTplBuffImmunity::default_instance_->InitAsDefaultInstance();
  PBTemplateTalent::default_instance_->InitAsDefaultInstance();
  PBMagicWeaponProIncValue::default_instance_->InitAsDefaultInstance();
  PBTemplateLifeSkill::default_instance_->InitAsDefaultInstance();
  PBDecompondTable::default_instance_->InitAsDefaultInstance();
  PBCTemplateDecompound::default_instance_->InitAsDefaultInstance();
  PBTplMagicWeaponProIncTable::default_instance_->InitAsDefaultInstance();
  SingleMWDecomposeData::default_instance_->InitAsDefaultInstance();
  PBMagicWeaponDecomposeTable::default_instance_->InitAsDefaultInstance();
  PBMagicWeaponQuickUpTable::default_instance_->InitAsDefaultInstance();
  PBItemMagicWeapon::default_instance_->InitAsDefaultInstance();
  PBSingleSkillStorage::default_instance_->InitAsDefaultInstance();
  PBItemMagicStone::default_instance_->InitAsDefaultInstance();
  PBLifeSkillScroll::default_instance_->InitAsDefaultInstance();
  PBSkillStorage::default_instance_->InitAsDefaultInstance();
  PBSkillBoxProperty::default_instance_->InitAsDefaultInstance();
  PBMagicWeaponSkillBoxProTable::default_instance_->InitAsDefaultInstance();
  PBMWProJudgeEffTable::default_instance_->InitAsDefaultInstance();
  PBMWProJudgeSpirTable::default_instance_->InitAsDefaultInstance();
  PBMWLevelQuotietyTab::default_instance_->InitAsDefaultInstance();
  PBFuncItem::default_instance_->InitAsDefaultInstance();
  PBEquipExchangeTable::default_instance_->InitAsDefaultInstance();
  PBMultiBuffEvent::default_instance_->InitAsDefaultInstance();
  PBMultiBuff::default_instance_->InitAsDefaultInstance();
  PBCDGroupTable::default_instance_->InitAsDefaultInstance();
  PBMetierAp::default_instance_->InitAsDefaultInstance();
  PBApConfig::default_instance_->InitAsDefaultInstance();
  PBLightTable::default_instance_->InitAsDefaultInstance();
  PBWizardTable::default_instance_->InitAsDefaultInstance();
  PBJudgeLevel::default_instance_->InitAsDefaultInstance();
  PBJudgeConfig::default_instance_->InitAsDefaultInstance();
  PBPaperValue::default_instance_->InitAsDefaultInstance();
  PBItemRedPaper::default_instance_->InitAsDefaultInstance();
  PBTrend::default_instance_->InitAsDefaultInstance();
  PBAward::default_instance_->InitAsDefaultInstance();
  PBAchieveAward::default_instance_->InitAsDefaultInstance();
  PBPower::default_instance_->InitAsDefaultInstance();
  PBOfficial::default_instance_->InitAsDefaultInstance();
  PBOfficialTable::default_instance_->InitAsDefaultInstance();
  PBConstructExp::default_instance_->InitAsDefaultInstance();
  PBAddPKTable::default_instance_->InitAsDefaultInstance();
  PBMapTable::default_instance_->InitAsDefaultInstance();
  PBMultiAttackTable::default_instance_->InitAsDefaultInstance();
  PBItemVip::default_instance_->InitAsDefaultInstance();
  PBItemClean::default_instance_->InitAsDefaultInstance();
  PBAwardInfo::default_instance_->InitAsDefaultInstance();
  PBLeagueItem::default_instance_->InitAsDefaultInstance();
  PBLeagueBag::default_instance_->InitAsDefaultInstance();
  PBMatrixTable::default_instance_->InitAsDefaultInstance();
  PBWeddingInfo::default_instance_->InitAsDefaultInstance();
  PBKeepsnakeInfo::default_instance_->InitAsDefaultInstance();
  PBTemplateMarriageConfig::default_instance_->InitAsDefaultInstance();
  PBInvitation::default_instance_->InitAsDefaultInstance();
  ProGressInfo::default_instance_->InitAsDefaultInstance();
  PBProGressConfig::default_instance_->InitAsDefaultInstance();
  PBSysInvitation::default_instance_->InitAsDefaultInstance();
  PBCount::default_instance_->InitAsDefaultInstance();
  PBCountTable::default_instance_->InitAsDefaultInstance();
  PBActivityConfig::default_instance_->InitAsDefaultInstance();
  PBItemRefresh::default_instance_->InitAsDefaultInstance();
  PBItemSummon::default_instance_->InitAsDefaultInstance();
  PBDirectTable::default_instance_->InitAsDefaultInstance();
  PBItemDirect::default_instance_->InitAsDefaultInstance();
  PBItemGetStar::default_instance_->InitAsDefaultInstance();
  PBWarDate::default_instance_->InitAsDefaultInstance();
  PBTax::default_instance_->InitAsDefaultInstance();
  PBWorldBattleConfig::default_instance_->InitAsDefaultInstance();
  PBDegreeInfo::default_instance_->InitAsDefaultInstance();
  PBItemInfo::default_instance_->InitAsDefaultInstance();
  PBItemAutoCollect::default_instance_->InitAsDefaultInstance();
  PBFangCunTreeNode::default_instance_->InitAsDefaultInstance();
  PBFangCunTree::default_instance_->InitAsDefaultInstance();
  PBItemBlackPills::default_instance_->InitAsDefaultInstance();
  PBStage::default_instance_->InitAsDefaultInstance();
  PBTemplateTalentStage::default_instance_->InitAsDefaultInstance();
  PBItemExpContainer::default_instance_->InitAsDefaultInstance();
  PBItemExpPills::default_instance_->InitAsDefaultInstance();
  PBItemExpTome::default_instance_->InitAsDefaultInstance();
  PBAccuseConfig::default_instance_->InitAsDefaultInstance();
  PBGlobalMapConfig::default_instance_->InitAsDefaultInstance();
  PBCorpsBOSS::default_instance_->InitAsDefaultInstance();
  PBOffLineExpConfig::default_instance_->InitAsDefaultInstance();
  PBRepeFameTable::default_instance_->InitAsDefaultInstance();
  PBCastingSpiritTable::default_instance_->InitAsDefaultInstance();
  PBSpiritItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_template_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_template_5fpb_2ehxx {
  StaticDescriptorInitializer_template_5fpb_2ehxx() {
    protobuf_AddDesc_template_5fpb_2ehxx();
  }
} static_descriptor_initializer_template_5fpb_2ehxx_;


// ===================================================================

#ifndef _MSC_VER
const int PBItemSet::kItemFieldNumber;
const int PBItemSet::kBindStoneFieldNumber;
const int PBItemSet::kBluePrintFieldNumber;
const int PBItemSet::kItemBookFieldNumber;
const int PBItemSet::kItemCardFieldNumber;
const int PBItemSet::kItemExpFieldNumber;
const int PBItemSet::kHorseFieldNumber;
const int PBItemSet::kJewelFieldNumber;
const int PBItemSet::kPetEggFieldNumber;
const int PBItemSet::kPetFoodFieldNumber;
const int PBItemSet::kPhysicFieldNumber;
const int PBItemSet::kQuestionFieldNumber;
const int PBItemSet::kRelifeFieldNumber;
const int PBItemSet::kReturnFieldNumber;
const int PBItemSet::kReturnPaperFieldNumber;
const int PBItemSet::kRuneFieldNumber;
const int PBItemSet::kScrollFieldNumber;
const int PBItemSet::kSequenceFieldNumber;
const int PBItemSet::kShoutFieldNumber;
const int PBItemSet::kItemSkillFieldNumber;
const int PBItemSet::kStoveFieldNumber;
const int PBItemSet::kStuffFieldNumber;
const int PBItemSet::kItemTaskFieldNumber;
const int PBItemSet::kTeleportFieldNumber;
const int PBItemSet::kTeleSymbolFieldNumber;
const int PBItemSet::kUpgLeastFieldNumber;
const int PBItemSet::kUpgLuckFieldNumber;
const int PBItemSet::kYuanBugFieldNumber;
const int PBItemSet::kYuanEggFieldNumber;
const int PBItemSet::kRedStoneFieldNumber;
const int PBItemSet::kAutoShoutFieldNumber;
const int PBItemSet::kKitBagFieldNumber;
const int PBItemSet::kItemUpgFieldNumber;
const int PBItemSet::kItemRemoveFieldNumber;
const int PBItemSet::kItemChangeFieldNumber;
const int PBItemSet::kItemAdapterFieldNumber;
const int PBItemSet::kMineMapFieldNumber;
const int PBItemSet::kItemCallFieldNumber;
const int PBItemSet::kGiftBagFieldNumber;
const int PBItemSet::kMagicWeaponsFieldNumber;
const int PBItemSet::kTokenFieldNumber;
const int PBItemSet::kFuncItemFieldNumber;
const int PBItemSet::kSkillBookFieldNumber;
const int PBItemSet::kRedPaperFieldNumber;
const int PBItemSet::kMagicStoneFieldNumber;
const int PBItemSet::kVipItemFieldNumber;
const int PBItemSet::kCleanItemFieldNumber;
const int PBItemSet::kAwardInfoFieldNumber;
const int PBItemSet::kLeagueBagFieldNumber;
const int PBItemSet::kInvitationFieldNumber;
const int PBItemSet::kSysInvitationFieldNumber;
const int PBItemSet::kItemRefreshFieldNumber;
const int PBItemSet::kItemSummonFieldNumber;
const int PBItemSet::kItemDirectFieldNumber;
const int PBItemSet::kItemGetStarFieldNumber;
const int PBItemSet::kItemAutoCollectFieldNumber;
const int PBItemSet::kItemBlackPillsFieldNumber;
const int PBItemSet::kExpContainerFieldNumber;
const int PBItemSet::kExpPillsFieldNumber;
const int PBItemSet::kSpiritItemFieldNumber;
const int PBItemSet::kExpTomeFieldNumber;
#endif  // !_MSC_VER

PBItemSet::PBItemSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSet::InitAsDefaultInstance() {}

PBItemSet::PBItemSet(const PBItemSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSet::~PBItemSet() {
  SharedDtor();
}

void PBItemSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSet_descriptor_;
}

const PBItemSet& PBItemSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemSet* PBItemSet::default_instance_ = NULL;

PBItemSet* PBItemSet::New() const {
  return new PBItemSet;
}

void PBItemSet::Clear() {
  item_.Clear();
  bindstone_.Clear();
  blueprint_.Clear();
  itembook_.Clear();
  itemcard_.Clear();
  itemexp_.Clear();
  horse_.Clear();
  jewel_.Clear();
  petegg_.Clear();
  petfood_.Clear();
  physic_.Clear();
  question_.Clear();
  relife_.Clear();
  return__.Clear();
  returnpaper_.Clear();
  rune_.Clear();
  scroll_.Clear();
  sequence_.Clear();
  shout_.Clear();
  itemskill_.Clear();
  stove_.Clear();
  stuff_.Clear();
  itemtask_.Clear();
  teleport_.Clear();
  telesymbol_.Clear();
  upgleast_.Clear();
  upgluck_.Clear();
  yuanbug_.Clear();
  yuanegg_.Clear();
  redstone_.Clear();
  autoshout_.Clear();
  kitbag_.Clear();
  itemupg_.Clear();
  itemremove_.Clear();
  itemchange_.Clear();
  itemadapter_.Clear();
  minemap_.Clear();
  itemcall_.Clear();
  giftbag_.Clear();
  magicweapons_.Clear();
  token_.Clear();
  funcitem_.Clear();
  skillbook_.Clear();
  redpaper_.Clear();
  magicstone_.Clear();
  vipitem_.Clear();
  cleanitem_.Clear();
  awardinfo_.Clear();
  leaguebag_.Clear();
  invitation_.Clear();
  sysinvitation_.Clear();
  itemrefresh_.Clear();
  itemsummon_.Clear();
  itemdirect_.Clear();
  itemgetstar_.Clear();
  itemautocollect_.Clear();
  itemblackpills_.Clear();
  expcontainer_.Clear();
  exppills_.Clear();
  spirititem_.Clear();
  exptome_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBItemBase Item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_item()));
        if (input->ExpectTag(10)) goto parse_Item;
        if (input->ExpectTag(18)) goto parse_BindStone;
        break;
      }
      
      // repeated .PBItemBindStone BindStone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BindStone:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bindstone()));
        if (input->ExpectTag(18)) goto parse_BindStone;
        if (input->ExpectTag(26)) goto parse_BluePrint;
        break;
      }
      
      // repeated .PBItemBluePrint BluePrint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BluePrint:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_blueprint()));
        if (input->ExpectTag(26)) goto parse_BluePrint;
        if (input->ExpectTag(34)) goto parse_ItemBook;
        break;
      }
      
      // repeated .PBItemBook ItemBook = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemBook:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itembook()));
        if (input->ExpectTag(34)) goto parse_ItemBook;
        if (input->ExpectTag(42)) goto parse_ItemCard;
        break;
      }
      
      // repeated .PBItemCard ItemCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemCard:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemcard()));
        if (input->ExpectTag(42)) goto parse_ItemCard;
        if (input->ExpectTag(50)) goto parse_ItemExp;
        break;
      }
      
      // repeated .PBItemExp ItemExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemexp()));
        if (input->ExpectTag(50)) goto parse_ItemExp;
        if (input->ExpectTag(58)) goto parse_Horse;
        break;
      }
      
      // repeated .PBItemHorse Horse = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Horse:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_horse()));
        if (input->ExpectTag(58)) goto parse_Horse;
        if (input->ExpectTag(66)) goto parse_Jewel;
        break;
      }
      
      // repeated .PBItemJewel Jewel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Jewel:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_jewel()));
        if (input->ExpectTag(66)) goto parse_Jewel;
        if (input->ExpectTag(74)) goto parse_PetEgg;
        break;
      }
      
      // repeated .PBItemPetEgg PetEgg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PetEgg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_petegg()));
        if (input->ExpectTag(74)) goto parse_PetEgg;
        if (input->ExpectTag(82)) goto parse_PetFood;
        break;
      }
      
      // repeated .PBItemPetFood PetFood = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PetFood:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_petfood()));
        if (input->ExpectTag(82)) goto parse_PetFood;
        if (input->ExpectTag(90)) goto parse_Physic;
        break;
      }
      
      // repeated .PBItemPhysic Physic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Physic:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_physic()));
        if (input->ExpectTag(90)) goto parse_Physic;
        if (input->ExpectTag(98)) goto parse_Question;
        break;
      }
      
      // repeated .PBItemQuestion Question = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Question:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_question()));
        if (input->ExpectTag(98)) goto parse_Question;
        if (input->ExpectTag(106)) goto parse_Relife;
        break;
      }
      
      // repeated .PBItemRelife Relife = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Relife:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_relife()));
        if (input->ExpectTag(106)) goto parse_Relife;
        if (input->ExpectTag(114)) goto parse_Return;
        break;
      }
      
      // repeated .PBItemReturn Return = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Return:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_return_()));
        if (input->ExpectTag(114)) goto parse_Return;
        if (input->ExpectTag(122)) goto parse_ReturnPaper;
        break;
      }
      
      // repeated .PBItemReturnPaper ReturnPaper = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ReturnPaper:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_returnpaper()));
        if (input->ExpectTag(122)) goto parse_ReturnPaper;
        if (input->ExpectTag(130)) goto parse_Rune;
        break;
      }
      
      // repeated .PBItemRune Rune = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Rune:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_rune()));
        if (input->ExpectTag(130)) goto parse_Rune;
        if (input->ExpectTag(138)) goto parse_Scroll;
        break;
      }
      
      // repeated .PBItemScroll Scroll = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Scroll:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_scroll()));
        if (input->ExpectTag(138)) goto parse_Scroll;
        if (input->ExpectTag(146)) goto parse_Sequence;
        break;
      }
      
      // repeated .PBItemSequence Sequence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Sequence:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_sequence()));
        if (input->ExpectTag(146)) goto parse_Sequence;
        if (input->ExpectTag(154)) goto parse_Shout;
        break;
      }
      
      // repeated .PBItemShout Shout = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Shout:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_shout()));
        if (input->ExpectTag(154)) goto parse_Shout;
        if (input->ExpectTag(162)) goto parse_ItemSkill;
        break;
      }
      
      // repeated .PBItemSkill ItemSkill = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemskill()));
        if (input->ExpectTag(162)) goto parse_ItemSkill;
        if (input->ExpectTag(170)) goto parse_Stove;
        break;
      }
      
      // repeated .PBItemStove Stove = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Stove:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_stove()));
        if (input->ExpectTag(170)) goto parse_Stove;
        if (input->ExpectTag(178)) goto parse_Stuff;
        break;
      }
      
      // repeated .PBItemStuff Stuff = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Stuff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_stuff()));
        if (input->ExpectTag(178)) goto parse_Stuff;
        if (input->ExpectTag(186)) goto parse_ItemTask;
        break;
      }
      
      // repeated .PBItemTask ItemTask = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemtask()));
        if (input->ExpectTag(186)) goto parse_ItemTask;
        if (input->ExpectTag(194)) goto parse_Teleport;
        break;
      }
      
      // repeated .PBItemTeleport Teleport = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Teleport:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_teleport()));
        if (input->ExpectTag(194)) goto parse_Teleport;
        if (input->ExpectTag(202)) goto parse_TeleSymbol;
        break;
      }
      
      // repeated .PBItemTeleSymbol TeleSymbol = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeleSymbol:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_telesymbol()));
        if (input->ExpectTag(202)) goto parse_TeleSymbol;
        if (input->ExpectTag(210)) goto parse_UpgLeast;
        break;
      }
      
      // repeated .PBItemUpgLeast UpgLeast = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UpgLeast:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_upgleast()));
        if (input->ExpectTag(210)) goto parse_UpgLeast;
        if (input->ExpectTag(218)) goto parse_UpgLuck;
        break;
      }
      
      // repeated .PBItemUpgLuck UpgLuck = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UpgLuck:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_upgluck()));
        if (input->ExpectTag(218)) goto parse_UpgLuck;
        if (input->ExpectTag(226)) goto parse_YuanBug;
        break;
      }
      
      // repeated .PBItemYuanBug YuanBug = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_YuanBug:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_yuanbug()));
        if (input->ExpectTag(226)) goto parse_YuanBug;
        if (input->ExpectTag(234)) goto parse_YuanEgg;
        break;
      }
      
      // repeated .PBItemYuanEgg YuanEgg = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_YuanEgg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_yuanegg()));
        if (input->ExpectTag(234)) goto parse_YuanEgg;
        if (input->ExpectTag(242)) goto parse_RedStone;
        break;
      }
      
      // repeated .PBRedStone RedStone = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RedStone:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_redstone()));
        if (input->ExpectTag(242)) goto parse_RedStone;
        if (input->ExpectTag(250)) goto parse_AutoShout;
        break;
      }
      
      // repeated .PBItemAutoShout AutoShout = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AutoShout:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_autoshout()));
        if (input->ExpectTag(250)) goto parse_AutoShout;
        if (input->ExpectTag(258)) goto parse_KitBag;
        break;
      }
      
      // repeated .PBItemKitBag KitBag = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KitBag:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_kitbag()));
        if (input->ExpectTag(258)) goto parse_KitBag;
        if (input->ExpectTag(266)) goto parse_ItemUpg;
        break;
      }
      
      // repeated .PBItemUpg ItemUpg = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemUpg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemupg()));
        if (input->ExpectTag(266)) goto parse_ItemUpg;
        if (input->ExpectTag(274)) goto parse_ItemRemove;
        break;
      }
      
      // repeated .PBItemRemove ItemRemove = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemRemove:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemremove()));
        if (input->ExpectTag(274)) goto parse_ItemRemove;
        if (input->ExpectTag(282)) goto parse_ItemChange;
        break;
      }
      
      // repeated .PBItemChange ItemChange = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemChange:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemchange()));
        if (input->ExpectTag(282)) goto parse_ItemChange;
        if (input->ExpectTag(290)) goto parse_ItemAdapter;
        break;
      }
      
      // repeated .PBItemAdapter ItemAdapter = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemAdapter:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemadapter()));
        if (input->ExpectTag(290)) goto parse_ItemAdapter;
        if (input->ExpectTag(298)) goto parse_MineMap;
        break;
      }
      
      // repeated .PBItemMineMap MineMap = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MineMap:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_minemap()));
        if (input->ExpectTag(298)) goto parse_MineMap;
        if (input->ExpectTag(306)) goto parse_ItemCall;
        break;
      }
      
      // repeated .PBItemCall ItemCall = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemCall:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemcall()));
        if (input->ExpectTag(306)) goto parse_ItemCall;
        if (input->ExpectTag(314)) goto parse_GiftBag;
        break;
      }
      
      // repeated .PBItemGiftBag GiftBag = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GiftBag:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_giftbag()));
        if (input->ExpectTag(314)) goto parse_GiftBag;
        if (input->ExpectTag(322)) goto parse_MagicWeapons;
        break;
      }
      
      // repeated .PBItemMagicWeapon MagicWeapons = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicWeapons:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_magicweapons()));
        if (input->ExpectTag(322)) goto parse_MagicWeapons;
        if (input->ExpectTag(330)) goto parse_Token;
        break;
      }
      
      // repeated .PBItemToken Token = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Token:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_token()));
        if (input->ExpectTag(330)) goto parse_Token;
        if (input->ExpectTag(338)) goto parse_FuncItem;
        break;
      }
      
      // repeated .PBFuncItem FuncItem = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FuncItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_funcitem()));
        if (input->ExpectTag(338)) goto parse_FuncItem;
        if (input->ExpectTag(346)) goto parse_SkillBook;
        break;
      }
      
      // repeated .PBItemSkillBook SkillBook = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillBook:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skillbook()));
        if (input->ExpectTag(346)) goto parse_SkillBook;
        if (input->ExpectTag(354)) goto parse_RedPaper;
        break;
      }
      
      // repeated .PBItemRedPaper RedPaper = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RedPaper:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_redpaper()));
        if (input->ExpectTag(354)) goto parse_RedPaper;
        if (input->ExpectTag(362)) goto parse_MagicStone;
        break;
      }
      
      // repeated .PBItemMagicStone MagicStone = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicStone:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_magicstone()));
        if (input->ExpectTag(362)) goto parse_MagicStone;
        if (input->ExpectTag(370)) goto parse_VipItem;
        break;
      }
      
      // repeated .PBItemVip VipItem = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_VipItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_vipitem()));
        if (input->ExpectTag(370)) goto parse_VipItem;
        if (input->ExpectTag(378)) goto parse_CleanItem;
        break;
      }
      
      // repeated .PBItemClean CleanItem = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CleanItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_cleanitem()));
        if (input->ExpectTag(378)) goto parse_CleanItem;
        if (input->ExpectTag(386)) goto parse_AwardInfo;
        break;
      }
      
      // repeated .PBAwardInfo AwardInfo = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AwardInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_awardinfo()));
        if (input->ExpectTag(386)) goto parse_AwardInfo;
        if (input->ExpectTag(394)) goto parse_LeagueBag;
        break;
      }
      
      // repeated .PBLeagueBag LeagueBag = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LeagueBag:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_leaguebag()));
        if (input->ExpectTag(394)) goto parse_LeagueBag;
        if (input->ExpectTag(402)) goto parse_Invitation;
        break;
      }
      
      // repeated .PBInvitation Invitation = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Invitation:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_invitation()));
        if (input->ExpectTag(402)) goto parse_Invitation;
        if (input->ExpectTag(410)) goto parse_SysInvitation;
        break;
      }
      
      // repeated .PBSysInvitation SysInvitation = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SysInvitation:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_sysinvitation()));
        if (input->ExpectTag(410)) goto parse_SysInvitation;
        if (input->ExpectTag(418)) goto parse_ItemRefresh;
        break;
      }
      
      // repeated .PBItemRefresh ItemRefresh = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemRefresh:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemrefresh()));
        if (input->ExpectTag(418)) goto parse_ItemRefresh;
        if (input->ExpectTag(426)) goto parse_ItemSummon;
        break;
      }
      
      // repeated .PBItemSummon ItemSummon = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemSummon:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemsummon()));
        if (input->ExpectTag(426)) goto parse_ItemSummon;
        if (input->ExpectTag(434)) goto parse_ItemDirect;
        break;
      }
      
      // repeated .PBItemDirect ItemDirect = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemDirect:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemdirect()));
        if (input->ExpectTag(434)) goto parse_ItemDirect;
        if (input->ExpectTag(442)) goto parse_ItemGetStar;
        break;
      }
      
      // repeated .PBItemGetStar ItemGetStar = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemGetStar:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemgetstar()));
        if (input->ExpectTag(442)) goto parse_ItemGetStar;
        if (input->ExpectTag(450)) goto parse_ItemAutoCollect;
        break;
      }
      
      // repeated .PBItemAutoCollect ItemAutoCollect = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemAutoCollect:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemautocollect()));
        if (input->ExpectTag(450)) goto parse_ItemAutoCollect;
        if (input->ExpectTag(458)) goto parse_ItemBlackPills;
        break;
      }
      
      // repeated .PBItemBlackPills ItemBlackPills = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemBlackPills:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemblackpills()));
        if (input->ExpectTag(458)) goto parse_ItemBlackPills;
        if (input->ExpectTag(466)) goto parse_ExpContainer;
        break;
      }
      
      // repeated .PBItemExpContainer ExpContainer = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ExpContainer:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_expcontainer()));
        if (input->ExpectTag(466)) goto parse_ExpContainer;
        if (input->ExpectTag(474)) goto parse_ExpPills;
        break;
      }
      
      // repeated .PBItemExpPills ExpPills = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ExpPills:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_exppills()));
        if (input->ExpectTag(474)) goto parse_ExpPills;
        if (input->ExpectTag(482)) goto parse_SpiritItem;
        break;
      }
      
      // repeated .PBSpiritItem SpiritItem = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpiritItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_spirititem()));
        if (input->ExpectTag(482)) goto parse_SpiritItem;
        if (input->ExpectTag(490)) goto parse_ExpTome;
        break;
      }
      
      // repeated .PBItemExpTome ExpTome = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ExpTome:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_exptome()));
        if (input->ExpectTag(490)) goto parse_ExpTome;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemSet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBItemBase Item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->item(i), output);
  }
  
  // repeated .PBItemBindStone BindStone = 2;
  for (int i = 0; i < this->bindstone_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->bindstone(i), output);
  }
  
  // repeated .PBItemBluePrint BluePrint = 3;
  for (int i = 0; i < this->blueprint_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->blueprint(i), output);
  }
  
  // repeated .PBItemBook ItemBook = 4;
  for (int i = 0; i < this->itembook_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->itembook(i), output);
  }
  
  // repeated .PBItemCard ItemCard = 5;
  for (int i = 0; i < this->itemcard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->itemcard(i), output);
  }
  
  // repeated .PBItemExp ItemExp = 6;
  for (int i = 0; i < this->itemexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->itemexp(i), output);
  }
  
  // repeated .PBItemHorse Horse = 7;
  for (int i = 0; i < this->horse_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->horse(i), output);
  }
  
  // repeated .PBItemJewel Jewel = 8;
  for (int i = 0; i < this->jewel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->jewel(i), output);
  }
  
  // repeated .PBItemPetEgg PetEgg = 9;
  for (int i = 0; i < this->petegg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->petegg(i), output);
  }
  
  // repeated .PBItemPetFood PetFood = 10;
  for (int i = 0; i < this->petfood_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->petfood(i), output);
  }
  
  // repeated .PBItemPhysic Physic = 11;
  for (int i = 0; i < this->physic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->physic(i), output);
  }
  
  // repeated .PBItemQuestion Question = 12;
  for (int i = 0; i < this->question_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->question(i), output);
  }
  
  // repeated .PBItemRelife Relife = 13;
  for (int i = 0; i < this->relife_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->relife(i), output);
  }
  
  // repeated .PBItemReturn Return = 14;
  for (int i = 0; i < this->return__size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(14, this->return_(i), output);
  }
  
  // repeated .PBItemReturnPaper ReturnPaper = 15;
  for (int i = 0; i < this->returnpaper_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->returnpaper(i), output);
  }
  
  // repeated .PBItemRune Rune = 16;
  for (int i = 0; i < this->rune_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->rune(i), output);
  }
  
  // repeated .PBItemScroll Scroll = 17;
  for (int i = 0; i < this->scroll_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->scroll(i), output);
  }
  
  // repeated .PBItemSequence Sequence = 18;
  for (int i = 0; i < this->sequence_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->sequence(i), output);
  }
  
  // repeated .PBItemShout Shout = 19;
  for (int i = 0; i < this->shout_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->shout(i), output);
  }
  
  // repeated .PBItemSkill ItemSkill = 20;
  for (int i = 0; i < this->itemskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->itemskill(i), output);
  }
  
  // repeated .PBItemStove Stove = 21;
  for (int i = 0; i < this->stove_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->stove(i), output);
  }
  
  // repeated .PBItemStuff Stuff = 22;
  for (int i = 0; i < this->stuff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->stuff(i), output);
  }
  
  // repeated .PBItemTask ItemTask = 23;
  for (int i = 0; i < this->itemtask_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->itemtask(i), output);
  }
  
  // repeated .PBItemTeleport Teleport = 24;
  for (int i = 0; i < this->teleport_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->teleport(i), output);
  }
  
  // repeated .PBItemTeleSymbol TeleSymbol = 25;
  for (int i = 0; i < this->telesymbol_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->telesymbol(i), output);
  }
  
  // repeated .PBItemUpgLeast UpgLeast = 26;
  for (int i = 0; i < this->upgleast_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->upgleast(i), output);
  }
  
  // repeated .PBItemUpgLuck UpgLuck = 27;
  for (int i = 0; i < this->upgluck_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->upgluck(i), output);
  }
  
  // repeated .PBItemYuanBug YuanBug = 28;
  for (int i = 0; i < this->yuanbug_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(28, this->yuanbug(i), output);
  }
  
  // repeated .PBItemYuanEgg YuanEgg = 29;
  for (int i = 0; i < this->yuanegg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(29, this->yuanegg(i), output);
  }
  
  // repeated .PBRedStone RedStone = 30;
  for (int i = 0; i < this->redstone_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(30, this->redstone(i), output);
  }
  
  // repeated .PBItemAutoShout AutoShout = 31;
  for (int i = 0; i < this->autoshout_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(31, this->autoshout(i), output);
  }
  
  // repeated .PBItemKitBag KitBag = 32;
  for (int i = 0; i < this->kitbag_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(32, this->kitbag(i), output);
  }
  
  // repeated .PBItemUpg ItemUpg = 33;
  for (int i = 0; i < this->itemupg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(33, this->itemupg(i), output);
  }
  
  // repeated .PBItemRemove ItemRemove = 34;
  for (int i = 0; i < this->itemremove_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(34, this->itemremove(i), output);
  }
  
  // repeated .PBItemChange ItemChange = 35;
  for (int i = 0; i < this->itemchange_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(35, this->itemchange(i), output);
  }
  
  // repeated .PBItemAdapter ItemAdapter = 36;
  for (int i = 0; i < this->itemadapter_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(36, this->itemadapter(i), output);
  }
  
  // repeated .PBItemMineMap MineMap = 37;
  for (int i = 0; i < this->minemap_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(37, this->minemap(i), output);
  }
  
  // repeated .PBItemCall ItemCall = 38;
  for (int i = 0; i < this->itemcall_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(38, this->itemcall(i), output);
  }
  
  // repeated .PBItemGiftBag GiftBag = 39;
  for (int i = 0; i < this->giftbag_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(39, this->giftbag(i), output);
  }
  
  // repeated .PBItemMagicWeapon MagicWeapons = 40;
  for (int i = 0; i < this->magicweapons_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(40, this->magicweapons(i), output);
  }
  
  // repeated .PBItemToken Token = 41;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(41, this->token(i), output);
  }
  
  // repeated .PBFuncItem FuncItem = 42;
  for (int i = 0; i < this->funcitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(42, this->funcitem(i), output);
  }
  
  // repeated .PBItemSkillBook SkillBook = 43;
  for (int i = 0; i < this->skillbook_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(43, this->skillbook(i), output);
  }
  
  // repeated .PBItemRedPaper RedPaper = 44;
  for (int i = 0; i < this->redpaper_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(44, this->redpaper(i), output);
  }
  
  // repeated .PBItemMagicStone MagicStone = 45;
  for (int i = 0; i < this->magicstone_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(45, this->magicstone(i), output);
  }
  
  // repeated .PBItemVip VipItem = 46;
  for (int i = 0; i < this->vipitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(46, this->vipitem(i), output);
  }
  
  // repeated .PBItemClean CleanItem = 47;
  for (int i = 0; i < this->cleanitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(47, this->cleanitem(i), output);
  }
  
  // repeated .PBAwardInfo AwardInfo = 48;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(48, this->awardinfo(i), output);
  }
  
  // repeated .PBLeagueBag LeagueBag = 49;
  for (int i = 0; i < this->leaguebag_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(49, this->leaguebag(i), output);
  }
  
  // repeated .PBInvitation Invitation = 50;
  for (int i = 0; i < this->invitation_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(50, this->invitation(i), output);
  }
  
  // repeated .PBSysInvitation SysInvitation = 51;
  for (int i = 0; i < this->sysinvitation_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(51, this->sysinvitation(i), output);
  }
  
  // repeated .PBItemRefresh ItemRefresh = 52;
  for (int i = 0; i < this->itemrefresh_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(52, this->itemrefresh(i), output);
  }
  
  // repeated .PBItemSummon ItemSummon = 53;
  for (int i = 0; i < this->itemsummon_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(53, this->itemsummon(i), output);
  }
  
  // repeated .PBItemDirect ItemDirect = 54;
  for (int i = 0; i < this->itemdirect_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(54, this->itemdirect(i), output);
  }
  
  // repeated .PBItemGetStar ItemGetStar = 55;
  for (int i = 0; i < this->itemgetstar_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(55, this->itemgetstar(i), output);
  }
  
  // repeated .PBItemAutoCollect ItemAutoCollect = 56;
  for (int i = 0; i < this->itemautocollect_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(56, this->itemautocollect(i), output);
  }
  
  // repeated .PBItemBlackPills ItemBlackPills = 57;
  for (int i = 0; i < this->itemblackpills_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(57, this->itemblackpills(i), output);
  }
  
  // repeated .PBItemExpContainer ExpContainer = 58;
  for (int i = 0; i < this->expcontainer_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(58, this->expcontainer(i), output);
  }
  
  // repeated .PBItemExpPills ExpPills = 59;
  for (int i = 0; i < this->exppills_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(59, this->exppills(i), output);
  }
  
  // repeated .PBSpiritItem SpiritItem = 60;
  for (int i = 0; i < this->spirititem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(60, this->spirititem(i), output);
  }
  
  // repeated .PBItemExpTome ExpTome = 61;
  for (int i = 0; i < this->exptome_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(61, this->exptome(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemBase Item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->item(i), target);
  }
  
  // repeated .PBItemBindStone BindStone = 2;
  for (int i = 0; i < this->bindstone_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->bindstone(i), target);
  }
  
  // repeated .PBItemBluePrint BluePrint = 3;
  for (int i = 0; i < this->blueprint_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->blueprint(i), target);
  }
  
  // repeated .PBItemBook ItemBook = 4;
  for (int i = 0; i < this->itembook_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->itembook(i), target);
  }
  
  // repeated .PBItemCard ItemCard = 5;
  for (int i = 0; i < this->itemcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->itemcard(i), target);
  }
  
  // repeated .PBItemExp ItemExp = 6;
  for (int i = 0; i < this->itemexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->itemexp(i), target);
  }
  
  // repeated .PBItemHorse Horse = 7;
  for (int i = 0; i < this->horse_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->horse(i), target);
  }
  
  // repeated .PBItemJewel Jewel = 8;
  for (int i = 0; i < this->jewel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->jewel(i), target);
  }
  
  // repeated .PBItemPetEgg PetEgg = 9;
  for (int i = 0; i < this->petegg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->petegg(i), target);
  }
  
  // repeated .PBItemPetFood PetFood = 10;
  for (int i = 0; i < this->petfood_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->petfood(i), target);
  }
  
  // repeated .PBItemPhysic Physic = 11;
  for (int i = 0; i < this->physic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->physic(i), target);
  }
  
  // repeated .PBItemQuestion Question = 12;
  for (int i = 0; i < this->question_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->question(i), target);
  }
  
  // repeated .PBItemRelife Relife = 13;
  for (int i = 0; i < this->relife_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->relife(i), target);
  }
  
  // repeated .PBItemReturn Return = 14;
  for (int i = 0; i < this->return__size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(14, this->return_(i), target);
  }
  
  // repeated .PBItemReturnPaper ReturnPaper = 15;
  for (int i = 0; i < this->returnpaper_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->returnpaper(i), target);
  }
  
  // repeated .PBItemRune Rune = 16;
  for (int i = 0; i < this->rune_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->rune(i), target);
  }
  
  // repeated .PBItemScroll Scroll = 17;
  for (int i = 0; i < this->scroll_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->scroll(i), target);
  }
  
  // repeated .PBItemSequence Sequence = 18;
  for (int i = 0; i < this->sequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->sequence(i), target);
  }
  
  // repeated .PBItemShout Shout = 19;
  for (int i = 0; i < this->shout_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->shout(i), target);
  }
  
  // repeated .PBItemSkill ItemSkill = 20;
  for (int i = 0; i < this->itemskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->itemskill(i), target);
  }
  
  // repeated .PBItemStove Stove = 21;
  for (int i = 0; i < this->stove_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->stove(i), target);
  }
  
  // repeated .PBItemStuff Stuff = 22;
  for (int i = 0; i < this->stuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->stuff(i), target);
  }
  
  // repeated .PBItemTask ItemTask = 23;
  for (int i = 0; i < this->itemtask_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->itemtask(i), target);
  }
  
  // repeated .PBItemTeleport Teleport = 24;
  for (int i = 0; i < this->teleport_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->teleport(i), target);
  }
  
  // repeated .PBItemTeleSymbol TeleSymbol = 25;
  for (int i = 0; i < this->telesymbol_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->telesymbol(i), target);
  }
  
  // repeated .PBItemUpgLeast UpgLeast = 26;
  for (int i = 0; i < this->upgleast_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->upgleast(i), target);
  }
  
  // repeated .PBItemUpgLuck UpgLuck = 27;
  for (int i = 0; i < this->upgluck_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->upgluck(i), target);
  }
  
  // repeated .PBItemYuanBug YuanBug = 28;
  for (int i = 0; i < this->yuanbug_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(28, this->yuanbug(i), target);
  }
  
  // repeated .PBItemYuanEgg YuanEgg = 29;
  for (int i = 0; i < this->yuanegg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(29, this->yuanegg(i), target);
  }
  
  // repeated .PBRedStone RedStone = 30;
  for (int i = 0; i < this->redstone_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(30, this->redstone(i), target);
  }
  
  // repeated .PBItemAutoShout AutoShout = 31;
  for (int i = 0; i < this->autoshout_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(31, this->autoshout(i), target);
  }
  
  // repeated .PBItemKitBag KitBag = 32;
  for (int i = 0; i < this->kitbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(32, this->kitbag(i), target);
  }
  
  // repeated .PBItemUpg ItemUpg = 33;
  for (int i = 0; i < this->itemupg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(33, this->itemupg(i), target);
  }
  
  // repeated .PBItemRemove ItemRemove = 34;
  for (int i = 0; i < this->itemremove_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(34, this->itemremove(i), target);
  }
  
  // repeated .PBItemChange ItemChange = 35;
  for (int i = 0; i < this->itemchange_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(35, this->itemchange(i), target);
  }
  
  // repeated .PBItemAdapter ItemAdapter = 36;
  for (int i = 0; i < this->itemadapter_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(36, this->itemadapter(i), target);
  }
  
  // repeated .PBItemMineMap MineMap = 37;
  for (int i = 0; i < this->minemap_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(37, this->minemap(i), target);
  }
  
  // repeated .PBItemCall ItemCall = 38;
  for (int i = 0; i < this->itemcall_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(38, this->itemcall(i), target);
  }
  
  // repeated .PBItemGiftBag GiftBag = 39;
  for (int i = 0; i < this->giftbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(39, this->giftbag(i), target);
  }
  
  // repeated .PBItemMagicWeapon MagicWeapons = 40;
  for (int i = 0; i < this->magicweapons_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(40, this->magicweapons(i), target);
  }
  
  // repeated .PBItemToken Token = 41;
  for (int i = 0; i < this->token_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(41, this->token(i), target);
  }
  
  // repeated .PBFuncItem FuncItem = 42;
  for (int i = 0; i < this->funcitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(42, this->funcitem(i), target);
  }
  
  // repeated .PBItemSkillBook SkillBook = 43;
  for (int i = 0; i < this->skillbook_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(43, this->skillbook(i), target);
  }
  
  // repeated .PBItemRedPaper RedPaper = 44;
  for (int i = 0; i < this->redpaper_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(44, this->redpaper(i), target);
  }
  
  // repeated .PBItemMagicStone MagicStone = 45;
  for (int i = 0; i < this->magicstone_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(45, this->magicstone(i), target);
  }
  
  // repeated .PBItemVip VipItem = 46;
  for (int i = 0; i < this->vipitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(46, this->vipitem(i), target);
  }
  
  // repeated .PBItemClean CleanItem = 47;
  for (int i = 0; i < this->cleanitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(47, this->cleanitem(i), target);
  }
  
  // repeated .PBAwardInfo AwardInfo = 48;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(48, this->awardinfo(i), target);
  }
  
  // repeated .PBLeagueBag LeagueBag = 49;
  for (int i = 0; i < this->leaguebag_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(49, this->leaguebag(i), target);
  }
  
  // repeated .PBInvitation Invitation = 50;
  for (int i = 0; i < this->invitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(50, this->invitation(i), target);
  }
  
  // repeated .PBSysInvitation SysInvitation = 51;
  for (int i = 0; i < this->sysinvitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(51, this->sysinvitation(i), target);
  }
  
  // repeated .PBItemRefresh ItemRefresh = 52;
  for (int i = 0; i < this->itemrefresh_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(52, this->itemrefresh(i), target);
  }
  
  // repeated .PBItemSummon ItemSummon = 53;
  for (int i = 0; i < this->itemsummon_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(53, this->itemsummon(i), target);
  }
  
  // repeated .PBItemDirect ItemDirect = 54;
  for (int i = 0; i < this->itemdirect_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(54, this->itemdirect(i), target);
  }
  
  // repeated .PBItemGetStar ItemGetStar = 55;
  for (int i = 0; i < this->itemgetstar_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(55, this->itemgetstar(i), target);
  }
  
  // repeated .PBItemAutoCollect ItemAutoCollect = 56;
  for (int i = 0; i < this->itemautocollect_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(56, this->itemautocollect(i), target);
  }
  
  // repeated .PBItemBlackPills ItemBlackPills = 57;
  for (int i = 0; i < this->itemblackpills_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(57, this->itemblackpills(i), target);
  }
  
  // repeated .PBItemExpContainer ExpContainer = 58;
  for (int i = 0; i < this->expcontainer_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(58, this->expcontainer(i), target);
  }
  
  // repeated .PBItemExpPills ExpPills = 59;
  for (int i = 0; i < this->exppills_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(59, this->exppills(i), target);
  }
  
  // repeated .PBSpiritItem SpiritItem = 60;
  for (int i = 0; i < this->spirititem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(60, this->spirititem(i), target);
  }
  
  // repeated .PBItemExpTome ExpTome = 61;
  for (int i = 0; i < this->exptome_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(61, this->exptome(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSet::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBItemBase Item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .PBItemBindStone BindStone = 2;
  total_size += 1 * this->bindstone_size();
  for (int i = 0; i < this->bindstone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bindstone(i));
  }
  
  // repeated .PBItemBluePrint BluePrint = 3;
  total_size += 1 * this->blueprint_size();
  for (int i = 0; i < this->blueprint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->blueprint(i));
  }
  
  // repeated .PBItemBook ItemBook = 4;
  total_size += 1 * this->itembook_size();
  for (int i = 0; i < this->itembook_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itembook(i));
  }
  
  // repeated .PBItemCard ItemCard = 5;
  total_size += 1 * this->itemcard_size();
  for (int i = 0; i < this->itemcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemcard(i));
  }
  
  // repeated .PBItemExp ItemExp = 6;
  total_size += 1 * this->itemexp_size();
  for (int i = 0; i < this->itemexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemexp(i));
  }
  
  // repeated .PBItemHorse Horse = 7;
  total_size += 1 * this->horse_size();
  for (int i = 0; i < this->horse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->horse(i));
  }
  
  // repeated .PBItemJewel Jewel = 8;
  total_size += 1 * this->jewel_size();
  for (int i = 0; i < this->jewel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->jewel(i));
  }
  
  // repeated .PBItemPetEgg PetEgg = 9;
  total_size += 1 * this->petegg_size();
  for (int i = 0; i < this->petegg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->petegg(i));
  }
  
  // repeated .PBItemPetFood PetFood = 10;
  total_size += 1 * this->petfood_size();
  for (int i = 0; i < this->petfood_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->petfood(i));
  }
  
  // repeated .PBItemPhysic Physic = 11;
  total_size += 1 * this->physic_size();
  for (int i = 0; i < this->physic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->physic(i));
  }
  
  // repeated .PBItemQuestion Question = 12;
  total_size += 1 * this->question_size();
  for (int i = 0; i < this->question_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->question(i));
  }
  
  // repeated .PBItemRelife Relife = 13;
  total_size += 1 * this->relife_size();
  for (int i = 0; i < this->relife_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->relife(i));
  }
  
  // repeated .PBItemReturn Return = 14;
  total_size += 1 * this->return__size();
  for (int i = 0; i < this->return__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->return_(i));
  }
  
  // repeated .PBItemReturnPaper ReturnPaper = 15;
  total_size += 1 * this->returnpaper_size();
  for (int i = 0; i < this->returnpaper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->returnpaper(i));
  }
  
  // repeated .PBItemRune Rune = 16;
  total_size += 2 * this->rune_size();
  for (int i = 0; i < this->rune_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->rune(i));
  }
  
  // repeated .PBItemScroll Scroll = 17;
  total_size += 2 * this->scroll_size();
  for (int i = 0; i < this->scroll_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->scroll(i));
  }
  
  // repeated .PBItemSequence Sequence = 18;
  total_size += 2 * this->sequence_size();
  for (int i = 0; i < this->sequence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->sequence(i));
  }
  
  // repeated .PBItemShout Shout = 19;
  total_size += 2 * this->shout_size();
  for (int i = 0; i < this->shout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->shout(i));
  }
  
  // repeated .PBItemSkill ItemSkill = 20;
  total_size += 2 * this->itemskill_size();
  for (int i = 0; i < this->itemskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemskill(i));
  }
  
  // repeated .PBItemStove Stove = 21;
  total_size += 2 * this->stove_size();
  for (int i = 0; i < this->stove_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->stove(i));
  }
  
  // repeated .PBItemStuff Stuff = 22;
  total_size += 2 * this->stuff_size();
  for (int i = 0; i < this->stuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->stuff(i));
  }
  
  // repeated .PBItemTask ItemTask = 23;
  total_size += 2 * this->itemtask_size();
  for (int i = 0; i < this->itemtask_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemtask(i));
  }
  
  // repeated .PBItemTeleport Teleport = 24;
  total_size += 2 * this->teleport_size();
  for (int i = 0; i < this->teleport_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->teleport(i));
  }
  
  // repeated .PBItemTeleSymbol TeleSymbol = 25;
  total_size += 2 * this->telesymbol_size();
  for (int i = 0; i < this->telesymbol_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->telesymbol(i));
  }
  
  // repeated .PBItemUpgLeast UpgLeast = 26;
  total_size += 2 * this->upgleast_size();
  for (int i = 0; i < this->upgleast_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->upgleast(i));
  }
  
  // repeated .PBItemUpgLuck UpgLuck = 27;
  total_size += 2 * this->upgluck_size();
  for (int i = 0; i < this->upgluck_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->upgluck(i));
  }
  
  // repeated .PBItemYuanBug YuanBug = 28;
  total_size += 2 * this->yuanbug_size();
  for (int i = 0; i < this->yuanbug_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->yuanbug(i));
  }
  
  // repeated .PBItemYuanEgg YuanEgg = 29;
  total_size += 2 * this->yuanegg_size();
  for (int i = 0; i < this->yuanegg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->yuanegg(i));
  }
  
  // repeated .PBRedStone RedStone = 30;
  total_size += 2 * this->redstone_size();
  for (int i = 0; i < this->redstone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->redstone(i));
  }
  
  // repeated .PBItemAutoShout AutoShout = 31;
  total_size += 2 * this->autoshout_size();
  for (int i = 0; i < this->autoshout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->autoshout(i));
  }
  
  // repeated .PBItemKitBag KitBag = 32;
  total_size += 2 * this->kitbag_size();
  for (int i = 0; i < this->kitbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->kitbag(i));
  }
  
  // repeated .PBItemUpg ItemUpg = 33;
  total_size += 2 * this->itemupg_size();
  for (int i = 0; i < this->itemupg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemupg(i));
  }
  
  // repeated .PBItemRemove ItemRemove = 34;
  total_size += 2 * this->itemremove_size();
  for (int i = 0; i < this->itemremove_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemremove(i));
  }
  
  // repeated .PBItemChange ItemChange = 35;
  total_size += 2 * this->itemchange_size();
  for (int i = 0; i < this->itemchange_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemchange(i));
  }
  
  // repeated .PBItemAdapter ItemAdapter = 36;
  total_size += 2 * this->itemadapter_size();
  for (int i = 0; i < this->itemadapter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemadapter(i));
  }
  
  // repeated .PBItemMineMap MineMap = 37;
  total_size += 2 * this->minemap_size();
  for (int i = 0; i < this->minemap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->minemap(i));
  }
  
  // repeated .PBItemCall ItemCall = 38;
  total_size += 2 * this->itemcall_size();
  for (int i = 0; i < this->itemcall_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemcall(i));
  }
  
  // repeated .PBItemGiftBag GiftBag = 39;
  total_size += 2 * this->giftbag_size();
  for (int i = 0; i < this->giftbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->giftbag(i));
  }
  
  // repeated .PBItemMagicWeapon MagicWeapons = 40;
  total_size += 2 * this->magicweapons_size();
  for (int i = 0; i < this->magicweapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->magicweapons(i));
  }
  
  // repeated .PBItemToken Token = 41;
  total_size += 2 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->token(i));
  }
  
  // repeated .PBFuncItem FuncItem = 42;
  total_size += 2 * this->funcitem_size();
  for (int i = 0; i < this->funcitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->funcitem(i));
  }
  
  // repeated .PBItemSkillBook SkillBook = 43;
  total_size += 2 * this->skillbook_size();
  for (int i = 0; i < this->skillbook_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skillbook(i));
  }
  
  // repeated .PBItemRedPaper RedPaper = 44;
  total_size += 2 * this->redpaper_size();
  for (int i = 0; i < this->redpaper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->redpaper(i));
  }
  
  // repeated .PBItemMagicStone MagicStone = 45;
  total_size += 2 * this->magicstone_size();
  for (int i = 0; i < this->magicstone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->magicstone(i));
  }
  
  // repeated .PBItemVip VipItem = 46;
  total_size += 2 * this->vipitem_size();
  for (int i = 0; i < this->vipitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->vipitem(i));
  }
  
  // repeated .PBItemClean CleanItem = 47;
  total_size += 2 * this->cleanitem_size();
  for (int i = 0; i < this->cleanitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->cleanitem(i));
  }
  
  // repeated .PBAwardInfo AwardInfo = 48;
  total_size += 2 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->awardinfo(i));
  }
  
  // repeated .PBLeagueBag LeagueBag = 49;
  total_size += 2 * this->leaguebag_size();
  for (int i = 0; i < this->leaguebag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->leaguebag(i));
  }
  
  // repeated .PBInvitation Invitation = 50;
  total_size += 2 * this->invitation_size();
  for (int i = 0; i < this->invitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->invitation(i));
  }
  
  // repeated .PBSysInvitation SysInvitation = 51;
  total_size += 2 * this->sysinvitation_size();
  for (int i = 0; i < this->sysinvitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->sysinvitation(i));
  }
  
  // repeated .PBItemRefresh ItemRefresh = 52;
  total_size += 2 * this->itemrefresh_size();
  for (int i = 0; i < this->itemrefresh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemrefresh(i));
  }
  
  // repeated .PBItemSummon ItemSummon = 53;
  total_size += 2 * this->itemsummon_size();
  for (int i = 0; i < this->itemsummon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemsummon(i));
  }
  
  // repeated .PBItemDirect ItemDirect = 54;
  total_size += 2 * this->itemdirect_size();
  for (int i = 0; i < this->itemdirect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemdirect(i));
  }
  
  // repeated .PBItemGetStar ItemGetStar = 55;
  total_size += 2 * this->itemgetstar_size();
  for (int i = 0; i < this->itemgetstar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemgetstar(i));
  }
  
  // repeated .PBItemAutoCollect ItemAutoCollect = 56;
  total_size += 2 * this->itemautocollect_size();
  for (int i = 0; i < this->itemautocollect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemautocollect(i));
  }
  
  // repeated .PBItemBlackPills ItemBlackPills = 57;
  total_size += 2 * this->itemblackpills_size();
  for (int i = 0; i < this->itemblackpills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemblackpills(i));
  }
  
  // repeated .PBItemExpContainer ExpContainer = 58;
  total_size += 2 * this->expcontainer_size();
  for (int i = 0; i < this->expcontainer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->expcontainer(i));
  }
  
  // repeated .PBItemExpPills ExpPills = 59;
  total_size += 2 * this->exppills_size();
  for (int i = 0; i < this->exppills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->exppills(i));
  }
  
  // repeated .PBSpiritItem SpiritItem = 60;
  total_size += 2 * this->spirititem_size();
  for (int i = 0; i < this->spirititem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->spirititem(i));
  }
  
  // repeated .PBItemExpTome ExpTome = 61;
  total_size += 2 * this->exptome_size();
  for (int i = 0; i < this->exptome_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->exptome(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSet::MergeFrom(const PBItemSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  bindstone_.MergeFrom(from.bindstone_);
  blueprint_.MergeFrom(from.blueprint_);
  itembook_.MergeFrom(from.itembook_);
  itemcard_.MergeFrom(from.itemcard_);
  itemexp_.MergeFrom(from.itemexp_);
  horse_.MergeFrom(from.horse_);
  jewel_.MergeFrom(from.jewel_);
  petegg_.MergeFrom(from.petegg_);
  petfood_.MergeFrom(from.petfood_);
  physic_.MergeFrom(from.physic_);
  question_.MergeFrom(from.question_);
  relife_.MergeFrom(from.relife_);
  return__.MergeFrom(from.return__);
  returnpaper_.MergeFrom(from.returnpaper_);
  rune_.MergeFrom(from.rune_);
  scroll_.MergeFrom(from.scroll_);
  sequence_.MergeFrom(from.sequence_);
  shout_.MergeFrom(from.shout_);
  itemskill_.MergeFrom(from.itemskill_);
  stove_.MergeFrom(from.stove_);
  stuff_.MergeFrom(from.stuff_);
  itemtask_.MergeFrom(from.itemtask_);
  teleport_.MergeFrom(from.teleport_);
  telesymbol_.MergeFrom(from.telesymbol_);
  upgleast_.MergeFrom(from.upgleast_);
  upgluck_.MergeFrom(from.upgluck_);
  yuanbug_.MergeFrom(from.yuanbug_);
  yuanegg_.MergeFrom(from.yuanegg_);
  redstone_.MergeFrom(from.redstone_);
  autoshout_.MergeFrom(from.autoshout_);
  kitbag_.MergeFrom(from.kitbag_);
  itemupg_.MergeFrom(from.itemupg_);
  itemremove_.MergeFrom(from.itemremove_);
  itemchange_.MergeFrom(from.itemchange_);
  itemadapter_.MergeFrom(from.itemadapter_);
  minemap_.MergeFrom(from.minemap_);
  itemcall_.MergeFrom(from.itemcall_);
  giftbag_.MergeFrom(from.giftbag_);
  magicweapons_.MergeFrom(from.magicweapons_);
  token_.MergeFrom(from.token_);
  funcitem_.MergeFrom(from.funcitem_);
  skillbook_.MergeFrom(from.skillbook_);
  redpaper_.MergeFrom(from.redpaper_);
  magicstone_.MergeFrom(from.magicstone_);
  vipitem_.MergeFrom(from.vipitem_);
  cleanitem_.MergeFrom(from.cleanitem_);
  awardinfo_.MergeFrom(from.awardinfo_);
  leaguebag_.MergeFrom(from.leaguebag_);
  invitation_.MergeFrom(from.invitation_);
  sysinvitation_.MergeFrom(from.sysinvitation_);
  itemrefresh_.MergeFrom(from.itemrefresh_);
  itemsummon_.MergeFrom(from.itemsummon_);
  itemdirect_.MergeFrom(from.itemdirect_);
  itemgetstar_.MergeFrom(from.itemgetstar_);
  itemautocollect_.MergeFrom(from.itemautocollect_);
  itemblackpills_.MergeFrom(from.itemblackpills_);
  expcontainer_.MergeFrom(from.expcontainer_);
  exppills_.MergeFrom(from.exppills_);
  spirititem_.MergeFrom(from.spirititem_);
  exptome_.MergeFrom(from.exptome_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSet::CopyFrom(const PBItemSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSet::Swap(PBItemSet* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    bindstone_.Swap(&other->bindstone_);
    blueprint_.Swap(&other->blueprint_);
    itembook_.Swap(&other->itembook_);
    itemcard_.Swap(&other->itemcard_);
    itemexp_.Swap(&other->itemexp_);
    horse_.Swap(&other->horse_);
    jewel_.Swap(&other->jewel_);
    petegg_.Swap(&other->petegg_);
    petfood_.Swap(&other->petfood_);
    physic_.Swap(&other->physic_);
    question_.Swap(&other->question_);
    relife_.Swap(&other->relife_);
    return__.Swap(&other->return__);
    returnpaper_.Swap(&other->returnpaper_);
    rune_.Swap(&other->rune_);
    scroll_.Swap(&other->scroll_);
    sequence_.Swap(&other->sequence_);
    shout_.Swap(&other->shout_);
    itemskill_.Swap(&other->itemskill_);
    stove_.Swap(&other->stove_);
    stuff_.Swap(&other->stuff_);
    itemtask_.Swap(&other->itemtask_);
    teleport_.Swap(&other->teleport_);
    telesymbol_.Swap(&other->telesymbol_);
    upgleast_.Swap(&other->upgleast_);
    upgluck_.Swap(&other->upgluck_);
    yuanbug_.Swap(&other->yuanbug_);
    yuanegg_.Swap(&other->yuanegg_);
    redstone_.Swap(&other->redstone_);
    autoshout_.Swap(&other->autoshout_);
    kitbag_.Swap(&other->kitbag_);
    itemupg_.Swap(&other->itemupg_);
    itemremove_.Swap(&other->itemremove_);
    itemchange_.Swap(&other->itemchange_);
    itemadapter_.Swap(&other->itemadapter_);
    minemap_.Swap(&other->minemap_);
    itemcall_.Swap(&other->itemcall_);
    giftbag_.Swap(&other->giftbag_);
    magicweapons_.Swap(&other->magicweapons_);
    token_.Swap(&other->token_);
    funcitem_.Swap(&other->funcitem_);
    skillbook_.Swap(&other->skillbook_);
    redpaper_.Swap(&other->redpaper_);
    magicstone_.Swap(&other->magicstone_);
    vipitem_.Swap(&other->vipitem_);
    cleanitem_.Swap(&other->cleanitem_);
    awardinfo_.Swap(&other->awardinfo_);
    leaguebag_.Swap(&other->leaguebag_);
    invitation_.Swap(&other->invitation_);
    sysinvitation_.Swap(&other->sysinvitation_);
    itemrefresh_.Swap(&other->itemrefresh_);
    itemsummon_.Swap(&other->itemsummon_);
    itemdirect_.Swap(&other->itemdirect_);
    itemgetstar_.Swap(&other->itemgetstar_);
    itemautocollect_.Swap(&other->itemautocollect_);
    itemblackpills_.Swap(&other->itemblackpills_);
    expcontainer_.Swap(&other->expcontainer_);
    exppills_.Swap(&other->exppills_);
    spirititem_.Swap(&other->spirititem_);
    exptome_.Swap(&other->exptome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemSet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemSet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemSet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemSet_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBConfigTable::kBeginnerFieldNumber;
const int PBConfigTable::kDataFieldNumber;
const int PBConfigTable::kDiploidFieldNumber;
const int PBConfigTable::kDropLevelFieldNumber;
const int PBConfigTable::kDropTableFieldNumber;
const int PBConfigTable::kRedStoneTableFieldNumber;
const int PBConfigTable::kReliveTableFieldNumber;
const int PBConfigTable::kSellTableFieldNumber;
const int PBConfigTable::kTeleTableFieldNumber;
const int PBConfigTable::kAddPkTableFieldNumber;
const int PBConfigTable::kOfficialTableFieldNumber;
const int PBConfigTable::kOgreTranFieldNumber;
const int PBConfigTable::kMagicWeaponProTableFieldNumber;
const int PBConfigTable::kBindChargeTabelFieldNumber;
const int PBConfigTable::kPKTableFieldNumber;
const int PBConfigTable::kMagicWeaponSkillBoxFieldNumber;
const int PBConfigTable::kEquipExchangeFieldNumber;
const int PBConfigTable::kMapTableFieldNumber;
const int PBConfigTable::kMultiAttackTableFieldNumber;
const int PBConfigTable::kMatrixTableFieldNumber;
const int PBConfigTable::kMarriageConfigFieldNumber;
const int PBConfigTable::kProgressConfigFieldNumber;
const int PBConfigTable::kCountTableFieldNumber;
const int PBConfigTable::kActivityConfigFieldNumber;
const int PBConfigTable::kDirectTableFieldNumber;
const int PBConfigTable::kBattleConfigFieldNumber;
const int PBConfigTable::kMoneyLmtFieldNumber;
const int PBConfigTable::kHandinTableFieldNumber;
const int PBConfigTable::kHandinEncourageFieldNumber;
const int PBConfigTable::kChangeCampFieldNumber;
const int PBConfigTable::kAccuseConfigFieldNumber;
const int PBConfigTable::kComRuneConfigFieldNumber;
const int PBConfigTable::kMWDecomposTabFieldNumber;
const int PBConfigTable::kMWQuickUpTabFieldNumber;
const int PBConfigTable::kGlobalMapConfigFieldNumber;
const int PBConfigTable::kOffLineExpConfigFieldNumber;
const int PBConfigTable::kRepeFameTableFieldNumber;
const int PBConfigTable::kCastingSpiritTableFieldNumber;
#endif  // !_MSC_VER

PBConfigTable::PBConfigTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBConfigTable::InitAsDefaultInstance() {}

PBConfigTable::PBConfigTable(const PBConfigTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBConfigTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBConfigTable::~PBConfigTable() {
  SharedDtor();
}

void PBConfigTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBConfigTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBConfigTable_descriptor_;
}

const PBConfigTable& PBConfigTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBConfigTable* PBConfigTable::default_instance_ = NULL;

PBConfigTable* PBConfigTable::New() const {
  return new PBConfigTable;
}

void PBConfigTable::Clear() {
  beginner_.Clear();
  data_.Clear();
  diploid_.Clear();
  droplevel_.Clear();
  droptable_.Clear();
  redstonetable_.Clear();
  relivetable_.Clear();
  selltable_.Clear();
  teletable_.Clear();
  addpktable_.Clear();
  officialtable_.Clear();
  ogretran_.Clear();
  magicweaponprotable_.Clear();
  bindchargetabel_.Clear();
  pktable_.Clear();
  magicweaponskillbox_.Clear();
  equipexchange_.Clear();
  maptable_.Clear();
  multiattacktable_.Clear();
  matrixtable_.Clear();
  marriageconfig_.Clear();
  progressconfig_.Clear();
  counttable_.Clear();
  activityconfig_.Clear();
  directtable_.Clear();
  battleconfig_.Clear();
  moneylmt_.Clear();
  handintable_.Clear();
  handinencourage_.Clear();
  changecamp_.Clear();
  accuseconfig_.Clear();
  comruneconfig_.Clear();
  mwdecompostab_.Clear();
  mwquickuptab_.Clear();
  globalmapconfig_.Clear();
  offlineexpconfig_.Clear();
  repefametable_.Clear();
  castingspirittable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBConfigTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBBeginner Beginner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Beginner:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_beginner()));
        if (input->ExpectTag(10)) goto parse_Beginner;
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }
      
      // repeated .PBData Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_data()));
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectTag(26)) goto parse_Diploid;
        break;
      }
      
      // repeated .PBDiploidTable Diploid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Diploid:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_diploid()));
        if (input->ExpectTag(26)) goto parse_Diploid;
        if (input->ExpectTag(34)) goto parse_DropLevel;
        break;
      }
      
      // repeated .PBDropLevel DropLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_droplevel()));
        if (input->ExpectTag(34)) goto parse_DropLevel;
        if (input->ExpectTag(42)) goto parse_DropTable;
        break;
      }
      
      // repeated .PBDropTable DropTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_droptable()));
        if (input->ExpectTag(42)) goto parse_DropTable;
        if (input->ExpectTag(50)) goto parse_RedStoneTable;
        break;
      }
      
      // repeated .PBRedStoneExpTable RedStoneTable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RedStoneTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_redstonetable()));
        if (input->ExpectTag(50)) goto parse_RedStoneTable;
        if (input->ExpectTag(58)) goto parse_ReliveTable;
        break;
      }
      
      // repeated .PBReliveTable ReliveTable = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ReliveTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_relivetable()));
        if (input->ExpectTag(58)) goto parse_ReliveTable;
        if (input->ExpectTag(66)) goto parse_SellTable;
        break;
      }
      
      // repeated .PBSellTable SellTable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SellTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_selltable()));
        if (input->ExpectTag(66)) goto parse_SellTable;
        if (input->ExpectTag(74)) goto parse_TeleTable;
        break;
      }
      
      // repeated .PBTeleTable TeleTable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeleTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_teletable()));
        if (input->ExpectTag(74)) goto parse_TeleTable;
        if (input->ExpectTag(82)) goto parse_AddPkTable;
        break;
      }
      
      // repeated .PBAddPKTable AddPkTable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AddPkTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_addpktable()));
        if (input->ExpectTag(82)) goto parse_AddPkTable;
        if (input->ExpectTag(90)) goto parse_OfficialTable;
        break;
      }
      
      // repeated .PBOfficialTable OfficialTable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OfficialTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_officialtable()));
        if (input->ExpectTag(90)) goto parse_OfficialTable;
        if (input->ExpectTag(98)) goto parse_OgreTran;
        break;
      }
      
      // repeated .PBOgreTran OgreTran = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OgreTran:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ogretran()));
        if (input->ExpectTag(98)) goto parse_OgreTran;
        if (input->ExpectTag(106)) goto parse_MagicWeaponProTable;
        break;
      }
      
      // repeated .PBTplMagicWeaponProIncTable MagicWeaponProTable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicWeaponProTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_magicweaponprotable()));
        if (input->ExpectTag(106)) goto parse_MagicWeaponProTable;
        if (input->ExpectTag(114)) goto parse_BindChargeTabel;
        break;
      }
      
      // repeated .PBBindChargeTable BindChargeTabel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BindChargeTabel:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bindchargetabel()));
        if (input->ExpectTag(114)) goto parse_BindChargeTabel;
        if (input->ExpectTag(122)) goto parse_PKTable;
        break;
      }
      
      // repeated .PBPKValueTable PKTable = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PKTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_pktable()));
        if (input->ExpectTag(122)) goto parse_PKTable;
        if (input->ExpectTag(130)) goto parse_MagicWeaponSkillBox;
        break;
      }
      
      // repeated .PBMagicWeaponSkillBoxProTable MagicWeaponSkillBox = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicWeaponSkillBox:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_magicweaponskillbox()));
        if (input->ExpectTag(130)) goto parse_MagicWeaponSkillBox;
        if (input->ExpectTag(138)) goto parse_EquipExchange;
        break;
      }
      
      // repeated .PBEquipExchangeTable EquipExchange = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipExchange:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equipexchange()));
        if (input->ExpectTag(138)) goto parse_EquipExchange;
        if (input->ExpectTag(146)) goto parse_MapTable;
        break;
      }
      
      // repeated .PBMapTable MapTable = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_maptable()));
        if (input->ExpectTag(146)) goto parse_MapTable;
        if (input->ExpectTag(154)) goto parse_MultiAttackTable;
        break;
      }
      
      // repeated .PBMultiAttackTable MultiAttackTable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MultiAttackTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_multiattacktable()));
        if (input->ExpectTag(154)) goto parse_MultiAttackTable;
        if (input->ExpectTag(162)) goto parse_MatrixTable;
        break;
      }
      
      // repeated .PBMatrixTable MatrixTable = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MatrixTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_matrixtable()));
        if (input->ExpectTag(162)) goto parse_MatrixTable;
        if (input->ExpectTag(170)) goto parse_MarriageConfig;
        break;
      }
      
      // repeated .PBTemplateMarriageConfig MarriageConfig = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MarriageConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_marriageconfig()));
        if (input->ExpectTag(170)) goto parse_MarriageConfig;
        if (input->ExpectTag(178)) goto parse_ProgressConfig;
        break;
      }
      
      // repeated .PBProGressConfig ProgressConfig = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ProgressConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_progressconfig()));
        if (input->ExpectTag(178)) goto parse_ProgressConfig;
        if (input->ExpectTag(186)) goto parse_CountTable;
        break;
      }
      
      // repeated .PBCountTable CountTable = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CountTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_counttable()));
        if (input->ExpectTag(186)) goto parse_CountTable;
        if (input->ExpectTag(194)) goto parse_ActivityConfig;
        break;
      }
      
      // repeated .PBActivityConfig ActivityConfig = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActivityConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activityconfig()));
        if (input->ExpectTag(194)) goto parse_ActivityConfig;
        if (input->ExpectTag(202)) goto parse_DirectTable;
        break;
      }
      
      // repeated .PBDirectTable DirectTable = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DirectTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_directtable()));
        if (input->ExpectTag(202)) goto parse_DirectTable;
        if (input->ExpectTag(210)) goto parse_BattleConfig;
        break;
      }
      
      // repeated .PBWorldBattleConfig BattleConfig = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_battleconfig()));
        if (input->ExpectTag(210)) goto parse_BattleConfig;
        if (input->ExpectTag(218)) goto parse_MoneyLmt;
        break;
      }
      
      // repeated .PBLevelMoneyLmt MoneyLmt = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MoneyLmt:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_moneylmt()));
        if (input->ExpectTag(218)) goto parse_MoneyLmt;
        if (input->ExpectTag(226)) goto parse_HandinTable;
        break;
      }
      
      // repeated .PBHandinTable HandinTable = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HandinTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_handintable()));
        if (input->ExpectTag(226)) goto parse_HandinTable;
        if (input->ExpectTag(234)) goto parse_HandinEncourage;
        break;
      }
      
      // repeated .PBHandinEncourage HandinEncourage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HandinEncourage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_handinencourage()));
        if (input->ExpectTag(234)) goto parse_HandinEncourage;
        if (input->ExpectTag(242)) goto parse_changeCamp;
        break;
      }
      
      // repeated .PBItemChangeCamp changeCamp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_changeCamp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_changecamp()));
        if (input->ExpectTag(242)) goto parse_changeCamp;
        if (input->ExpectTag(250)) goto parse_AccuseConfig;
        break;
      }
      
      // repeated .PBAccuseConfig AccuseConfig = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AccuseConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_accuseconfig()));
        if (input->ExpectTag(250)) goto parse_AccuseConfig;
        if (input->ExpectTag(258)) goto parse_ComRuneConfig;
        break;
      }
      
      // repeated .PBComRuneConfig ComRuneConfig = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ComRuneConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_comruneconfig()));
        if (input->ExpectTag(258)) goto parse_ComRuneConfig;
        if (input->ExpectTag(266)) goto parse_MWDecomposTab;
        break;
      }
      
      // repeated .PBMagicWeaponDecomposeTable MWDecomposTab = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWDecomposTab:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mwdecompostab()));
        if (input->ExpectTag(266)) goto parse_MWDecomposTab;
        if (input->ExpectTag(274)) goto parse_MWQuickUpTab;
        break;
      }
      
      // repeated .PBMagicWeaponQuickUpTable MWQuickUpTab = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWQuickUpTab:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mwquickuptab()));
        if (input->ExpectTag(274)) goto parse_MWQuickUpTab;
        if (input->ExpectTag(282)) goto parse_GlobalMapConfig;
        break;
      }
      
      // repeated .PBGlobalMapConfig GlobalMapConfig = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GlobalMapConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_globalmapconfig()));
        if (input->ExpectTag(282)) goto parse_GlobalMapConfig;
        if (input->ExpectTag(290)) goto parse_OffLineExpConfig;
        break;
      }
      
      // repeated .PBOffLineExpConfig OffLineExpConfig = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OffLineExpConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_offlineexpconfig()));
        if (input->ExpectTag(290)) goto parse_OffLineExpConfig;
        if (input->ExpectTag(298)) goto parse_RepeFameTable;
        break;
      }
      
      // repeated .PBRepeFameTable RepeFameTable = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RepeFameTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_repefametable()));
        if (input->ExpectTag(298)) goto parse_RepeFameTable;
        if (input->ExpectTag(306)) goto parse_CastingSpiritTable;
        break;
      }
      
      // repeated .PBCastingSpiritTable CastingSpiritTable = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CastingSpiritTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_castingspirittable()));
        if (input->ExpectTag(306)) goto parse_CastingSpiritTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBConfigTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBConfigTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBBeginner Beginner = 1;
  for (int i = 0; i < this->beginner_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->beginner(i), output);
  }
  
  // repeated .PBData Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->data(i), output);
  }
  
  // repeated .PBDiploidTable Diploid = 3;
  for (int i = 0; i < this->diploid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->diploid(i), output);
  }
  
  // repeated .PBDropLevel DropLevel = 4;
  for (int i = 0; i < this->droplevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->droplevel(i), output);
  }
  
  // repeated .PBDropTable DropTable = 5;
  for (int i = 0; i < this->droptable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->droptable(i), output);
  }
  
  // repeated .PBRedStoneExpTable RedStoneTable = 6;
  for (int i = 0; i < this->redstonetable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->redstonetable(i), output);
  }
  
  // repeated .PBReliveTable ReliveTable = 7;
  for (int i = 0; i < this->relivetable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->relivetable(i), output);
  }
  
  // repeated .PBSellTable SellTable = 8;
  for (int i = 0; i < this->selltable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->selltable(i), output);
  }
  
  // repeated .PBTeleTable TeleTable = 9;
  for (int i = 0; i < this->teletable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->teletable(i), output);
  }
  
  // repeated .PBAddPKTable AddPkTable = 10;
  for (int i = 0; i < this->addpktable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->addpktable(i), output);
  }
  
  // repeated .PBOfficialTable OfficialTable = 11;
  for (int i = 0; i < this->officialtable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->officialtable(i), output);
  }
  
  // repeated .PBOgreTran OgreTran = 12;
  for (int i = 0; i < this->ogretran_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->ogretran(i), output);
  }
  
  // repeated .PBTplMagicWeaponProIncTable MagicWeaponProTable = 13;
  for (int i = 0; i < this->magicweaponprotable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->magicweaponprotable(i), output);
  }
  
  // repeated .PBBindChargeTable BindChargeTabel = 14;
  for (int i = 0; i < this->bindchargetabel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(14, this->bindchargetabel(i), output);
  }
  
  // repeated .PBPKValueTable PKTable = 15;
  for (int i = 0; i < this->pktable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->pktable(i), output);
  }
  
  // repeated .PBMagicWeaponSkillBoxProTable MagicWeaponSkillBox = 16;
  for (int i = 0; i < this->magicweaponskillbox_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->magicweaponskillbox(i), output);
  }
  
  // repeated .PBEquipExchangeTable EquipExchange = 17;
  for (int i = 0; i < this->equipexchange_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->equipexchange(i), output);
  }
  
  // repeated .PBMapTable MapTable = 18;
  for (int i = 0; i < this->maptable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->maptable(i), output);
  }
  
  // repeated .PBMultiAttackTable MultiAttackTable = 19;
  for (int i = 0; i < this->multiattacktable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->multiattacktable(i), output);
  }
  
  // repeated .PBMatrixTable MatrixTable = 20;
  for (int i = 0; i < this->matrixtable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->matrixtable(i), output);
  }
  
  // repeated .PBTemplateMarriageConfig MarriageConfig = 21;
  for (int i = 0; i < this->marriageconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->marriageconfig(i), output);
  }
  
  // repeated .PBProGressConfig ProgressConfig = 22;
  for (int i = 0; i < this->progressconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->progressconfig(i), output);
  }
  
  // repeated .PBCountTable CountTable = 23;
  for (int i = 0; i < this->counttable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->counttable(i), output);
  }
  
  // repeated .PBActivityConfig ActivityConfig = 24;
  for (int i = 0; i < this->activityconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->activityconfig(i), output);
  }
  
  // repeated .PBDirectTable DirectTable = 25;
  for (int i = 0; i < this->directtable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->directtable(i), output);
  }
  
  // repeated .PBWorldBattleConfig BattleConfig = 26;
  for (int i = 0; i < this->battleconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->battleconfig(i), output);
  }
  
  // repeated .PBLevelMoneyLmt MoneyLmt = 27;
  for (int i = 0; i < this->moneylmt_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->moneylmt(i), output);
  }
  
  // repeated .PBHandinTable HandinTable = 28;
  for (int i = 0; i < this->handintable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(28, this->handintable(i), output);
  }
  
  // repeated .PBHandinEncourage HandinEncourage = 29;
  for (int i = 0; i < this->handinencourage_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(29, this->handinencourage(i), output);
  }
  
  // repeated .PBItemChangeCamp changeCamp = 30;
  for (int i = 0; i < this->changecamp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(30, this->changecamp(i), output);
  }
  
  // repeated .PBAccuseConfig AccuseConfig = 31;
  for (int i = 0; i < this->accuseconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(31, this->accuseconfig(i), output);
  }
  
  // repeated .PBComRuneConfig ComRuneConfig = 32;
  for (int i = 0; i < this->comruneconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(32, this->comruneconfig(i), output);
  }
  
  // repeated .PBMagicWeaponDecomposeTable MWDecomposTab = 33;
  for (int i = 0; i < this->mwdecompostab_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(33, this->mwdecompostab(i), output);
  }
  
  // repeated .PBMagicWeaponQuickUpTable MWQuickUpTab = 34;
  for (int i = 0; i < this->mwquickuptab_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(34, this->mwquickuptab(i), output);
  }
  
  // repeated .PBGlobalMapConfig GlobalMapConfig = 35;
  for (int i = 0; i < this->globalmapconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(35, this->globalmapconfig(i), output);
  }
  
  // repeated .PBOffLineExpConfig OffLineExpConfig = 36;
  for (int i = 0; i < this->offlineexpconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(36, this->offlineexpconfig(i), output);
  }
  
  // repeated .PBRepeFameTable RepeFameTable = 37;
  for (int i = 0; i < this->repefametable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(37, this->repefametable(i), output);
  }
  
  // repeated .PBCastingSpiritTable CastingSpiritTable = 38;
  for (int i = 0; i < this->castingspirittable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(38, this->castingspirittable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBConfigTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBeginner Beginner = 1;
  for (int i = 0; i < this->beginner_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->beginner(i), target);
  }
  
  // repeated .PBData Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->data(i), target);
  }
  
  // repeated .PBDiploidTable Diploid = 3;
  for (int i = 0; i < this->diploid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->diploid(i), target);
  }
  
  // repeated .PBDropLevel DropLevel = 4;
  for (int i = 0; i < this->droplevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->droplevel(i), target);
  }
  
  // repeated .PBDropTable DropTable = 5;
  for (int i = 0; i < this->droptable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->droptable(i), target);
  }
  
  // repeated .PBRedStoneExpTable RedStoneTable = 6;
  for (int i = 0; i < this->redstonetable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->redstonetable(i), target);
  }
  
  // repeated .PBReliveTable ReliveTable = 7;
  for (int i = 0; i < this->relivetable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->relivetable(i), target);
  }
  
  // repeated .PBSellTable SellTable = 8;
  for (int i = 0; i < this->selltable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->selltable(i), target);
  }
  
  // repeated .PBTeleTable TeleTable = 9;
  for (int i = 0; i < this->teletable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->teletable(i), target);
  }
  
  // repeated .PBAddPKTable AddPkTable = 10;
  for (int i = 0; i < this->addpktable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->addpktable(i), target);
  }
  
  // repeated .PBOfficialTable OfficialTable = 11;
  for (int i = 0; i < this->officialtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->officialtable(i), target);
  }
  
  // repeated .PBOgreTran OgreTran = 12;
  for (int i = 0; i < this->ogretran_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->ogretran(i), target);
  }
  
  // repeated .PBTplMagicWeaponProIncTable MagicWeaponProTable = 13;
  for (int i = 0; i < this->magicweaponprotable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->magicweaponprotable(i), target);
  }
  
  // repeated .PBBindChargeTable BindChargeTabel = 14;
  for (int i = 0; i < this->bindchargetabel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(14, this->bindchargetabel(i), target);
  }
  
  // repeated .PBPKValueTable PKTable = 15;
  for (int i = 0; i < this->pktable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->pktable(i), target);
  }
  
  // repeated .PBMagicWeaponSkillBoxProTable MagicWeaponSkillBox = 16;
  for (int i = 0; i < this->magicweaponskillbox_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->magicweaponskillbox(i), target);
  }
  
  // repeated .PBEquipExchangeTable EquipExchange = 17;
  for (int i = 0; i < this->equipexchange_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->equipexchange(i), target);
  }
  
  // repeated .PBMapTable MapTable = 18;
  for (int i = 0; i < this->maptable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->maptable(i), target);
  }
  
  // repeated .PBMultiAttackTable MultiAttackTable = 19;
  for (int i = 0; i < this->multiattacktable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->multiattacktable(i), target);
  }
  
  // repeated .PBMatrixTable MatrixTable = 20;
  for (int i = 0; i < this->matrixtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->matrixtable(i), target);
  }
  
  // repeated .PBTemplateMarriageConfig MarriageConfig = 21;
  for (int i = 0; i < this->marriageconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->marriageconfig(i), target);
  }
  
  // repeated .PBProGressConfig ProgressConfig = 22;
  for (int i = 0; i < this->progressconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->progressconfig(i), target);
  }
  
  // repeated .PBCountTable CountTable = 23;
  for (int i = 0; i < this->counttable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->counttable(i), target);
  }
  
  // repeated .PBActivityConfig ActivityConfig = 24;
  for (int i = 0; i < this->activityconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->activityconfig(i), target);
  }
  
  // repeated .PBDirectTable DirectTable = 25;
  for (int i = 0; i < this->directtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->directtable(i), target);
  }
  
  // repeated .PBWorldBattleConfig BattleConfig = 26;
  for (int i = 0; i < this->battleconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->battleconfig(i), target);
  }
  
  // repeated .PBLevelMoneyLmt MoneyLmt = 27;
  for (int i = 0; i < this->moneylmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->moneylmt(i), target);
  }
  
  // repeated .PBHandinTable HandinTable = 28;
  for (int i = 0; i < this->handintable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(28, this->handintable(i), target);
  }
  
  // repeated .PBHandinEncourage HandinEncourage = 29;
  for (int i = 0; i < this->handinencourage_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(29, this->handinencourage(i), target);
  }
  
  // repeated .PBItemChangeCamp changeCamp = 30;
  for (int i = 0; i < this->changecamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(30, this->changecamp(i), target);
  }
  
  // repeated .PBAccuseConfig AccuseConfig = 31;
  for (int i = 0; i < this->accuseconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(31, this->accuseconfig(i), target);
  }
  
  // repeated .PBComRuneConfig ComRuneConfig = 32;
  for (int i = 0; i < this->comruneconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(32, this->comruneconfig(i), target);
  }
  
  // repeated .PBMagicWeaponDecomposeTable MWDecomposTab = 33;
  for (int i = 0; i < this->mwdecompostab_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(33, this->mwdecompostab(i), target);
  }
  
  // repeated .PBMagicWeaponQuickUpTable MWQuickUpTab = 34;
  for (int i = 0; i < this->mwquickuptab_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(34, this->mwquickuptab(i), target);
  }
  
  // repeated .PBGlobalMapConfig GlobalMapConfig = 35;
  for (int i = 0; i < this->globalmapconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(35, this->globalmapconfig(i), target);
  }
  
  // repeated .PBOffLineExpConfig OffLineExpConfig = 36;
  for (int i = 0; i < this->offlineexpconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(36, this->offlineexpconfig(i), target);
  }
  
  // repeated .PBRepeFameTable RepeFameTable = 37;
  for (int i = 0; i < this->repefametable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(37, this->repefametable(i), target);
  }
  
  // repeated .PBCastingSpiritTable CastingSpiritTable = 38;
  for (int i = 0; i < this->castingspirittable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(38, this->castingspirittable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBConfigTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBBeginner Beginner = 1;
  total_size += 1 * this->beginner_size();
  for (int i = 0; i < this->beginner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->beginner(i));
  }
  
  // repeated .PBData Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->data(i));
  }
  
  // repeated .PBDiploidTable Diploid = 3;
  total_size += 1 * this->diploid_size();
  for (int i = 0; i < this->diploid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->diploid(i));
  }
  
  // repeated .PBDropLevel DropLevel = 4;
  total_size += 1 * this->droplevel_size();
  for (int i = 0; i < this->droplevel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->droplevel(i));
  }
  
  // repeated .PBDropTable DropTable = 5;
  total_size += 1 * this->droptable_size();
  for (int i = 0; i < this->droptable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->droptable(i));
  }
  
  // repeated .PBRedStoneExpTable RedStoneTable = 6;
  total_size += 1 * this->redstonetable_size();
  for (int i = 0; i < this->redstonetable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->redstonetable(i));
  }
  
  // repeated .PBReliveTable ReliveTable = 7;
  total_size += 1 * this->relivetable_size();
  for (int i = 0; i < this->relivetable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->relivetable(i));
  }
  
  // repeated .PBSellTable SellTable = 8;
  total_size += 1 * this->selltable_size();
  for (int i = 0; i < this->selltable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->selltable(i));
  }
  
  // repeated .PBTeleTable TeleTable = 9;
  total_size += 1 * this->teletable_size();
  for (int i = 0; i < this->teletable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->teletable(i));
  }
  
  // repeated .PBAddPKTable AddPkTable = 10;
  total_size += 1 * this->addpktable_size();
  for (int i = 0; i < this->addpktable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->addpktable(i));
  }
  
  // repeated .PBOfficialTable OfficialTable = 11;
  total_size += 1 * this->officialtable_size();
  for (int i = 0; i < this->officialtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->officialtable(i));
  }
  
  // repeated .PBOgreTran OgreTran = 12;
  total_size += 1 * this->ogretran_size();
  for (int i = 0; i < this->ogretran_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ogretran(i));
  }
  
  // repeated .PBTplMagicWeaponProIncTable MagicWeaponProTable = 13;
  total_size += 1 * this->magicweaponprotable_size();
  for (int i = 0; i < this->magicweaponprotable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->magicweaponprotable(i));
  }
  
  // repeated .PBBindChargeTable BindChargeTabel = 14;
  total_size += 1 * this->bindchargetabel_size();
  for (int i = 0; i < this->bindchargetabel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bindchargetabel(i));
  }
  
  // repeated .PBPKValueTable PKTable = 15;
  total_size += 1 * this->pktable_size();
  for (int i = 0; i < this->pktable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->pktable(i));
  }
  
  // repeated .PBMagicWeaponSkillBoxProTable MagicWeaponSkillBox = 16;
  total_size += 2 * this->magicweaponskillbox_size();
  for (int i = 0; i < this->magicweaponskillbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->magicweaponskillbox(i));
  }
  
  // repeated .PBEquipExchangeTable EquipExchange = 17;
  total_size += 2 * this->equipexchange_size();
  for (int i = 0; i < this->equipexchange_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equipexchange(i));
  }
  
  // repeated .PBMapTable MapTable = 18;
  total_size += 2 * this->maptable_size();
  for (int i = 0; i < this->maptable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->maptable(i));
  }
  
  // repeated .PBMultiAttackTable MultiAttackTable = 19;
  total_size += 2 * this->multiattacktable_size();
  for (int i = 0; i < this->multiattacktable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->multiattacktable(i));
  }
  
  // repeated .PBMatrixTable MatrixTable = 20;
  total_size += 2 * this->matrixtable_size();
  for (int i = 0; i < this->matrixtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->matrixtable(i));
  }
  
  // repeated .PBTemplateMarriageConfig MarriageConfig = 21;
  total_size += 2 * this->marriageconfig_size();
  for (int i = 0; i < this->marriageconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->marriageconfig(i));
  }
  
  // repeated .PBProGressConfig ProgressConfig = 22;
  total_size += 2 * this->progressconfig_size();
  for (int i = 0; i < this->progressconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->progressconfig(i));
  }
  
  // repeated .PBCountTable CountTable = 23;
  total_size += 2 * this->counttable_size();
  for (int i = 0; i < this->counttable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->counttable(i));
  }
  
  // repeated .PBActivityConfig ActivityConfig = 24;
  total_size += 2 * this->activityconfig_size();
  for (int i = 0; i < this->activityconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activityconfig(i));
  }
  
  // repeated .PBDirectTable DirectTable = 25;
  total_size += 2 * this->directtable_size();
  for (int i = 0; i < this->directtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->directtable(i));
  }
  
  // repeated .PBWorldBattleConfig BattleConfig = 26;
  total_size += 2 * this->battleconfig_size();
  for (int i = 0; i < this->battleconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->battleconfig(i));
  }
  
  // repeated .PBLevelMoneyLmt MoneyLmt = 27;
  total_size += 2 * this->moneylmt_size();
  for (int i = 0; i < this->moneylmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->moneylmt(i));
  }
  
  // repeated .PBHandinTable HandinTable = 28;
  total_size += 2 * this->handintable_size();
  for (int i = 0; i < this->handintable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->handintable(i));
  }
  
  // repeated .PBHandinEncourage HandinEncourage = 29;
  total_size += 2 * this->handinencourage_size();
  for (int i = 0; i < this->handinencourage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->handinencourage(i));
  }
  
  // repeated .PBItemChangeCamp changeCamp = 30;
  total_size += 2 * this->changecamp_size();
  for (int i = 0; i < this->changecamp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->changecamp(i));
  }
  
  // repeated .PBAccuseConfig AccuseConfig = 31;
  total_size += 2 * this->accuseconfig_size();
  for (int i = 0; i < this->accuseconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->accuseconfig(i));
  }
  
  // repeated .PBComRuneConfig ComRuneConfig = 32;
  total_size += 2 * this->comruneconfig_size();
  for (int i = 0; i < this->comruneconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->comruneconfig(i));
  }
  
  // repeated .PBMagicWeaponDecomposeTable MWDecomposTab = 33;
  total_size += 2 * this->mwdecompostab_size();
  for (int i = 0; i < this->mwdecompostab_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mwdecompostab(i));
  }
  
  // repeated .PBMagicWeaponQuickUpTable MWQuickUpTab = 34;
  total_size += 2 * this->mwquickuptab_size();
  for (int i = 0; i < this->mwquickuptab_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mwquickuptab(i));
  }
  
  // repeated .PBGlobalMapConfig GlobalMapConfig = 35;
  total_size += 2 * this->globalmapconfig_size();
  for (int i = 0; i < this->globalmapconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->globalmapconfig(i));
  }
  
  // repeated .PBOffLineExpConfig OffLineExpConfig = 36;
  total_size += 2 * this->offlineexpconfig_size();
  for (int i = 0; i < this->offlineexpconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->offlineexpconfig(i));
  }
  
  // repeated .PBRepeFameTable RepeFameTable = 37;
  total_size += 2 * this->repefametable_size();
  for (int i = 0; i < this->repefametable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->repefametable(i));
  }
  
  // repeated .PBCastingSpiritTable CastingSpiritTable = 38;
  total_size += 2 * this->castingspirittable_size();
  for (int i = 0; i < this->castingspirittable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->castingspirittable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBConfigTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBConfigTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBConfigTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBConfigTable::MergeFrom(const PBConfigTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  beginner_.MergeFrom(from.beginner_);
  data_.MergeFrom(from.data_);
  diploid_.MergeFrom(from.diploid_);
  droplevel_.MergeFrom(from.droplevel_);
  droptable_.MergeFrom(from.droptable_);
  redstonetable_.MergeFrom(from.redstonetable_);
  relivetable_.MergeFrom(from.relivetable_);
  selltable_.MergeFrom(from.selltable_);
  teletable_.MergeFrom(from.teletable_);
  addpktable_.MergeFrom(from.addpktable_);
  officialtable_.MergeFrom(from.officialtable_);
  ogretran_.MergeFrom(from.ogretran_);
  magicweaponprotable_.MergeFrom(from.magicweaponprotable_);
  bindchargetabel_.MergeFrom(from.bindchargetabel_);
  pktable_.MergeFrom(from.pktable_);
  magicweaponskillbox_.MergeFrom(from.magicweaponskillbox_);
  equipexchange_.MergeFrom(from.equipexchange_);
  maptable_.MergeFrom(from.maptable_);
  multiattacktable_.MergeFrom(from.multiattacktable_);
  matrixtable_.MergeFrom(from.matrixtable_);
  marriageconfig_.MergeFrom(from.marriageconfig_);
  progressconfig_.MergeFrom(from.progressconfig_);
  counttable_.MergeFrom(from.counttable_);
  activityconfig_.MergeFrom(from.activityconfig_);
  directtable_.MergeFrom(from.directtable_);
  battleconfig_.MergeFrom(from.battleconfig_);
  moneylmt_.MergeFrom(from.moneylmt_);
  handintable_.MergeFrom(from.handintable_);
  handinencourage_.MergeFrom(from.handinencourage_);
  changecamp_.MergeFrom(from.changecamp_);
  accuseconfig_.MergeFrom(from.accuseconfig_);
  comruneconfig_.MergeFrom(from.comruneconfig_);
  mwdecompostab_.MergeFrom(from.mwdecompostab_);
  mwquickuptab_.MergeFrom(from.mwquickuptab_);
  globalmapconfig_.MergeFrom(from.globalmapconfig_);
  offlineexpconfig_.MergeFrom(from.offlineexpconfig_);
  repefametable_.MergeFrom(from.repefametable_);
  castingspirittable_.MergeFrom(from.castingspirittable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBConfigTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConfigTable::CopyFrom(const PBConfigTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConfigTable::Swap(PBConfigTable* other) {
  if (other != this) {
    beginner_.Swap(&other->beginner_);
    data_.Swap(&other->data_);
    diploid_.Swap(&other->diploid_);
    droplevel_.Swap(&other->droplevel_);
    droptable_.Swap(&other->droptable_);
    redstonetable_.Swap(&other->redstonetable_);
    relivetable_.Swap(&other->relivetable_);
    selltable_.Swap(&other->selltable_);
    teletable_.Swap(&other->teletable_);
    addpktable_.Swap(&other->addpktable_);
    officialtable_.Swap(&other->officialtable_);
    ogretran_.Swap(&other->ogretran_);
    magicweaponprotable_.Swap(&other->magicweaponprotable_);
    bindchargetabel_.Swap(&other->bindchargetabel_);
    pktable_.Swap(&other->pktable_);
    magicweaponskillbox_.Swap(&other->magicweaponskillbox_);
    equipexchange_.Swap(&other->equipexchange_);
    maptable_.Swap(&other->maptable_);
    multiattacktable_.Swap(&other->multiattacktable_);
    matrixtable_.Swap(&other->matrixtable_);
    marriageconfig_.Swap(&other->marriageconfig_);
    progressconfig_.Swap(&other->progressconfig_);
    counttable_.Swap(&other->counttable_);
    activityconfig_.Swap(&other->activityconfig_);
    directtable_.Swap(&other->directtable_);
    battleconfig_.Swap(&other->battleconfig_);
    moneylmt_.Swap(&other->moneylmt_);
    handintable_.Swap(&other->handintable_);
    handinencourage_.Swap(&other->handinencourage_);
    changecamp_.Swap(&other->changecamp_);
    accuseconfig_.Swap(&other->accuseconfig_);
    comruneconfig_.Swap(&other->comruneconfig_);
    mwdecompostab_.Swap(&other->mwdecompostab_);
    mwquickuptab_.Swap(&other->mwquickuptab_);
    globalmapconfig_.Swap(&other->globalmapconfig_);
    offlineexpconfig_.Swap(&other->offlineexpconfig_);
    repefametable_.Swap(&other->repefametable_);
    castingspirittable_.Swap(&other->castingspirittable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBConfigTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBConfigTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBConfigTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBConfigTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillSet::kAureoleSkillFieldNumber;
const int PBSkillSet::kBuffFieldNumber;
const int PBSkillSet::kNormalSkillFieldNumber;
const int PBSkillSet::kSkillFieldNumber;
const int PBSkillSet::kSkillTreeFieldNumber;
const int PBSkillSet::kSkillTreeNodeFieldNumber;
const int PBSkillSet::kTrapSkillFieldNumber;
const int PBSkillSet::kMultiBuffFieldNumber;
const int PBSkillSet::kFangCunTreeFieldNumber;
const int PBSkillSet::kFangCunNodeFieldNumber;
#endif  // !_MSC_VER

PBSkillSet::PBSkillSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillSet::InitAsDefaultInstance() {}

PBSkillSet::PBSkillSet(const PBSkillSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillSet::~PBSkillSet() {
  SharedDtor();
}

void PBSkillSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillSet_descriptor_;
}

const PBSkillSet& PBSkillSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkillSet* PBSkillSet::default_instance_ = NULL;

PBSkillSet* PBSkillSet::New() const {
  return new PBSkillSet;
}

void PBSkillSet::Clear() {
  aureoleskill_.Clear();
  buff_.Clear();
  normalskill_.Clear();
  skill_.Clear();
  skilltree_.Clear();
  skilltreenode_.Clear();
  trapskill_.Clear();
  multibuff_.Clear();
  fangcuntree_.Clear();
  fangcunnode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBAureoleSkill AureoleSkill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AureoleSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_aureoleskill()));
        if (input->ExpectTag(10)) goto parse_AureoleSkill;
        if (input->ExpectTag(18)) goto parse_Buff;
        break;
      }
      
      // repeated .PBBuff Buff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Buff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_buff()));
        if (input->ExpectTag(18)) goto parse_Buff;
        if (input->ExpectTag(26)) goto parse_NormalSkill;
        break;
      }
      
      // repeated .PBNormalSkill NormalSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_NormalSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_normalskill()));
        if (input->ExpectTag(26)) goto parse_NormalSkill;
        if (input->ExpectTag(34)) goto parse_Skill;
        break;
      }
      
      // repeated .PBSkill Skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Skill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skill()));
        if (input->ExpectTag(34)) goto parse_Skill;
        if (input->ExpectTag(42)) goto parse_SkillTree;
        break;
      }
      
      // repeated .PBSkillTree SkillTree = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillTree:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skilltree()));
        if (input->ExpectTag(42)) goto parse_SkillTree;
        if (input->ExpectTag(50)) goto parse_SkillTreeNode;
        break;
      }
      
      // repeated .PBSkillTreeNode SkillTreeNode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillTreeNode:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skilltreenode()));
        if (input->ExpectTag(50)) goto parse_SkillTreeNode;
        if (input->ExpectTag(58)) goto parse_TrapSkill;
        break;
      }
      
      // repeated .PBTrapSkill TrapSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TrapSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_trapskill()));
        if (input->ExpectTag(58)) goto parse_TrapSkill;
        if (input->ExpectTag(66)) goto parse_MultiBuff;
        break;
      }
      
      // repeated .PBMultiBuff MultiBuff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MultiBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_multibuff()));
        if (input->ExpectTag(66)) goto parse_MultiBuff;
        if (input->ExpectTag(74)) goto parse_FangCunTree;
        break;
      }
      
      // repeated .PBFangCunTree FangCunTree = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FangCunTree:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_fangcuntree()));
        if (input->ExpectTag(74)) goto parse_FangCunTree;
        if (input->ExpectTag(82)) goto parse_FangCunNode;
        break;
      }
      
      // repeated .PBFangCunTreeNode FangCunNode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FangCunNode:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_fangcunnode()));
        if (input->ExpectTag(82)) goto parse_FangCunNode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillSet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBAureoleSkill AureoleSkill = 1;
  for (int i = 0; i < this->aureoleskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->aureoleskill(i), output);
  }
  
  // repeated .PBBuff Buff = 2;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buff(i), output);
  }
  
  // repeated .PBNormalSkill NormalSkill = 3;
  for (int i = 0; i < this->normalskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->normalskill(i), output);
  }
  
  // repeated .PBSkill Skill = 4;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->skill(i), output);
  }
  
  // repeated .PBSkillTree SkillTree = 5;
  for (int i = 0; i < this->skilltree_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->skilltree(i), output);
  }
  
  // repeated .PBSkillTreeNode SkillTreeNode = 6;
  for (int i = 0; i < this->skilltreenode_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->skilltreenode(i), output);
  }
  
  // repeated .PBTrapSkill TrapSkill = 7;
  for (int i = 0; i < this->trapskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->trapskill(i), output);
  }
  
  // repeated .PBMultiBuff MultiBuff = 8;
  for (int i = 0; i < this->multibuff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->multibuff(i), output);
  }
  
  // repeated .PBFangCunTree FangCunTree = 9;
  for (int i = 0; i < this->fangcuntree_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->fangcuntree(i), output);
  }
  
  // repeated .PBFangCunTreeNode FangCunNode = 10;
  for (int i = 0; i < this->fangcunnode_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->fangcunnode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBAureoleSkill AureoleSkill = 1;
  for (int i = 0; i < this->aureoleskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->aureoleskill(i), target);
  }
  
  // repeated .PBBuff Buff = 2;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buff(i), target);
  }
  
  // repeated .PBNormalSkill NormalSkill = 3;
  for (int i = 0; i < this->normalskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->normalskill(i), target);
  }
  
  // repeated .PBSkill Skill = 4;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->skill(i), target);
  }
  
  // repeated .PBSkillTree SkillTree = 5;
  for (int i = 0; i < this->skilltree_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->skilltree(i), target);
  }
  
  // repeated .PBSkillTreeNode SkillTreeNode = 6;
  for (int i = 0; i < this->skilltreenode_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->skilltreenode(i), target);
  }
  
  // repeated .PBTrapSkill TrapSkill = 7;
  for (int i = 0; i < this->trapskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->trapskill(i), target);
  }
  
  // repeated .PBMultiBuff MultiBuff = 8;
  for (int i = 0; i < this->multibuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->multibuff(i), target);
  }
  
  // repeated .PBFangCunTree FangCunTree = 9;
  for (int i = 0; i < this->fangcuntree_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->fangcuntree(i), target);
  }
  
  // repeated .PBFangCunTreeNode FangCunNode = 10;
  for (int i = 0; i < this->fangcunnode_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->fangcunnode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillSet::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBAureoleSkill AureoleSkill = 1;
  total_size += 1 * this->aureoleskill_size();
  for (int i = 0; i < this->aureoleskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->aureoleskill(i));
  }
  
  // repeated .PBBuff Buff = 2;
  total_size += 1 * this->buff_size();
  for (int i = 0; i < this->buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->buff(i));
  }
  
  // repeated .PBNormalSkill NormalSkill = 3;
  total_size += 1 * this->normalskill_size();
  for (int i = 0; i < this->normalskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->normalskill(i));
  }
  
  // repeated .PBSkill Skill = 4;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  // repeated .PBSkillTree SkillTree = 5;
  total_size += 1 * this->skilltree_size();
  for (int i = 0; i < this->skilltree_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skilltree(i));
  }
  
  // repeated .PBSkillTreeNode SkillTreeNode = 6;
  total_size += 1 * this->skilltreenode_size();
  for (int i = 0; i < this->skilltreenode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skilltreenode(i));
  }
  
  // repeated .PBTrapSkill TrapSkill = 7;
  total_size += 1 * this->trapskill_size();
  for (int i = 0; i < this->trapskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->trapskill(i));
  }
  
  // repeated .PBMultiBuff MultiBuff = 8;
  total_size += 1 * this->multibuff_size();
  for (int i = 0; i < this->multibuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->multibuff(i));
  }
  
  // repeated .PBFangCunTree FangCunTree = 9;
  total_size += 1 * this->fangcuntree_size();
  for (int i = 0; i < this->fangcuntree_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->fangcuntree(i));
  }
  
  // repeated .PBFangCunTreeNode FangCunNode = 10;
  total_size += 1 * this->fangcunnode_size();
  for (int i = 0; i < this->fangcunnode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->fangcunnode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillSet::MergeFrom(const PBSkillSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  aureoleskill_.MergeFrom(from.aureoleskill_);
  buff_.MergeFrom(from.buff_);
  normalskill_.MergeFrom(from.normalskill_);
  skill_.MergeFrom(from.skill_);
  skilltree_.MergeFrom(from.skilltree_);
  skilltreenode_.MergeFrom(from.skilltreenode_);
  trapskill_.MergeFrom(from.trapskill_);
  multibuff_.MergeFrom(from.multibuff_);
  fangcuntree_.MergeFrom(from.fangcuntree_);
  fangcunnode_.MergeFrom(from.fangcunnode_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillSet::CopyFrom(const PBSkillSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillSet::Swap(PBSkillSet* other) {
  if (other != this) {
    aureoleskill_.Swap(&other->aureoleskill_);
    buff_.Swap(&other->buff_);
    normalskill_.Swap(&other->normalskill_);
    skill_.Swap(&other->skill_);
    skilltree_.Swap(&other->skilltree_);
    skilltreenode_.Swap(&other->skilltreenode_);
    trapskill_.Swap(&other->trapskill_);
    multibuff_.Swap(&other->multibuff_);
    fangcuntree_.Swap(&other->fangcuntree_);
    fangcunnode_.Swap(&other->fangcunnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillSet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillSet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillSet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillSet_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEquipSet::kEquipArmorFieldNumber;
const int PBEquipSet::kEquipFashionFieldNumber;
const int PBEquipSet::kEquipmentFieldNumber;
const int PBEquipSet::kEquipUpgFieldNumber;
const int PBEquipSet::kWeaponFieldNumber;
const int PBEquipSet::kOpenSlotFieldNumber;
const int PBEquipSet::kProduceEquipFieldNumber;
const int PBEquipSet::kProduceExpFieldNumber;
const int PBEquipSet::kProducePhysicFieldNumber;
const int PBEquipSet::kSpellFieldNumber;
const int PBEquipSet::kSuitNormalFieldNumber;
const int PBEquipSet::kSuitProducerFieldNumber;
const int PBEquipSet::kMultiComposeFieldNumber;
const int PBEquipSet::kComposeFieldNumber;
const int PBEquipSet::kDecompoundFieldNumber;
const int PBEquipSet::kLightTableFieldNumber;
const int PBEquipSet::kMWJudgeEffFieldNumber;
const int PBEquipSet::kMWJudgeSpirFieldNumber;
const int PBEquipSet::kMWQuotietyFieldNumber;
#endif  // !_MSC_VER

PBEquipSet::PBEquipSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipSet::InitAsDefaultInstance() {}

PBEquipSet::PBEquipSet(const PBEquipSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipSet::~PBEquipSet() {
  SharedDtor();
}

void PBEquipSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBEquipSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipSet_descriptor_;
}

const PBEquipSet& PBEquipSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipSet* PBEquipSet::default_instance_ = NULL;

PBEquipSet* PBEquipSet::New() const {
  return new PBEquipSet;
}

void PBEquipSet::Clear() {
  equiparmor_.Clear();
  equipfashion_.Clear();
  equipment_.Clear();
  equipupg_.Clear();
  weapon_.Clear();
  openslot_.Clear();
  produceequip_.Clear();
  produceexp_.Clear();
  producephysic_.Clear();
  spell_.Clear();
  suitnormal_.Clear();
  suitproducer_.Clear();
  multicompose_.Clear();
  compose_.Clear();
  decompound_.Clear();
  lighttable_.Clear();
  mwjudgeeff_.Clear();
  mwjudgespir_.Clear();
  mwquotiety_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBEquipArmor EquipArmor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipArmor:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equiparmor()));
        if (input->ExpectTag(10)) goto parse_EquipArmor;
        if (input->ExpectTag(18)) goto parse_EquipFashion;
        break;
      }
      
      // repeated .PBEquipFashion EquipFashion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipFashion:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equipfashion()));
        if (input->ExpectTag(18)) goto parse_EquipFashion;
        if (input->ExpectTag(26)) goto parse_Equipment;
        break;
      }
      
      // repeated .PBEquipment Equipment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Equipment:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equipment()));
        if (input->ExpectTag(26)) goto parse_Equipment;
        if (input->ExpectTag(34)) goto parse_EquipUpg;
        break;
      }
      
      // repeated .PBEquipUpg EquipUpg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipUpg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equipupg()));
        if (input->ExpectTag(34)) goto parse_EquipUpg;
        if (input->ExpectTag(42)) goto parse_Weapon;
        break;
      }
      
      // repeated .PBEquipWeapon Weapon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Weapon:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_weapon()));
        if (input->ExpectTag(42)) goto parse_Weapon;
        if (input->ExpectTag(50)) goto parse_OpenSlot;
        break;
      }
      
      // repeated .PBOpenSlot OpenSlot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OpenSlot:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_openslot()));
        if (input->ExpectTag(50)) goto parse_OpenSlot;
        if (input->ExpectTag(58)) goto parse_ProduceEquip;
        break;
      }
      
      // repeated .PBProduceEquip ProduceEquip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ProduceEquip:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_produceequip()));
        if (input->ExpectTag(58)) goto parse_ProduceEquip;
        if (input->ExpectTag(66)) goto parse_ProduceExp;
        break;
      }
      
      // repeated .PBProduceExp ProduceExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ProduceExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_produceexp()));
        if (input->ExpectTag(66)) goto parse_ProduceExp;
        if (input->ExpectTag(74)) goto parse_ProducePhysic;
        break;
      }
      
      // repeated .PBProducePhysic ProducePhysic = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ProducePhysic:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_producephysic()));
        if (input->ExpectTag(74)) goto parse_ProducePhysic;
        if (input->ExpectTag(82)) goto parse_Spell;
        break;
      }
      
      // repeated .PBSpell Spell = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Spell:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_spell()));
        if (input->ExpectTag(82)) goto parse_Spell;
        if (input->ExpectTag(90)) goto parse_SuitNormal;
        break;
      }
      
      // repeated .PBSuitNormal SuitNormal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SuitNormal:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_suitnormal()));
        if (input->ExpectTag(90)) goto parse_SuitNormal;
        if (input->ExpectTag(98)) goto parse_SuitProducer;
        break;
      }
      
      // repeated .PBSuitProducer SuitProducer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SuitProducer:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_suitproducer()));
        if (input->ExpectTag(98)) goto parse_SuitProducer;
        if (input->ExpectTag(106)) goto parse_MultiCompose;
        break;
      }
      
      // repeated .PBMultiCompose MultiCompose = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MultiCompose:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_multicompose()));
        if (input->ExpectTag(106)) goto parse_MultiCompose;
        if (input->ExpectTag(114)) goto parse_Compose;
        break;
      }
      
      // repeated .PBCompose Compose = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Compose:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_compose()));
        if (input->ExpectTag(114)) goto parse_Compose;
        if (input->ExpectTag(122)) goto parse_Decompound;
        break;
      }
      
      // repeated .PBCTemplateDecompound Decompound = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Decompound:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_decompound()));
        if (input->ExpectTag(122)) goto parse_Decompound;
        if (input->ExpectTag(130)) goto parse_LightTable;
        break;
      }
      
      // repeated .PBLightTable LightTable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LightTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lighttable()));
        if (input->ExpectTag(130)) goto parse_LightTable;
        if (input->ExpectTag(138)) goto parse_MWJudgeEff;
        break;
      }
      
      // repeated .PBMWProJudgeEffTable MWJudgeEff = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWJudgeEff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mwjudgeeff()));
        if (input->ExpectTag(138)) goto parse_MWJudgeEff;
        if (input->ExpectTag(146)) goto parse_MWJudgeSpir;
        break;
      }
      
      // repeated .PBMWProJudgeSpirTable MWJudgeSpir = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWJudgeSpir:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mwjudgespir()));
        if (input->ExpectTag(146)) goto parse_MWJudgeSpir;
        if (input->ExpectTag(154)) goto parse_MWQuotiety;
        break;
      }
      
      // repeated .PBMWLevelQuotietyTab MWQuotiety = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWQuotiety:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mwquotiety()));
        if (input->ExpectTag(154)) goto parse_MWQuotiety;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipSet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBEquipArmor EquipArmor = 1;
  for (int i = 0; i < this->equiparmor_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->equiparmor(i), output);
  }
  
  // repeated .PBEquipFashion EquipFashion = 2;
  for (int i = 0; i < this->equipfashion_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->equipfashion(i), output);
  }
  
  // repeated .PBEquipment Equipment = 3;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->equipment(i), output);
  }
  
  // repeated .PBEquipUpg EquipUpg = 4;
  for (int i = 0; i < this->equipupg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->equipupg(i), output);
  }
  
  // repeated .PBEquipWeapon Weapon = 5;
  for (int i = 0; i < this->weapon_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->weapon(i), output);
  }
  
  // repeated .PBOpenSlot OpenSlot = 6;
  for (int i = 0; i < this->openslot_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->openslot(i), output);
  }
  
  // repeated .PBProduceEquip ProduceEquip = 7;
  for (int i = 0; i < this->produceequip_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->produceequip(i), output);
  }
  
  // repeated .PBProduceExp ProduceExp = 8;
  for (int i = 0; i < this->produceexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->produceexp(i), output);
  }
  
  // repeated .PBProducePhysic ProducePhysic = 9;
  for (int i = 0; i < this->producephysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->producephysic(i), output);
  }
  
  // repeated .PBSpell Spell = 10;
  for (int i = 0; i < this->spell_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->spell(i), output);
  }
  
  // repeated .PBSuitNormal SuitNormal = 11;
  for (int i = 0; i < this->suitnormal_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->suitnormal(i), output);
  }
  
  // repeated .PBSuitProducer SuitProducer = 12;
  for (int i = 0; i < this->suitproducer_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->suitproducer(i), output);
  }
  
  // repeated .PBMultiCompose MultiCompose = 13;
  for (int i = 0; i < this->multicompose_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->multicompose(i), output);
  }
  
  // repeated .PBCompose Compose = 14;
  for (int i = 0; i < this->compose_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(14, this->compose(i), output);
  }
  
  // repeated .PBCTemplateDecompound Decompound = 15;
  for (int i = 0; i < this->decompound_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->decompound(i), output);
  }
  
  // repeated .PBLightTable LightTable = 16;
  for (int i = 0; i < this->lighttable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->lighttable(i), output);
  }
  
  // repeated .PBMWProJudgeEffTable MWJudgeEff = 17;
  for (int i = 0; i < this->mwjudgeeff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->mwjudgeeff(i), output);
  }
  
  // repeated .PBMWProJudgeSpirTable MWJudgeSpir = 18;
  for (int i = 0; i < this->mwjudgespir_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->mwjudgespir(i), output);
  }
  
  // repeated .PBMWLevelQuotietyTab MWQuotiety = 19;
  for (int i = 0; i < this->mwquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->mwquotiety(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBEquipArmor EquipArmor = 1;
  for (int i = 0; i < this->equiparmor_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->equiparmor(i), target);
  }
  
  // repeated .PBEquipFashion EquipFashion = 2;
  for (int i = 0; i < this->equipfashion_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->equipfashion(i), target);
  }
  
  // repeated .PBEquipment Equipment = 3;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->equipment(i), target);
  }
  
  // repeated .PBEquipUpg EquipUpg = 4;
  for (int i = 0; i < this->equipupg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->equipupg(i), target);
  }
  
  // repeated .PBEquipWeapon Weapon = 5;
  for (int i = 0; i < this->weapon_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->weapon(i), target);
  }
  
  // repeated .PBOpenSlot OpenSlot = 6;
  for (int i = 0; i < this->openslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->openslot(i), target);
  }
  
  // repeated .PBProduceEquip ProduceEquip = 7;
  for (int i = 0; i < this->produceequip_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->produceequip(i), target);
  }
  
  // repeated .PBProduceExp ProduceExp = 8;
  for (int i = 0; i < this->produceexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->produceexp(i), target);
  }
  
  // repeated .PBProducePhysic ProducePhysic = 9;
  for (int i = 0; i < this->producephysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->producephysic(i), target);
  }
  
  // repeated .PBSpell Spell = 10;
  for (int i = 0; i < this->spell_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->spell(i), target);
  }
  
  // repeated .PBSuitNormal SuitNormal = 11;
  for (int i = 0; i < this->suitnormal_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->suitnormal(i), target);
  }
  
  // repeated .PBSuitProducer SuitProducer = 12;
  for (int i = 0; i < this->suitproducer_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->suitproducer(i), target);
  }
  
  // repeated .PBMultiCompose MultiCompose = 13;
  for (int i = 0; i < this->multicompose_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->multicompose(i), target);
  }
  
  // repeated .PBCompose Compose = 14;
  for (int i = 0; i < this->compose_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(14, this->compose(i), target);
  }
  
  // repeated .PBCTemplateDecompound Decompound = 15;
  for (int i = 0; i < this->decompound_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->decompound(i), target);
  }
  
  // repeated .PBLightTable LightTable = 16;
  for (int i = 0; i < this->lighttable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->lighttable(i), target);
  }
  
  // repeated .PBMWProJudgeEffTable MWJudgeEff = 17;
  for (int i = 0; i < this->mwjudgeeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->mwjudgeeff(i), target);
  }
  
  // repeated .PBMWProJudgeSpirTable MWJudgeSpir = 18;
  for (int i = 0; i < this->mwjudgespir_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->mwjudgespir(i), target);
  }
  
  // repeated .PBMWLevelQuotietyTab MWQuotiety = 19;
  for (int i = 0; i < this->mwquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->mwquotiety(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipSet::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBEquipArmor EquipArmor = 1;
  total_size += 1 * this->equiparmor_size();
  for (int i = 0; i < this->equiparmor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equiparmor(i));
  }
  
  // repeated .PBEquipFashion EquipFashion = 2;
  total_size += 1 * this->equipfashion_size();
  for (int i = 0; i < this->equipfashion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equipfashion(i));
  }
  
  // repeated .PBEquipment Equipment = 3;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  // repeated .PBEquipUpg EquipUpg = 4;
  total_size += 1 * this->equipupg_size();
  for (int i = 0; i < this->equipupg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equipupg(i));
  }
  
  // repeated .PBEquipWeapon Weapon = 5;
  total_size += 1 * this->weapon_size();
  for (int i = 0; i < this->weapon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->weapon(i));
  }
  
  // repeated .PBOpenSlot OpenSlot = 6;
  total_size += 1 * this->openslot_size();
  for (int i = 0; i < this->openslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->openslot(i));
  }
  
  // repeated .PBProduceEquip ProduceEquip = 7;
  total_size += 1 * this->produceequip_size();
  for (int i = 0; i < this->produceequip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->produceequip(i));
  }
  
  // repeated .PBProduceExp ProduceExp = 8;
  total_size += 1 * this->produceexp_size();
  for (int i = 0; i < this->produceexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->produceexp(i));
  }
  
  // repeated .PBProducePhysic ProducePhysic = 9;
  total_size += 1 * this->producephysic_size();
  for (int i = 0; i < this->producephysic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->producephysic(i));
  }
  
  // repeated .PBSpell Spell = 10;
  total_size += 1 * this->spell_size();
  for (int i = 0; i < this->spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->spell(i));
  }
  
  // repeated .PBSuitNormal SuitNormal = 11;
  total_size += 1 * this->suitnormal_size();
  for (int i = 0; i < this->suitnormal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->suitnormal(i));
  }
  
  // repeated .PBSuitProducer SuitProducer = 12;
  total_size += 1 * this->suitproducer_size();
  for (int i = 0; i < this->suitproducer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->suitproducer(i));
  }
  
  // repeated .PBMultiCompose MultiCompose = 13;
  total_size += 1 * this->multicompose_size();
  for (int i = 0; i < this->multicompose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->multicompose(i));
  }
  
  // repeated .PBCompose Compose = 14;
  total_size += 1 * this->compose_size();
  for (int i = 0; i < this->compose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->compose(i));
  }
  
  // repeated .PBCTemplateDecompound Decompound = 15;
  total_size += 1 * this->decompound_size();
  for (int i = 0; i < this->decompound_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->decompound(i));
  }
  
  // repeated .PBLightTable LightTable = 16;
  total_size += 2 * this->lighttable_size();
  for (int i = 0; i < this->lighttable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lighttable(i));
  }
  
  // repeated .PBMWProJudgeEffTable MWJudgeEff = 17;
  total_size += 2 * this->mwjudgeeff_size();
  for (int i = 0; i < this->mwjudgeeff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mwjudgeeff(i));
  }
  
  // repeated .PBMWProJudgeSpirTable MWJudgeSpir = 18;
  total_size += 2 * this->mwjudgespir_size();
  for (int i = 0; i < this->mwjudgespir_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mwjudgespir(i));
  }
  
  // repeated .PBMWLevelQuotietyTab MWQuotiety = 19;
  total_size += 2 * this->mwquotiety_size();
  for (int i = 0; i < this->mwquotiety_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mwquotiety(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipSet::MergeFrom(const PBEquipSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiparmor_.MergeFrom(from.equiparmor_);
  equipfashion_.MergeFrom(from.equipfashion_);
  equipment_.MergeFrom(from.equipment_);
  equipupg_.MergeFrom(from.equipupg_);
  weapon_.MergeFrom(from.weapon_);
  openslot_.MergeFrom(from.openslot_);
  produceequip_.MergeFrom(from.produceequip_);
  produceexp_.MergeFrom(from.produceexp_);
  producephysic_.MergeFrom(from.producephysic_);
  spell_.MergeFrom(from.spell_);
  suitnormal_.MergeFrom(from.suitnormal_);
  suitproducer_.MergeFrom(from.suitproducer_);
  multicompose_.MergeFrom(from.multicompose_);
  compose_.MergeFrom(from.compose_);
  decompound_.MergeFrom(from.decompound_);
  lighttable_.MergeFrom(from.lighttable_);
  mwjudgeeff_.MergeFrom(from.mwjudgeeff_);
  mwjudgespir_.MergeFrom(from.mwjudgespir_);
  mwquotiety_.MergeFrom(from.mwquotiety_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipSet::CopyFrom(const PBEquipSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipSet::Swap(PBEquipSet* other) {
  if (other != this) {
    equiparmor_.Swap(&other->equiparmor_);
    equipfashion_.Swap(&other->equipfashion_);
    equipment_.Swap(&other->equipment_);
    equipupg_.Swap(&other->equipupg_);
    weapon_.Swap(&other->weapon_);
    openslot_.Swap(&other->openslot_);
    produceequip_.Swap(&other->produceequip_);
    produceexp_.Swap(&other->produceexp_);
    producephysic_.Swap(&other->producephysic_);
    spell_.Swap(&other->spell_);
    suitnormal_.Swap(&other->suitnormal_);
    suitproducer_.Swap(&other->suitproducer_);
    multicompose_.Swap(&other->multicompose_);
    compose_.Swap(&other->compose_);
    decompound_.Swap(&other->decompound_);
    lighttable_.Swap(&other->lighttable_);
    mwjudgeeff_.Swap(&other->mwjudgeeff_);
    mwjudgespir_.Swap(&other->mwjudgespir_);
    mwquotiety_.Swap(&other->mwquotiety_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipSet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipSet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipSet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipSet_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplate::kItemSetFieldNumber;
const int PBTemplate::kConfigTableFieldNumber;
const int PBTemplate::kSkillSetFieldNumber;
const int PBTemplate::kEquipSetFieldNumber;
const int PBTemplate::kBattlePetFieldNumber;
const int PBTemplate::kHonorObtainFieldNumber;
const int PBTemplate::kHonorToExpFieldNumber;
const int PBTemplate::kLevelExpFieldNumber;
const int PBTemplate::kLevelProFieldNumber;
const int PBTemplate::kMetierFieldNumber;
const int PBTemplate::kMetierProFieldNumber;
const int PBTemplate::kMineFieldNumber;
const int PBTemplate::kNpcFieldNumber;
const int PBTemplate::kNpcCollectFieldNumber;
const int PBTemplate::kBoxFieldNumber;
const int PBTemplate::kOgrePropertyFieldNumber;
const int PBTemplate::kPetLevelExpFieldNumber;
const int PBTemplate::kQuestionExpFieldNumber;
const int PBTemplate::kShowPetFieldNumber;
const int PBTemplate::kSummonBeastFieldNumber;
const int PBTemplate::kTplPropertyFieldNumber;
const int PBTemplate::kTplProTableFieldNumber;
const int PBTemplate::kTotalDropFieldNumber;
const int PBTemplate::kBlockFieldNumber;
const int PBTemplate::kHierogramFieldNumber;
const int PBTemplate::kTalentFieldNumber;
const int PBTemplate::kBuffImmunityFieldNumber;
const int PBTemplate::kLifeSkillFieldNumber;
const int PBTemplate::kLifeSkillScrollFieldNumber;
const int PBTemplate::kTitleManagerFieldNumber;
const int PBTemplate::kMagicWeaponSkillStorageFieldNumber;
const int PBTemplate::kCDGroupTableFieldNumber;
const int PBTemplate::kApConfigFieldNumber;
const int PBTemplate::kJudgeConfigFieldNumber;
const int PBTemplate::kWizardTableFieldNumber;
const int PBTemplate::kTrendFieldNumber;
const int PBTemplate::kAchieveAwardFieldNumber;
const int PBTemplate::kPowerFieldNumber;
const int PBTemplate::kOfficialFieldNumber;
const int PBTemplate::kConstructExpFieldNumber;
const int PBTemplate::kTalentStageFieldNumber;
const int PBTemplate::kCorpsBOSSFieldNumber;
#endif  // !_MSC_VER

PBTemplate::PBTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplate::InitAsDefaultInstance() {  itemset_ = const_cast< ::PBItemSet*>(&::PBItemSet::default_instance());
  configtable_ = const_cast< ::PBConfigTable*>(&::PBConfigTable::default_instance());
  skillset_ = const_cast< ::PBSkillSet*>(&::PBSkillSet::default_instance());
  equipset_ = const_cast< ::PBEquipSet*>(&::PBEquipSet::default_instance());
}

PBTemplate::PBTemplate(const PBTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplate::SharedCtor() {
  _cached_size_ = 0;
  itemset_ = NULL;
  configtable_ = NULL;
  skillset_ = NULL;
  equipset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplate::~PBTemplate() {
  SharedDtor();
}

void PBTemplate::SharedDtor() {
  if (this != default_instance_) {
    delete itemset_;
    delete configtable_;
    delete skillset_;
    delete equipset_;
  }
}

const ::google::protobuf::Descriptor* PBTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplate_descriptor_;
}

const PBTemplate& PBTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplate* PBTemplate::default_instance_ = NULL;

PBTemplate* PBTemplate::New() const {
  return new PBTemplate;
}

void PBTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itemset_ != NULL) itemset_->::PBItemSet::Clear();
    }
    if (_has_bit(1)) {
      if (configtable_ != NULL) configtable_->::PBConfigTable::Clear();
    }
    if (_has_bit(2)) {
      if (skillset_ != NULL) skillset_->::PBSkillSet::Clear();
    }
    if (_has_bit(3)) {
      if (equipset_ != NULL) equipset_->::PBEquipSet::Clear();
    }
  }
  battlepet_.Clear();
  honorobtain_.Clear();
  honortoexp_.Clear();
  levelexp_.Clear();
  levelpro_.Clear();
  metier_.Clear();
  metierpro_.Clear();
  mine_.Clear();
  npc_.Clear();
  npccollect_.Clear();
  box_.Clear();
  ogreproperty_.Clear();
  petlevelexp_.Clear();
  questionexp_.Clear();
  showpet_.Clear();
  summonbeast_.Clear();
  tplproperty_.Clear();
  tplprotable_.Clear();
  totaldrop_.Clear();
  block_.Clear();
  hierogram_.Clear();
  talent_.Clear();
  buffimmunity_.Clear();
  lifeskill_.Clear();
  lifeskillscroll_.Clear();
  titlemanager_.Clear();
  magicweaponskillstorage_.Clear();
  cdgrouptable_.Clear();
  apconfig_.Clear();
  judgeconfig_.Clear();
  wizardtable_.Clear();
  trend_.Clear();
  achieveaward_.Clear();
  power_.Clear();
  official_.Clear();
  constructexp_.Clear();
  talentstage_.Clear();
  corpsboss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemSet ItemSet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itemset()));
        if (input->ExpectTag(18)) goto parse_ConfigTable;
        break;
      }
      
      // optional .PBConfigTable ConfigTable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ConfigTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_configtable()));
        if (input->ExpectTag(26)) goto parse_SkillSet;
        break;
      }
      
      // optional .PBSkillSet SkillSet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillSet:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skillset()));
        if (input->ExpectTag(34)) goto parse_EquipSet;
        break;
      }
      
      // optional .PBEquipSet EquipSet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipSet:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_equipset()));
        if (input->ExpectTag(42)) goto parse_BattlePet;
        break;
      }
      
      // repeated .PBBattlePet BattlePet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattlePet:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_battlepet()));
        if (input->ExpectTag(42)) goto parse_BattlePet;
        if (input->ExpectTag(50)) goto parse_HonorObtain;
        break;
      }
      
      // repeated .PBHonorObtain HonorObtain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HonorObtain:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_honorobtain()));
        if (input->ExpectTag(50)) goto parse_HonorObtain;
        if (input->ExpectTag(58)) goto parse_HonorToExp;
        break;
      }
      
      // repeated .PBHonorToExp HonorToExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HonorToExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_honortoexp()));
        if (input->ExpectTag(58)) goto parse_HonorToExp;
        if (input->ExpectTag(66)) goto parse_LevelExp;
        break;
      }
      
      // repeated .PBLevelExp LevelExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LevelExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_levelexp()));
        if (input->ExpectTag(66)) goto parse_LevelExp;
        if (input->ExpectTag(74)) goto parse_LevelPro;
        break;
      }
      
      // repeated .PBLevelProperty LevelPro = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LevelPro:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_levelpro()));
        if (input->ExpectTag(74)) goto parse_LevelPro;
        if (input->ExpectTag(82)) goto parse_Metier;
        break;
      }
      
      // repeated .PBMetier Metier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_metier()));
        if (input->ExpectTag(82)) goto parse_Metier;
        if (input->ExpectTag(90)) goto parse_MetierPro;
        break;
      }
      
      // repeated .PBMetierPro MetierPro = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MetierPro:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_metierpro()));
        if (input->ExpectTag(90)) goto parse_MetierPro;
        if (input->ExpectTag(98)) goto parse_Mine;
        break;
      }
      
      // repeated .PBMine Mine = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Mine:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mine()));
        if (input->ExpectTag(98)) goto parse_Mine;
        if (input->ExpectTag(106)) goto parse_Npc;
        break;
      }
      
      // repeated .PBNpc Npc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Npc:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_npc()));
        if (input->ExpectTag(106)) goto parse_Npc;
        if (input->ExpectTag(122)) goto parse_NpcCollect;
        break;
      }
      
      // repeated .PBNPCCollect NpcCollect = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_NpcCollect:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_npccollect()));
        if (input->ExpectTag(122)) goto parse_NpcCollect;
        if (input->ExpectTag(130)) goto parse_Box;
        break;
      }
      
      // repeated .PBOgreBox Box = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Box:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_box()));
        if (input->ExpectTag(130)) goto parse_Box;
        if (input->ExpectTag(138)) goto parse_OgreProperty;
        break;
      }
      
      // repeated .PBOgreProperty OgreProperty = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OgreProperty:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_ogreproperty()));
        if (input->ExpectTag(138)) goto parse_OgreProperty;
        if (input->ExpectTag(146)) goto parse_PetLevelExp;
        break;
      }
      
      // repeated .PBPetLevelExp PetLevelExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PetLevelExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_petlevelexp()));
        if (input->ExpectTag(146)) goto parse_PetLevelExp;
        if (input->ExpectTag(154)) goto parse_QuestionExp;
        break;
      }
      
      // repeated .PBQuestionExp QuestionExp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_QuestionExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_questionexp()));
        if (input->ExpectTag(154)) goto parse_QuestionExp;
        if (input->ExpectTag(162)) goto parse_ShowPet;
        break;
      }
      
      // repeated .PBShowPet ShowPet = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowPet:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_showpet()));
        if (input->ExpectTag(162)) goto parse_ShowPet;
        if (input->ExpectTag(170)) goto parse_SummonBeast;
        break;
      }
      
      // repeated .PBSummonBeast SummonBeast = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SummonBeast:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_summonbeast()));
        if (input->ExpectTag(170)) goto parse_SummonBeast;
        if (input->ExpectTag(178)) goto parse_TplProperty;
        break;
      }
      
      // repeated .PBTemplateProperty TplProperty = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TplProperty:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tplproperty()));
        if (input->ExpectTag(178)) goto parse_TplProperty;
        if (input->ExpectTag(186)) goto parse_TplProTable;
        break;
      }
      
      // repeated .PBTemplatePropertyTable TplProTable = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TplProTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tplprotable()));
        if (input->ExpectTag(186)) goto parse_TplProTable;
        if (input->ExpectTag(194)) goto parse_TotalDrop;
        break;
      }
      
      // repeated .PBTotalDrop TotalDrop = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TotalDrop:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_totaldrop()));
        if (input->ExpectTag(194)) goto parse_TotalDrop;
        if (input->ExpectTag(202)) goto parse_Block;
        break;
      }
      
      // repeated .PBBlock Block = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Block:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_block()));
        if (input->ExpectTag(202)) goto parse_Block;
        if (input->ExpectTag(210)) goto parse_Hierogram;
        break;
      }
      
      // repeated .PBTplHierogram Hierogram = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Hierogram:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_hierogram()));
        if (input->ExpectTag(210)) goto parse_Hierogram;
        if (input->ExpectTag(218)) goto parse_Talent;
        break;
      }
      
      // repeated .PBTemplateTalent Talent = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Talent:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_talent()));
        if (input->ExpectTag(218)) goto parse_Talent;
        if (input->ExpectTag(226)) goto parse_BuffImmunity;
        break;
      }
      
      // repeated .PBTplBuffImmunity BuffImmunity = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffImmunity:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_buffimmunity()));
        if (input->ExpectTag(226)) goto parse_BuffImmunity;
        if (input->ExpectTag(234)) goto parse_LifeSkill;
        break;
      }
      
      // repeated .PBTemplateLifeSkill LifeSkill = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LifeSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lifeskill()));
        if (input->ExpectTag(234)) goto parse_LifeSkill;
        if (input->ExpectTag(242)) goto parse_LifeSkillScroll;
        break;
      }
      
      // repeated .PBLifeSkillScroll LifeSkillScroll = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillScroll:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lifeskillscroll()));
        if (input->ExpectTag(242)) goto parse_LifeSkillScroll;
        if (input->ExpectTag(250)) goto parse_TitleManager;
        break;
      }
      
      // repeated .PBTitleManager TitleManager = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TitleManager:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_titlemanager()));
        if (input->ExpectTag(250)) goto parse_TitleManager;
        if (input->ExpectTag(258)) goto parse_MagicWeaponSkillStorage;
        break;
      }
      
      // repeated .PBSkillStorage MagicWeaponSkillStorage = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicWeaponSkillStorage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_magicweaponskillstorage()));
        if (input->ExpectTag(258)) goto parse_MagicWeaponSkillStorage;
        if (input->ExpectTag(266)) goto parse_CDGroupTable;
        break;
      }
      
      // repeated .PBCDGroupTable CDGroupTable = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CDGroupTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_cdgrouptable()));
        if (input->ExpectTag(266)) goto parse_CDGroupTable;
        if (input->ExpectTag(274)) goto parse_ApConfig;
        break;
      }
      
      // repeated .PBApConfig ApConfig = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ApConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_apconfig()));
        if (input->ExpectTag(274)) goto parse_ApConfig;
        if (input->ExpectTag(282)) goto parse_JudgeConfig;
        break;
      }
      
      // repeated .PBJudgeConfig JudgeConfig = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_JudgeConfig:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_judgeconfig()));
        if (input->ExpectTag(282)) goto parse_JudgeConfig;
        if (input->ExpectTag(290)) goto parse_WizardTable;
        break;
      }
      
      // repeated .PBWizardTable WizardTable = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WizardTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_wizardtable()));
        if (input->ExpectTag(290)) goto parse_WizardTable;
        if (input->ExpectTag(298)) goto parse_Trend;
        break;
      }
      
      // repeated .PBTrend Trend = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Trend:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_trend()));
        if (input->ExpectTag(298)) goto parse_Trend;
        if (input->ExpectTag(306)) goto parse_AchieveAward;
        break;
      }
      
      // repeated .PBAchieveAward AchieveAward = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AchieveAward:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_achieveaward()));
        if (input->ExpectTag(306)) goto parse_AchieveAward;
        if (input->ExpectTag(314)) goto parse_Power;
        break;
      }
      
      // repeated .PBPower Power = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Power:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_power()));
        if (input->ExpectTag(314)) goto parse_Power;
        if (input->ExpectTag(322)) goto parse_Official;
        break;
      }
      
      // repeated .PBOfficial Official = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Official:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_official()));
        if (input->ExpectTag(322)) goto parse_Official;
        if (input->ExpectTag(330)) goto parse_ConstructExp;
        break;
      }
      
      // repeated .PBConstructExp ConstructExp = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ConstructExp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_constructexp()));
        if (input->ExpectTag(330)) goto parse_ConstructExp;
        if (input->ExpectTag(338)) goto parse_TalentStage;
        break;
      }
      
      // repeated .PBTemplateTalentStage TalentStage = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TalentStage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_talentstage()));
        if (input->ExpectTag(338)) goto parse_TalentStage;
        if (input->ExpectTag(346)) goto parse_CorpsBOSS;
        break;
      }
      
      // repeated .PBCorpsBOSS CorpsBOSS = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsBOSS:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsboss()));
        if (input->ExpectTag(346)) goto parse_CorpsBOSS;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemSet ItemSet = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itemset(), output);
  }
  
  // optional .PBConfigTable ConfigTable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->configtable(), output);
  }
  
  // optional .PBSkillSet SkillSet = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->skillset(), output);
  }
  
  // optional .PBEquipSet EquipSet = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->equipset(), output);
  }
  
  // repeated .PBBattlePet BattlePet = 5;
  for (int i = 0; i < this->battlepet_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->battlepet(i), output);
  }
  
  // repeated .PBHonorObtain HonorObtain = 6;
  for (int i = 0; i < this->honorobtain_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->honorobtain(i), output);
  }
  
  // repeated .PBHonorToExp HonorToExp = 7;
  for (int i = 0; i < this->honortoexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->honortoexp(i), output);
  }
  
  // repeated .PBLevelExp LevelExp = 8;
  for (int i = 0; i < this->levelexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->levelexp(i), output);
  }
  
  // repeated .PBLevelProperty LevelPro = 9;
  for (int i = 0; i < this->levelpro_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->levelpro(i), output);
  }
  
  // repeated .PBMetier Metier = 10;
  for (int i = 0; i < this->metier_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->metier(i), output);
  }
  
  // repeated .PBMetierPro MetierPro = 11;
  for (int i = 0; i < this->metierpro_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->metierpro(i), output);
  }
  
  // repeated .PBMine Mine = 12;
  for (int i = 0; i < this->mine_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->mine(i), output);
  }
  
  // repeated .PBNpc Npc = 13;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->npc(i), output);
  }
  
  // repeated .PBNPCCollect NpcCollect = 15;
  for (int i = 0; i < this->npccollect_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->npccollect(i), output);
  }
  
  // repeated .PBOgreBox Box = 16;
  for (int i = 0; i < this->box_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->box(i), output);
  }
  
  // repeated .PBOgreProperty OgreProperty = 17;
  for (int i = 0; i < this->ogreproperty_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->ogreproperty(i), output);
  }
  
  // repeated .PBPetLevelExp PetLevelExp = 18;
  for (int i = 0; i < this->petlevelexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->petlevelexp(i), output);
  }
  
  // repeated .PBQuestionExp QuestionExp = 19;
  for (int i = 0; i < this->questionexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->questionexp(i), output);
  }
  
  // repeated .PBShowPet ShowPet = 20;
  for (int i = 0; i < this->showpet_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->showpet(i), output);
  }
  
  // repeated .PBSummonBeast SummonBeast = 21;
  for (int i = 0; i < this->summonbeast_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->summonbeast(i), output);
  }
  
  // repeated .PBTemplateProperty TplProperty = 22;
  for (int i = 0; i < this->tplproperty_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->tplproperty(i), output);
  }
  
  // repeated .PBTemplatePropertyTable TplProTable = 23;
  for (int i = 0; i < this->tplprotable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->tplprotable(i), output);
  }
  
  // repeated .PBTotalDrop TotalDrop = 24;
  for (int i = 0; i < this->totaldrop_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->totaldrop(i), output);
  }
  
  // repeated .PBBlock Block = 25;
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->block(i), output);
  }
  
  // repeated .PBTplHierogram Hierogram = 26;
  for (int i = 0; i < this->hierogram_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->hierogram(i), output);
  }
  
  // repeated .PBTemplateTalent Talent = 27;
  for (int i = 0; i < this->talent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->talent(i), output);
  }
  
  // repeated .PBTplBuffImmunity BuffImmunity = 28;
  for (int i = 0; i < this->buffimmunity_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(28, this->buffimmunity(i), output);
  }
  
  // repeated .PBTemplateLifeSkill LifeSkill = 29;
  for (int i = 0; i < this->lifeskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(29, this->lifeskill(i), output);
  }
  
  // repeated .PBLifeSkillScroll LifeSkillScroll = 30;
  for (int i = 0; i < this->lifeskillscroll_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(30, this->lifeskillscroll(i), output);
  }
  
  // repeated .PBTitleManager TitleManager = 31;
  for (int i = 0; i < this->titlemanager_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(31, this->titlemanager(i), output);
  }
  
  // repeated .PBSkillStorage MagicWeaponSkillStorage = 32;
  for (int i = 0; i < this->magicweaponskillstorage_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(32, this->magicweaponskillstorage(i), output);
  }
  
  // repeated .PBCDGroupTable CDGroupTable = 33;
  for (int i = 0; i < this->cdgrouptable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(33, this->cdgrouptable(i), output);
  }
  
  // repeated .PBApConfig ApConfig = 34;
  for (int i = 0; i < this->apconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(34, this->apconfig(i), output);
  }
  
  // repeated .PBJudgeConfig JudgeConfig = 35;
  for (int i = 0; i < this->judgeconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(35, this->judgeconfig(i), output);
  }
  
  // repeated .PBWizardTable WizardTable = 36;
  for (int i = 0; i < this->wizardtable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(36, this->wizardtable(i), output);
  }
  
  // repeated .PBTrend Trend = 37;
  for (int i = 0; i < this->trend_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(37, this->trend(i), output);
  }
  
  // repeated .PBAchieveAward AchieveAward = 38;
  for (int i = 0; i < this->achieveaward_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(38, this->achieveaward(i), output);
  }
  
  // repeated .PBPower Power = 39;
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(39, this->power(i), output);
  }
  
  // repeated .PBOfficial Official = 40;
  for (int i = 0; i < this->official_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(40, this->official(i), output);
  }
  
  // repeated .PBConstructExp ConstructExp = 41;
  for (int i = 0; i < this->constructexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(41, this->constructexp(i), output);
  }
  
  // repeated .PBTemplateTalentStage TalentStage = 42;
  for (int i = 0; i < this->talentstage_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(42, this->talentstage(i), output);
  }
  
  // repeated .PBCorpsBOSS CorpsBOSS = 43;
  for (int i = 0; i < this->corpsboss_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(43, this->corpsboss(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemSet ItemSet = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itemset(), target);
  }
  
  // optional .PBConfigTable ConfigTable = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->configtable(), target);
  }
  
  // optional .PBSkillSet SkillSet = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->skillset(), target);
  }
  
  // optional .PBEquipSet EquipSet = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->equipset(), target);
  }
  
  // repeated .PBBattlePet BattlePet = 5;
  for (int i = 0; i < this->battlepet_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->battlepet(i), target);
  }
  
  // repeated .PBHonorObtain HonorObtain = 6;
  for (int i = 0; i < this->honorobtain_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->honorobtain(i), target);
  }
  
  // repeated .PBHonorToExp HonorToExp = 7;
  for (int i = 0; i < this->honortoexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->honortoexp(i), target);
  }
  
  // repeated .PBLevelExp LevelExp = 8;
  for (int i = 0; i < this->levelexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->levelexp(i), target);
  }
  
  // repeated .PBLevelProperty LevelPro = 9;
  for (int i = 0; i < this->levelpro_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->levelpro(i), target);
  }
  
  // repeated .PBMetier Metier = 10;
  for (int i = 0; i < this->metier_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->metier(i), target);
  }
  
  // repeated .PBMetierPro MetierPro = 11;
  for (int i = 0; i < this->metierpro_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->metierpro(i), target);
  }
  
  // repeated .PBMine Mine = 12;
  for (int i = 0; i < this->mine_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->mine(i), target);
  }
  
  // repeated .PBNpc Npc = 13;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->npc(i), target);
  }
  
  // repeated .PBNPCCollect NpcCollect = 15;
  for (int i = 0; i < this->npccollect_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->npccollect(i), target);
  }
  
  // repeated .PBOgreBox Box = 16;
  for (int i = 0; i < this->box_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->box(i), target);
  }
  
  // repeated .PBOgreProperty OgreProperty = 17;
  for (int i = 0; i < this->ogreproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->ogreproperty(i), target);
  }
  
  // repeated .PBPetLevelExp PetLevelExp = 18;
  for (int i = 0; i < this->petlevelexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->petlevelexp(i), target);
  }
  
  // repeated .PBQuestionExp QuestionExp = 19;
  for (int i = 0; i < this->questionexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->questionexp(i), target);
  }
  
  // repeated .PBShowPet ShowPet = 20;
  for (int i = 0; i < this->showpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->showpet(i), target);
  }
  
  // repeated .PBSummonBeast SummonBeast = 21;
  for (int i = 0; i < this->summonbeast_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->summonbeast(i), target);
  }
  
  // repeated .PBTemplateProperty TplProperty = 22;
  for (int i = 0; i < this->tplproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->tplproperty(i), target);
  }
  
  // repeated .PBTemplatePropertyTable TplProTable = 23;
  for (int i = 0; i < this->tplprotable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->tplprotable(i), target);
  }
  
  // repeated .PBTotalDrop TotalDrop = 24;
  for (int i = 0; i < this->totaldrop_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->totaldrop(i), target);
  }
  
  // repeated .PBBlock Block = 25;
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->block(i), target);
  }
  
  // repeated .PBTplHierogram Hierogram = 26;
  for (int i = 0; i < this->hierogram_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->hierogram(i), target);
  }
  
  // repeated .PBTemplateTalent Talent = 27;
  for (int i = 0; i < this->talent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->talent(i), target);
  }
  
  // repeated .PBTplBuffImmunity BuffImmunity = 28;
  for (int i = 0; i < this->buffimmunity_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(28, this->buffimmunity(i), target);
  }
  
  // repeated .PBTemplateLifeSkill LifeSkill = 29;
  for (int i = 0; i < this->lifeskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(29, this->lifeskill(i), target);
  }
  
  // repeated .PBLifeSkillScroll LifeSkillScroll = 30;
  for (int i = 0; i < this->lifeskillscroll_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(30, this->lifeskillscroll(i), target);
  }
  
  // repeated .PBTitleManager TitleManager = 31;
  for (int i = 0; i < this->titlemanager_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(31, this->titlemanager(i), target);
  }
  
  // repeated .PBSkillStorage MagicWeaponSkillStorage = 32;
  for (int i = 0; i < this->magicweaponskillstorage_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(32, this->magicweaponskillstorage(i), target);
  }
  
  // repeated .PBCDGroupTable CDGroupTable = 33;
  for (int i = 0; i < this->cdgrouptable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(33, this->cdgrouptable(i), target);
  }
  
  // repeated .PBApConfig ApConfig = 34;
  for (int i = 0; i < this->apconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(34, this->apconfig(i), target);
  }
  
  // repeated .PBJudgeConfig JudgeConfig = 35;
  for (int i = 0; i < this->judgeconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(35, this->judgeconfig(i), target);
  }
  
  // repeated .PBWizardTable WizardTable = 36;
  for (int i = 0; i < this->wizardtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(36, this->wizardtable(i), target);
  }
  
  // repeated .PBTrend Trend = 37;
  for (int i = 0; i < this->trend_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(37, this->trend(i), target);
  }
  
  // repeated .PBAchieveAward AchieveAward = 38;
  for (int i = 0; i < this->achieveaward_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(38, this->achieveaward(i), target);
  }
  
  // repeated .PBPower Power = 39;
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(39, this->power(i), target);
  }
  
  // repeated .PBOfficial Official = 40;
  for (int i = 0; i < this->official_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(40, this->official(i), target);
  }
  
  // repeated .PBConstructExp ConstructExp = 41;
  for (int i = 0; i < this->constructexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(41, this->constructexp(i), target);
  }
  
  // repeated .PBTemplateTalentStage TalentStage = 42;
  for (int i = 0; i < this->talentstage_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(42, this->talentstage(i), target);
  }
  
  // repeated .PBCorpsBOSS CorpsBOSS = 43;
  for (int i = 0; i < this->corpsboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(43, this->corpsboss(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemSet ItemSet = 1;
    if (has_itemset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itemset());
    }
    
    // optional .PBConfigTable ConfigTable = 2;
    if (has_configtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->configtable());
    }
    
    // optional .PBSkillSet SkillSet = 3;
    if (has_skillset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skillset());
    }
    
    // optional .PBEquipSet EquipSet = 4;
    if (has_equipset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->equipset());
    }
    
  }
  // repeated .PBBattlePet BattlePet = 5;
  total_size += 1 * this->battlepet_size();
  for (int i = 0; i < this->battlepet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->battlepet(i));
  }
  
  // repeated .PBHonorObtain HonorObtain = 6;
  total_size += 1 * this->honorobtain_size();
  for (int i = 0; i < this->honorobtain_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->honorobtain(i));
  }
  
  // repeated .PBHonorToExp HonorToExp = 7;
  total_size += 1 * this->honortoexp_size();
  for (int i = 0; i < this->honortoexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->honortoexp(i));
  }
  
  // repeated .PBLevelExp LevelExp = 8;
  total_size += 1 * this->levelexp_size();
  for (int i = 0; i < this->levelexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->levelexp(i));
  }
  
  // repeated .PBLevelProperty LevelPro = 9;
  total_size += 1 * this->levelpro_size();
  for (int i = 0; i < this->levelpro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->levelpro(i));
  }
  
  // repeated .PBMetier Metier = 10;
  total_size += 1 * this->metier_size();
  for (int i = 0; i < this->metier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->metier(i));
  }
  
  // repeated .PBMetierPro MetierPro = 11;
  total_size += 1 * this->metierpro_size();
  for (int i = 0; i < this->metierpro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->metierpro(i));
  }
  
  // repeated .PBMine Mine = 12;
  total_size += 1 * this->mine_size();
  for (int i = 0; i < this->mine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mine(i));
  }
  
  // repeated .PBNpc Npc = 13;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->npc(i));
  }
  
  // repeated .PBNPCCollect NpcCollect = 15;
  total_size += 1 * this->npccollect_size();
  for (int i = 0; i < this->npccollect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->npccollect(i));
  }
  
  // repeated .PBOgreBox Box = 16;
  total_size += 2 * this->box_size();
  for (int i = 0; i < this->box_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->box(i));
  }
  
  // repeated .PBOgreProperty OgreProperty = 17;
  total_size += 2 * this->ogreproperty_size();
  for (int i = 0; i < this->ogreproperty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->ogreproperty(i));
  }
  
  // repeated .PBPetLevelExp PetLevelExp = 18;
  total_size += 2 * this->petlevelexp_size();
  for (int i = 0; i < this->petlevelexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->petlevelexp(i));
  }
  
  // repeated .PBQuestionExp QuestionExp = 19;
  total_size += 2 * this->questionexp_size();
  for (int i = 0; i < this->questionexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->questionexp(i));
  }
  
  // repeated .PBShowPet ShowPet = 20;
  total_size += 2 * this->showpet_size();
  for (int i = 0; i < this->showpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->showpet(i));
  }
  
  // repeated .PBSummonBeast SummonBeast = 21;
  total_size += 2 * this->summonbeast_size();
  for (int i = 0; i < this->summonbeast_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->summonbeast(i));
  }
  
  // repeated .PBTemplateProperty TplProperty = 22;
  total_size += 2 * this->tplproperty_size();
  for (int i = 0; i < this->tplproperty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tplproperty(i));
  }
  
  // repeated .PBTemplatePropertyTable TplProTable = 23;
  total_size += 2 * this->tplprotable_size();
  for (int i = 0; i < this->tplprotable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tplprotable(i));
  }
  
  // repeated .PBTotalDrop TotalDrop = 24;
  total_size += 2 * this->totaldrop_size();
  for (int i = 0; i < this->totaldrop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->totaldrop(i));
  }
  
  // repeated .PBBlock Block = 25;
  total_size += 2 * this->block_size();
  for (int i = 0; i < this->block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->block(i));
  }
  
  // repeated .PBTplHierogram Hierogram = 26;
  total_size += 2 * this->hierogram_size();
  for (int i = 0; i < this->hierogram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->hierogram(i));
  }
  
  // repeated .PBTemplateTalent Talent = 27;
  total_size += 2 * this->talent_size();
  for (int i = 0; i < this->talent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->talent(i));
  }
  
  // repeated .PBTplBuffImmunity BuffImmunity = 28;
  total_size += 2 * this->buffimmunity_size();
  for (int i = 0; i < this->buffimmunity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->buffimmunity(i));
  }
  
  // repeated .PBTemplateLifeSkill LifeSkill = 29;
  total_size += 2 * this->lifeskill_size();
  for (int i = 0; i < this->lifeskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lifeskill(i));
  }
  
  // repeated .PBLifeSkillScroll LifeSkillScroll = 30;
  total_size += 2 * this->lifeskillscroll_size();
  for (int i = 0; i < this->lifeskillscroll_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lifeskillscroll(i));
  }
  
  // repeated .PBTitleManager TitleManager = 31;
  total_size += 2 * this->titlemanager_size();
  for (int i = 0; i < this->titlemanager_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->titlemanager(i));
  }
  
  // repeated .PBSkillStorage MagicWeaponSkillStorage = 32;
  total_size += 2 * this->magicweaponskillstorage_size();
  for (int i = 0; i < this->magicweaponskillstorage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->magicweaponskillstorage(i));
  }
  
  // repeated .PBCDGroupTable CDGroupTable = 33;
  total_size += 2 * this->cdgrouptable_size();
  for (int i = 0; i < this->cdgrouptable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->cdgrouptable(i));
  }
  
  // repeated .PBApConfig ApConfig = 34;
  total_size += 2 * this->apconfig_size();
  for (int i = 0; i < this->apconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->apconfig(i));
  }
  
  // repeated .PBJudgeConfig JudgeConfig = 35;
  total_size += 2 * this->judgeconfig_size();
  for (int i = 0; i < this->judgeconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->judgeconfig(i));
  }
  
  // repeated .PBWizardTable WizardTable = 36;
  total_size += 2 * this->wizardtable_size();
  for (int i = 0; i < this->wizardtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->wizardtable(i));
  }
  
  // repeated .PBTrend Trend = 37;
  total_size += 2 * this->trend_size();
  for (int i = 0; i < this->trend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->trend(i));
  }
  
  // repeated .PBAchieveAward AchieveAward = 38;
  total_size += 2 * this->achieveaward_size();
  for (int i = 0; i < this->achieveaward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->achieveaward(i));
  }
  
  // repeated .PBPower Power = 39;
  total_size += 2 * this->power_size();
  for (int i = 0; i < this->power_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->power(i));
  }
  
  // repeated .PBOfficial Official = 40;
  total_size += 2 * this->official_size();
  for (int i = 0; i < this->official_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->official(i));
  }
  
  // repeated .PBConstructExp ConstructExp = 41;
  total_size += 2 * this->constructexp_size();
  for (int i = 0; i < this->constructexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->constructexp(i));
  }
  
  // repeated .PBTemplateTalentStage TalentStage = 42;
  total_size += 2 * this->talentstage_size();
  for (int i = 0; i < this->talentstage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->talentstage(i));
  }
  
  // repeated .PBCorpsBOSS CorpsBOSS = 43;
  total_size += 2 * this->corpsboss_size();
  for (int i = 0; i < this->corpsboss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsboss(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplate::MergeFrom(const PBTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlepet_.MergeFrom(from.battlepet_);
  honorobtain_.MergeFrom(from.honorobtain_);
  honortoexp_.MergeFrom(from.honortoexp_);
  levelexp_.MergeFrom(from.levelexp_);
  levelpro_.MergeFrom(from.levelpro_);
  metier_.MergeFrom(from.metier_);
  metierpro_.MergeFrom(from.metierpro_);
  mine_.MergeFrom(from.mine_);
  npc_.MergeFrom(from.npc_);
  npccollect_.MergeFrom(from.npccollect_);
  box_.MergeFrom(from.box_);
  ogreproperty_.MergeFrom(from.ogreproperty_);
  petlevelexp_.MergeFrom(from.petlevelexp_);
  questionexp_.MergeFrom(from.questionexp_);
  showpet_.MergeFrom(from.showpet_);
  summonbeast_.MergeFrom(from.summonbeast_);
  tplproperty_.MergeFrom(from.tplproperty_);
  tplprotable_.MergeFrom(from.tplprotable_);
  totaldrop_.MergeFrom(from.totaldrop_);
  block_.MergeFrom(from.block_);
  hierogram_.MergeFrom(from.hierogram_);
  talent_.MergeFrom(from.talent_);
  buffimmunity_.MergeFrom(from.buffimmunity_);
  lifeskill_.MergeFrom(from.lifeskill_);
  lifeskillscroll_.MergeFrom(from.lifeskillscroll_);
  titlemanager_.MergeFrom(from.titlemanager_);
  magicweaponskillstorage_.MergeFrom(from.magicweaponskillstorage_);
  cdgrouptable_.MergeFrom(from.cdgrouptable_);
  apconfig_.MergeFrom(from.apconfig_);
  judgeconfig_.MergeFrom(from.judgeconfig_);
  wizardtable_.MergeFrom(from.wizardtable_);
  trend_.MergeFrom(from.trend_);
  achieveaward_.MergeFrom(from.achieveaward_);
  power_.MergeFrom(from.power_);
  official_.MergeFrom(from.official_);
  constructexp_.MergeFrom(from.constructexp_);
  talentstage_.MergeFrom(from.talentstage_);
  corpsboss_.MergeFrom(from.corpsboss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itemset()->::PBItemSet::MergeFrom(from.itemset());
    }
    if (from._has_bit(1)) {
      mutable_configtable()->::PBConfigTable::MergeFrom(from.configtable());
    }
    if (from._has_bit(2)) {
      mutable_skillset()->::PBSkillSet::MergeFrom(from.skillset());
    }
    if (from._has_bit(3)) {
      mutable_equipset()->::PBEquipSet::MergeFrom(from.equipset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplate::CopyFrom(const PBTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplate::Swap(PBTemplate* other) {
  if (other != this) {
    std::swap(itemset_, other->itemset_);
    std::swap(configtable_, other->configtable_);
    std::swap(skillset_, other->skillset_);
    std::swap(equipset_, other->equipset_);
    battlepet_.Swap(&other->battlepet_);
    honorobtain_.Swap(&other->honorobtain_);
    honortoexp_.Swap(&other->honortoexp_);
    levelexp_.Swap(&other->levelexp_);
    levelpro_.Swap(&other->levelpro_);
    metier_.Swap(&other->metier_);
    metierpro_.Swap(&other->metierpro_);
    mine_.Swap(&other->mine_);
    npc_.Swap(&other->npc_);
    npccollect_.Swap(&other->npccollect_);
    box_.Swap(&other->box_);
    ogreproperty_.Swap(&other->ogreproperty_);
    petlevelexp_.Swap(&other->petlevelexp_);
    questionexp_.Swap(&other->questionexp_);
    showpet_.Swap(&other->showpet_);
    summonbeast_.Swap(&other->summonbeast_);
    tplproperty_.Swap(&other->tplproperty_);
    tplprotable_.Swap(&other->tplprotable_);
    totaldrop_.Swap(&other->totaldrop_);
    block_.Swap(&other->block_);
    hierogram_.Swap(&other->hierogram_);
    talent_.Swap(&other->talent_);
    buffimmunity_.Swap(&other->buffimmunity_);
    lifeskill_.Swap(&other->lifeskill_);
    lifeskillscroll_.Swap(&other->lifeskillscroll_);
    titlemanager_.Swap(&other->titlemanager_);
    magicweaponskillstorage_.Swap(&other->magicweaponskillstorage_);
    cdgrouptable_.Swap(&other->cdgrouptable_);
    apconfig_.Swap(&other->apconfig_);
    judgeconfig_.Swap(&other->judgeconfig_);
    wizardtable_.Swap(&other->wizardtable_);
    trend_.Swap(&other->trend_);
    achieveaward_.Swap(&other->achieveaward_);
    power_.Swap(&other->power_);
    official_.Swap(&other->official_);
    constructexp_.Swap(&other->constructexp_);
    talentstage_.Swap(&other->talentstage_);
    corpsboss_.Swap(&other->corpsboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplate::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplate::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplate::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplate_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBHandinEncourage::kTempIdFieldNumber;
const int PBHandinEncourage::kHandinItemTypeFieldNumber;
const int PBHandinEncourage::kHandinItemIDFieldNumber;
const int PBHandinEncourage::kHandinItemNumFieldNumber;
const int PBHandinEncourage::kEncourageTypeFieldNumber;
const int PBHandinEncourage::kEncourageIdFieldNumber;
const int PBHandinEncourage::kEncourageNumFieldNumber;
#endif  // !_MSC_VER

PBHandinEncourage::PBHandinEncourage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHandinEncourage::InitAsDefaultInstance() {}

PBHandinEncourage::PBHandinEncourage(const PBHandinEncourage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHandinEncourage::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  handinitemtype_ = 0u;
  handinitemid_ = 0u;
  handinitemnum_ = 0u;
  encouragetype_ = 0u;
  encourageid_ = 0u;
  encouragenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHandinEncourage::~PBHandinEncourage() {
  SharedDtor();
}

void PBHandinEncourage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBHandinEncourage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHandinEncourage_descriptor_;
}

const PBHandinEncourage& PBHandinEncourage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBHandinEncourage* PBHandinEncourage::default_instance_ = NULL;

PBHandinEncourage* PBHandinEncourage::New() const {
  return new PBHandinEncourage;
}

void PBHandinEncourage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    handinitemtype_ = 0u;
    handinitemid_ = 0u;
    handinitemnum_ = 0u;
    encouragetype_ = 0u;
    encourageid_ = 0u;
    encouragenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHandinEncourage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_HandinItemType;
        break;
      }
      
      // optional uint32 HandinItemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HandinItemType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handinitemtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HandinItemID;
        break;
      }
      
      // optional uint32 HandinItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HandinItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handinitemid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_HandinItemNum;
        break;
      }
      
      // optional uint32 HandinItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HandinItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handinitemnum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_EncourageType;
        break;
      }
      
      // optional uint32 EncourageType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncourageType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &encouragetype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_EncourageId;
        break;
      }
      
      // optional uint32 EncourageId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncourageId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &encourageid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_EncourageNum;
        break;
      }
      
      // optional uint32 EncourageNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncourageNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &encouragenum_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHandinEncourage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBHandinEncourage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 HandinItemType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->handinitemtype(), output);
  }
  
  // optional uint32 HandinItemID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->handinitemid(), output);
  }
  
  // optional uint32 HandinItemNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->handinitemnum(), output);
  }
  
  // optional uint32 EncourageType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->encouragetype(), output);
  }
  
  // optional uint32 EncourageId = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->encourageid(), output);
  }
  
  // optional uint32 EncourageNum = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->encouragenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHandinEncourage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 HandinItemType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->handinitemtype(), target);
  }
  
  // optional uint32 HandinItemID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->handinitemid(), target);
  }
  
  // optional uint32 HandinItemNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->handinitemnum(), target);
  }
  
  // optional uint32 EncourageType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->encouragetype(), target);
  }
  
  // optional uint32 EncourageId = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->encourageid(), target);
  }
  
  // optional uint32 EncourageNum = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->encouragenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHandinEncourage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempId = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 HandinItemType = 2;
    if (has_handinitemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handinitemtype());
    }
    
    // optional uint32 HandinItemID = 3;
    if (has_handinitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handinitemid());
    }
    
    // optional uint32 HandinItemNum = 4;
    if (has_handinitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handinitemnum());
    }
    
    // optional uint32 EncourageType = 5;
    if (has_encouragetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->encouragetype());
    }
    
    // optional uint32 EncourageId = 6;
    if (has_encourageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->encourageid());
    }
    
    // optional uint32 EncourageNum = 7;
    if (has_encouragenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->encouragenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBHandinEncourage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHandinEncourage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHandinEncourage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHandinEncourage::MergeFrom(const PBHandinEncourage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_handinitemtype(from.handinitemtype());
    }
    if (from._has_bit(2)) {
      set_handinitemid(from.handinitemid());
    }
    if (from._has_bit(3)) {
      set_handinitemnum(from.handinitemnum());
    }
    if (from._has_bit(4)) {
      set_encouragetype(from.encouragetype());
    }
    if (from._has_bit(5)) {
      set_encourageid(from.encourageid());
    }
    if (from._has_bit(6)) {
      set_encouragenum(from.encouragenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHandinEncourage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHandinEncourage::CopyFrom(const PBHandinEncourage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHandinEncourage::Swap(PBHandinEncourage* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(handinitemtype_, other->handinitemtype_);
    std::swap(handinitemid_, other->handinitemid_);
    std::swap(handinitemnum_, other->handinitemnum_);
    std::swap(encouragetype_, other->encouragetype_);
    std::swap(encourageid_, other->encourageid_);
    std::swap(encouragenum_, other->encouragenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBHandinEncourage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBHandinEncourage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBHandinEncourage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBHandinEncourage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBHandinTable::kTempIDFieldNumber;
const int PBHandinTable::kActivityIdFieldNumber;
const int PBHandinTable::kEncourageTplIDFieldNumber;
#endif  // !_MSC_VER

PBHandinTable::PBHandinTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHandinTable::InitAsDefaultInstance() {}

PBHandinTable::PBHandinTable(const PBHandinTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHandinTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  activityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHandinTable::~PBHandinTable() {
  SharedDtor();
}

void PBHandinTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBHandinTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHandinTable_descriptor_;
}

const PBHandinTable& PBHandinTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBHandinTable* PBHandinTable::default_instance_ = NULL;

PBHandinTable* PBHandinTable::New() const {
  return new PBHandinTable;
}

void PBHandinTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    activityid_ = 0u;
  }
  encouragetplid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHandinTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ActivityId;
        break;
      }
      
      // optional uint32 ActivityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActivityId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EncourageTplID;
        break;
      }
      
      // repeated uint32 EncourageTplID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncourageTplID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_encouragetplid(value);
        if (input->ExpectTag(24)) goto parse_EncourageTplID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHandinTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBHandinTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 ActivityId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->activityid(), output);
  }
  
  // repeated uint32 EncourageTplID = 3;
  for (int i = 0; i < this->encouragetplid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->encouragetplid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHandinTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 ActivityId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->activityid(), target);
  }
  
  // repeated uint32 EncourageTplID = 3;
  for (int i = 0; i < this->encouragetplid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->encouragetplid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHandinTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ActivityId = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
  }
  // repeated uint32 EncourageTplID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->encouragetplid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->encouragetplid(i));
    }
    total_size += 1 * this->encouragetplid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBHandinTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHandinTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHandinTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHandinTable::MergeFrom(const PBHandinTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  encouragetplid_.MergeFrom(from.encouragetplid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHandinTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHandinTable::CopyFrom(const PBHandinTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHandinTable::Swap(PBHandinTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(activityid_, other->activityid_);
    encouragetplid_.Swap(&other->encouragetplid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBHandinTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBHandinTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBHandinTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBHandinTable_reflection_;
}

// ===================================================================

const ::std::string PBItemBase::_default_itemname_;
const ::std::string PBItemBase::_default_modelname_;
const ::std::string PBItemBase::_default_iconname_;
const ::std::string PBItemBase::_default_describe_;
const ::std::string PBItemBase::_default_typedesc_;
#ifndef _MSC_VER
const int PBItemBase::kTempIDFieldNumber;
const int PBItemBase::kItemTypeFieldNumber;
const int PBItemBase::kProcessTypeFieldNumber;
const int PBItemBase::kPileLimitFieldNumber;
const int PBItemBase::kItemNameFieldNumber;
const int PBItemBase::kModelNameFieldNumber;
const int PBItemBase::kIconNameFieldNumber;
const int PBItemBase::kPurchasePriceFieldNumber;
const int PBItemBase::kSalePriceFieldNumber;
const int PBItemBase::kPurchaseBindMoneyFieldNumber;
const int PBItemBase::kSaleBindMoneyFieldNumber;
const int PBItemBase::kDescribeFieldNumber;
const int PBItemBase::kLastTimeFieldNumber;
const int PBItemBase::kStopAttackFieldNumber;
const int PBItemBase::kTypeDescFieldNumber;
const int PBItemBase::kCanUseFieldNumber;
const int PBItemBase::kSkillIDFieldNumber;
const int PBItemBase::kLevelFieldNumber;
const int PBItemBase::kDisappearFieldNumber;
const int PBItemBase::kCDGroupFieldNumber;
const int PBItemBase::kLmtMapIDFieldNumber;
const int PBItemBase::kValidTimeFieldNumber;
const int PBItemBase::kValidTypeFieldNumber;
const int PBItemBase::kCommonIDFieldNumber;
const int PBItemBase::kEatTypeFieldNumber;
const int PBItemBase::kEatValueFieldNumber;
const int PBItemBase::kCountTypeFieldNumber;
const int PBItemBase::kLmtLineIDFieldNumber;
const int PBItemBase::kLmtUseMapIDFieldNumber;
const int PBItemBase::kLmtRepetionIDFieldNumber;
const int PBItemBase::kCompIDFieldNumber;
const int PBItemBase::kInvilidDateFieldNumber;
#endif  // !_MSC_VER

PBItemBase::PBItemBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBase::InitAsDefaultInstance() {}

PBItemBase::PBItemBase(const PBItemBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBase::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  itemtype_ = 0u;
  processtype_ = 0u;
  pilelimit_ = 0u;
  itemname_ = const_cast< ::std::string*>(&_default_itemname_);
  modelname_ = const_cast< ::std::string*>(&_default_modelname_);
  iconname_ = const_cast< ::std::string*>(&_default_iconname_);
  purchaseprice_ = 0u;
  saleprice_ = 0u;
  purchasebindmoney_ = 0u;
  salebindmoney_ = 0u;
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  lasttime_ = 0u;
  stopattack_ = 0u;
  typedesc_ = const_cast< ::std::string*>(&_default_typedesc_);
  canuse_ = 0u;
  skillid_ = 0u;
  level_ = 0u;
  disappear_ = 0u;
  validtime_ = 0u;
  validtype_ = 0u;
  commonid_ = 0u;
  eattype_ = 0u;
  eatvalue_ = 0u;
  counttype_ = 0u;
  lmtlineid_ = 0u;
  compid_ = 0u;
  inviliddate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBase::~PBItemBase() {
  SharedDtor();
}

void PBItemBase::SharedDtor() {
  if (itemname_ != &_default_itemname_) {
    delete itemname_;
  }
  if (modelname_ != &_default_modelname_) {
    delete modelname_;
  }
  if (iconname_ != &_default_iconname_) {
    delete iconname_;
  }
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (typedesc_ != &_default_typedesc_) {
    delete typedesc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBase_descriptor_;
}

const PBItemBase& PBItemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemBase* PBItemBase::default_instance_ = NULL;

PBItemBase* PBItemBase::New() const {
  return new PBItemBase;
}

void PBItemBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    itemtype_ = 0u;
    processtype_ = 0u;
    pilelimit_ = 0u;
    if (_has_bit(4)) {
      if (itemname_ != &_default_itemname_) {
        itemname_->clear();
      }
    }
    if (_has_bit(5)) {
      if (modelname_ != &_default_modelname_) {
        modelname_->clear();
      }
    }
    if (_has_bit(6)) {
      if (iconname_ != &_default_iconname_) {
        iconname_->clear();
      }
    }
    purchaseprice_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    saleprice_ = 0u;
    purchasebindmoney_ = 0u;
    salebindmoney_ = 0u;
    if (_has_bit(11)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
    lasttime_ = 0u;
    stopattack_ = 0u;
    if (_has_bit(14)) {
      if (typedesc_ != &_default_typedesc_) {
        typedesc_->clear();
      }
    }
    canuse_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
    disappear_ = 0u;
    validtime_ = 0u;
    validtype_ = 0u;
    commonid_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    eattype_ = 0u;
    eatvalue_ = 0u;
    counttype_ = 0u;
    lmtlineid_ = 0u;
    compid_ = 0u;
    inviliddate_ = 0u;
  }
  cdgroup_.Clear();
  lmtmapid_.Clear();
  lmtusemapid_.Clear();
  lmtrepetionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemType;
        break;
      }
      
      // optional uint32 ItemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ProcessType;
        break;
      }
      
      // optional uint32 ProcessType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProcessType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &processtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PileLimit;
        break;
      }
      
      // optional uint32 PileLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PileLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pilelimit_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_ItemName;
        break;
      }
      
      // optional string ItemName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_itemname()));
        if (input->ExpectTag(50)) goto parse_ModelName;
        break;
      }
      
      // optional string ModelName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ModelName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_modelname()));
        if (input->ExpectTag(58)) goto parse_IconName;
        break;
      }
      
      // optional string IconName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IconName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_iconname()));
        if (input->ExpectTag(64)) goto parse_PurchasePrice;
        break;
      }
      
      // optional uint32 PurchasePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PurchasePrice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &purchaseprice_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_SalePrice;
        break;
      }
      
      // optional uint32 SalePrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SalePrice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &saleprice_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PurchaseBindMoney;
        break;
      }
      
      // optional uint32 PurchaseBindMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PurchaseBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &purchasebindmoney_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SaleBindMoney;
        break;
      }
      
      // optional uint32 SaleBindMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaleBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &salebindmoney_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_Describe;
        break;
      }
      
      // optional string Describe = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Describe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_describe()));
        if (input->ExpectTag(104)) goto parse_LastTime;
        break;
      }
      
      // optional uint32 LastTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lasttime_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_StopAttack;
        break;
      }
      
      // optional uint32 StopAttack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StopAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stopattack_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_TypeDesc;
        break;
      }
      
      // optional string TypeDesc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TypeDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_typedesc()));
        if (input->ExpectTag(128)) goto parse_CanUse;
        break;
      }
      
      // optional uint32 CanUse = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanUse:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canuse_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_Disappear;
        break;
      }
      
      // optional uint32 Disappear = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Disappear:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &disappear_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_CDGroup;
        break;
      }
      
      // repeated uint32 CDGroup = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CDGroup:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_cdgroup(value);
        if (input->ExpectTag(160)) goto parse_CDGroup;
        if (input->ExpectTag(168)) goto parse_LmtMapID;
        break;
      }
      
      // repeated uint32 LmtMapID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtMapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lmtmapid(value);
        if (input->ExpectTag(168)) goto parse_LmtMapID;
        if (input->ExpectTag(176)) goto parse_ValidTime;
        break;
      }
      
      // optional uint32 ValidTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validtime_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_ValidType;
        break;
      }
      
      // optional uint32 ValidType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validtype_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_CommonID;
        break;
      }
      
      // optional uint32 CommonID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commonid_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_EatType;
        break;
      }
      
      // optional uint32 EatType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EatType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eattype_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_EatValue;
        break;
      }
      
      // optional uint32 EatValue = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EatValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eatvalue_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_CountType;
        break;
      }
      
      // optional uint32 CountType = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &counttype_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_LmtLineID;
        break;
      }
      
      // optional uint32 LmtLineID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtLineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lmtlineid_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_LmtUseMapID;
        break;
      }
      
      // repeated uint32 LmtUseMapID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtUseMapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lmtusemapid(value);
        if (input->ExpectTag(232)) goto parse_LmtUseMapID;
        if (input->ExpectTag(240)) goto parse_LmtRepetionID;
        break;
      }
      
      // repeated uint32 LmtRepetionID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtRepetionID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lmtrepetionid(value);
        if (input->ExpectTag(240)) goto parse_LmtRepetionID;
        if (input->ExpectTag(248)) goto parse_CompID;
        break;
      }
      
      // optional uint32 CompID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &compid_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_InvilidDate;
        break;
      }
      
      // optional uint32 InvilidDate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvilidDate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inviliddate_));
        _set_bit(31);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBase::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemtype(), output);
  }
  
  // optional uint32 ProcessType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->processtype(), output);
  }
  
  // optional uint32 PileLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->pilelimit(), output);
  }
  
  // optional string ItemName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->itemname(), output);
  }
  
  // optional string ModelName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->modelname(), output);
  }
  
  // optional string IconName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->iconname(), output);
  }
  
  // optional uint32 PurchasePrice = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->purchaseprice(), output);
  }
  
  // optional uint32 SalePrice = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->saleprice(), output);
  }
  
  // optional uint32 PurchaseBindMoney = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->purchasebindmoney(), output);
  }
  
  // optional uint32 SaleBindMoney = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->salebindmoney(), output);
  }
  
  // optional string Describe = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->describe(), output);
  }
  
  // optional uint32 LastTime = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->lasttime(), output);
  }
  
  // optional uint32 StopAttack = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->stopattack(), output);
  }
  
  // optional string TypeDesc = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteString(15, this->typedesc(), output);
  }
  
  // optional uint32 CanUse = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->canuse(), output);
  }
  
  // optional uint32 SkillID = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->skillid(), output);
  }
  
  // optional uint32 Level = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->level(), output);
  }
  
  // optional uint32 Disappear = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->disappear(), output);
  }
  
  // repeated uint32 CDGroup = 20;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->cdgroup(i), output);
  }
  
  // repeated uint32 LmtMapID = 21;
  for (int i = 0; i < this->lmtmapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->lmtmapid(i), output);
  }
  
  // optional uint32 ValidTime = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->validtime(), output);
  }
  
  // optional uint32 ValidType = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->validtype(), output);
  }
  
  // optional uint32 CommonID = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->commonid(), output);
  }
  
  // optional uint32 EatType = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->eattype(), output);
  }
  
  // optional uint32 EatValue = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->eatvalue(), output);
  }
  
  // optional uint32 CountType = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->counttype(), output);
  }
  
  // optional uint32 LmtLineID = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->lmtlineid(), output);
  }
  
  // repeated uint32 LmtUseMapID = 29;
  for (int i = 0; i < this->lmtusemapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->lmtusemapid(i), output);
  }
  
  // repeated uint32 LmtRepetionID = 30;
  for (int i = 0; i < this->lmtrepetionid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->lmtrepetionid(i), output);
  }
  
  // optional uint32 CompID = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->compid(), output);
  }
  
  // optional uint32 InvilidDate = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->inviliddate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemtype(), target);
  }
  
  // optional uint32 ProcessType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->processtype(), target);
  }
  
  // optional uint32 PileLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->pilelimit(), target);
  }
  
  // optional string ItemName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->itemname(), target);
  }
  
  // optional string ModelName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->modelname(), target);
  }
  
  // optional string IconName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->iconname(), target);
  }
  
  // optional uint32 PurchasePrice = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->purchaseprice(), target);
  }
  
  // optional uint32 SalePrice = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->saleprice(), target);
  }
  
  // optional uint32 PurchaseBindMoney = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->purchasebindmoney(), target);
  }
  
  // optional uint32 SaleBindMoney = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->salebindmoney(), target);
  }
  
  // optional string Describe = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->describe(), target);
  }
  
  // optional uint32 LastTime = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->lasttime(), target);
  }
  
  // optional uint32 StopAttack = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->stopattack(), target);
  }
  
  // optional string TypeDesc = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(15, this->typedesc(), target);
  }
  
  // optional uint32 CanUse = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->canuse(), target);
  }
  
  // optional uint32 SkillID = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->skillid(), target);
  }
  
  // optional uint32 Level = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->level(), target);
  }
  
  // optional uint32 Disappear = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->disappear(), target);
  }
  
  // repeated uint32 CDGroup = 20;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->cdgroup(i), target);
  }
  
  // repeated uint32 LmtMapID = 21;
  for (int i = 0; i < this->lmtmapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->lmtmapid(i), target);
  }
  
  // optional uint32 ValidTime = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->validtime(), target);
  }
  
  // optional uint32 ValidType = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->validtype(), target);
  }
  
  // optional uint32 CommonID = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->commonid(), target);
  }
  
  // optional uint32 EatType = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->eattype(), target);
  }
  
  // optional uint32 EatValue = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->eatvalue(), target);
  }
  
  // optional uint32 CountType = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->counttype(), target);
  }
  
  // optional uint32 LmtLineID = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->lmtlineid(), target);
  }
  
  // repeated uint32 LmtUseMapID = 29;
  for (int i = 0; i < this->lmtusemapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->lmtusemapid(i), target);
  }
  
  // repeated uint32 LmtRepetionID = 30;
  for (int i = 0; i < this->lmtrepetionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->lmtrepetionid(i), target);
  }
  
  // optional uint32 CompID = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->compid(), target);
  }
  
  // optional uint32 InvilidDate = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->inviliddate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ItemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemtype());
    }
    
    // optional uint32 ProcessType = 3;
    if (has_processtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->processtype());
    }
    
    // optional uint32 PileLimit = 4;
    if (has_pilelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pilelimit());
    }
    
    // optional string ItemName = 5;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->itemname());
    }
    
    // optional string ModelName = 6;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->modelname());
    }
    
    // optional string IconName = 7;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->iconname());
    }
    
    // optional uint32 PurchasePrice = 8;
    if (has_purchaseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->purchaseprice());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SalePrice = 9;
    if (has_saleprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->saleprice());
    }
    
    // optional uint32 PurchaseBindMoney = 10;
    if (has_purchasebindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->purchasebindmoney());
    }
    
    // optional uint32 SaleBindMoney = 11;
    if (has_salebindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->salebindmoney());
    }
    
    // optional string Describe = 12;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->describe());
    }
    
    // optional uint32 LastTime = 13;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lasttime());
    }
    
    // optional uint32 StopAttack = 14;
    if (has_stopattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stopattack());
    }
    
    // optional string TypeDesc = 15;
    if (has_typedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->typedesc());
    }
    
    // optional uint32 CanUse = 16;
    if (has_canuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canuse());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 SkillID = 17;
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 Level = 18;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Disappear = 19;
    if (has_disappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->disappear());
    }
    
    // optional uint32 ValidTime = 22;
    if (has_validtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validtime());
    }
    
    // optional uint32 ValidType = 23;
    if (has_validtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validtype());
    }
    
    // optional uint32 CommonID = 24;
    if (has_commonid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commonid());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 EatType = 25;
    if (has_eattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eattype());
    }
    
    // optional uint32 EatValue = 26;
    if (has_eatvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eatvalue());
    }
    
    // optional uint32 CountType = 27;
    if (has_counttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->counttype());
    }
    
    // optional uint32 LmtLineID = 28;
    if (has_lmtlineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lmtlineid());
    }
    
    // optional uint32 CompID = 31;
    if (has_compid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->compid());
    }
    
    // optional uint32 InvilidDate = 32;
    if (has_inviliddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inviliddate());
    }
    
  }
  // repeated uint32 CDGroup = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->cdgroup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->cdgroup(i));
    }
    total_size += 2 * this->cdgroup_size() + data_size;
  }
  
  // repeated uint32 LmtMapID = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->lmtmapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lmtmapid(i));
    }
    total_size += 2 * this->lmtmapid_size() + data_size;
  }
  
  // repeated uint32 LmtUseMapID = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->lmtusemapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lmtusemapid(i));
    }
    total_size += 2 * this->lmtusemapid_size() + data_size;
  }
  
  // repeated uint32 LmtRepetionID = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->lmtrepetionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lmtrepetionid(i));
    }
    total_size += 2 * this->lmtrepetionid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBase::MergeFrom(const PBItemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdgroup_.MergeFrom(from.cdgroup_);
  lmtmapid_.MergeFrom(from.lmtmapid_);
  lmtusemapid_.MergeFrom(from.lmtusemapid_);
  lmtrepetionid_.MergeFrom(from.lmtrepetionid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_itemtype(from.itemtype());
    }
    if (from._has_bit(2)) {
      set_processtype(from.processtype());
    }
    if (from._has_bit(3)) {
      set_pilelimit(from.pilelimit());
    }
    if (from._has_bit(4)) {
      set_itemname(from.itemname());
    }
    if (from._has_bit(5)) {
      set_modelname(from.modelname());
    }
    if (from._has_bit(6)) {
      set_iconname(from.iconname());
    }
    if (from._has_bit(7)) {
      set_purchaseprice(from.purchaseprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_saleprice(from.saleprice());
    }
    if (from._has_bit(9)) {
      set_purchasebindmoney(from.purchasebindmoney());
    }
    if (from._has_bit(10)) {
      set_salebindmoney(from.salebindmoney());
    }
    if (from._has_bit(11)) {
      set_describe(from.describe());
    }
    if (from._has_bit(12)) {
      set_lasttime(from.lasttime());
    }
    if (from._has_bit(13)) {
      set_stopattack(from.stopattack());
    }
    if (from._has_bit(14)) {
      set_typedesc(from.typedesc());
    }
    if (from._has_bit(15)) {
      set_canuse(from.canuse());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(17)) {
      set_level(from.level());
    }
    if (from._has_bit(18)) {
      set_disappear(from.disappear());
    }
    if (from._has_bit(21)) {
      set_validtime(from.validtime());
    }
    if (from._has_bit(22)) {
      set_validtype(from.validtype());
    }
    if (from._has_bit(23)) {
      set_commonid(from.commonid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_eattype(from.eattype());
    }
    if (from._has_bit(25)) {
      set_eatvalue(from.eatvalue());
    }
    if (from._has_bit(26)) {
      set_counttype(from.counttype());
    }
    if (from._has_bit(27)) {
      set_lmtlineid(from.lmtlineid());
    }
    if (from._has_bit(30)) {
      set_compid(from.compid());
    }
    if (from._has_bit(31)) {
      set_inviliddate(from.inviliddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBase::CopyFrom(const PBItemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBase::Swap(PBItemBase* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(processtype_, other->processtype_);
    std::swap(pilelimit_, other->pilelimit_);
    std::swap(itemname_, other->itemname_);
    std::swap(modelname_, other->modelname_);
    std::swap(iconname_, other->iconname_);
    std::swap(purchaseprice_, other->purchaseprice_);
    std::swap(saleprice_, other->saleprice_);
    std::swap(purchasebindmoney_, other->purchasebindmoney_);
    std::swap(salebindmoney_, other->salebindmoney_);
    std::swap(describe_, other->describe_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(stopattack_, other->stopattack_);
    std::swap(typedesc_, other->typedesc_);
    std::swap(canuse_, other->canuse_);
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(disappear_, other->disappear_);
    cdgroup_.Swap(&other->cdgroup_);
    lmtmapid_.Swap(&other->lmtmapid_);
    std::swap(validtime_, other->validtime_);
    std::swap(validtype_, other->validtype_);
    std::swap(commonid_, other->commonid_);
    std::swap(eattype_, other->eattype_);
    std::swap(eatvalue_, other->eatvalue_);
    std::swap(counttype_, other->counttype_);
    std::swap(lmtlineid_, other->lmtlineid_);
    lmtusemapid_.Swap(&other->lmtusemapid_);
    lmtrepetionid_.Swap(&other->lmtrepetionid_);
    std::swap(compid_, other->compid_);
    std::swap(inviliddate_, other->inviliddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBase::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBase::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBase::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBase_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemReturn::kBaseInfoFieldNumber;
const int PBItemReturn::kTimerFieldNumber;
#endif  // !_MSC_VER

PBItemReturn::PBItemReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemReturn::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemReturn::PBItemReturn(const PBItemReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemReturn::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  timer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemReturn::~PBItemReturn() {
  SharedDtor();
}

void PBItemReturn::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemReturn_descriptor_;
}

const PBItemReturn& PBItemReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemReturn* PBItemReturn::default_instance_ = NULL;

PBItemReturn* PBItemReturn::New() const {
  return new PBItemReturn;
}

void PBItemReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    timer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Timer;
        break;
      }
      
      // optional uint32 Timer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Timer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timer_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemReturn::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Timer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->timer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Timer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->timer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Timer = 2;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemReturn::MergeFrom(const PBItemReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemReturn::CopyFrom(const PBItemReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemReturn::Swap(PBItemReturn* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemReturn::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemReturn::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemReturn::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemReturn_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemSkillBook::kBaseInfoFieldNumber;
const int PBItemSkillBook::kColorFieldNumber;
const int PBItemSkillBook::kSkillIDFieldNumber;
const int PBItemSkillBook::kSuccProbFieldNumber;
const int PBItemSkillBook::kNeedMoneyTypeFieldNumber;
const int PBItemSkillBook::kNeedMoneyFieldNumber;
#endif  // !_MSC_VER

PBItemSkillBook::PBItemSkillBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSkillBook::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemSkillBook::PBItemSkillBook(const PBItemSkillBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSkillBook::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  color_ = 0u;
  skillid_ = 0u;
  succprob_ = 0u;
  needmoneytype_ = 0u;
  needmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSkillBook::~PBItemSkillBook() {
  SharedDtor();
}

void PBItemSkillBook::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemSkillBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSkillBook_descriptor_;
}

const PBItemSkillBook& PBItemSkillBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemSkillBook* PBItemSkillBook::default_instance_ = NULL;

PBItemSkillBook* PBItemSkillBook::New() const {
  return new PBItemSkillBook;
}

void PBItemSkillBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    color_ = 0u;
    skillid_ = 0u;
    succprob_ = 0u;
    needmoneytype_ = 0u;
    needmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSkillBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SuccProb;
        break;
      }
      
      // optional uint32 SuccProb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuccProb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &succprob_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_NeedMoneyType;
        break;
      }
      
      // optional uint32 NeedMoneyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoneyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoneytype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NeedMoney;
        break;
      }
      
      // optional uint32 NeedMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoney_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSkillBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemSkillBook::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->color(), output);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->skillid(), output);
  }
  
  // optional uint32 SuccProb = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->succprob(), output);
  }
  
  // optional uint32 NeedMoneyType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->needmoneytype(), output);
  }
  
  // optional uint32 NeedMoney = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->needmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSkillBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->color(), target);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->skillid(), target);
  }
  
  // optional uint32 SuccProb = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->succprob(), target);
  }
  
  // optional uint32 NeedMoneyType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->needmoneytype(), target);
  }
  
  // optional uint32 NeedMoney = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->needmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSkillBook::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
    // optional uint32 SkillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 SuccProb = 4;
    if (has_succprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->succprob());
    }
    
    // optional uint32 NeedMoneyType = 5;
    if (has_needmoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoneytype());
    }
    
    // optional uint32 NeedMoney = 6;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemSkillBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSkillBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSkillBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSkillBook::MergeFrom(const PBItemSkillBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_color(from.color());
    }
    if (from._has_bit(2)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(3)) {
      set_succprob(from.succprob());
    }
    if (from._has_bit(4)) {
      set_needmoneytype(from.needmoneytype());
    }
    if (from._has_bit(5)) {
      set_needmoney(from.needmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSkillBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSkillBook::CopyFrom(const PBItemSkillBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSkillBook::Swap(PBItemSkillBook* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(color_, other->color_);
    std::swap(skillid_, other->skillid_);
    std::swap(succprob_, other->succprob_);
    std::swap(needmoneytype_, other->needmoneytype_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemSkillBook::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemSkillBook::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemSkillBook::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemSkillBook_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemBindStone::kBaseInfoFieldNumber;
const int PBItemBindStone::kFaceGroupIDFieldNumber;
const int PBItemBindStone::kBindStoneTypeFieldNumber;
#endif  // !_MSC_VER

PBItemBindStone::PBItemBindStone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBindStone::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemBindStone::PBItemBindStone(const PBItemBindStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBindStone::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  facegroupid_ = 0u;
  bindstonetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBindStone::~PBItemBindStone() {
  SharedDtor();
}

void PBItemBindStone::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemBindStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBindStone_descriptor_;
}

const PBItemBindStone& PBItemBindStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemBindStone* PBItemBindStone::default_instance_ = NULL;

PBItemBindStone* PBItemBindStone::New() const {
  return new PBItemBindStone;
}

void PBItemBindStone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    facegroupid_ = 0u;
    bindstonetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBindStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_FaceGroupID;
        break;
      }
      
      // optional uint32 FaceGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceGroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facegroupid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BindStoneType;
        break;
      }
      
      // optional uint32 BindStoneType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindStoneType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindstonetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBindStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBindStone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->facegroupid(), output);
  }
  
  // optional uint32 BindStoneType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bindstonetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBindStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->facegroupid(), target);
  }
  
  // optional uint32 BindStoneType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bindstonetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBindStone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 FaceGroupID = 2;
    if (has_facegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facegroupid());
    }
    
    // optional uint32 BindStoneType = 3;
    if (has_bindstonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindstonetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBindStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBindStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBindStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBindStone::MergeFrom(const PBItemBindStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_facegroupid(from.facegroupid());
    }
    if (from._has_bit(2)) {
      set_bindstonetype(from.bindstonetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBindStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBindStone::CopyFrom(const PBItemBindStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBindStone::Swap(PBItemBindStone* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(facegroupid_, other->facegroupid_);
    std::swap(bindstonetype_, other->bindstonetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBindStone::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBindStone::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBindStone::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBindStone_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemScroll::kBaseInfoFieldNumber;
const int PBItemScroll::kGetTaskIDFieldNumber;
#endif  // !_MSC_VER

PBItemScroll::PBItemScroll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemScroll::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemScroll::PBItemScroll(const PBItemScroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemScroll::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  gettaskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemScroll::~PBItemScroll() {
  SharedDtor();
}

void PBItemScroll::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemScroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemScroll_descriptor_;
}

const PBItemScroll& PBItemScroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemScroll* PBItemScroll::default_instance_ = NULL;

PBItemScroll* PBItemScroll::New() const {
  return new PBItemScroll;
}

void PBItemScroll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    gettaskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_GetTaskID;
        break;
      }
      
      // optional uint32 GetTaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GetTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gettaskid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemScroll::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 GetTaskID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->gettaskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemScroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 GetTaskID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->gettaskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemScroll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 GetTaskID = 2;
    if (has_gettaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gettaskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemScroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemScroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemScroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemScroll::MergeFrom(const PBItemScroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_gettaskid(from.gettaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemScroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemScroll::CopyFrom(const PBItemScroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemScroll::Swap(PBItemScroll* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(gettaskid_, other->gettaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemScroll::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemScroll::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemScroll::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemScroll_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemCall::kBaseInfoFieldNumber;
const int PBItemCall::kCallNpcIDFieldNumber;
const int PBItemCall::kXFieldNumber;
const int PBItemCall::kYFieldNumber;
const int PBItemCall::kIsDestroyFieldNumber;
const int PBItemCall::kMapIDFieldNumber;
const int PBItemCall::kLmtMapIDFieldNumber;
const int PBItemCall::kLmtXFieldNumber;
const int PBItemCall::kLmtYFieldNumber;
const int PBItemCall::kLmtWideFieldNumber;
const int PBItemCall::kLmtHeightFieldNumber;
#endif  // !_MSC_VER

PBItemCall::PBItemCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemCall::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemCall::PBItemCall(const PBItemCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemCall::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  callnpcid_ = 0u;
  x_ = 0;
  y_ = 0;
  isdestroy_ = 0;
  mapid_ = 0;
  lmtmapid_ = 0;
  lmtx_ = 0;
  lmty_ = 0;
  lmtwide_ = 0;
  lmtheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemCall::~PBItemCall() {
  SharedDtor();
}

void PBItemCall::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemCall_descriptor_;
}

const PBItemCall& PBItemCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemCall* PBItemCall::default_instance_ = NULL;

PBItemCall* PBItemCall::New() const {
  return new PBItemCall;
}

void PBItemCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    callnpcid_ = 0u;
    x_ = 0;
    y_ = 0;
    isdestroy_ = 0;
    mapid_ = 0;
    lmtmapid_ = 0;
    lmtx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lmty_ = 0;
    lmtwide_ = 0;
    lmtheight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_CallNpcID;
        break;
      }
      
      // optional uint32 CallNpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CallNpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &callnpcid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }
      
      // optional int32 X = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_X:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &x_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Y;
        break;
      }
      
      // optional int32 Y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &y_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IsDestroy;
        break;
      }
      
      // optional int32 IsDestroy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsDestroy:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &isdestroy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MapID;
        break;
      }
      
      // optional int32 MapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &mapid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LmtMapID;
        break;
      }
      
      // optional int32 LmtMapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lmtmapid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LmtX;
        break;
      }
      
      // optional int32 LmtX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtX:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lmtx_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LmtY;
        break;
      }
      
      // optional int32 LmtY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtY:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lmty_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LmtWide;
        break;
      }
      
      // optional int32 LmtWide = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtWide:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lmtwide_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_LmtHeight;
        break;
      }
      
      // optional int32 LmtHeight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtHeight:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lmtheight_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemCall::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 CallNpcID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->callnpcid(), output);
  }
  
  // optional int32 X = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->x(), output);
  }
  
  // optional int32 Y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->y(), output);
  }
  
  // optional int32 IsDestroy = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->isdestroy(), output);
  }
  
  // optional int32 MapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->mapid(), output);
  }
  
  // optional int32 LmtMapID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->lmtmapid(), output);
  }
  
  // optional int32 LmtX = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->lmtx(), output);
  }
  
  // optional int32 LmtY = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->lmty(), output);
  }
  
  // optional int32 LmtWide = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->lmtwide(), output);
  }
  
  // optional int32 LmtHeight = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->lmtheight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 CallNpcID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->callnpcid(), target);
  }
  
  // optional int32 X = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->x(), target);
  }
  
  // optional int32 Y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->y(), target);
  }
  
  // optional int32 IsDestroy = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->isdestroy(), target);
  }
  
  // optional int32 MapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->mapid(), target);
  }
  
  // optional int32 LmtMapID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->lmtmapid(), target);
  }
  
  // optional int32 LmtX = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->lmtx(), target);
  }
  
  // optional int32 LmtY = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->lmty(), target);
  }
  
  // optional int32 LmtWide = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->lmtwide(), target);
  }
  
  // optional int32 LmtHeight = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->lmtheight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemCall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 CallNpcID = 2;
    if (has_callnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->callnpcid());
    }
    
    // optional int32 X = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->x());
    }
    
    // optional int32 Y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->y());
    }
    
    // optional int32 IsDestroy = 5;
    if (has_isdestroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->isdestroy());
    }
    
    // optional int32 MapID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->mapid());
    }
    
    // optional int32 LmtMapID = 7;
    if (has_lmtmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lmtmapid());
    }
    
    // optional int32 LmtX = 8;
    if (has_lmtx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lmtx());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LmtY = 9;
    if (has_lmty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lmty());
    }
    
    // optional int32 LmtWide = 10;
    if (has_lmtwide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lmtwide());
    }
    
    // optional int32 LmtHeight = 11;
    if (has_lmtheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lmtheight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemCall::MergeFrom(const PBItemCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_callnpcid(from.callnpcid());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_isdestroy(from.isdestroy());
    }
    if (from._has_bit(5)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(6)) {
      set_lmtmapid(from.lmtmapid());
    }
    if (from._has_bit(7)) {
      set_lmtx(from.lmtx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_lmty(from.lmty());
    }
    if (from._has_bit(9)) {
      set_lmtwide(from.lmtwide());
    }
    if (from._has_bit(10)) {
      set_lmtheight(from.lmtheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemCall::CopyFrom(const PBItemCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemCall::Swap(PBItemCall* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(callnpcid_, other->callnpcid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(isdestroy_, other->isdestroy_);
    std::swap(mapid_, other->mapid_);
    std::swap(lmtmapid_, other->lmtmapid_);
    std::swap(lmtx_, other->lmtx_);
    std::swap(lmty_, other->lmty_);
    std::swap(lmtwide_, other->lmtwide_);
    std::swap(lmtheight_, other->lmtheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemCall::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemCall::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemCall::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemCall_reflection_;
}

// ===================================================================

const ::std::string PBItemCard::_default_showtext_;
const ::std::string PBItemCard::_default_weapon_;
const ::std::string PBItemCard::_default_skill_;
const ::std::string PBItemCard::_default_level_;
#ifndef _MSC_VER
const int PBItemCard::kBaseInfoFieldNumber;
const int PBItemCard::kShowTextFieldNumber;
const int PBItemCard::kOrderFieldNumber;
const int PBItemCard::kWeaponFieldNumber;
const int PBItemCard::kSkillFieldNumber;
const int PBItemCard::kLevelFieldNumber;
const int PBItemCard::kExpFieldNumber;
const int PBItemCard::kCanExchangeFieldNumber;
const int PBItemCard::kCanChallengeFieldNumber;
const int PBItemCard::kTypeFieldNumber;
const int PBItemCard::kPosFieldNumber;
const int PBItemCard::kBonusFieldNumber;
const int PBItemCard::kSkillID1FieldNumber;
const int PBItemCard::kSkillID2FieldNumber;
#endif  // !_MSC_VER

PBItemCard::PBItemCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemCard::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemCard::PBItemCard(const PBItemCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemCard::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  showtext_ = const_cast< ::std::string*>(&_default_showtext_);
  order_ = 0u;
  weapon_ = const_cast< ::std::string*>(&_default_weapon_);
  skill_ = const_cast< ::std::string*>(&_default_skill_);
  level_ = const_cast< ::std::string*>(&_default_level_);
  exp_ = 0u;
  canexchange_ = 0u;
  canchallenge_ = 0u;
  type_ = 0u;
  pos_ = 0u;
  bonus_ = 0u;
  skillid1_ = 0u;
  skillid2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemCard::~PBItemCard() {
  SharedDtor();
}

void PBItemCard::SharedDtor() {
  if (showtext_ != &_default_showtext_) {
    delete showtext_;
  }
  if (weapon_ != &_default_weapon_) {
    delete weapon_;
  }
  if (skill_ != &_default_skill_) {
    delete skill_;
  }
  if (level_ != &_default_level_) {
    delete level_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemCard_descriptor_;
}

const PBItemCard& PBItemCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemCard* PBItemCard::default_instance_ = NULL;

PBItemCard* PBItemCard::New() const {
  return new PBItemCard;
}

void PBItemCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    if (_has_bit(1)) {
      if (showtext_ != &_default_showtext_) {
        showtext_->clear();
      }
    }
    order_ = 0u;
    if (_has_bit(3)) {
      if (weapon_ != &_default_weapon_) {
        weapon_->clear();
      }
    }
    if (_has_bit(4)) {
      if (skill_ != &_default_skill_) {
        skill_->clear();
      }
    }
    if (_has_bit(5)) {
      if (level_ != &_default_level_) {
        level_->clear();
      }
    }
    exp_ = 0u;
    canexchange_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    canchallenge_ = 0u;
    type_ = 0u;
    pos_ = 0u;
    bonus_ = 0u;
    skillid1_ = 0u;
    skillid2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(18)) goto parse_ShowText;
        break;
      }
      
      // optional string ShowText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowText:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_showtext()));
        if (input->ExpectTag(24)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Weapon;
        break;
      }
      
      // optional string Weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Weapon:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_weapon()));
        if (input->ExpectTag(42)) goto parse_Skill;
        break;
      }
      
      // optional string Skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Skill:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_skill()));
        if (input->ExpectTag(50)) goto parse_Level;
        break;
      }
      
      // optional string Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_level()));
        if (input->ExpectTag(56)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CanExchange;
        break;
      }
      
      // optional uint32 CanExchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanExchange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canexchange_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_CanChallenge;
        break;
      }
      
      // optional uint32 CanChallenge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanChallenge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canchallenge_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_Pos;
        break;
      }
      
      // optional uint32 Pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Pos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pos_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Bonus;
        break;
      }
      
      // optional uint32 Bonus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Bonus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bonus_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_SkillID1;
        break;
      }
      
      // optional uint32 SkillID1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid1_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_SkillID2;
        break;
      }
      
      // optional uint32 SkillID2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid2_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemCard::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional string ShowText = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->showtext(), output);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->order(), output);
  }
  
  // optional string Weapon = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->weapon(), output);
  }
  
  // optional string Skill = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->skill(), output);
  }
  
  // optional string Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->level(), output);
  }
  
  // optional uint32 Exp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->exp(), output);
  }
  
  // optional uint32 CanExchange = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->canexchange(), output);
  }
  
  // optional uint32 CanChallenge = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->canchallenge(), output);
  }
  
  // optional uint32 Type = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->type(), output);
  }
  
  // optional uint32 Pos = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->pos(), output);
  }
  
  // optional uint32 Bonus = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->bonus(), output);
  }
  
  // optional uint32 SkillID1 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->skillid1(), output);
  }
  
  // optional uint32 SkillID2 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->skillid2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional string ShowText = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->showtext(), target);
  }
  
  // optional uint32 Order = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->order(), target);
  }
  
  // optional string Weapon = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->weapon(), target);
  }
  
  // optional string Skill = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->skill(), target);
  }
  
  // optional string Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->level(), target);
  }
  
  // optional uint32 Exp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->exp(), target);
  }
  
  // optional uint32 CanExchange = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->canexchange(), target);
  }
  
  // optional uint32 CanChallenge = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->canchallenge(), target);
  }
  
  // optional uint32 Type = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->type(), target);
  }
  
  // optional uint32 Pos = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->pos(), target);
  }
  
  // optional uint32 Bonus = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->bonus(), target);
  }
  
  // optional uint32 SkillID1 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->skillid1(), target);
  }
  
  // optional uint32 SkillID2 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->skillid2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional string ShowText = 2;
    if (has_showtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->showtext());
    }
    
    // optional uint32 Order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
    // optional string Weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->weapon());
    }
    
    // optional string Skill = 5;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->skill());
    }
    
    // optional string Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->level());
    }
    
    // optional uint32 Exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
    // optional uint32 CanExchange = 8;
    if (has_canexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canexchange());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CanChallenge = 9;
    if (has_canchallenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canchallenge());
    }
    
    // optional uint32 Type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Pos = 11;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pos());
    }
    
    // optional uint32 Bonus = 12;
    if (has_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bonus());
    }
    
    // optional uint32 SkillID1 = 13;
    if (has_skillid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid1());
    }
    
    // optional uint32 SkillID2 = 14;
    if (has_skillid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemCard::MergeFrom(const PBItemCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_showtext(from.showtext());
    }
    if (from._has_bit(2)) {
      set_order(from.order());
    }
    if (from._has_bit(3)) {
      set_weapon(from.weapon());
    }
    if (from._has_bit(4)) {
      set_skill(from.skill());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_exp(from.exp());
    }
    if (from._has_bit(7)) {
      set_canexchange(from.canexchange());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_canchallenge(from.canchallenge());
    }
    if (from._has_bit(9)) {
      set_type(from.type());
    }
    if (from._has_bit(10)) {
      set_pos(from.pos());
    }
    if (from._has_bit(11)) {
      set_bonus(from.bonus());
    }
    if (from._has_bit(12)) {
      set_skillid1(from.skillid1());
    }
    if (from._has_bit(13)) {
      set_skillid2(from.skillid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemCard::CopyFrom(const PBItemCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemCard::Swap(PBItemCard* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(showtext_, other->showtext_);
    std::swap(order_, other->order_);
    std::swap(weapon_, other->weapon_);
    std::swap(skill_, other->skill_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(canexchange_, other->canexchange_);
    std::swap(canchallenge_, other->canchallenge_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(bonus_, other->bonus_);
    std::swap(skillid1_, other->skillid1_);
    std::swap(skillid2_, other->skillid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemCard::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemCard::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemCard::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemCard_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemTeleport::kBaseInfoFieldNumber;
const int PBItemTeleport::kMapIDFieldNumber;
const int PBItemTeleport::kUseTimesFieldNumber;
#endif  // !_MSC_VER

PBItemTeleport::PBItemTeleport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemTeleport::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemTeleport::PBItemTeleport(const PBItemTeleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemTeleport::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mapid_ = 0u;
  usetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemTeleport::~PBItemTeleport() {
  SharedDtor();
}

void PBItemTeleport::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemTeleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemTeleport_descriptor_;
}

const PBItemTeleport& PBItemTeleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemTeleport* PBItemTeleport::default_instance_ = NULL;

PBItemTeleport* PBItemTeleport::New() const {
  return new PBItemTeleport;
}

void PBItemTeleport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    mapid_ = 0u;
    usetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemTeleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UseTimes;
        break;
      }
      
      // optional uint32 UseTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usetimes_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemTeleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemTeleport::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 UseTimes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->usetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemTeleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 UseTimes = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->usetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemTeleport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 UseTimes = 3;
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usetimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemTeleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemTeleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemTeleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemTeleport::MergeFrom(const PBItemTeleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_usetimes(from.usetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemTeleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTeleport::CopyFrom(const PBItemTeleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTeleport::Swap(PBItemTeleport* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mapid_, other->mapid_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemTeleport::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemTeleport::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemTeleport::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemTeleport_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemReturnPaper::kBaseInfoFieldNumber;
const int PBItemReturnPaper::kLineIDFieldNumber;
const int PBItemReturnPaper::kMapIDFieldNumber;
const int PBItemReturnPaper::kPosXFieldNumber;
const int PBItemReturnPaper::kPosYFieldNumber;
#endif  // !_MSC_VER

PBItemReturnPaper::PBItemReturnPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemReturnPaper::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemReturnPaper::PBItemReturnPaper(const PBItemReturnPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemReturnPaper::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemReturnPaper::~PBItemReturnPaper() {
  SharedDtor();
}

void PBItemReturnPaper::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemReturnPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemReturnPaper_descriptor_;
}

const PBItemReturnPaper& PBItemReturnPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemReturnPaper* PBItemReturnPaper::default_instance_ = NULL;

PBItemReturnPaper* PBItemReturnPaper::New() const {
  return new PBItemReturnPaper;
}

void PBItemReturnPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemReturnPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemReturnPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemReturnPaper::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemReturnPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemReturnPaper::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemReturnPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemReturnPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemReturnPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemReturnPaper::MergeFrom(const PBItemReturnPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemReturnPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemReturnPaper::CopyFrom(const PBItemReturnPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemReturnPaper::Swap(PBItemReturnPaper* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemReturnPaper::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemReturnPaper::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemReturnPaper::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemReturnPaper_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemTeleSymbol::kBaseInfoFieldNumber;
const int PBItemTeleSymbol::kTeleTableFieldNumber;
const int PBItemTeleSymbol::kUseTimesFieldNumber;
#endif  // !_MSC_VER

PBItemTeleSymbol::PBItemTeleSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemTeleSymbol::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemTeleSymbol::PBItemTeleSymbol(const PBItemTeleSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemTeleSymbol::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  teletable_ = 0u;
  usetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemTeleSymbol::~PBItemTeleSymbol() {
  SharedDtor();
}

void PBItemTeleSymbol::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemTeleSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemTeleSymbol_descriptor_;
}

const PBItemTeleSymbol& PBItemTeleSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemTeleSymbol* PBItemTeleSymbol::default_instance_ = NULL;

PBItemTeleSymbol* PBItemTeleSymbol::New() const {
  return new PBItemTeleSymbol;
}

void PBItemTeleSymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    teletable_ = 0u;
    usetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemTeleSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_TeleTable;
        break;
      }
      
      // optional uint32 TeleTable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeleTable:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teletable_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UseTimes;
        break;
      }
      
      // optional uint32 UseTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usetimes_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemTeleSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemTeleSymbol::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 TeleTable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->teletable(), output);
  }
  
  // optional uint32 UseTimes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->usetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemTeleSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 TeleTable = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->teletable(), target);
  }
  
  // optional uint32 UseTimes = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->usetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemTeleSymbol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 TeleTable = 2;
    if (has_teletable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teletable());
    }
    
    // optional uint32 UseTimes = 3;
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usetimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemTeleSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemTeleSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemTeleSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemTeleSymbol::MergeFrom(const PBItemTeleSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_teletable(from.teletable());
    }
    if (from._has_bit(2)) {
      set_usetimes(from.usetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemTeleSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTeleSymbol::CopyFrom(const PBItemTeleSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTeleSymbol::Swap(PBItemTeleSymbol* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(teletable_, other->teletable_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemTeleSymbol::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemTeleSymbol::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemTeleSymbol::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemTeleSymbol_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemStove::kBaseInfoFieldNumber;
const int PBItemStove::kLineIDFieldNumber;
const int PBItemStove::kMapIDFieldNumber;
const int PBItemStove::kPosXFieldNumber;
const int PBItemStove::kPosYFieldNumber;
const int PBItemStove::kCoolTimeFieldNumber;
const int PBItemStove::kMetierLimitFieldNumber;
const int PBItemStove::kLevelLimitFieldNumber;
#endif  // !_MSC_VER

PBItemStove::PBItemStove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemStove::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemStove::PBItemStove(const PBItemStove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemStove::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  lineid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  cooltime_ = 0u;
  metierlimit_ = 0u;
  levellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemStove::~PBItemStove() {
  SharedDtor();
}

void PBItemStove::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemStove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemStove_descriptor_;
}

const PBItemStove& PBItemStove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemStove* PBItemStove::default_instance_ = NULL;

PBItemStove* PBItemStove::New() const {
  return new PBItemStove;
}

void PBItemStove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    lineid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    cooltime_ = 0u;
    metierlimit_ = 0u;
    levellimit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemStove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CoolTime;
        break;
      }
      
      // optional uint32 CoolTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoolTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooltime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MetierLimit;
        break;
      }
      
      // optional uint32 MetierLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierlimit_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemStove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemStove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 CoolTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->cooltime(), output);
  }
  
  // optional uint32 MetierLimit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->metierlimit(), output);
  }
  
  // optional uint32 LevelLimit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->levellimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemStove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 CoolTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->cooltime(), target);
  }
  
  // optional uint32 MetierLimit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->metierlimit(), target);
  }
  
  // optional uint32 LevelLimit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->levellimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemStove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 CoolTime = 6;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooltime());
    }
    
    // optional uint32 MetierLimit = 7;
    if (has_metierlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierlimit());
    }
    
    // optional uint32 LevelLimit = 8;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemStove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemStove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemStove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemStove::MergeFrom(const PBItemStove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_cooltime(from.cooltime());
    }
    if (from._has_bit(6)) {
      set_metierlimit(from.metierlimit());
    }
    if (from._has_bit(7)) {
      set_levellimit(from.levellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemStove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemStove::CopyFrom(const PBItemStove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemStove::Swap(PBItemStove* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(metierlimit_, other->metierlimit_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemStove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemStove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemStove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemStove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemPetEgg::kBaseInfoFieldNumber;
const int PBItemPetEgg::kPetTempIDFieldNumber;
const int PBItemPetEgg::kNeedItemIDFieldNumber;
const int PBItemPetEgg::kRevertPriceFieldNumber;
const int PBItemPetEgg::kInitAdviceFieldNumber;
const int PBItemPetEgg::kInitLevelFieldNumber;
const int PBItemPetEgg::kInitExpFieldNumber;
const int PBItemPetEgg::kInitSkillPointFieldNumber;
const int PBItemPetEgg::kInitSkillIDFieldNumber;
const int PBItemPetEgg::kInitSkillLevelFieldNumber;
#endif  // !_MSC_VER

PBItemPetEgg::PBItemPetEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemPetEgg::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemPetEgg::PBItemPetEgg(const PBItemPetEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemPetEgg::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  pettempid_ = 0u;
  needitemid_ = 0u;
  revertprice_ = 0u;
  initadvice_ = 0u;
  initlevel_ = 0u;
  initexp_ = 0u;
  initskillpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemPetEgg::~PBItemPetEgg() {
  SharedDtor();
}

void PBItemPetEgg::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemPetEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemPetEgg_descriptor_;
}

const PBItemPetEgg& PBItemPetEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemPetEgg* PBItemPetEgg::default_instance_ = NULL;

PBItemPetEgg* PBItemPetEgg::New() const {
  return new PBItemPetEgg;
}

void PBItemPetEgg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    pettempid_ = 0u;
    needitemid_ = 0u;
    revertprice_ = 0u;
    initadvice_ = 0u;
    initlevel_ = 0u;
    initexp_ = 0u;
    initskillpoint_ = 0u;
  }
  initskillid_.Clear();
  initskilllevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemPetEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_PetTempID;
        break;
      }
      
      // optional uint32 PetTempID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pettempid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedItemID;
        break;
      }
      
      // optional uint32 NeedItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needitemid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RevertPrice;
        break;
      }
      
      // optional uint32 RevertPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RevertPrice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &revertprice_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_InitAdvice;
        break;
      }
      
      // optional uint32 InitAdvice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitAdvice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initadvice_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_InitLevel;
        break;
      }
      
      // optional uint32 InitLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_InitExp;
        break;
      }
      
      // optional uint32 InitExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initexp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_InitSkillPoint;
        break;
      }
      
      // optional uint32 InitSkillPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSkillPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initskillpoint_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_InitSkillID;
        break;
      }
      
      // repeated uint32 InitSkillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSkillID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_initskillid(value);
        if (input->ExpectTag(72)) goto parse_InitSkillID;
        if (input->ExpectTag(80)) goto parse_InitSkillLevel;
        break;
      }
      
      // repeated uint32 InitSkillLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSkillLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_initskilllevel(value);
        if (input->ExpectTag(80)) goto parse_InitSkillLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemPetEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemPetEgg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 PetTempID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->pettempid(), output);
  }
  
  // optional uint32 NeedItemID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needitemid(), output);
  }
  
  // optional uint32 RevertPrice = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->revertprice(), output);
  }
  
  // optional uint32 InitAdvice = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->initadvice(), output);
  }
  
  // optional uint32 InitLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->initlevel(), output);
  }
  
  // optional uint32 InitExp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->initexp(), output);
  }
  
  // optional uint32 InitSkillPoint = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->initskillpoint(), output);
  }
  
  // repeated uint32 InitSkillID = 9;
  for (int i = 0; i < this->initskillid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->initskillid(i), output);
  }
  
  // repeated uint32 InitSkillLevel = 10;
  for (int i = 0; i < this->initskilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->initskilllevel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemPetEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 PetTempID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->pettempid(), target);
  }
  
  // optional uint32 NeedItemID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needitemid(), target);
  }
  
  // optional uint32 RevertPrice = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->revertprice(), target);
  }
  
  // optional uint32 InitAdvice = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->initadvice(), target);
  }
  
  // optional uint32 InitLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->initlevel(), target);
  }
  
  // optional uint32 InitExp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->initexp(), target);
  }
  
  // optional uint32 InitSkillPoint = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->initskillpoint(), target);
  }
  
  // repeated uint32 InitSkillID = 9;
  for (int i = 0; i < this->initskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->initskillid(i), target);
  }
  
  // repeated uint32 InitSkillLevel = 10;
  for (int i = 0; i < this->initskilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->initskilllevel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemPetEgg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 PetTempID = 2;
    if (has_pettempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pettempid());
    }
    
    // optional uint32 NeedItemID = 3;
    if (has_needitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needitemid());
    }
    
    // optional uint32 RevertPrice = 4;
    if (has_revertprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->revertprice());
    }
    
    // optional uint32 InitAdvice = 5;
    if (has_initadvice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initadvice());
    }
    
    // optional uint32 InitLevel = 6;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlevel());
    }
    
    // optional uint32 InitExp = 7;
    if (has_initexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initexp());
    }
    
    // optional uint32 InitSkillPoint = 8;
    if (has_initskillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initskillpoint());
    }
    
  }
  // repeated uint32 InitSkillID = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->initskillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->initskillid(i));
    }
    total_size += 1 * this->initskillid_size() + data_size;
  }
  
  // repeated uint32 InitSkillLevel = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->initskilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->initskilllevel(i));
    }
    total_size += 1 * this->initskilllevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemPetEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemPetEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemPetEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemPetEgg::MergeFrom(const PBItemPetEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  initskillid_.MergeFrom(from.initskillid_);
  initskilllevel_.MergeFrom(from.initskilllevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_pettempid(from.pettempid());
    }
    if (from._has_bit(2)) {
      set_needitemid(from.needitemid());
    }
    if (from._has_bit(3)) {
      set_revertprice(from.revertprice());
    }
    if (from._has_bit(4)) {
      set_initadvice(from.initadvice());
    }
    if (from._has_bit(5)) {
      set_initlevel(from.initlevel());
    }
    if (from._has_bit(6)) {
      set_initexp(from.initexp());
    }
    if (from._has_bit(7)) {
      set_initskillpoint(from.initskillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemPetEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPetEgg::CopyFrom(const PBItemPetEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPetEgg::Swap(PBItemPetEgg* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(pettempid_, other->pettempid_);
    std::swap(needitemid_, other->needitemid_);
    std::swap(revertprice_, other->revertprice_);
    std::swap(initadvice_, other->initadvice_);
    std::swap(initlevel_, other->initlevel_);
    std::swap(initexp_, other->initexp_);
    std::swap(initskillpoint_, other->initskillpoint_);
    initskillid_.Swap(&other->initskillid_);
    initskilllevel_.Swap(&other->initskilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemPetEgg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemPetEgg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemPetEgg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemPetEgg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemPetFood::kBaseInfoFieldNumber;
const int PBItemPetFood::kInitLevelFieldNumber;
const int PBItemPetFood::kFullLevelFieldNumber;
const int PBItemPetFood::kTypeMaskFieldNumber;
#endif  // !_MSC_VER

PBItemPetFood::PBItemPetFood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemPetFood::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemPetFood::PBItemPetFood(const PBItemPetFood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemPetFood::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  initlevel_ = 0u;
  fulllevel_ = 0u;
  typemask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemPetFood::~PBItemPetFood() {
  SharedDtor();
}

void PBItemPetFood::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemPetFood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemPetFood_descriptor_;
}

const PBItemPetFood& PBItemPetFood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemPetFood* PBItemPetFood::default_instance_ = NULL;

PBItemPetFood* PBItemPetFood::New() const {
  return new PBItemPetFood;
}

void PBItemPetFood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    initlevel_ = 0u;
    fulllevel_ = 0u;
    typemask_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemPetFood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_InitLevel;
        break;
      }
      
      // optional uint32 InitLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FullLevel;
        break;
      }
      
      // optional uint32 FullLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FullLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fulllevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TypeMask;
        break;
      }
      
      // optional uint32 TypeMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TypeMask:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typemask_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemPetFood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemPetFood::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 InitLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->initlevel(), output);
  }
  
  // optional uint32 FullLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->fulllevel(), output);
  }
  
  // optional uint32 TypeMask = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->typemask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemPetFood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 InitLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->initlevel(), target);
  }
  
  // optional uint32 FullLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->fulllevel(), target);
  }
  
  // optional uint32 TypeMask = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->typemask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemPetFood::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 InitLevel = 2;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlevel());
    }
    
    // optional uint32 FullLevel = 3;
    if (has_fulllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fulllevel());
    }
    
    // optional uint32 TypeMask = 4;
    if (has_typemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typemask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemPetFood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemPetFood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemPetFood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemPetFood::MergeFrom(const PBItemPetFood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_initlevel(from.initlevel());
    }
    if (from._has_bit(2)) {
      set_fulllevel(from.fulllevel());
    }
    if (from._has_bit(3)) {
      set_typemask(from.typemask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemPetFood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPetFood::CopyFrom(const PBItemPetFood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPetFood::Swap(PBItemPetFood* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(initlevel_, other->initlevel_);
    std::swap(fulllevel_, other->fulllevel_);
    std::swap(typemask_, other->typemask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemPetFood::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemPetFood::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemPetFood::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemPetFood_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemRelife::kBaseInfoFieldNumber;
const int PBItemRelife::kTimerFieldNumber;
const int PBItemRelife::kCoolTimeFieldNumber;
const int PBItemRelife::kShareCDFieldNumber;
#endif  // !_MSC_VER

PBItemRelife::PBItemRelife()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemRelife::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemRelife::PBItemRelife(const PBItemRelife& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemRelife::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  timer_ = 0u;
  cooltime_ = 0u;
  sharecd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemRelife::~PBItemRelife() {
  SharedDtor();
}

void PBItemRelife::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemRelife::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemRelife_descriptor_;
}

const PBItemRelife& PBItemRelife::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemRelife* PBItemRelife::default_instance_ = NULL;

PBItemRelife* PBItemRelife::New() const {
  return new PBItemRelife;
}

void PBItemRelife::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    timer_ = 0u;
    cooltime_ = 0u;
    sharecd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemRelife::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Timer;
        break;
      }
      
      // optional uint32 Timer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Timer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timer_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CoolTime;
        break;
      }
      
      // optional uint32 CoolTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoolTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooltime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ShareCD;
        break;
      }
      
      // optional uint32 ShareCD = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShareCD:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sharecd_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemRelife::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemRelife::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Timer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->timer(), output);
  }
  
  // optional uint32 CoolTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->cooltime(), output);
  }
  
  // optional uint32 ShareCD = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sharecd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemRelife::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Timer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->timer(), target);
  }
  
  // optional uint32 CoolTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->cooltime(), target);
  }
  
  // optional uint32 ShareCD = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sharecd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemRelife::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Timer = 2;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timer());
    }
    
    // optional uint32 CoolTime = 3;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooltime());
    }
    
    // optional uint32 ShareCD = 4;
    if (has_sharecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sharecd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemRelife::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemRelife* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemRelife*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemRelife::MergeFrom(const PBItemRelife& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_timer(from.timer());
    }
    if (from._has_bit(2)) {
      set_cooltime(from.cooltime());
    }
    if (from._has_bit(3)) {
      set_sharecd(from.sharecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemRelife::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRelife::CopyFrom(const PBItemRelife& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRelife::Swap(PBItemRelife* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(timer_, other->timer_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(sharecd_, other->sharecd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemRelife::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemRelife::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemRelife::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemRelife_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemSkill::kBaseInfoFieldNumber;
const int PBItemSkill::kLevelLimitFieldNumber;
const int PBItemSkill::kSkillIDFieldNumber;
const int PBItemSkill::kCoolTimeFieldNumber;
const int PBItemSkill::kShareCDFieldNumber;
const int PBItemSkill::kOprTypeFieldNumber;
const int PBItemSkill::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBItemSkill::PBItemSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSkill::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemSkill::PBItemSkill(const PBItemSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSkill::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  levellimit_ = 0u;
  skillid_ = 0u;
  cooltime_ = 0u;
  sharecd_ = 0u;
  oprtype_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSkill::~PBItemSkill() {
  SharedDtor();
}

void PBItemSkill::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSkill_descriptor_;
}

const PBItemSkill& PBItemSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemSkill* PBItemSkill::default_instance_ = NULL;

PBItemSkill* PBItemSkill::New() const {
  return new PBItemSkill;
}

void PBItemSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    levellimit_ = 0u;
    skillid_ = 0u;
    cooltime_ = 0u;
    sharecd_ = 0u;
    oprtype_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CoolTime;
        break;
      }
      
      // optional uint32 CoolTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoolTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooltime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ShareCD;
        break;
      }
      
      // optional uint32 ShareCD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShareCD:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sharecd_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OprType;
        break;
      }
      
      // optional uint32 OprType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OprType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oprtype_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 LevelLimit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levellimit(), output);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->skillid(), output);
  }
  
  // optional uint32 CoolTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->cooltime(), output);
  }
  
  // optional uint32 ShareCD = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sharecd(), output);
  }
  
  // optional uint32 OprType = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->oprtype(), output);
  }
  
  // optional uint32 BuffID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 LevelLimit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levellimit(), target);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->skillid(), target);
  }
  
  // optional uint32 CoolTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->cooltime(), target);
  }
  
  // optional uint32 ShareCD = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sharecd(), target);
  }
  
  // optional uint32 OprType = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->oprtype(), target);
  }
  
  // optional uint32 BuffID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 LevelLimit = 2;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
    // optional uint32 SkillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 CoolTime = 4;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooltime());
    }
    
    // optional uint32 ShareCD = 5;
    if (has_sharecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sharecd());
    }
    
    // optional uint32 OprType = 6;
    if (has_oprtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oprtype());
    }
    
    // optional uint32 BuffID = 7;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSkill::MergeFrom(const PBItemSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_levellimit(from.levellimit());
    }
    if (from._has_bit(2)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(3)) {
      set_cooltime(from.cooltime());
    }
    if (from._has_bit(4)) {
      set_sharecd(from.sharecd());
    }
    if (from._has_bit(5)) {
      set_oprtype(from.oprtype());
    }
    if (from._has_bit(6)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSkill::CopyFrom(const PBItemSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSkill::Swap(PBItemSkill* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(skillid_, other->skillid_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(sharecd_, other->sharecd_);
    std::swap(oprtype_, other->oprtype_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemBook::kBaseInfoFieldNumber;
const int PBItemBook::kOPTypeFieldNumber;
#endif  // !_MSC_VER

PBItemBook::PBItemBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBook::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemBook::PBItemBook(const PBItemBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBook::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBook::~PBItemBook() {
  SharedDtor();
}

void PBItemBook::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBook_descriptor_;
}

const PBItemBook& PBItemBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemBook* PBItemBook::default_instance_ = NULL;

PBItemBook* PBItemBook::New() const {
  return new PBItemBook;
}

void PBItemBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_OPType;
        break;
      }
      
      // optional uint32 OPType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OPType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &optype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBook::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 OPType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->optype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 OPType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->optype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBook::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 OPType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->optype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBook::MergeFrom(const PBItemBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBook::CopyFrom(const PBItemBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBook::Swap(PBItemBook* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBook::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBook::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBook::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBook_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemUpg::kBaseInfoFieldNumber;
const int PBItemUpg::kMaxLevelFieldNumber;
const int PBItemUpg::kTypeFieldNumber;
const int PBItemUpg::kLimitFieldNumber;
const int PBItemUpg::kFailFieldNumber;
const int PBItemUpg::kLuckFieldNumber;
const int PBItemUpg::kUpTypeFieldNumber;
#endif  // !_MSC_VER

PBItemUpg::PBItemUpg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemUpg::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemUpg::PBItemUpg(const PBItemUpg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemUpg::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  maxlevel_ = 0u;
  type_ = 0u;
  limit_ = 0u;
  fail_ = 0u;
  uptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemUpg::~PBItemUpg() {
  SharedDtor();
}

void PBItemUpg::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemUpg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpg_descriptor_;
}

const PBItemUpg& PBItemUpg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemUpg* PBItemUpg::default_instance_ = NULL;

PBItemUpg* PBItemUpg::New() const {
  return new PBItemUpg;
}

void PBItemUpg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    maxlevel_ = 0u;
    type_ = 0u;
    limit_ = 0u;
    fail_ = 0u;
    uptype_ = 0u;
  }
  luck_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemUpg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Limit;
        break;
      }
      
      // optional uint32 Limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Limit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &limit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Fail;
        break;
      }
      
      // optional uint32 Fail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Fail:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fail_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Luck;
        break;
      }
      
      // repeated uint32 Luck = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Luck:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_luck(value);
        if (input->ExpectTag(48)) goto parse_Luck;
        if (input->ExpectTag(56)) goto parse_UpType;
        break;
      }
      
      // optional uint32 UpType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uptype_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemUpg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemUpg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->maxlevel(), output);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 Limit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->limit(), output);
  }
  
  // optional uint32 Fail = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->fail(), output);
  }
  
  // repeated uint32 Luck = 6;
  for (int i = 0; i < this->luck_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->luck(i), output);
  }
  
  // optional uint32 UpType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->uptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemUpg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->maxlevel(), target);
  }
  
  // optional uint32 Type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 Limit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->limit(), target);
  }
  
  // optional uint32 Fail = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->fail(), target);
  }
  
  // repeated uint32 Luck = 6;
  for (int i = 0; i < this->luck_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->luck(i), target);
  }
  
  // optional uint32 UpType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->uptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemUpg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 MaxLevel = 2;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->limit());
    }
    
    // optional uint32 Fail = 5;
    if (has_fail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fail());
    }
    
    // optional uint32 UpType = 7;
    if (has_uptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uptype());
    }
    
  }
  // repeated uint32 Luck = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->luck_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->luck(i));
    }
    total_size += 1 * this->luck_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemUpg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemUpg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemUpg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemUpg::MergeFrom(const PBItemUpg& from) {
  GOOGLE_CHECK_NE(&from, this);
  luck_.MergeFrom(from.luck_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_limit(from.limit());
    }
    if (from._has_bit(4)) {
      set_fail(from.fail());
    }
    if (from._has_bit(6)) {
      set_uptype(from.uptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemUpg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpg::CopyFrom(const PBItemUpg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpg::Swap(PBItemUpg* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(type_, other->type_);
    std::swap(limit_, other->limit_);
    std::swap(fail_, other->fail_);
    luck_.Swap(&other->luck_);
    std::swap(uptype_, other->uptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemUpg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemUpg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemUpg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemUpgLuck::kBaseInfoFieldNumber;
const int PBItemUpgLuck::kIncLuck1FieldNumber;
const int PBItemUpgLuck::kIncLuck2FieldNumber;
const int PBItemUpgLuck::kIncLuck3FieldNumber;
const int PBItemUpgLuck::kLevelFieldNumber;
#endif  // !_MSC_VER

PBItemUpgLuck::PBItemUpgLuck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemUpgLuck::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemUpgLuck::PBItemUpgLuck(const PBItemUpgLuck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemUpgLuck::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  incluck1_ = 0u;
  incluck2_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemUpgLuck::~PBItemUpgLuck() {
  SharedDtor();
}

void PBItemUpgLuck::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemUpgLuck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpgLuck_descriptor_;
}

const PBItemUpgLuck& PBItemUpgLuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemUpgLuck* PBItemUpgLuck::default_instance_ = NULL;

PBItemUpgLuck* PBItemUpgLuck::New() const {
  return new PBItemUpgLuck;
}

void PBItemUpgLuck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    incluck1_ = 0u;
    incluck2_ = 0u;
    level_ = 0u;
  }
  incluck3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemUpgLuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_IncLuck1;
        break;
      }
      
      // optional uint32 IncLuck1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLuck1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incluck1_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IncLuck2;
        break;
      }
      
      // optional uint32 IncLuck2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLuck2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incluck2_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IncLuck3;
        break;
      }
      
      // repeated uint32 IncLuck3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLuck3:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_incluck3(value);
        if (input->ExpectTag(32)) goto parse_IncLuck3;
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemUpgLuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemUpgLuck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 IncLuck1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->incluck1(), output);
  }
  
  // optional uint32 IncLuck2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->incluck2(), output);
  }
  
  // repeated uint32 IncLuck3 = 4;
  for (int i = 0; i < this->incluck3_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->incluck3(i), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemUpgLuck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 IncLuck1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->incluck1(), target);
  }
  
  // optional uint32 IncLuck2 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->incluck2(), target);
  }
  
  // repeated uint32 IncLuck3 = 4;
  for (int i = 0; i < this->incluck3_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->incluck3(i), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemUpgLuck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 IncLuck1 = 2;
    if (has_incluck1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incluck1());
    }
    
    // optional uint32 IncLuck2 = 3;
    if (has_incluck2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incluck2());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  // repeated uint32 IncLuck3 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->incluck3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->incluck3(i));
    }
    total_size += 1 * this->incluck3_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemUpgLuck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemUpgLuck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemUpgLuck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemUpgLuck::MergeFrom(const PBItemUpgLuck& from) {
  GOOGLE_CHECK_NE(&from, this);
  incluck3_.MergeFrom(from.incluck3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_incluck1(from.incluck1());
    }
    if (from._has_bit(2)) {
      set_incluck2(from.incluck2());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemUpgLuck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpgLuck::CopyFrom(const PBItemUpgLuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpgLuck::Swap(PBItemUpgLuck* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(incluck1_, other->incluck1_);
    std::swap(incluck2_, other->incluck2_);
    incluck3_.Swap(&other->incluck3_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemUpgLuck::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemUpgLuck::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemUpgLuck::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpgLuck_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemUpgLeast::kBaseInfoFieldNumber;
const int PBItemUpgLeast::kIncLuck1FieldNumber;
const int PBItemUpgLeast::kIncLuck2FieldNumber;
const int PBItemUpgLeast::kTypeFieldNumber;
#endif  // !_MSC_VER

PBItemUpgLeast::PBItemUpgLeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemUpgLeast::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemUpgLeast::PBItemUpgLeast(const PBItemUpgLeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemUpgLeast::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  incluck1_ = 0u;
  incluck2_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemUpgLeast::~PBItemUpgLeast() {
  SharedDtor();
}

void PBItemUpgLeast::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemUpgLeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpgLeast_descriptor_;
}

const PBItemUpgLeast& PBItemUpgLeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemUpgLeast* PBItemUpgLeast::default_instance_ = NULL;

PBItemUpgLeast* PBItemUpgLeast::New() const {
  return new PBItemUpgLeast;
}

void PBItemUpgLeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    incluck1_ = 0u;
    incluck2_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemUpgLeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_IncLuck1;
        break;
      }
      
      // optional uint32 IncLuck1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLuck1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incluck1_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IncLuck2;
        break;
      }
      
      // optional uint32 IncLuck2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLuck2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incluck2_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemUpgLeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemUpgLeast::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 IncLuck1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->incluck1(), output);
  }
  
  // optional uint32 IncLuck2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->incluck2(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemUpgLeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 IncLuck1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->incluck1(), target);
  }
  
  // optional uint32 IncLuck2 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->incluck2(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemUpgLeast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 IncLuck1 = 2;
    if (has_incluck1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incluck1());
    }
    
    // optional uint32 IncLuck2 = 3;
    if (has_incluck2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incluck2());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemUpgLeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemUpgLeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemUpgLeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemUpgLeast::MergeFrom(const PBItemUpgLeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_incluck1(from.incluck1());
    }
    if (from._has_bit(2)) {
      set_incluck2(from.incluck2());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemUpgLeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpgLeast::CopyFrom(const PBItemUpgLeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUpgLeast::Swap(PBItemUpgLeast* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(incluck1_, other->incluck1_);
    std::swap(incluck2_, other->incluck2_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemUpgLeast::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemUpgLeast::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemUpgLeast::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemUpgLeast_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemRemove::kBaseInfoFieldNumber;
const int PBItemRemove::kRandFieldNumber;
const int PBItemRemove::kBindFieldNumber;
const int PBItemRemove::kLevelFieldNumber;
const int PBItemRemove::kLowFieldNumber;
#endif  // !_MSC_VER

PBItemRemove::PBItemRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemRemove::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemRemove::PBItemRemove(const PBItemRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemRemove::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  bind_ = 0u;
  level_ = 0u;
  low_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemRemove::~PBItemRemove() {
  SharedDtor();
}

void PBItemRemove::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemRemove_descriptor_;
}

const PBItemRemove& PBItemRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemRemove* PBItemRemove::default_instance_ = NULL;

PBItemRemove* PBItemRemove::New() const {
  return new PBItemRemove;
}

void PBItemRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    bind_ = 0u;
    level_ = 0u;
    low_ = 0u;
  }
  rand_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Rand;
        break;
      }
      
      // repeated uint32 Rand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rand:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_rand(value);
        if (input->ExpectTag(16)) goto parse_Rand;
        if (input->ExpectTag(24)) goto parse_Bind;
        break;
      }
      
      // optional uint32 Bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Bind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bind_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Low;
        break;
      }
      
      // optional uint32 Low = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Low:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &low_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemRemove::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // repeated uint32 Rand = 2;
  for (int i = 0; i < this->rand_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rand(i), output);
  }
  
  // optional uint32 Bind = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bind(), output);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint32 Low = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // repeated uint32 Rand = 2;
  for (int i = 0; i < this->rand_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rand(i), target);
  }
  
  // optional uint32 Bind = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bind(), target);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 Low = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bind());
    }
    
    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Low = 5;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->low());
    }
    
  }
  // repeated uint32 Rand = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->rand(i));
    }
    total_size += 1 * this->rand_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemRemove::MergeFrom(const PBItemRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  rand_.MergeFrom(from.rand_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(2)) {
      set_bind(from.bind());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_low(from.low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRemove::CopyFrom(const PBItemRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRemove::Swap(PBItemRemove* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    rand_.Swap(&other->rand_);
    std::swap(bind_, other->bind_);
    std::swap(level_, other->level_);
    std::swap(low_, other->low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemRemove::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemRemove::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemRemove::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemRemove_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemChange::kBaseInfoFieldNumber;
const int PBItemChange::kTypeFieldNumber;
const int PBItemChange::kResFieldNumber;
const int PBItemChange::kMetierRequireFieldNumber;
#endif  // !_MSC_VER

PBItemChange::PBItemChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemChange::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemChange::PBItemChange(const PBItemChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemChange::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  type_ = 0u;
  res_ = 0u;
  metierrequire_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemChange::~PBItemChange() {
  SharedDtor();
}

void PBItemChange::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemChange_descriptor_;
}

const PBItemChange& PBItemChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemChange* PBItemChange::default_instance_ = NULL;

PBItemChange* PBItemChange::New() const {
  return new PBItemChange;
}

void PBItemChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    type_ = 0u;
    res_ = 0u;
    metierrequire_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Res;
        break;
      }
      
      // optional uint32 Res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Res:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &res_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MetierRequire;
        break;
      }
      
      // optional uint32 MetierRequire = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierrequire_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemChange::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 Res = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->res(), output);
  }
  
  // optional uint32 MetierRequire = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metierrequire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 Res = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->res(), target);
  }
  
  // optional uint32 MetierRequire = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metierrequire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->res());
    }
    
    // optional uint32 MetierRequire = 4;
    if (has_metierrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierrequire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemChange::MergeFrom(const PBItemChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_res(from.res());
    }
    if (from._has_bit(3)) {
      set_metierrequire(from.metierrequire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemChange::CopyFrom(const PBItemChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemChange::Swap(PBItemChange* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(type_, other->type_);
    std::swap(res_, other->res_);
    std::swap(metierrequire_, other->metierrequire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemChange::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemChange::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemChange::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemChange_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemQuestion::kBaseInfoFieldNumber;
const int PBItemQuestion::kQuestionRateFieldNumber;
const int PBItemQuestion::kExpAddRaeFieldNumber;
const int PBItemQuestion::kEachTimeLengthFieldNumber;
const int PBItemQuestion::kTotalTimeLengthFieldNumber;
const int PBItemQuestion::kRepeatTimeAllowedFieldNumber;
#endif  // !_MSC_VER

PBItemQuestion::PBItemQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemQuestion::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemQuestion::PBItemQuestion(const PBItemQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemQuestion::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  expaddrae_ = 0u;
  eachtimelength_ = 0u;
  totaltimelength_ = 0u;
  repeattimeallowed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemQuestion::~PBItemQuestion() {
  SharedDtor();
}

void PBItemQuestion::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemQuestion_descriptor_;
}

const PBItemQuestion& PBItemQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemQuestion* PBItemQuestion::default_instance_ = NULL;

PBItemQuestion* PBItemQuestion::New() const {
  return new PBItemQuestion;
}

void PBItemQuestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    expaddrae_ = 0u;
    eachtimelength_ = 0u;
    totaltimelength_ = 0u;
    repeattimeallowed_ = 0u;
  }
  questionrate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_QuestionRate;
        break;
      }
      
      // repeated uint32 QuestionRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QuestionRate:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_questionrate(value);
        if (input->ExpectTag(16)) goto parse_QuestionRate;
        if (input->ExpectTag(24)) goto parse_ExpAddRae;
        break;
      }
      
      // optional uint32 ExpAddRae = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpAddRae:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expaddrae_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_EachTimeLength;
        break;
      }
      
      // optional uint32 EachTimeLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EachTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eachtimelength_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TotalTimeLength;
        break;
      }
      
      // optional uint32 TotalTimeLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totaltimelength_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RepeatTimeAllowed;
        break;
      }
      
      // optional uint32 RepeatTimeAllowed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeatTimeAllowed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeattimeallowed_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemQuestion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // repeated uint32 QuestionRate = 2;
  for (int i = 0; i < this->questionrate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->questionrate(i), output);
  }
  
  // optional uint32 ExpAddRae = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->expaddrae(), output);
  }
  
  // optional uint32 EachTimeLength = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->eachtimelength(), output);
  }
  
  // optional uint32 TotalTimeLength = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->totaltimelength(), output);
  }
  
  // optional uint32 RepeatTimeAllowed = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->repeattimeallowed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // repeated uint32 QuestionRate = 2;
  for (int i = 0; i < this->questionrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->questionrate(i), target);
  }
  
  // optional uint32 ExpAddRae = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->expaddrae(), target);
  }
  
  // optional uint32 EachTimeLength = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->eachtimelength(), target);
  }
  
  // optional uint32 TotalTimeLength = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->totaltimelength(), target);
  }
  
  // optional uint32 RepeatTimeAllowed = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->repeattimeallowed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemQuestion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 ExpAddRae = 3;
    if (has_expaddrae()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expaddrae());
    }
    
    // optional uint32 EachTimeLength = 4;
    if (has_eachtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eachtimelength());
    }
    
    // optional uint32 TotalTimeLength = 5;
    if (has_totaltimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totaltimelength());
    }
    
    // optional uint32 RepeatTimeAllowed = 6;
    if (has_repeattimeallowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeattimeallowed());
    }
    
  }
  // repeated uint32 QuestionRate = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->questionrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->questionrate(i));
    }
    total_size += 1 * this->questionrate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemQuestion::MergeFrom(const PBItemQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  questionrate_.MergeFrom(from.questionrate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(2)) {
      set_expaddrae(from.expaddrae());
    }
    if (from._has_bit(3)) {
      set_eachtimelength(from.eachtimelength());
    }
    if (from._has_bit(4)) {
      set_totaltimelength(from.totaltimelength());
    }
    if (from._has_bit(5)) {
      set_repeattimeallowed(from.repeattimeallowed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemQuestion::CopyFrom(const PBItemQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemQuestion::Swap(PBItemQuestion* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    questionrate_.Swap(&other->questionrate_);
    std::swap(expaddrae_, other->expaddrae_);
    std::swap(eachtimelength_, other->eachtimelength_);
    std::swap(totaltimelength_, other->totaltimelength_);
    std::swap(repeattimeallowed_, other->repeattimeallowed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemQuestion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemQuestion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemQuestion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemQuestion_reflection_;
}

// ===================================================================

const ::std::string PBItemTask::_default_showtext_;
#ifndef _MSC_VER
const int PBItemTask::kBaseInfoFieldNumber;
const int PBItemTask::kUseTimesFieldNumber;
const int PBItemTask::kValidTimeFieldNumber;
const int PBItemTask::kShowTextFieldNumber;
const int PBItemTask::kMapIDFieldNumber;
const int PBItemTask::kPosXFieldNumber;
const int PBItemTask::kPosYFieldNumber;
const int PBItemTask::kWidthFieldNumber;
const int PBItemTask::kHeightFieldNumber;
const int PBItemTask::kGetTaskIDFieldNumber;
const int PBItemTask::kGiveItemIDFieldNumber;
const int PBItemTask::kChangeTimeFieldNumber;
const int PBItemTask::kChangeItemFieldNumber;
const int PBItemTask::kFailTaskIDFieldNumber;
#endif  // !_MSC_VER

PBItemTask::PBItemTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemTask::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemTask::PBItemTask(const PBItemTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemTask::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  usetimes_ = 0u;
  validtime_ = 0u;
  showtext_ = const_cast< ::std::string*>(&_default_showtext_);
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  width_ = 0u;
  height_ = 0u;
  gettaskid_ = 0u;
  giveitemid_ = 0u;
  changetime_ = 0u;
  changeitem_ = 0u;
  failtaskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemTask::~PBItemTask() {
  SharedDtor();
}

void PBItemTask::SharedDtor() {
  if (showtext_ != &_default_showtext_) {
    delete showtext_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemTask_descriptor_;
}

const PBItemTask& PBItemTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemTask* PBItemTask::default_instance_ = NULL;

PBItemTask* PBItemTask::New() const {
  return new PBItemTask;
}

void PBItemTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    usetimes_ = 0u;
    validtime_ = 0u;
    if (_has_bit(3)) {
      if (showtext_ != &_default_showtext_) {
        showtext_->clear();
      }
    }
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    width_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    height_ = 0u;
    gettaskid_ = 0u;
    giveitemid_ = 0u;
    changetime_ = 0u;
    changeitem_ = 0u;
    failtaskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_UseTimes;
        break;
      }
      
      // optional uint32 UseTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usetimes_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ValidTime;
        break;
      }
      
      // optional uint32 ValidTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validtime_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ShowText;
        break;
      }
      
      // optional string ShowText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowText:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_showtext()));
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Width;
        break;
      }
      
      // optional uint32 Width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Width:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &width_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Height;
        break;
      }
      
      // optional uint32 Height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Height:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &height_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_GetTaskID;
        break;
      }
      
      // optional uint32 GetTaskID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GetTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gettaskid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_GiveItemID;
        break;
      }
      
      // optional uint32 GiveItemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GiveItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &giveitemid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_ChangeTime;
        break;
      }
      
      // optional uint32 ChangeTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changetime_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ChangeItem;
        break;
      }
      
      // optional uint32 ChangeItem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changeitem_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_FailTaskID;
        break;
      }
      
      // optional uint32 FailTaskID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FailTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &failtaskid_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 UseTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->usetimes(), output);
  }
  
  // optional uint32 ValidTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->validtime(), output);
  }
  
  // optional string ShowText = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->showtext(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posx(), output);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posy(), output);
  }
  
  // optional uint32 Width = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->width(), output);
  }
  
  // optional uint32 Height = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->height(), output);
  }
  
  // optional uint32 GetTaskID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->gettaskid(), output);
  }
  
  // optional uint32 GiveItemID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->giveitemid(), output);
  }
  
  // optional uint32 ChangeTime = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->changetime(), output);
  }
  
  // optional uint32 ChangeItem = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->changeitem(), output);
  }
  
  // optional uint32 FailTaskID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->failtaskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 UseTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->usetimes(), target);
  }
  
  // optional uint32 ValidTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->validtime(), target);
  }
  
  // optional string ShowText = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->showtext(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posx(), target);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posy(), target);
  }
  
  // optional uint32 Width = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->width(), target);
  }
  
  // optional uint32 Height = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->height(), target);
  }
  
  // optional uint32 GetTaskID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->gettaskid(), target);
  }
  
  // optional uint32 GiveItemID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->giveitemid(), target);
  }
  
  // optional uint32 ChangeTime = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->changetime(), target);
  }
  
  // optional uint32 ChangeItem = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->changeitem(), target);
  }
  
  // optional uint32 FailTaskID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->failtaskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 UseTimes = 2;
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usetimes());
    }
    
    // optional uint32 ValidTime = 3;
    if (has_validtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validtime());
    }
    
    // optional string ShowText = 4;
    if (has_showtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->showtext());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 7;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->width());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->height());
    }
    
    // optional uint32 GetTaskID = 10;
    if (has_gettaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gettaskid());
    }
    
    // optional uint32 GiveItemID = 11;
    if (has_giveitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->giveitemid());
    }
    
    // optional uint32 ChangeTime = 12;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changetime());
    }
    
    // optional uint32 ChangeItem = 13;
    if (has_changeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changeitem());
    }
    
    // optional uint32 FailTaskID = 14;
    if (has_failtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->failtaskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemTask::MergeFrom(const PBItemTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_usetimes(from.usetimes());
    }
    if (from._has_bit(2)) {
      set_validtime(from.validtime());
    }
    if (from._has_bit(3)) {
      set_showtext(from.showtext());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_posx(from.posx());
    }
    if (from._has_bit(6)) {
      set_posy(from.posy());
    }
    if (from._has_bit(7)) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_height(from.height());
    }
    if (from._has_bit(9)) {
      set_gettaskid(from.gettaskid());
    }
    if (from._has_bit(10)) {
      set_giveitemid(from.giveitemid());
    }
    if (from._has_bit(11)) {
      set_changetime(from.changetime());
    }
    if (from._has_bit(12)) {
      set_changeitem(from.changeitem());
    }
    if (from._has_bit(13)) {
      set_failtaskid(from.failtaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTask::CopyFrom(const PBItemTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemTask::Swap(PBItemTask* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(validtime_, other->validtime_);
    std::swap(showtext_, other->showtext_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(gettaskid_, other->gettaskid_);
    std::swap(giveitemid_, other->giveitemid_);
    std::swap(changetime_, other->changetime_);
    std::swap(changeitem_, other->changeitem_);
    std::swap(failtaskid_, other->failtaskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemTask::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemStuff::kBaseInfoFieldNumber;
const int PBItemStuff::kShowColorFieldNumber;
const int PBItemStuff::kComposeIDFieldNumber;
#endif  // !_MSC_VER

PBItemStuff::PBItemStuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemStuff::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemStuff::PBItemStuff(const PBItemStuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemStuff::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  showcolor_ = 0u;
  composeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemStuff::~PBItemStuff() {
  SharedDtor();
}

void PBItemStuff::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemStuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemStuff_descriptor_;
}

const PBItemStuff& PBItemStuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemStuff* PBItemStuff::default_instance_ = NULL;

PBItemStuff* PBItemStuff::New() const {
  return new PBItemStuff;
}

void PBItemStuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    showcolor_ = 0u;
    composeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemStuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_ShowColor;
        break;
      }
      
      // optional uint32 ShowColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showcolor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemStuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemStuff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 ShowColor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->showcolor(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemStuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 ShowColor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->showcolor(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemStuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 ShowColor = 2;
    if (has_showcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showcolor());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemStuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemStuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemStuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemStuff::MergeFrom(const PBItemStuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_showcolor(from.showcolor());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemStuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemStuff::CopyFrom(const PBItemStuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemStuff::Swap(PBItemStuff* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(showcolor_, other->showcolor_);
    std::swap(composeid_, other->composeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemStuff::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemStuff::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemStuff::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemStuff_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemExp::kBaseInfoFieldNumber;
const int PBItemExp::kIncRateFieldNumber;
const int PBItemExp::kTimeFieldNumber;
#endif  // !_MSC_VER

PBItemExp::PBItemExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExp::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemExp::PBItemExp(const PBItemExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExp::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  incrate_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExp::~PBItemExp() {
  SharedDtor();
}

void PBItemExp::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExp_descriptor_;
}

const PBItemExp& PBItemExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemExp* PBItemExp::default_instance_ = NULL;

PBItemExp* PBItemExp::New() const {
  return new PBItemExp;
}

void PBItemExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    incrate_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_IncRate;
        break;
      }
      
      // optional uint32 IncRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incrate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 IncRate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->incrate(), output);
  }
  
  // optional uint32 Time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 IncRate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->incrate(), target);
  }
  
  // optional uint32 Time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 IncRate = 2;
    if (has_incrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incrate());
    }
    
    // optional uint32 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExp::MergeFrom(const PBItemExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_incrate(from.incrate());
    }
    if (from._has_bit(2)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExp::CopyFrom(const PBItemExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExp::Swap(PBItemExp* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(incrate_, other->incrate_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemChangeCamp::kTmpIDFieldNumber;
const int PBItemChangeCamp::kMItemIdFieldNumber;
const int PBItemChangeCamp::kMGiftIdFieldNumber;
const int PBItemChangeCamp::kMCdTimeFieldNumber;
#endif  // !_MSC_VER

PBItemChangeCamp::PBItemChangeCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemChangeCamp::InitAsDefaultInstance() {}

PBItemChangeCamp::PBItemChangeCamp(const PBItemChangeCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemChangeCamp::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0u;
  m_itemid_ = 0u;
  m_giftid_ = 0u;
  m_cd_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemChangeCamp::~PBItemChangeCamp() {
  SharedDtor();
}

void PBItemChangeCamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemChangeCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemChangeCamp_descriptor_;
}

const PBItemChangeCamp& PBItemChangeCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemChangeCamp* PBItemChangeCamp::default_instance_ = NULL;

PBItemChangeCamp* PBItemChangeCamp::New() const {
  return new PBItemChangeCamp;
}

void PBItemChangeCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0u;
    m_itemid_ = 0u;
    m_giftid_ = 0u;
    m_cd_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemChangeCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TmpID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tmpid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_m_itemId;
        break;
      }
      
      // optional uint32 m_itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_itemId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_itemid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_m_giftId;
        break;
      }
      
      // optional uint32 m_giftId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_giftId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_giftid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_m_cd_time;
        break;
      }
      
      // optional uint32 m_cd_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_cd_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_cd_time_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemChangeCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemChangeCamp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tmpid(), output);
  }
  
  // optional uint32 m_itemId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->m_itemid(), output);
  }
  
  // optional uint32 m_giftId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->m_giftid(), output);
  }
  
  // optional uint32 m_cd_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->m_cd_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemChangeCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tmpid(), target);
  }
  
  // optional uint32 m_itemId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->m_itemid(), target);
  }
  
  // optional uint32 m_giftId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->m_giftid(), target);
  }
  
  // optional uint32 m_cd_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->m_cd_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemChangeCamp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TmpID = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tmpid());
    }
    
    // optional uint32 m_itemId = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_itemid());
    }
    
    // optional uint32 m_giftId = 3;
    if (has_m_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_giftid());
    }
    
    // optional uint32 m_cd_time = 4;
    if (has_m_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_cd_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemChangeCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemChangeCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemChangeCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemChangeCamp::MergeFrom(const PBItemChangeCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmpid(from.tmpid());
    }
    if (from._has_bit(1)) {
      set_m_itemid(from.m_itemid());
    }
    if (from._has_bit(2)) {
      set_m_giftid(from.m_giftid());
    }
    if (from._has_bit(3)) {
      set_m_cd_time(from.m_cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemChangeCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemChangeCamp::CopyFrom(const PBItemChangeCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemChangeCamp::Swap(PBItemChangeCamp* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_giftid_, other->m_giftid_);
    std::swap(m_cd_time_, other->m_cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemChangeCamp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemChangeCamp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemChangeCamp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemChangeCamp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBComRuneUnit::kMWhitenumFieldNumber;
const int PBComRuneUnit::kMBluenumFieldNumber;
const int PBComRuneUnit::kMPurplenumFieldNumber;
const int PBComRuneUnit::kMRandFieldNumber;
const int PBComRuneUnit::kMMoneyFieldNumber;
const int PBComRuneUnit::kMRuneLevelFieldNumber;
#endif  // !_MSC_VER

PBComRuneUnit::PBComRuneUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBComRuneUnit::InitAsDefaultInstance() {}

PBComRuneUnit::PBComRuneUnit(const PBComRuneUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBComRuneUnit::SharedCtor() {
  _cached_size_ = 0;
  m_whitenum_ = 0u;
  m_bluenum_ = 0u;
  m_purplenum_ = 0u;
  m_rand_ = 0u;
  m_money_ = 0u;
  m_runelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBComRuneUnit::~PBComRuneUnit() {
  SharedDtor();
}

void PBComRuneUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBComRuneUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBComRuneUnit_descriptor_;
}

const PBComRuneUnit& PBComRuneUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBComRuneUnit* PBComRuneUnit::default_instance_ = NULL;

PBComRuneUnit* PBComRuneUnit::New() const {
  return new PBComRuneUnit;
}

void PBComRuneUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_whitenum_ = 0u;
    m_bluenum_ = 0u;
    m_purplenum_ = 0u;
    m_rand_ = 0u;
    m_money_ = 0u;
    m_runelevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBComRuneUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 m_whitenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_whitenum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_m_bluenum;
        break;
      }
      
      // optional uint32 m_bluenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_bluenum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_bluenum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_m_purplenum;
        break;
      }
      
      // optional uint32 m_purplenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_purplenum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_purplenum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_m_rand;
        break;
      }
      
      // optional uint32 m_rand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_rand:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_rand_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_m_money;
        break;
      }
      
      // optional uint32 m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_money_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_m_runeLevel;
        break;
      }
      
      // optional uint32 m_runeLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_runeLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_runelevel_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBComRuneUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBComRuneUnit::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 m_whitenum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->m_whitenum(), output);
  }
  
  // optional uint32 m_bluenum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->m_bluenum(), output);
  }
  
  // optional uint32 m_purplenum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->m_purplenum(), output);
  }
  
  // optional uint32 m_rand = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->m_rand(), output);
  }
  
  // optional uint32 m_money = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->m_money(), output);
  }
  
  // optional uint32 m_runeLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->m_runelevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBComRuneUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 m_whitenum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->m_whitenum(), target);
  }
  
  // optional uint32 m_bluenum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->m_bluenum(), target);
  }
  
  // optional uint32 m_purplenum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->m_purplenum(), target);
  }
  
  // optional uint32 m_rand = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->m_rand(), target);
  }
  
  // optional uint32 m_money = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->m_money(), target);
  }
  
  // optional uint32 m_runeLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->m_runelevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBComRuneUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_whitenum = 1;
    if (has_m_whitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_whitenum());
    }
    
    // optional uint32 m_bluenum = 2;
    if (has_m_bluenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_bluenum());
    }
    
    // optional uint32 m_purplenum = 3;
    if (has_m_purplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_purplenum());
    }
    
    // optional uint32 m_rand = 4;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_rand());
    }
    
    // optional uint32 m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_money());
    }
    
    // optional uint32 m_runeLevel = 6;
    if (has_m_runelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_runelevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBComRuneUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBComRuneUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBComRuneUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBComRuneUnit::MergeFrom(const PBComRuneUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_m_whitenum(from.m_whitenum());
    }
    if (from._has_bit(1)) {
      set_m_bluenum(from.m_bluenum());
    }
    if (from._has_bit(2)) {
      set_m_purplenum(from.m_purplenum());
    }
    if (from._has_bit(3)) {
      set_m_rand(from.m_rand());
    }
    if (from._has_bit(4)) {
      set_m_money(from.m_money());
    }
    if (from._has_bit(5)) {
      set_m_runelevel(from.m_runelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBComRuneUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComRuneUnit::CopyFrom(const PBComRuneUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComRuneUnit::Swap(PBComRuneUnit* other) {
  if (other != this) {
    std::swap(m_whitenum_, other->m_whitenum_);
    std::swap(m_bluenum_, other->m_bluenum_);
    std::swap(m_purplenum_, other->m_purplenum_);
    std::swap(m_rand_, other->m_rand_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_runelevel_, other->m_runelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBComRuneUnit::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBComRuneUnit::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBComRuneUnit::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBComRuneUnit_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBComRuneConfig::kTmpIDFieldNumber;
const int PBComRuneConfig::kMUpRuneRandFieldNumber;
const int PBComRuneConfig::kMMaxFieldNumber;
const int PBComRuneConfig::kMMinFieldNumber;
const int PBComRuneConfig::kMUpRuneUnitFieldNumber;
#endif  // !_MSC_VER

PBComRuneConfig::PBComRuneConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBComRuneConfig::InitAsDefaultInstance() {}

PBComRuneConfig::PBComRuneConfig(const PBComRuneConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBComRuneConfig::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0u;
  m_uprunerand_ = 0u;
  m_max_ = 0u;
  m_min_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBComRuneConfig::~PBComRuneConfig() {
  SharedDtor();
}

void PBComRuneConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBComRuneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBComRuneConfig_descriptor_;
}

const PBComRuneConfig& PBComRuneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBComRuneConfig* PBComRuneConfig::default_instance_ = NULL;

PBComRuneConfig* PBComRuneConfig::New() const {
  return new PBComRuneConfig;
}

void PBComRuneConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0u;
    m_uprunerand_ = 0u;
    m_max_ = 0u;
    m_min_ = 0u;
  }
  m_upruneunit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBComRuneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TmpID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tmpid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_m_upRuneRand;
        break;
      }
      
      // optional uint32 m_upRuneRand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_upRuneRand:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_uprunerand_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_m_max;
        break;
      }
      
      // optional uint32 m_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_max:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_max_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_m_min;
        break;
      }
      
      // optional uint32 m_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_m_min:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &m_min_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_m_upRuneUnit;
        break;
      }
      
      // repeated .PBComRuneUnit m_upRuneUnit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_m_upRuneUnit:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_m_upruneunit()));
        if (input->ExpectTag(42)) goto parse_m_upRuneUnit;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBComRuneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBComRuneConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tmpid(), output);
  }
  
  // optional uint32 m_upRuneRand = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->m_uprunerand(), output);
  }
  
  // optional uint32 m_max = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->m_max(), output);
  }
  
  // optional uint32 m_min = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->m_min(), output);
  }
  
  // repeated .PBComRuneUnit m_upRuneUnit = 5;
  for (int i = 0; i < this->m_upruneunit_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->m_upruneunit(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBComRuneConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tmpid(), target);
  }
  
  // optional uint32 m_upRuneRand = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->m_uprunerand(), target);
  }
  
  // optional uint32 m_max = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->m_max(), target);
  }
  
  // optional uint32 m_min = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->m_min(), target);
  }
  
  // repeated .PBComRuneUnit m_upRuneUnit = 5;
  for (int i = 0; i < this->m_upruneunit_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->m_upruneunit(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBComRuneConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TmpID = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tmpid());
    }
    
    // optional uint32 m_upRuneRand = 2;
    if (has_m_uprunerand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_uprunerand());
    }
    
    // optional uint32 m_max = 3;
    if (has_m_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_max());
    }
    
    // optional uint32 m_min = 4;
    if (has_m_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->m_min());
    }
    
  }
  // repeated .PBComRuneUnit m_upRuneUnit = 5;
  total_size += 1 * this->m_upruneunit_size();
  for (int i = 0; i < this->m_upruneunit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->m_upruneunit(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBComRuneConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBComRuneConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBComRuneConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBComRuneConfig::MergeFrom(const PBComRuneConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upruneunit_.MergeFrom(from.m_upruneunit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmpid(from.tmpid());
    }
    if (from._has_bit(1)) {
      set_m_uprunerand(from.m_uprunerand());
    }
    if (from._has_bit(2)) {
      set_m_max(from.m_max());
    }
    if (from._has_bit(3)) {
      set_m_min(from.m_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBComRuneConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComRuneConfig::CopyFrom(const PBComRuneConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBComRuneConfig::Swap(PBComRuneConfig* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    std::swap(m_uprunerand_, other->m_uprunerand_);
    std::swap(m_max_, other->m_max_);
    std::swap(m_min_, other->m_min_);
    m_upruneunit_.Swap(&other->m_upruneunit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBComRuneConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBComRuneConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBComRuneConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBComRuneConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemShout::kBaseInfoFieldNumber;
const int PBItemShout::kFaceGroupIDFieldNumber;
#endif  // !_MSC_VER

PBItemShout::PBItemShout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemShout::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemShout::PBItemShout(const PBItemShout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemShout::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  facegroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemShout::~PBItemShout() {
  SharedDtor();
}

void PBItemShout::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemShout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemShout_descriptor_;
}

const PBItemShout& PBItemShout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemShout* PBItemShout::default_instance_ = NULL;

PBItemShout* PBItemShout::New() const {
  return new PBItemShout;
}

void PBItemShout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    facegroupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemShout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_FaceGroupID;
        break;
      }
      
      // optional uint32 FaceGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceGroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facegroupid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemShout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemShout::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->facegroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemShout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->facegroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemShout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 FaceGroupID = 2;
    if (has_facegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facegroupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemShout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemShout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemShout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemShout::MergeFrom(const PBItemShout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_facegroupid(from.facegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemShout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemShout::CopyFrom(const PBItemShout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemShout::Swap(PBItemShout* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(facegroupid_, other->facegroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemShout::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemShout::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemShout::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemShout_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemAutoShout::kBaseInfoFieldNumber;
const int PBItemAutoShout::kFaceGroupIDFieldNumber;
#endif  // !_MSC_VER

PBItemAutoShout::PBItemAutoShout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemAutoShout::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemAutoShout::PBItemAutoShout(const PBItemAutoShout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemAutoShout::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  facegroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemAutoShout::~PBItemAutoShout() {
  SharedDtor();
}

void PBItemAutoShout::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemAutoShout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemAutoShout_descriptor_;
}

const PBItemAutoShout& PBItemAutoShout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemAutoShout* PBItemAutoShout::default_instance_ = NULL;

PBItemAutoShout* PBItemAutoShout::New() const {
  return new PBItemAutoShout;
}

void PBItemAutoShout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    facegroupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemAutoShout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_FaceGroupID;
        break;
      }
      
      // optional uint32 FaceGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceGroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facegroupid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemAutoShout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemAutoShout::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->facegroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemAutoShout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 FaceGroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->facegroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemAutoShout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 FaceGroupID = 2;
    if (has_facegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facegroupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemAutoShout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemAutoShout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemAutoShout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemAutoShout::MergeFrom(const PBItemAutoShout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_facegroupid(from.facegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemAutoShout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAutoShout::CopyFrom(const PBItemAutoShout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAutoShout::Swap(PBItemAutoShout* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(facegroupid_, other->facegroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemAutoShout::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemAutoShout::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemAutoShout::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemAutoShout_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemPhysic::kBaseInfoFieldNumber;
const int PBItemPhysic::kShowTypeFieldNumber;
const int PBItemPhysic::kBuffIDFieldNumber;
const int PBItemPhysic::kLevelLimitFieldNumber;
const int PBItemPhysic::kHPMaxValueFieldNumber;
const int PBItemPhysic::kHPTimeFieldNumber;
const int PBItemPhysic::kHPIncTimeFieldNumber;
const int PBItemPhysic::kHPInvValueFieldNumber;
const int PBItemPhysic::kMPMaxValueFieldNumber;
const int PBItemPhysic::kMPTimeFieldNumber;
const int PBItemPhysic::kMPIncTimeFieldNumber;
const int PBItemPhysic::kMPInvValueFieldNumber;
const int PBItemPhysic::kCoolTimeFieldNumber;
const int PBItemPhysic::kShareCDFieldNumber;
const int PBItemPhysic::kHPPercentFieldNumber;
const int PBItemPhysic::kMPPercentFieldNumber;
const int PBItemPhysic::kMaxHPPercentFieldNumber;
const int PBItemPhysic::kMaxMPPercentFieldNumber;
const int PBItemPhysic::kLifeSkilTypeFieldNumber;
const int PBItemPhysic::kDegreeValueFieldNumber;
const int PBItemPhysic::kPhisicTypeFieldNumber;
const int PBItemPhysic::kApValueFieldNumber;
const int PBItemPhysic::kColorFieldNumber;
#endif  // !_MSC_VER

PBItemPhysic::PBItemPhysic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemPhysic::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemPhysic::PBItemPhysic(const PBItemPhysic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemPhysic::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  showtype_ = 0u;
  buffid_ = 0u;
  levellimit_ = 0u;
  hpmaxvalue_ = 0u;
  hptime_ = 0u;
  hpinctime_ = 0u;
  hpinvvalue_ = 0u;
  mpmaxvalue_ = 0u;
  mptime_ = 0u;
  mpinctime_ = 0u;
  mpinvvalue_ = 0u;
  cooltime_ = 0u;
  sharecd_ = 0u;
  hppercent_ = 0u;
  mppercent_ = 0u;
  maxhppercent_ = 0u;
  maxmppercent_ = 0u;
  lifeskiltype_ = 0u;
  degreevalue_ = 0u;
  phisictype_ = 0u;
  apvalue_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemPhysic::~PBItemPhysic() {
  SharedDtor();
}

void PBItemPhysic::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemPhysic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemPhysic_descriptor_;
}

const PBItemPhysic& PBItemPhysic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemPhysic* PBItemPhysic::default_instance_ = NULL;

PBItemPhysic* PBItemPhysic::New() const {
  return new PBItemPhysic;
}

void PBItemPhysic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    showtype_ = 0u;
    buffid_ = 0u;
    levellimit_ = 0u;
    hpmaxvalue_ = 0u;
    hptime_ = 0u;
    hpinctime_ = 0u;
    hpinvvalue_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mpmaxvalue_ = 0u;
    mptime_ = 0u;
    mpinctime_ = 0u;
    mpinvvalue_ = 0u;
    cooltime_ = 0u;
    sharecd_ = 0u;
    hppercent_ = 0u;
    mppercent_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maxhppercent_ = 0u;
    maxmppercent_ = 0u;
    lifeskiltype_ = 0u;
    degreevalue_ = 0u;
    phisictype_ = 0u;
    apvalue_ = 0u;
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemPhysic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_ShowType;
        break;
      }
      
      // optional uint32 ShowType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_HPMaxValue;
        break;
      }
      
      // optional uint32 HPMaxValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPMaxValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpmaxvalue_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_HPTime;
        break;
      }
      
      // optional uint32 HPTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hptime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_HPIncTime;
        break;
      }
      
      // optional uint32 HPIncTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPIncTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpinctime_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_HPInvValue;
        break;
      }
      
      // optional uint32 HPInvValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPInvValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpinvvalue_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MPMaxValue;
        break;
      }
      
      // optional uint32 MPMaxValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPMaxValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpmaxvalue_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MPTime;
        break;
      }
      
      // optional uint32 MPTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mptime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_MPIncTime;
        break;
      }
      
      // optional uint32 MPIncTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPIncTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpinctime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_MPInvValue;
        break;
      }
      
      // optional uint32 MPInvValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPInvValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpinvvalue_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_CoolTime;
        break;
      }
      
      // optional uint32 CoolTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoolTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooltime_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ShareCD;
        break;
      }
      
      // optional uint32 ShareCD = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShareCD:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sharecd_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_HPPercent;
        break;
      }
      
      // optional uint32 HPPercent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hppercent_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_MPPercent;
        break;
      }
      
      // optional uint32 MPPercent = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mppercent_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MaxHPPercent;
        break;
      }
      
      // optional uint32 MaxHPPercent = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhppercent_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_MaxMPPercent;
        break;
      }
      
      // optional uint32 MaxMPPercent = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmppercent_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_LifeSkilType;
        break;
      }
      
      // optional uint32 LifeSkilType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkilType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskiltype_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_DegreeValue;
        break;
      }
      
      // optional uint32 DegreeValue = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &degreevalue_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_PhisicType;
        break;
      }
      
      // optional uint32 PhisicType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PhisicType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &phisictype_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_ApValue;
        break;
      }
      
      // optional uint32 ApValue = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ApValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &apvalue_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(22);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemPhysic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemPhysic::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 ShowType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->showtype(), output);
  }
  
  // optional uint32 BuffID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->buffid(), output);
  }
  
  // optional uint32 LevelLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->levellimit(), output);
  }
  
  // optional uint32 HPMaxValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->hpmaxvalue(), output);
  }
  
  // optional uint32 HPTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->hptime(), output);
  }
  
  // optional uint32 HPIncTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->hpinctime(), output);
  }
  
  // optional uint32 HPInvValue = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->hpinvvalue(), output);
  }
  
  // optional uint32 MPMaxValue = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->mpmaxvalue(), output);
  }
  
  // optional uint32 MPTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->mptime(), output);
  }
  
  // optional uint32 MPIncTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->mpinctime(), output);
  }
  
  // optional uint32 MPInvValue = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->mpinvvalue(), output);
  }
  
  // optional uint32 CoolTime = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->cooltime(), output);
  }
  
  // optional uint32 ShareCD = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->sharecd(), output);
  }
  
  // optional uint32 HPPercent = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->hppercent(), output);
  }
  
  // optional uint32 MPPercent = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->mppercent(), output);
  }
  
  // optional uint32 MaxHPPercent = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->maxhppercent(), output);
  }
  
  // optional uint32 MaxMPPercent = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->maxmppercent(), output);
  }
  
  // optional uint32 LifeSkilType = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->lifeskiltype(), output);
  }
  
  // optional uint32 DegreeValue = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->degreevalue(), output);
  }
  
  // optional uint32 PhisicType = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->phisictype(), output);
  }
  
  // optional uint32 ApValue = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->apvalue(), output);
  }
  
  // optional uint32 Color = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemPhysic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 ShowType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->showtype(), target);
  }
  
  // optional uint32 BuffID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->buffid(), target);
  }
  
  // optional uint32 LevelLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->levellimit(), target);
  }
  
  // optional uint32 HPMaxValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->hpmaxvalue(), target);
  }
  
  // optional uint32 HPTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->hptime(), target);
  }
  
  // optional uint32 HPIncTime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->hpinctime(), target);
  }
  
  // optional uint32 HPInvValue = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->hpinvvalue(), target);
  }
  
  // optional uint32 MPMaxValue = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->mpmaxvalue(), target);
  }
  
  // optional uint32 MPTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->mptime(), target);
  }
  
  // optional uint32 MPIncTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->mpinctime(), target);
  }
  
  // optional uint32 MPInvValue = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->mpinvvalue(), target);
  }
  
  // optional uint32 CoolTime = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->cooltime(), target);
  }
  
  // optional uint32 ShareCD = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->sharecd(), target);
  }
  
  // optional uint32 HPPercent = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->hppercent(), target);
  }
  
  // optional uint32 MPPercent = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->mppercent(), target);
  }
  
  // optional uint32 MaxHPPercent = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->maxhppercent(), target);
  }
  
  // optional uint32 MaxMPPercent = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->maxmppercent(), target);
  }
  
  // optional uint32 LifeSkilType = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->lifeskiltype(), target);
  }
  
  // optional uint32 DegreeValue = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->degreevalue(), target);
  }
  
  // optional uint32 PhisicType = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->phisictype(), target);
  }
  
  // optional uint32 ApValue = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->apvalue(), target);
  }
  
  // optional uint32 Color = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemPhysic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 ShowType = 2;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showtype());
    }
    
    // optional uint32 BuffID = 3;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
    // optional uint32 LevelLimit = 4;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
    // optional uint32 HPMaxValue = 5;
    if (has_hpmaxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpmaxvalue());
    }
    
    // optional uint32 HPTime = 6;
    if (has_hptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hptime());
    }
    
    // optional uint32 HPIncTime = 7;
    if (has_hpinctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpinctime());
    }
    
    // optional uint32 HPInvValue = 8;
    if (has_hpinvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpinvvalue());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MPMaxValue = 9;
    if (has_mpmaxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpmaxvalue());
    }
    
    // optional uint32 MPTime = 10;
    if (has_mptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mptime());
    }
    
    // optional uint32 MPIncTime = 11;
    if (has_mpinctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpinctime());
    }
    
    // optional uint32 MPInvValue = 12;
    if (has_mpinvvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpinvvalue());
    }
    
    // optional uint32 CoolTime = 13;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooltime());
    }
    
    // optional uint32 ShareCD = 14;
    if (has_sharecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sharecd());
    }
    
    // optional uint32 HPPercent = 15;
    if (has_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hppercent());
    }
    
    // optional uint32 MPPercent = 16;
    if (has_mppercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mppercent());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MaxHPPercent = 17;
    if (has_maxhppercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhppercent());
    }
    
    // optional uint32 MaxMPPercent = 18;
    if (has_maxmppercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmppercent());
    }
    
    // optional uint32 LifeSkilType = 19;
    if (has_lifeskiltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskiltype());
    }
    
    // optional uint32 DegreeValue = 20;
    if (has_degreevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->degreevalue());
    }
    
    // optional uint32 PhisicType = 21;
    if (has_phisictype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->phisictype());
    }
    
    // optional uint32 ApValue = 22;
    if (has_apvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->apvalue());
    }
    
    // optional uint32 Color = 23;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemPhysic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemPhysic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemPhysic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemPhysic::MergeFrom(const PBItemPhysic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_showtype(from.showtype());
    }
    if (from._has_bit(2)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(3)) {
      set_levellimit(from.levellimit());
    }
    if (from._has_bit(4)) {
      set_hpmaxvalue(from.hpmaxvalue());
    }
    if (from._has_bit(5)) {
      set_hptime(from.hptime());
    }
    if (from._has_bit(6)) {
      set_hpinctime(from.hpinctime());
    }
    if (from._has_bit(7)) {
      set_hpinvvalue(from.hpinvvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_mpmaxvalue(from.mpmaxvalue());
    }
    if (from._has_bit(9)) {
      set_mptime(from.mptime());
    }
    if (from._has_bit(10)) {
      set_mpinctime(from.mpinctime());
    }
    if (from._has_bit(11)) {
      set_mpinvvalue(from.mpinvvalue());
    }
    if (from._has_bit(12)) {
      set_cooltime(from.cooltime());
    }
    if (from._has_bit(13)) {
      set_sharecd(from.sharecd());
    }
    if (from._has_bit(14)) {
      set_hppercent(from.hppercent());
    }
    if (from._has_bit(15)) {
      set_mppercent(from.mppercent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_maxhppercent(from.maxhppercent());
    }
    if (from._has_bit(17)) {
      set_maxmppercent(from.maxmppercent());
    }
    if (from._has_bit(18)) {
      set_lifeskiltype(from.lifeskiltype());
    }
    if (from._has_bit(19)) {
      set_degreevalue(from.degreevalue());
    }
    if (from._has_bit(20)) {
      set_phisictype(from.phisictype());
    }
    if (from._has_bit(21)) {
      set_apvalue(from.apvalue());
    }
    if (from._has_bit(22)) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemPhysic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPhysic::CopyFrom(const PBItemPhysic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemPhysic::Swap(PBItemPhysic* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(showtype_, other->showtype_);
    std::swap(buffid_, other->buffid_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(hpmaxvalue_, other->hpmaxvalue_);
    std::swap(hptime_, other->hptime_);
    std::swap(hpinctime_, other->hpinctime_);
    std::swap(hpinvvalue_, other->hpinvvalue_);
    std::swap(mpmaxvalue_, other->mpmaxvalue_);
    std::swap(mptime_, other->mptime_);
    std::swap(mpinctime_, other->mpinctime_);
    std::swap(mpinvvalue_, other->mpinvvalue_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(sharecd_, other->sharecd_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(mppercent_, other->mppercent_);
    std::swap(maxhppercent_, other->maxhppercent_);
    std::swap(maxmppercent_, other->maxmppercent_);
    std::swap(lifeskiltype_, other->lifeskiltype_);
    std::swap(degreevalue_, other->degreevalue_);
    std::swap(phisictype_, other->phisictype_);
    std::swap(apvalue_, other->apvalue_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemPhysic::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemPhysic::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemPhysic::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemPhysic_reflection_;
}

// ===================================================================

const ::std::string PBItemHorse::_default_modelname_;
const ::std::string PBItemHorse::_default_showtext_;
#ifndef _MSC_VER
const int PBItemHorse::kBaseInfoFieldNumber;
const int PBItemHorse::kMetierLimitFieldNumber;
const int PBItemHorse::kLevelLimitFieldNumber;
const int PBItemHorse::kPersonLimitFieldNumber;
const int PBItemHorse::kUseTimeFieldNumber;
const int PBItemHorse::kIncreaseSpeedPerFieldNumber;
const int PBItemHorse::kModelNameFieldNumber;
const int PBItemHorse::kCoolTimeFieldNumber;
const int PBItemHorse::kShareCDFieldNumber;
const int PBItemHorse::kSpeedBuffFieldNumber;
const int PBItemHorse::kUsingTimeFieldNumber;
const int PBItemHorse::kShowTextFieldNumber;
const int PBItemHorse::kOffHorseProbFieldNumber;
const int PBItemHorse::kOffBuffIDFieldNumber;
const int PBItemHorse::kInitAPFieldNumber;
const int PBItemHorse::kDeltaAPFieldNumber;
#endif  // !_MSC_VER

PBItemHorse::PBItemHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemHorse::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemHorse::PBItemHorse(const PBItemHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemHorse::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  metierlimit_ = 0u;
  levellimit_ = 0u;
  personlimit_ = 0u;
  usetime_ = 0u;
  increasespeedper_ = 0u;
  modelname_ = const_cast< ::std::string*>(&_default_modelname_);
  cooltime_ = 0u;
  sharecd_ = 0u;
  speedbuff_ = 0u;
  usingtime_ = 0u;
  showtext_ = const_cast< ::std::string*>(&_default_showtext_);
  offhorseprob_ = 0u;
  offbuffid_ = 0u;
  initap_ = 0u;
  deltaap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemHorse::~PBItemHorse() {
  SharedDtor();
}

void PBItemHorse::SharedDtor() {
  if (modelname_ != &_default_modelname_) {
    delete modelname_;
  }
  if (showtext_ != &_default_showtext_) {
    delete showtext_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemHorse_descriptor_;
}

const PBItemHorse& PBItemHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemHorse* PBItemHorse::default_instance_ = NULL;

PBItemHorse* PBItemHorse::New() const {
  return new PBItemHorse;
}

void PBItemHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    metierlimit_ = 0u;
    levellimit_ = 0u;
    personlimit_ = 0u;
    usetime_ = 0u;
    increasespeedper_ = 0u;
    if (_has_bit(6)) {
      if (modelname_ != &_default_modelname_) {
        modelname_->clear();
      }
    }
    cooltime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sharecd_ = 0u;
    speedbuff_ = 0u;
    usingtime_ = 0u;
    if (_has_bit(11)) {
      if (showtext_ != &_default_showtext_) {
        showtext_->clear();
      }
    }
    offhorseprob_ = 0u;
    offbuffid_ = 0u;
    initap_ = 0u;
    deltaap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_MetierLimit;
        break;
      }
      
      // optional uint32 MetierLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierlimit_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PersonLimit;
        break;
      }
      
      // optional uint32 PersonLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PersonLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &personlimit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UseTime;
        break;
      }
      
      // optional uint32 UseTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usetime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_IncreaseSpeedPer;
        break;
      }
      
      // optional uint32 IncreaseSpeedPer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncreaseSpeedPer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &increasespeedper_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_ModelName;
        break;
      }
      
      // optional string ModelName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ModelName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_modelname()));
        if (input->ExpectTag(64)) goto parse_CoolTime;
        break;
      }
      
      // optional uint32 CoolTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoolTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooltime_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ShareCD;
        break;
      }
      
      // optional uint32 ShareCD = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShareCD:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sharecd_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SpeedBuff;
        break;
      }
      
      // optional uint32 SpeedBuff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpeedBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &speedbuff_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_UsingTime;
        break;
      }
      
      // optional uint32 UsingTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UsingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usingtime_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_ShowText;
        break;
      }
      
      // optional string ShowText = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowText:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_showtext()));
        if (input->ExpectTag(104)) goto parse_OffHorseProb;
        break;
      }
      
      // optional uint32 OffHorseProb = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffHorseProb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offhorseprob_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_OffBuffID;
        break;
      }
      
      // optional uint32 OffBuffID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offbuffid_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_InitAP;
        break;
      }
      
      // optional uint32 InitAP = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitAP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initap_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_DeltaAP;
        break;
      }
      
      // optional uint32 DeltaAP = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaAP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaap_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemHorse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 MetierLimit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->metierlimit(), output);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levellimit(), output);
  }
  
  // optional uint32 PersonLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->personlimit(), output);
  }
  
  // optional uint32 UseTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->usetime(), output);
  }
  
  // optional uint32 IncreaseSpeedPer = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->increasespeedper(), output);
  }
  
  // optional string ModelName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->modelname(), output);
  }
  
  // optional uint32 CoolTime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->cooltime(), output);
  }
  
  // optional uint32 ShareCD = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sharecd(), output);
  }
  
  // optional uint32 SpeedBuff = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->speedbuff(), output);
  }
  
  // optional uint32 UsingTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->usingtime(), output);
  }
  
  // optional string ShowText = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->showtext(), output);
  }
  
  // optional uint32 OffHorseProb = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->offhorseprob(), output);
  }
  
  // optional uint32 OffBuffID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->offbuffid(), output);
  }
  
  // optional uint32 InitAP = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->initap(), output);
  }
  
  // optional uint32 DeltaAP = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->deltaap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 MetierLimit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->metierlimit(), target);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levellimit(), target);
  }
  
  // optional uint32 PersonLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->personlimit(), target);
  }
  
  // optional uint32 UseTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->usetime(), target);
  }
  
  // optional uint32 IncreaseSpeedPer = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->increasespeedper(), target);
  }
  
  // optional string ModelName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->modelname(), target);
  }
  
  // optional uint32 CoolTime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->cooltime(), target);
  }
  
  // optional uint32 ShareCD = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sharecd(), target);
  }
  
  // optional uint32 SpeedBuff = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->speedbuff(), target);
  }
  
  // optional uint32 UsingTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->usingtime(), target);
  }
  
  // optional string ShowText = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->showtext(), target);
  }
  
  // optional uint32 OffHorseProb = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->offhorseprob(), target);
  }
  
  // optional uint32 OffBuffID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->offbuffid(), target);
  }
  
  // optional uint32 InitAP = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->initap(), target);
  }
  
  // optional uint32 DeltaAP = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->deltaap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemHorse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 MetierLimit = 2;
    if (has_metierlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierlimit());
    }
    
    // optional uint32 LevelLimit = 3;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
    // optional uint32 PersonLimit = 4;
    if (has_personlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->personlimit());
    }
    
    // optional uint32 UseTime = 5;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usetime());
    }
    
    // optional uint32 IncreaseSpeedPer = 6;
    if (has_increasespeedper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->increasespeedper());
    }
    
    // optional string ModelName = 7;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->modelname());
    }
    
    // optional uint32 CoolTime = 8;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooltime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ShareCD = 9;
    if (has_sharecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sharecd());
    }
    
    // optional uint32 SpeedBuff = 10;
    if (has_speedbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->speedbuff());
    }
    
    // optional uint32 UsingTime = 11;
    if (has_usingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usingtime());
    }
    
    // optional string ShowText = 12;
    if (has_showtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->showtext());
    }
    
    // optional uint32 OffHorseProb = 13;
    if (has_offhorseprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offhorseprob());
    }
    
    // optional uint32 OffBuffID = 14;
    if (has_offbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offbuffid());
    }
    
    // optional uint32 InitAP = 15;
    if (has_initap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initap());
    }
    
    // optional uint32 DeltaAP = 16;
    if (has_deltaap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemHorse::MergeFrom(const PBItemHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_metierlimit(from.metierlimit());
    }
    if (from._has_bit(2)) {
      set_levellimit(from.levellimit());
    }
    if (from._has_bit(3)) {
      set_personlimit(from.personlimit());
    }
    if (from._has_bit(4)) {
      set_usetime(from.usetime());
    }
    if (from._has_bit(5)) {
      set_increasespeedper(from.increasespeedper());
    }
    if (from._has_bit(6)) {
      set_modelname(from.modelname());
    }
    if (from._has_bit(7)) {
      set_cooltime(from.cooltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sharecd(from.sharecd());
    }
    if (from._has_bit(9)) {
      set_speedbuff(from.speedbuff());
    }
    if (from._has_bit(10)) {
      set_usingtime(from.usingtime());
    }
    if (from._has_bit(11)) {
      set_showtext(from.showtext());
    }
    if (from._has_bit(12)) {
      set_offhorseprob(from.offhorseprob());
    }
    if (from._has_bit(13)) {
      set_offbuffid(from.offbuffid());
    }
    if (from._has_bit(14)) {
      set_initap(from.initap());
    }
    if (from._has_bit(15)) {
      set_deltaap(from.deltaap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemHorse::CopyFrom(const PBItemHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemHorse::Swap(PBItemHorse* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(metierlimit_, other->metierlimit_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(personlimit_, other->personlimit_);
    std::swap(usetime_, other->usetime_);
    std::swap(increasespeedper_, other->increasespeedper_);
    std::swap(modelname_, other->modelname_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(sharecd_, other->sharecd_);
    std::swap(speedbuff_, other->speedbuff_);
    std::swap(usingtime_, other->usingtime_);
    std::swap(showtext_, other->showtext_);
    std::swap(offhorseprob_, other->offhorseprob_);
    std::swap(offbuffid_, other->offbuffid_);
    std::swap(initap_, other->initap_);
    std::swap(deltaap_, other->deltaap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemHorse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemHorse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemHorse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemHorse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBStuff::kStuffIDFieldNumber;
const int PBStuff::kNumberFieldNumber;
#endif  // !_MSC_VER

PBStuff::PBStuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStuff::InitAsDefaultInstance() {}

PBStuff::PBStuff(const PBStuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStuff::SharedCtor() {
  _cached_size_ = 0;
  stuffid_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStuff::~PBStuff() {
  SharedDtor();
}

void PBStuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStuff_descriptor_;
}

const PBStuff& PBStuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBStuff* PBStuff::default_instance_ = NULL;

PBStuff* PBStuff::New() const {
  return new PBStuff;
}

void PBStuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stuffid_ = 0u;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stuffid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStuff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StuffID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stuffid(), output);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StuffID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stuffid(), target);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StuffID = 1;
    if (has_stuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stuffid());
    }
    
    // optional uint32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStuff::MergeFrom(const PBStuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stuffid(from.stuffid());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStuff::CopyFrom(const PBStuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStuff::Swap(PBStuff* other) {
  if (other != this) {
    std::swap(stuffid_, other->stuffid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStuff::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStuff::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStuff::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStuff_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBProduct::kProductIDFieldNumber;
const int PBProduct::kPercentFieldNumber;
#endif  // !_MSC_VER

PBProduct::PBProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProduct::InitAsDefaultInstance() {}

PBProduct::PBProduct(const PBProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProduct::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProduct::~PBProduct() {
  SharedDtor();
}

void PBProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProduct_descriptor_;
}

const PBProduct& PBProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBProduct* PBProduct::default_instance_ = NULL;

PBProduct* PBProduct::New() const {
  return new PBProduct;
}

void PBProduct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productid_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &productid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProduct::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ProductID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->productid(), output);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ProductID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->productid(), target);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProduct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->productid());
    }
    
    // optional uint32 Percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProduct::MergeFrom(const PBProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_productid(from.productid());
    }
    if (from._has_bit(1)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduct::CopyFrom(const PBProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduct::Swap(PBProduct* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProduct::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProduct::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProduct::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProduct_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemBluePrint::kBaseInfoFieldNumber;
const int PBItemBluePrint::kTempIDFieldNumber;
const int PBItemBluePrint::kNeedSkillIDFieldNumber;
const int PBItemBluePrint::kNeedSkillLevelFieldNumber;
const int PBItemBluePrint::kProduceCountFieldNumber;
const int PBItemBluePrint::kProduceCostFieldNumber;
const int PBItemBluePrint::kObtainExpFieldNumber;
const int PBItemBluePrint::kStuffFieldNumber;
const int PBItemBluePrint::kProductFieldNumber;
#endif  // !_MSC_VER

PBItemBluePrint::PBItemBluePrint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBluePrint::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemBluePrint::PBItemBluePrint(const PBItemBluePrint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBluePrint::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  tempid_ = 0u;
  needskillid_ = 0u;
  needskilllevel_ = 0u;
  producecount_ = 0u;
  producecost_ = 0u;
  obtainexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBluePrint::~PBItemBluePrint() {
  SharedDtor();
}

void PBItemBluePrint::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemBluePrint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBluePrint_descriptor_;
}

const PBItemBluePrint& PBItemBluePrint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemBluePrint* PBItemBluePrint::default_instance_ = NULL;

PBItemBluePrint* PBItemBluePrint::New() const {
  return new PBItemBluePrint;
}

void PBItemBluePrint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    tempid_ = 0u;
    needskillid_ = 0u;
    needskilllevel_ = 0u;
    producecount_ = 0u;
    producecost_ = 0u;
    obtainexp_ = 0u;
  }
  stuff_.Clear();
  product_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBluePrint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_TempID;
        break;
      }
      
      // optional uint32 TempID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedSkillID;
        break;
      }
      
      // optional uint32 NeedSkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needskillid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NeedSkillLevel;
        break;
      }
      
      // optional uint32 NeedSkillLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needskilllevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ProduceCount;
        break;
      }
      
      // optional uint32 ProduceCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProduceCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &producecount_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ProduceCost;
        break;
      }
      
      // optional uint32 ProduceCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProduceCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &producecost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ObtainExp;
        break;
      }
      
      // optional uint32 ObtainExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ObtainExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &obtainexp_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_Stuff;
        break;
      }
      
      // repeated .PBStuff Stuff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Stuff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_stuff()));
        if (input->ExpectTag(66)) goto parse_Stuff;
        if (input->ExpectTag(74)) goto parse_Product;
        break;
      }
      
      // repeated .PBProduct Product = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Product:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_product()));
        if (input->ExpectTag(74)) goto parse_Product;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBluePrint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBluePrint::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 TempID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->tempid(), output);
  }
  
  // optional uint32 NeedSkillID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needskillid(), output);
  }
  
  // optional uint32 NeedSkillLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->needskilllevel(), output);
  }
  
  // optional uint32 ProduceCount = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->producecount(), output);
  }
  
  // optional uint32 ProduceCost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->producecost(), output);
  }
  
  // optional uint32 ObtainExp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->obtainexp(), output);
  }
  
  // repeated .PBStuff Stuff = 8;
  for (int i = 0; i < this->stuff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->stuff(i), output);
  }
  
  // repeated .PBProduct Product = 9;
  for (int i = 0; i < this->product_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->product(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBluePrint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 TempID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->tempid(), target);
  }
  
  // optional uint32 NeedSkillID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needskillid(), target);
  }
  
  // optional uint32 NeedSkillLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->needskilllevel(), target);
  }
  
  // optional uint32 ProduceCount = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->producecount(), target);
  }
  
  // optional uint32 ProduceCost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->producecost(), target);
  }
  
  // optional uint32 ObtainExp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->obtainexp(), target);
  }
  
  // repeated .PBStuff Stuff = 8;
  for (int i = 0; i < this->stuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->stuff(i), target);
  }
  
  // repeated .PBProduct Product = 9;
  for (int i = 0; i < this->product_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->product(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBluePrint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 TempID = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 NeedSkillID = 3;
    if (has_needskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needskillid());
    }
    
    // optional uint32 NeedSkillLevel = 4;
    if (has_needskilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needskilllevel());
    }
    
    // optional uint32 ProduceCount = 5;
    if (has_producecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->producecount());
    }
    
    // optional uint32 ProduceCost = 6;
    if (has_producecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->producecost());
    }
    
    // optional uint32 ObtainExp = 7;
    if (has_obtainexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->obtainexp());
    }
    
  }
  // repeated .PBStuff Stuff = 8;
  total_size += 1 * this->stuff_size();
  for (int i = 0; i < this->stuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->stuff(i));
  }
  
  // repeated .PBProduct Product = 9;
  total_size += 1 * this->product_size();
  for (int i = 0; i < this->product_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->product(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBluePrint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBluePrint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBluePrint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBluePrint::MergeFrom(const PBItemBluePrint& from) {
  GOOGLE_CHECK_NE(&from, this);
  stuff_.MergeFrom(from.stuff_);
  product_.MergeFrom(from.product_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_needskillid(from.needskillid());
    }
    if (from._has_bit(3)) {
      set_needskilllevel(from.needskilllevel());
    }
    if (from._has_bit(4)) {
      set_producecount(from.producecount());
    }
    if (from._has_bit(5)) {
      set_producecost(from.producecost());
    }
    if (from._has_bit(6)) {
      set_obtainexp(from.obtainexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBluePrint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBluePrint::CopyFrom(const PBItemBluePrint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBluePrint::Swap(PBItemBluePrint* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(tempid_, other->tempid_);
    std::swap(needskillid_, other->needskillid_);
    std::swap(needskilllevel_, other->needskilllevel_);
    std::swap(producecount_, other->producecount_);
    std::swap(producecost_, other->producecost_);
    std::swap(obtainexp_, other->obtainexp_);
    stuff_.Swap(&other->stuff_);
    product_.Swap(&other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBluePrint::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBluePrint::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBluePrint::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBluePrint_reflection_;
}

// ===================================================================

const ::std::string PBItemRune::_default_word_;
#ifndef _MSC_VER
const int PBItemRune::kBaseInfoFieldNumber;
const int PBItemRune::kSuitIDFieldNumber;
const int PBItemRune::kWordFieldNumber;
const int PBItemRune::kOrderIDFieldNumber;
const int PBItemRune::kInsertChargeFieldNumber;
const int PBItemRune::kPropertyIDFieldNumber;
const int PBItemRune::kRuneIndexFieldNumber;
const int PBItemRune::kShowColorFieldNumber;
#endif  // !_MSC_VER

PBItemRune::PBItemRune()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemRune::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemRune::PBItemRune(const PBItemRune& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemRune::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  suitid_ = 0u;
  word_ = const_cast< ::std::string*>(&_default_word_);
  orderid_ = 0u;
  insertcharge_ = 0u;
  propertyid_ = 0u;
  runeindex_ = 0u;
  showcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemRune::~PBItemRune() {
  SharedDtor();
}

void PBItemRune::SharedDtor() {
  if (word_ != &_default_word_) {
    delete word_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemRune::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemRune_descriptor_;
}

const PBItemRune& PBItemRune::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemRune* PBItemRune::default_instance_ = NULL;

PBItemRune* PBItemRune::New() const {
  return new PBItemRune;
}

void PBItemRune::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    suitid_ = 0u;
    if (_has_bit(2)) {
      if (word_ != &_default_word_) {
        word_->clear();
      }
    }
    orderid_ = 0u;
    insertcharge_ = 0u;
    propertyid_ = 0u;
    runeindex_ = 0u;
    showcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemRune::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_SuitID;
        break;
      }
      
      // optional uint32 SuitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuitID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &suitid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Word;
        break;
      }
      
      // optional string Word = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Word:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_word()));
        if (input->ExpectTag(32)) goto parse_OrderID;
        break;
      }
      
      // optional uint32 OrderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OrderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &orderid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_InsertCharge;
        break;
      }
      
      // optional uint32 InsertCharge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InsertCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &insertcharge_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PropertyID;
        break;
      }
      
      // optional uint32 PropertyID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &propertyid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RuneIndex;
        break;
      }
      
      // optional uint32 RuneIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RuneIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &runeindex_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ShowColor;
        break;
      }
      
      // optional uint32 ShowColor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showcolor_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemRune::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemRune::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 SuitID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->suitid(), output);
  }
  
  // optional string Word = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->word(), output);
  }
  
  // optional uint32 OrderID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->orderid(), output);
  }
  
  // optional uint32 InsertCharge = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->insertcharge(), output);
  }
  
  // optional uint32 PropertyID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->propertyid(), output);
  }
  
  // optional uint32 RuneIndex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->runeindex(), output);
  }
  
  // optional uint32 ShowColor = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->showcolor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemRune::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 SuitID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->suitid(), target);
  }
  
  // optional string Word = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->word(), target);
  }
  
  // optional uint32 OrderID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->orderid(), target);
  }
  
  // optional uint32 InsertCharge = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->insertcharge(), target);
  }
  
  // optional uint32 PropertyID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->propertyid(), target);
  }
  
  // optional uint32 RuneIndex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->runeindex(), target);
  }
  
  // optional uint32 ShowColor = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->showcolor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemRune::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 SuitID = 2;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->suitid());
    }
    
    // optional string Word = 3;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->word());
    }
    
    // optional uint32 OrderID = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->orderid());
    }
    
    // optional uint32 InsertCharge = 5;
    if (has_insertcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->insertcharge());
    }
    
    // optional uint32 PropertyID = 6;
    if (has_propertyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->propertyid());
    }
    
    // optional uint32 RuneIndex = 7;
    if (has_runeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->runeindex());
    }
    
    // optional uint32 ShowColor = 8;
    if (has_showcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showcolor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemRune::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemRune* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemRune*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemRune::MergeFrom(const PBItemRune& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_suitid(from.suitid());
    }
    if (from._has_bit(2)) {
      set_word(from.word());
    }
    if (from._has_bit(3)) {
      set_orderid(from.orderid());
    }
    if (from._has_bit(4)) {
      set_insertcharge(from.insertcharge());
    }
    if (from._has_bit(5)) {
      set_propertyid(from.propertyid());
    }
    if (from._has_bit(6)) {
      set_runeindex(from.runeindex());
    }
    if (from._has_bit(7)) {
      set_showcolor(from.showcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemRune::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRune::CopyFrom(const PBItemRune& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRune::Swap(PBItemRune* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(suitid_, other->suitid_);
    std::swap(word_, other->word_);
    std::swap(orderid_, other->orderid_);
    std::swap(insertcharge_, other->insertcharge_);
    std::swap(propertyid_, other->propertyid_);
    std::swap(runeindex_, other->runeindex_);
    std::swap(showcolor_, other->showcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemRune::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemRune::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemRune::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemRune_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemJewel::kBaseInfoFieldNumber;
const int PBItemJewel::kTypeIDFieldNumber;
const int PBItemJewel::kPosFieldNumber;
const int PBItemJewel::kShowColorFieldNumber;
const int PBItemJewel::kPropertyFieldNumber;
const int PBItemJewel::kUniqueFieldNumber;
const int PBItemJewel::kJewelIDFieldNumber;
const int PBItemJewel::kComposeIDFieldNumber;
const int PBItemJewel::kInsertChargeFieldNumber;
const int PBItemJewel::kRemoveChargeFieldNumber;
const int PBItemJewel::kComposeChargeFieldNumber;
const int PBItemJewel::kLevelFieldNumber;
const int PBItemJewel::kRandFieldNumber;
const int PBItemJewel::kNewJewelIDFieldNumber;
const int PBItemJewel::kNewRandFieldNumber;
const int PBItemJewel::kCarveJewelIDFieldNumber;
const int PBItemJewel::kCarveRandFieldNumber;
const int PBItemJewel::kCarveChargeFieldNumber;
const int PBItemJewel::kCardIDFieldNumber;
const int PBItemJewel::kCanCarveFieldNumber;
const int PBItemJewel::kAffectRandFieldNumber;
const int PBItemJewel::kJewComIDFieldNumber;
const int PBItemJewel::kComLevelFieldNumber;
#endif  // !_MSC_VER

PBItemJewel::PBItemJewel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemJewel::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemJewel::PBItemJewel(const PBItemJewel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemJewel::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  typeid__ = 0u;
  pos_ = 0u;
  showcolor_ = 0u;
  property_ = 0u;
  unique_ = 0u;
  composeid_ = 0u;
  insertcharge_ = 0u;
  removecharge_ = 0u;
  composecharge_ = 0u;
  level_ = 0u;
  newjewelid_ = 0u;
  carvecharge_ = 0u;
  cardid_ = 0u;
  cancarve_ = 0u;
  affectrand_ = 0u;
  jewcomid_ = 0u;
  comlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemJewel::~PBItemJewel() {
  SharedDtor();
}

void PBItemJewel::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemJewel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemJewel_descriptor_;
}

const PBItemJewel& PBItemJewel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemJewel* PBItemJewel::default_instance_ = NULL;

PBItemJewel* PBItemJewel::New() const {
  return new PBItemJewel;
}

void PBItemJewel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    typeid__ = 0u;
    pos_ = 0u;
    showcolor_ = 0u;
    property_ = 0u;
    unique_ = 0u;
    composeid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    insertcharge_ = 0u;
    removecharge_ = 0u;
    composecharge_ = 0u;
    level_ = 0u;
    newjewelid_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    carvecharge_ = 0u;
    cardid_ = 0u;
    cancarve_ = 0u;
    affectrand_ = 0u;
    jewcomid_ = 0u;
    comlevel_ = 0u;
  }
  jewelid_.Clear();
  rand_.Clear();
  newrand_.Clear();
  carvejewelid_.Clear();
  carverand_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemJewel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_TypeID;
        break;
      }
      
      // optional uint32 TypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TypeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typeid__));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Pos;
        break;
      }
      
      // optional uint32 Pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Pos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pos_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ShowColor;
        break;
      }
      
      // optional uint32 ShowColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showcolor_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Property;
        break;
      }
      
      // optional uint32 Property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &property_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Unique;
        break;
      }
      
      // optional uint32 Unique = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Unique:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unique_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_JewelID;
        break;
      }
      
      // repeated uint32 JewelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JewelID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_jewelid(value);
        if (input->ExpectTag(56)) goto parse_JewelID;
        if (input->ExpectTag(64)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_InsertCharge;
        break;
      }
      
      // optional uint32 InsertCharge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InsertCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &insertcharge_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RemoveCharge;
        break;
      }
      
      // optional uint32 RemoveCharge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removecharge_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ComposeCharge;
        break;
      }
      
      // optional uint32 ComposeCharge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composecharge_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Rand;
        break;
      }
      
      // repeated uint32 Rand = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rand:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_rand(value);
        if (input->ExpectTag(104)) goto parse_Rand;
        if (input->ExpectTag(112)) goto parse_NewJewelID;
        break;
      }
      
      // optional uint32 NewJewelID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewJewelID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newjewelid_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_NewRand;
        break;
      }
      
      // repeated uint32 NewRand = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewRand:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_newrand(value);
        if (input->ExpectTag(120)) goto parse_NewRand;
        if (input->ExpectTag(128)) goto parse_CarveJewelID;
        break;
      }
      
      // repeated uint32 CarveJewelID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CarveJewelID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_carvejewelid(value);
        if (input->ExpectTag(128)) goto parse_CarveJewelID;
        if (input->ExpectTag(136)) goto parse_CarveRand;
        break;
      }
      
      // repeated uint32 CarveRand = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CarveRand:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_carverand(value);
        if (input->ExpectTag(136)) goto parse_CarveRand;
        if (input->ExpectTag(144)) goto parse_CarveCharge;
        break;
      }
      
      // optional uint32 CarveCharge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CarveCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &carvecharge_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_CardID;
        break;
      }
      
      // optional uint32 CardID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CardID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cardid_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_CanCarve;
        break;
      }
      
      // optional uint32 CanCarve = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanCarve:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cancarve_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_AffectRand;
        break;
      }
      
      // optional uint32 AffectRand = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AffectRand:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &affectrand_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_JewComID;
        break;
      }
      
      // optional uint32 JewComID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JewComID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &jewcomid_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_ComLevel;
        break;
      }
      
      // optional uint32 ComLevel = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &comlevel_));
        _set_bit(22);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemJewel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemJewel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 TypeID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->typeid_(), output);
  }
  
  // optional uint32 Pos = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pos(), output);
  }
  
  // optional uint32 ShowColor = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->showcolor(), output);
  }
  
  // optional uint32 Property = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->property(), output);
  }
  
  // optional uint32 Unique = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->unique(), output);
  }
  
  // repeated uint32 JewelID = 7;
  for (int i = 0; i < this->jewelid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->jewelid(i), output);
  }
  
  // optional uint32 ComposeID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->composeid(), output);
  }
  
  // optional uint32 InsertCharge = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->insertcharge(), output);
  }
  
  // optional uint32 RemoveCharge = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->removecharge(), output);
  }
  
  // optional uint32 ComposeCharge = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->composecharge(), output);
  }
  
  // optional uint32 Level = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->level(), output);
  }
  
  // repeated uint32 Rand = 13;
  for (int i = 0; i < this->rand_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->rand(i), output);
  }
  
  // optional uint32 NewJewelID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->newjewelid(), output);
  }
  
  // repeated uint32 NewRand = 15;
  for (int i = 0; i < this->newrand_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->newrand(i), output);
  }
  
  // repeated uint32 CarveJewelID = 16;
  for (int i = 0; i < this->carvejewelid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->carvejewelid(i), output);
  }
  
  // repeated uint32 CarveRand = 17;
  for (int i = 0; i < this->carverand_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->carverand(i), output);
  }
  
  // optional uint32 CarveCharge = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->carvecharge(), output);
  }
  
  // optional uint32 CardID = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->cardid(), output);
  }
  
  // optional uint32 CanCarve = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->cancarve(), output);
  }
  
  // optional uint32 AffectRand = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->affectrand(), output);
  }
  
  // optional uint32 JewComID = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->jewcomid(), output);
  }
  
  // optional uint32 ComLevel = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->comlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemJewel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 TypeID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->typeid_(), target);
  }
  
  // optional uint32 Pos = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pos(), target);
  }
  
  // optional uint32 ShowColor = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->showcolor(), target);
  }
  
  // optional uint32 Property = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->property(), target);
  }
  
  // optional uint32 Unique = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->unique(), target);
  }
  
  // repeated uint32 JewelID = 7;
  for (int i = 0; i < this->jewelid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->jewelid(i), target);
  }
  
  // optional uint32 ComposeID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->composeid(), target);
  }
  
  // optional uint32 InsertCharge = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->insertcharge(), target);
  }
  
  // optional uint32 RemoveCharge = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->removecharge(), target);
  }
  
  // optional uint32 ComposeCharge = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->composecharge(), target);
  }
  
  // optional uint32 Level = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->level(), target);
  }
  
  // repeated uint32 Rand = 13;
  for (int i = 0; i < this->rand_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->rand(i), target);
  }
  
  // optional uint32 NewJewelID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->newjewelid(), target);
  }
  
  // repeated uint32 NewRand = 15;
  for (int i = 0; i < this->newrand_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->newrand(i), target);
  }
  
  // repeated uint32 CarveJewelID = 16;
  for (int i = 0; i < this->carvejewelid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->carvejewelid(i), target);
  }
  
  // repeated uint32 CarveRand = 17;
  for (int i = 0; i < this->carverand_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->carverand(i), target);
  }
  
  // optional uint32 CarveCharge = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->carvecharge(), target);
  }
  
  // optional uint32 CardID = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->cardid(), target);
  }
  
  // optional uint32 CanCarve = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->cancarve(), target);
  }
  
  // optional uint32 AffectRand = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->affectrand(), target);
  }
  
  // optional uint32 JewComID = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->jewcomid(), target);
  }
  
  // optional uint32 ComLevel = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->comlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemJewel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 TypeID = 2;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typeid_());
    }
    
    // optional uint32 Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pos());
    }
    
    // optional uint32 ShowColor = 4;
    if (has_showcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showcolor());
    }
    
    // optional uint32 Property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->property());
    }
    
    // optional uint32 Unique = 6;
    if (has_unique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unique());
    }
    
    // optional uint32 ComposeID = 8;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InsertCharge = 9;
    if (has_insertcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->insertcharge());
    }
    
    // optional uint32 RemoveCharge = 10;
    if (has_removecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removecharge());
    }
    
    // optional uint32 ComposeCharge = 11;
    if (has_composecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composecharge());
    }
    
    // optional uint32 Level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 NewJewelID = 14;
    if (has_newjewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newjewelid());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 CarveCharge = 18;
    if (has_carvecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->carvecharge());
    }
    
    // optional uint32 CardID = 19;
    if (has_cardid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cardid());
    }
    
    // optional uint32 CanCarve = 20;
    if (has_cancarve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cancarve());
    }
    
    // optional uint32 AffectRand = 21;
    if (has_affectrand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->affectrand());
    }
    
    // optional uint32 JewComID = 22;
    if (has_jewcomid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->jewcomid());
    }
    
    // optional uint32 ComLevel = 23;
    if (has_comlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->comlevel());
    }
    
  }
  // repeated uint32 JewelID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->jewelid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->jewelid(i));
    }
    total_size += 1 * this->jewelid_size() + data_size;
  }
  
  // repeated uint32 Rand = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->rand(i));
    }
    total_size += 1 * this->rand_size() + data_size;
  }
  
  // repeated uint32 NewRand = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->newrand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->newrand(i));
    }
    total_size += 1 * this->newrand_size() + data_size;
  }
  
  // repeated uint32 CarveJewelID = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->carvejewelid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->carvejewelid(i));
    }
    total_size += 2 * this->carvejewelid_size() + data_size;
  }
  
  // repeated uint32 CarveRand = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->carverand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->carverand(i));
    }
    total_size += 2 * this->carverand_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemJewel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemJewel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemJewel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemJewel::MergeFrom(const PBItemJewel& from) {
  GOOGLE_CHECK_NE(&from, this);
  jewelid_.MergeFrom(from.jewelid_);
  rand_.MergeFrom(from.rand_);
  newrand_.MergeFrom(from.newrand_);
  carvejewelid_.MergeFrom(from.carvejewelid_);
  carverand_.MergeFrom(from.carverand_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_typeid_(from.typeid_());
    }
    if (from._has_bit(2)) {
      set_pos(from.pos());
    }
    if (from._has_bit(3)) {
      set_showcolor(from.showcolor());
    }
    if (from._has_bit(4)) {
      set_property(from.property());
    }
    if (from._has_bit(5)) {
      set_unique(from.unique());
    }
    if (from._has_bit(7)) {
      set_composeid(from.composeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_insertcharge(from.insertcharge());
    }
    if (from._has_bit(9)) {
      set_removecharge(from.removecharge());
    }
    if (from._has_bit(10)) {
      set_composecharge(from.composecharge());
    }
    if (from._has_bit(11)) {
      set_level(from.level());
    }
    if (from._has_bit(13)) {
      set_newjewelid(from.newjewelid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from._has_bit(17)) {
      set_carvecharge(from.carvecharge());
    }
    if (from._has_bit(18)) {
      set_cardid(from.cardid());
    }
    if (from._has_bit(19)) {
      set_cancarve(from.cancarve());
    }
    if (from._has_bit(20)) {
      set_affectrand(from.affectrand());
    }
    if (from._has_bit(21)) {
      set_jewcomid(from.jewcomid());
    }
    if (from._has_bit(22)) {
      set_comlevel(from.comlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemJewel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemJewel::CopyFrom(const PBItemJewel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemJewel::Swap(PBItemJewel* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(typeid__, other->typeid__);
    std::swap(pos_, other->pos_);
    std::swap(showcolor_, other->showcolor_);
    std::swap(property_, other->property_);
    std::swap(unique_, other->unique_);
    jewelid_.Swap(&other->jewelid_);
    std::swap(composeid_, other->composeid_);
    std::swap(insertcharge_, other->insertcharge_);
    std::swap(removecharge_, other->removecharge_);
    std::swap(composecharge_, other->composecharge_);
    std::swap(level_, other->level_);
    rand_.Swap(&other->rand_);
    std::swap(newjewelid_, other->newjewelid_);
    newrand_.Swap(&other->newrand_);
    carvejewelid_.Swap(&other->carvejewelid_);
    carverand_.Swap(&other->carverand_);
    std::swap(carvecharge_, other->carvecharge_);
    std::swap(cardid_, other->cardid_);
    std::swap(cancarve_, other->cancarve_);
    std::swap(affectrand_, other->affectrand_);
    std::swap(jewcomid_, other->jewcomid_);
    std::swap(comlevel_, other->comlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemJewel::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemJewel::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemJewel::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemJewel_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemYuanBug::kBaseInfoFieldNumber;
const int PBItemYuanBug::kYuanFieldNumber;
const int PBItemYuanBug::kEggIDFieldNumber;
const int PBItemYuanBug::kYuanTypeFieldNumber;
#endif  // !_MSC_VER

PBItemYuanBug::PBItemYuanBug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemYuanBug::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemYuanBug::PBItemYuanBug(const PBItemYuanBug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemYuanBug::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  yuan_ = 0u;
  eggid_ = 0u;
  yuantype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemYuanBug::~PBItemYuanBug() {
  SharedDtor();
}

void PBItemYuanBug::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemYuanBug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemYuanBug_descriptor_;
}

const PBItemYuanBug& PBItemYuanBug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemYuanBug* PBItemYuanBug::default_instance_ = NULL;

PBItemYuanBug* PBItemYuanBug::New() const {
  return new PBItemYuanBug;
}

void PBItemYuanBug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    yuan_ = 0u;
    eggid_ = 0u;
    yuantype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemYuanBug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Yuan;
        break;
      }
      
      // optional uint32 Yuan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Yuan:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yuan_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EggID;
        break;
      }
      
      // optional uint32 EggID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EggID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eggid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_YuanType;
        break;
      }
      
      // optional uint32 YuanType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YuanType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yuantype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemYuanBug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemYuanBug::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Yuan = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->yuan(), output);
  }
  
  // optional uint32 EggID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->eggid(), output);
  }
  
  // optional uint32 YuanType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->yuantype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemYuanBug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Yuan = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->yuan(), target);
  }
  
  // optional uint32 EggID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->eggid(), target);
  }
  
  // optional uint32 YuanType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->yuantype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemYuanBug::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Yuan = 2;
    if (has_yuan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yuan());
    }
    
    // optional uint32 EggID = 3;
    if (has_eggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eggid());
    }
    
    // optional uint32 YuanType = 4;
    if (has_yuantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yuantype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemYuanBug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemYuanBug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemYuanBug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemYuanBug::MergeFrom(const PBItemYuanBug& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_yuan(from.yuan());
    }
    if (from._has_bit(2)) {
      set_eggid(from.eggid());
    }
    if (from._has_bit(3)) {
      set_yuantype(from.yuantype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemYuanBug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemYuanBug::CopyFrom(const PBItemYuanBug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemYuanBug::Swap(PBItemYuanBug* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(yuan_, other->yuan_);
    std::swap(eggid_, other->eggid_);
    std::swap(yuantype_, other->yuantype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemYuanBug::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemYuanBug::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemYuanBug::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemYuanBug_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemYuanEgg::kBaseInfoFieldNumber;
const int PBItemYuanEgg::kLevelFieldNumber;
const int PBItemYuanEgg::kComposeIDFieldNumber;
const int PBItemYuanEgg::kMaxEquipFieldNumber;
#endif  // !_MSC_VER

PBItemYuanEgg::PBItemYuanEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemYuanEgg::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemYuanEgg::PBItemYuanEgg(const PBItemYuanEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemYuanEgg::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  level_ = 0u;
  composeid_ = 0u;
  maxequip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemYuanEgg::~PBItemYuanEgg() {
  SharedDtor();
}

void PBItemYuanEgg::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemYuanEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemYuanEgg_descriptor_;
}

const PBItemYuanEgg& PBItemYuanEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemYuanEgg* PBItemYuanEgg::default_instance_ = NULL;

PBItemYuanEgg* PBItemYuanEgg::New() const {
  return new PBItemYuanEgg;
}

void PBItemYuanEgg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    level_ = 0u;
    composeid_ = 0u;
    maxequip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemYuanEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MaxEquip;
        break;
      }
      
      // optional uint32 MaxEquip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxEquip:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxequip_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemYuanEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemYuanEgg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  // optional uint32 MaxEquip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->maxequip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemYuanEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  // optional uint32 MaxEquip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->maxequip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemYuanEgg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 MaxEquip = 4;
    if (has_maxequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxequip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemYuanEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemYuanEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemYuanEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemYuanEgg::MergeFrom(const PBItemYuanEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(3)) {
      set_maxequip(from.maxequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemYuanEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemYuanEgg::CopyFrom(const PBItemYuanEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemYuanEgg::Swap(PBItemYuanEgg* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(level_, other->level_);
    std::swap(composeid_, other->composeid_);
    std::swap(maxequip_, other->maxequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemYuanEgg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemYuanEgg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemYuanEgg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemYuanEgg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemSequence::kTempIDFieldNumber;
const int PBItemSequence::kSequenceFieldNumber;
#endif  // !_MSC_VER

PBItemSequence::PBItemSequence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSequence::InitAsDefaultInstance() {}

PBItemSequence::PBItemSequence(const PBItemSequence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSequence::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSequence::~PBItemSequence() {
  SharedDtor();
}

void PBItemSequence::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemSequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSequence_descriptor_;
}

const PBItemSequence& PBItemSequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemSequence* PBItemSequence::default_instance_ = NULL;

PBItemSequence* PBItemSequence::New() const {
  return new PBItemSequence;
}

void PBItemSequence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  sequence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Sequence;
        break;
      }
      
      // repeated uint32 Sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sequence:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_sequence(value);
        if (input->ExpectTag(16)) goto parse_Sequence;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemSequence::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Sequence = 2;
  for (int i = 0; i < this->sequence_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sequence(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSequence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Sequence = 2;
  for (int i = 0; i < this->sequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sequence(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSequence::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Sequence = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->sequence(i));
    }
    total_size += 1 * this->sequence_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemSequence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSequence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSequence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSequence::MergeFrom(const PBItemSequence& from) {
  GOOGLE_CHECK_NE(&from, this);
  sequence_.MergeFrom(from.sequence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSequence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSequence::CopyFrom(const PBItemSequence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSequence::Swap(PBItemSequence* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    sequence_.Swap(&other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemSequence::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemSequence::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemSequence::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemSequence_reflection_;
}

// ===================================================================

const ::std::string PBEquipment::_default_modalname_;
#ifndef _MSC_VER
const int PBEquipment::kBaseInfoFieldNumber;
const int PBEquipment::kModalNameFieldNumber;
const int PBEquipment::kShowLevelFieldNumber;
const int PBEquipment::kEquipTypeFieldNumber;
const int PBEquipment::kShowColorFieldNumber;
const int PBEquipment::kStrRequireFieldNumber;
const int PBEquipment::kConRequireFieldNumber;
const int PBEquipment::kStaRequireFieldNumber;
const int PBEquipment::kWisRequireFieldNumber;
const int PBEquipment::kSprRequireFieldNumber;
const int PBEquipment::kMetierRequireFieldNumber;
const int PBEquipment::kLevelRequireFieldNumber;
const int PBEquipment::kSexRequireFieldNumber;
const int PBEquipment::kYuanValueFieldNumber;
const int PBEquipment::kEquipDurabilityFieldNumber;
const int PBEquipment::kBaseMendChargeFieldNumber;
const int PBEquipment::kNpcAbrasionRateFieldNumber;
const int PBEquipment::kPlayerAbrasionRateFieldNumber;
const int PBEquipment::kCanUpGradeFieldNumber;
const int PBEquipment::kUpgChargeFieldNumber;
const int PBEquipment::kNeedBindMoneyFieldNumber;
const int PBEquipment::kUpgPropertyIDFieldNumber;
const int PBEquipment::kUpgValueFieldNumber;
const int PBEquipment::kMaxSlotNumber1FieldNumber;
const int PBEquipment::kMaxSlotNumber2FieldNumber;
const int PBEquipment::kPropertyPercentFieldNumber;
const int PBEquipment::kPropertyTableIDFieldNumber;
const int PBEquipment::kPropertyPercentExFieldNumber;
const int PBEquipment::kPropertyTableIDExFieldNumber;
const int PBEquipment::kPAttackDiffFieldNumber;
const int PBEquipment::kJudgePercent1FieldNumber;
const int PBEquipment::kJudgePercent2FieldNumber;
const int PBEquipment::kResDefPercentFieldNumber;
const int PBEquipment::kResAttPercentFieldNumber;
const int PBEquipment::kResDefValueFieldNumber;
const int PBEquipment::kResAttValueFieldNumber;
const int PBEquipment::kSuitIDFieldNumber;
const int PBEquipment::kSuitPosFieldNumber;
const int PBEquipment::kMAttackDiffFieldNumber;
const int PBEquipment::kOpenChargeFieldNumber;
const int PBEquipment::kAddChargeFieldNumber;
const int PBEquipment::kJudgeChargeFieldNumber;
const int PBEquipment::kReJudgeChargeFieldNumber;
const int PBEquipment::kDefUpgChargeFieldNumber;
const int PBEquipment::kDefChangeChargeFieldNumber;
const int PBEquipment::kAttUpgChargeFieldNumber;
const int PBEquipment::kAttChangeChargeFieldNumber;
const int PBEquipment::kCanDefUpgradeFieldNumber;
const int PBEquipment::kCanAttUpgradeFieldNumber;
const int PBEquipment::kBindBonusFieldNumber;
const int PBEquipment::kMultiComposeFieldNumber;
const int PBEquipment::kCanChangeFieldNumber;
const int PBEquipment::kChangeChargeFieldNumber;
const int PBEquipment::kCanSplitFieldNumber;
const int PBEquipment::kSplitIDFieldNumber;
const int PBEquipment::kSplitNumFieldNumber;
const int PBEquipment::kSplitChargeFieldNumber;
const int PBEquipment::kUpgExtra1FieldNumber;
const int PBEquipment::kUpgExtra2FieldNumber;
const int PBEquipment::kExtChargeFieldNumber;
const int PBEquipment::kResistTranFieldNumber;
const int PBEquipment::kIsShenQiFieldNumber;
#endif  // !_MSC_VER

PBEquipment::PBEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipment::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBEquipment::PBEquipment(const PBEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipment::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  modalname_ = const_cast< ::std::string*>(&_default_modalname_);
  showlevel_ = 0u;
  equiptype_ = 0u;
  showcolor_ = 0u;
  metierrequire_ = 0u;
  levelrequire_ = 0u;
  sexrequire_ = 0u;
  yuanvalue_ = 0u;
  equipdurability_ = 0u;
  basemendcharge_ = 0u;
  npcabrasionrate_ = 0u;
  playerabrasionrate_ = 0u;
  canupgrade_ = 0u;
  upgcharge_ = 0u;
  needbindmoney_ = 0u;
  maxslotnumber2_ = 0u;
  suitid_ = 0u;
  suitpos_ = 0u;
  opencharge_ = 0u;
  addcharge_ = 0u;
  judgecharge_ = 0u;
  rejudgecharge_ = 0u;
  defupgcharge_ = 0u;
  defchangecharge_ = 0u;
  attupgcharge_ = 0u;
  attchangecharge_ = 0u;
  candefupgrade_ = 0u;
  canattupgrade_ = 0u;
  bindbonus_ = 0u;
  multicompose_ = 0u;
  canchange_ = 0u;
  changecharge_ = 0u;
  cansplit_ = 0u;
  splitcharge_ = 0u;
  extcharge_ = 0u;
  resisttran_ = 0u;
  isshenqi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipment::~PBEquipment() {
  SharedDtor();
}

void PBEquipment::SharedDtor() {
  if (modalname_ != &_default_modalname_) {
    delete modalname_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipment_descriptor_;
}

const PBEquipment& PBEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipment* PBEquipment::default_instance_ = NULL;

PBEquipment* PBEquipment::New() const {
  return new PBEquipment;
}

void PBEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    if (_has_bit(1)) {
      if (modalname_ != &_default_modalname_) {
        modalname_->clear();
      }
    }
    showlevel_ = 0u;
    equiptype_ = 0u;
    showcolor_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    metierrequire_ = 0u;
    levelrequire_ = 0u;
    sexrequire_ = 0u;
    yuanvalue_ = 0u;
    equipdurability_ = 0u;
    basemendcharge_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    npcabrasionrate_ = 0u;
    playerabrasionrate_ = 0u;
    canupgrade_ = 0u;
    upgcharge_ = 0u;
    needbindmoney_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxslotnumber2_ = 0u;
  }
  if (_has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    suitid_ = 0u;
    suitpos_ = 0u;
    opencharge_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    addcharge_ = 0u;
    judgecharge_ = 0u;
    rejudgecharge_ = 0u;
    defupgcharge_ = 0u;
    defchangecharge_ = 0u;
    attupgcharge_ = 0u;
    attchangecharge_ = 0u;
    candefupgrade_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    canattupgrade_ = 0u;
    bindbonus_ = 0u;
    multicompose_ = 0u;
    canchange_ = 0u;
    changecharge_ = 0u;
    cansplit_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    splitcharge_ = 0u;
    extcharge_ = 0u;
    resisttran_ = 0u;
    isshenqi_ = 0u;
  }
  strrequire_.Clear();
  conrequire_.Clear();
  starequire_.Clear();
  wisrequire_.Clear();
  sprrequire_.Clear();
  upgpropertyid_.Clear();
  upgvalue_.Clear();
  maxslotnumber1_.Clear();
  propertypercent_.Clear();
  propertytableid_.Clear();
  propertypercentex_.Clear();
  propertytableidex_.Clear();
  pattackdiff_.Clear();
  judgepercent1_.Clear();
  judgepercent2_.Clear();
  resdefpercent_.Clear();
  resattpercent_.Clear();
  resdefvalue_.Clear();
  resattvalue_.Clear();
  mattackdiff_.Clear();
  splitid_.Clear();
  splitnum_.Clear();
  upgextra1_.Clear();
  upgextra2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(18)) goto parse_ModalName;
        break;
      }
      
      // optional string ModalName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ModalName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_modalname()));
        if (input->ExpectTag(24)) goto parse_ShowLevel;
        break;
      }
      
      // optional uint32 ShowLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_EquipType;
        break;
      }
      
      // optional uint32 EquipType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equiptype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ShowColor;
        break;
      }
      
      // optional uint32 ShowColor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showcolor_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_StrRequire;
        break;
      }
      
      // repeated uint32 StrRequire = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StrRequire:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_strrequire(value);
        if (input->ExpectTag(48)) goto parse_StrRequire;
        if (input->ExpectTag(56)) goto parse_ConRequire;
        break;
      }
      
      // repeated uint32 ConRequire = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConRequire:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_conrequire(value);
        if (input->ExpectTag(56)) goto parse_ConRequire;
        if (input->ExpectTag(64)) goto parse_StaRequire;
        break;
      }
      
      // repeated uint32 StaRequire = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StaRequire:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_starequire(value);
        if (input->ExpectTag(64)) goto parse_StaRequire;
        if (input->ExpectTag(72)) goto parse_WisRequire;
        break;
      }
      
      // repeated uint32 WisRequire = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WisRequire:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wisrequire(value);
        if (input->ExpectTag(72)) goto parse_WisRequire;
        if (input->ExpectTag(80)) goto parse_SprRequire;
        break;
      }
      
      // repeated uint32 SprRequire = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SprRequire:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_sprrequire(value);
        if (input->ExpectTag(80)) goto parse_SprRequire;
        if (input->ExpectTag(88)) goto parse_MetierRequire;
        break;
      }
      
      // optional uint32 MetierRequire = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierrequire_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_LevelRequire;
        break;
      }
      
      // optional uint32 LevelRequire = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelrequire_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_SexRequire;
        break;
      }
      
      // optional uint32 SexRequire = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SexRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sexrequire_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_YuanValue;
        break;
      }
      
      // optional uint32 YuanValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YuanValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yuanvalue_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_EquipDurability;
        break;
      }
      
      // optional uint32 EquipDurability = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipDurability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equipdurability_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_BaseMendCharge;
        break;
      }
      
      // optional uint32 BaseMendCharge = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaseMendCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &basemendcharge_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_NpcAbrasionRate;
        break;
      }
      
      // optional uint32 NpcAbrasionRate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcAbrasionRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcabrasionrate_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PlayerAbrasionRate;
        break;
      }
      
      // optional uint32 PlayerAbrasionRate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerAbrasionRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerabrasionrate_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_CanUpGrade;
        break;
      }
      
      // optional uint32 CanUpGrade = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanUpGrade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canupgrade_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_UpgCharge;
        break;
      }
      
      // optional uint32 UpgCharge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upgcharge_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_NeedBindMoney;
        break;
      }
      
      // optional uint32 NeedBindMoney = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needbindmoney_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_UpgPropertyID;
        break;
      }
      
      // repeated uint32 UpgPropertyID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgPropertyID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgpropertyid(value);
        if (input->ExpectTag(176)) goto parse_UpgPropertyID;
        if (input->ExpectTag(184)) goto parse_UpgValue;
        break;
      }
      
      // repeated uint32 UpgValue = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgvalue(value);
        if (input->ExpectTag(184)) goto parse_UpgValue;
        if (input->ExpectTag(192)) goto parse_MaxSlotNumber1;
        break;
      }
      
      // repeated uint32 MaxSlotNumber1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxSlotNumber1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_maxslotnumber1(value);
        if (input->ExpectTag(192)) goto parse_MaxSlotNumber1;
        if (input->ExpectTag(200)) goto parse_MaxSlotNumber2;
        break;
      }
      
      // optional uint32 MaxSlotNumber2 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxSlotNumber2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxslotnumber2_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_PropertyPercent;
        break;
      }
      
      // repeated uint32 PropertyPercent = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyPercent:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertypercent(value);
        if (input->ExpectTag(208)) goto parse_PropertyPercent;
        if (input->ExpectTag(216)) goto parse_PropertyTableID;
        break;
      }
      
      // repeated uint32 PropertyTableID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyTableID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertytableid(value);
        if (input->ExpectTag(216)) goto parse_PropertyTableID;
        if (input->ExpectTag(224)) goto parse_PropertyPercentEx;
        break;
      }
      
      // repeated uint32 PropertyPercentEx = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyPercentEx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertypercentex(value);
        if (input->ExpectTag(224)) goto parse_PropertyPercentEx;
        if (input->ExpectTag(232)) goto parse_PropertyTableIDEx;
        break;
      }
      
      // repeated uint32 PropertyTableIDEx = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyTableIDEx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertytableidex(value);
        if (input->ExpectTag(232)) goto parse_PropertyTableIDEx;
        if (input->ExpectTag(240)) goto parse_PAttackDiff;
        break;
      }
      
      // repeated uint32 PAttackDiff = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackDiff:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pattackdiff(value);
        if (input->ExpectTag(240)) goto parse_PAttackDiff;
        if (input->ExpectTag(248)) goto parse_JudgePercent1;
        break;
      }
      
      // repeated uint32 JudgePercent1 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgePercent1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_judgepercent1(value);
        if (input->ExpectTag(248)) goto parse_JudgePercent1;
        if (input->ExpectTag(256)) goto parse_JudgePercent2;
        break;
      }
      
      // repeated uint32 JudgePercent2 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgePercent2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_judgepercent2(value);
        if (input->ExpectTag(256)) goto parse_JudgePercent2;
        if (input->ExpectTag(264)) goto parse_ResDefPercent;
        break;
      }
      
      // repeated uint32 ResDefPercent = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDefPercent:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resdefpercent(value);
        if (input->ExpectTag(264)) goto parse_ResDefPercent;
        if (input->ExpectTag(272)) goto parse_ResAttPercent;
        break;
      }
      
      // repeated uint32 ResAttPercent = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAttPercent:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resattpercent(value);
        if (input->ExpectTag(272)) goto parse_ResAttPercent;
        if (input->ExpectTag(280)) goto parse_ResDefValue;
        break;
      }
      
      // repeated uint32 ResDefValue = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDefValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resdefvalue(value);
        if (input->ExpectTag(280)) goto parse_ResDefValue;
        if (input->ExpectTag(288)) goto parse_ResAttValue;
        break;
      }
      
      // repeated uint32 ResAttValue = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAttValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resattvalue(value);
        if (input->ExpectTag(288)) goto parse_ResAttValue;
        if (input->ExpectTag(296)) goto parse_SuitID;
        break;
      }
      
      // optional uint32 SuitID = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuitID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &suitid_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_SuitPos;
        break;
      }
      
      // optional uint32 SuitPos = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuitPos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &suitpos_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_MAttackDiff;
        break;
      }
      
      // repeated uint32 MAttackDiff = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackDiff:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mattackdiff(value);
        if (input->ExpectTag(312)) goto parse_MAttackDiff;
        if (input->ExpectTag(320)) goto parse_OpenCharge;
        break;
      }
      
      // optional uint32 OpenCharge = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &opencharge_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_AddCharge;
        break;
      }
      
      // optional uint32 AddCharge = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addcharge_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_JudgeCharge;
        break;
      }
      
      // optional uint32 JudgeCharge = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgecharge_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_ReJudgeCharge;
        break;
      }
      
      // optional uint32 ReJudgeCharge = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReJudgeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rejudgecharge_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_DefUpgCharge;
        break;
      }
      
      // optional uint32 DefUpgCharge = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefUpgCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &defupgcharge_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_DefChangeCharge;
        break;
      }
      
      // optional uint32 DefChangeCharge = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefChangeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &defchangecharge_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_AttUpgCharge;
        break;
      }
      
      // optional uint32 AttUpgCharge = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttUpgCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attupgcharge_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_AttChangeCharge;
        break;
      }
      
      // optional uint32 AttChangeCharge = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttChangeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attchangecharge_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_CanDefUpgrade;
        break;
      }
      
      // optional uint32 CanDefUpgrade = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanDefUpgrade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &candefupgrade_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_CanAttUpgrade;
        break;
      }
      
      // optional uint32 CanAttUpgrade = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanAttUpgrade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canattupgrade_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_BindBonus;
        break;
      }
      
      // optional uint32 BindBonus = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindBonus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindbonus_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_MultiCompose;
        break;
      }
      
      // optional uint32 MultiCompose = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MultiCompose:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &multicompose_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_CanChange;
        break;
      }
      
      // optional uint32 CanChange = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanChange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canchange_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_ChangeCharge;
        break;
      }
      
      // optional uint32 ChangeCharge = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changecharge_));
        _set_bit(52);
        if (input->ExpectTag(432)) goto parse_CanSplit;
        break;
      }
      
      // optional uint32 CanSplit = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanSplit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cansplit_));
        _set_bit(53);
        if (input->ExpectTag(440)) goto parse_SplitID;
        break;
      }
      
      // repeated uint32 SplitID = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SplitID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_splitid(value);
        if (input->ExpectTag(440)) goto parse_SplitID;
        if (input->ExpectTag(448)) goto parse_SplitNum;
        break;
      }
      
      // repeated uint32 SplitNum = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SplitNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_splitnum(value);
        if (input->ExpectTag(448)) goto parse_SplitNum;
        if (input->ExpectTag(456)) goto parse_SplitCharge;
        break;
      }
      
      // optional uint32 SplitCharge = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SplitCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &splitcharge_));
        _set_bit(56);
        if (input->ExpectTag(464)) goto parse_UpgExtra1;
        break;
      }
      
      // repeated uint32 UpgExtra1 = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgExtra1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgextra1(value);
        if (input->ExpectTag(464)) goto parse_UpgExtra1;
        if (input->ExpectTag(472)) goto parse_UpgExtra2;
        break;
      }
      
      // repeated uint32 UpgExtra2 = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgExtra2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgextra2(value);
        if (input->ExpectTag(472)) goto parse_UpgExtra2;
        if (input->ExpectTag(480)) goto parse_ExtCharge;
        break;
      }
      
      // optional uint32 ExtCharge = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extcharge_));
        _set_bit(59);
        if (input->ExpectTag(488)) goto parse_ResistTran;
        break;
      }
      
      // optional uint32 ResistTran = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResistTran:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resisttran_));
        _set_bit(60);
        if (input->ExpectTag(496)) goto parse_IsShenQi;
        break;
      }
      
      // optional uint32 IsShenQi = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsShenQi:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isshenqi_));
        _set_bit(61);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipment::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional string ModalName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->modalname(), output);
  }
  
  // optional uint32 ShowLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->showlevel(), output);
  }
  
  // optional uint32 EquipType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->equiptype(), output);
  }
  
  // optional uint32 ShowColor = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->showcolor(), output);
  }
  
  // repeated uint32 StrRequire = 6;
  for (int i = 0; i < this->strrequire_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->strrequire(i), output);
  }
  
  // repeated uint32 ConRequire = 7;
  for (int i = 0; i < this->conrequire_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->conrequire(i), output);
  }
  
  // repeated uint32 StaRequire = 8;
  for (int i = 0; i < this->starequire_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->starequire(i), output);
  }
  
  // repeated uint32 WisRequire = 9;
  for (int i = 0; i < this->wisrequire_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->wisrequire(i), output);
  }
  
  // repeated uint32 SprRequire = 10;
  for (int i = 0; i < this->sprrequire_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->sprrequire(i), output);
  }
  
  // optional uint32 MetierRequire = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->metierrequire(), output);
  }
  
  // optional uint32 LevelRequire = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->levelrequire(), output);
  }
  
  // optional uint32 SexRequire = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->sexrequire(), output);
  }
  
  // optional uint32 YuanValue = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->yuanvalue(), output);
  }
  
  // optional uint32 EquipDurability = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->equipdurability(), output);
  }
  
  // optional uint32 BaseMendCharge = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->basemendcharge(), output);
  }
  
  // optional uint32 NpcAbrasionRate = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->npcabrasionrate(), output);
  }
  
  // optional uint32 PlayerAbrasionRate = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->playerabrasionrate(), output);
  }
  
  // optional uint32 CanUpGrade = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->canupgrade(), output);
  }
  
  // optional uint32 UpgCharge = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->upgcharge(), output);
  }
  
  // optional uint32 NeedBindMoney = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->needbindmoney(), output);
  }
  
  // repeated uint32 UpgPropertyID = 22;
  for (int i = 0; i < this->upgpropertyid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->upgpropertyid(i), output);
  }
  
  // repeated uint32 UpgValue = 23;
  for (int i = 0; i < this->upgvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->upgvalue(i), output);
  }
  
  // repeated uint32 MaxSlotNumber1 = 24;
  for (int i = 0; i < this->maxslotnumber1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->maxslotnumber1(i), output);
  }
  
  // optional uint32 MaxSlotNumber2 = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->maxslotnumber2(), output);
  }
  
  // repeated uint32 PropertyPercent = 26;
  for (int i = 0; i < this->propertypercent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->propertypercent(i), output);
  }
  
  // repeated uint32 PropertyTableID = 27;
  for (int i = 0; i < this->propertytableid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->propertytableid(i), output);
  }
  
  // repeated uint32 PropertyPercentEx = 28;
  for (int i = 0; i < this->propertypercentex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->propertypercentex(i), output);
  }
  
  // repeated uint32 PropertyTableIDEx = 29;
  for (int i = 0; i < this->propertytableidex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->propertytableidex(i), output);
  }
  
  // repeated uint32 PAttackDiff = 30;
  for (int i = 0; i < this->pattackdiff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->pattackdiff(i), output);
  }
  
  // repeated uint32 JudgePercent1 = 31;
  for (int i = 0; i < this->judgepercent1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->judgepercent1(i), output);
  }
  
  // repeated uint32 JudgePercent2 = 32;
  for (int i = 0; i < this->judgepercent2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->judgepercent2(i), output);
  }
  
  // repeated uint32 ResDefPercent = 33;
  for (int i = 0; i < this->resdefpercent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->resdefpercent(i), output);
  }
  
  // repeated uint32 ResAttPercent = 34;
  for (int i = 0; i < this->resattpercent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->resattpercent(i), output);
  }
  
  // repeated uint32 ResDefValue = 35;
  for (int i = 0; i < this->resdefvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->resdefvalue(i), output);
  }
  
  // repeated uint32 ResAttValue = 36;
  for (int i = 0; i < this->resattvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->resattvalue(i), output);
  }
  
  // optional uint32 SuitID = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->suitid(), output);
  }
  
  // optional uint32 SuitPos = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->suitpos(), output);
  }
  
  // repeated uint32 MAttackDiff = 39;
  for (int i = 0; i < this->mattackdiff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->mattackdiff(i), output);
  }
  
  // optional uint32 OpenCharge = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->opencharge(), output);
  }
  
  // optional uint32 AddCharge = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->addcharge(), output);
  }
  
  // optional uint32 JudgeCharge = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->judgecharge(), output);
  }
  
  // optional uint32 ReJudgeCharge = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->rejudgecharge(), output);
  }
  
  // optional uint32 DefUpgCharge = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->defupgcharge(), output);
  }
  
  // optional uint32 DefChangeCharge = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->defchangecharge(), output);
  }
  
  // optional uint32 AttUpgCharge = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->attupgcharge(), output);
  }
  
  // optional uint32 AttChangeCharge = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->attchangecharge(), output);
  }
  
  // optional uint32 CanDefUpgrade = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(48, this->candefupgrade(), output);
  }
  
  // optional uint32 CanAttUpgrade = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->canattupgrade(), output);
  }
  
  // optional uint32 BindBonus = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->bindbonus(), output);
  }
  
  // optional uint32 MultiCompose = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->multicompose(), output);
  }
  
  // optional uint32 CanChange = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->canchange(), output);
  }
  
  // optional uint32 ChangeCharge = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(53, this->changecharge(), output);
  }
  
  // optional uint32 CanSplit = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(54, this->cansplit(), output);
  }
  
  // repeated uint32 SplitID = 55;
  for (int i = 0; i < this->splitid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(55, this->splitid(i), output);
  }
  
  // repeated uint32 SplitNum = 56;
  for (int i = 0; i < this->splitnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(56, this->splitnum(i), output);
  }
  
  // optional uint32 SplitCharge = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->splitcharge(), output);
  }
  
  // repeated uint32 UpgExtra1 = 58;
  for (int i = 0; i < this->upgextra1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(58, this->upgextra1(i), output);
  }
  
  // repeated uint32 UpgExtra2 = 59;
  for (int i = 0; i < this->upgextra2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(59, this->upgextra2(i), output);
  }
  
  // optional uint32 ExtCharge = 60;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(60, this->extcharge(), output);
  }
  
  // optional uint32 ResistTran = 61;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(61, this->resisttran(), output);
  }
  
  // optional uint32 IsShenQi = 62;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(62, this->isshenqi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional string ModalName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->modalname(), target);
  }
  
  // optional uint32 ShowLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->showlevel(), target);
  }
  
  // optional uint32 EquipType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->equiptype(), target);
  }
  
  // optional uint32 ShowColor = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->showcolor(), target);
  }
  
  // repeated uint32 StrRequire = 6;
  for (int i = 0; i < this->strrequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->strrequire(i), target);
  }
  
  // repeated uint32 ConRequire = 7;
  for (int i = 0; i < this->conrequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->conrequire(i), target);
  }
  
  // repeated uint32 StaRequire = 8;
  for (int i = 0; i < this->starequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->starequire(i), target);
  }
  
  // repeated uint32 WisRequire = 9;
  for (int i = 0; i < this->wisrequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->wisrequire(i), target);
  }
  
  // repeated uint32 SprRequire = 10;
  for (int i = 0; i < this->sprrequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->sprrequire(i), target);
  }
  
  // optional uint32 MetierRequire = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->metierrequire(), target);
  }
  
  // optional uint32 LevelRequire = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->levelrequire(), target);
  }
  
  // optional uint32 SexRequire = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->sexrequire(), target);
  }
  
  // optional uint32 YuanValue = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->yuanvalue(), target);
  }
  
  // optional uint32 EquipDurability = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->equipdurability(), target);
  }
  
  // optional uint32 BaseMendCharge = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->basemendcharge(), target);
  }
  
  // optional uint32 NpcAbrasionRate = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->npcabrasionrate(), target);
  }
  
  // optional uint32 PlayerAbrasionRate = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->playerabrasionrate(), target);
  }
  
  // optional uint32 CanUpGrade = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->canupgrade(), target);
  }
  
  // optional uint32 UpgCharge = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->upgcharge(), target);
  }
  
  // optional uint32 NeedBindMoney = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->needbindmoney(), target);
  }
  
  // repeated uint32 UpgPropertyID = 22;
  for (int i = 0; i < this->upgpropertyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->upgpropertyid(i), target);
  }
  
  // repeated uint32 UpgValue = 23;
  for (int i = 0; i < this->upgvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->upgvalue(i), target);
  }
  
  // repeated uint32 MaxSlotNumber1 = 24;
  for (int i = 0; i < this->maxslotnumber1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->maxslotnumber1(i), target);
  }
  
  // optional uint32 MaxSlotNumber2 = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->maxslotnumber2(), target);
  }
  
  // repeated uint32 PropertyPercent = 26;
  for (int i = 0; i < this->propertypercent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->propertypercent(i), target);
  }
  
  // repeated uint32 PropertyTableID = 27;
  for (int i = 0; i < this->propertytableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->propertytableid(i), target);
  }
  
  // repeated uint32 PropertyPercentEx = 28;
  for (int i = 0; i < this->propertypercentex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->propertypercentex(i), target);
  }
  
  // repeated uint32 PropertyTableIDEx = 29;
  for (int i = 0; i < this->propertytableidex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->propertytableidex(i), target);
  }
  
  // repeated uint32 PAttackDiff = 30;
  for (int i = 0; i < this->pattackdiff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->pattackdiff(i), target);
  }
  
  // repeated uint32 JudgePercent1 = 31;
  for (int i = 0; i < this->judgepercent1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->judgepercent1(i), target);
  }
  
  // repeated uint32 JudgePercent2 = 32;
  for (int i = 0; i < this->judgepercent2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->judgepercent2(i), target);
  }
  
  // repeated uint32 ResDefPercent = 33;
  for (int i = 0; i < this->resdefpercent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->resdefpercent(i), target);
  }
  
  // repeated uint32 ResAttPercent = 34;
  for (int i = 0; i < this->resattpercent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->resattpercent(i), target);
  }
  
  // repeated uint32 ResDefValue = 35;
  for (int i = 0; i < this->resdefvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->resdefvalue(i), target);
  }
  
  // repeated uint32 ResAttValue = 36;
  for (int i = 0; i < this->resattvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->resattvalue(i), target);
  }
  
  // optional uint32 SuitID = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->suitid(), target);
  }
  
  // optional uint32 SuitPos = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->suitpos(), target);
  }
  
  // repeated uint32 MAttackDiff = 39;
  for (int i = 0; i < this->mattackdiff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->mattackdiff(i), target);
  }
  
  // optional uint32 OpenCharge = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->opencharge(), target);
  }
  
  // optional uint32 AddCharge = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->addcharge(), target);
  }
  
  // optional uint32 JudgeCharge = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->judgecharge(), target);
  }
  
  // optional uint32 ReJudgeCharge = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->rejudgecharge(), target);
  }
  
  // optional uint32 DefUpgCharge = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->defupgcharge(), target);
  }
  
  // optional uint32 DefChangeCharge = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->defchangecharge(), target);
  }
  
  // optional uint32 AttUpgCharge = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->attupgcharge(), target);
  }
  
  // optional uint32 AttChangeCharge = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->attchangecharge(), target);
  }
  
  // optional uint32 CanDefUpgrade = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(48, this->candefupgrade(), target);
  }
  
  // optional uint32 CanAttUpgrade = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->canattupgrade(), target);
  }
  
  // optional uint32 BindBonus = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->bindbonus(), target);
  }
  
  // optional uint32 MultiCompose = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->multicompose(), target);
  }
  
  // optional uint32 CanChange = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->canchange(), target);
  }
  
  // optional uint32 ChangeCharge = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(53, this->changecharge(), target);
  }
  
  // optional uint32 CanSplit = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(54, this->cansplit(), target);
  }
  
  // repeated uint32 SplitID = 55;
  for (int i = 0; i < this->splitid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(55, this->splitid(i), target);
  }
  
  // repeated uint32 SplitNum = 56;
  for (int i = 0; i < this->splitnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(56, this->splitnum(i), target);
  }
  
  // optional uint32 SplitCharge = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->splitcharge(), target);
  }
  
  // repeated uint32 UpgExtra1 = 58;
  for (int i = 0; i < this->upgextra1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(58, this->upgextra1(i), target);
  }
  
  // repeated uint32 UpgExtra2 = 59;
  for (int i = 0; i < this->upgextra2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(59, this->upgextra2(i), target);
  }
  
  // optional uint32 ExtCharge = 60;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(60, this->extcharge(), target);
  }
  
  // optional uint32 ResistTran = 61;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(61, this->resisttran(), target);
  }
  
  // optional uint32 IsShenQi = 62;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(62, this->isshenqi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional string ModalName = 2;
    if (has_modalname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->modalname());
    }
    
    // optional uint32 ShowLevel = 3;
    if (has_showlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showlevel());
    }
    
    // optional uint32 EquipType = 4;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 ShowColor = 5;
    if (has_showcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showcolor());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 MetierRequire = 11;
    if (has_metierrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierrequire());
    }
    
    // optional uint32 LevelRequire = 12;
    if (has_levelrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelrequire());
    }
    
    // optional uint32 SexRequire = 13;
    if (has_sexrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sexrequire());
    }
    
    // optional uint32 YuanValue = 14;
    if (has_yuanvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yuanvalue());
    }
    
    // optional uint32 EquipDurability = 15;
    if (has_equipdurability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equipdurability());
    }
    
    // optional uint32 BaseMendCharge = 16;
    if (has_basemendcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->basemendcharge());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 NpcAbrasionRate = 17;
    if (has_npcabrasionrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcabrasionrate());
    }
    
    // optional uint32 PlayerAbrasionRate = 18;
    if (has_playerabrasionrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerabrasionrate());
    }
    
    // optional uint32 CanUpGrade = 19;
    if (has_canupgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canupgrade());
    }
    
    // optional uint32 UpgCharge = 20;
    if (has_upgcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upgcharge());
    }
    
    // optional uint32 NeedBindMoney = 21;
    if (has_needbindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needbindmoney());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 MaxSlotNumber2 = 25;
    if (has_maxslotnumber2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxslotnumber2());
    }
    
  }
  if (_has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    // optional uint32 SuitID = 37;
    if (has_suitid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->suitid());
    }
    
    // optional uint32 SuitPos = 38;
    if (has_suitpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->suitpos());
    }
    
    // optional uint32 OpenCharge = 40;
    if (has_opencharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->opencharge());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 AddCharge = 41;
    if (has_addcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addcharge());
    }
    
    // optional uint32 JudgeCharge = 42;
    if (has_judgecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgecharge());
    }
    
    // optional uint32 ReJudgeCharge = 43;
    if (has_rejudgecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rejudgecharge());
    }
    
    // optional uint32 DefUpgCharge = 44;
    if (has_defupgcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->defupgcharge());
    }
    
    // optional uint32 DefChangeCharge = 45;
    if (has_defchangecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->defchangecharge());
    }
    
    // optional uint32 AttUpgCharge = 46;
    if (has_attupgcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attupgcharge());
    }
    
    // optional uint32 AttChangeCharge = 47;
    if (has_attchangecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attchangecharge());
    }
    
    // optional uint32 CanDefUpgrade = 48;
    if (has_candefupgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->candefupgrade());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 CanAttUpgrade = 49;
    if (has_canattupgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canattupgrade());
    }
    
    // optional uint32 BindBonus = 50;
    if (has_bindbonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindbonus());
    }
    
    // optional uint32 MultiCompose = 51;
    if (has_multicompose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->multicompose());
    }
    
    // optional uint32 CanChange = 52;
    if (has_canchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canchange());
    }
    
    // optional uint32 ChangeCharge = 53;
    if (has_changecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changecharge());
    }
    
    // optional uint32 CanSplit = 54;
    if (has_cansplit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cansplit());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 SplitCharge = 57;
    if (has_splitcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->splitcharge());
    }
    
    // optional uint32 ExtCharge = 60;
    if (has_extcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extcharge());
    }
    
    // optional uint32 ResistTran = 61;
    if (has_resisttran()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resisttran());
    }
    
    // optional uint32 IsShenQi = 62;
    if (has_isshenqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isshenqi());
    }
    
  }
  // repeated uint32 StrRequire = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->strrequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->strrequire(i));
    }
    total_size += 1 * this->strrequire_size() + data_size;
  }
  
  // repeated uint32 ConRequire = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->conrequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->conrequire(i));
    }
    total_size += 1 * this->conrequire_size() + data_size;
  }
  
  // repeated uint32 StaRequire = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->starequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->starequire(i));
    }
    total_size += 1 * this->starequire_size() + data_size;
  }
  
  // repeated uint32 WisRequire = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->wisrequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wisrequire(i));
    }
    total_size += 1 * this->wisrequire_size() + data_size;
  }
  
  // repeated uint32 SprRequire = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->sprrequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->sprrequire(i));
    }
    total_size += 1 * this->sprrequire_size() + data_size;
  }
  
  // repeated uint32 UpgPropertyID = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgpropertyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgpropertyid(i));
    }
    total_size += 2 * this->upgpropertyid_size() + data_size;
  }
  
  // repeated uint32 UpgValue = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgvalue(i));
    }
    total_size += 2 * this->upgvalue_size() + data_size;
  }
  
  // repeated uint32 MaxSlotNumber1 = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->maxslotnumber1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->maxslotnumber1(i));
    }
    total_size += 2 * this->maxslotnumber1_size() + data_size;
  }
  
  // repeated uint32 PropertyPercent = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertypercent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertypercent(i));
    }
    total_size += 2 * this->propertypercent_size() + data_size;
  }
  
  // repeated uint32 PropertyTableID = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertytableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertytableid(i));
    }
    total_size += 2 * this->propertytableid_size() + data_size;
  }
  
  // repeated uint32 PropertyPercentEx = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertypercentex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertypercentex(i));
    }
    total_size += 2 * this->propertypercentex_size() + data_size;
  }
  
  // repeated uint32 PropertyTableIDEx = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertytableidex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertytableidex(i));
    }
    total_size += 2 * this->propertytableidex_size() + data_size;
  }
  
  // repeated uint32 PAttackDiff = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->pattackdiff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pattackdiff(i));
    }
    total_size += 2 * this->pattackdiff_size() + data_size;
  }
  
  // repeated uint32 JudgePercent1 = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->judgepercent1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->judgepercent1(i));
    }
    total_size += 2 * this->judgepercent1_size() + data_size;
  }
  
  // repeated uint32 JudgePercent2 = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->judgepercent2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->judgepercent2(i));
    }
    total_size += 2 * this->judgepercent2_size() + data_size;
  }
  
  // repeated uint32 ResDefPercent = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->resdefpercent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resdefpercent(i));
    }
    total_size += 2 * this->resdefpercent_size() + data_size;
  }
  
  // repeated uint32 ResAttPercent = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->resattpercent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resattpercent(i));
    }
    total_size += 2 * this->resattpercent_size() + data_size;
  }
  
  // repeated uint32 ResDefValue = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->resdefvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resdefvalue(i));
    }
    total_size += 2 * this->resdefvalue_size() + data_size;
  }
  
  // repeated uint32 ResAttValue = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->resattvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resattvalue(i));
    }
    total_size += 2 * this->resattvalue_size() + data_size;
  }
  
  // repeated uint32 MAttackDiff = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->mattackdiff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mattackdiff(i));
    }
    total_size += 2 * this->mattackdiff_size() + data_size;
  }
  
  // repeated uint32 SplitID = 55;
  {
    int data_size = 0;
    for (int i = 0; i < this->splitid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->splitid(i));
    }
    total_size += 2 * this->splitid_size() + data_size;
  }
  
  // repeated uint32 SplitNum = 56;
  {
    int data_size = 0;
    for (int i = 0; i < this->splitnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->splitnum(i));
    }
    total_size += 2 * this->splitnum_size() + data_size;
  }
  
  // repeated uint32 UpgExtra1 = 58;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgextra1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgextra1(i));
    }
    total_size += 2 * this->upgextra1_size() + data_size;
  }
  
  // repeated uint32 UpgExtra2 = 59;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgextra2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgextra2(i));
    }
    total_size += 2 * this->upgextra2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipment::MergeFrom(const PBEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  strrequire_.MergeFrom(from.strrequire_);
  conrequire_.MergeFrom(from.conrequire_);
  starequire_.MergeFrom(from.starequire_);
  wisrequire_.MergeFrom(from.wisrequire_);
  sprrequire_.MergeFrom(from.sprrequire_);
  upgpropertyid_.MergeFrom(from.upgpropertyid_);
  upgvalue_.MergeFrom(from.upgvalue_);
  maxslotnumber1_.MergeFrom(from.maxslotnumber1_);
  propertypercent_.MergeFrom(from.propertypercent_);
  propertytableid_.MergeFrom(from.propertytableid_);
  propertypercentex_.MergeFrom(from.propertypercentex_);
  propertytableidex_.MergeFrom(from.propertytableidex_);
  pattackdiff_.MergeFrom(from.pattackdiff_);
  judgepercent1_.MergeFrom(from.judgepercent1_);
  judgepercent2_.MergeFrom(from.judgepercent2_);
  resdefpercent_.MergeFrom(from.resdefpercent_);
  resattpercent_.MergeFrom(from.resattpercent_);
  resdefvalue_.MergeFrom(from.resdefvalue_);
  resattvalue_.MergeFrom(from.resattvalue_);
  mattackdiff_.MergeFrom(from.mattackdiff_);
  splitid_.MergeFrom(from.splitid_);
  splitnum_.MergeFrom(from.splitnum_);
  upgextra1_.MergeFrom(from.upgextra1_);
  upgextra2_.MergeFrom(from.upgextra2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_modalname(from.modalname());
    }
    if (from._has_bit(2)) {
      set_showlevel(from.showlevel());
    }
    if (from._has_bit(3)) {
      set_equiptype(from.equiptype());
    }
    if (from._has_bit(4)) {
      set_showcolor(from.showcolor());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from._has_bit(10)) {
      set_metierrequire(from.metierrequire());
    }
    if (from._has_bit(11)) {
      set_levelrequire(from.levelrequire());
    }
    if (from._has_bit(12)) {
      set_sexrequire(from.sexrequire());
    }
    if (from._has_bit(13)) {
      set_yuanvalue(from.yuanvalue());
    }
    if (from._has_bit(14)) {
      set_equipdurability(from.equipdurability());
    }
    if (from._has_bit(15)) {
      set_basemendcharge(from.basemendcharge());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_npcabrasionrate(from.npcabrasionrate());
    }
    if (from._has_bit(17)) {
      set_playerabrasionrate(from.playerabrasionrate());
    }
    if (from._has_bit(18)) {
      set_canupgrade(from.canupgrade());
    }
    if (from._has_bit(19)) {
      set_upgcharge(from.upgcharge());
    }
    if (from._has_bit(20)) {
      set_needbindmoney(from.needbindmoney());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_maxslotnumber2(from.maxslotnumber2());
    }
  }
  if (from._has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    if (from._has_bit(36)) {
      set_suitid(from.suitid());
    }
    if (from._has_bit(37)) {
      set_suitpos(from.suitpos());
    }
    if (from._has_bit(39)) {
      set_opencharge(from.opencharge());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_addcharge(from.addcharge());
    }
    if (from._has_bit(41)) {
      set_judgecharge(from.judgecharge());
    }
    if (from._has_bit(42)) {
      set_rejudgecharge(from.rejudgecharge());
    }
    if (from._has_bit(43)) {
      set_defupgcharge(from.defupgcharge());
    }
    if (from._has_bit(44)) {
      set_defchangecharge(from.defchangecharge());
    }
    if (from._has_bit(45)) {
      set_attupgcharge(from.attupgcharge());
    }
    if (from._has_bit(46)) {
      set_attchangecharge(from.attchangecharge());
    }
    if (from._has_bit(47)) {
      set_candefupgrade(from.candefupgrade());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_canattupgrade(from.canattupgrade());
    }
    if (from._has_bit(49)) {
      set_bindbonus(from.bindbonus());
    }
    if (from._has_bit(50)) {
      set_multicompose(from.multicompose());
    }
    if (from._has_bit(51)) {
      set_canchange(from.canchange());
    }
    if (from._has_bit(52)) {
      set_changecharge(from.changecharge());
    }
    if (from._has_bit(53)) {
      set_cansplit(from.cansplit());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_splitcharge(from.splitcharge());
    }
    if (from._has_bit(59)) {
      set_extcharge(from.extcharge());
    }
    if (from._has_bit(60)) {
      set_resisttran(from.resisttran());
    }
    if (from._has_bit(61)) {
      set_isshenqi(from.isshenqi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipment::CopyFrom(const PBEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipment::Swap(PBEquipment* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(modalname_, other->modalname_);
    std::swap(showlevel_, other->showlevel_);
    std::swap(equiptype_, other->equiptype_);
    std::swap(showcolor_, other->showcolor_);
    strrequire_.Swap(&other->strrequire_);
    conrequire_.Swap(&other->conrequire_);
    starequire_.Swap(&other->starequire_);
    wisrequire_.Swap(&other->wisrequire_);
    sprrequire_.Swap(&other->sprrequire_);
    std::swap(metierrequire_, other->metierrequire_);
    std::swap(levelrequire_, other->levelrequire_);
    std::swap(sexrequire_, other->sexrequire_);
    std::swap(yuanvalue_, other->yuanvalue_);
    std::swap(equipdurability_, other->equipdurability_);
    std::swap(basemendcharge_, other->basemendcharge_);
    std::swap(npcabrasionrate_, other->npcabrasionrate_);
    std::swap(playerabrasionrate_, other->playerabrasionrate_);
    std::swap(canupgrade_, other->canupgrade_);
    std::swap(upgcharge_, other->upgcharge_);
    std::swap(needbindmoney_, other->needbindmoney_);
    upgpropertyid_.Swap(&other->upgpropertyid_);
    upgvalue_.Swap(&other->upgvalue_);
    maxslotnumber1_.Swap(&other->maxslotnumber1_);
    std::swap(maxslotnumber2_, other->maxslotnumber2_);
    propertypercent_.Swap(&other->propertypercent_);
    propertytableid_.Swap(&other->propertytableid_);
    propertypercentex_.Swap(&other->propertypercentex_);
    propertytableidex_.Swap(&other->propertytableidex_);
    pattackdiff_.Swap(&other->pattackdiff_);
    judgepercent1_.Swap(&other->judgepercent1_);
    judgepercent2_.Swap(&other->judgepercent2_);
    resdefpercent_.Swap(&other->resdefpercent_);
    resattpercent_.Swap(&other->resattpercent_);
    resdefvalue_.Swap(&other->resdefvalue_);
    resattvalue_.Swap(&other->resattvalue_);
    std::swap(suitid_, other->suitid_);
    std::swap(suitpos_, other->suitpos_);
    mattackdiff_.Swap(&other->mattackdiff_);
    std::swap(opencharge_, other->opencharge_);
    std::swap(addcharge_, other->addcharge_);
    std::swap(judgecharge_, other->judgecharge_);
    std::swap(rejudgecharge_, other->rejudgecharge_);
    std::swap(defupgcharge_, other->defupgcharge_);
    std::swap(defchangecharge_, other->defchangecharge_);
    std::swap(attupgcharge_, other->attupgcharge_);
    std::swap(attchangecharge_, other->attchangecharge_);
    std::swap(candefupgrade_, other->candefupgrade_);
    std::swap(canattupgrade_, other->canattupgrade_);
    std::swap(bindbonus_, other->bindbonus_);
    std::swap(multicompose_, other->multicompose_);
    std::swap(canchange_, other->canchange_);
    std::swap(changecharge_, other->changecharge_);
    std::swap(cansplit_, other->cansplit_);
    splitid_.Swap(&other->splitid_);
    splitnum_.Swap(&other->splitnum_);
    std::swap(splitcharge_, other->splitcharge_);
    upgextra1_.Swap(&other->upgextra1_);
    upgextra2_.Swap(&other->upgextra2_);
    std::swap(extcharge_, other->extcharge_);
    std::swap(resisttran_, other->resisttran_);
    std::swap(isshenqi_, other->isshenqi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipment::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipment::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipment::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipment_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEquipFashion::kEquipInfoFieldNumber;
const int PBEquipFashion::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBEquipFashion::PBEquipFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipFashion::InitAsDefaultInstance() {  equipinfo_ = const_cast< ::PBEquipment*>(&::PBEquipment::default_instance());
}

PBEquipFashion::PBEquipFashion(const PBEquipFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipFashion::SharedCtor() {
  _cached_size_ = 0;
  equipinfo_ = NULL;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipFashion::~PBEquipFashion() {
  SharedDtor();
}

void PBEquipFashion::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
  }
}

const ::google::protobuf::Descriptor* PBEquipFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipFashion_descriptor_;
}

const PBEquipFashion& PBEquipFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipFashion* PBEquipFashion::default_instance_ = NULL;

PBEquipFashion* PBEquipFashion::New() const {
  return new PBEquipFashion;
}

void PBEquipFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (equipinfo_ != NULL) equipinfo_->::PBEquipment::Clear();
    }
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBEquipment EquipInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_equipinfo()));
        if (input->ExpectTag(16)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipFashion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->equipinfo(), output);
  }
  
  // optional uint32 BuffID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->equipinfo(), target);
  }
  
  // optional uint32 BuffID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipFashion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBEquipment EquipInfo = 1;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->equipinfo());
    }
    
    // optional uint32 BuffID = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipFashion::MergeFrom(const PBEquipFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_equipinfo()->::PBEquipment::MergeFrom(from.equipinfo());
    }
    if (from._has_bit(1)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipFashion::CopyFrom(const PBEquipFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipFashion::Swap(PBEquipFashion* other) {
  if (other != this) {
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipFashion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipFashion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipFashion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipFashion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEquipWeapon::kEquipInfoFieldNumber;
const int PBEquipWeapon::kWeaponTypeFieldNumber;
const int PBEquipWeapon::kAttackTypeFieldNumber;
const int PBEquipWeapon::kAttackDistanceFieldNumber;
#endif  // !_MSC_VER

PBEquipWeapon::PBEquipWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipWeapon::InitAsDefaultInstance() {  equipinfo_ = const_cast< ::PBEquipment*>(&::PBEquipment::default_instance());
}

PBEquipWeapon::PBEquipWeapon(const PBEquipWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipWeapon::SharedCtor() {
  _cached_size_ = 0;
  equipinfo_ = NULL;
  weapontype_ = 0u;
  attacktype_ = 0u;
  attackdistance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipWeapon::~PBEquipWeapon() {
  SharedDtor();
}

void PBEquipWeapon::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
  }
}

const ::google::protobuf::Descriptor* PBEquipWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipWeapon_descriptor_;
}

const PBEquipWeapon& PBEquipWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipWeapon* PBEquipWeapon::default_instance_ = NULL;

PBEquipWeapon* PBEquipWeapon::New() const {
  return new PBEquipWeapon;
}

void PBEquipWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (equipinfo_ != NULL) equipinfo_->::PBEquipment::Clear();
    }
    weapontype_ = 0u;
    attacktype_ = 0u;
    attackdistance_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBEquipment EquipInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_equipinfo()));
        if (input->ExpectTag(16)) goto parse_WeaponType;
        break;
      }
      
      // optional uint32 WeaponType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeaponType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weapontype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AttackType;
        break;
      }
      
      // optional uint32 AttackType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attacktype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AttackDistance;
        break;
      }
      
      // optional uint32 AttackDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackdistance_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipWeapon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->equipinfo(), output);
  }
  
  // optional uint32 WeaponType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weapontype(), output);
  }
  
  // optional uint32 AttackType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->attacktype(), output);
  }
  
  // optional uint32 AttackDistance = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->attackdistance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->equipinfo(), target);
  }
  
  // optional uint32 WeaponType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weapontype(), target);
  }
  
  // optional uint32 AttackType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->attacktype(), target);
  }
  
  // optional uint32 AttackDistance = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->attackdistance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipWeapon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBEquipment EquipInfo = 1;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->equipinfo());
    }
    
    // optional uint32 WeaponType = 2;
    if (has_weapontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weapontype());
    }
    
    // optional uint32 AttackType = 3;
    if (has_attacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attacktype());
    }
    
    // optional uint32 AttackDistance = 4;
    if (has_attackdistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackdistance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipWeapon::MergeFrom(const PBEquipWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_equipinfo()->::PBEquipment::MergeFrom(from.equipinfo());
    }
    if (from._has_bit(1)) {
      set_weapontype(from.weapontype());
    }
    if (from._has_bit(2)) {
      set_attacktype(from.attacktype());
    }
    if (from._has_bit(3)) {
      set_attackdistance(from.attackdistance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipWeapon::CopyFrom(const PBEquipWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipWeapon::Swap(PBEquipWeapon* other) {
  if (other != this) {
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(weapontype_, other->weapontype_);
    std::swap(attacktype_, other->attacktype_);
    std::swap(attackdistance_, other->attackdistance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipWeapon::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipWeapon::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipWeapon::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipWeapon_reflection_;
}

// ===================================================================

const ::std::string PBEquipArmor::_default_armorsuit_;
#ifndef _MSC_VER
const int PBEquipArmor::kEquipInfoFieldNumber;
const int PBEquipArmor::kShowTypeFieldNumber;
const int PBEquipArmor::kArmorSuitFieldNumber;
#endif  // !_MSC_VER

PBEquipArmor::PBEquipArmor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipArmor::InitAsDefaultInstance() {  equipinfo_ = const_cast< ::PBEquipment*>(&::PBEquipment::default_instance());
}

PBEquipArmor::PBEquipArmor(const PBEquipArmor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipArmor::SharedCtor() {
  _cached_size_ = 0;
  equipinfo_ = NULL;
  showtype_ = 0u;
  armorsuit_ = const_cast< ::std::string*>(&_default_armorsuit_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipArmor::~PBEquipArmor() {
  SharedDtor();
}

void PBEquipArmor::SharedDtor() {
  if (armorsuit_ != &_default_armorsuit_) {
    delete armorsuit_;
  }
  if (this != default_instance_) {
    delete equipinfo_;
  }
}

const ::google::protobuf::Descriptor* PBEquipArmor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipArmor_descriptor_;
}

const PBEquipArmor& PBEquipArmor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipArmor* PBEquipArmor::default_instance_ = NULL;

PBEquipArmor* PBEquipArmor::New() const {
  return new PBEquipArmor;
}

void PBEquipArmor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (equipinfo_ != NULL) equipinfo_->::PBEquipment::Clear();
    }
    showtype_ = 0u;
    if (_has_bit(2)) {
      if (armorsuit_ != &_default_armorsuit_) {
        armorsuit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipArmor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBEquipment EquipInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_equipinfo()));
        if (input->ExpectTag(16)) goto parse_ShowType;
        break;
      }
      
      // optional uint32 ShowType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showtype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ArmorSuit;
        break;
      }
      
      // optional string ArmorSuit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ArmorSuit:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_armorsuit()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipArmor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipArmor::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->equipinfo(), output);
  }
  
  // optional uint32 ShowType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->showtype(), output);
  }
  
  // optional string ArmorSuit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->armorsuit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipArmor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBEquipment EquipInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->equipinfo(), target);
  }
  
  // optional uint32 ShowType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->showtype(), target);
  }
  
  // optional string ArmorSuit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->armorsuit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipArmor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBEquipment EquipInfo = 1;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->equipinfo());
    }
    
    // optional uint32 ShowType = 2;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showtype());
    }
    
    // optional string ArmorSuit = 3;
    if (has_armorsuit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->armorsuit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipArmor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipArmor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipArmor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipArmor::MergeFrom(const PBEquipArmor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_equipinfo()->::PBEquipment::MergeFrom(from.equipinfo());
    }
    if (from._has_bit(1)) {
      set_showtype(from.showtype());
    }
    if (from._has_bit(2)) {
      set_armorsuit(from.armorsuit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipArmor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipArmor::CopyFrom(const PBEquipArmor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipArmor::Swap(PBEquipArmor* other) {
  if (other != this) {
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(showtype_, other->showtype_);
    std::swap(armorsuit_, other->armorsuit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipArmor::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipArmor::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipArmor::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipArmor_reflection_;
}

// ===================================================================

const ::std::string PBTemplateProperty::_default_propertyname_;
#ifndef _MSC_VER
const int PBTemplateProperty::kTempIDFieldNumber;
const int PBTemplateProperty::kPropertyNameFieldNumber;
const int PBTemplateProperty::kPropertyFuncFieldNumber;
const int PBTemplateProperty::kCanOutFieldNumber;
const int PBTemplateProperty::kIntMinValueFieldNumber;
const int PBTemplateProperty::kIntMaxValueFieldNumber;
const int PBTemplateProperty::kFloatMinValueFieldNumber;
const int PBTemplateProperty::kFloatMaxValueFieldNumber;
const int PBTemplateProperty::kSkillIDFieldNumber;
const int PBTemplateProperty::kAreaFieldNumber;
#endif  // !_MSC_VER

PBTemplateProperty::PBTemplateProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplateProperty::InitAsDefaultInstance() {}

PBTemplateProperty::PBTemplateProperty(const PBTemplateProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplateProperty::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  propertyname_ = const_cast< ::std::string*>(&_default_propertyname_);
  propertyfunc_ = 0u;
  canout_ = 0u;
  intminvalue_ = 0u;
  intmaxvalue_ = 0u;
  floatminvalue_ = 0u;
  floatmaxvalue_ = 0u;
  skillid_ = 0u;
  area_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplateProperty::~PBTemplateProperty() {
  SharedDtor();
}

void PBTemplateProperty::SharedDtor() {
  if (propertyname_ != &_default_propertyname_) {
    delete propertyname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplateProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateProperty_descriptor_;
}

const PBTemplateProperty& PBTemplateProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplateProperty* PBTemplateProperty::default_instance_ = NULL;

PBTemplateProperty* PBTemplateProperty::New() const {
  return new PBTemplateProperty;
}

void PBTemplateProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (propertyname_ != &_default_propertyname_) {
        propertyname_->clear();
      }
    }
    propertyfunc_ = 0u;
    canout_ = 0u;
    intminvalue_ = 0u;
    intmaxvalue_ = 0u;
    floatminvalue_ = 0u;
    floatmaxvalue_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skillid_ = 0u;
    area_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplateProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_PropertyName;
        break;
      }
      
      // optional string PropertyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PropertyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_propertyname()));
        if (input->ExpectTag(24)) goto parse_PropertyFunc;
        break;
      }
      
      // optional uint32 PropertyFunc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyFunc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &propertyfunc_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CanOut;
        break;
      }
      
      // optional uint32 CanOut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanOut:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canout_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IntMinValue;
        break;
      }
      
      // optional uint32 IntMinValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntMinValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intminvalue_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_IntMaxValue;
        break;
      }
      
      // optional uint32 IntMaxValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntMaxValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intmaxvalue_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_FloatMinValue;
        break;
      }
      
      // optional uint32 FloatMinValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FloatMinValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &floatminvalue_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_FloatMaxValue;
        break;
      }
      
      // optional uint32 FloatMaxValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FloatMaxValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &floatmaxvalue_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Area;
        break;
      }
      
      // optional uint32 Area = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Area:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &area_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplateProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplateProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string PropertyName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->propertyname(), output);
  }
  
  // optional uint32 PropertyFunc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->propertyfunc(), output);
  }
  
  // optional uint32 CanOut = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->canout(), output);
  }
  
  // optional uint32 IntMinValue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->intminvalue(), output);
  }
  
  // optional uint32 IntMaxValue = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->intmaxvalue(), output);
  }
  
  // optional uint32 FloatMinValue = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->floatminvalue(), output);
  }
  
  // optional uint32 FloatMaxValue = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->floatmaxvalue(), output);
  }
  
  // optional uint32 SkillID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->skillid(), output);
  }
  
  // optional uint32 Area = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->area(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplateProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string PropertyName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->propertyname(), target);
  }
  
  // optional uint32 PropertyFunc = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->propertyfunc(), target);
  }
  
  // optional uint32 CanOut = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->canout(), target);
  }
  
  // optional uint32 IntMinValue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->intminvalue(), target);
  }
  
  // optional uint32 IntMaxValue = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->intmaxvalue(), target);
  }
  
  // optional uint32 FloatMinValue = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->floatminvalue(), target);
  }
  
  // optional uint32 FloatMaxValue = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->floatmaxvalue(), target);
  }
  
  // optional uint32 SkillID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->skillid(), target);
  }
  
  // optional uint32 Area = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->area(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplateProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string PropertyName = 2;
    if (has_propertyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->propertyname());
    }
    
    // optional uint32 PropertyFunc = 3;
    if (has_propertyfunc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->propertyfunc());
    }
    
    // optional uint32 CanOut = 4;
    if (has_canout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canout());
    }
    
    // optional uint32 IntMinValue = 5;
    if (has_intminvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intminvalue());
    }
    
    // optional uint32 IntMaxValue = 6;
    if (has_intmaxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intmaxvalue());
    }
    
    // optional uint32 FloatMinValue = 7;
    if (has_floatminvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->floatminvalue());
    }
    
    // optional uint32 FloatMaxValue = 8;
    if (has_floatmaxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->floatmaxvalue());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SkillID = 9;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 Area = 10;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->area());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplateProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplateProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplateProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplateProperty::MergeFrom(const PBTemplateProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_propertyname(from.propertyname());
    }
    if (from._has_bit(2)) {
      set_propertyfunc(from.propertyfunc());
    }
    if (from._has_bit(3)) {
      set_canout(from.canout());
    }
    if (from._has_bit(4)) {
      set_intminvalue(from.intminvalue());
    }
    if (from._has_bit(5)) {
      set_intmaxvalue(from.intmaxvalue());
    }
    if (from._has_bit(6)) {
      set_floatminvalue(from.floatminvalue());
    }
    if (from._has_bit(7)) {
      set_floatmaxvalue(from.floatmaxvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(9)) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplateProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateProperty::CopyFrom(const PBTemplateProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateProperty::Swap(PBTemplateProperty* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(propertyname_, other->propertyname_);
    std::swap(propertyfunc_, other->propertyfunc_);
    std::swap(canout_, other->canout_);
    std::swap(intminvalue_, other->intminvalue_);
    std::swap(intmaxvalue_, other->intmaxvalue_);
    std::swap(floatminvalue_, other->floatminvalue_);
    std::swap(floatmaxvalue_, other->floatmaxvalue_);
    std::swap(skillid_, other->skillid_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplateProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplateProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplateProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPropertyPercent::kTempIDFieldNumber;
const int PBPropertyPercent::kPercentFieldNumber;
#endif  // !_MSC_VER

PBPropertyPercent::PBPropertyPercent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPropertyPercent::InitAsDefaultInstance() {}

PBPropertyPercent::PBPropertyPercent(const PBPropertyPercent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPropertyPercent::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPropertyPercent::~PBPropertyPercent() {
  SharedDtor();
}

void PBPropertyPercent::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPropertyPercent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPropertyPercent_descriptor_;
}

const PBPropertyPercent& PBPropertyPercent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPropertyPercent* PBPropertyPercent::default_instance_ = NULL;

PBPropertyPercent* PBPropertyPercent::New() const {
  return new PBPropertyPercent;
}

void PBPropertyPercent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPropertyPercent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPropertyPercent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPropertyPercent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPropertyPercent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPropertyPercent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPropertyPercent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPropertyPercent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPropertyPercent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPropertyPercent::MergeFrom(const PBPropertyPercent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPropertyPercent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPropertyPercent::CopyFrom(const PBPropertyPercent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPropertyPercent::Swap(PBPropertyPercent* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPropertyPercent::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPropertyPercent::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPropertyPercent::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPropertyPercent_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplatePropertyTable::kTempIDFieldNumber;
const int PBTemplatePropertyTable::kPropertyFieldNumber;
#endif  // !_MSC_VER

PBTemplatePropertyTable::PBTemplatePropertyTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplatePropertyTable::InitAsDefaultInstance() {}

PBTemplatePropertyTable::PBTemplatePropertyTable(const PBTemplatePropertyTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplatePropertyTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplatePropertyTable::~PBTemplatePropertyTable() {
  SharedDtor();
}

void PBTemplatePropertyTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplatePropertyTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplatePropertyTable_descriptor_;
}

const PBTemplatePropertyTable& PBTemplatePropertyTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplatePropertyTable* PBTemplatePropertyTable::default_instance_ = NULL;

PBTemplatePropertyTable* PBTemplatePropertyTable::New() const {
  return new PBTemplatePropertyTable;
}

void PBTemplatePropertyTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplatePropertyTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Property;
        break;
      }
      
      // repeated .PBPropertyPercent Property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_property()));
        if (input->ExpectTag(18)) goto parse_Property;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplatePropertyTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplatePropertyTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBPropertyPercent Property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->property(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplatePropertyTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBPropertyPercent Property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->property(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplatePropertyTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBPropertyPercent Property = 2;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->property(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplatePropertyTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplatePropertyTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplatePropertyTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplatePropertyTable::MergeFrom(const PBTemplatePropertyTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplatePropertyTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplatePropertyTable::CopyFrom(const PBTemplatePropertyTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplatePropertyTable::Swap(PBTemplatePropertyTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplatePropertyTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplatePropertyTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplatePropertyTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplatePropertyTable_reflection_;
}

// ===================================================================

const ::std::string PBMetier::_default_metiername_;
#ifndef _MSC_VER
const int PBMetier::kTempIDFieldNumber;
const int PBMetier::kMetierNameFieldNumber;
const int PBMetier::kMetierIDFieldNumber;
const int PBMetier::kGenerIDFieldNumber;
const int PBMetier::kSkillPointFieldNumber;
const int PBMetier::kPropertyPointFieldNumber;
const int PBMetier::kWalkSpeedFieldNumber;
const int PBMetier::kRunSpeedFieldNumber;
const int PBMetier::kInitLevelFieldNumber;
const int PBMetier::kInitHPFieldNumber;
const int PBMetier::kInitMPFieldNumber;
const int PBMetier::kInitPAttackFieldNumber;
const int PBMetier::kInitPDefenseFieldNumber;
const int PBMetier::kInitMAttackFieldNumber;
const int PBMetier::kInitMDefenseFieldNumber;
const int PBMetier::kInitAbnResistFieldNumber;
const int PBMetier::kInitWindResistFieldNumber;
const int PBMetier::kInitFireResistFieldNumber;
const int PBMetier::kInitWaterResistFieldNumber;
const int PBMetier::kInitLightResistFieldNumber;
const int PBMetier::kInitEarthResistFieldNumber;
const int PBMetier::kInitSadowResistFieldNumber;
const int PBMetier::kInitDeathRateFieldNumber;
const int PBMetier::kInitDeathValueFieldNumber;
const int PBMetier::kInitNmlHitrateFieldNumber;
const int PBMetier::kInitNormalDuckFieldNumber;
const int PBMetier::kInitSkillDuckFieldNumber;
const int PBMetier::kDeltaHPFieldNumber;
const int PBMetier::kDeltaMPFieldNumber;
const int PBMetier::kDeltaPAttackFieldNumber;
const int PBMetier::kDeltaPDefenseFieldNumber;
const int PBMetier::kDeltaMAttackFieldNumber;
const int PBMetier::kDeltaMDefenseFieldNumber;
const int PBMetier::kDeltaAbnResistFieldNumber;
const int PBMetier::kDeltaWindResistFieldNumber;
const int PBMetier::kDeltaFireResistFieldNumber;
const int PBMetier::kDeltaWaterResistFieldNumber;
const int PBMetier::kDeltaLightResistFieldNumber;
const int PBMetier::kDeltaEarthResistFieldNumber;
const int PBMetier::kDeltaShadowResistFieldNumber;
const int PBMetier::kDeltaDeathRateFieldNumber;
const int PBMetier::kDeltaDeathValueFieldNumber;
const int PBMetier::kDeltaNormalHitrateFieldNumber;
const int PBMetier::kDeltaNormalDuckFieldNumber;
const int PBMetier::kDeltaSkillDuckFieldNumber;
const int PBMetier::kPAttackPerStrFieldNumber;
const int PBMetier::kDeathValuePerStrFieldNumber;
const int PBMetier::kMaxHPPerStrFieldNumber;
const int PBMetier::kPDefensePerConFieldNumber;
const int PBMetier::kHPRSpeedPerConFieldNumber;
const int PBMetier::kMaxHPPerStaFieldNumber;
const int PBMetier::kAbnResistPerStaFieldNumber;
const int PBMetier::kMAttackPerWisFieldNumber;
const int PBMetier::kMaxMPPerWisFieldNumber;
const int PBMetier::kDeathValuePerWisFieldNumber;
const int PBMetier::kMDefensePerSprFieldNumber;
const int PBMetier::kMaxMPPerSprFieldNumber;
const int PBMetier::kMPRSpeedPerSprFieldNumber;
const int PBMetier::kNormalHPRSpeedFieldNumber;
const int PBMetier::kNormalSitHPRSpeedFieldNumber;
const int PBMetier::kBattleHPRSpeedFieldNumber;
const int PBMetier::kBattleSitHPRSpeedFieldNumber;
const int PBMetier::kNormalMPRSpeedFieldNumber;
const int PBMetier::kNormalSitMPRSpeedFieldNumber;
const int PBMetier::kBattleMPRSpeedFieldNumber;
const int PBMetier::kBattleSitMPRSpeedFieldNumber;
const int PBMetier::kInitIgnoreDuckFieldNumber;
const int PBMetier::kDeltaIgnoreDuckFieldNumber;
const int PBMetier::kMAttackPerStrFieldNumber;
const int PBMetier::kDeathRatePerStrFieldNumber;
const int PBMetier::kMaxMPPerStrFieldNumber;
const int PBMetier::kPDefensePerStrFieldNumber;
const int PBMetier::kMDefensePerStrFieldNumber;
const int PBMetier::kNmlHitratePerStrFieldNumber;
const int PBMetier::kNormalDuckPerStrFieldNumber;
const int PBMetier::kIgnoreDuckPerStrFieldNumber;
const int PBMetier::kPAttackPerConFieldNumber;
const int PBMetier::kMAttackPerConFieldNumber;
const int PBMetier::kDeathRatePerConFieldNumber;
const int PBMetier::kDeathValuePerConFieldNumber;
const int PBMetier::kMaxHPPerConFieldNumber;
const int PBMetier::kMaxMPPerConFieldNumber;
const int PBMetier::kMDefensePerConFieldNumber;
const int PBMetier::kNmlHitratePerConFieldNumber;
const int PBMetier::kNormalDuckPerConFieldNumber;
const int PBMetier::kIgnoreDuckPerConFieldNumber;
const int PBMetier::kPReducePerStaFieldNumber;
const int PBMetier::kMReducePerStaFieldNumber;
const int PBMetier::kPAttackPerWisFieldNumber;
const int PBMetier::kMaxHPPerWisFieldNumber;
const int PBMetier::kDeathRatePerWisFieldNumber;
const int PBMetier::kPDefensePerWisFieldNumber;
const int PBMetier::kMDefensePerWisFieldNumber;
const int PBMetier::kNmlHitratePerWisFieldNumber;
const int PBMetier::kNormalDuckPerWisFieldNumber;
const int PBMetier::kIgnoreDuckPerWisFieldNumber;
const int PBMetier::kPAttackPerSprFieldNumber;
const int PBMetier::kMAttackPerSprFieldNumber;
const int PBMetier::kDeathRatePerSprFieldNumber;
const int PBMetier::kDeathValuePerSprFieldNumber;
const int PBMetier::kMaxHPPerSprFieldNumber;
const int PBMetier::kPDefensePerSprFieldNumber;
const int PBMetier::kNmlHitratePerSprFieldNumber;
const int PBMetier::kNormalDuckPerSprFieldNumber;
const int PBMetier::kIgnoreDuckPerSprFieldNumber;
const int PBMetier::kInitDeathDefenseFieldNumber;
const int PBMetier::kDeltaDeathDefenseFieldNumber;
const int PBMetier::kDeathDefensePerStrFieldNumber;
const int PBMetier::kDeathDefensePerConFieldNumber;
const int PBMetier::kDeathDefensePerStaFieldNumber;
const int PBMetier::kDeathDefensePerWisFieldNumber;
const int PBMetier::kDeathDefensePerSprFieldNumber;
#endif  // !_MSC_VER

PBMetier::PBMetier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMetier::InitAsDefaultInstance() {}

PBMetier::PBMetier(const PBMetier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMetier::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  metiername_ = const_cast< ::std::string*>(&_default_metiername_);
  metierid_ = 0u;
  skillpoint_ = 0u;
  propertypoint_ = 0u;
  walkspeed_ = 0u;
  runspeed_ = 0u;
  initlevel_ = 0u;
  inithp_ = 0u;
  initmp_ = 0u;
  initpattack_ = 0u;
  initpdefense_ = 0u;
  initmattack_ = 0u;
  initmdefense_ = 0u;
  initabnresist_ = 0u;
  initwindresist_ = 0u;
  initfireresist_ = 0u;
  initwaterresist_ = 0u;
  initlightresist_ = 0u;
  initearthresist_ = 0u;
  initsadowresist_ = 0u;
  initdeathrate_ = 0u;
  initdeathvalue_ = 0u;
  initnmlhitrate_ = 0u;
  initnormalduck_ = 0u;
  initskillduck_ = 0u;
  deltahp_ = 0u;
  deltamp_ = 0u;
  deltapattack_ = 0u;
  deltapdefense_ = 0u;
  deltamattack_ = 0u;
  deltamdefense_ = 0u;
  deltaabnresist_ = 0u;
  deltawindresist_ = 0u;
  deltafireresist_ = 0u;
  deltawaterresist_ = 0u;
  deltalightresist_ = 0u;
  deltaearthresist_ = 0u;
  deltashadowresist_ = 0u;
  deltadeathrate_ = 0u;
  deltadeathvalue_ = 0u;
  deltanormalhitrate_ = 0u;
  deltanormalduck_ = 0u;
  deltaskillduck_ = 0u;
  pattackperstr_ = 0u;
  deathvalueperstr_ = 0u;
  maxhpperstr_ = 0u;
  pdefensepercon_ = 0u;
  hprspeedpercon_ = 0u;
  maxhppersta_ = 0u;
  abnresistpersta_ = 0u;
  mattackperwis_ = 0u;
  maxmpperwis_ = 0u;
  deathvalueperwis_ = 0u;
  mdefenseperspr_ = 0u;
  maxmpperspr_ = 0u;
  mprspeedperspr_ = 0u;
  normalhprspeed_ = 0u;
  normalsithprspeed_ = 0u;
  battlehprspeed_ = 0u;
  battlesithprspeed_ = 0u;
  normalmprspeed_ = 0u;
  normalsitmprspeed_ = 0u;
  battlemprspeed_ = 0u;
  battlesitmprspeed_ = 0u;
  initignoreduck_ = 0u;
  deltaignoreduck_ = 0u;
  mattackperstr_ = 0u;
  deathrateperstr_ = 0u;
  maxmpperstr_ = 0u;
  pdefenseperstr_ = 0u;
  mdefenseperstr_ = 0u;
  nmlhitrateperstr_ = 0u;
  normalduckperstr_ = 0u;
  ignoreduckperstr_ = 0u;
  pattackpercon_ = 0u;
  mattackpercon_ = 0u;
  deathratepercon_ = 0u;
  deathvaluepercon_ = 0u;
  maxhppercon_ = 0u;
  maxmppercon_ = 0u;
  mdefensepercon_ = 0u;
  nmlhitratepercon_ = 0u;
  normalduckpercon_ = 0u;
  ignoreduckpercon_ = 0u;
  preducepersta_ = 0u;
  mreducepersta_ = 0u;
  pattackperwis_ = 0u;
  maxhpperwis_ = 0u;
  deathrateperwis_ = 0u;
  pdefenseperwis_ = 0u;
  mdefenseperwis_ = 0u;
  nmlhitrateperwis_ = 0u;
  normalduckperwis_ = 0u;
  ignoreduckperwis_ = 0u;
  pattackperspr_ = 0u;
  mattackperspr_ = 0u;
  deathrateperspr_ = 0u;
  deathvalueperspr_ = 0u;
  maxhpperspr_ = 0u;
  pdefenseperspr_ = 0u;
  nmlhitrateperspr_ = 0u;
  normalduckperspr_ = 0u;
  ignoreduckperspr_ = 0u;
  initdeathdefense_ = 0u;
  deltadeathdefense_ = 0u;
  deathdefenseperstr_ = 0u;
  deathdefensepercon_ = 0u;
  deathdefensepersta_ = 0u;
  deathdefenseperwis_ = 0u;
  deathdefenseperspr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMetier::~PBMetier() {
  SharedDtor();
}

void PBMetier::SharedDtor() {
  if (metiername_ != &_default_metiername_) {
    delete metiername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMetier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMetier_descriptor_;
}

const PBMetier& PBMetier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMetier* PBMetier::default_instance_ = NULL;

PBMetier* PBMetier::New() const {
  return new PBMetier;
}

void PBMetier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (metiername_ != &_default_metiername_) {
        metiername_->clear();
      }
    }
    metierid_ = 0u;
    skillpoint_ = 0u;
    propertypoint_ = 0u;
    walkspeed_ = 0u;
    runspeed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    initlevel_ = 0u;
    inithp_ = 0u;
    initmp_ = 0u;
    initpattack_ = 0u;
    initpdefense_ = 0u;
    initmattack_ = 0u;
    initmdefense_ = 0u;
    initabnresist_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    initwindresist_ = 0u;
    initfireresist_ = 0u;
    initwaterresist_ = 0u;
    initlightresist_ = 0u;
    initearthresist_ = 0u;
    initsadowresist_ = 0u;
    initdeathrate_ = 0u;
    initdeathvalue_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    initnmlhitrate_ = 0u;
    initnormalduck_ = 0u;
    initskillduck_ = 0u;
    deltahp_ = 0u;
    deltamp_ = 0u;
    deltapattack_ = 0u;
    deltapdefense_ = 0u;
    deltamattack_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    deltamdefense_ = 0u;
    deltaabnresist_ = 0u;
    deltawindresist_ = 0u;
    deltafireresist_ = 0u;
    deltawaterresist_ = 0u;
    deltalightresist_ = 0u;
    deltaearthresist_ = 0u;
    deltashadowresist_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    deltadeathrate_ = 0u;
    deltadeathvalue_ = 0u;
    deltanormalhitrate_ = 0u;
    deltanormalduck_ = 0u;
    deltaskillduck_ = 0u;
    pattackperstr_ = 0u;
    deathvalueperstr_ = 0u;
    maxhpperstr_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    pdefensepercon_ = 0u;
    hprspeedpercon_ = 0u;
    maxhppersta_ = 0u;
    abnresistpersta_ = 0u;
    mattackperwis_ = 0u;
    maxmpperwis_ = 0u;
    deathvalueperwis_ = 0u;
    mdefenseperspr_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    maxmpperspr_ = 0u;
    mprspeedperspr_ = 0u;
    normalhprspeed_ = 0u;
    normalsithprspeed_ = 0u;
    battlehprspeed_ = 0u;
    battlesithprspeed_ = 0u;
    normalmprspeed_ = 0u;
    normalsitmprspeed_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    battlemprspeed_ = 0u;
    battlesitmprspeed_ = 0u;
    initignoreduck_ = 0u;
    deltaignoreduck_ = 0u;
    mattackperstr_ = 0u;
    deathrateperstr_ = 0u;
    maxmpperstr_ = 0u;
    pdefenseperstr_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    mdefenseperstr_ = 0u;
    nmlhitrateperstr_ = 0u;
    normalduckperstr_ = 0u;
    ignoreduckperstr_ = 0u;
    pattackpercon_ = 0u;
    mattackpercon_ = 0u;
    deathratepercon_ = 0u;
    deathvaluepercon_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    maxhppercon_ = 0u;
    maxmppercon_ = 0u;
    mdefensepercon_ = 0u;
    nmlhitratepercon_ = 0u;
    normalduckpercon_ = 0u;
    ignoreduckpercon_ = 0u;
    preducepersta_ = 0u;
    mreducepersta_ = 0u;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    pattackperwis_ = 0u;
    maxhpperwis_ = 0u;
    deathrateperwis_ = 0u;
    pdefenseperwis_ = 0u;
    mdefenseperwis_ = 0u;
    nmlhitrateperwis_ = 0u;
    normalduckperwis_ = 0u;
    ignoreduckperwis_ = 0u;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    pattackperspr_ = 0u;
    mattackperspr_ = 0u;
    deathrateperspr_ = 0u;
    deathvalueperspr_ = 0u;
    maxhpperspr_ = 0u;
    pdefenseperspr_ = 0u;
    nmlhitrateperspr_ = 0u;
    normalduckperspr_ = 0u;
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    ignoreduckperspr_ = 0u;
    initdeathdefense_ = 0u;
    deltadeathdefense_ = 0u;
    deathdefenseperstr_ = 0u;
    deathdefensepercon_ = 0u;
    deathdefensepersta_ = 0u;
    deathdefenseperwis_ = 0u;
    deathdefenseperspr_ = 0u;
  }
  generid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMetier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_MetierName;
        break;
      }
      
      // optional string MetierName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MetierName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_metiername()));
        if (input->ExpectTag(24)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_GenerID;
        break;
      }
      
      // repeated uint32 GenerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenerID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_generid(value);
        if (input->ExpectTag(32)) goto parse_GenerID;
        if (input->ExpectTag(40)) goto parse_SkillPoint;
        break;
      }
      
      // optional uint32 SkillPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillpoint_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PropertyPoint;
        break;
      }
      
      // optional uint32 PropertyPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &propertypoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WalkSpeed;
        break;
      }
      
      // optional uint32 WalkSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WalkSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &walkspeed_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_RunSpeed;
        break;
      }
      
      // optional uint32 RunSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RunSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &runspeed_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_InitLevel;
        break;
      }
      
      // optional uint32 InitLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlevel_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_InitHP;
        break;
      }
      
      // optional uint32 InitHP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitHP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inithp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_InitMP;
        break;
      }
      
      // optional uint32 InitMP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmp_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_InitPAttack;
        break;
      }
      
      // optional uint32 InitPAttack = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitPAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initpattack_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_InitPDefense;
        break;
      }
      
      // optional uint32 InitPDefense = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitPDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initpdefense_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_InitMAttack;
        break;
      }
      
      // optional uint32 InitMAttack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmattack_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_InitMDefense;
        break;
      }
      
      // optional uint32 InitMDefense = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmdefense_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_InitAbnResist;
        break;
      }
      
      // optional uint32 InitAbnResist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitAbnResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initabnresist_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_InitWindResist;
        break;
      }
      
      // optional uint32 InitWindResist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitWindResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initwindresist_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_InitFireResist;
        break;
      }
      
      // optional uint32 InitFireResist = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitFireResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initfireresist_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_InitWaterResist;
        break;
      }
      
      // optional uint32 InitWaterResist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitWaterResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initwaterresist_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_InitLightResist;
        break;
      }
      
      // optional uint32 InitLightResist = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLightResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlightresist_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_InitEarthResist;
        break;
      }
      
      // optional uint32 InitEarthResist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitEarthResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initearthresist_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_InitSadowResist;
        break;
      }
      
      // optional uint32 InitSadowResist = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSadowResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initsadowresist_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_InitDeathRate;
        break;
      }
      
      // optional uint32 InitDeathRate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitDeathRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initdeathrate_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_InitDeathValue;
        break;
      }
      
      // optional uint32 InitDeathValue = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitDeathValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initdeathvalue_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_InitNmlHitrate;
        break;
      }
      
      // optional uint32 InitNmlHitrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitNmlHitrate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initnmlhitrate_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_InitNormalDuck;
        break;
      }
      
      // optional uint32 InitNormalDuck = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitNormalDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initnormalduck_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_InitSkillDuck;
        break;
      }
      
      // optional uint32 InitSkillDuck = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSkillDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initskillduck_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_DeltaHP;
        break;
      }
      
      // optional uint32 DeltaHP = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaHP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltahp_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_DeltaMP;
        break;
      }
      
      // optional uint32 DeltaMP = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaMP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltamp_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_DeltaPAttack;
        break;
      }
      
      // optional uint32 DeltaPAttack = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaPAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltapattack_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_DeltaPDefense;
        break;
      }
      
      // optional uint32 DeltaPDefense = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaPDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltapdefense_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_DeltaMAttack;
        break;
      }
      
      // optional uint32 DeltaMAttack = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaMAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltamattack_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_DeltaMDefense;
        break;
      }
      
      // optional uint32 DeltaMDefense = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaMDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltamdefense_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_DeltaAbnResist;
        break;
      }
      
      // optional uint32 DeltaAbnResist = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaAbnResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaabnresist_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_DeltaWindResist;
        break;
      }
      
      // optional uint32 DeltaWindResist = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaWindResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltawindresist_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_DeltaFireResist;
        break;
      }
      
      // optional uint32 DeltaFireResist = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaFireResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltafireresist_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_DeltaWaterResist;
        break;
      }
      
      // optional uint32 DeltaWaterResist = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaWaterResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltawaterresist_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_DeltaLightResist;
        break;
      }
      
      // optional uint32 DeltaLightResist = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaLightResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltalightresist_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_DeltaEarthResist;
        break;
      }
      
      // optional uint32 DeltaEarthResist = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaEarthResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaearthresist_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_DeltaShadowResist;
        break;
      }
      
      // optional uint32 DeltaShadowResist = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaShadowResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltashadowresist_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_DeltaDeathRate;
        break;
      }
      
      // optional uint32 DeltaDeathRate = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaDeathRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltadeathrate_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_DeltaDeathValue;
        break;
      }
      
      // optional uint32 DeltaDeathValue = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaDeathValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltadeathvalue_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_DeltaNormalHitrate;
        break;
      }
      
      // optional uint32 DeltaNormalHitrate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaNormalHitrate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltanormalhitrate_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_DeltaNormalDuck;
        break;
      }
      
      // optional uint32 DeltaNormalDuck = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaNormalDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltanormalduck_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_DeltaSkillDuck;
        break;
      }
      
      // optional uint32 DeltaSkillDuck = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaSkillDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaskillduck_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_PAttackPerStr;
        break;
      }
      
      // optional uint32 PAttackPerStr = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackperstr_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_DeathValuePerStr;
        break;
      }
      
      // optional uint32 DeathValuePerStr = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValuePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvalueperstr_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_MaxHPPerStr;
        break;
      }
      
      // optional uint32 MaxHPPerStr = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhpperstr_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_PDefensePerCon;
        break;
      }
      
      // optional uint32 PDefensePerCon = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefensePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefensepercon_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_HPRSpeedPerCon;
        break;
      }
      
      // optional uint32 HPRSpeedPerCon = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRSpeedPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprspeedpercon_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_MaxHPPerSta;
        break;
      }
      
      // optional uint32 MaxHPPerSta = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPerSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhppersta_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_AbnResistPerSta;
        break;
      }
      
      // optional uint32 AbnResistPerSta = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AbnResistPerSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &abnresistpersta_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_MAttackPerWis;
        break;
      }
      
      // optional uint32 MAttackPerWis = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackperwis_));
        _set_bit(52);
        if (input->ExpectTag(432)) goto parse_MaxMPPerWis;
        break;
      }
      
      // optional uint32 MaxMPPerWis = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmpperwis_));
        _set_bit(53);
        if (input->ExpectTag(440)) goto parse_DeathValuePerWis;
        break;
      }
      
      // optional uint32 DeathValuePerWis = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValuePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvalueperwis_));
        _set_bit(54);
        if (input->ExpectTag(448)) goto parse_MDefensePerSpr;
        break;
      }
      
      // optional uint32 MDefensePerSpr = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefensePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefenseperspr_));
        _set_bit(55);
        if (input->ExpectTag(456)) goto parse_MaxMPPerSpr;
        break;
      }
      
      // optional uint32 MaxMPPerSpr = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmpperspr_));
        _set_bit(56);
        if (input->ExpectTag(464)) goto parse_MPRSpeedPerSpr;
        break;
      }
      
      // optional uint32 MPRSpeedPerSpr = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPRSpeedPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mprspeedperspr_));
        _set_bit(57);
        if (input->ExpectTag(472)) goto parse_NormalHPRSpeed;
        break;
      }
      
      // optional uint32 NormalHPRSpeed = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalHPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalhprspeed_));
        _set_bit(58);
        if (input->ExpectTag(480)) goto parse_NormalSitHPRSpeed;
        break;
      }
      
      // optional uint32 NormalSitHPRSpeed = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalSitHPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalsithprspeed_));
        _set_bit(59);
        if (input->ExpectTag(488)) goto parse_BattleHPRSpeed;
        break;
      }
      
      // optional uint32 BattleHPRSpeed = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleHPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlehprspeed_));
        _set_bit(60);
        if (input->ExpectTag(496)) goto parse_BattleSitHPRSpeed;
        break;
      }
      
      // optional uint32 BattleSitHPRSpeed = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleSitHPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlesithprspeed_));
        _set_bit(61);
        if (input->ExpectTag(504)) goto parse_NormalMPRSpeed;
        break;
      }
      
      // optional uint32 NormalMPRSpeed = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalMPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalmprspeed_));
        _set_bit(62);
        if (input->ExpectTag(512)) goto parse_NormalSitMPRSpeed;
        break;
      }
      
      // optional uint32 NormalSitMPRSpeed = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalSitMPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalsitmprspeed_));
        _set_bit(63);
        if (input->ExpectTag(520)) goto parse_BattleMPRSpeed;
        break;
      }
      
      // optional uint32 BattleMPRSpeed = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleMPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlemprspeed_));
        _set_bit(64);
        if (input->ExpectTag(528)) goto parse_BattleSitMPRSpeed;
        break;
      }
      
      // optional uint32 BattleSitMPRSpeed = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleSitMPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlesitmprspeed_));
        _set_bit(65);
        if (input->ExpectTag(536)) goto parse_InitIgnoreDuck;
        break;
      }
      
      // optional uint32 InitIgnoreDuck = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitIgnoreDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initignoreduck_));
        _set_bit(66);
        if (input->ExpectTag(544)) goto parse_DeltaIgnoreDuck;
        break;
      }
      
      // optional uint32 DeltaIgnoreDuck = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaIgnoreDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltaignoreduck_));
        _set_bit(67);
        if (input->ExpectTag(552)) goto parse_MAttackPerStr;
        break;
      }
      
      // optional uint32 MAttackPerStr = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackperstr_));
        _set_bit(68);
        if (input->ExpectTag(560)) goto parse_DeathRatePerStr;
        break;
      }
      
      // optional uint32 DeathRatePerStr = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRatePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathrateperstr_));
        _set_bit(69);
        if (input->ExpectTag(568)) goto parse_MaxMPPerStr;
        break;
      }
      
      // optional uint32 MaxMPPerStr = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmpperstr_));
        _set_bit(70);
        if (input->ExpectTag(576)) goto parse_PDefensePerStr;
        break;
      }
      
      // optional uint32 PDefensePerStr = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefensePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefenseperstr_));
        _set_bit(71);
        if (input->ExpectTag(584)) goto parse_MDefensePerStr;
        break;
      }
      
      // optional uint32 MDefensePerStr = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefensePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefenseperstr_));
        _set_bit(72);
        if (input->ExpectTag(592)) goto parse_NmlHitratePerStr;
        break;
      }
      
      // optional uint32 NmlHitratePerStr = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NmlHitratePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nmlhitrateperstr_));
        _set_bit(73);
        if (input->ExpectTag(600)) goto parse_NormalDuckPerStr;
        break;
      }
      
      // optional uint32 NormalDuckPerStr = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuckPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduckperstr_));
        _set_bit(74);
        if (input->ExpectTag(608)) goto parse_IgnoreDuckPerStr;
        break;
      }
      
      // optional uint32 IgnoreDuckPerStr = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuckPerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduckperstr_));
        _set_bit(75);
        if (input->ExpectTag(616)) goto parse_PAttackPerCon;
        break;
      }
      
      // optional uint32 PAttackPerCon = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackpercon_));
        _set_bit(76);
        if (input->ExpectTag(624)) goto parse_MAttackPerCon;
        break;
      }
      
      // optional uint32 MAttackPerCon = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackpercon_));
        _set_bit(77);
        if (input->ExpectTag(632)) goto parse_DeathRatePerCon;
        break;
      }
      
      // optional uint32 DeathRatePerCon = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRatePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathratepercon_));
        _set_bit(78);
        if (input->ExpectTag(640)) goto parse_DeathValuePerCon;
        break;
      }
      
      // optional uint32 DeathValuePerCon = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValuePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvaluepercon_));
        _set_bit(79);
        if (input->ExpectTag(648)) goto parse_MaxHPPerCon;
        break;
      }
      
      // optional uint32 MaxHPPerCon = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhppercon_));
        _set_bit(80);
        if (input->ExpectTag(656)) goto parse_MaxMPPerCon;
        break;
      }
      
      // optional uint32 MaxMPPerCon = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmppercon_));
        _set_bit(81);
        if (input->ExpectTag(664)) goto parse_MDefensePerCon;
        break;
      }
      
      // optional uint32 MDefensePerCon = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefensePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefensepercon_));
        _set_bit(82);
        if (input->ExpectTag(672)) goto parse_NmlHitratePerCon;
        break;
      }
      
      // optional uint32 NmlHitratePerCon = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NmlHitratePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nmlhitratepercon_));
        _set_bit(83);
        if (input->ExpectTag(680)) goto parse_NormalDuckPerCon;
        break;
      }
      
      // optional uint32 NormalDuckPerCon = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuckPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduckpercon_));
        _set_bit(84);
        if (input->ExpectTag(688)) goto parse_IgnoreDuckPerCon;
        break;
      }
      
      // optional uint32 IgnoreDuckPerCon = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuckPerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduckpercon_));
        _set_bit(85);
        if (input->ExpectTag(696)) goto parse_PReducePerSta;
        break;
      }
      
      // optional uint32 PReducePerSta = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PReducePerSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preducepersta_));
        _set_bit(86);
        if (input->ExpectTag(704)) goto parse_MReducePerSta;
        break;
      }
      
      // optional uint32 MReducePerSta = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MReducePerSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mreducepersta_));
        _set_bit(87);
        if (input->ExpectTag(712)) goto parse_PAttackPerWis;
        break;
      }
      
      // optional uint32 PAttackPerWis = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackperwis_));
        _set_bit(88);
        if (input->ExpectTag(720)) goto parse_MaxHPPerWis;
        break;
      }
      
      // optional uint32 MaxHPPerWis = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhpperwis_));
        _set_bit(89);
        if (input->ExpectTag(728)) goto parse_DeathRatePerWis;
        break;
      }
      
      // optional uint32 DeathRatePerWis = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRatePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathrateperwis_));
        _set_bit(90);
        if (input->ExpectTag(736)) goto parse_PDefensePerWis;
        break;
      }
      
      // optional uint32 PDefensePerWis = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefensePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefenseperwis_));
        _set_bit(91);
        if (input->ExpectTag(744)) goto parse_MDefensePerWis;
        break;
      }
      
      // optional uint32 MDefensePerWis = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefensePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefenseperwis_));
        _set_bit(92);
        if (input->ExpectTag(752)) goto parse_NmlHitratePerWis;
        break;
      }
      
      // optional uint32 NmlHitratePerWis = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NmlHitratePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nmlhitrateperwis_));
        _set_bit(93);
        if (input->ExpectTag(760)) goto parse_NormalDuckPerWis;
        break;
      }
      
      // optional uint32 NormalDuckPerWis = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuckPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduckperwis_));
        _set_bit(94);
        if (input->ExpectTag(768)) goto parse_IgnoreDuckPerWis;
        break;
      }
      
      // optional uint32 IgnoreDuckPerWis = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuckPerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduckperwis_));
        _set_bit(95);
        if (input->ExpectTag(776)) goto parse_PAttackPerSpr;
        break;
      }
      
      // optional uint32 PAttackPerSpr = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackperspr_));
        _set_bit(96);
        if (input->ExpectTag(784)) goto parse_MAttackPerSpr;
        break;
      }
      
      // optional uint32 MAttackPerSpr = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackperspr_));
        _set_bit(97);
        if (input->ExpectTag(792)) goto parse_DeathRatePerSpr;
        break;
      }
      
      // optional uint32 DeathRatePerSpr = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRatePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathrateperspr_));
        _set_bit(98);
        if (input->ExpectTag(800)) goto parse_DeathValuePerSpr;
        break;
      }
      
      // optional uint32 DeathValuePerSpr = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValuePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvalueperspr_));
        _set_bit(99);
        if (input->ExpectTag(808)) goto parse_MaxHPPerSpr;
        break;
      }
      
      // optional uint32 MaxHPPerSpr = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhpperspr_));
        _set_bit(100);
        if (input->ExpectTag(816)) goto parse_PDefensePerSpr;
        break;
      }
      
      // optional uint32 PDefensePerSpr = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefensePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefenseperspr_));
        _set_bit(101);
        if (input->ExpectTag(824)) goto parse_NmlHitratePerSpr;
        break;
      }
      
      // optional uint32 NmlHitratePerSpr = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NmlHitratePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nmlhitrateperspr_));
        _set_bit(102);
        if (input->ExpectTag(832)) goto parse_NormalDuckPerSpr;
        break;
      }
      
      // optional uint32 NormalDuckPerSpr = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuckPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduckperspr_));
        _set_bit(103);
        if (input->ExpectTag(840)) goto parse_IgnoreDuckPerSpr;
        break;
      }
      
      // optional uint32 IgnoreDuckPerSpr = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuckPerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduckperspr_));
        _set_bit(104);
        if (input->ExpectTag(848)) goto parse_InitDeathDefense;
        break;
      }
      
      // optional uint32 InitDeathDefense = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitDeathDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initdeathdefense_));
        _set_bit(105);
        if (input->ExpectTag(856)) goto parse_DeltaDeathDefense;
        break;
      }
      
      // optional uint32 DeltaDeathDefense = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaDeathDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltadeathdefense_));
        _set_bit(106);
        if (input->ExpectTag(864)) goto parse_DeathDefensePerStr;
        break;
      }
      
      // optional uint32 DeathDefensePerStr = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefensePerStr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefenseperstr_));
        _set_bit(107);
        if (input->ExpectTag(872)) goto parse_DeathDefensePerCon;
        break;
      }
      
      // optional uint32 DeathDefensePerCon = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefensePerCon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefensepercon_));
        _set_bit(108);
        if (input->ExpectTag(880)) goto parse_DeathDefensePerSta;
        break;
      }
      
      // optional uint32 DeathDefensePerSta = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefensePerSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefensepersta_));
        _set_bit(109);
        if (input->ExpectTag(888)) goto parse_DeathDefensePerWis;
        break;
      }
      
      // optional uint32 DeathDefensePerWis = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefensePerWis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefenseperwis_));
        _set_bit(110);
        if (input->ExpectTag(896)) goto parse_DeathDefensePerSpr;
        break;
      }
      
      // optional uint32 DeathDefensePerSpr = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefensePerSpr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefenseperspr_));
        _set_bit(111);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMetier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMetier::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string MetierName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->metiername(), output);
  }
  
  // optional uint32 MetierID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->metierid(), output);
  }
  
  // repeated uint32 GenerID = 4;
  for (int i = 0; i < this->generid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->generid(i), output);
  }
  
  // optional uint32 SkillPoint = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->skillpoint(), output);
  }
  
  // optional uint32 PropertyPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->propertypoint(), output);
  }
  
  // optional uint32 WalkSpeed = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->walkspeed(), output);
  }
  
  // optional uint32 RunSpeed = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->runspeed(), output);
  }
  
  // optional uint32 InitLevel = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->initlevel(), output);
  }
  
  // optional uint32 InitHP = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->inithp(), output);
  }
  
  // optional uint32 InitMP = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->initmp(), output);
  }
  
  // optional uint32 InitPAttack = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->initpattack(), output);
  }
  
  // optional uint32 InitPDefense = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->initpdefense(), output);
  }
  
  // optional uint32 InitMAttack = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->initmattack(), output);
  }
  
  // optional uint32 InitMDefense = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->initmdefense(), output);
  }
  
  // optional uint32 InitAbnResist = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->initabnresist(), output);
  }
  
  // optional uint32 InitWindResist = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->initwindresist(), output);
  }
  
  // optional uint32 InitFireResist = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->initfireresist(), output);
  }
  
  // optional uint32 InitWaterResist = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->initwaterresist(), output);
  }
  
  // optional uint32 InitLightResist = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->initlightresist(), output);
  }
  
  // optional uint32 InitEarthResist = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->initearthresist(), output);
  }
  
  // optional uint32 InitSadowResist = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->initsadowresist(), output);
  }
  
  // optional uint32 InitDeathRate = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->initdeathrate(), output);
  }
  
  // optional uint32 InitDeathValue = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->initdeathvalue(), output);
  }
  
  // optional uint32 InitNmlHitrate = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->initnmlhitrate(), output);
  }
  
  // optional uint32 InitNormalDuck = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->initnormalduck(), output);
  }
  
  // optional uint32 InitSkillDuck = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->initskillduck(), output);
  }
  
  // optional uint32 DeltaHP = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->deltahp(), output);
  }
  
  // optional uint32 DeltaMP = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->deltamp(), output);
  }
  
  // optional uint32 DeltaPAttack = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->deltapattack(), output);
  }
  
  // optional uint32 DeltaPDefense = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->deltapdefense(), output);
  }
  
  // optional uint32 DeltaMAttack = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->deltamattack(), output);
  }
  
  // optional uint32 DeltaMDefense = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->deltamdefense(), output);
  }
  
  // optional uint32 DeltaAbnResist = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->deltaabnresist(), output);
  }
  
  // optional uint32 DeltaWindResist = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->deltawindresist(), output);
  }
  
  // optional uint32 DeltaFireResist = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->deltafireresist(), output);
  }
  
  // optional uint32 DeltaWaterResist = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->deltawaterresist(), output);
  }
  
  // optional uint32 DeltaLightResist = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->deltalightresist(), output);
  }
  
  // optional uint32 DeltaEarthResist = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->deltaearthresist(), output);
  }
  
  // optional uint32 DeltaShadowResist = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->deltashadowresist(), output);
  }
  
  // optional uint32 DeltaDeathRate = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->deltadeathrate(), output);
  }
  
  // optional uint32 DeltaDeathValue = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->deltadeathvalue(), output);
  }
  
  // optional uint32 DeltaNormalHitrate = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->deltanormalhitrate(), output);
  }
  
  // optional uint32 DeltaNormalDuck = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->deltanormalduck(), output);
  }
  
  // optional uint32 DeltaSkillDuck = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->deltaskillduck(), output);
  }
  
  // optional uint32 PAttackPerStr = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->pattackperstr(), output);
  }
  
  // optional uint32 DeathValuePerStr = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->deathvalueperstr(), output);
  }
  
  // optional uint32 MaxHPPerStr = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(48, this->maxhpperstr(), output);
  }
  
  // optional uint32 PDefensePerCon = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->pdefensepercon(), output);
  }
  
  // optional uint32 HPRSpeedPerCon = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->hprspeedpercon(), output);
  }
  
  // optional uint32 MaxHPPerSta = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->maxhppersta(), output);
  }
  
  // optional uint32 AbnResistPerSta = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->abnresistpersta(), output);
  }
  
  // optional uint32 MAttackPerWis = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(53, this->mattackperwis(), output);
  }
  
  // optional uint32 MaxMPPerWis = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(54, this->maxmpperwis(), output);
  }
  
  // optional uint32 DeathValuePerWis = 55;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(55, this->deathvalueperwis(), output);
  }
  
  // optional uint32 MDefensePerSpr = 56;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(56, this->mdefenseperspr(), output);
  }
  
  // optional uint32 MaxMPPerSpr = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->maxmpperspr(), output);
  }
  
  // optional uint32 MPRSpeedPerSpr = 58;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(58, this->mprspeedperspr(), output);
  }
  
  // optional uint32 NormalHPRSpeed = 59;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(59, this->normalhprspeed(), output);
  }
  
  // optional uint32 NormalSitHPRSpeed = 60;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(60, this->normalsithprspeed(), output);
  }
  
  // optional uint32 BattleHPRSpeed = 61;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(61, this->battlehprspeed(), output);
  }
  
  // optional uint32 BattleSitHPRSpeed = 62;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(62, this->battlesithprspeed(), output);
  }
  
  // optional uint32 NormalMPRSpeed = 63;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(63, this->normalmprspeed(), output);
  }
  
  // optional uint32 NormalSitMPRSpeed = 64;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(64, this->normalsitmprspeed(), output);
  }
  
  // optional uint32 BattleMPRSpeed = 65;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(65, this->battlemprspeed(), output);
  }
  
  // optional uint32 BattleSitMPRSpeed = 66;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(66, this->battlesitmprspeed(), output);
  }
  
  // optional uint32 InitIgnoreDuck = 67;
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(67, this->initignoreduck(), output);
  }
  
  // optional uint32 DeltaIgnoreDuck = 68;
  if (_has_bit(67)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(68, this->deltaignoreduck(), output);
  }
  
  // optional uint32 MAttackPerStr = 69;
  if (_has_bit(68)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(69, this->mattackperstr(), output);
  }
  
  // optional uint32 DeathRatePerStr = 70;
  if (_has_bit(69)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(70, this->deathrateperstr(), output);
  }
  
  // optional uint32 MaxMPPerStr = 71;
  if (_has_bit(70)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(71, this->maxmpperstr(), output);
  }
  
  // optional uint32 PDefensePerStr = 72;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(72, this->pdefenseperstr(), output);
  }
  
  // optional uint32 MDefensePerStr = 73;
  if (_has_bit(72)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(73, this->mdefenseperstr(), output);
  }
  
  // optional uint32 NmlHitratePerStr = 74;
  if (_has_bit(73)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(74, this->nmlhitrateperstr(), output);
  }
  
  // optional uint32 NormalDuckPerStr = 75;
  if (_has_bit(74)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(75, this->normalduckperstr(), output);
  }
  
  // optional uint32 IgnoreDuckPerStr = 76;
  if (_has_bit(75)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(76, this->ignoreduckperstr(), output);
  }
  
  // optional uint32 PAttackPerCon = 77;
  if (_has_bit(76)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(77, this->pattackpercon(), output);
  }
  
  // optional uint32 MAttackPerCon = 78;
  if (_has_bit(77)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(78, this->mattackpercon(), output);
  }
  
  // optional uint32 DeathRatePerCon = 79;
  if (_has_bit(78)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(79, this->deathratepercon(), output);
  }
  
  // optional uint32 DeathValuePerCon = 80;
  if (_has_bit(79)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(80, this->deathvaluepercon(), output);
  }
  
  // optional uint32 MaxHPPerCon = 81;
  if (_has_bit(80)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(81, this->maxhppercon(), output);
  }
  
  // optional uint32 MaxMPPerCon = 82;
  if (_has_bit(81)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(82, this->maxmppercon(), output);
  }
  
  // optional uint32 MDefensePerCon = 83;
  if (_has_bit(82)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(83, this->mdefensepercon(), output);
  }
  
  // optional uint32 NmlHitratePerCon = 84;
  if (_has_bit(83)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(84, this->nmlhitratepercon(), output);
  }
  
  // optional uint32 NormalDuckPerCon = 85;
  if (_has_bit(84)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(85, this->normalduckpercon(), output);
  }
  
  // optional uint32 IgnoreDuckPerCon = 86;
  if (_has_bit(85)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(86, this->ignoreduckpercon(), output);
  }
  
  // optional uint32 PReducePerSta = 87;
  if (_has_bit(86)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(87, this->preducepersta(), output);
  }
  
  // optional uint32 MReducePerSta = 88;
  if (_has_bit(87)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(88, this->mreducepersta(), output);
  }
  
  // optional uint32 PAttackPerWis = 89;
  if (_has_bit(88)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(89, this->pattackperwis(), output);
  }
  
  // optional uint32 MaxHPPerWis = 90;
  if (_has_bit(89)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(90, this->maxhpperwis(), output);
  }
  
  // optional uint32 DeathRatePerWis = 91;
  if (_has_bit(90)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(91, this->deathrateperwis(), output);
  }
  
  // optional uint32 PDefensePerWis = 92;
  if (_has_bit(91)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(92, this->pdefenseperwis(), output);
  }
  
  // optional uint32 MDefensePerWis = 93;
  if (_has_bit(92)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(93, this->mdefenseperwis(), output);
  }
  
  // optional uint32 NmlHitratePerWis = 94;
  if (_has_bit(93)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(94, this->nmlhitrateperwis(), output);
  }
  
  // optional uint32 NormalDuckPerWis = 95;
  if (_has_bit(94)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(95, this->normalduckperwis(), output);
  }
  
  // optional uint32 IgnoreDuckPerWis = 96;
  if (_has_bit(95)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(96, this->ignoreduckperwis(), output);
  }
  
  // optional uint32 PAttackPerSpr = 97;
  if (_has_bit(96)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(97, this->pattackperspr(), output);
  }
  
  // optional uint32 MAttackPerSpr = 98;
  if (_has_bit(97)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(98, this->mattackperspr(), output);
  }
  
  // optional uint32 DeathRatePerSpr = 99;
  if (_has_bit(98)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(99, this->deathrateperspr(), output);
  }
  
  // optional uint32 DeathValuePerSpr = 100;
  if (_has_bit(99)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(100, this->deathvalueperspr(), output);
  }
  
  // optional uint32 MaxHPPerSpr = 101;
  if (_has_bit(100)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(101, this->maxhpperspr(), output);
  }
  
  // optional uint32 PDefensePerSpr = 102;
  if (_has_bit(101)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(102, this->pdefenseperspr(), output);
  }
  
  // optional uint32 NmlHitratePerSpr = 103;
  if (_has_bit(102)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(103, this->nmlhitrateperspr(), output);
  }
  
  // optional uint32 NormalDuckPerSpr = 104;
  if (_has_bit(103)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(104, this->normalduckperspr(), output);
  }
  
  // optional uint32 IgnoreDuckPerSpr = 105;
  if (_has_bit(104)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(105, this->ignoreduckperspr(), output);
  }
  
  // optional uint32 InitDeathDefense = 106;
  if (_has_bit(105)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(106, this->initdeathdefense(), output);
  }
  
  // optional uint32 DeltaDeathDefense = 107;
  if (_has_bit(106)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(107, this->deltadeathdefense(), output);
  }
  
  // optional uint32 DeathDefensePerStr = 108;
  if (_has_bit(107)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(108, this->deathdefenseperstr(), output);
  }
  
  // optional uint32 DeathDefensePerCon = 109;
  if (_has_bit(108)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(109, this->deathdefensepercon(), output);
  }
  
  // optional uint32 DeathDefensePerSta = 110;
  if (_has_bit(109)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(110, this->deathdefensepersta(), output);
  }
  
  // optional uint32 DeathDefensePerWis = 111;
  if (_has_bit(110)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(111, this->deathdefenseperwis(), output);
  }
  
  // optional uint32 DeathDefensePerSpr = 112;
  if (_has_bit(111)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(112, this->deathdefenseperspr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMetier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string MetierName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->metiername(), target);
  }
  
  // optional uint32 MetierID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->metierid(), target);
  }
  
  // repeated uint32 GenerID = 4;
  for (int i = 0; i < this->generid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->generid(i), target);
  }
  
  // optional uint32 SkillPoint = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->skillpoint(), target);
  }
  
  // optional uint32 PropertyPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->propertypoint(), target);
  }
  
  // optional uint32 WalkSpeed = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->walkspeed(), target);
  }
  
  // optional uint32 RunSpeed = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->runspeed(), target);
  }
  
  // optional uint32 InitLevel = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->initlevel(), target);
  }
  
  // optional uint32 InitHP = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->inithp(), target);
  }
  
  // optional uint32 InitMP = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->initmp(), target);
  }
  
  // optional uint32 InitPAttack = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->initpattack(), target);
  }
  
  // optional uint32 InitPDefense = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->initpdefense(), target);
  }
  
  // optional uint32 InitMAttack = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->initmattack(), target);
  }
  
  // optional uint32 InitMDefense = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->initmdefense(), target);
  }
  
  // optional uint32 InitAbnResist = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->initabnresist(), target);
  }
  
  // optional uint32 InitWindResist = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->initwindresist(), target);
  }
  
  // optional uint32 InitFireResist = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->initfireresist(), target);
  }
  
  // optional uint32 InitWaterResist = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->initwaterresist(), target);
  }
  
  // optional uint32 InitLightResist = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->initlightresist(), target);
  }
  
  // optional uint32 InitEarthResist = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->initearthresist(), target);
  }
  
  // optional uint32 InitSadowResist = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->initsadowresist(), target);
  }
  
  // optional uint32 InitDeathRate = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->initdeathrate(), target);
  }
  
  // optional uint32 InitDeathValue = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->initdeathvalue(), target);
  }
  
  // optional uint32 InitNmlHitrate = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->initnmlhitrate(), target);
  }
  
  // optional uint32 InitNormalDuck = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->initnormalduck(), target);
  }
  
  // optional uint32 InitSkillDuck = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->initskillduck(), target);
  }
  
  // optional uint32 DeltaHP = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->deltahp(), target);
  }
  
  // optional uint32 DeltaMP = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->deltamp(), target);
  }
  
  // optional uint32 DeltaPAttack = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->deltapattack(), target);
  }
  
  // optional uint32 DeltaPDefense = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->deltapdefense(), target);
  }
  
  // optional uint32 DeltaMAttack = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->deltamattack(), target);
  }
  
  // optional uint32 DeltaMDefense = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->deltamdefense(), target);
  }
  
  // optional uint32 DeltaAbnResist = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->deltaabnresist(), target);
  }
  
  // optional uint32 DeltaWindResist = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->deltawindresist(), target);
  }
  
  // optional uint32 DeltaFireResist = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->deltafireresist(), target);
  }
  
  // optional uint32 DeltaWaterResist = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->deltawaterresist(), target);
  }
  
  // optional uint32 DeltaLightResist = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->deltalightresist(), target);
  }
  
  // optional uint32 DeltaEarthResist = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->deltaearthresist(), target);
  }
  
  // optional uint32 DeltaShadowResist = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->deltashadowresist(), target);
  }
  
  // optional uint32 DeltaDeathRate = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->deltadeathrate(), target);
  }
  
  // optional uint32 DeltaDeathValue = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->deltadeathvalue(), target);
  }
  
  // optional uint32 DeltaNormalHitrate = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->deltanormalhitrate(), target);
  }
  
  // optional uint32 DeltaNormalDuck = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->deltanormalduck(), target);
  }
  
  // optional uint32 DeltaSkillDuck = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->deltaskillduck(), target);
  }
  
  // optional uint32 PAttackPerStr = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->pattackperstr(), target);
  }
  
  // optional uint32 DeathValuePerStr = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->deathvalueperstr(), target);
  }
  
  // optional uint32 MaxHPPerStr = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(48, this->maxhpperstr(), target);
  }
  
  // optional uint32 PDefensePerCon = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->pdefensepercon(), target);
  }
  
  // optional uint32 HPRSpeedPerCon = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->hprspeedpercon(), target);
  }
  
  // optional uint32 MaxHPPerSta = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->maxhppersta(), target);
  }
  
  // optional uint32 AbnResistPerSta = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->abnresistpersta(), target);
  }
  
  // optional uint32 MAttackPerWis = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(53, this->mattackperwis(), target);
  }
  
  // optional uint32 MaxMPPerWis = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(54, this->maxmpperwis(), target);
  }
  
  // optional uint32 DeathValuePerWis = 55;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(55, this->deathvalueperwis(), target);
  }
  
  // optional uint32 MDefensePerSpr = 56;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(56, this->mdefenseperspr(), target);
  }
  
  // optional uint32 MaxMPPerSpr = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->maxmpperspr(), target);
  }
  
  // optional uint32 MPRSpeedPerSpr = 58;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(58, this->mprspeedperspr(), target);
  }
  
  // optional uint32 NormalHPRSpeed = 59;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(59, this->normalhprspeed(), target);
  }
  
  // optional uint32 NormalSitHPRSpeed = 60;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(60, this->normalsithprspeed(), target);
  }
  
  // optional uint32 BattleHPRSpeed = 61;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(61, this->battlehprspeed(), target);
  }
  
  // optional uint32 BattleSitHPRSpeed = 62;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(62, this->battlesithprspeed(), target);
  }
  
  // optional uint32 NormalMPRSpeed = 63;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(63, this->normalmprspeed(), target);
  }
  
  // optional uint32 NormalSitMPRSpeed = 64;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(64, this->normalsitmprspeed(), target);
  }
  
  // optional uint32 BattleMPRSpeed = 65;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(65, this->battlemprspeed(), target);
  }
  
  // optional uint32 BattleSitMPRSpeed = 66;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(66, this->battlesitmprspeed(), target);
  }
  
  // optional uint32 InitIgnoreDuck = 67;
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(67, this->initignoreduck(), target);
  }
  
  // optional uint32 DeltaIgnoreDuck = 68;
  if (_has_bit(67)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(68, this->deltaignoreduck(), target);
  }
  
  // optional uint32 MAttackPerStr = 69;
  if (_has_bit(68)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(69, this->mattackperstr(), target);
  }
  
  // optional uint32 DeathRatePerStr = 70;
  if (_has_bit(69)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(70, this->deathrateperstr(), target);
  }
  
  // optional uint32 MaxMPPerStr = 71;
  if (_has_bit(70)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(71, this->maxmpperstr(), target);
  }
  
  // optional uint32 PDefensePerStr = 72;
  if (_has_bit(71)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(72, this->pdefenseperstr(), target);
  }
  
  // optional uint32 MDefensePerStr = 73;
  if (_has_bit(72)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(73, this->mdefenseperstr(), target);
  }
  
  // optional uint32 NmlHitratePerStr = 74;
  if (_has_bit(73)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(74, this->nmlhitrateperstr(), target);
  }
  
  // optional uint32 NormalDuckPerStr = 75;
  if (_has_bit(74)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(75, this->normalduckperstr(), target);
  }
  
  // optional uint32 IgnoreDuckPerStr = 76;
  if (_has_bit(75)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(76, this->ignoreduckperstr(), target);
  }
  
  // optional uint32 PAttackPerCon = 77;
  if (_has_bit(76)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(77, this->pattackpercon(), target);
  }
  
  // optional uint32 MAttackPerCon = 78;
  if (_has_bit(77)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(78, this->mattackpercon(), target);
  }
  
  // optional uint32 DeathRatePerCon = 79;
  if (_has_bit(78)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(79, this->deathratepercon(), target);
  }
  
  // optional uint32 DeathValuePerCon = 80;
  if (_has_bit(79)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(80, this->deathvaluepercon(), target);
  }
  
  // optional uint32 MaxHPPerCon = 81;
  if (_has_bit(80)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(81, this->maxhppercon(), target);
  }
  
  // optional uint32 MaxMPPerCon = 82;
  if (_has_bit(81)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(82, this->maxmppercon(), target);
  }
  
  // optional uint32 MDefensePerCon = 83;
  if (_has_bit(82)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(83, this->mdefensepercon(), target);
  }
  
  // optional uint32 NmlHitratePerCon = 84;
  if (_has_bit(83)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(84, this->nmlhitratepercon(), target);
  }
  
  // optional uint32 NormalDuckPerCon = 85;
  if (_has_bit(84)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(85, this->normalduckpercon(), target);
  }
  
  // optional uint32 IgnoreDuckPerCon = 86;
  if (_has_bit(85)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(86, this->ignoreduckpercon(), target);
  }
  
  // optional uint32 PReducePerSta = 87;
  if (_has_bit(86)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(87, this->preducepersta(), target);
  }
  
  // optional uint32 MReducePerSta = 88;
  if (_has_bit(87)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(88, this->mreducepersta(), target);
  }
  
  // optional uint32 PAttackPerWis = 89;
  if (_has_bit(88)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(89, this->pattackperwis(), target);
  }
  
  // optional uint32 MaxHPPerWis = 90;
  if (_has_bit(89)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(90, this->maxhpperwis(), target);
  }
  
  // optional uint32 DeathRatePerWis = 91;
  if (_has_bit(90)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(91, this->deathrateperwis(), target);
  }
  
  // optional uint32 PDefensePerWis = 92;
  if (_has_bit(91)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(92, this->pdefenseperwis(), target);
  }
  
  // optional uint32 MDefensePerWis = 93;
  if (_has_bit(92)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(93, this->mdefenseperwis(), target);
  }
  
  // optional uint32 NmlHitratePerWis = 94;
  if (_has_bit(93)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(94, this->nmlhitrateperwis(), target);
  }
  
  // optional uint32 NormalDuckPerWis = 95;
  if (_has_bit(94)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(95, this->normalduckperwis(), target);
  }
  
  // optional uint32 IgnoreDuckPerWis = 96;
  if (_has_bit(95)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(96, this->ignoreduckperwis(), target);
  }
  
  // optional uint32 PAttackPerSpr = 97;
  if (_has_bit(96)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(97, this->pattackperspr(), target);
  }
  
  // optional uint32 MAttackPerSpr = 98;
  if (_has_bit(97)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(98, this->mattackperspr(), target);
  }
  
  // optional uint32 DeathRatePerSpr = 99;
  if (_has_bit(98)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(99, this->deathrateperspr(), target);
  }
  
  // optional uint32 DeathValuePerSpr = 100;
  if (_has_bit(99)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(100, this->deathvalueperspr(), target);
  }
  
  // optional uint32 MaxHPPerSpr = 101;
  if (_has_bit(100)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(101, this->maxhpperspr(), target);
  }
  
  // optional uint32 PDefensePerSpr = 102;
  if (_has_bit(101)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(102, this->pdefenseperspr(), target);
  }
  
  // optional uint32 NmlHitratePerSpr = 103;
  if (_has_bit(102)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(103, this->nmlhitrateperspr(), target);
  }
  
  // optional uint32 NormalDuckPerSpr = 104;
  if (_has_bit(103)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(104, this->normalduckperspr(), target);
  }
  
  // optional uint32 IgnoreDuckPerSpr = 105;
  if (_has_bit(104)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(105, this->ignoreduckperspr(), target);
  }
  
  // optional uint32 InitDeathDefense = 106;
  if (_has_bit(105)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(106, this->initdeathdefense(), target);
  }
  
  // optional uint32 DeltaDeathDefense = 107;
  if (_has_bit(106)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(107, this->deltadeathdefense(), target);
  }
  
  // optional uint32 DeathDefensePerStr = 108;
  if (_has_bit(107)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(108, this->deathdefenseperstr(), target);
  }
  
  // optional uint32 DeathDefensePerCon = 109;
  if (_has_bit(108)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(109, this->deathdefensepercon(), target);
  }
  
  // optional uint32 DeathDefensePerSta = 110;
  if (_has_bit(109)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(110, this->deathdefensepersta(), target);
  }
  
  // optional uint32 DeathDefensePerWis = 111;
  if (_has_bit(110)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(111, this->deathdefenseperwis(), target);
  }
  
  // optional uint32 DeathDefensePerSpr = 112;
  if (_has_bit(111)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(112, this->deathdefenseperspr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMetier::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string MetierName = 2;
    if (has_metiername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->metiername());
    }
    
    // optional uint32 MetierID = 3;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 SkillPoint = 5;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillpoint());
    }
    
    // optional uint32 PropertyPoint = 6;
    if (has_propertypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->propertypoint());
    }
    
    // optional uint32 WalkSpeed = 7;
    if (has_walkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->walkspeed());
    }
    
    // optional uint32 RunSpeed = 8;
    if (has_runspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->runspeed());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InitLevel = 9;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlevel());
    }
    
    // optional uint32 InitHP = 10;
    if (has_inithp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inithp());
    }
    
    // optional uint32 InitMP = 11;
    if (has_initmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmp());
    }
    
    // optional uint32 InitPAttack = 12;
    if (has_initpattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initpattack());
    }
    
    // optional uint32 InitPDefense = 13;
    if (has_initpdefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initpdefense());
    }
    
    // optional uint32 InitMAttack = 14;
    if (has_initmattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmattack());
    }
    
    // optional uint32 InitMDefense = 15;
    if (has_initmdefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmdefense());
    }
    
    // optional uint32 InitAbnResist = 16;
    if (has_initabnresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initabnresist());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 InitWindResist = 17;
    if (has_initwindresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initwindresist());
    }
    
    // optional uint32 InitFireResist = 18;
    if (has_initfireresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initfireresist());
    }
    
    // optional uint32 InitWaterResist = 19;
    if (has_initwaterresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initwaterresist());
    }
    
    // optional uint32 InitLightResist = 20;
    if (has_initlightresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlightresist());
    }
    
    // optional uint32 InitEarthResist = 21;
    if (has_initearthresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initearthresist());
    }
    
    // optional uint32 InitSadowResist = 22;
    if (has_initsadowresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initsadowresist());
    }
    
    // optional uint32 InitDeathRate = 23;
    if (has_initdeathrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initdeathrate());
    }
    
    // optional uint32 InitDeathValue = 24;
    if (has_initdeathvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initdeathvalue());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 InitNmlHitrate = 25;
    if (has_initnmlhitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initnmlhitrate());
    }
    
    // optional uint32 InitNormalDuck = 26;
    if (has_initnormalduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initnormalduck());
    }
    
    // optional uint32 InitSkillDuck = 27;
    if (has_initskillduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initskillduck());
    }
    
    // optional uint32 DeltaHP = 28;
    if (has_deltahp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltahp());
    }
    
    // optional uint32 DeltaMP = 29;
    if (has_deltamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltamp());
    }
    
    // optional uint32 DeltaPAttack = 30;
    if (has_deltapattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltapattack());
    }
    
    // optional uint32 DeltaPDefense = 31;
    if (has_deltapdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltapdefense());
    }
    
    // optional uint32 DeltaMAttack = 32;
    if (has_deltamattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltamattack());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 DeltaMDefense = 33;
    if (has_deltamdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltamdefense());
    }
    
    // optional uint32 DeltaAbnResist = 34;
    if (has_deltaabnresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaabnresist());
    }
    
    // optional uint32 DeltaWindResist = 35;
    if (has_deltawindresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltawindresist());
    }
    
    // optional uint32 DeltaFireResist = 36;
    if (has_deltafireresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltafireresist());
    }
    
    // optional uint32 DeltaWaterResist = 37;
    if (has_deltawaterresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltawaterresist());
    }
    
    // optional uint32 DeltaLightResist = 38;
    if (has_deltalightresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltalightresist());
    }
    
    // optional uint32 DeltaEarthResist = 39;
    if (has_deltaearthresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaearthresist());
    }
    
    // optional uint32 DeltaShadowResist = 40;
    if (has_deltashadowresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltashadowresist());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 DeltaDeathRate = 41;
    if (has_deltadeathrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltadeathrate());
    }
    
    // optional uint32 DeltaDeathValue = 42;
    if (has_deltadeathvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltadeathvalue());
    }
    
    // optional uint32 DeltaNormalHitrate = 43;
    if (has_deltanormalhitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltanormalhitrate());
    }
    
    // optional uint32 DeltaNormalDuck = 44;
    if (has_deltanormalduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltanormalduck());
    }
    
    // optional uint32 DeltaSkillDuck = 45;
    if (has_deltaskillduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaskillduck());
    }
    
    // optional uint32 PAttackPerStr = 46;
    if (has_pattackperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackperstr());
    }
    
    // optional uint32 DeathValuePerStr = 47;
    if (has_deathvalueperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvalueperstr());
    }
    
    // optional uint32 MaxHPPerStr = 48;
    if (has_maxhpperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhpperstr());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 PDefensePerCon = 49;
    if (has_pdefensepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefensepercon());
    }
    
    // optional uint32 HPRSpeedPerCon = 50;
    if (has_hprspeedpercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprspeedpercon());
    }
    
    // optional uint32 MaxHPPerSta = 51;
    if (has_maxhppersta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhppersta());
    }
    
    // optional uint32 AbnResistPerSta = 52;
    if (has_abnresistpersta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->abnresistpersta());
    }
    
    // optional uint32 MAttackPerWis = 53;
    if (has_mattackperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackperwis());
    }
    
    // optional uint32 MaxMPPerWis = 54;
    if (has_maxmpperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmpperwis());
    }
    
    // optional uint32 DeathValuePerWis = 55;
    if (has_deathvalueperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvalueperwis());
    }
    
    // optional uint32 MDefensePerSpr = 56;
    if (has_mdefenseperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefenseperspr());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 MaxMPPerSpr = 57;
    if (has_maxmpperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmpperspr());
    }
    
    // optional uint32 MPRSpeedPerSpr = 58;
    if (has_mprspeedperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mprspeedperspr());
    }
    
    // optional uint32 NormalHPRSpeed = 59;
    if (has_normalhprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalhprspeed());
    }
    
    // optional uint32 NormalSitHPRSpeed = 60;
    if (has_normalsithprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalsithprspeed());
    }
    
    // optional uint32 BattleHPRSpeed = 61;
    if (has_battlehprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlehprspeed());
    }
    
    // optional uint32 BattleSitHPRSpeed = 62;
    if (has_battlesithprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlesithprspeed());
    }
    
    // optional uint32 NormalMPRSpeed = 63;
    if (has_normalmprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalmprspeed());
    }
    
    // optional uint32 NormalSitMPRSpeed = 64;
    if (has_normalsitmprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalsitmprspeed());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 BattleMPRSpeed = 65;
    if (has_battlemprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlemprspeed());
    }
    
    // optional uint32 BattleSitMPRSpeed = 66;
    if (has_battlesitmprspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlesitmprspeed());
    }
    
    // optional uint32 InitIgnoreDuck = 67;
    if (has_initignoreduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initignoreduck());
    }
    
    // optional uint32 DeltaIgnoreDuck = 68;
    if (has_deltaignoreduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltaignoreduck());
    }
    
    // optional uint32 MAttackPerStr = 69;
    if (has_mattackperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackperstr());
    }
    
    // optional uint32 DeathRatePerStr = 70;
    if (has_deathrateperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathrateperstr());
    }
    
    // optional uint32 MaxMPPerStr = 71;
    if (has_maxmpperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmpperstr());
    }
    
    // optional uint32 PDefensePerStr = 72;
    if (has_pdefenseperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefenseperstr());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint32 MDefensePerStr = 73;
    if (has_mdefenseperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefenseperstr());
    }
    
    // optional uint32 NmlHitratePerStr = 74;
    if (has_nmlhitrateperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nmlhitrateperstr());
    }
    
    // optional uint32 NormalDuckPerStr = 75;
    if (has_normalduckperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduckperstr());
    }
    
    // optional uint32 IgnoreDuckPerStr = 76;
    if (has_ignoreduckperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduckperstr());
    }
    
    // optional uint32 PAttackPerCon = 77;
    if (has_pattackpercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackpercon());
    }
    
    // optional uint32 MAttackPerCon = 78;
    if (has_mattackpercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackpercon());
    }
    
    // optional uint32 DeathRatePerCon = 79;
    if (has_deathratepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathratepercon());
    }
    
    // optional uint32 DeathValuePerCon = 80;
    if (has_deathvaluepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvaluepercon());
    }
    
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint32 MaxHPPerCon = 81;
    if (has_maxhppercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhppercon());
    }
    
    // optional uint32 MaxMPPerCon = 82;
    if (has_maxmppercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmppercon());
    }
    
    // optional uint32 MDefensePerCon = 83;
    if (has_mdefensepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefensepercon());
    }
    
    // optional uint32 NmlHitratePerCon = 84;
    if (has_nmlhitratepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nmlhitratepercon());
    }
    
    // optional uint32 NormalDuckPerCon = 85;
    if (has_normalduckpercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduckpercon());
    }
    
    // optional uint32 IgnoreDuckPerCon = 86;
    if (has_ignoreduckpercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduckpercon());
    }
    
    // optional uint32 PReducePerSta = 87;
    if (has_preducepersta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preducepersta());
    }
    
    // optional uint32 MReducePerSta = 88;
    if (has_mreducepersta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mreducepersta());
    }
    
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional uint32 PAttackPerWis = 89;
    if (has_pattackperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackperwis());
    }
    
    // optional uint32 MaxHPPerWis = 90;
    if (has_maxhpperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhpperwis());
    }
    
    // optional uint32 DeathRatePerWis = 91;
    if (has_deathrateperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathrateperwis());
    }
    
    // optional uint32 PDefensePerWis = 92;
    if (has_pdefenseperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefenseperwis());
    }
    
    // optional uint32 MDefensePerWis = 93;
    if (has_mdefenseperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefenseperwis());
    }
    
    // optional uint32 NmlHitratePerWis = 94;
    if (has_nmlhitrateperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nmlhitrateperwis());
    }
    
    // optional uint32 NormalDuckPerWis = 95;
    if (has_normalduckperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduckperwis());
    }
    
    // optional uint32 IgnoreDuckPerWis = 96;
    if (has_ignoreduckperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduckperwis());
    }
    
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional uint32 PAttackPerSpr = 97;
    if (has_pattackperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackperspr());
    }
    
    // optional uint32 MAttackPerSpr = 98;
    if (has_mattackperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackperspr());
    }
    
    // optional uint32 DeathRatePerSpr = 99;
    if (has_deathrateperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathrateperspr());
    }
    
    // optional uint32 DeathValuePerSpr = 100;
    if (has_deathvalueperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvalueperspr());
    }
    
    // optional uint32 MaxHPPerSpr = 101;
    if (has_maxhpperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhpperspr());
    }
    
    // optional uint32 PDefensePerSpr = 102;
    if (has_pdefenseperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefenseperspr());
    }
    
    // optional uint32 NmlHitratePerSpr = 103;
    if (has_nmlhitrateperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nmlhitrateperspr());
    }
    
    // optional uint32 NormalDuckPerSpr = 104;
    if (has_normalduckperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduckperspr());
    }
    
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional uint32 IgnoreDuckPerSpr = 105;
    if (has_ignoreduckperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduckperspr());
    }
    
    // optional uint32 InitDeathDefense = 106;
    if (has_initdeathdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initdeathdefense());
    }
    
    // optional uint32 DeltaDeathDefense = 107;
    if (has_deltadeathdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltadeathdefense());
    }
    
    // optional uint32 DeathDefensePerStr = 108;
    if (has_deathdefenseperstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefenseperstr());
    }
    
    // optional uint32 DeathDefensePerCon = 109;
    if (has_deathdefensepercon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefensepercon());
    }
    
    // optional uint32 DeathDefensePerSta = 110;
    if (has_deathdefensepersta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefensepersta());
    }
    
    // optional uint32 DeathDefensePerWis = 111;
    if (has_deathdefenseperwis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefenseperwis());
    }
    
    // optional uint32 DeathDefensePerSpr = 112;
    if (has_deathdefenseperspr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefenseperspr());
    }
    
  }
  // repeated uint32 GenerID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->generid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->generid(i));
    }
    total_size += 1 * this->generid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMetier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMetier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMetier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMetier::MergeFrom(const PBMetier& from) {
  GOOGLE_CHECK_NE(&from, this);
  generid_.MergeFrom(from.generid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_metiername(from.metiername());
    }
    if (from._has_bit(2)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(4)) {
      set_skillpoint(from.skillpoint());
    }
    if (from._has_bit(5)) {
      set_propertypoint(from.propertypoint());
    }
    if (from._has_bit(6)) {
      set_walkspeed(from.walkspeed());
    }
    if (from._has_bit(7)) {
      set_runspeed(from.runspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_initlevel(from.initlevel());
    }
    if (from._has_bit(9)) {
      set_inithp(from.inithp());
    }
    if (from._has_bit(10)) {
      set_initmp(from.initmp());
    }
    if (from._has_bit(11)) {
      set_initpattack(from.initpattack());
    }
    if (from._has_bit(12)) {
      set_initpdefense(from.initpdefense());
    }
    if (from._has_bit(13)) {
      set_initmattack(from.initmattack());
    }
    if (from._has_bit(14)) {
      set_initmdefense(from.initmdefense());
    }
    if (from._has_bit(15)) {
      set_initabnresist(from.initabnresist());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_initwindresist(from.initwindresist());
    }
    if (from._has_bit(17)) {
      set_initfireresist(from.initfireresist());
    }
    if (from._has_bit(18)) {
      set_initwaterresist(from.initwaterresist());
    }
    if (from._has_bit(19)) {
      set_initlightresist(from.initlightresist());
    }
    if (from._has_bit(20)) {
      set_initearthresist(from.initearthresist());
    }
    if (from._has_bit(21)) {
      set_initsadowresist(from.initsadowresist());
    }
    if (from._has_bit(22)) {
      set_initdeathrate(from.initdeathrate());
    }
    if (from._has_bit(23)) {
      set_initdeathvalue(from.initdeathvalue());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_initnmlhitrate(from.initnmlhitrate());
    }
    if (from._has_bit(25)) {
      set_initnormalduck(from.initnormalduck());
    }
    if (from._has_bit(26)) {
      set_initskillduck(from.initskillduck());
    }
    if (from._has_bit(27)) {
      set_deltahp(from.deltahp());
    }
    if (from._has_bit(28)) {
      set_deltamp(from.deltamp());
    }
    if (from._has_bit(29)) {
      set_deltapattack(from.deltapattack());
    }
    if (from._has_bit(30)) {
      set_deltapdefense(from.deltapdefense());
    }
    if (from._has_bit(31)) {
      set_deltamattack(from.deltamattack());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_deltamdefense(from.deltamdefense());
    }
    if (from._has_bit(33)) {
      set_deltaabnresist(from.deltaabnresist());
    }
    if (from._has_bit(34)) {
      set_deltawindresist(from.deltawindresist());
    }
    if (from._has_bit(35)) {
      set_deltafireresist(from.deltafireresist());
    }
    if (from._has_bit(36)) {
      set_deltawaterresist(from.deltawaterresist());
    }
    if (from._has_bit(37)) {
      set_deltalightresist(from.deltalightresist());
    }
    if (from._has_bit(38)) {
      set_deltaearthresist(from.deltaearthresist());
    }
    if (from._has_bit(39)) {
      set_deltashadowresist(from.deltashadowresist());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_deltadeathrate(from.deltadeathrate());
    }
    if (from._has_bit(41)) {
      set_deltadeathvalue(from.deltadeathvalue());
    }
    if (from._has_bit(42)) {
      set_deltanormalhitrate(from.deltanormalhitrate());
    }
    if (from._has_bit(43)) {
      set_deltanormalduck(from.deltanormalduck());
    }
    if (from._has_bit(44)) {
      set_deltaskillduck(from.deltaskillduck());
    }
    if (from._has_bit(45)) {
      set_pattackperstr(from.pattackperstr());
    }
    if (from._has_bit(46)) {
      set_deathvalueperstr(from.deathvalueperstr());
    }
    if (from._has_bit(47)) {
      set_maxhpperstr(from.maxhpperstr());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_pdefensepercon(from.pdefensepercon());
    }
    if (from._has_bit(49)) {
      set_hprspeedpercon(from.hprspeedpercon());
    }
    if (from._has_bit(50)) {
      set_maxhppersta(from.maxhppersta());
    }
    if (from._has_bit(51)) {
      set_abnresistpersta(from.abnresistpersta());
    }
    if (from._has_bit(52)) {
      set_mattackperwis(from.mattackperwis());
    }
    if (from._has_bit(53)) {
      set_maxmpperwis(from.maxmpperwis());
    }
    if (from._has_bit(54)) {
      set_deathvalueperwis(from.deathvalueperwis());
    }
    if (from._has_bit(55)) {
      set_mdefenseperspr(from.mdefenseperspr());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_maxmpperspr(from.maxmpperspr());
    }
    if (from._has_bit(57)) {
      set_mprspeedperspr(from.mprspeedperspr());
    }
    if (from._has_bit(58)) {
      set_normalhprspeed(from.normalhprspeed());
    }
    if (from._has_bit(59)) {
      set_normalsithprspeed(from.normalsithprspeed());
    }
    if (from._has_bit(60)) {
      set_battlehprspeed(from.battlehprspeed());
    }
    if (from._has_bit(61)) {
      set_battlesithprspeed(from.battlesithprspeed());
    }
    if (from._has_bit(62)) {
      set_normalmprspeed(from.normalmprspeed());
    }
    if (from._has_bit(63)) {
      set_normalsitmprspeed(from.normalsitmprspeed());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set_battlemprspeed(from.battlemprspeed());
    }
    if (from._has_bit(65)) {
      set_battlesitmprspeed(from.battlesitmprspeed());
    }
    if (from._has_bit(66)) {
      set_initignoreduck(from.initignoreduck());
    }
    if (from._has_bit(67)) {
      set_deltaignoreduck(from.deltaignoreduck());
    }
    if (from._has_bit(68)) {
      set_mattackperstr(from.mattackperstr());
    }
    if (from._has_bit(69)) {
      set_deathrateperstr(from.deathrateperstr());
    }
    if (from._has_bit(70)) {
      set_maxmpperstr(from.maxmpperstr());
    }
    if (from._has_bit(71)) {
      set_pdefenseperstr(from.pdefenseperstr());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from._has_bit(72)) {
      set_mdefenseperstr(from.mdefenseperstr());
    }
    if (from._has_bit(73)) {
      set_nmlhitrateperstr(from.nmlhitrateperstr());
    }
    if (from._has_bit(74)) {
      set_normalduckperstr(from.normalduckperstr());
    }
    if (from._has_bit(75)) {
      set_ignoreduckperstr(from.ignoreduckperstr());
    }
    if (from._has_bit(76)) {
      set_pattackpercon(from.pattackpercon());
    }
    if (from._has_bit(77)) {
      set_mattackpercon(from.mattackpercon());
    }
    if (from._has_bit(78)) {
      set_deathratepercon(from.deathratepercon());
    }
    if (from._has_bit(79)) {
      set_deathvaluepercon(from.deathvaluepercon());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from._has_bit(80)) {
      set_maxhppercon(from.maxhppercon());
    }
    if (from._has_bit(81)) {
      set_maxmppercon(from.maxmppercon());
    }
    if (from._has_bit(82)) {
      set_mdefensepercon(from.mdefensepercon());
    }
    if (from._has_bit(83)) {
      set_nmlhitratepercon(from.nmlhitratepercon());
    }
    if (from._has_bit(84)) {
      set_normalduckpercon(from.normalduckpercon());
    }
    if (from._has_bit(85)) {
      set_ignoreduckpercon(from.ignoreduckpercon());
    }
    if (from._has_bit(86)) {
      set_preducepersta(from.preducepersta());
    }
    if (from._has_bit(87)) {
      set_mreducepersta(from.mreducepersta());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from._has_bit(88)) {
      set_pattackperwis(from.pattackperwis());
    }
    if (from._has_bit(89)) {
      set_maxhpperwis(from.maxhpperwis());
    }
    if (from._has_bit(90)) {
      set_deathrateperwis(from.deathrateperwis());
    }
    if (from._has_bit(91)) {
      set_pdefenseperwis(from.pdefenseperwis());
    }
    if (from._has_bit(92)) {
      set_mdefenseperwis(from.mdefenseperwis());
    }
    if (from._has_bit(93)) {
      set_nmlhitrateperwis(from.nmlhitrateperwis());
    }
    if (from._has_bit(94)) {
      set_normalduckperwis(from.normalduckperwis());
    }
    if (from._has_bit(95)) {
      set_ignoreduckperwis(from.ignoreduckperwis());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from._has_bit(96)) {
      set_pattackperspr(from.pattackperspr());
    }
    if (from._has_bit(97)) {
      set_mattackperspr(from.mattackperspr());
    }
    if (from._has_bit(98)) {
      set_deathrateperspr(from.deathrateperspr());
    }
    if (from._has_bit(99)) {
      set_deathvalueperspr(from.deathvalueperspr());
    }
    if (from._has_bit(100)) {
      set_maxhpperspr(from.maxhpperspr());
    }
    if (from._has_bit(101)) {
      set_pdefenseperspr(from.pdefenseperspr());
    }
    if (from._has_bit(102)) {
      set_nmlhitrateperspr(from.nmlhitrateperspr());
    }
    if (from._has_bit(103)) {
      set_normalduckperspr(from.normalduckperspr());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from._has_bit(104)) {
      set_ignoreduckperspr(from.ignoreduckperspr());
    }
    if (from._has_bit(105)) {
      set_initdeathdefense(from.initdeathdefense());
    }
    if (from._has_bit(106)) {
      set_deltadeathdefense(from.deltadeathdefense());
    }
    if (from._has_bit(107)) {
      set_deathdefenseperstr(from.deathdefenseperstr());
    }
    if (from._has_bit(108)) {
      set_deathdefensepercon(from.deathdefensepercon());
    }
    if (from._has_bit(109)) {
      set_deathdefensepersta(from.deathdefensepersta());
    }
    if (from._has_bit(110)) {
      set_deathdefenseperwis(from.deathdefenseperwis());
    }
    if (from._has_bit(111)) {
      set_deathdefenseperspr(from.deathdefenseperspr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMetier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetier::CopyFrom(const PBMetier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetier::Swap(PBMetier* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(metiername_, other->metiername_);
    std::swap(metierid_, other->metierid_);
    generid_.Swap(&other->generid_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(propertypoint_, other->propertypoint_);
    std::swap(walkspeed_, other->walkspeed_);
    std::swap(runspeed_, other->runspeed_);
    std::swap(initlevel_, other->initlevel_);
    std::swap(inithp_, other->inithp_);
    std::swap(initmp_, other->initmp_);
    std::swap(initpattack_, other->initpattack_);
    std::swap(initpdefense_, other->initpdefense_);
    std::swap(initmattack_, other->initmattack_);
    std::swap(initmdefense_, other->initmdefense_);
    std::swap(initabnresist_, other->initabnresist_);
    std::swap(initwindresist_, other->initwindresist_);
    std::swap(initfireresist_, other->initfireresist_);
    std::swap(initwaterresist_, other->initwaterresist_);
    std::swap(initlightresist_, other->initlightresist_);
    std::swap(initearthresist_, other->initearthresist_);
    std::swap(initsadowresist_, other->initsadowresist_);
    std::swap(initdeathrate_, other->initdeathrate_);
    std::swap(initdeathvalue_, other->initdeathvalue_);
    std::swap(initnmlhitrate_, other->initnmlhitrate_);
    std::swap(initnormalduck_, other->initnormalduck_);
    std::swap(initskillduck_, other->initskillduck_);
    std::swap(deltahp_, other->deltahp_);
    std::swap(deltamp_, other->deltamp_);
    std::swap(deltapattack_, other->deltapattack_);
    std::swap(deltapdefense_, other->deltapdefense_);
    std::swap(deltamattack_, other->deltamattack_);
    std::swap(deltamdefense_, other->deltamdefense_);
    std::swap(deltaabnresist_, other->deltaabnresist_);
    std::swap(deltawindresist_, other->deltawindresist_);
    std::swap(deltafireresist_, other->deltafireresist_);
    std::swap(deltawaterresist_, other->deltawaterresist_);
    std::swap(deltalightresist_, other->deltalightresist_);
    std::swap(deltaearthresist_, other->deltaearthresist_);
    std::swap(deltashadowresist_, other->deltashadowresist_);
    std::swap(deltadeathrate_, other->deltadeathrate_);
    std::swap(deltadeathvalue_, other->deltadeathvalue_);
    std::swap(deltanormalhitrate_, other->deltanormalhitrate_);
    std::swap(deltanormalduck_, other->deltanormalduck_);
    std::swap(deltaskillduck_, other->deltaskillduck_);
    std::swap(pattackperstr_, other->pattackperstr_);
    std::swap(deathvalueperstr_, other->deathvalueperstr_);
    std::swap(maxhpperstr_, other->maxhpperstr_);
    std::swap(pdefensepercon_, other->pdefensepercon_);
    std::swap(hprspeedpercon_, other->hprspeedpercon_);
    std::swap(maxhppersta_, other->maxhppersta_);
    std::swap(abnresistpersta_, other->abnresistpersta_);
    std::swap(mattackperwis_, other->mattackperwis_);
    std::swap(maxmpperwis_, other->maxmpperwis_);
    std::swap(deathvalueperwis_, other->deathvalueperwis_);
    std::swap(mdefenseperspr_, other->mdefenseperspr_);
    std::swap(maxmpperspr_, other->maxmpperspr_);
    std::swap(mprspeedperspr_, other->mprspeedperspr_);
    std::swap(normalhprspeed_, other->normalhprspeed_);
    std::swap(normalsithprspeed_, other->normalsithprspeed_);
    std::swap(battlehprspeed_, other->battlehprspeed_);
    std::swap(battlesithprspeed_, other->battlesithprspeed_);
    std::swap(normalmprspeed_, other->normalmprspeed_);
    std::swap(normalsitmprspeed_, other->normalsitmprspeed_);
    std::swap(battlemprspeed_, other->battlemprspeed_);
    std::swap(battlesitmprspeed_, other->battlesitmprspeed_);
    std::swap(initignoreduck_, other->initignoreduck_);
    std::swap(deltaignoreduck_, other->deltaignoreduck_);
    std::swap(mattackperstr_, other->mattackperstr_);
    std::swap(deathrateperstr_, other->deathrateperstr_);
    std::swap(maxmpperstr_, other->maxmpperstr_);
    std::swap(pdefenseperstr_, other->pdefenseperstr_);
    std::swap(mdefenseperstr_, other->mdefenseperstr_);
    std::swap(nmlhitrateperstr_, other->nmlhitrateperstr_);
    std::swap(normalduckperstr_, other->normalduckperstr_);
    std::swap(ignoreduckperstr_, other->ignoreduckperstr_);
    std::swap(pattackpercon_, other->pattackpercon_);
    std::swap(mattackpercon_, other->mattackpercon_);
    std::swap(deathratepercon_, other->deathratepercon_);
    std::swap(deathvaluepercon_, other->deathvaluepercon_);
    std::swap(maxhppercon_, other->maxhppercon_);
    std::swap(maxmppercon_, other->maxmppercon_);
    std::swap(mdefensepercon_, other->mdefensepercon_);
    std::swap(nmlhitratepercon_, other->nmlhitratepercon_);
    std::swap(normalduckpercon_, other->normalduckpercon_);
    std::swap(ignoreduckpercon_, other->ignoreduckpercon_);
    std::swap(preducepersta_, other->preducepersta_);
    std::swap(mreducepersta_, other->mreducepersta_);
    std::swap(pattackperwis_, other->pattackperwis_);
    std::swap(maxhpperwis_, other->maxhpperwis_);
    std::swap(deathrateperwis_, other->deathrateperwis_);
    std::swap(pdefenseperwis_, other->pdefenseperwis_);
    std::swap(mdefenseperwis_, other->mdefenseperwis_);
    std::swap(nmlhitrateperwis_, other->nmlhitrateperwis_);
    std::swap(normalduckperwis_, other->normalduckperwis_);
    std::swap(ignoreduckperwis_, other->ignoreduckperwis_);
    std::swap(pattackperspr_, other->pattackperspr_);
    std::swap(mattackperspr_, other->mattackperspr_);
    std::swap(deathrateperspr_, other->deathrateperspr_);
    std::swap(deathvalueperspr_, other->deathvalueperspr_);
    std::swap(maxhpperspr_, other->maxhpperspr_);
    std::swap(pdefenseperspr_, other->pdefenseperspr_);
    std::swap(nmlhitrateperspr_, other->nmlhitrateperspr_);
    std::swap(normalduckperspr_, other->normalduckperspr_);
    std::swap(ignoreduckperspr_, other->ignoreduckperspr_);
    std::swap(initdeathdefense_, other->initdeathdefense_);
    std::swap(deltadeathdefense_, other->deltadeathdefense_);
    std::swap(deathdefenseperstr_, other->deathdefenseperstr_);
    std::swap(deathdefensepercon_, other->deathdefensepercon_);
    std::swap(deathdefensepersta_, other->deathdefensepersta_);
    std::swap(deathdefenseperwis_, other->deathdefenseperwis_);
    std::swap(deathdefenseperspr_, other->deathdefenseperspr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMetier::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMetier::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMetier::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMetier_reflection_;
}

// ===================================================================

const ::std::string PBNpc::_default_talk_;
const ::std::string PBNpc::_default_describe_;
const ::std::string PBNpc::_default_fbfunc_str_;
#ifndef _MSC_VER
const int PBNpc::kOgreFieldNumber;
const int PBNpc::kFuncTypeFieldNumber;
const int PBNpc::kTalkFieldNumber;
const int PBNpc::kStageIDFieldNumber;
const int PBNpc::kTalkServiceIDFieldNumber;
const int PBNpc::kSellServiceIDFieldNumber;
const int PBNpc::kMailServiceFieldNumber;
const int PBNpc::kStorageServiceFieldNumber;
const int PBNpc::kUpgServiceFieldNumber;
const int PBNpc::kEqtBindServiceFieldNumber;
const int PBNpc::kWelfareServiceFieldNumber;
const int PBNpc::kDescribeFieldNumber;
const int PBNpc::kStudySkillIDFieldNumber;
const int PBNpc::kTownXFieldNumber;
const int PBNpc::kTownYFieldNumber;
const int PBNpc::kStorageTaskNpcFieldNumber;
const int PBNpc::kStorageTaskIDFieldNumber;
const int PBNpc::kDownLevelFieldNumber;
const int PBNpc::kUpLevelFieldNumber;
const int PBNpc::kDiploidTableFieldNumber;
const int PBNpc::kResetPServiceFieldNumber;
const int PBNpc::kFamilyServiceFieldNumber;
const int PBNpc::kCorpServiceFieldNumber;
const int PBNpc::kChangeServiceFieldNumber;
const int PBNpc::kJudgeServiceFieldNumber;
const int PBNpc::kActivityServiceFieldNumber;
const int PBNpc::kExchangeServiceFieldNumber;
const int PBNpc::kHonorServiceFieldNumber;
const int PBNpc::kBattleFieldNumber;
const int PBNpc::kLifeSkillServiceFieldNumber;
const int PBNpc::kBidDayFieldNumber;
const int PBNpc::kBidHourFieldNumber;
const int PBNpc::kBidMinuteFieldNumber;
const int PBNpc::kCoprsBattleFieldNumber;
const int PBNpc::kMinBidPriceFieldNumber;
const int PBNpc::kBattleCityFieldNumber;
const int PBNpc::kMWProJudgeServiceFieldNumber;
const int PBNpc::kMWSkillJudgeServiceFieldNumber;
const int PBNpc::kEquipExchangeServiceFieldNumber;
const int PBNpc::kExchangeTableIDFieldNumber;
const int PBNpc::kCorpsBidDayFieldNumber;
const int PBNpc::kCorpsBidHourFieldNumber;
const int PBNpc::kCorpsBidMinuteFieldNumber;
const int PBNpc::kMWClearPointServiceFieldNumber;
const int PBNpc::kMWSecondJudgeServiceFieldNumber;
const int PBNpc::kUnionServiceFieldNumber;
const int PBNpc::kCountryServiceFieldNumber;
const int PBNpc::kFriendServiceFieldNumber;
const int PBNpc::kCountryTypeFieldNumber;
const int PBNpc::kGoldenYBServiceFieldNumber;
const int PBNpc::kChairManTaskServiceFieldNumber;
const int PBNpc::kChairManTaskIDFieldNumber;
const int PBNpc::kMarriageServiceFieldNumber;
const int PBNpc::kMatrixServiceFieldNumber;
const int PBNpc::kFamilyTypeFieldNumber;
const int PBNpc::kStoneBuffFieldNumber;
const int PBNpc::kDisappearFieldNumber;
const int PBNpc::kRefreshServiceFieldNumber;
const int PBNpc::kPedalIndexFieldNumber;
const int PBNpc::kDirectServiceFieldNumber;
const int PBNpc::kExtraServiceFieldNumber;
const int PBNpc::kWarServiceFieldNumber;
const int PBNpc::kWarOpTypeFieldNumber;
const int PBNpc::kWarValueFieldNumber;
const int PBNpc::kWarCampFieldNumber;
const int PBNpc::kEquipLevelServiceFieldNumber;
const int PBNpc::kWarHonorFieldNumber;
const int PBNpc::kFangCunServiceFieldNumber;
const int PBNpc::kResistTranFieldNumber;
const int PBNpc::kFBFuncFieldNumber;
const int PBNpc::kFBFuncParame1FieldNumber;
const int PBNpc::kFBFuncParame2FieldNumber;
const int PBNpc::kFBFuncStrFieldNumber;
const int PBNpc::kTaxServiceFieldNumber;
const int PBNpc::kChangeCampServiceFieldNumber;
const int PBNpc::kWeakProtectServiceFieldNumber;
const int PBNpc::kYaoQianShuRankFieldNumber;
const int PBNpc::kHandinFieldNumber;
const int PBNpc::kSpecialEventFieldNumber;
const int PBNpc::kYaoQianInfoFieldNumber;
const int PBNpc::kTreasureBowlFieldNumber;
const int PBNpc::kMWDecomposeServiceFieldNumber;
const int PBNpc::kMWImprintServiceFieldNumber;
const int PBNpc::kMWUpdateServiceFieldNumber;
const int PBNpc::kMWUpdateExServiceFieldNumber;
const int PBNpc::kCorpsBidStartDayFieldNumber;
const int PBNpc::kCorpsBidStartHourFieldNumber;
const int PBNpc::kCorpsBidStartMinuteFieldNumber;
const int PBNpc::kLastOneServiceFieldNumber;
const int PBNpc::kFamilyBidStartHourFieldNumber;
const int PBNpc::kFamilyBidStartMinuteFieldNumber;
const int PBNpc::kMWQLComposeServiceFieldNumber;
const int PBNpc::kRandomTeleServiceFieldNumber;
const int PBNpc::kIntroduceMapIDFieldNumber;
const int PBNpc::kShiTuServiceFieldNumber;
const int PBNpc::kSwornServiceFieldNumber;
const int PBNpc::kGlobalWarServiceFieldNumber;
const int PBNpc::kSuperEquipExchangeFieldNumber;
#endif  // !_MSC_VER

PBNpc::PBNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBNpc::InitAsDefaultInstance() {  ogre_ = const_cast< ::PBOgreProperty*>(&::PBOgreProperty::default_instance());
}

PBNpc::PBNpc(const PBNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBNpc::SharedCtor() {
  _cached_size_ = 0;
  ogre_ = NULL;
  functype_ = 0u;
  talk_ = const_cast< ::std::string*>(&_default_talk_);
  stageid_ = 0u;
  talkserviceid_ = 0u;
  sellserviceid_ = 0u;
  mailservice_ = 0u;
  storageservice_ = 0u;
  upgservice_ = 0u;
  eqtbindservice_ = 0u;
  welfareservice_ = 0u;
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  studyskillid_ = 0u;
  townx_ = 0u;
  towny_ = 0u;
  storagetasknpc_ = 0u;
  storagetaskid_ = 0u;
  downlevel_ = 0u;
  uplevel_ = 0u;
  diploidtable_ = 0u;
  resetpservice_ = 0u;
  familyservice_ = 0u;
  corpservice_ = 0u;
  changeservice_ = 0u;
  judgeservice_ = 0u;
  activityservice_ = 0u;
  exchangeservice_ = 0u;
  honorservice_ = 0u;
  battle_ = 0u;
  lifeskillservice_ = 0u;
  bidday_ = 0u;
  bidhour_ = 0u;
  bidminute_ = 0u;
  coprsbattle_ = 0u;
  minbidprice_ = 0u;
  battlecity_ = 0u;
  mwprojudgeservice_ = 0u;
  mwskilljudgeservice_ = 0u;
  equipexchangeservice_ = 0u;
  exchangetableid_ = 0u;
  corpsbidday_ = 0u;
  corpsbidhour_ = 0u;
  corpsbidminute_ = 0u;
  mwclearpointservice_ = 0u;
  mwsecondjudgeservice_ = 0u;
  unionservice_ = 0u;
  countryservice_ = 0u;
  friendservice_ = 0u;
  countrytype_ = 0u;
  goldenybservice_ = 0u;
  chairmantaskservice_ = 0u;
  chairmantaskid_ = 0u;
  marriageservice_ = 0u;
  matrixservice_ = 0u;
  familytype_ = 0u;
  stonebuff_ = 0u;
  disappear_ = 0u;
  refreshservice_ = 0u;
  pedalindex_ = 0u;
  directservice_ = 0u;
  extraservice_ = 0u;
  warservice_ = 0u;
  waroptype_ = 0u;
  warvalue_ = 0u;
  warcamp_ = 0u;
  equiplevelservice_ = 0u;
  warhonor_ = 0u;
  fangcunservice_ = 0u;
  resisttran_ = 0u;
  fbfunc_ = 0u;
  fbfunc_parame1_ = 0u;
  fbfunc_parame2_ = 0u;
  fbfunc_str_ = const_cast< ::std::string*>(&_default_fbfunc_str_);
  taxservice_ = 0u;
  changecampservice_ = 0u;
  weakprotectservice_ = 0u;
  yaoqianshurank_ = 0u;
  handin_ = 0u;
  specialevent_ = 0u;
  yaoqianinfo_ = 0u;
  treasurebowl_ = 0u;
  mwdecomposeservice_ = 0u;
  mwimprintservice_ = 0u;
  mwupdateservice_ = 0u;
  mwupdateexservice_ = 0u;
  corpsbidstartday_ = 0u;
  corpsbidstarthour_ = 0u;
  corpsbidstartminute_ = 0u;
  lastoneservice_ = 0u;
  familybidstarthour_ = 0u;
  familybidstartminute_ = 0u;
  mwqlcomposeservice_ = 0u;
  randomteleservice_ = 0u;
  introducemapid_ = 0u;
  shituservice_ = 0u;
  swornservice_ = 0u;
  globalwarservice_ = 0u;
  superequipexchange_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBNpc::~PBNpc() {
  SharedDtor();
}

void PBNpc::SharedDtor() {
  if (talk_ != &_default_talk_) {
    delete talk_;
  }
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (fbfunc_str_ != &_default_fbfunc_str_) {
    delete fbfunc_str_;
  }
  if (this != default_instance_) {
    delete ogre_;
  }
}

const ::google::protobuf::Descriptor* PBNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNpc_descriptor_;
}

const PBNpc& PBNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBNpc* PBNpc::default_instance_ = NULL;

PBNpc* PBNpc::New() const {
  return new PBNpc;
}

void PBNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ogre_ != NULL) ogre_->::PBOgreProperty::Clear();
    }
    functype_ = 0u;
    if (_has_bit(2)) {
      if (talk_ != &_default_talk_) {
        talk_->clear();
      }
    }
    stageid_ = 0u;
    talkserviceid_ = 0u;
    sellserviceid_ = 0u;
    mailservice_ = 0u;
    storageservice_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    upgservice_ = 0u;
    eqtbindservice_ = 0u;
    welfareservice_ = 0u;
    if (_has_bit(11)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
    studyskillid_ = 0u;
    townx_ = 0u;
    towny_ = 0u;
    storagetasknpc_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    storagetaskid_ = 0u;
    downlevel_ = 0u;
    uplevel_ = 0u;
    diploidtable_ = 0u;
    resetpservice_ = 0u;
    familyservice_ = 0u;
    corpservice_ = 0u;
    changeservice_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    judgeservice_ = 0u;
    activityservice_ = 0u;
    exchangeservice_ = 0u;
    honorservice_ = 0u;
    battle_ = 0u;
    lifeskillservice_ = 0u;
    bidday_ = 0u;
    bidhour_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    bidminute_ = 0u;
    coprsbattle_ = 0u;
    minbidprice_ = 0u;
    battlecity_ = 0u;
    mwprojudgeservice_ = 0u;
    mwskilljudgeservice_ = 0u;
    equipexchangeservice_ = 0u;
    exchangetableid_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    corpsbidday_ = 0u;
    corpsbidhour_ = 0u;
    corpsbidminute_ = 0u;
    mwclearpointservice_ = 0u;
    mwsecondjudgeservice_ = 0u;
    unionservice_ = 0u;
    countryservice_ = 0u;
    friendservice_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    countrytype_ = 0u;
    goldenybservice_ = 0u;
    chairmantaskservice_ = 0u;
    chairmantaskid_ = 0u;
    marriageservice_ = 0u;
    matrixservice_ = 0u;
    familytype_ = 0u;
    stonebuff_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    disappear_ = 0u;
    refreshservice_ = 0u;
    pedalindex_ = 0u;
    directservice_ = 0u;
    extraservice_ = 0u;
    warservice_ = 0u;
    waroptype_ = 0u;
    warvalue_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    warcamp_ = 0u;
    equiplevelservice_ = 0u;
    warhonor_ = 0u;
    fangcunservice_ = 0u;
    resisttran_ = 0u;
    fbfunc_ = 0u;
    fbfunc_parame1_ = 0u;
    fbfunc_parame2_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (_has_bit(72)) {
      if (fbfunc_str_ != &_default_fbfunc_str_) {
        fbfunc_str_->clear();
      }
    }
    taxservice_ = 0u;
    changecampservice_ = 0u;
    weakprotectservice_ = 0u;
    yaoqianshurank_ = 0u;
    handin_ = 0u;
    specialevent_ = 0u;
    yaoqianinfo_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    treasurebowl_ = 0u;
    mwdecomposeservice_ = 0u;
    mwimprintservice_ = 0u;
    mwupdateservice_ = 0u;
    mwupdateexservice_ = 0u;
    corpsbidstartday_ = 0u;
    corpsbidstarthour_ = 0u;
    corpsbidstartminute_ = 0u;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    lastoneservice_ = 0u;
    familybidstarthour_ = 0u;
    familybidstartminute_ = 0u;
    mwqlcomposeservice_ = 0u;
    randomteleservice_ = 0u;
    introducemapid_ = 0u;
    shituservice_ = 0u;
    swornservice_ = 0u;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    globalwarservice_ = 0u;
    superequipexchange_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBOgreProperty Ogre = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_ogre()));
        if (input->ExpectTag(16)) goto parse_FuncType;
        break;
      }
      
      // optional uint32 FuncType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FuncType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Talk;
        break;
      }
      
      // optional string Talk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Talk:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_talk()));
        if (input->ExpectTag(32)) goto parse_StageID;
        break;
      }
      
      // optional uint32 StageID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StageID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stageid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_TalkServiceID;
        break;
      }
      
      // optional uint32 TalkServiceID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalkServiceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talkserviceid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SellServiceID;
        break;
      }
      
      // optional uint32 SellServiceID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SellServiceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sellserviceid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MailService;
        break;
      }
      
      // optional uint32 MailService = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mailservice_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_StorageService;
        break;
      }
      
      // optional uint32 StorageService = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StorageService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storageservice_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_UpgService;
        break;
      }
      
      // optional uint32 UpgService = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upgservice_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_EqtBindService;
        break;
      }
      
      // optional uint32 EqtBindService = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EqtBindService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eqtbindservice_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_WelfareService;
        break;
      }
      
      // optional uint32 WelfareService = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WelfareService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &welfareservice_));
        _set_bit(10);
        if (input->ExpectTag(98)) goto parse_Describe;
        break;
      }
      
      // optional string Describe = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Describe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_describe()));
        if (input->ExpectTag(104)) goto parse_StudySkillID;
        break;
      }
      
      // optional uint32 StudySkillID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudySkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &studyskillid_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_TownX;
        break;
      }
      
      // optional uint32 TownX = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TownX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &townx_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_TownY;
        break;
      }
      
      // optional uint32 TownY = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TownY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &towny_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_StorageTaskNpc;
        break;
      }
      
      // optional uint32 StorageTaskNpc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StorageTaskNpc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storagetasknpc_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_StorageTaskID;
        break;
      }
      
      // optional uint32 StorageTaskID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StorageTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storagetaskid_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_DownLevel;
        break;
      }
      
      // optional uint32 DownLevel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DownLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &downlevel_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_UpLevel;
        break;
      }
      
      // optional uint32 UpLevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &uplevel_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_DiploidTable;
        break;
      }
      
      // optional uint32 DiploidTable = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DiploidTable:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diploidtable_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_ResetPService;
        break;
      }
      
      // optional uint32 ResetPService = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResetPService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resetpservice_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_FamilyService;
        break;
      }
      
      // optional uint32 FamilyService = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyservice_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_CorpService;
        break;
      }
      
      // optional uint32 CorpService = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpservice_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_ChangeService;
        break;
      }
      
      // optional uint32 ChangeService = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changeservice_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_JudgeService;
        break;
      }
      
      // optional uint32 JudgeService = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgeservice_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_ActivityService;
        break;
      }
      
      // optional uint32 ActivityService = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActivityService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityservice_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_ExchangeService;
        break;
      }
      
      // optional uint32 ExchangeService = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangeservice_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_HonorService;
        break;
      }
      
      // optional uint32 HonorService = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HonorService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honorservice_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_Battle;
        break;
      }
      
      // optional uint32 Battle = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Battle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battle_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_LifeSkillService;
        break;
      }
      
      // optional uint32 LifeSkillService = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillservice_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_BidDay;
        break;
      }
      
      // optional uint32 BidDay = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidDay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidday_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_BidHour;
        break;
      }
      
      // optional uint32 BidHour = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidhour_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_BidMinute;
        break;
      }
      
      // optional uint32 BidMinute = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidminute_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_CoprsBattle;
        break;
      }
      
      // optional uint32 CoprsBattle = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoprsBattle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &coprsbattle_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_MinBidPrice;
        break;
      }
      
      // optional uint32 MinBidPrice = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinBidPrice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minbidprice_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_BattleCity;
        break;
      }
      
      // optional uint32 BattleCity = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BattleCity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &battlecity_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_MWProJudgeService;
        break;
      }
      
      // optional uint32 MWProJudgeService = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWProJudgeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwprojudgeservice_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_MWSkillJudgeService;
        break;
      }
      
      // optional uint32 MWSkillJudgeService = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWSkillJudgeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwskilljudgeservice_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_EquipExchangeService;
        break;
      }
      
      // optional uint32 EquipExchangeService = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipExchangeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equipexchangeservice_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_ExchangeTableID;
        break;
      }
      
      // optional uint32 ExchangeTableID = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangetableid_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_CorpsBidDay;
        break;
      }
      
      // optional uint32 CorpsBidDay = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidDay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidday_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_CorpsBidHour;
        break;
      }
      
      // optional uint32 CorpsBidHour = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidhour_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_CorpsBidMinute;
        break;
      }
      
      // optional uint32 CorpsBidMinute = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidminute_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_MWClearPointService;
        break;
      }
      
      // optional uint32 MWClearPointService = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWClearPointService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwclearpointservice_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_MWSecondJudgeService;
        break;
      }
      
      // optional uint32 MWSecondJudgeService = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWSecondJudgeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwsecondjudgeservice_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_UnionService;
        break;
      }
      
      // optional uint32 UnionService = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnionService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionservice_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_CountryService;
        break;
      }
      
      // optional uint32 CountryService = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryservice_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_FriendService;
        break;
      }
      
      // optional uint32 FriendService = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FriendService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &friendservice_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_CountryType;
        break;
      }
      
      // optional uint32 CountryType = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countrytype_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_GoldenYBService;
        break;
      }
      
      // optional uint32 GoldenYBService = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GoldenYBService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &goldenybservice_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_ChairManTaskService;
        break;
      }
      
      // optional uint32 ChairManTaskService = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChairManTaskService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chairmantaskservice_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_ChairManTaskID;
        break;
      }
      
      // optional uint32 ChairManTaskID = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChairManTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chairmantaskid_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_MarriageService;
        break;
      }
      
      // optional uint32 MarriageService = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriageservice_));
        _set_bit(52);
        if (input->ExpectTag(432)) goto parse_MatrixService;
        break;
      }
      
      // optional uint32 MatrixService = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MatrixService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &matrixservice_));
        _set_bit(53);
        if (input->ExpectTag(440)) goto parse_FamilyType;
        break;
      }
      
      // optional uint32 FamilyType = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familytype_));
        _set_bit(54);
        if (input->ExpectTag(448)) goto parse_StoneBuff;
        break;
      }
      
      // optional uint32 StoneBuff = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stonebuff_));
        _set_bit(55);
        if (input->ExpectTag(456)) goto parse_Disappear;
        break;
      }
      
      // optional uint32 Disappear = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Disappear:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &disappear_));
        _set_bit(56);
        if (input->ExpectTag(464)) goto parse_RefreshService;
        break;
      }
      
      // optional uint32 RefreshService = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RefreshService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refreshservice_));
        _set_bit(57);
        if (input->ExpectTag(472)) goto parse_PedalIndex;
        break;
      }
      
      // optional uint32 PedalIndex = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PedalIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pedalindex_));
        _set_bit(58);
        if (input->ExpectTag(480)) goto parse_DirectService;
        break;
      }
      
      // optional uint32 DirectService = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DirectService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &directservice_));
        _set_bit(59);
        if (input->ExpectTag(488)) goto parse_ExtraService;
        break;
      }
      
      // optional uint32 ExtraService = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extraservice_));
        _set_bit(60);
        if (input->ExpectTag(496)) goto parse_WarService;
        break;
      }
      
      // optional uint32 WarService = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warservice_));
        _set_bit(61);
        if (input->ExpectTag(504)) goto parse_WarOpType;
        break;
      }
      
      // optional uint32 WarOpType = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarOpType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &waroptype_));
        _set_bit(62);
        if (input->ExpectTag(512)) goto parse_WarValue;
        break;
      }
      
      // optional uint32 WarValue = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warvalue_));
        _set_bit(63);
        if (input->ExpectTag(520)) goto parse_WarCamp;
        break;
      }
      
      // optional uint32 WarCamp = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarCamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warcamp_));
        _set_bit(64);
        if (input->ExpectTag(528)) goto parse_EquipLevelService;
        break;
      }
      
      // optional uint32 EquipLevelService = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipLevelService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equiplevelservice_));
        _set_bit(65);
        if (input->ExpectTag(536)) goto parse_WarHonor;
        break;
      }
      
      // optional uint32 WarHonor = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warhonor_));
        _set_bit(66);
        if (input->ExpectTag(544)) goto parse_FangCunService;
        break;
      }
      
      // optional uint32 FangCunService = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FangCunService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fangcunservice_));
        _set_bit(67);
        if (input->ExpectTag(552)) goto parse_ResistTran;
        break;
      }
      
      // optional uint32 ResistTran = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResistTran:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resisttran_));
        _set_bit(68);
        if (input->ExpectTag(560)) goto parse_FBFunc;
        break;
      }
      
      // optional uint32 FBFunc = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FBFunc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fbfunc_));
        _set_bit(69);
        if (input->ExpectTag(568)) goto parse_FBFunc_Parame1;
        break;
      }
      
      // optional uint32 FBFunc_Parame1 = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FBFunc_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fbfunc_parame1_));
        _set_bit(70);
        if (input->ExpectTag(576)) goto parse_FBFunc_Parame2;
        break;
      }
      
      // optional uint32 FBFunc_Parame2 = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FBFunc_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fbfunc_parame2_));
        _set_bit(71);
        if (input->ExpectTag(586)) goto parse_FBFunc_Str;
        break;
      }
      
      // optional string FBFunc_Str = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FBFunc_Str:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_fbfunc_str()));
        if (input->ExpectTag(592)) goto parse_TaxService;
        break;
      }
      
      // optional uint32 TaxService = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaxService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taxservice_));
        _set_bit(73);
        if (input->ExpectTag(600)) goto parse_ChangeCampService;
        break;
      }
      
      // optional uint32 ChangeCampService = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeCampService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changecampservice_));
        _set_bit(74);
        if (input->ExpectTag(608)) goto parse_WeakProtectService;
        break;
      }
      
      // optional uint32 WeakProtectService = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeakProtectService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weakprotectservice_));
        _set_bit(75);
        if (input->ExpectTag(616)) goto parse_YaoQianShuRank;
        break;
      }
      
      // optional uint32 YaoQianShuRank = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YaoQianShuRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yaoqianshurank_));
        _set_bit(76);
        if (input->ExpectTag(624)) goto parse_Handin;
        break;
      }
      
      // optional uint32 Handin = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Handin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handin_));
        _set_bit(77);
        if (input->ExpectTag(632)) goto parse_SpecialEvent;
        break;
      }
      
      // optional uint32 SpecialEvent = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpecialEvent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &specialevent_));
        _set_bit(78);
        if (input->ExpectTag(640)) goto parse_YaoQianInfo;
        break;
      }
      
      // optional uint32 YaoQianInfo = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YaoQianInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yaoqianinfo_));
        _set_bit(79);
        if (input->ExpectTag(648)) goto parse_TreasureBowl;
        break;
      }
      
      // optional uint32 TreasureBowl = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TreasureBowl:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &treasurebowl_));
        _set_bit(80);
        if (input->ExpectTag(656)) goto parse_MWDecomposeService;
        break;
      }
      
      // optional uint32 MWDecomposeService = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWDecomposeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwdecomposeservice_));
        _set_bit(81);
        if (input->ExpectTag(664)) goto parse_MWImprintService;
        break;
      }
      
      // optional uint32 MWImprintService = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWImprintService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwimprintservice_));
        _set_bit(82);
        if (input->ExpectTag(672)) goto parse_MWUpdateService;
        break;
      }
      
      // optional uint32 MWUpdateService = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWUpdateService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwupdateservice_));
        _set_bit(83);
        if (input->ExpectTag(680)) goto parse_MWUpdateExService;
        break;
      }
      
      // optional uint32 MWUpdateExService = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWUpdateExService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwupdateexservice_));
        _set_bit(84);
        if (input->ExpectTag(688)) goto parse_CorpsBidStartDay;
        break;
      }
      
      // optional uint32 CorpsBidStartDay = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidStartDay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidstartday_));
        _set_bit(85);
        if (input->ExpectTag(696)) goto parse_CorpsBidStartHour;
        break;
      }
      
      // optional uint32 CorpsBidStartHour = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidStartHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidstarthour_));
        _set_bit(86);
        if (input->ExpectTag(704)) goto parse_CorpsBidStartMinute;
        break;
      }
      
      // optional uint32 CorpsBidStartMinute = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBidStartMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbidstartminute_));
        _set_bit(87);
        if (input->ExpectTag(712)) goto parse_LastOneService;
        break;
      }
      
      // optional uint32 LastOneService = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastOneService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastoneservice_));
        _set_bit(88);
        if (input->ExpectTag(720)) goto parse_FamilyBidStartHour;
        break;
      }
      
      // optional uint32 FamilyBidStartHour = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyBidStartHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familybidstarthour_));
        _set_bit(89);
        if (input->ExpectTag(728)) goto parse_FamilyBidStartMinute;
        break;
      }
      
      // optional uint32 FamilyBidStartMinute = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyBidStartMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familybidstartminute_));
        _set_bit(90);
        if (input->ExpectTag(736)) goto parse_MWQLComposeService;
        break;
      }
      
      // optional uint32 MWQLComposeService = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MWQLComposeService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwqlcomposeservice_));
        _set_bit(91);
        if (input->ExpectTag(744)) goto parse_RandomTeleService;
        break;
      }
      
      // optional uint32 RandomTeleService = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RandomTeleService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &randomteleservice_));
        _set_bit(92);
        if (input->ExpectTag(752)) goto parse_IntroduceMapID;
        break;
      }
      
      // optional uint32 IntroduceMapID = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntroduceMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &introducemapid_));
        _set_bit(93);
        if (input->ExpectTag(760)) goto parse_ShiTuService;
        break;
      }
      
      // optional uint32 ShiTuService = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShiTuService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shituservice_));
        _set_bit(94);
        if (input->ExpectTag(768)) goto parse_SwornService;
        break;
      }
      
      // optional uint32 SwornService = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SwornService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &swornservice_));
        _set_bit(95);
        if (input->ExpectTag(776)) goto parse_GlobalWarService;
        break;
      }
      
      // optional uint32 GlobalWarService = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GlobalWarService:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &globalwarservice_));
        _set_bit(96);
        if (input->ExpectTag(784)) goto parse_SuperEquipExchange;
        break;
      }
      
      // optional uint32 SuperEquipExchange = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuperEquipExchange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &superequipexchange_));
        _set_bit(97);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBNpc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBOgreProperty Ogre = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->ogre(), output);
  }
  
  // optional uint32 FuncType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->functype(), output);
  }
  
  // optional string Talk = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->talk(), output);
  }
  
  // optional uint32 StageID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->stageid(), output);
  }
  
  // optional uint32 TalkServiceID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->talkserviceid(), output);
  }
  
  // optional uint32 SellServiceID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->sellserviceid(), output);
  }
  
  // optional uint32 MailService = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mailservice(), output);
  }
  
  // optional uint32 StorageService = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->storageservice(), output);
  }
  
  // optional uint32 UpgService = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->upgservice(), output);
  }
  
  // optional uint32 EqtBindService = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->eqtbindservice(), output);
  }
  
  // optional uint32 WelfareService = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->welfareservice(), output);
  }
  
  // optional string Describe = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->describe(), output);
  }
  
  // optional uint32 StudySkillID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->studyskillid(), output);
  }
  
  // optional uint32 TownX = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->townx(), output);
  }
  
  // optional uint32 TownY = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->towny(), output);
  }
  
  // optional uint32 StorageTaskNpc = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->storagetasknpc(), output);
  }
  
  // optional uint32 StorageTaskID = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->storagetaskid(), output);
  }
  
  // optional uint32 DownLevel = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->downlevel(), output);
  }
  
  // optional uint32 UpLevel = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->uplevel(), output);
  }
  
  // optional uint32 DiploidTable = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->diploidtable(), output);
  }
  
  // optional uint32 ResetPService = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->resetpservice(), output);
  }
  
  // optional uint32 FamilyService = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->familyservice(), output);
  }
  
  // optional uint32 CorpService = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->corpservice(), output);
  }
  
  // optional uint32 ChangeService = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->changeservice(), output);
  }
  
  // optional uint32 JudgeService = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->judgeservice(), output);
  }
  
  // optional uint32 ActivityService = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->activityservice(), output);
  }
  
  // optional uint32 ExchangeService = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->exchangeservice(), output);
  }
  
  // optional uint32 HonorService = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->honorservice(), output);
  }
  
  // optional uint32 Battle = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->battle(), output);
  }
  
  // optional uint32 LifeSkillService = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->lifeskillservice(), output);
  }
  
  // optional uint32 BidDay = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->bidday(), output);
  }
  
  // optional uint32 BidHour = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->bidhour(), output);
  }
  
  // optional uint32 BidMinute = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->bidminute(), output);
  }
  
  // optional uint32 CoprsBattle = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->coprsbattle(), output);
  }
  
  // optional uint32 MinBidPrice = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->minbidprice(), output);
  }
  
  // optional uint32 BattleCity = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->battlecity(), output);
  }
  
  // optional uint32 MWProJudgeService = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->mwprojudgeservice(), output);
  }
  
  // optional uint32 MWSkillJudgeService = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->mwskilljudgeservice(), output);
  }
  
  // optional uint32 EquipExchangeService = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->equipexchangeservice(), output);
  }
  
  // optional uint32 ExchangeTableID = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->exchangetableid(), output);
  }
  
  // optional uint32 CorpsBidDay = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->corpsbidday(), output);
  }
  
  // optional uint32 CorpsBidHour = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->corpsbidhour(), output);
  }
  
  // optional uint32 CorpsBidMinute = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->corpsbidminute(), output);
  }
  
  // optional uint32 MWClearPointService = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->mwclearpointservice(), output);
  }
  
  // optional uint32 MWSecondJudgeService = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->mwsecondjudgeservice(), output);
  }
  
  // optional uint32 UnionService = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->unionservice(), output);
  }
  
  // optional uint32 CountryService = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->countryservice(), output);
  }
  
  // optional uint32 FriendService = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(48, this->friendservice(), output);
  }
  
  // optional uint32 CountryType = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->countrytype(), output);
  }
  
  // optional uint32 GoldenYBService = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->goldenybservice(), output);
  }
  
  // optional uint32 ChairManTaskService = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->chairmantaskservice(), output);
  }
  
  // optional uint32 ChairManTaskID = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->chairmantaskid(), output);
  }
  
  // optional uint32 MarriageService = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(53, this->marriageservice(), output);
  }
  
  // optional uint32 MatrixService = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(54, this->matrixservice(), output);
  }
  
  // optional uint32 FamilyType = 55;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(55, this->familytype(), output);
  }
  
  // optional uint32 StoneBuff = 56;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(56, this->stonebuff(), output);
  }
  
  // optional uint32 Disappear = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->disappear(), output);
  }
  
  // optional uint32 RefreshService = 58;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(58, this->refreshservice(), output);
  }
  
  // optional uint32 PedalIndex = 59;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(59, this->pedalindex(), output);
  }
  
  // optional uint32 DirectService = 60;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(60, this->directservice(), output);
  }
  
  // optional uint32 ExtraService = 61;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(61, this->extraservice(), output);
  }
  
  // optional uint32 WarService = 62;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(62, this->warservice(), output);
  }
  
  // optional uint32 WarOpType = 63;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(63, this->waroptype(), output);
  }
  
  // optional uint32 WarValue = 64;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(64, this->warvalue(), output);
  }
  
  // optional uint32 WarCamp = 65;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(65, this->warcamp(), output);
  }
  
  // optional uint32 EquipLevelService = 66;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(66, this->equiplevelservice(), output);
  }
  
  // optional uint32 WarHonor = 67;
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(67, this->warhonor(), output);
  }
  
  // optional uint32 FangCunService = 68;
  if (_has_bit(67)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(68, this->fangcunservice(), output);
  }
  
  // optional uint32 ResistTran = 69;
  if (_has_bit(68)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(69, this->resisttran(), output);
  }
  
  // optional uint32 FBFunc = 70;
  if (_has_bit(69)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(70, this->fbfunc(), output);
  }
  
  // optional uint32 FBFunc_Parame1 = 71;
  if (_has_bit(70)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(71, this->fbfunc_parame1(), output);
  }
  
  // optional uint32 FBFunc_Parame2 = 72;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(72, this->fbfunc_parame2(), output);
  }
  
  // optional string FBFunc_Str = 73;
  if (_has_bit(72)) {
    ::google::protobuf::internal::WireFormat::WriteString(73, this->fbfunc_str(), output);
  }
  
  // optional uint32 TaxService = 74;
  if (_has_bit(73)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(74, this->taxservice(), output);
  }
  
  // optional uint32 ChangeCampService = 75;
  if (_has_bit(74)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(75, this->changecampservice(), output);
  }
  
  // optional uint32 WeakProtectService = 76;
  if (_has_bit(75)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(76, this->weakprotectservice(), output);
  }
  
  // optional uint32 YaoQianShuRank = 77;
  if (_has_bit(76)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(77, this->yaoqianshurank(), output);
  }
  
  // optional uint32 Handin = 78;
  if (_has_bit(77)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(78, this->handin(), output);
  }
  
  // optional uint32 SpecialEvent = 79;
  if (_has_bit(78)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(79, this->specialevent(), output);
  }
  
  // optional uint32 YaoQianInfo = 80;
  if (_has_bit(79)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(80, this->yaoqianinfo(), output);
  }
  
  // optional uint32 TreasureBowl = 81;
  if (_has_bit(80)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(81, this->treasurebowl(), output);
  }
  
  // optional uint32 MWDecomposeService = 82;
  if (_has_bit(81)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(82, this->mwdecomposeservice(), output);
  }
  
  // optional uint32 MWImprintService = 83;
  if (_has_bit(82)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(83, this->mwimprintservice(), output);
  }
  
  // optional uint32 MWUpdateService = 84;
  if (_has_bit(83)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(84, this->mwupdateservice(), output);
  }
  
  // optional uint32 MWUpdateExService = 85;
  if (_has_bit(84)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(85, this->mwupdateexservice(), output);
  }
  
  // optional uint32 CorpsBidStartDay = 86;
  if (_has_bit(85)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(86, this->corpsbidstartday(), output);
  }
  
  // optional uint32 CorpsBidStartHour = 87;
  if (_has_bit(86)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(87, this->corpsbidstarthour(), output);
  }
  
  // optional uint32 CorpsBidStartMinute = 88;
  if (_has_bit(87)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(88, this->corpsbidstartminute(), output);
  }
  
  // optional uint32 LastOneService = 89;
  if (_has_bit(88)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(89, this->lastoneservice(), output);
  }
  
  // optional uint32 FamilyBidStartHour = 90;
  if (_has_bit(89)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(90, this->familybidstarthour(), output);
  }
  
  // optional uint32 FamilyBidStartMinute = 91;
  if (_has_bit(90)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(91, this->familybidstartminute(), output);
  }
  
  // optional uint32 MWQLComposeService = 92;
  if (_has_bit(91)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(92, this->mwqlcomposeservice(), output);
  }
  
  // optional uint32 RandomTeleService = 93;
  if (_has_bit(92)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(93, this->randomteleservice(), output);
  }
  
  // optional uint32 IntroduceMapID = 94;
  if (_has_bit(93)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(94, this->introducemapid(), output);
  }
  
  // optional uint32 ShiTuService = 95;
  if (_has_bit(94)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(95, this->shituservice(), output);
  }
  
  // optional uint32 SwornService = 96;
  if (_has_bit(95)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(96, this->swornservice(), output);
  }
  
  // optional uint32 GlobalWarService = 97;
  if (_has_bit(96)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(97, this->globalwarservice(), output);
  }
  
  // optional uint32 SuperEquipExchange = 98;
  if (_has_bit(97)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(98, this->superequipexchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBOgreProperty Ogre = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->ogre(), target);
  }
  
  // optional uint32 FuncType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->functype(), target);
  }
  
  // optional string Talk = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->talk(), target);
  }
  
  // optional uint32 StageID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->stageid(), target);
  }
  
  // optional uint32 TalkServiceID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->talkserviceid(), target);
  }
  
  // optional uint32 SellServiceID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->sellserviceid(), target);
  }
  
  // optional uint32 MailService = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mailservice(), target);
  }
  
  // optional uint32 StorageService = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->storageservice(), target);
  }
  
  // optional uint32 UpgService = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->upgservice(), target);
  }
  
  // optional uint32 EqtBindService = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->eqtbindservice(), target);
  }
  
  // optional uint32 WelfareService = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->welfareservice(), target);
  }
  
  // optional string Describe = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->describe(), target);
  }
  
  // optional uint32 StudySkillID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->studyskillid(), target);
  }
  
  // optional uint32 TownX = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->townx(), target);
  }
  
  // optional uint32 TownY = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->towny(), target);
  }
  
  // optional uint32 StorageTaskNpc = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->storagetasknpc(), target);
  }
  
  // optional uint32 StorageTaskID = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->storagetaskid(), target);
  }
  
  // optional uint32 DownLevel = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->downlevel(), target);
  }
  
  // optional uint32 UpLevel = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->uplevel(), target);
  }
  
  // optional uint32 DiploidTable = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->diploidtable(), target);
  }
  
  // optional uint32 ResetPService = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->resetpservice(), target);
  }
  
  // optional uint32 FamilyService = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->familyservice(), target);
  }
  
  // optional uint32 CorpService = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->corpservice(), target);
  }
  
  // optional uint32 ChangeService = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->changeservice(), target);
  }
  
  // optional uint32 JudgeService = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->judgeservice(), target);
  }
  
  // optional uint32 ActivityService = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->activityservice(), target);
  }
  
  // optional uint32 ExchangeService = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->exchangeservice(), target);
  }
  
  // optional uint32 HonorService = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->honorservice(), target);
  }
  
  // optional uint32 Battle = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->battle(), target);
  }
  
  // optional uint32 LifeSkillService = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->lifeskillservice(), target);
  }
  
  // optional uint32 BidDay = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->bidday(), target);
  }
  
  // optional uint32 BidHour = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->bidhour(), target);
  }
  
  // optional uint32 BidMinute = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->bidminute(), target);
  }
  
  // optional uint32 CoprsBattle = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->coprsbattle(), target);
  }
  
  // optional uint32 MinBidPrice = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->minbidprice(), target);
  }
  
  // optional uint32 BattleCity = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->battlecity(), target);
  }
  
  // optional uint32 MWProJudgeService = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->mwprojudgeservice(), target);
  }
  
  // optional uint32 MWSkillJudgeService = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->mwskilljudgeservice(), target);
  }
  
  // optional uint32 EquipExchangeService = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->equipexchangeservice(), target);
  }
  
  // optional uint32 ExchangeTableID = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->exchangetableid(), target);
  }
  
  // optional uint32 CorpsBidDay = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->corpsbidday(), target);
  }
  
  // optional uint32 CorpsBidHour = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->corpsbidhour(), target);
  }
  
  // optional uint32 CorpsBidMinute = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->corpsbidminute(), target);
  }
  
  // optional uint32 MWClearPointService = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->mwclearpointservice(), target);
  }
  
  // optional uint32 MWSecondJudgeService = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->mwsecondjudgeservice(), target);
  }
  
  // optional uint32 UnionService = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->unionservice(), target);
  }
  
  // optional uint32 CountryService = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->countryservice(), target);
  }
  
  // optional uint32 FriendService = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(48, this->friendservice(), target);
  }
  
  // optional uint32 CountryType = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->countrytype(), target);
  }
  
  // optional uint32 GoldenYBService = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->goldenybservice(), target);
  }
  
  // optional uint32 ChairManTaskService = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->chairmantaskservice(), target);
  }
  
  // optional uint32 ChairManTaskID = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->chairmantaskid(), target);
  }
  
  // optional uint32 MarriageService = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(53, this->marriageservice(), target);
  }
  
  // optional uint32 MatrixService = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(54, this->matrixservice(), target);
  }
  
  // optional uint32 FamilyType = 55;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(55, this->familytype(), target);
  }
  
  // optional uint32 StoneBuff = 56;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(56, this->stonebuff(), target);
  }
  
  // optional uint32 Disappear = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->disappear(), target);
  }
  
  // optional uint32 RefreshService = 58;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(58, this->refreshservice(), target);
  }
  
  // optional uint32 PedalIndex = 59;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(59, this->pedalindex(), target);
  }
  
  // optional uint32 DirectService = 60;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(60, this->directservice(), target);
  }
  
  // optional uint32 ExtraService = 61;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(61, this->extraservice(), target);
  }
  
  // optional uint32 WarService = 62;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(62, this->warservice(), target);
  }
  
  // optional uint32 WarOpType = 63;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(63, this->waroptype(), target);
  }
  
  // optional uint32 WarValue = 64;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(64, this->warvalue(), target);
  }
  
  // optional uint32 WarCamp = 65;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(65, this->warcamp(), target);
  }
  
  // optional uint32 EquipLevelService = 66;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(66, this->equiplevelservice(), target);
  }
  
  // optional uint32 WarHonor = 67;
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(67, this->warhonor(), target);
  }
  
  // optional uint32 FangCunService = 68;
  if (_has_bit(67)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(68, this->fangcunservice(), target);
  }
  
  // optional uint32 ResistTran = 69;
  if (_has_bit(68)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(69, this->resisttran(), target);
  }
  
  // optional uint32 FBFunc = 70;
  if (_has_bit(69)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(70, this->fbfunc(), target);
  }
  
  // optional uint32 FBFunc_Parame1 = 71;
  if (_has_bit(70)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(71, this->fbfunc_parame1(), target);
  }
  
  // optional uint32 FBFunc_Parame2 = 72;
  if (_has_bit(71)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(72, this->fbfunc_parame2(), target);
  }
  
  // optional string FBFunc_Str = 73;
  if (_has_bit(72)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(73, this->fbfunc_str(), target);
  }
  
  // optional uint32 TaxService = 74;
  if (_has_bit(73)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(74, this->taxservice(), target);
  }
  
  // optional uint32 ChangeCampService = 75;
  if (_has_bit(74)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(75, this->changecampservice(), target);
  }
  
  // optional uint32 WeakProtectService = 76;
  if (_has_bit(75)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(76, this->weakprotectservice(), target);
  }
  
  // optional uint32 YaoQianShuRank = 77;
  if (_has_bit(76)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(77, this->yaoqianshurank(), target);
  }
  
  // optional uint32 Handin = 78;
  if (_has_bit(77)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(78, this->handin(), target);
  }
  
  // optional uint32 SpecialEvent = 79;
  if (_has_bit(78)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(79, this->specialevent(), target);
  }
  
  // optional uint32 YaoQianInfo = 80;
  if (_has_bit(79)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(80, this->yaoqianinfo(), target);
  }
  
  // optional uint32 TreasureBowl = 81;
  if (_has_bit(80)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(81, this->treasurebowl(), target);
  }
  
  // optional uint32 MWDecomposeService = 82;
  if (_has_bit(81)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(82, this->mwdecomposeservice(), target);
  }
  
  // optional uint32 MWImprintService = 83;
  if (_has_bit(82)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(83, this->mwimprintservice(), target);
  }
  
  // optional uint32 MWUpdateService = 84;
  if (_has_bit(83)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(84, this->mwupdateservice(), target);
  }
  
  // optional uint32 MWUpdateExService = 85;
  if (_has_bit(84)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(85, this->mwupdateexservice(), target);
  }
  
  // optional uint32 CorpsBidStartDay = 86;
  if (_has_bit(85)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(86, this->corpsbidstartday(), target);
  }
  
  // optional uint32 CorpsBidStartHour = 87;
  if (_has_bit(86)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(87, this->corpsbidstarthour(), target);
  }
  
  // optional uint32 CorpsBidStartMinute = 88;
  if (_has_bit(87)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(88, this->corpsbidstartminute(), target);
  }
  
  // optional uint32 LastOneService = 89;
  if (_has_bit(88)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(89, this->lastoneservice(), target);
  }
  
  // optional uint32 FamilyBidStartHour = 90;
  if (_has_bit(89)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(90, this->familybidstarthour(), target);
  }
  
  // optional uint32 FamilyBidStartMinute = 91;
  if (_has_bit(90)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(91, this->familybidstartminute(), target);
  }
  
  // optional uint32 MWQLComposeService = 92;
  if (_has_bit(91)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(92, this->mwqlcomposeservice(), target);
  }
  
  // optional uint32 RandomTeleService = 93;
  if (_has_bit(92)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(93, this->randomteleservice(), target);
  }
  
  // optional uint32 IntroduceMapID = 94;
  if (_has_bit(93)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(94, this->introducemapid(), target);
  }
  
  // optional uint32 ShiTuService = 95;
  if (_has_bit(94)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(95, this->shituservice(), target);
  }
  
  // optional uint32 SwornService = 96;
  if (_has_bit(95)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(96, this->swornservice(), target);
  }
  
  // optional uint32 GlobalWarService = 97;
  if (_has_bit(96)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(97, this->globalwarservice(), target);
  }
  
  // optional uint32 SuperEquipExchange = 98;
  if (_has_bit(97)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(98, this->superequipexchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBNpc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBOgreProperty Ogre = 1;
    if (has_ogre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->ogre());
    }
    
    // optional uint32 FuncType = 2;
    if (has_functype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functype());
    }
    
    // optional string Talk = 3;
    if (has_talk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->talk());
    }
    
    // optional uint32 StageID = 4;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stageid());
    }
    
    // optional uint32 TalkServiceID = 5;
    if (has_talkserviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talkserviceid());
    }
    
    // optional uint32 SellServiceID = 6;
    if (has_sellserviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sellserviceid());
    }
    
    // optional uint32 MailService = 7;
    if (has_mailservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mailservice());
    }
    
    // optional uint32 StorageService = 8;
    if (has_storageservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storageservice());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 UpgService = 9;
    if (has_upgservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upgservice());
    }
    
    // optional uint32 EqtBindService = 10;
    if (has_eqtbindservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eqtbindservice());
    }
    
    // optional uint32 WelfareService = 11;
    if (has_welfareservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->welfareservice());
    }
    
    // optional string Describe = 12;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->describe());
    }
    
    // optional uint32 StudySkillID = 13;
    if (has_studyskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->studyskillid());
    }
    
    // optional uint32 TownX = 14;
    if (has_townx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->townx());
    }
    
    // optional uint32 TownY = 15;
    if (has_towny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->towny());
    }
    
    // optional uint32 StorageTaskNpc = 16;
    if (has_storagetasknpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storagetasknpc());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 StorageTaskID = 17;
    if (has_storagetaskid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storagetaskid());
    }
    
    // optional uint32 DownLevel = 18;
    if (has_downlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->downlevel());
    }
    
    // optional uint32 UpLevel = 19;
    if (has_uplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->uplevel());
    }
    
    // optional uint32 DiploidTable = 20;
    if (has_diploidtable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diploidtable());
    }
    
    // optional uint32 ResetPService = 21;
    if (has_resetpservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resetpservice());
    }
    
    // optional uint32 FamilyService = 22;
    if (has_familyservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyservice());
    }
    
    // optional uint32 CorpService = 23;
    if (has_corpservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpservice());
    }
    
    // optional uint32 ChangeService = 24;
    if (has_changeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changeservice());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 JudgeService = 25;
    if (has_judgeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgeservice());
    }
    
    // optional uint32 ActivityService = 26;
    if (has_activityservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityservice());
    }
    
    // optional uint32 ExchangeService = 27;
    if (has_exchangeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangeservice());
    }
    
    // optional uint32 HonorService = 28;
    if (has_honorservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honorservice());
    }
    
    // optional uint32 Battle = 29;
    if (has_battle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battle());
    }
    
    // optional uint32 LifeSkillService = 30;
    if (has_lifeskillservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillservice());
    }
    
    // optional uint32 BidDay = 31;
    if (has_bidday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidday());
    }
    
    // optional uint32 BidHour = 32;
    if (has_bidhour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidhour());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 BidMinute = 33;
    if (has_bidminute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidminute());
    }
    
    // optional uint32 CoprsBattle = 34;
    if (has_coprsbattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->coprsbattle());
    }
    
    // optional uint32 MinBidPrice = 35;
    if (has_minbidprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minbidprice());
    }
    
    // optional uint32 BattleCity = 36;
    if (has_battlecity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->battlecity());
    }
    
    // optional uint32 MWProJudgeService = 37;
    if (has_mwprojudgeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwprojudgeservice());
    }
    
    // optional uint32 MWSkillJudgeService = 38;
    if (has_mwskilljudgeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwskilljudgeservice());
    }
    
    // optional uint32 EquipExchangeService = 39;
    if (has_equipexchangeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equipexchangeservice());
    }
    
    // optional uint32 ExchangeTableID = 40;
    if (has_exchangetableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangetableid());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 CorpsBidDay = 41;
    if (has_corpsbidday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidday());
    }
    
    // optional uint32 CorpsBidHour = 42;
    if (has_corpsbidhour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidhour());
    }
    
    // optional uint32 CorpsBidMinute = 43;
    if (has_corpsbidminute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidminute());
    }
    
    // optional uint32 MWClearPointService = 44;
    if (has_mwclearpointservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwclearpointservice());
    }
    
    // optional uint32 MWSecondJudgeService = 45;
    if (has_mwsecondjudgeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwsecondjudgeservice());
    }
    
    // optional uint32 UnionService = 46;
    if (has_unionservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionservice());
    }
    
    // optional uint32 CountryService = 47;
    if (has_countryservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryservice());
    }
    
    // optional uint32 FriendService = 48;
    if (has_friendservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->friendservice());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 CountryType = 49;
    if (has_countrytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countrytype());
    }
    
    // optional uint32 GoldenYBService = 50;
    if (has_goldenybservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->goldenybservice());
    }
    
    // optional uint32 ChairManTaskService = 51;
    if (has_chairmantaskservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chairmantaskservice());
    }
    
    // optional uint32 ChairManTaskID = 52;
    if (has_chairmantaskid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chairmantaskid());
    }
    
    // optional uint32 MarriageService = 53;
    if (has_marriageservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriageservice());
    }
    
    // optional uint32 MatrixService = 54;
    if (has_matrixservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->matrixservice());
    }
    
    // optional uint32 FamilyType = 55;
    if (has_familytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familytype());
    }
    
    // optional uint32 StoneBuff = 56;
    if (has_stonebuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stonebuff());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 Disappear = 57;
    if (has_disappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->disappear());
    }
    
    // optional uint32 RefreshService = 58;
    if (has_refreshservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refreshservice());
    }
    
    // optional uint32 PedalIndex = 59;
    if (has_pedalindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pedalindex());
    }
    
    // optional uint32 DirectService = 60;
    if (has_directservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->directservice());
    }
    
    // optional uint32 ExtraService = 61;
    if (has_extraservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extraservice());
    }
    
    // optional uint32 WarService = 62;
    if (has_warservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warservice());
    }
    
    // optional uint32 WarOpType = 63;
    if (has_waroptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->waroptype());
    }
    
    // optional uint32 WarValue = 64;
    if (has_warvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warvalue());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 WarCamp = 65;
    if (has_warcamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warcamp());
    }
    
    // optional uint32 EquipLevelService = 66;
    if (has_equiplevelservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equiplevelservice());
    }
    
    // optional uint32 WarHonor = 67;
    if (has_warhonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warhonor());
    }
    
    // optional uint32 FangCunService = 68;
    if (has_fangcunservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fangcunservice());
    }
    
    // optional uint32 ResistTran = 69;
    if (has_resisttran()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resisttran());
    }
    
    // optional uint32 FBFunc = 70;
    if (has_fbfunc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fbfunc());
    }
    
    // optional uint32 FBFunc_Parame1 = 71;
    if (has_fbfunc_parame1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fbfunc_parame1());
    }
    
    // optional uint32 FBFunc_Parame2 = 72;
    if (has_fbfunc_parame2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fbfunc_parame2());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional string FBFunc_Str = 73;
    if (has_fbfunc_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->fbfunc_str());
    }
    
    // optional uint32 TaxService = 74;
    if (has_taxservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taxservice());
    }
    
    // optional uint32 ChangeCampService = 75;
    if (has_changecampservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changecampservice());
    }
    
    // optional uint32 WeakProtectService = 76;
    if (has_weakprotectservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weakprotectservice());
    }
    
    // optional uint32 YaoQianShuRank = 77;
    if (has_yaoqianshurank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yaoqianshurank());
    }
    
    // optional uint32 Handin = 78;
    if (has_handin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handin());
    }
    
    // optional uint32 SpecialEvent = 79;
    if (has_specialevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->specialevent());
    }
    
    // optional uint32 YaoQianInfo = 80;
    if (has_yaoqianinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yaoqianinfo());
    }
    
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional uint32 TreasureBowl = 81;
    if (has_treasurebowl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->treasurebowl());
    }
    
    // optional uint32 MWDecomposeService = 82;
    if (has_mwdecomposeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwdecomposeservice());
    }
    
    // optional uint32 MWImprintService = 83;
    if (has_mwimprintservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwimprintservice());
    }
    
    // optional uint32 MWUpdateService = 84;
    if (has_mwupdateservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwupdateservice());
    }
    
    // optional uint32 MWUpdateExService = 85;
    if (has_mwupdateexservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwupdateexservice());
    }
    
    // optional uint32 CorpsBidStartDay = 86;
    if (has_corpsbidstartday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidstartday());
    }
    
    // optional uint32 CorpsBidStartHour = 87;
    if (has_corpsbidstarthour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidstarthour());
    }
    
    // optional uint32 CorpsBidStartMinute = 88;
    if (has_corpsbidstartminute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbidstartminute());
    }
    
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional uint32 LastOneService = 89;
    if (has_lastoneservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastoneservice());
    }
    
    // optional uint32 FamilyBidStartHour = 90;
    if (has_familybidstarthour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familybidstarthour());
    }
    
    // optional uint32 FamilyBidStartMinute = 91;
    if (has_familybidstartminute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familybidstartminute());
    }
    
    // optional uint32 MWQLComposeService = 92;
    if (has_mwqlcomposeservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwqlcomposeservice());
    }
    
    // optional uint32 RandomTeleService = 93;
    if (has_randomteleservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->randomteleservice());
    }
    
    // optional uint32 IntroduceMapID = 94;
    if (has_introducemapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->introducemapid());
    }
    
    // optional uint32 ShiTuService = 95;
    if (has_shituservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shituservice());
    }
    
    // optional uint32 SwornService = 96;
    if (has_swornservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->swornservice());
    }
    
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional uint32 GlobalWarService = 97;
    if (has_globalwarservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->globalwarservice());
    }
    
    // optional uint32 SuperEquipExchange = 98;
    if (has_superequipexchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->superequipexchange());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBNpc::MergeFrom(const PBNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_ogre()->::PBOgreProperty::MergeFrom(from.ogre());
    }
    if (from._has_bit(1)) {
      set_functype(from.functype());
    }
    if (from._has_bit(2)) {
      set_talk(from.talk());
    }
    if (from._has_bit(3)) {
      set_stageid(from.stageid());
    }
    if (from._has_bit(4)) {
      set_talkserviceid(from.talkserviceid());
    }
    if (from._has_bit(5)) {
      set_sellserviceid(from.sellserviceid());
    }
    if (from._has_bit(6)) {
      set_mailservice(from.mailservice());
    }
    if (from._has_bit(7)) {
      set_storageservice(from.storageservice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_upgservice(from.upgservice());
    }
    if (from._has_bit(9)) {
      set_eqtbindservice(from.eqtbindservice());
    }
    if (from._has_bit(10)) {
      set_welfareservice(from.welfareservice());
    }
    if (from._has_bit(11)) {
      set_describe(from.describe());
    }
    if (from._has_bit(12)) {
      set_studyskillid(from.studyskillid());
    }
    if (from._has_bit(13)) {
      set_townx(from.townx());
    }
    if (from._has_bit(14)) {
      set_towny(from.towny());
    }
    if (from._has_bit(15)) {
      set_storagetasknpc(from.storagetasknpc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_storagetaskid(from.storagetaskid());
    }
    if (from._has_bit(17)) {
      set_downlevel(from.downlevel());
    }
    if (from._has_bit(18)) {
      set_uplevel(from.uplevel());
    }
    if (from._has_bit(19)) {
      set_diploidtable(from.diploidtable());
    }
    if (from._has_bit(20)) {
      set_resetpservice(from.resetpservice());
    }
    if (from._has_bit(21)) {
      set_familyservice(from.familyservice());
    }
    if (from._has_bit(22)) {
      set_corpservice(from.corpservice());
    }
    if (from._has_bit(23)) {
      set_changeservice(from.changeservice());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_judgeservice(from.judgeservice());
    }
    if (from._has_bit(25)) {
      set_activityservice(from.activityservice());
    }
    if (from._has_bit(26)) {
      set_exchangeservice(from.exchangeservice());
    }
    if (from._has_bit(27)) {
      set_honorservice(from.honorservice());
    }
    if (from._has_bit(28)) {
      set_battle(from.battle());
    }
    if (from._has_bit(29)) {
      set_lifeskillservice(from.lifeskillservice());
    }
    if (from._has_bit(30)) {
      set_bidday(from.bidday());
    }
    if (from._has_bit(31)) {
      set_bidhour(from.bidhour());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_bidminute(from.bidminute());
    }
    if (from._has_bit(33)) {
      set_coprsbattle(from.coprsbattle());
    }
    if (from._has_bit(34)) {
      set_minbidprice(from.minbidprice());
    }
    if (from._has_bit(35)) {
      set_battlecity(from.battlecity());
    }
    if (from._has_bit(36)) {
      set_mwprojudgeservice(from.mwprojudgeservice());
    }
    if (from._has_bit(37)) {
      set_mwskilljudgeservice(from.mwskilljudgeservice());
    }
    if (from._has_bit(38)) {
      set_equipexchangeservice(from.equipexchangeservice());
    }
    if (from._has_bit(39)) {
      set_exchangetableid(from.exchangetableid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_corpsbidday(from.corpsbidday());
    }
    if (from._has_bit(41)) {
      set_corpsbidhour(from.corpsbidhour());
    }
    if (from._has_bit(42)) {
      set_corpsbidminute(from.corpsbidminute());
    }
    if (from._has_bit(43)) {
      set_mwclearpointservice(from.mwclearpointservice());
    }
    if (from._has_bit(44)) {
      set_mwsecondjudgeservice(from.mwsecondjudgeservice());
    }
    if (from._has_bit(45)) {
      set_unionservice(from.unionservice());
    }
    if (from._has_bit(46)) {
      set_countryservice(from.countryservice());
    }
    if (from._has_bit(47)) {
      set_friendservice(from.friendservice());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_countrytype(from.countrytype());
    }
    if (from._has_bit(49)) {
      set_goldenybservice(from.goldenybservice());
    }
    if (from._has_bit(50)) {
      set_chairmantaskservice(from.chairmantaskservice());
    }
    if (from._has_bit(51)) {
      set_chairmantaskid(from.chairmantaskid());
    }
    if (from._has_bit(52)) {
      set_marriageservice(from.marriageservice());
    }
    if (from._has_bit(53)) {
      set_matrixservice(from.matrixservice());
    }
    if (from._has_bit(54)) {
      set_familytype(from.familytype());
    }
    if (from._has_bit(55)) {
      set_stonebuff(from.stonebuff());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_disappear(from.disappear());
    }
    if (from._has_bit(57)) {
      set_refreshservice(from.refreshservice());
    }
    if (from._has_bit(58)) {
      set_pedalindex(from.pedalindex());
    }
    if (from._has_bit(59)) {
      set_directservice(from.directservice());
    }
    if (from._has_bit(60)) {
      set_extraservice(from.extraservice());
    }
    if (from._has_bit(61)) {
      set_warservice(from.warservice());
    }
    if (from._has_bit(62)) {
      set_waroptype(from.waroptype());
    }
    if (from._has_bit(63)) {
      set_warvalue(from.warvalue());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set_warcamp(from.warcamp());
    }
    if (from._has_bit(65)) {
      set_equiplevelservice(from.equiplevelservice());
    }
    if (from._has_bit(66)) {
      set_warhonor(from.warhonor());
    }
    if (from._has_bit(67)) {
      set_fangcunservice(from.fangcunservice());
    }
    if (from._has_bit(68)) {
      set_resisttran(from.resisttran());
    }
    if (from._has_bit(69)) {
      set_fbfunc(from.fbfunc());
    }
    if (from._has_bit(70)) {
      set_fbfunc_parame1(from.fbfunc_parame1());
    }
    if (from._has_bit(71)) {
      set_fbfunc_parame2(from.fbfunc_parame2());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from._has_bit(72)) {
      set_fbfunc_str(from.fbfunc_str());
    }
    if (from._has_bit(73)) {
      set_taxservice(from.taxservice());
    }
    if (from._has_bit(74)) {
      set_changecampservice(from.changecampservice());
    }
    if (from._has_bit(75)) {
      set_weakprotectservice(from.weakprotectservice());
    }
    if (from._has_bit(76)) {
      set_yaoqianshurank(from.yaoqianshurank());
    }
    if (from._has_bit(77)) {
      set_handin(from.handin());
    }
    if (from._has_bit(78)) {
      set_specialevent(from.specialevent());
    }
    if (from._has_bit(79)) {
      set_yaoqianinfo(from.yaoqianinfo());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from._has_bit(80)) {
      set_treasurebowl(from.treasurebowl());
    }
    if (from._has_bit(81)) {
      set_mwdecomposeservice(from.mwdecomposeservice());
    }
    if (from._has_bit(82)) {
      set_mwimprintservice(from.mwimprintservice());
    }
    if (from._has_bit(83)) {
      set_mwupdateservice(from.mwupdateservice());
    }
    if (from._has_bit(84)) {
      set_mwupdateexservice(from.mwupdateexservice());
    }
    if (from._has_bit(85)) {
      set_corpsbidstartday(from.corpsbidstartday());
    }
    if (from._has_bit(86)) {
      set_corpsbidstarthour(from.corpsbidstarthour());
    }
    if (from._has_bit(87)) {
      set_corpsbidstartminute(from.corpsbidstartminute());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from._has_bit(88)) {
      set_lastoneservice(from.lastoneservice());
    }
    if (from._has_bit(89)) {
      set_familybidstarthour(from.familybidstarthour());
    }
    if (from._has_bit(90)) {
      set_familybidstartminute(from.familybidstartminute());
    }
    if (from._has_bit(91)) {
      set_mwqlcomposeservice(from.mwqlcomposeservice());
    }
    if (from._has_bit(92)) {
      set_randomteleservice(from.randomteleservice());
    }
    if (from._has_bit(93)) {
      set_introducemapid(from.introducemapid());
    }
    if (from._has_bit(94)) {
      set_shituservice(from.shituservice());
    }
    if (from._has_bit(95)) {
      set_swornservice(from.swornservice());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from._has_bit(96)) {
      set_globalwarservice(from.globalwarservice());
    }
    if (from._has_bit(97)) {
      set_superequipexchange(from.superequipexchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNpc::CopyFrom(const PBNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNpc::Swap(PBNpc* other) {
  if (other != this) {
    std::swap(ogre_, other->ogre_);
    std::swap(functype_, other->functype_);
    std::swap(talk_, other->talk_);
    std::swap(stageid_, other->stageid_);
    std::swap(talkserviceid_, other->talkserviceid_);
    std::swap(sellserviceid_, other->sellserviceid_);
    std::swap(mailservice_, other->mailservice_);
    std::swap(storageservice_, other->storageservice_);
    std::swap(upgservice_, other->upgservice_);
    std::swap(eqtbindservice_, other->eqtbindservice_);
    std::swap(welfareservice_, other->welfareservice_);
    std::swap(describe_, other->describe_);
    std::swap(studyskillid_, other->studyskillid_);
    std::swap(townx_, other->townx_);
    std::swap(towny_, other->towny_);
    std::swap(storagetasknpc_, other->storagetasknpc_);
    std::swap(storagetaskid_, other->storagetaskid_);
    std::swap(downlevel_, other->downlevel_);
    std::swap(uplevel_, other->uplevel_);
    std::swap(diploidtable_, other->diploidtable_);
    std::swap(resetpservice_, other->resetpservice_);
    std::swap(familyservice_, other->familyservice_);
    std::swap(corpservice_, other->corpservice_);
    std::swap(changeservice_, other->changeservice_);
    std::swap(judgeservice_, other->judgeservice_);
    std::swap(activityservice_, other->activityservice_);
    std::swap(exchangeservice_, other->exchangeservice_);
    std::swap(honorservice_, other->honorservice_);
    std::swap(battle_, other->battle_);
    std::swap(lifeskillservice_, other->lifeskillservice_);
    std::swap(bidday_, other->bidday_);
    std::swap(bidhour_, other->bidhour_);
    std::swap(bidminute_, other->bidminute_);
    std::swap(coprsbattle_, other->coprsbattle_);
    std::swap(minbidprice_, other->minbidprice_);
    std::swap(battlecity_, other->battlecity_);
    std::swap(mwprojudgeservice_, other->mwprojudgeservice_);
    std::swap(mwskilljudgeservice_, other->mwskilljudgeservice_);
    std::swap(equipexchangeservice_, other->equipexchangeservice_);
    std::swap(exchangetableid_, other->exchangetableid_);
    std::swap(corpsbidday_, other->corpsbidday_);
    std::swap(corpsbidhour_, other->corpsbidhour_);
    std::swap(corpsbidminute_, other->corpsbidminute_);
    std::swap(mwclearpointservice_, other->mwclearpointservice_);
    std::swap(mwsecondjudgeservice_, other->mwsecondjudgeservice_);
    std::swap(unionservice_, other->unionservice_);
    std::swap(countryservice_, other->countryservice_);
    std::swap(friendservice_, other->friendservice_);
    std::swap(countrytype_, other->countrytype_);
    std::swap(goldenybservice_, other->goldenybservice_);
    std::swap(chairmantaskservice_, other->chairmantaskservice_);
    std::swap(chairmantaskid_, other->chairmantaskid_);
    std::swap(marriageservice_, other->marriageservice_);
    std::swap(matrixservice_, other->matrixservice_);
    std::swap(familytype_, other->familytype_);
    std::swap(stonebuff_, other->stonebuff_);
    std::swap(disappear_, other->disappear_);
    std::swap(refreshservice_, other->refreshservice_);
    std::swap(pedalindex_, other->pedalindex_);
    std::swap(directservice_, other->directservice_);
    std::swap(extraservice_, other->extraservice_);
    std::swap(warservice_, other->warservice_);
    std::swap(waroptype_, other->waroptype_);
    std::swap(warvalue_, other->warvalue_);
    std::swap(warcamp_, other->warcamp_);
    std::swap(equiplevelservice_, other->equiplevelservice_);
    std::swap(warhonor_, other->warhonor_);
    std::swap(fangcunservice_, other->fangcunservice_);
    std::swap(resisttran_, other->resisttran_);
    std::swap(fbfunc_, other->fbfunc_);
    std::swap(fbfunc_parame1_, other->fbfunc_parame1_);
    std::swap(fbfunc_parame2_, other->fbfunc_parame2_);
    std::swap(fbfunc_str_, other->fbfunc_str_);
    std::swap(taxservice_, other->taxservice_);
    std::swap(changecampservice_, other->changecampservice_);
    std::swap(weakprotectservice_, other->weakprotectservice_);
    std::swap(yaoqianshurank_, other->yaoqianshurank_);
    std::swap(handin_, other->handin_);
    std::swap(specialevent_, other->specialevent_);
    std::swap(yaoqianinfo_, other->yaoqianinfo_);
    std::swap(treasurebowl_, other->treasurebowl_);
    std::swap(mwdecomposeservice_, other->mwdecomposeservice_);
    std::swap(mwimprintservice_, other->mwimprintservice_);
    std::swap(mwupdateservice_, other->mwupdateservice_);
    std::swap(mwupdateexservice_, other->mwupdateexservice_);
    std::swap(corpsbidstartday_, other->corpsbidstartday_);
    std::swap(corpsbidstarthour_, other->corpsbidstarthour_);
    std::swap(corpsbidstartminute_, other->corpsbidstartminute_);
    std::swap(lastoneservice_, other->lastoneservice_);
    std::swap(familybidstarthour_, other->familybidstarthour_);
    std::swap(familybidstartminute_, other->familybidstartminute_);
    std::swap(mwqlcomposeservice_, other->mwqlcomposeservice_);
    std::swap(randomteleservice_, other->randomteleservice_);
    std::swap(introducemapid_, other->introducemapid_);
    std::swap(shituservice_, other->shituservice_);
    std::swap(swornservice_, other->swornservice_);
    std::swap(globalwarservice_, other->globalwarservice_);
    std::swap(superequipexchange_, other->superequipexchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBNpc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBNpc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBNpc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBNpc_reflection_;
}

// ===================================================================

const ::std::string PBSellItem::_default_pagename_;
#ifndef _MSC_VER
const int PBSellItem::kPageNameFieldNumber;
const int PBSellItem::kItemIDFieldNumber;
const int PBSellItem::kItemGoldPriceFieldNumber;
const int PBSellItem::kItemNumFieldNumber;
const int PBSellItem::kItemRefreshDayFieldNumber;
#endif  // !_MSC_VER

PBSellItem::PBSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSellItem::InitAsDefaultInstance() {}

PBSellItem::PBSellItem(const PBSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSellItem::SharedCtor() {
  _cached_size_ = 0;
  pagename_ = const_cast< ::std::string*>(&_default_pagename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSellItem::~PBSellItem() {
  SharedDtor();
}

void PBSellItem::SharedDtor() {
  if (pagename_ != &_default_pagename_) {
    delete pagename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSellItem_descriptor_;
}

const PBSellItem& PBSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSellItem* PBSellItem::default_instance_ = NULL;

PBSellItem* PBSellItem::New() const {
  return new PBSellItem;
}

void PBSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pagename_ != &_default_pagename_) {
        pagename_->clear();
      }
    }
  }
  itemid_.Clear();
  itemgoldprice_.Clear();
  itemnum_.Clear();
  itemrefreshday_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string PageName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_pagename()));
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }
      
      // repeated uint32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemid(value);
        if (input->ExpectTag(16)) goto parse_ItemID;
        if (input->ExpectTag(24)) goto parse_ItemGoldPrice;
        break;
      }
      
      // repeated uint32 ItemGoldPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemGoldPrice:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemgoldprice(value);
        if (input->ExpectTag(24)) goto parse_ItemGoldPrice;
        if (input->ExpectTag(32)) goto parse_ItemNum;
        break;
      }
      
      // repeated uint32 ItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemnum(value);
        if (input->ExpectTag(32)) goto parse_ItemNum;
        if (input->ExpectTag(40)) goto parse_ItemRefreshDay;
        break;
      }
      
      // repeated uint32 ItemRefreshDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemRefreshDay:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemrefreshday(value);
        if (input->ExpectTag(40)) goto parse_ItemRefreshDay;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSellItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string PageName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->pagename(), output);
  }
  
  // repeated uint32 ItemID = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemid(i), output);
  }
  
  // repeated uint32 ItemGoldPrice = 3;
  for (int i = 0; i < this->itemgoldprice_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemgoldprice(i), output);
  }
  
  // repeated uint32 ItemNum = 4;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemnum(i), output);
  }
  
  // repeated uint32 ItemRefreshDay = 5;
  for (int i = 0; i < this->itemrefreshday_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemrefreshday(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string PageName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->pagename(), target);
  }
  
  // repeated uint32 ItemID = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemid(i), target);
  }
  
  // repeated uint32 ItemGoldPrice = 3;
  for (int i = 0; i < this->itemgoldprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemgoldprice(i), target);
  }
  
  // repeated uint32 ItemNum = 4;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemnum(i), target);
  }
  
  // repeated uint32 ItemRefreshDay = 5;
  for (int i = 0; i < this->itemrefreshday_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemrefreshday(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSellItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PageName = 1;
    if (has_pagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->pagename());
    }
    
  }
  // repeated uint32 ItemID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }
  
  // repeated uint32 ItemGoldPrice = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemgoldprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemgoldprice(i));
    }
    total_size += 1 * this->itemgoldprice_size() + data_size;
  }
  
  // repeated uint32 ItemNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }
  
  // repeated uint32 ItemRefreshDay = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemrefreshday_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemrefreshday(i));
    }
    total_size += 1 * this->itemrefreshday_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSellItem::MergeFrom(const PBSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemgoldprice_.MergeFrom(from.itemgoldprice_);
  itemnum_.MergeFrom(from.itemnum_);
  itemrefreshday_.MergeFrom(from.itemrefreshday_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pagename(from.pagename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSellItem::CopyFrom(const PBSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSellItem::Swap(PBSellItem* other) {
  if (other != this) {
    std::swap(pagename_, other->pagename_);
    itemid_.Swap(&other->itemid_);
    itemgoldprice_.Swap(&other->itemgoldprice_);
    itemnum_.Swap(&other->itemnum_);
    itemrefreshday_.Swap(&other->itemrefreshday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSellItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSellItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSellItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSellItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSellTable::kTempIDFieldNumber;
const int PBSellTable::kItemFieldNumber;
const int PBSellTable::kSellTableTypeFieldNumber;
const int PBSellTable::kWarCityMapIDFieldNumber;
#endif  // !_MSC_VER

PBSellTable::PBSellTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSellTable::InitAsDefaultInstance() {}

PBSellTable::PBSellTable(const PBSellTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSellTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  selltabletype_ = 0u;
  warcitymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSellTable::~PBSellTable() {
  SharedDtor();
}

void PBSellTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSellTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSellTable_descriptor_;
}

const PBSellTable& PBSellTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSellTable* PBSellTable::default_instance_ = NULL;

PBSellTable* PBSellTable::New() const {
  return new PBSellTable;
}

void PBSellTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    selltabletype_ = 0u;
    warcitymapid_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSellTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Item;
        break;
      }
      
      // repeated .PBSellItem Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Item:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_item()));
        if (input->ExpectTag(18)) goto parse_Item;
        if (input->ExpectTag(24)) goto parse_SellTableType;
        break;
      }
      
      // optional uint32 SellTableType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SellTableType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &selltabletype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WarCityMapID;
        break;
      }
      
      // optional uint32 WarCityMapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarCityMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warcitymapid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSellTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSellTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBSellItem Item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->item(i), output);
  }
  
  // optional uint32 SellTableType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->selltabletype(), output);
  }
  
  // optional uint32 WarCityMapID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->warcitymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSellTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBSellItem Item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->item(i), target);
  }
  
  // optional uint32 SellTableType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->selltabletype(), target);
  }
  
  // optional uint32 WarCityMapID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->warcitymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSellTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 SellTableType = 3;
    if (has_selltabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->selltabletype());
    }
    
    // optional uint32 WarCityMapID = 4;
    if (has_warcitymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warcitymapid());
    }
    
  }
  // repeated .PBSellItem Item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSellTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSellTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSellTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSellTable::MergeFrom(const PBSellTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_selltabletype(from.selltabletype());
    }
    if (from._has_bit(3)) {
      set_warcitymapid(from.warcitymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSellTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSellTable::CopyFrom(const PBSellTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSellTable::Swap(PBSellTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    item_.Swap(&other->item_);
    std::swap(selltabletype_, other->selltabletype_);
    std::swap(warcitymapid_, other->warcitymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSellTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSellTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSellTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSellTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTotalDrop::kTempIDFieldNumber;
const int PBTotalDrop::kDropTableIDFieldNumber;
const int PBTotalDrop::kDropCountFieldNumber;
#endif  // !_MSC_VER

PBTotalDrop::PBTotalDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTotalDrop::InitAsDefaultInstance() {}

PBTotalDrop::PBTotalDrop(const PBTotalDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTotalDrop::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTotalDrop::~PBTotalDrop() {
  SharedDtor();
}

void PBTotalDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTotalDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTotalDrop_descriptor_;
}

const PBTotalDrop& PBTotalDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTotalDrop* PBTotalDrop::default_instance_ = NULL;

PBTotalDrop* PBTotalDrop::New() const {
  return new PBTotalDrop;
}

void PBTotalDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  droptableid_.Clear();
  dropcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTotalDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DropTableID;
        break;
      }
      
      // repeated uint32 DropTableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropTableID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_droptableid(value);
        if (input->ExpectTag(16)) goto parse_DropTableID;
        if (input->ExpectTag(24)) goto parse_DropCount;
        break;
      }
      
      // repeated uint32 DropCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropCount:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_dropcount(value);
        if (input->ExpectTag(24)) goto parse_DropCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTotalDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTotalDrop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 DropTableID = 2;
  for (int i = 0; i < this->droptableid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->droptableid(i), output);
  }
  
  // repeated uint32 DropCount = 3;
  for (int i = 0; i < this->dropcount_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->dropcount(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTotalDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 DropTableID = 2;
  for (int i = 0; i < this->droptableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->droptableid(i), target);
  }
  
  // repeated uint32 DropCount = 3;
  for (int i = 0; i < this->dropcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->dropcount(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTotalDrop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 DropTableID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->droptableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->droptableid(i));
    }
    total_size += 1 * this->droptableid_size() + data_size;
  }
  
  // repeated uint32 DropCount = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dropcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->dropcount(i));
    }
    total_size += 1 * this->dropcount_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTotalDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTotalDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTotalDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTotalDrop::MergeFrom(const PBTotalDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  droptableid_.MergeFrom(from.droptableid_);
  dropcount_.MergeFrom(from.dropcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTotalDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTotalDrop::CopyFrom(const PBTotalDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTotalDrop::Swap(PBTotalDrop* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    droptableid_.Swap(&other->droptableid_);
    dropcount_.Swap(&other->dropcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTotalDrop::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTotalDrop::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTotalDrop::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTotalDrop_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDropItem::kDropItemIDFieldNumber;
const int PBDropItem::kDropProbabilityFieldNumber;
const int PBDropItem::kLevelProbablityFieldNumber;
const int PBDropItem::kNotifyFieldNumber;
const int PBDropItem::kSpecialFieldNumber;
const int PBDropItem::kShowFieldNumber;
#endif  // !_MSC_VER

PBDropItem::PBDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropItem::InitAsDefaultInstance() {}

PBDropItem::PBDropItem(const PBDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropItem::SharedCtor() {
  _cached_size_ = 0;
  dropitemid_ = 0u;
  dropprobability_ = 0u;
  levelprobablity_ = 0u;
  notify_ = 0u;
  special_ = 0u;
  show_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropItem::~PBDropItem() {
  SharedDtor();
}

void PBDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropItem_descriptor_;
}

const PBDropItem& PBDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDropItem* PBDropItem::default_instance_ = NULL;

PBDropItem* PBDropItem::New() const {
  return new PBDropItem;
}

void PBDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropitemid_ = 0u;
    dropprobability_ = 0u;
    levelprobablity_ = 0u;
    notify_ = 0u;
    special_ = 0u;
    show_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DropItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropitemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DropProbability;
        break;
      }
      
      // optional uint32 DropProbability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropProbability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropprobability_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelProbablity;
        break;
      }
      
      // optional uint32 LevelProbablity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelProbablity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelprobablity_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Notify;
        break;
      }
      
      // optional uint32 Notify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Notify:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &notify_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Special;
        break;
      }
      
      // optional uint32 Special = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Special:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &special_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Show;
        break;
      }
      
      // optional uint32 Show = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Show:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &show_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDropItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DropItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->dropitemid(), output);
  }
  
  // optional uint32 DropProbability = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->dropprobability(), output);
  }
  
  // optional uint32 LevelProbablity = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levelprobablity(), output);
  }
  
  // optional uint32 Notify = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->notify(), output);
  }
  
  // optional uint32 Special = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->special(), output);
  }
  
  // optional uint32 Show = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->show(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DropItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->dropitemid(), target);
  }
  
  // optional uint32 DropProbability = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->dropprobability(), target);
  }
  
  // optional uint32 LevelProbablity = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levelprobablity(), target);
  }
  
  // optional uint32 Notify = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->notify(), target);
  }
  
  // optional uint32 Special = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->special(), target);
  }
  
  // optional uint32 Show = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->show(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DropItemID = 1;
    if (has_dropitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropitemid());
    }
    
    // optional uint32 DropProbability = 2;
    if (has_dropprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropprobability());
    }
    
    // optional uint32 LevelProbablity = 3;
    if (has_levelprobablity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelprobablity());
    }
    
    // optional uint32 Notify = 4;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->notify());
    }
    
    // optional uint32 Special = 5;
    if (has_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->special());
    }
    
    // optional uint32 Show = 6;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->show());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropItem::MergeFrom(const PBDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dropitemid(from.dropitemid());
    }
    if (from._has_bit(1)) {
      set_dropprobability(from.dropprobability());
    }
    if (from._has_bit(2)) {
      set_levelprobablity(from.levelprobablity());
    }
    if (from._has_bit(3)) {
      set_notify(from.notify());
    }
    if (from._has_bit(4)) {
      set_special(from.special());
    }
    if (from._has_bit(5)) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropItem::CopyFrom(const PBDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropItem::Swap(PBDropItem* other) {
  if (other != this) {
    std::swap(dropitemid_, other->dropitemid_);
    std::swap(dropprobability_, other->dropprobability_);
    std::swap(levelprobablity_, other->levelprobablity_);
    std::swap(notify_, other->notify_);
    std::swap(special_, other->special_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDropItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDropItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDropItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDropItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDropTable::kTempIDFieldNumber;
const int PBDropTable::kDropTurnFieldNumber;
const int PBDropTable::kDropNumberRateFieldNumber;
const int PBDropTable::kDropItemFieldNumber;
#endif  // !_MSC_VER

PBDropTable::PBDropTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropTable::InitAsDefaultInstance() {}

PBDropTable::PBDropTable(const PBDropTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  dropturn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropTable::~PBDropTable() {
  SharedDtor();
}

void PBDropTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDropTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropTable_descriptor_;
}

const PBDropTable& PBDropTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDropTable* PBDropTable::default_instance_ = NULL;

PBDropTable* PBDropTable::New() const {
  return new PBDropTable;
}

void PBDropTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    dropturn_ = 0u;
  }
  dropnumberrate_.Clear();
  dropitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DropTurn;
        break;
      }
      
      // optional uint32 DropTurn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropTurn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropturn_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DropNumberRate;
        break;
      }
      
      // repeated uint32 DropNumberRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropNumberRate:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_dropnumberrate(value);
        if (input->ExpectTag(24)) goto parse_DropNumberRate;
        if (input->ExpectTag(34)) goto parse_DropItem;
        break;
      }
      
      // repeated .PBDropItem DropItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_dropitem()));
        if (input->ExpectTag(34)) goto parse_DropItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDropTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 DropTurn = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->dropturn(), output);
  }
  
  // repeated uint32 DropNumberRate = 3;
  for (int i = 0; i < this->dropnumberrate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->dropnumberrate(i), output);
  }
  
  // repeated .PBDropItem DropItem = 4;
  for (int i = 0; i < this->dropitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->dropitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 DropTurn = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->dropturn(), target);
  }
  
  // repeated uint32 DropNumberRate = 3;
  for (int i = 0; i < this->dropnumberrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->dropnumberrate(i), target);
  }
  
  // repeated .PBDropItem DropItem = 4;
  for (int i = 0; i < this->dropitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->dropitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 DropTurn = 2;
    if (has_dropturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropturn());
    }
    
  }
  // repeated uint32 DropNumberRate = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dropnumberrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->dropnumberrate(i));
    }
    total_size += 1 * this->dropnumberrate_size() + data_size;
  }
  
  // repeated .PBDropItem DropItem = 4;
  total_size += 1 * this->dropitem_size();
  for (int i = 0; i < this->dropitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->dropitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDropTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropTable::MergeFrom(const PBDropTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropnumberrate_.MergeFrom(from.dropnumberrate_);
  dropitem_.MergeFrom(from.dropitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_dropturn(from.dropturn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropTable::CopyFrom(const PBDropTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropTable::Swap(PBDropTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(dropturn_, other->dropturn_);
    dropnumberrate_.Swap(&other->dropnumberrate_);
    dropitem_.Swap(&other->dropitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDropTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDropTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDropTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDropTable_reflection_;
}

// ===================================================================

const ::std::string PBNPCCollect::_default_name_;
const ::std::string PBNPCCollect::_default_modelname_;
#ifndef _MSC_VER
const int PBNPCCollect::kTempIDFieldNumber;
const int PBNPCCollect::kNameFieldNumber;
const int PBNPCCollect::kModelNameFieldNumber;
const int PBNPCCollect::kTaskIDFieldNumber;
const int PBNPCCollect::kItemIDFieldNumber;
const int PBNPCCollect::kDropIDFieldNumber;
const int PBNPCCollect::kNumberFieldNumber;
const int PBNPCCollect::kSkillTypeFieldNumber;
const int PBNPCCollect::kSkillKindFieldNumber;
const int PBNPCCollect::kCollectDegreeFieldNumber;
const int PBNPCCollect::kValueFieldNumber;
const int PBNPCCollect::kProbalityFieldNumber;
const int PBNPCCollect::kDegreeValueFieldNumber;
const int PBNPCCollect::kApcostFieldNumber;
const int PBNPCCollect::kItemNumFieldNumber;
const int PBNPCCollect::kItemProbalityFieldNumber;
const int PBNPCCollect::kCollectLevelFieldNumber;
const int PBNPCCollect::kExtraItemNumFieldNumber;
const int PBNPCCollect::kExtraItemProbalityFieldNumber;
const int PBNPCCollect::kCollectTaskTypeFieldNumber;
#endif  // !_MSC_VER

PBNPCCollect::PBNPCCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBNPCCollect::InitAsDefaultInstance() {}

PBNPCCollect::PBNPCCollect(const PBNPCCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBNPCCollect::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  modelname_ = const_cast< ::std::string*>(&_default_modelname_);
  dropid_ = 0u;
  number_ = 0u;
  skilltype_ = 0u;
  skillkind_ = 0u;
  collectdegree_ = 0u;
  apcost_ = 0u;
  collectlevel_ = 0u;
  collecttasktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBNPCCollect::~PBNPCCollect() {
  SharedDtor();
}

void PBNPCCollect::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (modelname_ != &_default_modelname_) {
    delete modelname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBNPCCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNPCCollect_descriptor_;
}

const PBNPCCollect& PBNPCCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBNPCCollect* PBNPCCollect::default_instance_ = NULL;

PBNPCCollect* PBNPCCollect::New() const {
  return new PBNPCCollect;
}

void PBNPCCollect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (modelname_ != &_default_modelname_) {
        modelname_->clear();
      }
    }
    dropid_ = 0u;
    number_ = 0u;
    skilltype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skillkind_ = 0u;
    collectdegree_ = 0u;
    apcost_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    collectlevel_ = 0u;
    collecttasktype_ = 0u;
  }
  taskid_.Clear();
  itemid_.Clear();
  value_.Clear();
  probality_.Clear();
  degreevalue_.Clear();
  itemnum_.Clear();
  itemprobality_.Clear();
  extraitemnum_.Clear();
  extraitemprobality_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBNPCCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_ModelName;
        break;
      }
      
      // optional string ModelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ModelName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_modelname()));
        if (input->ExpectTag(32)) goto parse_TaskID;
        break;
      }
      
      // repeated uint32 TaskID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_taskid(value);
        if (input->ExpectTag(32)) goto parse_TaskID;
        if (input->ExpectTag(40)) goto parse_ItemID;
        break;
      }
      
      // repeated uint32 ItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemid(value);
        if (input->ExpectTag(40)) goto parse_ItemID;
        if (input->ExpectTag(48)) goto parse_DropID;
        break;
      }
      
      // optional uint32 DropID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_SkillType;
        break;
      }
      
      // optional uint32 SkillType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilltype_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_SkillKind;
        break;
      }
      
      // optional uint32 SkillKind = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillkind_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CollectDegree;
        break;
      }
      
      // optional uint32 CollectDegree = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CollectDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &collectdegree_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_value;
        break;
      }
      
      // repeated uint32 value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_value:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_value(value);
        if (input->ExpectTag(88)) goto parse_value;
        if (input->ExpectTag(96)) goto parse_Probality;
        break;
      }
      
      // repeated uint32 Probality = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probality(value);
        if (input->ExpectTag(96)) goto parse_Probality;
        if (input->ExpectTag(104)) goto parse_DegreeValue;
        break;
      }
      
      // repeated uint32 DegreeValue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_degreevalue(value);
        if (input->ExpectTag(104)) goto parse_DegreeValue;
        if (input->ExpectTag(112)) goto parse_apcost;
        break;
      }
      
      // optional uint32 apcost = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_apcost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &apcost_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_ItemNum;
        break;
      }
      
      // repeated uint32 ItemNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemnum(value);
        if (input->ExpectTag(120)) goto parse_ItemNum;
        if (input->ExpectTag(128)) goto parse_ItemProbality;
        break;
      }
      
      // repeated uint32 ItemProbality = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemProbality:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemprobality(value);
        if (input->ExpectTag(128)) goto parse_ItemProbality;
        if (input->ExpectTag(136)) goto parse_CollectLevel;
        break;
      }
      
      // optional uint32 CollectLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CollectLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &collectlevel_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_ExtraItemNum;
        break;
      }
      
      // repeated uint32 ExtraItemNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_extraitemnum(value);
        if (input->ExpectTag(144)) goto parse_ExtraItemNum;
        if (input->ExpectTag(152)) goto parse_ExtraItemProbality;
        break;
      }
      
      // repeated uint32 ExtraItemProbality = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraItemProbality:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_extraitemprobality(value);
        if (input->ExpectTag(152)) goto parse_ExtraItemProbality;
        if (input->ExpectTag(160)) goto parse_CollectTaskType;
        break;
      }
      
      // optional uint32 CollectTaskType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CollectTaskType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &collecttasktype_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBNPCCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBNPCCollect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string ModelName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->modelname(), output);
  }
  
  // repeated uint32 TaskID = 4;
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->taskid(i), output);
  }
  
  // repeated uint32 ItemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemid(i), output);
  }
  
  // optional uint32 DropID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->dropid(), output);
  }
  
  // optional uint32 Number = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->number(), output);
  }
  
  // optional uint32 SkillType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->skilltype(), output);
  }
  
  // optional uint32 SkillKind = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->skillkind(), output);
  }
  
  // optional uint32 CollectDegree = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->collectdegree(), output);
  }
  
  // repeated uint32 value = 11;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->value(i), output);
  }
  
  // repeated uint32 Probality = 12;
  for (int i = 0; i < this->probality_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->probality(i), output);
  }
  
  // repeated uint32 DegreeValue = 13;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->degreevalue(i), output);
  }
  
  // optional uint32 apcost = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->apcost(), output);
  }
  
  // repeated uint32 ItemNum = 15;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->itemnum(i), output);
  }
  
  // repeated uint32 ItemProbality = 16;
  for (int i = 0; i < this->itemprobality_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->itemprobality(i), output);
  }
  
  // optional uint32 CollectLevel = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->collectlevel(), output);
  }
  
  // repeated uint32 ExtraItemNum = 18;
  for (int i = 0; i < this->extraitemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->extraitemnum(i), output);
  }
  
  // repeated uint32 ExtraItemProbality = 19;
  for (int i = 0; i < this->extraitemprobality_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->extraitemprobality(i), output);
  }
  
  // optional uint32 CollectTaskType = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->collecttasktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBNPCCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string ModelName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->modelname(), target);
  }
  
  // repeated uint32 TaskID = 4;
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->taskid(i), target);
  }
  
  // repeated uint32 ItemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemid(i), target);
  }
  
  // optional uint32 DropID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->dropid(), target);
  }
  
  // optional uint32 Number = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->number(), target);
  }
  
  // optional uint32 SkillType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->skilltype(), target);
  }
  
  // optional uint32 SkillKind = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->skillkind(), target);
  }
  
  // optional uint32 CollectDegree = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->collectdegree(), target);
  }
  
  // repeated uint32 value = 11;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->value(i), target);
  }
  
  // repeated uint32 Probality = 12;
  for (int i = 0; i < this->probality_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->probality(i), target);
  }
  
  // repeated uint32 DegreeValue = 13;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->degreevalue(i), target);
  }
  
  // optional uint32 apcost = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->apcost(), target);
  }
  
  // repeated uint32 ItemNum = 15;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->itemnum(i), target);
  }
  
  // repeated uint32 ItemProbality = 16;
  for (int i = 0; i < this->itemprobality_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->itemprobality(i), target);
  }
  
  // optional uint32 CollectLevel = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->collectlevel(), target);
  }
  
  // repeated uint32 ExtraItemNum = 18;
  for (int i = 0; i < this->extraitemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->extraitemnum(i), target);
  }
  
  // repeated uint32 ExtraItemProbality = 19;
  for (int i = 0; i < this->extraitemprobality_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->extraitemprobality(i), target);
  }
  
  // optional uint32 CollectTaskType = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->collecttasktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBNPCCollect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string ModelName = 3;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->modelname());
    }
    
    // optional uint32 DropID = 6;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropid());
    }
    
    // optional uint32 Number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 SkillType = 8;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilltype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SkillKind = 9;
    if (has_skillkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillkind());
    }
    
    // optional uint32 CollectDegree = 10;
    if (has_collectdegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->collectdegree());
    }
    
    // optional uint32 apcost = 14;
    if (has_apcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->apcost());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 CollectLevel = 17;
    if (has_collectlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->collectlevel());
    }
    
    // optional uint32 CollectTaskType = 20;
    if (has_collecttasktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->collecttasktype());
    }
    
  }
  // repeated uint32 TaskID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->taskid(i));
    }
    total_size += 1 * this->taskid_size() + data_size;
  }
  
  // repeated uint32 ItemID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }
  
  // repeated uint32 value = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }
  
  // repeated uint32 Probality = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->probality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probality(i));
    }
    total_size += 1 * this->probality_size() + data_size;
  }
  
  // repeated uint32 DegreeValue = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->degreevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->degreevalue(i));
    }
    total_size += 1 * this->degreevalue_size() + data_size;
  }
  
  // repeated uint32 ItemNum = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }
  
  // repeated uint32 ItemProbality = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemprobality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemprobality(i));
    }
    total_size += 2 * this->itemprobality_size() + data_size;
  }
  
  // repeated uint32 ExtraItemNum = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->extraitemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->extraitemnum(i));
    }
    total_size += 2 * this->extraitemnum_size() + data_size;
  }
  
  // repeated uint32 ExtraItemProbality = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->extraitemprobality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->extraitemprobality(i));
    }
    total_size += 2 * this->extraitemprobality_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBNPCCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBNPCCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBNPCCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBNPCCollect::MergeFrom(const PBNPCCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskid_.MergeFrom(from.taskid_);
  itemid_.MergeFrom(from.itemid_);
  value_.MergeFrom(from.value_);
  probality_.MergeFrom(from.probality_);
  degreevalue_.MergeFrom(from.degreevalue_);
  itemnum_.MergeFrom(from.itemnum_);
  itemprobality_.MergeFrom(from.itemprobality_);
  extraitemnum_.MergeFrom(from.extraitemnum_);
  extraitemprobality_.MergeFrom(from.extraitemprobality_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_modelname(from.modelname());
    }
    if (from._has_bit(5)) {
      set_dropid(from.dropid());
    }
    if (from._has_bit(6)) {
      set_number(from.number());
    }
    if (from._has_bit(7)) {
      set_skilltype(from.skilltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_skillkind(from.skillkind());
    }
    if (from._has_bit(9)) {
      set_collectdegree(from.collectdegree());
    }
    if (from._has_bit(13)) {
      set_apcost(from.apcost());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_collectlevel(from.collectlevel());
    }
    if (from._has_bit(19)) {
      set_collecttasktype(from.collecttasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBNPCCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNPCCollect::CopyFrom(const PBNPCCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNPCCollect::Swap(PBNPCCollect* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(modelname_, other->modelname_);
    taskid_.Swap(&other->taskid_);
    itemid_.Swap(&other->itemid_);
    std::swap(dropid_, other->dropid_);
    std::swap(number_, other->number_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(skillkind_, other->skillkind_);
    std::swap(collectdegree_, other->collectdegree_);
    value_.Swap(&other->value_);
    probality_.Swap(&other->probality_);
    degreevalue_.Swap(&other->degreevalue_);
    std::swap(apcost_, other->apcost_);
    itemnum_.Swap(&other->itemnum_);
    itemprobality_.Swap(&other->itemprobality_);
    std::swap(collectlevel_, other->collectlevel_);
    extraitemnum_.Swap(&other->extraitemnum_);
    extraitemprobality_.Swap(&other->extraitemprobality_);
    std::swap(collecttasktype_, other->collecttasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBNPCCollect::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBNPCCollect::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBNPCCollect::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBNPCCollect_reflection_;
}

// ===================================================================

const ::std::string PBOgreProperty::_default_name_;
const ::std::string PBOgreProperty::_default_modelname_;
#ifndef _MSC_VER
const int PBOgreProperty::kTempIDFieldNumber;
const int PBOgreProperty::kNameFieldNumber;
const int PBOgreProperty::kModelNameFieldNumber;
const int PBOgreProperty::kOgreTypeFieldNumber;
const int PBOgreProperty::kDropTypeFieldNumber;
const int PBOgreProperty::kStrategyIDFieldNumber;
const int PBOgreProperty::kDropIDFieldNumber;
const int PBOgreProperty::kLevelFieldNumber;
const int PBOgreProperty::kDisplayeLevelFieldNumber;
const int PBOgreProperty::kAttackRateFieldNumber;
const int PBOgreProperty::kAttackTimeFieldNumber;
const int PBOgreProperty::kHPRSpeedFieldNumber;
const int PBOgreProperty::kMPRSpeedsFieldNumber;
const int PBOgreProperty::kRunSpeedFieldNumber;
const int PBOgreProperty::kInitLevelFieldNumber;
const int PBOgreProperty::kHPFieldNumber;
const int PBOgreProperty::kMPFieldNumber;
const int PBOgreProperty::kPAttackFieldNumber;
const int PBOgreProperty::kPDefenceFieldNumber;
const int PBOgreProperty::kPAttackRangeFieldNumber;
const int PBOgreProperty::kPReducePerFieldNumber;
const int PBOgreProperty::kMAttackFieldNumber;
const int PBOgreProperty::kMDefenceFieldNumber;
const int PBOgreProperty::kMAttackRangeFieldNumber;
const int PBOgreProperty::kMReducePerFieldNumber;
const int PBOgreProperty::kDeathRateFieldNumber;
const int PBOgreProperty::kDeathValueFieldNumber;
const int PBOgreProperty::kDeathDefenseFieldNumber;
const int PBOgreProperty::kNormalHitrateFieldNumber;
const int PBOgreProperty::kNormalDuckFieldNumber;
const int PBOgreProperty::kRecoverFieldNumber;
const int PBOgreProperty::kIgnoreDuckFieldNumber;
const int PBOgreProperty::kResDefFieldNumber;
const int PBOgreProperty::kResAttFieldNumber;
const int PBOgreProperty::kNeedDelayFieldNumber;
const int PBOgreProperty::kPatrolTypeFieldNumber;
const int PBOgreProperty::kIsInitiativeFieldNumber;
const int PBOgreProperty::kWalkDistanceFieldNumber;
const int PBOgreProperty::kTeleTimeFieldNumber;
const int PBOgreProperty::kEnmityDistanceFieldNumber;
const int PBOgreProperty::kEnmityTimeFieldNumber;
const int PBOgreProperty::kClearTimerFieldNumber;
const int PBOgreProperty::kExpFieldNumber;
const int PBOgreProperty::kInitMoneyFieldNumber;
const int PBOgreProperty::kDeltaMoneyFieldNumber;
const int PBOgreProperty::kResistFieldNumber;
const int PBOgreProperty::kTranIDFieldNumber;
const int PBOgreProperty::kPkTypeFieldNumber;
const int PBOgreProperty::kGroupIDFieldNumber;
const int PBOgreProperty::kSkillIDFieldNumber;
const int PBOgreProperty::kSkillLevelFieldNumber;
const int PBOgreProperty::kSearchDistanceFieldNumber;
const int PBOgreProperty::kLeftTimeFieldNumber;
const int PBOgreProperty::kResShowFieldNumber;
const int PBOgreProperty::kFailTaskIDFieldNumber;
const int PBOgreProperty::kJusticeValueFieldNumber;
const int PBOgreProperty::kBuffImmunityFieldNumber;
const int PBOgreProperty::kObtainTitleFieldNumber;
const int PBOgreProperty::kAwardIDFieldNumber;
const int PBOgreProperty::kLmtLineIDFieldNumber;
const int PBOgreProperty::kRedstoneIDFieldNumber;
const int PBOgreProperty::kOgreEventFieldNumber;
const int PBOgreProperty::kCorpsValueFieldNumber;
const int PBOgreProperty::kDropsDescIDFieldNumber;
const int PBOgreProperty::kDiffcultIndexFieldNumber;
const int PBOgreProperty::kDiffcultAwardFieldNumber;
#endif  // !_MSC_VER

PBOgreProperty::PBOgreProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOgreProperty::InitAsDefaultInstance() {}

PBOgreProperty::PBOgreProperty(const PBOgreProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOgreProperty::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  modelname_ = const_cast< ::std::string*>(&_default_modelname_);
  ogretype_ = 0u;
  droptype_ = 0u;
  strategyid_ = 0u;
  dropid_ = 0u;
  level_ = 0u;
  displayelevel_ = 0u;
  attackrate_ = 0u;
  attacktime_ = 0u;
  hprspeed_ = 0u;
  mprspeeds_ = 0u;
  runspeed_ = 0u;
  initlevel_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  pattack_ = 0u;
  pdefence_ = 0u;
  pattackrange_ = 0u;
  preduceper_ = 0u;
  mattack_ = 0u;
  mdefence_ = 0u;
  mattackrange_ = 0u;
  mreduceper_ = 0u;
  deathrate_ = 0u;
  deathvalue_ = 0u;
  deathdefense_ = 0u;
  normalhitrate_ = 0u;
  normalduck_ = 0u;
  recover_ = 0u;
  ignoreduck_ = 0u;
  needdelay_ = 0u;
  patroltype_ = 0u;
  isinitiative_ = 0u;
  walkdistance_ = 0u;
  teletime_ = 0u;
  enmitydistance_ = 0u;
  enmitytime_ = 0u;
  cleartimer_ = 0u;
  exp_ = 0u;
  initmoney_ = 0u;
  deltamoney_ = 0u;
  resist_ = 0u;
  tranid_ = 0u;
  pktype_ = 0u;
  groupid_ = 0u;
  skillid_ = 0u;
  skilllevel_ = 0u;
  searchdistance_ = 0u;
  lefttime_ = 0u;
  resshow_ = 0u;
  justicevalue_ = 0u;
  buffimmunity_ = 0u;
  obtaintitle_ = 0u;
  awardid_ = 0u;
  lmtlineid_ = 0u;
  redstoneid_ = 0u;
  ogreevent_ = 0u;
  corpsvalue_ = 0u;
  dropsdescid_ = 0u;
  diffcultindex_ = 0u;
  diffcultaward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOgreProperty::~PBOgreProperty() {
  SharedDtor();
}

void PBOgreProperty::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (modelname_ != &_default_modelname_) {
    delete modelname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOgreProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOgreProperty_descriptor_;
}

const PBOgreProperty& PBOgreProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOgreProperty* PBOgreProperty::default_instance_ = NULL;

PBOgreProperty* PBOgreProperty::New() const {
  return new PBOgreProperty;
}

void PBOgreProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (modelname_ != &_default_modelname_) {
        modelname_->clear();
      }
    }
    ogretype_ = 0u;
    droptype_ = 0u;
    strategyid_ = 0u;
    dropid_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    displayelevel_ = 0u;
    attackrate_ = 0u;
    attacktime_ = 0u;
    hprspeed_ = 0u;
    mprspeeds_ = 0u;
    runspeed_ = 0u;
    initlevel_ = 0u;
    hp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mp_ = 0u;
    pattack_ = 0u;
    pdefence_ = 0u;
    pattackrange_ = 0u;
    preduceper_ = 0u;
    mattack_ = 0u;
    mdefence_ = 0u;
    mattackrange_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    mreduceper_ = 0u;
    deathrate_ = 0u;
    deathvalue_ = 0u;
    deathdefense_ = 0u;
    normalhitrate_ = 0u;
    normalduck_ = 0u;
    recover_ = 0u;
    ignoreduck_ = 0u;
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    needdelay_ = 0u;
    patroltype_ = 0u;
    isinitiative_ = 0u;
    walkdistance_ = 0u;
    teletime_ = 0u;
    enmitydistance_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    enmitytime_ = 0u;
    cleartimer_ = 0u;
    exp_ = 0u;
    initmoney_ = 0u;
    deltamoney_ = 0u;
    resist_ = 0u;
    tranid_ = 0u;
    pktype_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    groupid_ = 0u;
    skillid_ = 0u;
    skilllevel_ = 0u;
    searchdistance_ = 0u;
    lefttime_ = 0u;
    resshow_ = 0u;
    justicevalue_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    buffimmunity_ = 0u;
    obtaintitle_ = 0u;
    awardid_ = 0u;
    lmtlineid_ = 0u;
    redstoneid_ = 0u;
    ogreevent_ = 0u;
    corpsvalue_ = 0u;
    dropsdescid_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    diffcultindex_ = 0u;
    diffcultaward_ = 0u;
  }
  resdef_.Clear();
  resatt_.Clear();
  failtaskid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOgreProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_ModelName;
        break;
      }
      
      // optional string ModelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ModelName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_modelname()));
        if (input->ExpectTag(32)) goto parse_OgreType;
        break;
      }
      
      // optional uint32 OgreType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogretype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DropType;
        break;
      }
      
      // optional uint32 DropType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &droptype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_StrategyID;
        break;
      }
      
      // optional uint32 StrategyID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StrategyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &strategyid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DropID;
        break;
      }
      
      // optional uint32 DropID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_DisplayeLevel;
        break;
      }
      
      // optional uint32 DisplayeLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DisplayeLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &displayelevel_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_AttackRate;
        break;
      }
      
      // optional uint32 AttackRate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_AttackTime;
        break;
      }
      
      // optional uint32 AttackTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attacktime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_HPRSpeed;
        break;
      }
      
      // optional uint32 HPRSpeed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprspeed_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MPRSpeeds;
        break;
      }
      
      // optional uint32 MPRSpeeds = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPRSpeeds:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mprspeeds_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_RunSpeed;
        break;
      }
      
      // optional uint32 RunSpeed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RunSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &runspeed_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_InitLevel;
        break;
      }
      
      // optional uint32 InitLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlevel_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_HP;
        break;
      }
      
      // optional uint32 HP = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hp_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MP;
        break;
      }
      
      // optional uint32 MP = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PAttack;
        break;
      }
      
      // optional uint32 PAttack = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattack_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_PDefence;
        break;
      }
      
      // optional uint32 PDefence = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefence_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_PAttackRange;
        break;
      }
      
      // optional uint32 PAttackRange = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackrange_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_PReducePer;
        break;
      }
      
      // optional uint32 PReducePer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PReducePer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preduceper_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MAttack;
        break;
      }
      
      // optional uint32 MAttack = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattack_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_MDefence;
        break;
      }
      
      // optional uint32 MDefence = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefence_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_MAttackRange;
        break;
      }
      
      // optional uint32 MAttackRange = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackrange_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_MReducePer;
        break;
      }
      
      // optional uint32 MReducePer = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MReducePer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mreduceper_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_DeathRate;
        break;
      }
      
      // optional uint32 DeathRate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathrate_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_DeathValue;
        break;
      }
      
      // optional uint32 DeathValue = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvalue_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_DeathDefense;
        break;
      }
      
      // optional uint32 DeathDefense = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefense_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_NormalHitrate;
        break;
      }
      
      // optional uint32 NormalHitrate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalHitrate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalhitrate_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_NormalDuck;
        break;
      }
      
      // optional uint32 NormalDuck = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduck_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_Recover;
        break;
      }
      
      // optional uint32 Recover = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Recover:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recover_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_IgnoreDuck;
        break;
      }
      
      // optional uint32 IgnoreDuck = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduck_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_ResDef;
        break;
      }
      
      // repeated uint32 ResDef = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDef:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resdef(value);
        if (input->ExpectTag(264)) goto parse_ResDef;
        if (input->ExpectTag(272)) goto parse_ResAtt;
        break;
      }
      
      // repeated uint32 ResAtt = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAtt:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resatt(value);
        if (input->ExpectTag(272)) goto parse_ResAtt;
        if (input->ExpectTag(280)) goto parse_NeedDelay;
        break;
      }
      
      // optional uint32 NeedDelay = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedDelay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needdelay_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_PatrolType;
        break;
      }
      
      // optional uint32 PatrolType = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PatrolType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &patroltype_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_IsInitiative;
        break;
      }
      
      // optional uint32 IsInitiative = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsInitiative:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isinitiative_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_WalkDistance;
        break;
      }
      
      // optional uint32 WalkDistance = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WalkDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &walkdistance_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_TeleTime;
        break;
      }
      
      // optional uint32 TeleTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeleTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teletime_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_EnmityDistance;
        break;
      }
      
      // optional uint32 EnmityDistance = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EnmityDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &enmitydistance_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_EnmityTime;
        break;
      }
      
      // optional uint32 EnmityTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EnmityTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &enmitytime_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_ClearTimer;
        break;
      }
      
      // optional uint32 ClearTimer = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClearTimer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleartimer_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_InitMoney;
        break;
      }
      
      // optional uint32 InitMoney = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmoney_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_DeltaMoney;
        break;
      }
      
      // optional uint32 DeltaMoney = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltamoney_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_Resist;
        break;
      }
      
      // optional uint32 Resist = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Resist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resist_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_TranID;
        break;
      }
      
      // optional uint32 TranID = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TranID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tranid_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_PkType;
        break;
      }
      
      // optional uint32 PkType = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PkType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pktype_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_GroupID;
        break;
      }
      
      // optional uint32 GroupID = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_SkillLevel;
        break;
      }
      
      // optional uint32 SkillLevel = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllevel_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_SearchDistance;
        break;
      }
      
      // optional uint32 SearchDistance = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SearchDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &searchdistance_));
        _set_bit(51);
        if (input->ExpectTag(456)) goto parse_LeftTime;
        break;
      }
      
      // optional uint32 LeftTime = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lefttime_));
        _set_bit(52);
        if (input->ExpectTag(464)) goto parse_ResShow;
        break;
      }
      
      // optional uint32 ResShow = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResShow:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resshow_));
        _set_bit(53);
        if (input->ExpectTag(472)) goto parse_FailTaskID;
        break;
      }
      
      // repeated uint32 FailTaskID = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FailTaskID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_failtaskid(value);
        if (input->ExpectTag(472)) goto parse_FailTaskID;
        if (input->ExpectTag(480)) goto parse_JusticeValue;
        break;
      }
      
      // optional uint32 JusticeValue = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JusticeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &justicevalue_));
        _set_bit(55);
        if (input->ExpectTag(488)) goto parse_BuffImmunity;
        break;
      }
      
      // optional uint32 BuffImmunity = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffImmunity:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffimmunity_));
        _set_bit(56);
        if (input->ExpectTag(496)) goto parse_ObtainTitle;
        break;
      }
      
      // optional uint32 ObtainTitle = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ObtainTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &obtaintitle_));
        _set_bit(57);
        if (input->ExpectTag(504)) goto parse_AwardID;
        break;
      }
      
      // optional uint32 AwardID = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardid_));
        _set_bit(58);
        if (input->ExpectTag(512)) goto parse_LmtLineID;
        break;
      }
      
      // optional uint32 LmtLineID = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LmtLineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lmtlineid_));
        _set_bit(59);
        if (input->ExpectTag(520)) goto parse_RedstoneID;
        break;
      }
      
      // optional uint32 RedstoneID = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedstoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redstoneid_));
        _set_bit(60);
        if (input->ExpectTag(528)) goto parse_OgreEvent;
        break;
      }
      
      // optional uint32 OgreEvent = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreEvent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogreevent_));
        _set_bit(61);
        if (input->ExpectTag(536)) goto parse_CorpsValue;
        break;
      }
      
      // optional uint32 CorpsValue = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsvalue_));
        _set_bit(62);
        if (input->ExpectTag(552)) goto parse_DropsDescID;
        break;
      }
      
      // optional uint32 DropsDescID = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropsDescID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropsdescid_));
        _set_bit(63);
        if (input->ExpectTag(560)) goto parse_DiffcultIndex;
        break;
      }
      
      // optional uint32 DiffcultIndex = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DiffcultIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diffcultindex_));
        _set_bit(64);
        if (input->ExpectTag(568)) goto parse_DiffcultAward;
        break;
      }
      
      // optional uint32 DiffcultAward = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DiffcultAward:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diffcultaward_));
        _set_bit(65);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOgreProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOgreProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string ModelName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->modelname(), output);
  }
  
  // optional uint32 OgreType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->ogretype(), output);
  }
  
  // optional uint32 DropType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->droptype(), output);
  }
  
  // optional uint32 StrategyID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->strategyid(), output);
  }
  
  // optional uint32 DropID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->dropid(), output);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->level(), output);
  }
  
  // optional uint32 DisplayeLevel = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->displayelevel(), output);
  }
  
  // optional uint32 AttackRate = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->attackrate(), output);
  }
  
  // optional uint32 AttackTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->attacktime(), output);
  }
  
  // optional uint32 HPRSpeed = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->hprspeed(), output);
  }
  
  // optional uint32 MPRSpeeds = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->mprspeeds(), output);
  }
  
  // optional uint32 RunSpeed = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->runspeed(), output);
  }
  
  // optional uint32 InitLevel = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->initlevel(), output);
  }
  
  // optional uint32 HP = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->hp(), output);
  }
  
  // optional uint32 MP = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->mp(), output);
  }
  
  // optional uint32 PAttack = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->pattack(), output);
  }
  
  // optional uint32 PDefence = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->pdefence(), output);
  }
  
  // optional uint32 PAttackRange = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->pattackrange(), output);
  }
  
  // optional uint32 PReducePer = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->preduceper(), output);
  }
  
  // optional uint32 MAttack = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->mattack(), output);
  }
  
  // optional uint32 MDefence = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->mdefence(), output);
  }
  
  // optional uint32 MAttackRange = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->mattackrange(), output);
  }
  
  // optional uint32 MReducePer = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->mreduceper(), output);
  }
  
  // optional uint32 DeathRate = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->deathrate(), output);
  }
  
  // optional uint32 DeathValue = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->deathvalue(), output);
  }
  
  // optional uint32 DeathDefense = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->deathdefense(), output);
  }
  
  // optional uint32 NormalHitrate = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->normalhitrate(), output);
  }
  
  // optional uint32 NormalDuck = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->normalduck(), output);
  }
  
  // optional uint32 Recover = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->recover(), output);
  }
  
  // optional uint32 IgnoreDuck = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->ignoreduck(), output);
  }
  
  // repeated uint32 ResDef = 33;
  for (int i = 0; i < this->resdef_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->resdef(i), output);
  }
  
  // repeated uint32 ResAtt = 34;
  for (int i = 0; i < this->resatt_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->resatt(i), output);
  }
  
  // optional uint32 NeedDelay = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->needdelay(), output);
  }
  
  // optional uint32 PatrolType = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->patroltype(), output);
  }
  
  // optional uint32 IsInitiative = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->isinitiative(), output);
  }
  
  // optional uint32 WalkDistance = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->walkdistance(), output);
  }
  
  // optional uint32 TeleTime = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->teletime(), output);
  }
  
  // optional uint32 EnmityDistance = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->enmitydistance(), output);
  }
  
  // optional uint32 EnmityTime = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->enmitytime(), output);
  }
  
  // optional uint32 ClearTimer = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->cleartimer(), output);
  }
  
  // optional uint32 Exp = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->exp(), output);
  }
  
  // optional uint32 InitMoney = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->initmoney(), output);
  }
  
  // optional uint32 DeltaMoney = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->deltamoney(), output);
  }
  
  // optional uint32 Resist = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->resist(), output);
  }
  
  // optional uint32 TranID = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->tranid(), output);
  }
  
  // optional uint32 PkType = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(48, this->pktype(), output);
  }
  
  // optional uint32 GroupID = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->groupid(), output);
  }
  
  // optional uint32 SkillID = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->skillid(), output);
  }
  
  // optional uint32 SkillLevel = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->skilllevel(), output);
  }
  
  // optional uint32 SearchDistance = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->searchdistance(), output);
  }
  
  // optional uint32 LeftTime = 57;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->lefttime(), output);
  }
  
  // optional uint32 ResShow = 58;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(58, this->resshow(), output);
  }
  
  // repeated uint32 FailTaskID = 59;
  for (int i = 0; i < this->failtaskid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(59, this->failtaskid(i), output);
  }
  
  // optional uint32 JusticeValue = 60;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(60, this->justicevalue(), output);
  }
  
  // optional uint32 BuffImmunity = 61;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(61, this->buffimmunity(), output);
  }
  
  // optional uint32 ObtainTitle = 62;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(62, this->obtaintitle(), output);
  }
  
  // optional uint32 AwardID = 63;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(63, this->awardid(), output);
  }
  
  // optional uint32 LmtLineID = 64;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(64, this->lmtlineid(), output);
  }
  
  // optional uint32 RedstoneID = 65;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(65, this->redstoneid(), output);
  }
  
  // optional uint32 OgreEvent = 66;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(66, this->ogreevent(), output);
  }
  
  // optional uint32 CorpsValue = 67;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(67, this->corpsvalue(), output);
  }
  
  // optional uint32 DropsDescID = 69;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(69, this->dropsdescid(), output);
  }
  
  // optional uint32 DiffcultIndex = 70;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(70, this->diffcultindex(), output);
  }
  
  // optional uint32 DiffcultAward = 71;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(71, this->diffcultaward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOgreProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string ModelName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->modelname(), target);
  }
  
  // optional uint32 OgreType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->ogretype(), target);
  }
  
  // optional uint32 DropType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->droptype(), target);
  }
  
  // optional uint32 StrategyID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->strategyid(), target);
  }
  
  // optional uint32 DropID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->dropid(), target);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->level(), target);
  }
  
  // optional uint32 DisplayeLevel = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->displayelevel(), target);
  }
  
  // optional uint32 AttackRate = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->attackrate(), target);
  }
  
  // optional uint32 AttackTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->attacktime(), target);
  }
  
  // optional uint32 HPRSpeed = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->hprspeed(), target);
  }
  
  // optional uint32 MPRSpeeds = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->mprspeeds(), target);
  }
  
  // optional uint32 RunSpeed = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->runspeed(), target);
  }
  
  // optional uint32 InitLevel = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->initlevel(), target);
  }
  
  // optional uint32 HP = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->hp(), target);
  }
  
  // optional uint32 MP = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->mp(), target);
  }
  
  // optional uint32 PAttack = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->pattack(), target);
  }
  
  // optional uint32 PDefence = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->pdefence(), target);
  }
  
  // optional uint32 PAttackRange = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->pattackrange(), target);
  }
  
  // optional uint32 PReducePer = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->preduceper(), target);
  }
  
  // optional uint32 MAttack = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->mattack(), target);
  }
  
  // optional uint32 MDefence = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->mdefence(), target);
  }
  
  // optional uint32 MAttackRange = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->mattackrange(), target);
  }
  
  // optional uint32 MReducePer = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->mreduceper(), target);
  }
  
  // optional uint32 DeathRate = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->deathrate(), target);
  }
  
  // optional uint32 DeathValue = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->deathvalue(), target);
  }
  
  // optional uint32 DeathDefense = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->deathdefense(), target);
  }
  
  // optional uint32 NormalHitrate = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->normalhitrate(), target);
  }
  
  // optional uint32 NormalDuck = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->normalduck(), target);
  }
  
  // optional uint32 Recover = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->recover(), target);
  }
  
  // optional uint32 IgnoreDuck = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->ignoreduck(), target);
  }
  
  // repeated uint32 ResDef = 33;
  for (int i = 0; i < this->resdef_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->resdef(i), target);
  }
  
  // repeated uint32 ResAtt = 34;
  for (int i = 0; i < this->resatt_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->resatt(i), target);
  }
  
  // optional uint32 NeedDelay = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->needdelay(), target);
  }
  
  // optional uint32 PatrolType = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->patroltype(), target);
  }
  
  // optional uint32 IsInitiative = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->isinitiative(), target);
  }
  
  // optional uint32 WalkDistance = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->walkdistance(), target);
  }
  
  // optional uint32 TeleTime = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->teletime(), target);
  }
  
  // optional uint32 EnmityDistance = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->enmitydistance(), target);
  }
  
  // optional uint32 EnmityTime = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->enmitytime(), target);
  }
  
  // optional uint32 ClearTimer = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->cleartimer(), target);
  }
  
  // optional uint32 Exp = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->exp(), target);
  }
  
  // optional uint32 InitMoney = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->initmoney(), target);
  }
  
  // optional uint32 DeltaMoney = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->deltamoney(), target);
  }
  
  // optional uint32 Resist = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->resist(), target);
  }
  
  // optional uint32 TranID = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->tranid(), target);
  }
  
  // optional uint32 PkType = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(48, this->pktype(), target);
  }
  
  // optional uint32 GroupID = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->groupid(), target);
  }
  
  // optional uint32 SkillID = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->skillid(), target);
  }
  
  // optional uint32 SkillLevel = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->skilllevel(), target);
  }
  
  // optional uint32 SearchDistance = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->searchdistance(), target);
  }
  
  // optional uint32 LeftTime = 57;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->lefttime(), target);
  }
  
  // optional uint32 ResShow = 58;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(58, this->resshow(), target);
  }
  
  // repeated uint32 FailTaskID = 59;
  for (int i = 0; i < this->failtaskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(59, this->failtaskid(i), target);
  }
  
  // optional uint32 JusticeValue = 60;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(60, this->justicevalue(), target);
  }
  
  // optional uint32 BuffImmunity = 61;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(61, this->buffimmunity(), target);
  }
  
  // optional uint32 ObtainTitle = 62;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(62, this->obtaintitle(), target);
  }
  
  // optional uint32 AwardID = 63;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(63, this->awardid(), target);
  }
  
  // optional uint32 LmtLineID = 64;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(64, this->lmtlineid(), target);
  }
  
  // optional uint32 RedstoneID = 65;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(65, this->redstoneid(), target);
  }
  
  // optional uint32 OgreEvent = 66;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(66, this->ogreevent(), target);
  }
  
  // optional uint32 CorpsValue = 67;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(67, this->corpsvalue(), target);
  }
  
  // optional uint32 DropsDescID = 69;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(69, this->dropsdescid(), target);
  }
  
  // optional uint32 DiffcultIndex = 70;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(70, this->diffcultindex(), target);
  }
  
  // optional uint32 DiffcultAward = 71;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(71, this->diffcultaward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOgreProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string ModelName = 3;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->modelname());
    }
    
    // optional uint32 OgreType = 4;
    if (has_ogretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogretype());
    }
    
    // optional uint32 DropType = 5;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->droptype());
    }
    
    // optional uint32 StrategyID = 6;
    if (has_strategyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->strategyid());
    }
    
    // optional uint32 DropID = 7;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropid());
    }
    
    // optional uint32 Level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DisplayeLevel = 9;
    if (has_displayelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->displayelevel());
    }
    
    // optional uint32 AttackRate = 10;
    if (has_attackrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate());
    }
    
    // optional uint32 AttackTime = 11;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attacktime());
    }
    
    // optional uint32 HPRSpeed = 12;
    if (has_hprspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprspeed());
    }
    
    // optional uint32 MPRSpeeds = 13;
    if (has_mprspeeds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mprspeeds());
    }
    
    // optional uint32 RunSpeed = 14;
    if (has_runspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->runspeed());
    }
    
    // optional uint32 InitLevel = 15;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlevel());
    }
    
    // optional uint32 HP = 16;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MP = 17;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mp());
    }
    
    // optional uint32 PAttack = 18;
    if (has_pattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattack());
    }
    
    // optional uint32 PDefence = 19;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefence());
    }
    
    // optional uint32 PAttackRange = 20;
    if (has_pattackrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackrange());
    }
    
    // optional uint32 PReducePer = 21;
    if (has_preduceper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preduceper());
    }
    
    // optional uint32 MAttack = 22;
    if (has_mattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattack());
    }
    
    // optional uint32 MDefence = 23;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefence());
    }
    
    // optional uint32 MAttackRange = 24;
    if (has_mattackrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackrange());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 MReducePer = 25;
    if (has_mreduceper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mreduceper());
    }
    
    // optional uint32 DeathRate = 26;
    if (has_deathrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathrate());
    }
    
    // optional uint32 DeathValue = 27;
    if (has_deathvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvalue());
    }
    
    // optional uint32 DeathDefense = 28;
    if (has_deathdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefense());
    }
    
    // optional uint32 NormalHitrate = 29;
    if (has_normalhitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalhitrate());
    }
    
    // optional uint32 NormalDuck = 30;
    if (has_normalduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduck());
    }
    
    // optional uint32 Recover = 31;
    if (has_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recover());
    }
    
    // optional uint32 IgnoreDuck = 32;
    if (has_ignoreduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduck());
    }
    
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional uint32 NeedDelay = 35;
    if (has_needdelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needdelay());
    }
    
    // optional uint32 PatrolType = 36;
    if (has_patroltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->patroltype());
    }
    
    // optional uint32 IsInitiative = 37;
    if (has_isinitiative()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isinitiative());
    }
    
    // optional uint32 WalkDistance = 38;
    if (has_walkdistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->walkdistance());
    }
    
    // optional uint32 TeleTime = 39;
    if (has_teletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teletime());
    }
    
    // optional uint32 EnmityDistance = 40;
    if (has_enmitydistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->enmitydistance());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 EnmityTime = 41;
    if (has_enmitytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->enmitytime());
    }
    
    // optional uint32 ClearTimer = 42;
    if (has_cleartimer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleartimer());
    }
    
    // optional uint32 Exp = 43;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
    // optional uint32 InitMoney = 44;
    if (has_initmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmoney());
    }
    
    // optional uint32 DeltaMoney = 45;
    if (has_deltamoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltamoney());
    }
    
    // optional uint32 Resist = 46;
    if (has_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resist());
    }
    
    // optional uint32 TranID = 47;
    if (has_tranid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tranid());
    }
    
    // optional uint32 PkType = 48;
    if (has_pktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pktype());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 GroupID = 49;
    if (has_groupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 SkillID = 50;
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 SkillLevel = 51;
    if (has_skilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllevel());
    }
    
    // optional uint32 SearchDistance = 52;
    if (has_searchdistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->searchdistance());
    }
    
    // optional uint32 LeftTime = 57;
    if (has_lefttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lefttime());
    }
    
    // optional uint32 ResShow = 58;
    if (has_resshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resshow());
    }
    
    // optional uint32 JusticeValue = 60;
    if (has_justicevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->justicevalue());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 BuffImmunity = 61;
    if (has_buffimmunity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffimmunity());
    }
    
    // optional uint32 ObtainTitle = 62;
    if (has_obtaintitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->obtaintitle());
    }
    
    // optional uint32 AwardID = 63;
    if (has_awardid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardid());
    }
    
    // optional uint32 LmtLineID = 64;
    if (has_lmtlineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lmtlineid());
    }
    
    // optional uint32 RedstoneID = 65;
    if (has_redstoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redstoneid());
    }
    
    // optional uint32 OgreEvent = 66;
    if (has_ogreevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogreevent());
    }
    
    // optional uint32 CorpsValue = 67;
    if (has_corpsvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsvalue());
    }
    
    // optional uint32 DropsDescID = 69;
    if (has_dropsdescid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropsdescid());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 DiffcultIndex = 70;
    if (has_diffcultindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diffcultindex());
    }
    
    // optional uint32 DiffcultAward = 71;
    if (has_diffcultaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diffcultaward());
    }
    
  }
  // repeated uint32 ResDef = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->resdef_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resdef(i));
    }
    total_size += 2 * this->resdef_size() + data_size;
  }
  
  // repeated uint32 ResAtt = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->resatt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resatt(i));
    }
    total_size += 2 * this->resatt_size() + data_size;
  }
  
  // repeated uint32 FailTaskID = 59;
  {
    int data_size = 0;
    for (int i = 0; i < this->failtaskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->failtaskid(i));
    }
    total_size += 2 * this->failtaskid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOgreProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOgreProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOgreProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOgreProperty::MergeFrom(const PBOgreProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  resdef_.MergeFrom(from.resdef_);
  resatt_.MergeFrom(from.resatt_);
  failtaskid_.MergeFrom(from.failtaskid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_modelname(from.modelname());
    }
    if (from._has_bit(3)) {
      set_ogretype(from.ogretype());
    }
    if (from._has_bit(4)) {
      set_droptype(from.droptype());
    }
    if (from._has_bit(5)) {
      set_strategyid(from.strategyid());
    }
    if (from._has_bit(6)) {
      set_dropid(from.dropid());
    }
    if (from._has_bit(7)) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_displayelevel(from.displayelevel());
    }
    if (from._has_bit(9)) {
      set_attackrate(from.attackrate());
    }
    if (from._has_bit(10)) {
      set_attacktime(from.attacktime());
    }
    if (from._has_bit(11)) {
      set_hprspeed(from.hprspeed());
    }
    if (from._has_bit(12)) {
      set_mprspeeds(from.mprspeeds());
    }
    if (from._has_bit(13)) {
      set_runspeed(from.runspeed());
    }
    if (from._has_bit(14)) {
      set_initlevel(from.initlevel());
    }
    if (from._has_bit(15)) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_mp(from.mp());
    }
    if (from._has_bit(17)) {
      set_pattack(from.pattack());
    }
    if (from._has_bit(18)) {
      set_pdefence(from.pdefence());
    }
    if (from._has_bit(19)) {
      set_pattackrange(from.pattackrange());
    }
    if (from._has_bit(20)) {
      set_preduceper(from.preduceper());
    }
    if (from._has_bit(21)) {
      set_mattack(from.mattack());
    }
    if (from._has_bit(22)) {
      set_mdefence(from.mdefence());
    }
    if (from._has_bit(23)) {
      set_mattackrange(from.mattackrange());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_mreduceper(from.mreduceper());
    }
    if (from._has_bit(25)) {
      set_deathrate(from.deathrate());
    }
    if (from._has_bit(26)) {
      set_deathvalue(from.deathvalue());
    }
    if (from._has_bit(27)) {
      set_deathdefense(from.deathdefense());
    }
    if (from._has_bit(28)) {
      set_normalhitrate(from.normalhitrate());
    }
    if (from._has_bit(29)) {
      set_normalduck(from.normalduck());
    }
    if (from._has_bit(30)) {
      set_recover(from.recover());
    }
    if (from._has_bit(31)) {
      set_ignoreduck(from.ignoreduck());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from._has_bit(34)) {
      set_needdelay(from.needdelay());
    }
    if (from._has_bit(35)) {
      set_patroltype(from.patroltype());
    }
    if (from._has_bit(36)) {
      set_isinitiative(from.isinitiative());
    }
    if (from._has_bit(37)) {
      set_walkdistance(from.walkdistance());
    }
    if (from._has_bit(38)) {
      set_teletime(from.teletime());
    }
    if (from._has_bit(39)) {
      set_enmitydistance(from.enmitydistance());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_enmitytime(from.enmitytime());
    }
    if (from._has_bit(41)) {
      set_cleartimer(from.cleartimer());
    }
    if (from._has_bit(42)) {
      set_exp(from.exp());
    }
    if (from._has_bit(43)) {
      set_initmoney(from.initmoney());
    }
    if (from._has_bit(44)) {
      set_deltamoney(from.deltamoney());
    }
    if (from._has_bit(45)) {
      set_resist(from.resist());
    }
    if (from._has_bit(46)) {
      set_tranid(from.tranid());
    }
    if (from._has_bit(47)) {
      set_pktype(from.pktype());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(49)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(50)) {
      set_skilllevel(from.skilllevel());
    }
    if (from._has_bit(51)) {
      set_searchdistance(from.searchdistance());
    }
    if (from._has_bit(52)) {
      set_lefttime(from.lefttime());
    }
    if (from._has_bit(53)) {
      set_resshow(from.resshow());
    }
    if (from._has_bit(55)) {
      set_justicevalue(from.justicevalue());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_buffimmunity(from.buffimmunity());
    }
    if (from._has_bit(57)) {
      set_obtaintitle(from.obtaintitle());
    }
    if (from._has_bit(58)) {
      set_awardid(from.awardid());
    }
    if (from._has_bit(59)) {
      set_lmtlineid(from.lmtlineid());
    }
    if (from._has_bit(60)) {
      set_redstoneid(from.redstoneid());
    }
    if (from._has_bit(61)) {
      set_ogreevent(from.ogreevent());
    }
    if (from._has_bit(62)) {
      set_corpsvalue(from.corpsvalue());
    }
    if (from._has_bit(63)) {
      set_dropsdescid(from.dropsdescid());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set_diffcultindex(from.diffcultindex());
    }
    if (from._has_bit(65)) {
      set_diffcultaward(from.diffcultaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOgreProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreProperty::CopyFrom(const PBOgreProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreProperty::Swap(PBOgreProperty* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(modelname_, other->modelname_);
    std::swap(ogretype_, other->ogretype_);
    std::swap(droptype_, other->droptype_);
    std::swap(strategyid_, other->strategyid_);
    std::swap(dropid_, other->dropid_);
    std::swap(level_, other->level_);
    std::swap(displayelevel_, other->displayelevel_);
    std::swap(attackrate_, other->attackrate_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(hprspeed_, other->hprspeed_);
    std::swap(mprspeeds_, other->mprspeeds_);
    std::swap(runspeed_, other->runspeed_);
    std::swap(initlevel_, other->initlevel_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(pattack_, other->pattack_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(pattackrange_, other->pattackrange_);
    std::swap(preduceper_, other->preduceper_);
    std::swap(mattack_, other->mattack_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(mattackrange_, other->mattackrange_);
    std::swap(mreduceper_, other->mreduceper_);
    std::swap(deathrate_, other->deathrate_);
    std::swap(deathvalue_, other->deathvalue_);
    std::swap(deathdefense_, other->deathdefense_);
    std::swap(normalhitrate_, other->normalhitrate_);
    std::swap(normalduck_, other->normalduck_);
    std::swap(recover_, other->recover_);
    std::swap(ignoreduck_, other->ignoreduck_);
    resdef_.Swap(&other->resdef_);
    resatt_.Swap(&other->resatt_);
    std::swap(needdelay_, other->needdelay_);
    std::swap(patroltype_, other->patroltype_);
    std::swap(isinitiative_, other->isinitiative_);
    std::swap(walkdistance_, other->walkdistance_);
    std::swap(teletime_, other->teletime_);
    std::swap(enmitydistance_, other->enmitydistance_);
    std::swap(enmitytime_, other->enmitytime_);
    std::swap(cleartimer_, other->cleartimer_);
    std::swap(exp_, other->exp_);
    std::swap(initmoney_, other->initmoney_);
    std::swap(deltamoney_, other->deltamoney_);
    std::swap(resist_, other->resist_);
    std::swap(tranid_, other->tranid_);
    std::swap(pktype_, other->pktype_);
    std::swap(groupid_, other->groupid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(searchdistance_, other->searchdistance_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(resshow_, other->resshow_);
    failtaskid_.Swap(&other->failtaskid_);
    std::swap(justicevalue_, other->justicevalue_);
    std::swap(buffimmunity_, other->buffimmunity_);
    std::swap(obtaintitle_, other->obtaintitle_);
    std::swap(awardid_, other->awardid_);
    std::swap(lmtlineid_, other->lmtlineid_);
    std::swap(redstoneid_, other->redstoneid_);
    std::swap(ogreevent_, other->ogreevent_);
    std::swap(corpsvalue_, other->corpsvalue_);
    std::swap(dropsdescid_, other->dropsdescid_);
    std::swap(diffcultindex_, other->diffcultindex_);
    std::swap(diffcultaward_, other->diffcultaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOgreProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOgreProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOgreProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOgreProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBox_Click::kEventFieldNumber;
const int PBBox_Click::kProbabilityFieldNumber;
#endif  // !_MSC_VER

PBBox_Click::PBBox_Click()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBox_Click::InitAsDefaultInstance() {}

PBBox_Click::PBBox_Click(const PBBox_Click& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBox_Click::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  probability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBox_Click::~PBBox_Click() {
  SharedDtor();
}

void PBBox_Click::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBox_Click::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBox_Click_descriptor_;
}

const PBBox_Click& PBBox_Click::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBox_Click* PBBox_Click::default_instance_ = NULL;

PBBox_Click* PBBox_Click::New() const {
  return new PBBox_Click;
}

void PBBox_Click::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0u;
    probability_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBox_Click::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &event_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Probability;
        break;
      }
      
      // optional uint32 Probability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probability_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBox_Click::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBox_Click::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Event = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->event(), output);
  }
  
  // optional uint32 Probability = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->probability(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBox_Click::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Event = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->event(), target);
  }
  
  // optional uint32 Probability = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->probability(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBox_Click::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->event());
    }
    
    // optional uint32 Probability = 2;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probability());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBox_Click::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBox_Click* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBox_Click*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBox_Click::MergeFrom(const PBBox_Click& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_event(from.event());
    }
    if (from._has_bit(1)) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBox_Click::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBox_Click::CopyFrom(const PBBox_Click& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBox_Click::Swap(PBBox_Click* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBox_Click::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBox_Click::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBox_Click::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBox_Click_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOgreBox::kOgreInfoFieldNumber;
const int PBOgreBox::kClickFieldNumber;
const int PBOgreBox::kBoxTypeFieldNumber;
const int PBOgreBox::kKeyIDFieldNumber;
#endif  // !_MSC_VER

PBOgreBox::PBOgreBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOgreBox::InitAsDefaultInstance() {  ogreinfo_ = const_cast< ::PBOgreProperty*>(&::PBOgreProperty::default_instance());
}

PBOgreBox::PBOgreBox(const PBOgreBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOgreBox::SharedCtor() {
  _cached_size_ = 0;
  ogreinfo_ = NULL;
  boxtype_ = 0u;
  keyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOgreBox::~PBOgreBox() {
  SharedDtor();
}

void PBOgreBox::SharedDtor() {
  if (this != default_instance_) {
    delete ogreinfo_;
  }
}

const ::google::protobuf::Descriptor* PBOgreBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOgreBox_descriptor_;
}

const PBOgreBox& PBOgreBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOgreBox* PBOgreBox::default_instance_ = NULL;

PBOgreBox* PBOgreBox::New() const {
  return new PBOgreBox;
}

void PBOgreBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ogreinfo_ != NULL) ogreinfo_->::PBOgreProperty::Clear();
    }
    boxtype_ = 0u;
    keyid_ = 0u;
  }
  click_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOgreBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBOgreProperty OgreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_ogreinfo()));
        if (input->ExpectTag(18)) goto parse_Click;
        break;
      }
      
      // repeated .PBBox_Click Click = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Click:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_click()));
        if (input->ExpectTag(18)) goto parse_Click;
        if (input->ExpectTag(24)) goto parse_BoxType;
        break;
      }
      
      // optional uint32 BoxType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BoxType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &boxtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_KeyID;
        break;
      }
      
      // optional uint32 KeyID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KeyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &keyid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOgreBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOgreBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBOgreProperty OgreInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->ogreinfo(), output);
  }
  
  // repeated .PBBox_Click Click = 2;
  for (int i = 0; i < this->click_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->click(i), output);
  }
  
  // optional uint32 BoxType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->boxtype(), output);
  }
  
  // optional uint32 KeyID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->keyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOgreBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBOgreProperty OgreInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->ogreinfo(), target);
  }
  
  // repeated .PBBox_Click Click = 2;
  for (int i = 0; i < this->click_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->click(i), target);
  }
  
  // optional uint32 BoxType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->boxtype(), target);
  }
  
  // optional uint32 KeyID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->keyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOgreBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBOgreProperty OgreInfo = 1;
    if (has_ogreinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->ogreinfo());
    }
    
    // optional uint32 BoxType = 3;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->boxtype());
    }
    
    // optional uint32 KeyID = 4;
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->keyid());
    }
    
  }
  // repeated .PBBox_Click Click = 2;
  total_size += 1 * this->click_size();
  for (int i = 0; i < this->click_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->click(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOgreBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOgreBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOgreBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOgreBox::MergeFrom(const PBOgreBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  click_.MergeFrom(from.click_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_ogreinfo()->::PBOgreProperty::MergeFrom(from.ogreinfo());
    }
    if (from._has_bit(2)) {
      set_boxtype(from.boxtype());
    }
    if (from._has_bit(3)) {
      set_keyid(from.keyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOgreBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreBox::CopyFrom(const PBOgreBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreBox::Swap(PBOgreBox* other) {
  if (other != this) {
    std::swap(ogreinfo_, other->ogreinfo_);
    click_.Swap(&other->click_);
    std::swap(boxtype_, other->boxtype_);
    std::swap(keyid_, other->keyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOgreBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOgreBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOgreBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOgreBox_reflection_;
}

// ===================================================================

const ::std::string PBShowPet::_default_name_;
const ::std::string PBShowPet::_default_model_;
const ::std::string PBShowPet::_default_iconname_;
#ifndef _MSC_VER
const int PBShowPet::kTempIDFieldNumber;
const int PBShowPet::kNameFieldNumber;
const int PBShowPet::kModelFieldNumber;
const int PBShowPet::kIconNameFieldNumber;
const int PBShowPet::kMetierIDFieldNumber;
const int PBShowPet::kMaxLevelFieldNumber;
const int PBShowPet::kLevelRequireFieldNumber;
const int PBShowPet::kExceedLevelFieldNumber;
const int PBShowPet::kPetItemIDFieldNumber;
const int PBShowPet::kRevertCostFieldNumber;
const int PBShowPet::kInitStorageFieldNumber;
const int PBShowPet::kLevelIncStorageFieldNumber;
const int PBShowPet::kIncStorageFieldNumber;
const int PBShowPet::kExpPerMinFieldNumber;
const int PBShowPet::kRepletionLimitFieldNumber;
const int PBShowPet::kRepletionHPFieldNumber;
const int PBShowPet::kRevertHPValueFieldNumber;
const int PBShowPet::kMinRepletion1FieldNumber;
const int PBShowPet::kMaxRepletion1FieldNumber;
const int PBShowPet::kExpSpeedRate1FieldNumber;
const int PBShowPet::kMinRepletion2FieldNumber;
const int PBShowPet::kMaxRepletion2FieldNumber;
const int PBShowPet::kExpSpeedRate2FieldNumber;
const int PBShowPet::kMinRepletion3FieldNumber;
const int PBShowPet::kMaxRepletion3FieldNumber;
const int PBShowPet::kExpSpeedRate3FieldNumber;
const int PBShowPet::kMinRepletion4FieldNumber;
const int PBShowPet::kMaxRepletion4FieldNumber;
const int PBShowPet::kExpSpeedRate4FieldNumber;
const int PBShowPet::kMinRepletion5FieldNumber;
const int PBShowPet::kMaxRepletion5FieldNumber;
const int PBShowPet::kExpSpeedRate5FieldNumber;
const int PBShowPet::kFoodComboFieldNumber;
#endif  // !_MSC_VER

PBShowPet::PBShowPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBShowPet::InitAsDefaultInstance() {}

PBShowPet::PBShowPet(const PBShowPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBShowPet::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  model_ = const_cast< ::std::string*>(&_default_model_);
  iconname_ = const_cast< ::std::string*>(&_default_iconname_);
  metierid_ = 0u;
  maxlevel_ = 0u;
  levelrequire_ = 0u;
  exceedlevel_ = 0u;
  petitemid_ = 0u;
  revertcost_ = 0u;
  initstorage_ = 0u;
  levelincstorage_ = 0u;
  incstorage_ = 0u;
  exppermin_ = 0u;
  repletionlimit_ = 0u;
  repletionhp_ = 0u;
  reverthpvalue_ = 0u;
  minrepletion1_ = 0u;
  maxrepletion1_ = 0u;
  expspeedrate1_ = 0u;
  minrepletion2_ = 0u;
  maxrepletion2_ = 0u;
  expspeedrate2_ = 0u;
  minrepletion3_ = 0u;
  maxrepletion3_ = 0u;
  expspeedrate3_ = 0u;
  minrepletion4_ = 0u;
  maxrepletion4_ = 0u;
  expspeedrate4_ = 0u;
  minrepletion5_ = 0u;
  maxrepletion5_ = 0u;
  expspeedrate5_ = 0u;
  foodcombo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBShowPet::~PBShowPet() {
  SharedDtor();
}

void PBShowPet::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (model_ != &_default_model_) {
    delete model_;
  }
  if (iconname_ != &_default_iconname_) {
    delete iconname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBShowPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBShowPet_descriptor_;
}

const PBShowPet& PBShowPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBShowPet* PBShowPet::default_instance_ = NULL;

PBShowPet* PBShowPet::New() const {
  return new PBShowPet;
}

void PBShowPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (model_ != &_default_model_) {
        model_->clear();
      }
    }
    if (_has_bit(3)) {
      if (iconname_ != &_default_iconname_) {
        iconname_->clear();
      }
    }
    metierid_ = 0u;
    maxlevel_ = 0u;
    levelrequire_ = 0u;
    exceedlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    petitemid_ = 0u;
    revertcost_ = 0u;
    initstorage_ = 0u;
    levelincstorage_ = 0u;
    incstorage_ = 0u;
    exppermin_ = 0u;
    repletionlimit_ = 0u;
    repletionhp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reverthpvalue_ = 0u;
    minrepletion1_ = 0u;
    maxrepletion1_ = 0u;
    expspeedrate1_ = 0u;
    minrepletion2_ = 0u;
    maxrepletion2_ = 0u;
    expspeedrate2_ = 0u;
    minrepletion3_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxrepletion3_ = 0u;
    expspeedrate3_ = 0u;
    minrepletion4_ = 0u;
    maxrepletion4_ = 0u;
    expspeedrate4_ = 0u;
    minrepletion5_ = 0u;
    maxrepletion5_ = 0u;
    expspeedrate5_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    foodcombo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBShowPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Model;
        break;
      }
      
      // optional string Model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Model:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_model()));
        if (input->ExpectTag(34)) goto parse_IconName;
        break;
      }
      
      // optional string IconName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IconName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_iconname()));
        if (input->ExpectTag(40)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LevelRequire;
        break;
      }
      
      // optional uint32 LevelRequire = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelrequire_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ExceedLevel;
        break;
      }
      
      // optional uint32 ExceedLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExceedLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exceedlevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PetItemID;
        break;
      }
      
      // optional uint32 PetItemID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petitemid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RevertCost;
        break;
      }
      
      // optional uint32 RevertCost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RevertCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &revertcost_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_InitStorage;
        break;
      }
      
      // optional uint32 InitStorage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitStorage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initstorage_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_LevelIncStorage;
        break;
      }
      
      // optional uint32 LevelIncStorage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelIncStorage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelincstorage_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_IncStorage;
        break;
      }
      
      // optional uint32 IncStorage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncStorage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incstorage_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ExpPerMin;
        break;
      }
      
      // optional uint32 ExpPerMin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpPerMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exppermin_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_RepletionLimit;
        break;
      }
      
      // optional uint32 RepletionLimit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepletionLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repletionlimit_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_RepletionHP;
        break;
      }
      
      // optional uint32 RepletionHP = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepletionHP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repletionhp_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_RevertHPValue;
        break;
      }
      
      // optional uint32 RevertHPValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RevertHPValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reverthpvalue_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_MinRepletion1;
        break;
      }
      
      // optional uint32 MinRepletion1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion1_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_MaxRepletion1;
        break;
      }
      
      // optional uint32 MaxRepletion1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion1_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_ExpSpeedRate1;
        break;
      }
      
      // optional uint32 ExpSpeedRate1 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate1_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_MinRepletion2;
        break;
      }
      
      // optional uint32 MinRepletion2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion2_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MaxRepletion2;
        break;
      }
      
      // optional uint32 MaxRepletion2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion2_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_ExpSpeedRate2;
        break;
      }
      
      // optional uint32 ExpSpeedRate2 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate2_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_MinRepletion3;
        break;
      }
      
      // optional uint32 MinRepletion3 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion3_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_MaxRepletion3;
        break;
      }
      
      // optional uint32 MaxRepletion3 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion3_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_ExpSpeedRate3;
        break;
      }
      
      // optional uint32 ExpSpeedRate3 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate3_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_MinRepletion4;
        break;
      }
      
      // optional uint32 MinRepletion4 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion4_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_MaxRepletion4;
        break;
      }
      
      // optional uint32 MaxRepletion4 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion4_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_ExpSpeedRate4;
        break;
      }
      
      // optional uint32 ExpSpeedRate4 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate4_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_MinRepletion5;
        break;
      }
      
      // optional uint32 MinRepletion5 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion5_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_MaxRepletion5;
        break;
      }
      
      // optional uint32 MaxRepletion5 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion5_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_ExpSpeedRate5;
        break;
      }
      
      // optional uint32 ExpSpeedRate5 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate5_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_FoodCombo;
        break;
      }
      
      // optional uint32 FoodCombo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FoodCombo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &foodcombo_));
        _set_bit(32);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBShowPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBShowPet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->model(), output);
  }
  
  // optional string IconName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->iconname(), output);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metierid(), output);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxlevel(), output);
  }
  
  // optional uint32 LevelRequire = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->levelrequire(), output);
  }
  
  // optional uint32 ExceedLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->exceedlevel(), output);
  }
  
  // optional uint32 PetItemID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->petitemid(), output);
  }
  
  // optional uint32 RevertCost = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->revertcost(), output);
  }
  
  // optional uint32 InitStorage = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->initstorage(), output);
  }
  
  // optional uint32 LevelIncStorage = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->levelincstorage(), output);
  }
  
  // optional uint32 IncStorage = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->incstorage(), output);
  }
  
  // optional uint32 ExpPerMin = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->exppermin(), output);
  }
  
  // optional uint32 RepletionLimit = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->repletionlimit(), output);
  }
  
  // optional uint32 RepletionHP = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->repletionhp(), output);
  }
  
  // optional uint32 RevertHPValue = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->reverthpvalue(), output);
  }
  
  // optional uint32 MinRepletion1 = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->minrepletion1(), output);
  }
  
  // optional uint32 MaxRepletion1 = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->maxrepletion1(), output);
  }
  
  // optional uint32 ExpSpeedRate1 = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->expspeedrate1(), output);
  }
  
  // optional uint32 MinRepletion2 = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->minrepletion2(), output);
  }
  
  // optional uint32 MaxRepletion2 = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->maxrepletion2(), output);
  }
  
  // optional uint32 ExpSpeedRate2 = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->expspeedrate2(), output);
  }
  
  // optional uint32 MinRepletion3 = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->minrepletion3(), output);
  }
  
  // optional uint32 MaxRepletion3 = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->maxrepletion3(), output);
  }
  
  // optional uint32 ExpSpeedRate3 = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->expspeedrate3(), output);
  }
  
  // optional uint32 MinRepletion4 = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->minrepletion4(), output);
  }
  
  // optional uint32 MaxRepletion4 = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->maxrepletion4(), output);
  }
  
  // optional uint32 ExpSpeedRate4 = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->expspeedrate4(), output);
  }
  
  // optional uint32 MinRepletion5 = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->minrepletion5(), output);
  }
  
  // optional uint32 MaxRepletion5 = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->maxrepletion5(), output);
  }
  
  // optional uint32 ExpSpeedRate5 = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->expspeedrate5(), output);
  }
  
  // optional uint32 FoodCombo = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->foodcombo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBShowPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->model(), target);
  }
  
  // optional string IconName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->iconname(), target);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metierid(), target);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxlevel(), target);
  }
  
  // optional uint32 LevelRequire = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->levelrequire(), target);
  }
  
  // optional uint32 ExceedLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->exceedlevel(), target);
  }
  
  // optional uint32 PetItemID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->petitemid(), target);
  }
  
  // optional uint32 RevertCost = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->revertcost(), target);
  }
  
  // optional uint32 InitStorage = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->initstorage(), target);
  }
  
  // optional uint32 LevelIncStorage = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->levelincstorage(), target);
  }
  
  // optional uint32 IncStorage = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->incstorage(), target);
  }
  
  // optional uint32 ExpPerMin = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->exppermin(), target);
  }
  
  // optional uint32 RepletionLimit = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->repletionlimit(), target);
  }
  
  // optional uint32 RepletionHP = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->repletionhp(), target);
  }
  
  // optional uint32 RevertHPValue = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->reverthpvalue(), target);
  }
  
  // optional uint32 MinRepletion1 = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->minrepletion1(), target);
  }
  
  // optional uint32 MaxRepletion1 = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->maxrepletion1(), target);
  }
  
  // optional uint32 ExpSpeedRate1 = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->expspeedrate1(), target);
  }
  
  // optional uint32 MinRepletion2 = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->minrepletion2(), target);
  }
  
  // optional uint32 MaxRepletion2 = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->maxrepletion2(), target);
  }
  
  // optional uint32 ExpSpeedRate2 = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->expspeedrate2(), target);
  }
  
  // optional uint32 MinRepletion3 = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->minrepletion3(), target);
  }
  
  // optional uint32 MaxRepletion3 = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->maxrepletion3(), target);
  }
  
  // optional uint32 ExpSpeedRate3 = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->expspeedrate3(), target);
  }
  
  // optional uint32 MinRepletion4 = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->minrepletion4(), target);
  }
  
  // optional uint32 MaxRepletion4 = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->maxrepletion4(), target);
  }
  
  // optional uint32 ExpSpeedRate4 = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->expspeedrate4(), target);
  }
  
  // optional uint32 MinRepletion5 = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->minrepletion5(), target);
  }
  
  // optional uint32 MaxRepletion5 = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->maxrepletion5(), target);
  }
  
  // optional uint32 ExpSpeedRate5 = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->expspeedrate5(), target);
  }
  
  // optional uint32 FoodCombo = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->foodcombo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBShowPet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->model());
    }
    
    // optional string IconName = 4;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->iconname());
    }
    
    // optional uint32 MetierID = 5;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 MaxLevel = 6;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 LevelRequire = 7;
    if (has_levelrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelrequire());
    }
    
    // optional uint32 ExceedLevel = 8;
    if (has_exceedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exceedlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PetItemID = 9;
    if (has_petitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petitemid());
    }
    
    // optional uint32 RevertCost = 10;
    if (has_revertcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->revertcost());
    }
    
    // optional uint32 InitStorage = 11;
    if (has_initstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initstorage());
    }
    
    // optional uint32 LevelIncStorage = 12;
    if (has_levelincstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelincstorage());
    }
    
    // optional uint32 IncStorage = 13;
    if (has_incstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incstorage());
    }
    
    // optional uint32 ExpPerMin = 14;
    if (has_exppermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exppermin());
    }
    
    // optional uint32 RepletionLimit = 15;
    if (has_repletionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repletionlimit());
    }
    
    // optional uint32 RepletionHP = 16;
    if (has_repletionhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repletionhp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 RevertHPValue = 17;
    if (has_reverthpvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reverthpvalue());
    }
    
    // optional uint32 MinRepletion1 = 18;
    if (has_minrepletion1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion1());
    }
    
    // optional uint32 MaxRepletion1 = 19;
    if (has_maxrepletion1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion1());
    }
    
    // optional uint32 ExpSpeedRate1 = 20;
    if (has_expspeedrate1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate1());
    }
    
    // optional uint32 MinRepletion2 = 21;
    if (has_minrepletion2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion2());
    }
    
    // optional uint32 MaxRepletion2 = 22;
    if (has_maxrepletion2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion2());
    }
    
    // optional uint32 ExpSpeedRate2 = 23;
    if (has_expspeedrate2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate2());
    }
    
    // optional uint32 MinRepletion3 = 24;
    if (has_minrepletion3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion3());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 MaxRepletion3 = 25;
    if (has_maxrepletion3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion3());
    }
    
    // optional uint32 ExpSpeedRate3 = 26;
    if (has_expspeedrate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate3());
    }
    
    // optional uint32 MinRepletion4 = 27;
    if (has_minrepletion4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion4());
    }
    
    // optional uint32 MaxRepletion4 = 28;
    if (has_maxrepletion4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion4());
    }
    
    // optional uint32 ExpSpeedRate4 = 29;
    if (has_expspeedrate4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate4());
    }
    
    // optional uint32 MinRepletion5 = 30;
    if (has_minrepletion5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion5());
    }
    
    // optional uint32 MaxRepletion5 = 31;
    if (has_maxrepletion5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion5());
    }
    
    // optional uint32 ExpSpeedRate5 = 32;
    if (has_expspeedrate5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate5());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 FoodCombo = 33;
    if (has_foodcombo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->foodcombo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBShowPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBShowPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBShowPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBShowPet::MergeFrom(const PBShowPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_model(from.model());
    }
    if (from._has_bit(3)) {
      set_iconname(from.iconname());
    }
    if (from._has_bit(4)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(5)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(6)) {
      set_levelrequire(from.levelrequire());
    }
    if (from._has_bit(7)) {
      set_exceedlevel(from.exceedlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_petitemid(from.petitemid());
    }
    if (from._has_bit(9)) {
      set_revertcost(from.revertcost());
    }
    if (from._has_bit(10)) {
      set_initstorage(from.initstorage());
    }
    if (from._has_bit(11)) {
      set_levelincstorage(from.levelincstorage());
    }
    if (from._has_bit(12)) {
      set_incstorage(from.incstorage());
    }
    if (from._has_bit(13)) {
      set_exppermin(from.exppermin());
    }
    if (from._has_bit(14)) {
      set_repletionlimit(from.repletionlimit());
    }
    if (from._has_bit(15)) {
      set_repletionhp(from.repletionhp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_reverthpvalue(from.reverthpvalue());
    }
    if (from._has_bit(17)) {
      set_minrepletion1(from.minrepletion1());
    }
    if (from._has_bit(18)) {
      set_maxrepletion1(from.maxrepletion1());
    }
    if (from._has_bit(19)) {
      set_expspeedrate1(from.expspeedrate1());
    }
    if (from._has_bit(20)) {
      set_minrepletion2(from.minrepletion2());
    }
    if (from._has_bit(21)) {
      set_maxrepletion2(from.maxrepletion2());
    }
    if (from._has_bit(22)) {
      set_expspeedrate2(from.expspeedrate2());
    }
    if (from._has_bit(23)) {
      set_minrepletion3(from.minrepletion3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_maxrepletion3(from.maxrepletion3());
    }
    if (from._has_bit(25)) {
      set_expspeedrate3(from.expspeedrate3());
    }
    if (from._has_bit(26)) {
      set_minrepletion4(from.minrepletion4());
    }
    if (from._has_bit(27)) {
      set_maxrepletion4(from.maxrepletion4());
    }
    if (from._has_bit(28)) {
      set_expspeedrate4(from.expspeedrate4());
    }
    if (from._has_bit(29)) {
      set_minrepletion5(from.minrepletion5());
    }
    if (from._has_bit(30)) {
      set_maxrepletion5(from.maxrepletion5());
    }
    if (from._has_bit(31)) {
      set_expspeedrate5(from.expspeedrate5());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_foodcombo(from.foodcombo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBShowPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShowPet::CopyFrom(const PBShowPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShowPet::Swap(PBShowPet* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(iconname_, other->iconname_);
    std::swap(metierid_, other->metierid_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(levelrequire_, other->levelrequire_);
    std::swap(exceedlevel_, other->exceedlevel_);
    std::swap(petitemid_, other->petitemid_);
    std::swap(revertcost_, other->revertcost_);
    std::swap(initstorage_, other->initstorage_);
    std::swap(levelincstorage_, other->levelincstorage_);
    std::swap(incstorage_, other->incstorage_);
    std::swap(exppermin_, other->exppermin_);
    std::swap(repletionlimit_, other->repletionlimit_);
    std::swap(repletionhp_, other->repletionhp_);
    std::swap(reverthpvalue_, other->reverthpvalue_);
    std::swap(minrepletion1_, other->minrepletion1_);
    std::swap(maxrepletion1_, other->maxrepletion1_);
    std::swap(expspeedrate1_, other->expspeedrate1_);
    std::swap(minrepletion2_, other->minrepletion2_);
    std::swap(maxrepletion2_, other->maxrepletion2_);
    std::swap(expspeedrate2_, other->expspeedrate2_);
    std::swap(minrepletion3_, other->minrepletion3_);
    std::swap(maxrepletion3_, other->maxrepletion3_);
    std::swap(expspeedrate3_, other->expspeedrate3_);
    std::swap(minrepletion4_, other->minrepletion4_);
    std::swap(maxrepletion4_, other->maxrepletion4_);
    std::swap(expspeedrate4_, other->expspeedrate4_);
    std::swap(minrepletion5_, other->minrepletion5_);
    std::swap(maxrepletion5_, other->maxrepletion5_);
    std::swap(expspeedrate5_, other->expspeedrate5_);
    std::swap(foodcombo_, other->foodcombo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBShowPet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBShowPet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBShowPet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBShowPet_reflection_;
}

// ===================================================================

const ::std::string PBBattlePet::_default_name_;
const ::std::string PBBattlePet::_default_model_;
const ::std::string PBBattlePet::_default_iconname_;
#ifndef _MSC_VER
const int PBBattlePet::kTempIDFieldNumber;
const int PBBattlePet::kNameFieldNumber;
const int PBBattlePet::kModelFieldNumber;
const int PBBattlePet::kIconNameFieldNumber;
const int PBBattlePet::kMetierIDFieldNumber;
const int PBBattlePet::kMaxLevelFieldNumber;
const int PBBattlePet::kLevelRequireFieldNumber;
const int PBBattlePet::kExceedLevelFieldNumber;
const int PBBattlePet::kPetItemIDFieldNumber;
const int PBBattlePet::kRevertCostFieldNumber;
const int PBBattlePet::kRepletionLimitFieldNumber;
const int PBBattlePet::kMinRepletion1FieldNumber;
const int PBBattlePet::kMaxRepletion1FieldNumber;
const int PBBattlePet::kExpSpeedRate1FieldNumber;
const int PBBattlePet::kHPRate1FieldNumber;
const int PBBattlePet::kAttackRate1FieldNumber;
const int PBBattlePet::kMinRepletion2FieldNumber;
const int PBBattlePet::kMaxRepletion2FieldNumber;
const int PBBattlePet::kExpSpeedRate2FieldNumber;
const int PBBattlePet::kHPRate2FieldNumber;
const int PBBattlePet::kAttackRate2FieldNumber;
const int PBBattlePet::kMinRepletion3FieldNumber;
const int PBBattlePet::kMaxRepletion3FieldNumber;
const int PBBattlePet::kExpSpeedRate3FieldNumber;
const int PBBattlePet::kHPRate3FieldNumber;
const int PBBattlePet::kAttackRate3FieldNumber;
const int PBBattlePet::kMinRepletion4FieldNumber;
const int PBBattlePet::kMaxRepletion4FieldNumber;
const int PBBattlePet::kExpSpeedRate4FieldNumber;
const int PBBattlePet::kHPRate4FieldNumber;
const int PBBattlePet::kAttackRate4FieldNumber;
const int PBBattlePet::kMinRepletion5FieldNumber;
const int PBBattlePet::kMaxRepletion5FieldNumber;
const int PBBattlePet::kExpSpeedRate5FieldNumber;
const int PBBattlePet::kHPRate5FieldNumber;
const int PBBattlePet::kAttackRate5FieldNumber;
const int PBBattlePet::kHPValueFieldNumber;
const int PBBattlePet::kHPPotentialFieldNumber;
const int PBBattlePet::kMPValueFieldNumber;
const int PBBattlePet::kMPPotentialFieldNumber;
const int PBBattlePet::kPAttackFieldNumber;
const int PBBattlePet::kPAttackPotentialFieldNumber;
const int PBBattlePet::kMAttackFieldNumber;
const int PBBattlePet::kMAttackPotentialFieldNumber;
const int PBBattlePet::kPDefenceFieldNumber;
const int PBBattlePet::kPDefencePotentialFieldNumber;
const int PBBattlePet::kMDefenceFieldNumber;
const int PBBattlePet::kMDefencePotentialFieldNumber;
const int PBBattlePet::kPResistFieldNumber;
const int PBBattlePet::kPResistPotentialFieldNumber;
const int PBBattlePet::kMResistFieldNumber;
const int PBBattlePet::kMResistPotentialFieldNumber;
const int PBBattlePet::kAbnResistFieldNumber;
const int PBBattlePet::kAbnResistPotentialFieldNumber;
const int PBBattlePet::kFireResistFieldNumber;
const int PBBattlePet::kFireResistPotentialFieldNumber;
const int PBBattlePet::kWindResistFieldNumber;
const int PBBattlePet::kWindResistPotentialFieldNumber;
const int PBBattlePet::kLightResistFieldNumber;
const int PBBattlePet::kLightResistPotentialFieldNumber;
const int PBBattlePet::kShadowResistFieldNumber;
const int PBBattlePet::kShadowResistPotentialFieldNumber;
const int PBBattlePet::kWaterResistFieldNumber;
const int PBBattlePet::kWaterResistPotentialFieldNumber;
const int PBBattlePet::kEarthResistFieldNumber;
const int PBBattlePet::kEarthResistPotentialFieldNumber;
const int PBBattlePet::kFoodComboFieldNumber;
#endif  // !_MSC_VER

PBBattlePet::PBBattlePet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattlePet::InitAsDefaultInstance() {}

PBBattlePet::PBBattlePet(const PBBattlePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattlePet::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  model_ = const_cast< ::std::string*>(&_default_model_);
  iconname_ = const_cast< ::std::string*>(&_default_iconname_);
  metierid_ = 0u;
  maxlevel_ = 0u;
  levelrequire_ = 0u;
  exceedlevel_ = 0u;
  petitemid_ = 0u;
  revertcost_ = 0u;
  repletionlimit_ = 0u;
  minrepletion1_ = 0u;
  maxrepletion1_ = 0u;
  expspeedrate1_ = 0u;
  hprate1_ = 0u;
  attackrate1_ = 0u;
  minrepletion2_ = 0u;
  maxrepletion2_ = 0u;
  expspeedrate2_ = 0u;
  hprate2_ = 0u;
  attackrate2_ = 0u;
  minrepletion3_ = 0u;
  maxrepletion3_ = 0u;
  expspeedrate3_ = 0u;
  hprate3_ = 0u;
  attackrate3_ = 0u;
  minrepletion4_ = 0u;
  maxrepletion4_ = 0u;
  expspeedrate4_ = 0u;
  hprate4_ = 0u;
  attackrate4_ = 0u;
  minrepletion5_ = 0u;
  maxrepletion5_ = 0u;
  expspeedrate5_ = 0u;
  hprate5_ = 0u;
  attackrate5_ = 0u;
  hpvalue_ = 0u;
  hppotential_ = 0u;
  mpvalue_ = 0u;
  mppotential_ = 0u;
  pattack_ = 0u;
  pattackpotential_ = 0u;
  mattack_ = 0u;
  mattackpotential_ = 0u;
  pdefence_ = 0u;
  pdefencepotential_ = 0u;
  mdefence_ = 0u;
  mdefencepotential_ = 0u;
  presist_ = 0u;
  presistpotential_ = 0u;
  mresist_ = 0u;
  mresistpotential_ = 0u;
  abnresist_ = 0u;
  abnresistpotential_ = 0u;
  fireresist_ = 0u;
  fireresistpotential_ = 0u;
  windresist_ = 0u;
  windresistpotential_ = 0u;
  lightresist_ = 0u;
  lightresistpotential_ = 0u;
  shadowresist_ = 0u;
  shadowresistpotential_ = 0u;
  waterresist_ = 0u;
  waterresistpotential_ = 0u;
  earthresist_ = 0u;
  earthresistpotential_ = 0u;
  foodcombo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattlePet::~PBBattlePet() {
  SharedDtor();
}

void PBBattlePet::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (model_ != &_default_model_) {
    delete model_;
  }
  if (iconname_ != &_default_iconname_) {
    delete iconname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBattlePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattlePet_descriptor_;
}

const PBBattlePet& PBBattlePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBattlePet* PBBattlePet::default_instance_ = NULL;

PBBattlePet* PBBattlePet::New() const {
  return new PBBattlePet;
}

void PBBattlePet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (model_ != &_default_model_) {
        model_->clear();
      }
    }
    if (_has_bit(3)) {
      if (iconname_ != &_default_iconname_) {
        iconname_->clear();
      }
    }
    metierid_ = 0u;
    maxlevel_ = 0u;
    levelrequire_ = 0u;
    exceedlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    petitemid_ = 0u;
    revertcost_ = 0u;
    repletionlimit_ = 0u;
    minrepletion1_ = 0u;
    maxrepletion1_ = 0u;
    expspeedrate1_ = 0u;
    hprate1_ = 0u;
    attackrate1_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    minrepletion2_ = 0u;
    maxrepletion2_ = 0u;
    expspeedrate2_ = 0u;
    hprate2_ = 0u;
    attackrate2_ = 0u;
    minrepletion3_ = 0u;
    maxrepletion3_ = 0u;
    expspeedrate3_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    hprate3_ = 0u;
    attackrate3_ = 0u;
    minrepletion4_ = 0u;
    maxrepletion4_ = 0u;
    expspeedrate4_ = 0u;
    hprate4_ = 0u;
    attackrate4_ = 0u;
    minrepletion5_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    maxrepletion5_ = 0u;
    expspeedrate5_ = 0u;
    hprate5_ = 0u;
    attackrate5_ = 0u;
    hpvalue_ = 0u;
    hppotential_ = 0u;
    mpvalue_ = 0u;
    mppotential_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    pattack_ = 0u;
    pattackpotential_ = 0u;
    mattack_ = 0u;
    mattackpotential_ = 0u;
    pdefence_ = 0u;
    pdefencepotential_ = 0u;
    mdefence_ = 0u;
    mdefencepotential_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    presist_ = 0u;
    presistpotential_ = 0u;
    mresist_ = 0u;
    mresistpotential_ = 0u;
    abnresist_ = 0u;
    abnresistpotential_ = 0u;
    fireresist_ = 0u;
    fireresistpotential_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    windresist_ = 0u;
    windresistpotential_ = 0u;
    lightresist_ = 0u;
    lightresistpotential_ = 0u;
    shadowresist_ = 0u;
    shadowresistpotential_ = 0u;
    waterresist_ = 0u;
    waterresistpotential_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    earthresist_ = 0u;
    earthresistpotential_ = 0u;
    foodcombo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattlePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Model;
        break;
      }
      
      // optional string Model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Model:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_model()));
        if (input->ExpectTag(34)) goto parse_IconName;
        break;
      }
      
      // optional string IconName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_IconName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_iconname()));
        if (input->ExpectTag(40)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LevelRequire;
        break;
      }
      
      // optional uint32 LevelRequire = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelrequire_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ExceedLevel;
        break;
      }
      
      // optional uint32 ExceedLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExceedLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exceedlevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PetItemID;
        break;
      }
      
      // optional uint32 PetItemID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PetItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &petitemid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RevertCost;
        break;
      }
      
      // optional uint32 RevertCost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RevertCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &revertcost_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_RepletionLimit;
        break;
      }
      
      // optional uint32 RepletionLimit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepletionLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repletionlimit_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_MinRepletion1;
        break;
      }
      
      // optional uint32 MinRepletion1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion1_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MaxRepletion1;
        break;
      }
      
      // optional uint32 MaxRepletion1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion1_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ExpSpeedRate1;
        break;
      }
      
      // optional uint32 ExpSpeedRate1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate1_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_HPRate1;
        break;
      }
      
      // optional uint32 HPRate1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRate1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprate1_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_AttackRate1;
        break;
      }
      
      // optional uint32 AttackRate1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate1_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MinRepletion2;
        break;
      }
      
      // optional uint32 MinRepletion2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion2_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_MaxRepletion2;
        break;
      }
      
      // optional uint32 MaxRepletion2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion2_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_ExpSpeedRate2;
        break;
      }
      
      // optional uint32 ExpSpeedRate2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate2_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_HPRate2;
        break;
      }
      
      // optional uint32 HPRate2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRate2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprate2_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_AttackRate2;
        break;
      }
      
      // optional uint32 AttackRate2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate2_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MinRepletion3;
        break;
      }
      
      // optional uint32 MinRepletion3 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion3_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_MaxRepletion3;
        break;
      }
      
      // optional uint32 MaxRepletion3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion3_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_ExpSpeedRate3;
        break;
      }
      
      // optional uint32 ExpSpeedRate3 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate3_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_HPRate3;
        break;
      }
      
      // optional uint32 HPRate3 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRate3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprate3_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_AttackRate3;
        break;
      }
      
      // optional uint32 AttackRate3 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate3_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_MinRepletion4;
        break;
      }
      
      // optional uint32 MinRepletion4 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion4_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_MaxRepletion4;
        break;
      }
      
      // optional uint32 MaxRepletion4 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion4_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_ExpSpeedRate4;
        break;
      }
      
      // optional uint32 ExpSpeedRate4 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate4_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_HPRate4;
        break;
      }
      
      // optional uint32 HPRate4 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRate4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprate4_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_AttackRate4;
        break;
      }
      
      // optional uint32 AttackRate4 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate4_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_MinRepletion5;
        break;
      }
      
      // optional uint32 MinRepletion5 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinRepletion5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minrepletion5_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_MaxRepletion5;
        break;
      }
      
      // optional uint32 MaxRepletion5 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxRepletion5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxrepletion5_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_ExpSpeedRate5;
        break;
      }
      
      // optional uint32 ExpSpeedRate5 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpSpeedRate5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expspeedrate5_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_HPRate5;
        break;
      }
      
      // optional uint32 HPRate5 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRate5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprate5_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_AttackRate5;
        break;
      }
      
      // optional uint32 AttackRate5 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRate5:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrate5_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_HPValue;
        break;
      }
      
      // optional uint32 HPValue = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpvalue_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_HPPotential;
        break;
      }
      
      // optional uint32 HPPotential = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hppotential_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_MPValue;
        break;
      }
      
      // optional uint32 MPValue = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpvalue_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_MPPotential;
        break;
      }
      
      // optional uint32 MPPotential = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mppotential_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_PAttack;
        break;
      }
      
      // optional uint32 PAttack = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattack_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_PAttackPotential;
        break;
      }
      
      // optional uint32 PAttackPotential = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackpotential_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_MAttack;
        break;
      }
      
      // optional uint32 MAttack = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattack_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_MAttackPotential;
        break;
      }
      
      // optional uint32 MAttackPotential = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackpotential_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_PDefence;
        break;
      }
      
      // optional uint32 PDefence = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefence_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_PDefencePotential;
        break;
      }
      
      // optional uint32 PDefencePotential = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefencePotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefencepotential_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_MDefence;
        break;
      }
      
      // optional uint32 MDefence = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefence_));
        _set_bit(46);
        if (input->ExpectTag(384)) goto parse_MDefencePotential;
        break;
      }
      
      // optional uint32 MDefencePotential = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefencePotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefencepotential_));
        _set_bit(47);
        if (input->ExpectTag(392)) goto parse_PResist;
        break;
      }
      
      // optional uint32 PResist = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &presist_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_PResistPotential;
        break;
      }
      
      // optional uint32 PResistPotential = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &presistpotential_));
        _set_bit(49);
        if (input->ExpectTag(408)) goto parse_MResist;
        break;
      }
      
      // optional uint32 MResist = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mresist_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_MResistPotential;
        break;
      }
      
      // optional uint32 MResistPotential = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mresistpotential_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_AbnResist;
        break;
      }
      
      // optional uint32 AbnResist = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AbnResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &abnresist_));
        _set_bit(52);
        if (input->ExpectTag(432)) goto parse_AbnResistPotential;
        break;
      }
      
      // optional uint32 AbnResistPotential = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AbnResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &abnresistpotential_));
        _set_bit(53);
        if (input->ExpectTag(440)) goto parse_FireResist;
        break;
      }
      
      // optional uint32 FireResist = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FireResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fireresist_));
        _set_bit(54);
        if (input->ExpectTag(448)) goto parse_FireResistPotential;
        break;
      }
      
      // optional uint32 FireResistPotential = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FireResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fireresistpotential_));
        _set_bit(55);
        if (input->ExpectTag(456)) goto parse_WindResist;
        break;
      }
      
      // optional uint32 WindResist = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WindResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &windresist_));
        _set_bit(56);
        if (input->ExpectTag(464)) goto parse_WindResistPotential;
        break;
      }
      
      // optional uint32 WindResistPotential = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WindResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &windresistpotential_));
        _set_bit(57);
        if (input->ExpectTag(472)) goto parse_LightResist;
        break;
      }
      
      // optional uint32 LightResist = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LightResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lightresist_));
        _set_bit(58);
        if (input->ExpectTag(480)) goto parse_LightResistPotential;
        break;
      }
      
      // optional uint32 LightResistPotential = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LightResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lightresistpotential_));
        _set_bit(59);
        if (input->ExpectTag(488)) goto parse_ShadowResist;
        break;
      }
      
      // optional uint32 ShadowResist = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShadowResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shadowresist_));
        _set_bit(60);
        if (input->ExpectTag(496)) goto parse_ShadowResistPotential;
        break;
      }
      
      // optional uint32 ShadowResistPotential = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShadowResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shadowresistpotential_));
        _set_bit(61);
        if (input->ExpectTag(504)) goto parse_WaterResist;
        break;
      }
      
      // optional uint32 WaterResist = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WaterResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &waterresist_));
        _set_bit(62);
        if (input->ExpectTag(512)) goto parse_WaterResistPotential;
        break;
      }
      
      // optional uint32 WaterResistPotential = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WaterResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &waterresistpotential_));
        _set_bit(63);
        if (input->ExpectTag(520)) goto parse_EarthResist;
        break;
      }
      
      // optional uint32 EarthResist = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EarthResist:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &earthresist_));
        _set_bit(64);
        if (input->ExpectTag(528)) goto parse_EarthResistPotential;
        break;
      }
      
      // optional uint32 EarthResistPotential = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EarthResistPotential:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &earthresistpotential_));
        _set_bit(65);
        if (input->ExpectTag(536)) goto parse_FoodCombo;
        break;
      }
      
      // optional uint32 FoodCombo = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FoodCombo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &foodcombo_));
        _set_bit(66);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattlePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBattlePet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->model(), output);
  }
  
  // optional string IconName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->iconname(), output);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metierid(), output);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxlevel(), output);
  }
  
  // optional uint32 LevelRequire = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->levelrequire(), output);
  }
  
  // optional uint32 ExceedLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->exceedlevel(), output);
  }
  
  // optional uint32 PetItemID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->petitemid(), output);
  }
  
  // optional uint32 RevertCost = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->revertcost(), output);
  }
  
  // optional uint32 RepletionLimit = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->repletionlimit(), output);
  }
  
  // optional uint32 MinRepletion1 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->minrepletion1(), output);
  }
  
  // optional uint32 MaxRepletion1 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->maxrepletion1(), output);
  }
  
  // optional uint32 ExpSpeedRate1 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->expspeedrate1(), output);
  }
  
  // optional uint32 HPRate1 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->hprate1(), output);
  }
  
  // optional uint32 AttackRate1 = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->attackrate1(), output);
  }
  
  // optional uint32 MinRepletion2 = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->minrepletion2(), output);
  }
  
  // optional uint32 MaxRepletion2 = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->maxrepletion2(), output);
  }
  
  // optional uint32 ExpSpeedRate2 = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->expspeedrate2(), output);
  }
  
  // optional uint32 HPRate2 = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->hprate2(), output);
  }
  
  // optional uint32 AttackRate2 = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->attackrate2(), output);
  }
  
  // optional uint32 MinRepletion3 = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->minrepletion3(), output);
  }
  
  // optional uint32 MaxRepletion3 = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->maxrepletion3(), output);
  }
  
  // optional uint32 ExpSpeedRate3 = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->expspeedrate3(), output);
  }
  
  // optional uint32 HPRate3 = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->hprate3(), output);
  }
  
  // optional uint32 AttackRate3 = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->attackrate3(), output);
  }
  
  // optional uint32 MinRepletion4 = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->minrepletion4(), output);
  }
  
  // optional uint32 MaxRepletion4 = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->maxrepletion4(), output);
  }
  
  // optional uint32 ExpSpeedRate4 = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->expspeedrate4(), output);
  }
  
  // optional uint32 HPRate4 = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->hprate4(), output);
  }
  
  // optional uint32 AttackRate4 = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->attackrate4(), output);
  }
  
  // optional uint32 MinRepletion5 = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->minrepletion5(), output);
  }
  
  // optional uint32 MaxRepletion5 = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->maxrepletion5(), output);
  }
  
  // optional uint32 ExpSpeedRate5 = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->expspeedrate5(), output);
  }
  
  // optional uint32 HPRate5 = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->hprate5(), output);
  }
  
  // optional uint32 AttackRate5 = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->attackrate5(), output);
  }
  
  // optional uint32 HPValue = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->hpvalue(), output);
  }
  
  // optional uint32 HPPotential = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->hppotential(), output);
  }
  
  // optional uint32 MPValue = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->mpvalue(), output);
  }
  
  // optional uint32 MPPotential = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->mppotential(), output);
  }
  
  // optional uint32 PAttack = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->pattack(), output);
  }
  
  // optional uint32 PAttackPotential = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->pattackpotential(), output);
  }
  
  // optional uint32 MAttack = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->mattack(), output);
  }
  
  // optional uint32 MAttackPotential = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->mattackpotential(), output);
  }
  
  // optional uint32 PDefence = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->pdefence(), output);
  }
  
  // optional uint32 PDefencePotential = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->pdefencepotential(), output);
  }
  
  // optional uint32 MDefence = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->mdefence(), output);
  }
  
  // optional uint32 MDefencePotential = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(48, this->mdefencepotential(), output);
  }
  
  // optional uint32 PResist = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->presist(), output);
  }
  
  // optional uint32 PResistPotential = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->presistpotential(), output);
  }
  
  // optional uint32 MResist = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->mresist(), output);
  }
  
  // optional uint32 MResistPotential = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->mresistpotential(), output);
  }
  
  // optional uint32 AbnResist = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(53, this->abnresist(), output);
  }
  
  // optional uint32 AbnResistPotential = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(54, this->abnresistpotential(), output);
  }
  
  // optional uint32 FireResist = 55;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(55, this->fireresist(), output);
  }
  
  // optional uint32 FireResistPotential = 56;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(56, this->fireresistpotential(), output);
  }
  
  // optional uint32 WindResist = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(57, this->windresist(), output);
  }
  
  // optional uint32 WindResistPotential = 58;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(58, this->windresistpotential(), output);
  }
  
  // optional uint32 LightResist = 59;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(59, this->lightresist(), output);
  }
  
  // optional uint32 LightResistPotential = 60;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(60, this->lightresistpotential(), output);
  }
  
  // optional uint32 ShadowResist = 61;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(61, this->shadowresist(), output);
  }
  
  // optional uint32 ShadowResistPotential = 62;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(62, this->shadowresistpotential(), output);
  }
  
  // optional uint32 WaterResist = 63;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(63, this->waterresist(), output);
  }
  
  // optional uint32 WaterResistPotential = 64;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(64, this->waterresistpotential(), output);
  }
  
  // optional uint32 EarthResist = 65;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(65, this->earthresist(), output);
  }
  
  // optional uint32 EarthResistPotential = 66;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(66, this->earthresistpotential(), output);
  }
  
  // optional uint32 FoodCombo = 67;
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(67, this->foodcombo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattlePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->model(), target);
  }
  
  // optional string IconName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->iconname(), target);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metierid(), target);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxlevel(), target);
  }
  
  // optional uint32 LevelRequire = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->levelrequire(), target);
  }
  
  // optional uint32 ExceedLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->exceedlevel(), target);
  }
  
  // optional uint32 PetItemID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->petitemid(), target);
  }
  
  // optional uint32 RevertCost = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->revertcost(), target);
  }
  
  // optional uint32 RepletionLimit = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->repletionlimit(), target);
  }
  
  // optional uint32 MinRepletion1 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->minrepletion1(), target);
  }
  
  // optional uint32 MaxRepletion1 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->maxrepletion1(), target);
  }
  
  // optional uint32 ExpSpeedRate1 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->expspeedrate1(), target);
  }
  
  // optional uint32 HPRate1 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->hprate1(), target);
  }
  
  // optional uint32 AttackRate1 = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->attackrate1(), target);
  }
  
  // optional uint32 MinRepletion2 = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->minrepletion2(), target);
  }
  
  // optional uint32 MaxRepletion2 = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->maxrepletion2(), target);
  }
  
  // optional uint32 ExpSpeedRate2 = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->expspeedrate2(), target);
  }
  
  // optional uint32 HPRate2 = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->hprate2(), target);
  }
  
  // optional uint32 AttackRate2 = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->attackrate2(), target);
  }
  
  // optional uint32 MinRepletion3 = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->minrepletion3(), target);
  }
  
  // optional uint32 MaxRepletion3 = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->maxrepletion3(), target);
  }
  
  // optional uint32 ExpSpeedRate3 = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->expspeedrate3(), target);
  }
  
  // optional uint32 HPRate3 = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->hprate3(), target);
  }
  
  // optional uint32 AttackRate3 = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->attackrate3(), target);
  }
  
  // optional uint32 MinRepletion4 = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->minrepletion4(), target);
  }
  
  // optional uint32 MaxRepletion4 = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->maxrepletion4(), target);
  }
  
  // optional uint32 ExpSpeedRate4 = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->expspeedrate4(), target);
  }
  
  // optional uint32 HPRate4 = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->hprate4(), target);
  }
  
  // optional uint32 AttackRate4 = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->attackrate4(), target);
  }
  
  // optional uint32 MinRepletion5 = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->minrepletion5(), target);
  }
  
  // optional uint32 MaxRepletion5 = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->maxrepletion5(), target);
  }
  
  // optional uint32 ExpSpeedRate5 = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->expspeedrate5(), target);
  }
  
  // optional uint32 HPRate5 = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->hprate5(), target);
  }
  
  // optional uint32 AttackRate5 = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->attackrate5(), target);
  }
  
  // optional uint32 HPValue = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->hpvalue(), target);
  }
  
  // optional uint32 HPPotential = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->hppotential(), target);
  }
  
  // optional uint32 MPValue = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->mpvalue(), target);
  }
  
  // optional uint32 MPPotential = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->mppotential(), target);
  }
  
  // optional uint32 PAttack = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->pattack(), target);
  }
  
  // optional uint32 PAttackPotential = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->pattackpotential(), target);
  }
  
  // optional uint32 MAttack = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->mattack(), target);
  }
  
  // optional uint32 MAttackPotential = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->mattackpotential(), target);
  }
  
  // optional uint32 PDefence = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->pdefence(), target);
  }
  
  // optional uint32 PDefencePotential = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->pdefencepotential(), target);
  }
  
  // optional uint32 MDefence = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->mdefence(), target);
  }
  
  // optional uint32 MDefencePotential = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(48, this->mdefencepotential(), target);
  }
  
  // optional uint32 PResist = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->presist(), target);
  }
  
  // optional uint32 PResistPotential = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->presistpotential(), target);
  }
  
  // optional uint32 MResist = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->mresist(), target);
  }
  
  // optional uint32 MResistPotential = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->mresistpotential(), target);
  }
  
  // optional uint32 AbnResist = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(53, this->abnresist(), target);
  }
  
  // optional uint32 AbnResistPotential = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(54, this->abnresistpotential(), target);
  }
  
  // optional uint32 FireResist = 55;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(55, this->fireresist(), target);
  }
  
  // optional uint32 FireResistPotential = 56;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(56, this->fireresistpotential(), target);
  }
  
  // optional uint32 WindResist = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(57, this->windresist(), target);
  }
  
  // optional uint32 WindResistPotential = 58;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(58, this->windresistpotential(), target);
  }
  
  // optional uint32 LightResist = 59;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(59, this->lightresist(), target);
  }
  
  // optional uint32 LightResistPotential = 60;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(60, this->lightresistpotential(), target);
  }
  
  // optional uint32 ShadowResist = 61;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(61, this->shadowresist(), target);
  }
  
  // optional uint32 ShadowResistPotential = 62;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(62, this->shadowresistpotential(), target);
  }
  
  // optional uint32 WaterResist = 63;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(63, this->waterresist(), target);
  }
  
  // optional uint32 WaterResistPotential = 64;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(64, this->waterresistpotential(), target);
  }
  
  // optional uint32 EarthResist = 65;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(65, this->earthresist(), target);
  }
  
  // optional uint32 EarthResistPotential = 66;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(66, this->earthresistpotential(), target);
  }
  
  // optional uint32 FoodCombo = 67;
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(67, this->foodcombo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattlePet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->model());
    }
    
    // optional string IconName = 4;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->iconname());
    }
    
    // optional uint32 MetierID = 5;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 MaxLevel = 6;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 LevelRequire = 7;
    if (has_levelrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelrequire());
    }
    
    // optional uint32 ExceedLevel = 8;
    if (has_exceedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exceedlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PetItemID = 9;
    if (has_petitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->petitemid());
    }
    
    // optional uint32 RevertCost = 10;
    if (has_revertcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->revertcost());
    }
    
    // optional uint32 RepletionLimit = 11;
    if (has_repletionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repletionlimit());
    }
    
    // optional uint32 MinRepletion1 = 12;
    if (has_minrepletion1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion1());
    }
    
    // optional uint32 MaxRepletion1 = 13;
    if (has_maxrepletion1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion1());
    }
    
    // optional uint32 ExpSpeedRate1 = 14;
    if (has_expspeedrate1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate1());
    }
    
    // optional uint32 HPRate1 = 15;
    if (has_hprate1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprate1());
    }
    
    // optional uint32 AttackRate1 = 16;
    if (has_attackrate1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MinRepletion2 = 17;
    if (has_minrepletion2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion2());
    }
    
    // optional uint32 MaxRepletion2 = 18;
    if (has_maxrepletion2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion2());
    }
    
    // optional uint32 ExpSpeedRate2 = 19;
    if (has_expspeedrate2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate2());
    }
    
    // optional uint32 HPRate2 = 20;
    if (has_hprate2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprate2());
    }
    
    // optional uint32 AttackRate2 = 21;
    if (has_attackrate2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate2());
    }
    
    // optional uint32 MinRepletion3 = 22;
    if (has_minrepletion3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion3());
    }
    
    // optional uint32 MaxRepletion3 = 23;
    if (has_maxrepletion3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion3());
    }
    
    // optional uint32 ExpSpeedRate3 = 24;
    if (has_expspeedrate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate3());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 HPRate3 = 25;
    if (has_hprate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprate3());
    }
    
    // optional uint32 AttackRate3 = 26;
    if (has_attackrate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate3());
    }
    
    // optional uint32 MinRepletion4 = 27;
    if (has_minrepletion4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion4());
    }
    
    // optional uint32 MaxRepletion4 = 28;
    if (has_maxrepletion4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion4());
    }
    
    // optional uint32 ExpSpeedRate4 = 29;
    if (has_expspeedrate4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate4());
    }
    
    // optional uint32 HPRate4 = 30;
    if (has_hprate4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprate4());
    }
    
    // optional uint32 AttackRate4 = 31;
    if (has_attackrate4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate4());
    }
    
    // optional uint32 MinRepletion5 = 32;
    if (has_minrepletion5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minrepletion5());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 MaxRepletion5 = 33;
    if (has_maxrepletion5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxrepletion5());
    }
    
    // optional uint32 ExpSpeedRate5 = 34;
    if (has_expspeedrate5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expspeedrate5());
    }
    
    // optional uint32 HPRate5 = 35;
    if (has_hprate5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprate5());
    }
    
    // optional uint32 AttackRate5 = 36;
    if (has_attackrate5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrate5());
    }
    
    // optional uint32 HPValue = 37;
    if (has_hpvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpvalue());
    }
    
    // optional uint32 HPPotential = 38;
    if (has_hppotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hppotential());
    }
    
    // optional uint32 MPValue = 39;
    if (has_mpvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpvalue());
    }
    
    // optional uint32 MPPotential = 40;
    if (has_mppotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mppotential());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 PAttack = 41;
    if (has_pattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattack());
    }
    
    // optional uint32 PAttackPotential = 42;
    if (has_pattackpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackpotential());
    }
    
    // optional uint32 MAttack = 43;
    if (has_mattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattack());
    }
    
    // optional uint32 MAttackPotential = 44;
    if (has_mattackpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackpotential());
    }
    
    // optional uint32 PDefence = 45;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefence());
    }
    
    // optional uint32 PDefencePotential = 46;
    if (has_pdefencepotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefencepotential());
    }
    
    // optional uint32 MDefence = 47;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefence());
    }
    
    // optional uint32 MDefencePotential = 48;
    if (has_mdefencepotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefencepotential());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 PResist = 49;
    if (has_presist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->presist());
    }
    
    // optional uint32 PResistPotential = 50;
    if (has_presistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->presistpotential());
    }
    
    // optional uint32 MResist = 51;
    if (has_mresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mresist());
    }
    
    // optional uint32 MResistPotential = 52;
    if (has_mresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mresistpotential());
    }
    
    // optional uint32 AbnResist = 53;
    if (has_abnresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->abnresist());
    }
    
    // optional uint32 AbnResistPotential = 54;
    if (has_abnresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->abnresistpotential());
    }
    
    // optional uint32 FireResist = 55;
    if (has_fireresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fireresist());
    }
    
    // optional uint32 FireResistPotential = 56;
    if (has_fireresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fireresistpotential());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 WindResist = 57;
    if (has_windresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->windresist());
    }
    
    // optional uint32 WindResistPotential = 58;
    if (has_windresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->windresistpotential());
    }
    
    // optional uint32 LightResist = 59;
    if (has_lightresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lightresist());
    }
    
    // optional uint32 LightResistPotential = 60;
    if (has_lightresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lightresistpotential());
    }
    
    // optional uint32 ShadowResist = 61;
    if (has_shadowresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shadowresist());
    }
    
    // optional uint32 ShadowResistPotential = 62;
    if (has_shadowresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shadowresistpotential());
    }
    
    // optional uint32 WaterResist = 63;
    if (has_waterresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->waterresist());
    }
    
    // optional uint32 WaterResistPotential = 64;
    if (has_waterresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->waterresistpotential());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 EarthResist = 65;
    if (has_earthresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->earthresist());
    }
    
    // optional uint32 EarthResistPotential = 66;
    if (has_earthresistpotential()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->earthresistpotential());
    }
    
    // optional uint32 FoodCombo = 67;
    if (has_foodcombo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->foodcombo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBattlePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattlePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattlePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattlePet::MergeFrom(const PBBattlePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_model(from.model());
    }
    if (from._has_bit(3)) {
      set_iconname(from.iconname());
    }
    if (from._has_bit(4)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(5)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(6)) {
      set_levelrequire(from.levelrequire());
    }
    if (from._has_bit(7)) {
      set_exceedlevel(from.exceedlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_petitemid(from.petitemid());
    }
    if (from._has_bit(9)) {
      set_revertcost(from.revertcost());
    }
    if (from._has_bit(10)) {
      set_repletionlimit(from.repletionlimit());
    }
    if (from._has_bit(11)) {
      set_minrepletion1(from.minrepletion1());
    }
    if (from._has_bit(12)) {
      set_maxrepletion1(from.maxrepletion1());
    }
    if (from._has_bit(13)) {
      set_expspeedrate1(from.expspeedrate1());
    }
    if (from._has_bit(14)) {
      set_hprate1(from.hprate1());
    }
    if (from._has_bit(15)) {
      set_attackrate1(from.attackrate1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_minrepletion2(from.minrepletion2());
    }
    if (from._has_bit(17)) {
      set_maxrepletion2(from.maxrepletion2());
    }
    if (from._has_bit(18)) {
      set_expspeedrate2(from.expspeedrate2());
    }
    if (from._has_bit(19)) {
      set_hprate2(from.hprate2());
    }
    if (from._has_bit(20)) {
      set_attackrate2(from.attackrate2());
    }
    if (from._has_bit(21)) {
      set_minrepletion3(from.minrepletion3());
    }
    if (from._has_bit(22)) {
      set_maxrepletion3(from.maxrepletion3());
    }
    if (from._has_bit(23)) {
      set_expspeedrate3(from.expspeedrate3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_hprate3(from.hprate3());
    }
    if (from._has_bit(25)) {
      set_attackrate3(from.attackrate3());
    }
    if (from._has_bit(26)) {
      set_minrepletion4(from.minrepletion4());
    }
    if (from._has_bit(27)) {
      set_maxrepletion4(from.maxrepletion4());
    }
    if (from._has_bit(28)) {
      set_expspeedrate4(from.expspeedrate4());
    }
    if (from._has_bit(29)) {
      set_hprate4(from.hprate4());
    }
    if (from._has_bit(30)) {
      set_attackrate4(from.attackrate4());
    }
    if (from._has_bit(31)) {
      set_minrepletion5(from.minrepletion5());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_maxrepletion5(from.maxrepletion5());
    }
    if (from._has_bit(33)) {
      set_expspeedrate5(from.expspeedrate5());
    }
    if (from._has_bit(34)) {
      set_hprate5(from.hprate5());
    }
    if (from._has_bit(35)) {
      set_attackrate5(from.attackrate5());
    }
    if (from._has_bit(36)) {
      set_hpvalue(from.hpvalue());
    }
    if (from._has_bit(37)) {
      set_hppotential(from.hppotential());
    }
    if (from._has_bit(38)) {
      set_mpvalue(from.mpvalue());
    }
    if (from._has_bit(39)) {
      set_mppotential(from.mppotential());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_pattack(from.pattack());
    }
    if (from._has_bit(41)) {
      set_pattackpotential(from.pattackpotential());
    }
    if (from._has_bit(42)) {
      set_mattack(from.mattack());
    }
    if (from._has_bit(43)) {
      set_mattackpotential(from.mattackpotential());
    }
    if (from._has_bit(44)) {
      set_pdefence(from.pdefence());
    }
    if (from._has_bit(45)) {
      set_pdefencepotential(from.pdefencepotential());
    }
    if (from._has_bit(46)) {
      set_mdefence(from.mdefence());
    }
    if (from._has_bit(47)) {
      set_mdefencepotential(from.mdefencepotential());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_presist(from.presist());
    }
    if (from._has_bit(49)) {
      set_presistpotential(from.presistpotential());
    }
    if (from._has_bit(50)) {
      set_mresist(from.mresist());
    }
    if (from._has_bit(51)) {
      set_mresistpotential(from.mresistpotential());
    }
    if (from._has_bit(52)) {
      set_abnresist(from.abnresist());
    }
    if (from._has_bit(53)) {
      set_abnresistpotential(from.abnresistpotential());
    }
    if (from._has_bit(54)) {
      set_fireresist(from.fireresist());
    }
    if (from._has_bit(55)) {
      set_fireresistpotential(from.fireresistpotential());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      set_windresist(from.windresist());
    }
    if (from._has_bit(57)) {
      set_windresistpotential(from.windresistpotential());
    }
    if (from._has_bit(58)) {
      set_lightresist(from.lightresist());
    }
    if (from._has_bit(59)) {
      set_lightresistpotential(from.lightresistpotential());
    }
    if (from._has_bit(60)) {
      set_shadowresist(from.shadowresist());
    }
    if (from._has_bit(61)) {
      set_shadowresistpotential(from.shadowresistpotential());
    }
    if (from._has_bit(62)) {
      set_waterresist(from.waterresist());
    }
    if (from._has_bit(63)) {
      set_waterresistpotential(from.waterresistpotential());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      set_earthresist(from.earthresist());
    }
    if (from._has_bit(65)) {
      set_earthresistpotential(from.earthresistpotential());
    }
    if (from._has_bit(66)) {
      set_foodcombo(from.foodcombo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattlePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattlePet::CopyFrom(const PBBattlePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattlePet::Swap(PBBattlePet* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(iconname_, other->iconname_);
    std::swap(metierid_, other->metierid_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(levelrequire_, other->levelrequire_);
    std::swap(exceedlevel_, other->exceedlevel_);
    std::swap(petitemid_, other->petitemid_);
    std::swap(revertcost_, other->revertcost_);
    std::swap(repletionlimit_, other->repletionlimit_);
    std::swap(minrepletion1_, other->minrepletion1_);
    std::swap(maxrepletion1_, other->maxrepletion1_);
    std::swap(expspeedrate1_, other->expspeedrate1_);
    std::swap(hprate1_, other->hprate1_);
    std::swap(attackrate1_, other->attackrate1_);
    std::swap(minrepletion2_, other->minrepletion2_);
    std::swap(maxrepletion2_, other->maxrepletion2_);
    std::swap(expspeedrate2_, other->expspeedrate2_);
    std::swap(hprate2_, other->hprate2_);
    std::swap(attackrate2_, other->attackrate2_);
    std::swap(minrepletion3_, other->minrepletion3_);
    std::swap(maxrepletion3_, other->maxrepletion3_);
    std::swap(expspeedrate3_, other->expspeedrate3_);
    std::swap(hprate3_, other->hprate3_);
    std::swap(attackrate3_, other->attackrate3_);
    std::swap(minrepletion4_, other->minrepletion4_);
    std::swap(maxrepletion4_, other->maxrepletion4_);
    std::swap(expspeedrate4_, other->expspeedrate4_);
    std::swap(hprate4_, other->hprate4_);
    std::swap(attackrate4_, other->attackrate4_);
    std::swap(minrepletion5_, other->minrepletion5_);
    std::swap(maxrepletion5_, other->maxrepletion5_);
    std::swap(expspeedrate5_, other->expspeedrate5_);
    std::swap(hprate5_, other->hprate5_);
    std::swap(attackrate5_, other->attackrate5_);
    std::swap(hpvalue_, other->hpvalue_);
    std::swap(hppotential_, other->hppotential_);
    std::swap(mpvalue_, other->mpvalue_);
    std::swap(mppotential_, other->mppotential_);
    std::swap(pattack_, other->pattack_);
    std::swap(pattackpotential_, other->pattackpotential_);
    std::swap(mattack_, other->mattack_);
    std::swap(mattackpotential_, other->mattackpotential_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(pdefencepotential_, other->pdefencepotential_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(mdefencepotential_, other->mdefencepotential_);
    std::swap(presist_, other->presist_);
    std::swap(presistpotential_, other->presistpotential_);
    std::swap(mresist_, other->mresist_);
    std::swap(mresistpotential_, other->mresistpotential_);
    std::swap(abnresist_, other->abnresist_);
    std::swap(abnresistpotential_, other->abnresistpotential_);
    std::swap(fireresist_, other->fireresist_);
    std::swap(fireresistpotential_, other->fireresistpotential_);
    std::swap(windresist_, other->windresist_);
    std::swap(windresistpotential_, other->windresistpotential_);
    std::swap(lightresist_, other->lightresist_);
    std::swap(lightresistpotential_, other->lightresistpotential_);
    std::swap(shadowresist_, other->shadowresist_);
    std::swap(shadowresistpotential_, other->shadowresistpotential_);
    std::swap(waterresist_, other->waterresist_);
    std::swap(waterresistpotential_, other->waterresistpotential_);
    std::swap(earthresist_, other->earthresist_);
    std::swap(earthresistpotential_, other->earthresistpotential_);
    std::swap(foodcombo_, other->foodcombo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBattlePet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBattlePet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBattlePet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBattlePet_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMineOutput::kStuffIDFieldNumber;
const int PBMineOutput::kPercentFieldNumber;
#endif  // !_MSC_VER

PBMineOutput::PBMineOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMineOutput::InitAsDefaultInstance() {}

PBMineOutput::PBMineOutput(const PBMineOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMineOutput::SharedCtor() {
  _cached_size_ = 0;
  stuffid_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMineOutput::~PBMineOutput() {
  SharedDtor();
}

void PBMineOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMineOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMineOutput_descriptor_;
}

const PBMineOutput& PBMineOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMineOutput* PBMineOutput::default_instance_ = NULL;

PBMineOutput* PBMineOutput::New() const {
  return new PBMineOutput;
}

void PBMineOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stuffid_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMineOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stuffid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMineOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMineOutput::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StuffID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stuffid(), output);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMineOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StuffID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stuffid(), target);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMineOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StuffID = 1;
    if (has_stuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stuffid());
    }
    
    // optional uint32 Percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMineOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMineOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMineOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMineOutput::MergeFrom(const PBMineOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stuffid(from.stuffid());
    }
    if (from._has_bit(1)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMineOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineOutput::CopyFrom(const PBMineOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineOutput::Swap(PBMineOutput* other) {
  if (other != this) {
    std::swap(stuffid_, other->stuffid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMineOutput::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMineOutput::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMineOutput::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMineOutput_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMineOgre::kNpcIDFieldNumber;
const int PBMineOgre::kNumberFieldNumber;
const int PBMineOgre::kPercentFieldNumber;
#endif  // !_MSC_VER

PBMineOgre::PBMineOgre()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMineOgre::InitAsDefaultInstance() {}

PBMineOgre::PBMineOgre(const PBMineOgre& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMineOgre::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  number_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMineOgre::~PBMineOgre() {
  SharedDtor();
}

void PBMineOgre::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMineOgre::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMineOgre_descriptor_;
}

const PBMineOgre& PBMineOgre::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMineOgre* PBMineOgre::default_instance_ = NULL;

PBMineOgre* PBMineOgre::New() const {
  return new PBMineOgre;
}

void PBMineOgre::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    number_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMineOgre::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMineOgre::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMineOgre::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->number(), output);
  }
  
  // optional uint32 Percent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMineOgre::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->number(), target);
  }
  
  // optional uint32 Percent = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMineOgre::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMineOgre::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMineOgre* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMineOgre*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMineOgre::MergeFrom(const PBMineOgre& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMineOgre::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineOgre::CopyFrom(const PBMineOgre& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineOgre::Swap(PBMineOgre* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(number_, other->number_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMineOgre::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMineOgre::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMineOgre::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMineOgre_reflection_;
}

// ===================================================================

const ::std::string PBMine::_default_name_;
const ::std::string PBMine::_default_model_;
#ifndef _MSC_VER
const int PBMine::kTempIDFieldNumber;
const int PBMine::kNameFieldNumber;
const int PBMine::kLevelFieldNumber;
const int PBMine::kLevelRequireFieldNumber;
const int PBMine::kToolIDFieldNumber;
const int PBMine::kDecRateFieldNumber;
const int PBMine::kMineTimeLowFieldNumber;
const int PBMine::kMineTimeHighFieldNumber;
const int PBMine::kModelFieldNumber;
const int PBMine::kOutputFieldNumber;
const int PBMine::kMineOgreFieldNumber;
#endif  // !_MSC_VER

PBMine::PBMine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMine::InitAsDefaultInstance() {}

PBMine::PBMine(const PBMine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMine::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  level_ = 0u;
  levelrequire_ = 0u;
  toolid_ = 0u;
  decrate_ = 0u;
  minetimelow_ = 0u;
  minetimehigh_ = 0u;
  model_ = const_cast< ::std::string*>(&_default_model_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMine::~PBMine() {
  SharedDtor();
}

void PBMine::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (model_ != &_default_model_) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMine_descriptor_;
}

const PBMine& PBMine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMine* PBMine::default_instance_ = NULL;

PBMine* PBMine::New() const {
  return new PBMine;
}

void PBMine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    level_ = 0u;
    levelrequire_ = 0u;
    toolid_ = 0u;
    decrate_ = 0u;
    minetimelow_ = 0u;
    minetimehigh_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (model_ != &_default_model_) {
        model_->clear();
      }
    }
  }
  output_.Clear();
  mineogre_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LevelRequire;
        break;
      }
      
      // optional uint32 LevelRequire = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelrequire_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ToolID;
        break;
      }
      
      // optional uint32 ToolID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ToolID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &toolid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_DecRate;
        break;
      }
      
      // optional uint32 DecRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DecRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &decrate_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MineTimeLow;
        break;
      }
      
      // optional uint32 MineTimeLow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MineTimeLow:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minetimelow_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MineTimeHigh;
        break;
      }
      
      // optional uint32 MineTimeHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MineTimeHigh:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minetimehigh_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_Model;
        break;
      }
      
      // optional string Model = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Model:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_model()));
        if (input->ExpectTag(82)) goto parse_Output;
        break;
      }
      
      // repeated .PBMineOutput Output = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Output:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_output()));
        if (input->ExpectTag(82)) goto parse_Output;
        if (input->ExpectTag(90)) goto parse_MineOgre;
        break;
      }
      
      // repeated .PBMineOgre MineOgre = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MineOgre:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mineogre()));
        if (input->ExpectTag(90)) goto parse_MineOgre;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMine::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 LevelRequire = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->levelrequire(), output);
  }
  
  // optional uint32 ToolID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->toolid(), output);
  }
  
  // optional uint32 DecRate = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->decrate(), output);
  }
  
  // optional uint32 MineTimeLow = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->minetimelow(), output);
  }
  
  // optional uint32 MineTimeHigh = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->minetimehigh(), output);
  }
  
  // optional string Model = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->model(), output);
  }
  
  // repeated .PBMineOutput Output = 10;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->output(i), output);
  }
  
  // repeated .PBMineOgre MineOgre = 11;
  for (int i = 0; i < this->mineogre_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->mineogre(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 LevelRequire = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->levelrequire(), target);
  }
  
  // optional uint32 ToolID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->toolid(), target);
  }
  
  // optional uint32 DecRate = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->decrate(), target);
  }
  
  // optional uint32 MineTimeLow = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->minetimelow(), target);
  }
  
  // optional uint32 MineTimeHigh = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->minetimehigh(), target);
  }
  
  // optional string Model = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->model(), target);
  }
  
  // repeated .PBMineOutput Output = 10;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->output(i), target);
  }
  
  // repeated .PBMineOgre MineOgre = 11;
  for (int i = 0; i < this->mineogre_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->mineogre(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 LevelRequire = 4;
    if (has_levelrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelrequire());
    }
    
    // optional uint32 ToolID = 5;
    if (has_toolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->toolid());
    }
    
    // optional uint32 DecRate = 6;
    if (has_decrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->decrate());
    }
    
    // optional uint32 MineTimeLow = 7;
    if (has_minetimelow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minetimelow());
    }
    
    // optional uint32 MineTimeHigh = 8;
    if (has_minetimehigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minetimehigh());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Model = 9;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->model());
    }
    
  }
  // repeated .PBMineOutput Output = 10;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->output(i));
  }
  
  // repeated .PBMineOgre MineOgre = 11;
  total_size += 1 * this->mineogre_size();
  for (int i = 0; i < this->mineogre_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mineogre(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMine::MergeFrom(const PBMine& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  mineogre_.MergeFrom(from.mineogre_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_levelrequire(from.levelrequire());
    }
    if (from._has_bit(4)) {
      set_toolid(from.toolid());
    }
    if (from._has_bit(5)) {
      set_decrate(from.decrate());
    }
    if (from._has_bit(6)) {
      set_minetimelow(from.minetimelow());
    }
    if (from._has_bit(7)) {
      set_minetimehigh(from.minetimehigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_model(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMine::CopyFrom(const PBMine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMine::Swap(PBMine* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(levelrequire_, other->levelrequire_);
    std::swap(toolid_, other->toolid_);
    std::swap(decrate_, other->decrate_);
    std::swap(minetimelow_, other->minetimelow_);
    std::swap(minetimehigh_, other->minetimehigh_);
    std::swap(model_, other->model_);
    output_.Swap(&other->output_);
    mineogre_.Swap(&other->mineogre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMine::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMine::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMine::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMine_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillTreeNode::kSkillIDFieldNumber;
const int PBSkillTreeNode::kMaxLevelFieldNumber;
const int PBSkillTreeNode::kNeedSkillIDFieldNumber;
const int PBSkillTreeNode::kNeedSkillPointFieldNumber;
const int PBSkillTreeNode::kNeedGenerIDFieldNumber;
const int PBSkillTreeNode::kNeedGenerPointFieldNumber;
const int PBSkillTreeNode::kLevelFieldNumber;
const int PBSkillTreeNode::kNeedBookFieldNumber;
#endif  // !_MSC_VER

PBSkillTreeNode::PBSkillTreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillTreeNode::InitAsDefaultInstance() {}

PBSkillTreeNode::PBSkillTreeNode(const PBSkillTreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillTreeNode::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  maxlevel_ = 0u;
  needskillid_ = 0u;
  needskillpoint_ = 0u;
  needgenerid_ = 0u;
  needgenerpoint_ = 0u;
  level_ = 0u;
  needbook_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillTreeNode::~PBSkillTreeNode() {
  SharedDtor();
}

void PBSkillTreeNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillTreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillTreeNode_descriptor_;
}

const PBSkillTreeNode& PBSkillTreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkillTreeNode* PBSkillTreeNode::default_instance_ = NULL;

PBSkillTreeNode* PBSkillTreeNode::New() const {
  return new PBSkillTreeNode;
}

void PBSkillTreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    maxlevel_ = 0u;
    needskillid_ = 0u;
    needskillpoint_ = 0u;
    needgenerid_ = 0u;
    needgenerpoint_ = 0u;
    level_ = 0u;
    needbook_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillTreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedSkillID;
        break;
      }
      
      // optional uint32 NeedSkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needskillid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NeedSkillPoint;
        break;
      }
      
      // optional uint32 NeedSkillPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needskillpoint_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_NeedGenerID;
        break;
      }
      
      // optional uint32 NeedGenerID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedGenerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needgenerid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NeedGenerPoint;
        break;
      }
      
      // optional uint32 NeedGenerPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedGenerPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needgenerpoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_NeedBook;
        break;
      }
      
      // optional uint32 NeedBook = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedBook:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needbook_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillTreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillTreeNode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->maxlevel(), output);
  }
  
  // optional uint32 NeedSkillID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needskillid(), output);
  }
  
  // optional uint32 NeedSkillPoint = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->needskillpoint(), output);
  }
  
  // optional uint32 NeedGenerID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->needgenerid(), output);
  }
  
  // optional uint32 NeedGenerPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->needgenerpoint(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 NeedBook = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->needbook(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillTreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->maxlevel(), target);
  }
  
  // optional uint32 NeedSkillID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needskillid(), target);
  }
  
  // optional uint32 NeedSkillPoint = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->needskillpoint(), target);
  }
  
  // optional uint32 NeedGenerID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->needgenerid(), target);
  }
  
  // optional uint32 NeedGenerPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->needgenerpoint(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 NeedBook = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->needbook(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillTreeNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 MaxLevel = 2;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 NeedSkillID = 3;
    if (has_needskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needskillid());
    }
    
    // optional uint32 NeedSkillPoint = 4;
    if (has_needskillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needskillpoint());
    }
    
    // optional uint32 NeedGenerID = 5;
    if (has_needgenerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needgenerid());
    }
    
    // optional uint32 NeedGenerPoint = 6;
    if (has_needgenerpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needgenerpoint());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 NeedBook = 8;
    if (has_needbook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needbook());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillTreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillTreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillTreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillTreeNode::MergeFrom(const PBSkillTreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(2)) {
      set_needskillid(from.needskillid());
    }
    if (from._has_bit(3)) {
      set_needskillpoint(from.needskillpoint());
    }
    if (from._has_bit(4)) {
      set_needgenerid(from.needgenerid());
    }
    if (from._has_bit(5)) {
      set_needgenerpoint(from.needgenerpoint());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_needbook(from.needbook());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillTreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillTreeNode::CopyFrom(const PBSkillTreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillTreeNode::Swap(PBSkillTreeNode* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(needskillid_, other->needskillid_);
    std::swap(needskillpoint_, other->needskillpoint_);
    std::swap(needgenerid_, other->needgenerid_);
    std::swap(needgenerpoint_, other->needgenerpoint_);
    std::swap(level_, other->level_);
    std::swap(needbook_, other->needbook_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillTreeNode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillTreeNode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillTreeNode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillTreeNode_reflection_;
}

// ===================================================================

const ::std::string PBSkillTree::_default_genername_;
#ifndef _MSC_VER
const int PBSkillTree::kTempIDFieldNumber;
const int PBSkillTree::kGenerNameFieldNumber;
const int PBSkillTree::kGenerIDFieldNumber;
const int PBSkillTree::kSkillNodeFieldNumber;
#endif  // !_MSC_VER

PBSkillTree::PBSkillTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillTree::InitAsDefaultInstance() {}

PBSkillTree::PBSkillTree(const PBSkillTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillTree::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  genername_ = const_cast< ::std::string*>(&_default_genername_);
  generid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillTree::~PBSkillTree() {
  SharedDtor();
}

void PBSkillTree::SharedDtor() {
  if (genername_ != &_default_genername_) {
    delete genername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillTree_descriptor_;
}

const PBSkillTree& PBSkillTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkillTree* PBSkillTree::default_instance_ = NULL;

PBSkillTree* PBSkillTree::New() const {
  return new PBSkillTree;
}

void PBSkillTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (genername_ != &_default_genername_) {
        genername_->clear();
      }
    }
    generid_ = 0u;
  }
  skillnode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_GenerName;
        break;
      }
      
      // optional string GenerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GenerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_genername()));
        if (input->ExpectTag(24)) goto parse_GenerID;
        break;
      }
      
      // optional uint32 GenerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &generid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_SkillNode;
        break;
      }
      
      // repeated .PBSkillTreeNode SkillNode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillNode:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skillnode()));
        if (input->ExpectTag(34)) goto parse_SkillNode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillTree::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string GenerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->genername(), output);
  }
  
  // optional uint32 GenerID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->generid(), output);
  }
  
  // repeated .PBSkillTreeNode SkillNode = 4;
  for (int i = 0; i < this->skillnode_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->skillnode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string GenerName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->genername(), target);
  }
  
  // optional uint32 GenerID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->generid(), target);
  }
  
  // repeated .PBSkillTreeNode SkillNode = 4;
  for (int i = 0; i < this->skillnode_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->skillnode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string GenerName = 2;
    if (has_genername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->genername());
    }
    
    // optional uint32 GenerID = 3;
    if (has_generid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->generid());
    }
    
  }
  // repeated .PBSkillTreeNode SkillNode = 4;
  total_size += 1 * this->skillnode_size();
  for (int i = 0; i < this->skillnode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skillnode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillTree::MergeFrom(const PBSkillTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillnode_.MergeFrom(from.skillnode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_genername(from.genername());
    }
    if (from._has_bit(2)) {
      set_generid(from.generid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillTree::CopyFrom(const PBSkillTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillTree::Swap(PBSkillTree* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(genername_, other->genername_);
    std::swap(generid_, other->generid_);
    skillnode_.Swap(&other->skillnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillTree::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillTree::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillTree::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillTree_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCost::kCostTypeFieldNumber;
const int PBCost::kCostParamFieldNumber;
#endif  // !_MSC_VER

PBCost::PBCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCost::InitAsDefaultInstance() {}

PBCost::PBCost(const PBCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCost::SharedCtor() {
  _cached_size_ = 0;
  costtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCost::~PBCost() {
  SharedDtor();
}

void PBCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCost_descriptor_;
}

const PBCost& PBCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCost* PBCost::default_instance_ = NULL;

PBCost* PBCost::New() const {
  return new PBCost;
}

void PBCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    costtype_ = 0u;
  }
  costparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CostType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &costtype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CostParam;
        break;
      }
      
      // repeated uint32 CostParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CostParam:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_costparam(value);
        if (input->ExpectTag(16)) goto parse_CostParam;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCost::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CostType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->costtype(), output);
  }
  
  // repeated uint32 CostParam = 2;
  for (int i = 0; i < this->costparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->costparam(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CostType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->costtype(), target);
  }
  
  // repeated uint32 CostParam = 2;
  for (int i = 0; i < this->costparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->costparam(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CostType = 1;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->costtype());
    }
    
  }
  // repeated uint32 CostParam = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->costparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->costparam(i));
    }
    total_size += 1 * this->costparam_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCost::MergeFrom(const PBCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  costparam_.MergeFrom(from.costparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_costtype(from.costtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCost::CopyFrom(const PBCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCost::Swap(PBCost* other) {
  if (other != this) {
    std::swap(costtype_, other->costtype_);
    costparam_.Swap(&other->costparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCost::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCost::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCost::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCost_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBUseCondition::kConditionTypeFieldNumber;
const int PBUseCondition::kParamFieldNumber;
#endif  // !_MSC_VER

PBUseCondition::PBUseCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUseCondition::InitAsDefaultInstance() {}

PBUseCondition::PBUseCondition(const PBUseCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUseCondition::SharedCtor() {
  _cached_size_ = 0;
  conditiontype_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUseCondition::~PBUseCondition() {
  SharedDtor();
}

void PBUseCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBUseCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUseCondition_descriptor_;
}

const PBUseCondition& PBUseCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBUseCondition* PBUseCondition::default_instance_ = NULL;

PBUseCondition* PBUseCondition::New() const {
  return new PBUseCondition;
}

void PBUseCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conditiontype_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUseCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ConditionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &conditiontype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUseCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBUseCondition::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ConditionType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->conditiontype(), output);
  }
  
  // optional uint32 Param = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUseCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ConditionType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->conditiontype(), target);
  }
  
  // optional uint32 Param = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUseCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConditionType = 1;
    if (has_conditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->conditiontype());
    }
    
    // optional uint32 Param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBUseCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUseCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUseCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUseCondition::MergeFrom(const PBUseCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_conditiontype(from.conditiontype());
    }
    if (from._has_bit(1)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUseCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUseCondition::CopyFrom(const PBUseCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUseCondition::Swap(PBUseCondition* other) {
  if (other != this) {
    std::swap(conditiontype_, other->conditiontype_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBUseCondition::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBUseCondition::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBUseCondition::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBUseCondition_reflection_;
}

// ===================================================================

const ::std::string PBSkill::_default_name_;
const ::std::string PBSkill::_default_skillicon_;
const ::std::string PBSkill::_default_skilldescribe_;
const ::std::string PBSkill::_default_skillaction_;
const ::std::string PBSkill::_default_skilltypedesc_;
#ifndef _MSC_VER
const int PBSkill::kTempIDFieldNumber;
const int PBSkill::kNameFieldNumber;
const int PBSkill::kSkillIDFieldNumber;
const int PBSkill::kRequireWeaponFieldNumber;
const int PBSkill::kMetierIDFieldNumber;
const int PBSkill::kGenerIDFieldNumber;
const int PBSkill::kSkillLevelFieldNumber;
const int PBSkill::kSkillIconFieldNumber;
const int PBSkill::kSkillDescribeFieldNumber;
const int PBSkill::kFireTypeFieldNumber;
const int PBSkill::kSkillTypeFieldNumber;
const int PBSkill::kTimeTypeFieldNumber;
const int PBSkill::kAniTimeFieldNumber;
const int PBSkill::kFireTimeFieldNumber;
const int PBSkill::kCDTimeFieldNumber;
const int PBSkill::kCostFieldNumber;
const int PBSkill::kNeedDelayFieldNumber;
const int PBSkill::kSkillFuncID1FieldNumber;
const int PBSkill::kParameter1FieldNumber;
const int PBSkill::kSkillFuncID2FieldNumber;
const int PBSkill::kParameter2FieldNumber;
const int PBSkill::kSkillFuncID3FieldNumber;
const int PBSkill::kParameter3FieldNumber;
const int PBSkill::kSkillFuncID4FieldNumber;
const int PBSkill::kParameter4FieldNumber;
const int PBSkill::kSkillActionFieldNumber;
const int PBSkill::kAutoRepeatFieldNumber;
const int PBSkill::kAutoNormalAttackFieldNumber;
const int PBSkill::kAutoCoolingSkillFieldNumber;
const int PBSkill::kUseConditionFieldNumber;
const int PBSkill::kStudyGoldFieldNumber;
const int PBSkill::kStudyBindMoneyFieldNumber;
const int PBSkill::kSkillListShowTypeFieldNumber;
const int PBSkill::kSkillTempTypeFieldNumber;
const int PBSkill::kStudySkillLevelFieldNumber;
const int PBSkill::kInsertAutoStateFieldNumber;
const int PBSkill::kBreakAutoStateFieldNumber;
const int PBSkill::kNeedTargetFieldNumber;
const int PBSkill::kNeedPetFieldNumber;
const int PBSkill::kActionCampFieldNumber;
const int PBSkill::kDamageTypeFieldNumber;
const int PBSkill::kBindStudyGoldFieldNumber;
const int PBSkill::kAttackFixFieldNumber;
const int PBSkill::kAttackPerFieldNumber;
const int PBSkill::kResTypeFieldNumber;
const int PBSkill::kResValueFieldNumber;
const int PBSkill::kIsMWSkillFieldNumber;
const int PBSkill::kSkillTypeDescFieldNumber;
const int PBSkill::kIsMWOffsetFieldNumber;
const int PBSkill::kCDGroupFieldNumber;
const int PBSkill::kCanCleanFieldNumber;
const int PBSkill::kTargetLevelFieldNumber;
const int PBSkill::kSummonIndexFieldNumber;
#endif  // !_MSC_VER

PBSkill::PBSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkill::InitAsDefaultInstance() {}

PBSkill::PBSkill(const PBSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkill::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  skillid_ = 0u;
  requireweapon_ = 0u;
  metierid_ = 0u;
  generid_ = 0u;
  skilllevel_ = 0u;
  skillicon_ = const_cast< ::std::string*>(&_default_skillicon_);
  skilldescribe_ = const_cast< ::std::string*>(&_default_skilldescribe_);
  firetype_ = 0u;
  skilltype_ = 0u;
  timetype_ = 0u;
  anitime_ = 0u;
  firetime_ = 0u;
  cdtime_ = 0u;
  needdelay_ = 0u;
  skillfuncid1_ = 0u;
  skillfuncid2_ = 0u;
  skillfuncid3_ = 0u;
  skillfuncid4_ = 0u;
  skillaction_ = const_cast< ::std::string*>(&_default_skillaction_);
  autorepeat_ = 0u;
  autonormalattack_ = 0u;
  autocoolingskill_ = 0u;
  studygold_ = 0u;
  studybindmoney_ = 0u;
  skilllistshowtype_ = 0u;
  skilltemptype_ = 0u;
  studyskilllevel_ = 0u;
  insertautostate_ = 0u;
  breakautostate_ = 0u;
  needtarget_ = 0u;
  needpet_ = 0u;
  actioncamp_ = 0u;
  damagetype_ = 0u;
  bindstudygold_ = 0u;
  attackfix_ = 0u;
  attackper_ = 0u;
  restype_ = 0u;
  resvalue_ = 0u;
  ismwskill_ = 0u;
  skilltypedesc_ = const_cast< ::std::string*>(&_default_skilltypedesc_);
  ismwoffset_ = 0u;
  canclean_ = 0u;
  targetlevel_ = 0u;
  summonindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkill::~PBSkill() {
  SharedDtor();
}

void PBSkill::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (skillicon_ != &_default_skillicon_) {
    delete skillicon_;
  }
  if (skilldescribe_ != &_default_skilldescribe_) {
    delete skilldescribe_;
  }
  if (skillaction_ != &_default_skillaction_) {
    delete skillaction_;
  }
  if (skilltypedesc_ != &_default_skilltypedesc_) {
    delete skilltypedesc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkill_descriptor_;
}

const PBSkill& PBSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkill* PBSkill::default_instance_ = NULL;

PBSkill* PBSkill::New() const {
  return new PBSkill;
}

void PBSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    skillid_ = 0u;
    requireweapon_ = 0u;
    metierid_ = 0u;
    generid_ = 0u;
    skilllevel_ = 0u;
    if (_has_bit(7)) {
      if (skillicon_ != &_default_skillicon_) {
        skillicon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (skilldescribe_ != &_default_skilldescribe_) {
        skilldescribe_->clear();
      }
    }
    firetype_ = 0u;
    skilltype_ = 0u;
    timetype_ = 0u;
    anitime_ = 0u;
    firetime_ = 0u;
    cdtime_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    needdelay_ = 0u;
    skillfuncid1_ = 0u;
    skillfuncid2_ = 0u;
    skillfuncid3_ = 0u;
    skillfuncid4_ = 0u;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (_has_bit(25)) {
      if (skillaction_ != &_default_skillaction_) {
        skillaction_->clear();
      }
    }
    autorepeat_ = 0u;
    autonormalattack_ = 0u;
    autocoolingskill_ = 0u;
    studygold_ = 0u;
    studybindmoney_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    skilllistshowtype_ = 0u;
    skilltemptype_ = 0u;
    studyskilllevel_ = 0u;
    insertautostate_ = 0u;
    breakautostate_ = 0u;
    needtarget_ = 0u;
    needpet_ = 0u;
    actioncamp_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    damagetype_ = 0u;
    bindstudygold_ = 0u;
    attackfix_ = 0u;
    attackper_ = 0u;
    restype_ = 0u;
    resvalue_ = 0u;
    ismwskill_ = 0u;
    if (_has_bit(47)) {
      if (skilltypedesc_ != &_default_skilltypedesc_) {
        skilltypedesc_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    ismwoffset_ = 0u;
    canclean_ = 0u;
    targetlevel_ = 0u;
    summonindex_ = 0u;
  }
  cost_.Clear();
  parameter1_.Clear();
  parameter2_.Clear();
  parameter3_.Clear();
  parameter4_.Clear();
  usecondition_.Clear();
  cdgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RequireWeapon;
        break;
      }
      
      // optional uint32 RequireWeapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RequireWeapon:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &requireweapon_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_GenerID;
        break;
      }
      
      // optional uint32 GenerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &generid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SkillLevel;
        break;
      }
      
      // optional uint32 SkillLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllevel_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_SkillIcon;
        break;
      }
      
      // optional string SkillIcon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillIcon:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_skillicon()));
        if (input->ExpectTag(74)) goto parse_SkillDescribe;
        break;
      }
      
      // optional string SkillDescribe = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillDescribe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_skilldescribe()));
        if (input->ExpectTag(80)) goto parse_FireType;
        break;
      }
      
      // optional uint32 FireType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FireType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &firetype_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SkillType;
        break;
      }
      
      // optional uint32 SkillType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilltype_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_TimeType;
        break;
      }
      
      // optional uint32 TimeType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timetype_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_AniTime;
        break;
      }
      
      // optional uint32 AniTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AniTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &anitime_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_FireTime;
        break;
      }
      
      // optional uint32 FireTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FireTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &firetime_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_CDTime;
        break;
      }
      
      // optional uint32 CDTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CDTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cdtime_));
        _set_bit(14);
        if (input->ExpectTag(130)) goto parse_Cost;
        break;
      }
      
      // repeated .PBCost Cost = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Cost:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_cost()));
        if (input->ExpectTag(130)) goto parse_Cost;
        if (input->ExpectTag(136)) goto parse_NeedDelay;
        break;
      }
      
      // optional uint32 NeedDelay = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedDelay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needdelay_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_SkillFuncID1;
        break;
      }
      
      // optional uint32 SkillFuncID1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillFuncID1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillfuncid1_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_Parameter1;
        break;
      }
      
      // repeated uint32 Parameter1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parameter1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parameter1(value);
        if (input->ExpectTag(152)) goto parse_Parameter1;
        if (input->ExpectTag(160)) goto parse_SkillFuncID2;
        break;
      }
      
      // optional uint32 SkillFuncID2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillFuncID2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillfuncid2_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_Parameter2;
        break;
      }
      
      // repeated uint32 Parameter2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parameter2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parameter2(value);
        if (input->ExpectTag(168)) goto parse_Parameter2;
        if (input->ExpectTag(176)) goto parse_SkillFuncID3;
        break;
      }
      
      // optional uint32 SkillFuncID3 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillFuncID3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillfuncid3_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_Parameter3;
        break;
      }
      
      // repeated uint32 Parameter3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parameter3:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parameter3(value);
        if (input->ExpectTag(184)) goto parse_Parameter3;
        if (input->ExpectTag(192)) goto parse_SkillFuncID4;
        break;
      }
      
      // optional uint32 SkillFuncID4 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillFuncID4:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillfuncid4_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_Parameter4;
        break;
      }
      
      // repeated uint32 Parameter4 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parameter4:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parameter4(value);
        if (input->ExpectTag(200)) goto parse_Parameter4;
        if (input->ExpectTag(210)) goto parse_SkillAction;
        break;
      }
      
      // optional string SkillAction = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillAction:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_skillaction()));
        if (input->ExpectTag(216)) goto parse_AutoRepeat;
        break;
      }
      
      // optional uint32 AutoRepeat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AutoRepeat:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &autorepeat_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_AutoNormalAttack;
        break;
      }
      
      // optional uint32 AutoNormalAttack = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AutoNormalAttack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &autonormalattack_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_AutoCoolingSkill;
        break;
      }
      
      // optional uint32 AutoCoolingSkill = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AutoCoolingSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &autocoolingskill_));
        _set_bit(28);
        if (input->ExpectTag(242)) goto parse_UseCondition;
        break;
      }
      
      // repeated .PBUseCondition UseCondition = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UseCondition:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_usecondition()));
        if (input->ExpectTag(242)) goto parse_UseCondition;
        if (input->ExpectTag(248)) goto parse_StudyGold;
        break;
      }
      
      // optional uint32 StudyGold = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudyGold:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &studygold_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_StudyBindMoney;
        break;
      }
      
      // optional uint32 StudyBindMoney = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudyBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &studybindmoney_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_SkillListShowType;
        break;
      }
      
      // optional uint32 SkillListShowType = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillListShowType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllistshowtype_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_SkillTempType;
        break;
      }
      
      // optional uint32 SkillTempType = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillTempType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilltemptype_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_StudySkillLevel;
        break;
      }
      
      // optional uint32 StudySkillLevel = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudySkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &studyskilllevel_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_InsertAutoState;
        break;
      }
      
      // optional uint32 InsertAutoState = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InsertAutoState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &insertautostate_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_BreakAutoState;
        break;
      }
      
      // optional uint32 BreakAutoState = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BreakAutoState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &breakautostate_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_NeedTarget;
        break;
      }
      
      // optional uint32 NeedTarget = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedTarget:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needtarget_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_NeedPet;
        break;
      }
      
      // optional uint32 NeedPet = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedPet:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needpet_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_ActionCamp;
        break;
      }
      
      // optional uint32 ActionCamp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActionCamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actioncamp_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_DamageType;
        break;
      }
      
      // optional uint32 DamageType = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DamageType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &damagetype_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_BindStudyGold;
        break;
      }
      
      // optional uint32 BindStudyGold = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindStudyGold:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindstudygold_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_AttackFix;
        break;
      }
      
      // optional uint32 AttackFix = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackFix:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackfix_));
        _set_bit(42);
        if (input->ExpectTag(352)) goto parse_AttackPer;
        break;
      }
      
      // optional uint32 AttackPer = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackPer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackper_));
        _set_bit(43);
        if (input->ExpectTag(360)) goto parse_ResType;
        break;
      }
      
      // optional uint32 ResType = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &restype_));
        _set_bit(44);
        if (input->ExpectTag(368)) goto parse_ResValue;
        break;
      }
      
      // optional uint32 ResValue = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resvalue_));
        _set_bit(45);
        if (input->ExpectTag(376)) goto parse_IsMWSkill;
        break;
      }
      
      // optional uint32 IsMWSkill = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsMWSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ismwskill_));
        _set_bit(46);
        if (input->ExpectTag(386)) goto parse_SkillTypeDesc;
        break;
      }
      
      // optional string SkillTypeDesc = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillTypeDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_skilltypedesc()));
        if (input->ExpectTag(392)) goto parse_IsMWOffset;
        break;
      }
      
      // optional uint32 IsMWOffset = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsMWOffset:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ismwoffset_));
        _set_bit(48);
        if (input->ExpectTag(400)) goto parse_CDGroup;
        break;
      }
      
      // repeated uint32 CDGroup = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CDGroup:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_cdgroup(value);
        if (input->ExpectTag(400)) goto parse_CDGroup;
        if (input->ExpectTag(408)) goto parse_CanClean;
        break;
      }
      
      // optional uint32 CanClean = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanClean:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canclean_));
        _set_bit(50);
        if (input->ExpectTag(416)) goto parse_TargetLevel;
        break;
      }
      
      // optional uint32 TargetLevel = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TargetLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetlevel_));
        _set_bit(51);
        if (input->ExpectTag(424)) goto parse_SummonIndex;
        break;
      }
      
      // optional uint32 SummonIndex = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &summonindex_));
        _set_bit(52);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->skillid(), output);
  }
  
  // optional uint32 RequireWeapon = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->requireweapon(), output);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metierid(), output);
  }
  
  // optional uint32 GenerID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->generid(), output);
  }
  
  // optional uint32 SkillLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->skilllevel(), output);
  }
  
  // optional string SkillIcon = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->skillicon(), output);
  }
  
  // optional string SkillDescribe = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->skilldescribe(), output);
  }
  
  // optional uint32 FireType = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->firetype(), output);
  }
  
  // optional uint32 SkillType = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->skilltype(), output);
  }
  
  // optional uint32 TimeType = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->timetype(), output);
  }
  
  // optional uint32 AniTime = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->anitime(), output);
  }
  
  // optional uint32 FireTime = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->firetime(), output);
  }
  
  // optional uint32 CDTime = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->cdtime(), output);
  }
  
  // repeated .PBCost Cost = 16;
  for (int i = 0; i < this->cost_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->cost(i), output);
  }
  
  // optional uint32 NeedDelay = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->needdelay(), output);
  }
  
  // optional uint32 SkillFuncID1 = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->skillfuncid1(), output);
  }
  
  // repeated uint32 Parameter1 = 19;
  for (int i = 0; i < this->parameter1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->parameter1(i), output);
  }
  
  // optional uint32 SkillFuncID2 = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->skillfuncid2(), output);
  }
  
  // repeated uint32 Parameter2 = 21;
  for (int i = 0; i < this->parameter2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->parameter2(i), output);
  }
  
  // optional uint32 SkillFuncID3 = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->skillfuncid3(), output);
  }
  
  // repeated uint32 Parameter3 = 23;
  for (int i = 0; i < this->parameter3_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->parameter3(i), output);
  }
  
  // optional uint32 SkillFuncID4 = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->skillfuncid4(), output);
  }
  
  // repeated uint32 Parameter4 = 25;
  for (int i = 0; i < this->parameter4_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->parameter4(i), output);
  }
  
  // optional string SkillAction = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteString(26, this->skillaction(), output);
  }
  
  // optional uint32 AutoRepeat = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->autorepeat(), output);
  }
  
  // optional uint32 AutoNormalAttack = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->autonormalattack(), output);
  }
  
  // optional uint32 AutoCoolingSkill = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->autocoolingskill(), output);
  }
  
  // repeated .PBUseCondition UseCondition = 30;
  for (int i = 0; i < this->usecondition_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(30, this->usecondition(i), output);
  }
  
  // optional uint32 StudyGold = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->studygold(), output);
  }
  
  // optional uint32 StudyBindMoney = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->studybindmoney(), output);
  }
  
  // optional uint32 SkillListShowType = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->skilllistshowtype(), output);
  }
  
  // optional uint32 SkillTempType = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->skilltemptype(), output);
  }
  
  // optional uint32 StudySkillLevel = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->studyskilllevel(), output);
  }
  
  // optional uint32 InsertAutoState = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->insertautostate(), output);
  }
  
  // optional uint32 BreakAutoState = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->breakautostate(), output);
  }
  
  // optional uint32 NeedTarget = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->needtarget(), output);
  }
  
  // optional uint32 NeedPet = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->needpet(), output);
  }
  
  // optional uint32 ActionCamp = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->actioncamp(), output);
  }
  
  // optional uint32 DamageType = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->damagetype(), output);
  }
  
  // optional uint32 BindStudyGold = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->bindstudygold(), output);
  }
  
  // optional uint32 AttackFix = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->attackfix(), output);
  }
  
  // optional uint32 AttackPer = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(44, this->attackper(), output);
  }
  
  // optional uint32 ResType = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(45, this->restype(), output);
  }
  
  // optional uint32 ResValue = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(46, this->resvalue(), output);
  }
  
  // optional uint32 IsMWSkill = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(47, this->ismwskill(), output);
  }
  
  // optional string SkillTypeDesc = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormat::WriteString(48, this->skilltypedesc(), output);
  }
  
  // optional uint32 IsMWOffset = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(49, this->ismwoffset(), output);
  }
  
  // repeated uint32 CDGroup = 50;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(50, this->cdgroup(i), output);
  }
  
  // optional uint32 CanClean = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(51, this->canclean(), output);
  }
  
  // optional uint32 TargetLevel = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(52, this->targetlevel(), output);
  }
  
  // optional uint32 SummonIndex = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(53, this->summonindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 SkillID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->skillid(), target);
  }
  
  // optional uint32 RequireWeapon = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->requireweapon(), target);
  }
  
  // optional uint32 MetierID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metierid(), target);
  }
  
  // optional uint32 GenerID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->generid(), target);
  }
  
  // optional uint32 SkillLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->skilllevel(), target);
  }
  
  // optional string SkillIcon = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->skillicon(), target);
  }
  
  // optional string SkillDescribe = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->skilldescribe(), target);
  }
  
  // optional uint32 FireType = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->firetype(), target);
  }
  
  // optional uint32 SkillType = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->skilltype(), target);
  }
  
  // optional uint32 TimeType = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->timetype(), target);
  }
  
  // optional uint32 AniTime = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->anitime(), target);
  }
  
  // optional uint32 FireTime = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->firetime(), target);
  }
  
  // optional uint32 CDTime = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->cdtime(), target);
  }
  
  // repeated .PBCost Cost = 16;
  for (int i = 0; i < this->cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->cost(i), target);
  }
  
  // optional uint32 NeedDelay = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->needdelay(), target);
  }
  
  // optional uint32 SkillFuncID1 = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->skillfuncid1(), target);
  }
  
  // repeated uint32 Parameter1 = 19;
  for (int i = 0; i < this->parameter1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->parameter1(i), target);
  }
  
  // optional uint32 SkillFuncID2 = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->skillfuncid2(), target);
  }
  
  // repeated uint32 Parameter2 = 21;
  for (int i = 0; i < this->parameter2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->parameter2(i), target);
  }
  
  // optional uint32 SkillFuncID3 = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->skillfuncid3(), target);
  }
  
  // repeated uint32 Parameter3 = 23;
  for (int i = 0; i < this->parameter3_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->parameter3(i), target);
  }
  
  // optional uint32 SkillFuncID4 = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->skillfuncid4(), target);
  }
  
  // repeated uint32 Parameter4 = 25;
  for (int i = 0; i < this->parameter4_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->parameter4(i), target);
  }
  
  // optional string SkillAction = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(26, this->skillaction(), target);
  }
  
  // optional uint32 AutoRepeat = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->autorepeat(), target);
  }
  
  // optional uint32 AutoNormalAttack = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->autonormalattack(), target);
  }
  
  // optional uint32 AutoCoolingSkill = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->autocoolingskill(), target);
  }
  
  // repeated .PBUseCondition UseCondition = 30;
  for (int i = 0; i < this->usecondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(30, this->usecondition(i), target);
  }
  
  // optional uint32 StudyGold = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->studygold(), target);
  }
  
  // optional uint32 StudyBindMoney = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->studybindmoney(), target);
  }
  
  // optional uint32 SkillListShowType = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->skilllistshowtype(), target);
  }
  
  // optional uint32 SkillTempType = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->skilltemptype(), target);
  }
  
  // optional uint32 StudySkillLevel = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->studyskilllevel(), target);
  }
  
  // optional uint32 InsertAutoState = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->insertautostate(), target);
  }
  
  // optional uint32 BreakAutoState = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->breakautostate(), target);
  }
  
  // optional uint32 NeedTarget = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->needtarget(), target);
  }
  
  // optional uint32 NeedPet = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->needpet(), target);
  }
  
  // optional uint32 ActionCamp = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->actioncamp(), target);
  }
  
  // optional uint32 DamageType = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->damagetype(), target);
  }
  
  // optional uint32 BindStudyGold = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->bindstudygold(), target);
  }
  
  // optional uint32 AttackFix = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->attackfix(), target);
  }
  
  // optional uint32 AttackPer = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(44, this->attackper(), target);
  }
  
  // optional uint32 ResType = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(45, this->restype(), target);
  }
  
  // optional uint32 ResValue = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(46, this->resvalue(), target);
  }
  
  // optional uint32 IsMWSkill = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(47, this->ismwskill(), target);
  }
  
  // optional string SkillTypeDesc = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(48, this->skilltypedesc(), target);
  }
  
  // optional uint32 IsMWOffset = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(49, this->ismwoffset(), target);
  }
  
  // repeated uint32 CDGroup = 50;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(50, this->cdgroup(i), target);
  }
  
  // optional uint32 CanClean = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(51, this->canclean(), target);
  }
  
  // optional uint32 TargetLevel = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(52, this->targetlevel(), target);
  }
  
  // optional uint32 SummonIndex = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(53, this->summonindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 SkillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 RequireWeapon = 4;
    if (has_requireweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->requireweapon());
    }
    
    // optional uint32 MetierID = 5;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 GenerID = 6;
    if (has_generid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->generid());
    }
    
    // optional uint32 SkillLevel = 7;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllevel());
    }
    
    // optional string SkillIcon = 8;
    if (has_skillicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->skillicon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SkillDescribe = 9;
    if (has_skilldescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->skilldescribe());
    }
    
    // optional uint32 FireType = 10;
    if (has_firetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->firetype());
    }
    
    // optional uint32 SkillType = 11;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilltype());
    }
    
    // optional uint32 TimeType = 12;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timetype());
    }
    
    // optional uint32 AniTime = 13;
    if (has_anitime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->anitime());
    }
    
    // optional uint32 FireTime = 14;
    if (has_firetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->firetime());
    }
    
    // optional uint32 CDTime = 15;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cdtime());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 NeedDelay = 17;
    if (has_needdelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needdelay());
    }
    
    // optional uint32 SkillFuncID1 = 18;
    if (has_skillfuncid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillfuncid1());
    }
    
    // optional uint32 SkillFuncID2 = 20;
    if (has_skillfuncid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillfuncid2());
    }
    
    // optional uint32 SkillFuncID3 = 22;
    if (has_skillfuncid3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillfuncid3());
    }
    
    // optional uint32 SkillFuncID4 = 24;
    if (has_skillfuncid4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillfuncid4());
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string SkillAction = 26;
    if (has_skillaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->skillaction());
    }
    
    // optional uint32 AutoRepeat = 27;
    if (has_autorepeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->autorepeat());
    }
    
    // optional uint32 AutoNormalAttack = 28;
    if (has_autonormalattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->autonormalattack());
    }
    
    // optional uint32 AutoCoolingSkill = 29;
    if (has_autocoolingskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->autocoolingskill());
    }
    
    // optional uint32 StudyGold = 31;
    if (has_studygold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->studygold());
    }
    
    // optional uint32 StudyBindMoney = 32;
    if (has_studybindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->studybindmoney());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 SkillListShowType = 33;
    if (has_skilllistshowtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllistshowtype());
    }
    
    // optional uint32 SkillTempType = 34;
    if (has_skilltemptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilltemptype());
    }
    
    // optional uint32 StudySkillLevel = 35;
    if (has_studyskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->studyskilllevel());
    }
    
    // optional uint32 InsertAutoState = 36;
    if (has_insertautostate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->insertautostate());
    }
    
    // optional uint32 BreakAutoState = 37;
    if (has_breakautostate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->breakautostate());
    }
    
    // optional uint32 NeedTarget = 38;
    if (has_needtarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needtarget());
    }
    
    // optional uint32 NeedPet = 39;
    if (has_needpet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needpet());
    }
    
    // optional uint32 ActionCamp = 40;
    if (has_actioncamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actioncamp());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 DamageType = 41;
    if (has_damagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->damagetype());
    }
    
    // optional uint32 BindStudyGold = 42;
    if (has_bindstudygold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindstudygold());
    }
    
    // optional uint32 AttackFix = 43;
    if (has_attackfix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackfix());
    }
    
    // optional uint32 AttackPer = 44;
    if (has_attackper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackper());
    }
    
    // optional uint32 ResType = 45;
    if (has_restype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->restype());
    }
    
    // optional uint32 ResValue = 46;
    if (has_resvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resvalue());
    }
    
    // optional uint32 IsMWSkill = 47;
    if (has_ismwskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ismwskill());
    }
    
    // optional string SkillTypeDesc = 48;
    if (has_skilltypedesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->skilltypedesc());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 IsMWOffset = 49;
    if (has_ismwoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ismwoffset());
    }
    
    // optional uint32 CanClean = 51;
    if (has_canclean()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canclean());
    }
    
    // optional uint32 TargetLevel = 52;
    if (has_targetlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetlevel());
    }
    
    // optional uint32 SummonIndex = 53;
    if (has_summonindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->summonindex());
    }
    
  }
  // repeated .PBCost Cost = 16;
  total_size += 2 * this->cost_size();
  for (int i = 0; i < this->cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->cost(i));
  }
  
  // repeated uint32 Parameter1 = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameter1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parameter1(i));
    }
    total_size += 2 * this->parameter1_size() + data_size;
  }
  
  // repeated uint32 Parameter2 = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameter2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parameter2(i));
    }
    total_size += 2 * this->parameter2_size() + data_size;
  }
  
  // repeated uint32 Parameter3 = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameter3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parameter3(i));
    }
    total_size += 2 * this->parameter3_size() + data_size;
  }
  
  // repeated uint32 Parameter4 = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameter4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parameter4(i));
    }
    total_size += 2 * this->parameter4_size() + data_size;
  }
  
  // repeated .PBUseCondition UseCondition = 30;
  total_size += 2 * this->usecondition_size();
  for (int i = 0; i < this->usecondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->usecondition(i));
  }
  
  // repeated uint32 CDGroup = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->cdgroup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->cdgroup(i));
    }
    total_size += 2 * this->cdgroup_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkill::MergeFrom(const PBSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_.MergeFrom(from.cost_);
  parameter1_.MergeFrom(from.parameter1_);
  parameter2_.MergeFrom(from.parameter2_);
  parameter3_.MergeFrom(from.parameter3_);
  parameter4_.MergeFrom(from.parameter4_);
  usecondition_.MergeFrom(from.usecondition_);
  cdgroup_.MergeFrom(from.cdgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(3)) {
      set_requireweapon(from.requireweapon());
    }
    if (from._has_bit(4)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(5)) {
      set_generid(from.generid());
    }
    if (from._has_bit(6)) {
      set_skilllevel(from.skilllevel());
    }
    if (from._has_bit(7)) {
      set_skillicon(from.skillicon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_skilldescribe(from.skilldescribe());
    }
    if (from._has_bit(9)) {
      set_firetype(from.firetype());
    }
    if (from._has_bit(10)) {
      set_skilltype(from.skilltype());
    }
    if (from._has_bit(11)) {
      set_timetype(from.timetype());
    }
    if (from._has_bit(12)) {
      set_anitime(from.anitime());
    }
    if (from._has_bit(13)) {
      set_firetime(from.firetime());
    }
    if (from._has_bit(14)) {
      set_cdtime(from.cdtime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_needdelay(from.needdelay());
    }
    if (from._has_bit(17)) {
      set_skillfuncid1(from.skillfuncid1());
    }
    if (from._has_bit(19)) {
      set_skillfuncid2(from.skillfuncid2());
    }
    if (from._has_bit(21)) {
      set_skillfuncid3(from.skillfuncid3());
    }
    if (from._has_bit(23)) {
      set_skillfuncid4(from.skillfuncid4());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from._has_bit(25)) {
      set_skillaction(from.skillaction());
    }
    if (from._has_bit(26)) {
      set_autorepeat(from.autorepeat());
    }
    if (from._has_bit(27)) {
      set_autonormalattack(from.autonormalattack());
    }
    if (from._has_bit(28)) {
      set_autocoolingskill(from.autocoolingskill());
    }
    if (from._has_bit(30)) {
      set_studygold(from.studygold());
    }
    if (from._has_bit(31)) {
      set_studybindmoney(from.studybindmoney());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_skilllistshowtype(from.skilllistshowtype());
    }
    if (from._has_bit(33)) {
      set_skilltemptype(from.skilltemptype());
    }
    if (from._has_bit(34)) {
      set_studyskilllevel(from.studyskilllevel());
    }
    if (from._has_bit(35)) {
      set_insertautostate(from.insertautostate());
    }
    if (from._has_bit(36)) {
      set_breakautostate(from.breakautostate());
    }
    if (from._has_bit(37)) {
      set_needtarget(from.needtarget());
    }
    if (from._has_bit(38)) {
      set_needpet(from.needpet());
    }
    if (from._has_bit(39)) {
      set_actioncamp(from.actioncamp());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_damagetype(from.damagetype());
    }
    if (from._has_bit(41)) {
      set_bindstudygold(from.bindstudygold());
    }
    if (from._has_bit(42)) {
      set_attackfix(from.attackfix());
    }
    if (from._has_bit(43)) {
      set_attackper(from.attackper());
    }
    if (from._has_bit(44)) {
      set_restype(from.restype());
    }
    if (from._has_bit(45)) {
      set_resvalue(from.resvalue());
    }
    if (from._has_bit(46)) {
      set_ismwskill(from.ismwskill());
    }
    if (from._has_bit(47)) {
      set_skilltypedesc(from.skilltypedesc());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      set_ismwoffset(from.ismwoffset());
    }
    if (from._has_bit(50)) {
      set_canclean(from.canclean());
    }
    if (from._has_bit(51)) {
      set_targetlevel(from.targetlevel());
    }
    if (from._has_bit(52)) {
      set_summonindex(from.summonindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkill::CopyFrom(const PBSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkill::Swap(PBSkill* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(skillid_, other->skillid_);
    std::swap(requireweapon_, other->requireweapon_);
    std::swap(metierid_, other->metierid_);
    std::swap(generid_, other->generid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(skillicon_, other->skillicon_);
    std::swap(skilldescribe_, other->skilldescribe_);
    std::swap(firetype_, other->firetype_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(timetype_, other->timetype_);
    std::swap(anitime_, other->anitime_);
    std::swap(firetime_, other->firetime_);
    std::swap(cdtime_, other->cdtime_);
    cost_.Swap(&other->cost_);
    std::swap(needdelay_, other->needdelay_);
    std::swap(skillfuncid1_, other->skillfuncid1_);
    parameter1_.Swap(&other->parameter1_);
    std::swap(skillfuncid2_, other->skillfuncid2_);
    parameter2_.Swap(&other->parameter2_);
    std::swap(skillfuncid3_, other->skillfuncid3_);
    parameter3_.Swap(&other->parameter3_);
    std::swap(skillfuncid4_, other->skillfuncid4_);
    parameter4_.Swap(&other->parameter4_);
    std::swap(skillaction_, other->skillaction_);
    std::swap(autorepeat_, other->autorepeat_);
    std::swap(autonormalattack_, other->autonormalattack_);
    std::swap(autocoolingskill_, other->autocoolingskill_);
    usecondition_.Swap(&other->usecondition_);
    std::swap(studygold_, other->studygold_);
    std::swap(studybindmoney_, other->studybindmoney_);
    std::swap(skilllistshowtype_, other->skilllistshowtype_);
    std::swap(skilltemptype_, other->skilltemptype_);
    std::swap(studyskilllevel_, other->studyskilllevel_);
    std::swap(insertautostate_, other->insertautostate_);
    std::swap(breakautostate_, other->breakautostate_);
    std::swap(needtarget_, other->needtarget_);
    std::swap(needpet_, other->needpet_);
    std::swap(actioncamp_, other->actioncamp_);
    std::swap(damagetype_, other->damagetype_);
    std::swap(bindstudygold_, other->bindstudygold_);
    std::swap(attackfix_, other->attackfix_);
    std::swap(attackper_, other->attackper_);
    std::swap(restype_, other->restype_);
    std::swap(resvalue_, other->resvalue_);
    std::swap(ismwskill_, other->ismwskill_);
    std::swap(skilltypedesc_, other->skilltypedesc_);
    std::swap(ismwoffset_, other->ismwoffset_);
    cdgroup_.Swap(&other->cdgroup_);
    std::swap(canclean_, other->canclean_);
    std::swap(targetlevel_, other->targetlevel_);
    std::swap(summonindex_, other->summonindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAureoleType::kAureoleAreaFieldNumber;
const int PBAureoleType::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBAureoleType::PBAureoleType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAureoleType::InitAsDefaultInstance() {}

PBAureoleType::PBAureoleType(const PBAureoleType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAureoleType::SharedCtor() {
  _cached_size_ = 0;
  aureolearea_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAureoleType::~PBAureoleType() {
  SharedDtor();
}

void PBAureoleType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAureoleType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAureoleType_descriptor_;
}

const PBAureoleType& PBAureoleType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAureoleType* PBAureoleType::default_instance_ = NULL;

PBAureoleType* PBAureoleType::New() const {
  return new PBAureoleType;
}

void PBAureoleType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aureolearea_ = 0u;
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAureoleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AureoleArea = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &aureolearea_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAureoleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAureoleType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AureoleArea = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->aureolearea(), output);
  }
  
  // optional uint32 BuffID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAureoleType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AureoleArea = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->aureolearea(), target);
  }
  
  // optional uint32 BuffID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAureoleType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AureoleArea = 1;
    if (has_aureolearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->aureolearea());
    }
    
    // optional uint32 BuffID = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAureoleType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAureoleType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAureoleType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAureoleType::MergeFrom(const PBAureoleType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_aureolearea(from.aureolearea());
    }
    if (from._has_bit(1)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAureoleType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAureoleType::CopyFrom(const PBAureoleType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAureoleType::Swap(PBAureoleType* other) {
  if (other != this) {
    std::swap(aureolearea_, other->aureolearea_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAureoleType::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAureoleType::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAureoleType::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAureoleType_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAureoleSkill::kSkillInfoFieldNumber;
const int PBAureoleSkill::kInceessaryFieldNumber;
const int PBAureoleSkill::kInceessaryTimeFieldNumber;
const int PBAureoleSkill::kCostFieldNumber;
const int PBAureoleSkill::kAureoleDistanceFieldNumber;
const int PBAureoleSkill::kAureoleTypeFieldNumber;
#endif  // !_MSC_VER

PBAureoleSkill::PBAureoleSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAureoleSkill::InitAsDefaultInstance() {  skillinfo_ = const_cast< ::PBSkill*>(&::PBSkill::default_instance());
}

PBAureoleSkill::PBAureoleSkill(const PBAureoleSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAureoleSkill::SharedCtor() {
  _cached_size_ = 0;
  skillinfo_ = NULL;
  inceessary_ = 0u;
  inceessarytime_ = 0u;
  aureoledistance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAureoleSkill::~PBAureoleSkill() {
  SharedDtor();
}

void PBAureoleSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

const ::google::protobuf::Descriptor* PBAureoleSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAureoleSkill_descriptor_;
}

const PBAureoleSkill& PBAureoleSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAureoleSkill* PBAureoleSkill::default_instance_ = NULL;

PBAureoleSkill* PBAureoleSkill::New() const {
  return new PBAureoleSkill;
}

void PBAureoleSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (skillinfo_ != NULL) skillinfo_->::PBSkill::Clear();
    }
    inceessary_ = 0u;
    inceessarytime_ = 0u;
    aureoledistance_ = 0u;
  }
  cost_.Clear();
  aureoletype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAureoleSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBSkill SkillInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skillinfo()));
        if (input->ExpectTag(16)) goto parse_Inceessary;
        break;
      }
      
      // optional uint32 Inceessary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Inceessary:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inceessary_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_InceessaryTime;
        break;
      }
      
      // optional uint32 InceessaryTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InceessaryTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inceessarytime_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Cost;
        break;
      }
      
      // repeated .PBCost Cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Cost:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_cost()));
        if (input->ExpectTag(34)) goto parse_Cost;
        if (input->ExpectTag(40)) goto parse_AureoleDistance;
        break;
      }
      
      // optional uint32 AureoleDistance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AureoleDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &aureoledistance_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_AureoleType;
        break;
      }
      
      // repeated .PBAureoleType AureoleType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AureoleType:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_aureoletype()));
        if (input->ExpectTag(50)) goto parse_AureoleType;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAureoleSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAureoleSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->skillinfo(), output);
  }
  
  // optional uint32 Inceessary = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->inceessary(), output);
  }
  
  // optional uint32 InceessaryTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->inceessarytime(), output);
  }
  
  // repeated .PBCost Cost = 4;
  for (int i = 0; i < this->cost_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->cost(i), output);
  }
  
  // optional uint32 AureoleDistance = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->aureoledistance(), output);
  }
  
  // repeated .PBAureoleType AureoleType = 6;
  for (int i = 0; i < this->aureoletype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->aureoletype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAureoleSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->skillinfo(), target);
  }
  
  // optional uint32 Inceessary = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->inceessary(), target);
  }
  
  // optional uint32 InceessaryTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->inceessarytime(), target);
  }
  
  // repeated .PBCost Cost = 4;
  for (int i = 0; i < this->cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->cost(i), target);
  }
  
  // optional uint32 AureoleDistance = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->aureoledistance(), target);
  }
  
  // repeated .PBAureoleType AureoleType = 6;
  for (int i = 0; i < this->aureoletype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->aureoletype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAureoleSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSkill SkillInfo = 1;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skillinfo());
    }
    
    // optional uint32 Inceessary = 2;
    if (has_inceessary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inceessary());
    }
    
    // optional uint32 InceessaryTime = 3;
    if (has_inceessarytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inceessarytime());
    }
    
    // optional uint32 AureoleDistance = 5;
    if (has_aureoledistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->aureoledistance());
    }
    
  }
  // repeated .PBCost Cost = 4;
  total_size += 1 * this->cost_size();
  for (int i = 0; i < this->cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->cost(i));
  }
  
  // repeated .PBAureoleType AureoleType = 6;
  total_size += 1 * this->aureoletype_size();
  for (int i = 0; i < this->aureoletype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->aureoletype(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAureoleSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAureoleSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAureoleSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAureoleSkill::MergeFrom(const PBAureoleSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_.MergeFrom(from.cost_);
  aureoletype_.MergeFrom(from.aureoletype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_skillinfo()->::PBSkill::MergeFrom(from.skillinfo());
    }
    if (from._has_bit(1)) {
      set_inceessary(from.inceessary());
    }
    if (from._has_bit(2)) {
      set_inceessarytime(from.inceessarytime());
    }
    if (from._has_bit(4)) {
      set_aureoledistance(from.aureoledistance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAureoleSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAureoleSkill::CopyFrom(const PBAureoleSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAureoleSkill::Swap(PBAureoleSkill* other) {
  if (other != this) {
    std::swap(skillinfo_, other->skillinfo_);
    std::swap(inceessary_, other->inceessary_);
    std::swap(inceessarytime_, other->inceessarytime_);
    cost_.Swap(&other->cost_);
    std::swap(aureoledistance_, other->aureoledistance_);
    aureoletype_.Swap(&other->aureoletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAureoleSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAureoleSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAureoleSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAureoleSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBNormalSkill::kSkillInfoFieldNumber;
const int PBNormalSkill::kSkillHitrateFieldNumber;
const int PBNormalSkill::kMinDistanceFieldNumber;
const int PBNormalSkill::kMaxDistanceFieldNumber;
const int PBNormalSkill::kEfktMaxNumFieldNumber;
const int PBNormalSkill::kAttackRangeFieldNumber;
const int PBNormalSkill::kRandParamFieldNumber;
const int PBNormalSkill::kBuffGroupIDFieldNumber;
const int PBNormalSkill::kContinuedRuleFieldNumber;
const int PBNormalSkill::kContinuedTimeFieldNumber;
const int PBNormalSkill::kContinuedNumFieldNumber;
const int PBNormalSkill::kIgnoreArmorFieldNumber;
#endif  // !_MSC_VER

PBNormalSkill::PBNormalSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBNormalSkill::InitAsDefaultInstance() {  skillinfo_ = const_cast< ::PBSkill*>(&::PBSkill::default_instance());
}

PBNormalSkill::PBNormalSkill(const PBNormalSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBNormalSkill::SharedCtor() {
  _cached_size_ = 0;
  skillinfo_ = NULL;
  skillhitrate_ = 0u;
  mindistance_ = 0u;
  maxdistance_ = 0u;
  efktmaxnum_ = 0u;
  attackrange_ = 0u;
  continuedrule_ = 0u;
  continuedtime_ = 0u;
  continuednum_ = 0u;
  ignorearmor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBNormalSkill::~PBNormalSkill() {
  SharedDtor();
}

void PBNormalSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

const ::google::protobuf::Descriptor* PBNormalSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNormalSkill_descriptor_;
}

const PBNormalSkill& PBNormalSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBNormalSkill* PBNormalSkill::default_instance_ = NULL;

PBNormalSkill* PBNormalSkill::New() const {
  return new PBNormalSkill;
}

void PBNormalSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (skillinfo_ != NULL) skillinfo_->::PBSkill::Clear();
    }
    skillhitrate_ = 0u;
    mindistance_ = 0u;
    maxdistance_ = 0u;
    efktmaxnum_ = 0u;
    attackrange_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    continuedrule_ = 0u;
    continuedtime_ = 0u;
    continuednum_ = 0u;
    ignorearmor_ = 0u;
  }
  randparam_.Clear();
  buffgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBNormalSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBSkill SkillInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skillinfo()));
        if (input->ExpectTag(16)) goto parse_SkillHitrate;
        break;
      }
      
      // optional uint32 SkillHitrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillHitrate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillhitrate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MinDistance;
        break;
      }
      
      // optional uint32 MinDistance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mindistance_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MaxDistance;
        break;
      }
      
      // optional uint32 MaxDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxDistance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxdistance_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_EfktMaxNum;
        break;
      }
      
      // optional uint32 EfktMaxNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EfktMaxNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &efktmaxnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_AttackRange;
        break;
      }
      
      // optional uint32 AttackRange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackrange_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RandParam;
        break;
      }
      
      // repeated uint32 RandParam = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RandParam:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_randparam(value);
        if (input->ExpectTag(56)) goto parse_RandParam;
        if (input->ExpectTag(64)) goto parse_BuffGroupID;
        break;
      }
      
      // repeated uint32 BuffGroupID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffGroupID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_buffgroupid(value);
        if (input->ExpectTag(64)) goto parse_BuffGroupID;
        if (input->ExpectTag(72)) goto parse_ContinuedRule;
        break;
      }
      
      // optional uint32 ContinuedRule = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContinuedRule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &continuedrule_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ContinuedTime;
        break;
      }
      
      // optional uint32 ContinuedTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContinuedTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &continuedtime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ContinuedNum;
        break;
      }
      
      // optional uint32 ContinuedNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContinuedNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &continuednum_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_IgnoreArmor;
        break;
      }
      
      // optional uint32 IgnoreArmor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreArmor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignorearmor_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBNormalSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBNormalSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->skillinfo(), output);
  }
  
  // optional uint32 SkillHitrate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->skillhitrate(), output);
  }
  
  // optional uint32 MinDistance = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mindistance(), output);
  }
  
  // optional uint32 MaxDistance = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->maxdistance(), output);
  }
  
  // optional uint32 EfktMaxNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->efktmaxnum(), output);
  }
  
  // optional uint32 AttackRange = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->attackrange(), output);
  }
  
  // repeated uint32 RandParam = 7;
  for (int i = 0; i < this->randparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->randparam(i), output);
  }
  
  // repeated uint32 BuffGroupID = 8;
  for (int i = 0; i < this->buffgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->buffgroupid(i), output);
  }
  
  // optional uint32 ContinuedRule = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->continuedrule(), output);
  }
  
  // optional uint32 ContinuedTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->continuedtime(), output);
  }
  
  // optional uint32 ContinuedNum = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->continuednum(), output);
  }
  
  // optional uint32 IgnoreArmor = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->ignorearmor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBNormalSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->skillinfo(), target);
  }
  
  // optional uint32 SkillHitrate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->skillhitrate(), target);
  }
  
  // optional uint32 MinDistance = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mindistance(), target);
  }
  
  // optional uint32 MaxDistance = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->maxdistance(), target);
  }
  
  // optional uint32 EfktMaxNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->efktmaxnum(), target);
  }
  
  // optional uint32 AttackRange = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->attackrange(), target);
  }
  
  // repeated uint32 RandParam = 7;
  for (int i = 0; i < this->randparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->randparam(i), target);
  }
  
  // repeated uint32 BuffGroupID = 8;
  for (int i = 0; i < this->buffgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->buffgroupid(i), target);
  }
  
  // optional uint32 ContinuedRule = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->continuedrule(), target);
  }
  
  // optional uint32 ContinuedTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->continuedtime(), target);
  }
  
  // optional uint32 ContinuedNum = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->continuednum(), target);
  }
  
  // optional uint32 IgnoreArmor = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->ignorearmor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBNormalSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSkill SkillInfo = 1;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skillinfo());
    }
    
    // optional uint32 SkillHitrate = 2;
    if (has_skillhitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillhitrate());
    }
    
    // optional uint32 MinDistance = 3;
    if (has_mindistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mindistance());
    }
    
    // optional uint32 MaxDistance = 4;
    if (has_maxdistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxdistance());
    }
    
    // optional uint32 EfktMaxNum = 5;
    if (has_efktmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->efktmaxnum());
    }
    
    // optional uint32 AttackRange = 6;
    if (has_attackrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackrange());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ContinuedRule = 9;
    if (has_continuedrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->continuedrule());
    }
    
    // optional uint32 ContinuedTime = 10;
    if (has_continuedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->continuedtime());
    }
    
    // optional uint32 ContinuedNum = 11;
    if (has_continuednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->continuednum());
    }
    
    // optional uint32 IgnoreArmor = 12;
    if (has_ignorearmor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignorearmor());
    }
    
  }
  // repeated uint32 RandParam = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->randparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->randparam(i));
    }
    total_size += 1 * this->randparam_size() + data_size;
  }
  
  // repeated uint32 BuffGroupID = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffgroupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->buffgroupid(i));
    }
    total_size += 1 * this->buffgroupid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBNormalSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBNormalSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBNormalSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBNormalSkill::MergeFrom(const PBNormalSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  randparam_.MergeFrom(from.randparam_);
  buffgroupid_.MergeFrom(from.buffgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_skillinfo()->::PBSkill::MergeFrom(from.skillinfo());
    }
    if (from._has_bit(1)) {
      set_skillhitrate(from.skillhitrate());
    }
    if (from._has_bit(2)) {
      set_mindistance(from.mindistance());
    }
    if (from._has_bit(3)) {
      set_maxdistance(from.maxdistance());
    }
    if (from._has_bit(4)) {
      set_efktmaxnum(from.efktmaxnum());
    }
    if (from._has_bit(5)) {
      set_attackrange(from.attackrange());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_continuedrule(from.continuedrule());
    }
    if (from._has_bit(9)) {
      set_continuedtime(from.continuedtime());
    }
    if (from._has_bit(10)) {
      set_continuednum(from.continuednum());
    }
    if (from._has_bit(11)) {
      set_ignorearmor(from.ignorearmor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBNormalSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNormalSkill::CopyFrom(const PBNormalSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNormalSkill::Swap(PBNormalSkill* other) {
  if (other != this) {
    std::swap(skillinfo_, other->skillinfo_);
    std::swap(skillhitrate_, other->skillhitrate_);
    std::swap(mindistance_, other->mindistance_);
    std::swap(maxdistance_, other->maxdistance_);
    std::swap(efktmaxnum_, other->efktmaxnum_);
    std::swap(attackrange_, other->attackrange_);
    randparam_.Swap(&other->randparam_);
    buffgroupid_.Swap(&other->buffgroupid_);
    std::swap(continuedrule_, other->continuedrule_);
    std::swap(continuedtime_, other->continuedtime_);
    std::swap(continuednum_, other->continuednum_);
    std::swap(ignorearmor_, other->ignorearmor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBNormalSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBNormalSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBNormalSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBNormalSkill_reflection_;
}

// ===================================================================

const ::std::string PBTrapSkill::_default_trapres_;
#ifndef _MSC_VER
const int PBTrapSkill::kSkillInfoFieldNumber;
const int PBTrapSkill::kLastTimeFieldNumber;
const int PBTrapSkill::kApplyTypeFieldNumber;
const int PBTrapSkill::kTouchRangeFieldNumber;
const int PBTrapSkill::kApplyRangeFieldNumber;
const int PBTrapSkill::kTrapResFieldNumber;
const int PBTrapSkill::kBuffGroupIDFieldNumber;
const int PBTrapSkill::kConditionFieldNumber;
const int PBTrapSkill::kEffectMaxNumberFieldNumber;
#endif  // !_MSC_VER

PBTrapSkill::PBTrapSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTrapSkill::InitAsDefaultInstance() {  skillinfo_ = const_cast< ::PBSkill*>(&::PBSkill::default_instance());
}

PBTrapSkill::PBTrapSkill(const PBTrapSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTrapSkill::SharedCtor() {
  _cached_size_ = 0;
  skillinfo_ = NULL;
  lasttime_ = 0u;
  applytype_ = 0u;
  touchrange_ = 0u;
  applyrange_ = 0u;
  trapres_ = const_cast< ::std::string*>(&_default_trapres_);
  effectmaxnumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTrapSkill::~PBTrapSkill() {
  SharedDtor();
}

void PBTrapSkill::SharedDtor() {
  if (trapres_ != &_default_trapres_) {
    delete trapres_;
  }
  if (this != default_instance_) {
    delete skillinfo_;
  }
}

const ::google::protobuf::Descriptor* PBTrapSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTrapSkill_descriptor_;
}

const PBTrapSkill& PBTrapSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTrapSkill* PBTrapSkill::default_instance_ = NULL;

PBTrapSkill* PBTrapSkill::New() const {
  return new PBTrapSkill;
}

void PBTrapSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (skillinfo_ != NULL) skillinfo_->::PBSkill::Clear();
    }
    lasttime_ = 0u;
    applytype_ = 0u;
    touchrange_ = 0u;
    applyrange_ = 0u;
    if (_has_bit(5)) {
      if (trapres_ != &_default_trapres_) {
        trapres_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effectmaxnumber_ = 0u;
  }
  buffgroupid_.Clear();
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTrapSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBSkill SkillInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skillinfo()));
        if (input->ExpectTag(16)) goto parse_LastTime;
        break;
      }
      
      // optional uint32 LastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lasttime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ApplyType;
        break;
      }
      
      // optional uint32 ApplyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ApplyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &applytype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TouchRange;
        break;
      }
      
      // optional uint32 TouchRange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TouchRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &touchrange_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ApplyRange;
        break;
      }
      
      // optional uint32 ApplyRange = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ApplyRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &applyrange_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_TrapRes;
        break;
      }
      
      // optional string TrapRes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TrapRes:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_trapres()));
        if (input->ExpectTag(56)) goto parse_BuffGroupID;
        break;
      }
      
      // repeated uint32 BuffGroupID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffGroupID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_buffgroupid(value);
        if (input->ExpectTag(56)) goto parse_BuffGroupID;
        if (input->ExpectTag(64)) goto parse_Condition;
        break;
      }
      
      // repeated uint32 Condition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Condition:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_condition(value);
        if (input->ExpectTag(64)) goto parse_Condition;
        if (input->ExpectTag(72)) goto parse_EffectMaxNumber;
        break;
      }
      
      // optional uint32 EffectMaxNumber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EffectMaxNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &effectmaxnumber_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTrapSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTrapSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->skillinfo(), output);
  }
  
  // optional uint32 LastTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lasttime(), output);
  }
  
  // optional uint32 ApplyType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->applytype(), output);
  }
  
  // optional uint32 TouchRange = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->touchrange(), output);
  }
  
  // optional uint32 ApplyRange = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->applyrange(), output);
  }
  
  // optional string TrapRes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->trapres(), output);
  }
  
  // repeated uint32 BuffGroupID = 7;
  for (int i = 0; i < this->buffgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->buffgroupid(i), output);
  }
  
  // repeated uint32 Condition = 8;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->condition(i), output);
  }
  
  // optional uint32 EffectMaxNumber = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->effectmaxnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTrapSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSkill SkillInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->skillinfo(), target);
  }
  
  // optional uint32 LastTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lasttime(), target);
  }
  
  // optional uint32 ApplyType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->applytype(), target);
  }
  
  // optional uint32 TouchRange = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->touchrange(), target);
  }
  
  // optional uint32 ApplyRange = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->applyrange(), target);
  }
  
  // optional string TrapRes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->trapres(), target);
  }
  
  // repeated uint32 BuffGroupID = 7;
  for (int i = 0; i < this->buffgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->buffgroupid(i), target);
  }
  
  // repeated uint32 Condition = 8;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->condition(i), target);
  }
  
  // optional uint32 EffectMaxNumber = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->effectmaxnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTrapSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSkill SkillInfo = 1;
    if (has_skillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skillinfo());
    }
    
    // optional uint32 LastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lasttime());
    }
    
    // optional uint32 ApplyType = 3;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->applytype());
    }
    
    // optional uint32 TouchRange = 4;
    if (has_touchrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->touchrange());
    }
    
    // optional uint32 ApplyRange = 5;
    if (has_applyrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->applyrange());
    }
    
    // optional string TrapRes = 6;
    if (has_trapres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->trapres());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 EffectMaxNumber = 9;
    if (has_effectmaxnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->effectmaxnumber());
    }
    
  }
  // repeated uint32 BuffGroupID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffgroupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->buffgroupid(i));
    }
    total_size += 1 * this->buffgroupid_size() + data_size;
  }
  
  // repeated uint32 Condition = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTrapSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTrapSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTrapSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTrapSkill::MergeFrom(const PBTrapSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffgroupid_.MergeFrom(from.buffgroupid_);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_skillinfo()->::PBSkill::MergeFrom(from.skillinfo());
    }
    if (from._has_bit(1)) {
      set_lasttime(from.lasttime());
    }
    if (from._has_bit(2)) {
      set_applytype(from.applytype());
    }
    if (from._has_bit(3)) {
      set_touchrange(from.touchrange());
    }
    if (from._has_bit(4)) {
      set_applyrange(from.applyrange());
    }
    if (from._has_bit(5)) {
      set_trapres(from.trapres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_effectmaxnumber(from.effectmaxnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTrapSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTrapSkill::CopyFrom(const PBTrapSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTrapSkill::Swap(PBTrapSkill* other) {
  if (other != this) {
    std::swap(skillinfo_, other->skillinfo_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(applytype_, other->applytype_);
    std::swap(touchrange_, other->touchrange_);
    std::swap(applyrange_, other->applyrange_);
    std::swap(trapres_, other->trapres_);
    buffgroupid_.Swap(&other->buffgroupid_);
    condition_.Swap(&other->condition_);
    std::swap(effectmaxnumber_, other->effectmaxnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTrapSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTrapSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTrapSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTrapSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBuffFunc::kFuncTypeFieldNumber;
const int PBBuffFunc::kParameFieldNumber;
#endif  // !_MSC_VER

PBBuffFunc::PBBuffFunc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuffFunc::InitAsDefaultInstance() {}

PBBuffFunc::PBBuffFunc(const PBBuffFunc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuffFunc::SharedCtor() {
  _cached_size_ = 0;
  functype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuffFunc::~PBBuffFunc() {
  SharedDtor();
}

void PBBuffFunc::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBuffFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuffFunc_descriptor_;
}

const PBBuffFunc& PBBuffFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBuffFunc* PBBuffFunc::default_instance_ = NULL;

PBBuffFunc* PBBuffFunc::New() const {
  return new PBBuffFunc;
}

void PBBuffFunc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functype_ = 0u;
  }
  parame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuffFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FuncType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Parame;
        break;
      }
      
      // repeated uint32 Parame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parame(value);
        if (input->ExpectTag(16)) goto parse_Parame;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuffFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBuffFunc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FuncType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->functype(), output);
  }
  
  // repeated uint32 Parame = 2;
  for (int i = 0; i < this->parame_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->parame(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuffFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FuncType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->functype(), target);
  }
  
  // repeated uint32 Parame = 2;
  for (int i = 0; i < this->parame_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->parame(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuffFunc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FuncType = 1;
    if (has_functype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functype());
    }
    
  }
  // repeated uint32 Parame = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->parame_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parame(i));
    }
    total_size += 1 * this->parame_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBuffFunc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuffFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuffFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuffFunc::MergeFrom(const PBBuffFunc& from) {
  GOOGLE_CHECK_NE(&from, this);
  parame_.MergeFrom(from.parame_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_functype(from.functype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuffFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffFunc::CopyFrom(const PBBuffFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffFunc::Swap(PBBuffFunc* other) {
  if (other != this) {
    std::swap(functype_, other->functype_);
    parame_.Swap(&other->parame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBuffFunc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBuffFunc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBuffFunc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBuffFunc_reflection_;
}

// ===================================================================

const ::std::string PBBuff::_default_buffname_;
const ::std::string PBBuff::_default_bufficon_;
const ::std::string PBBuff::_default_buffdescribe_;
const ::std::string PBBuff::_default_buffani_;
#ifndef _MSC_VER
const int PBBuff::kTempIDFieldNumber;
const int PBBuff::kBuffServiceIDFieldNumber;
const int PBBuff::kIdenValueFieldNumber;
const int PBBuff::kBuffStyleFieldNumber;
const int PBBuff::kFirstActiveTimeFieldNumber;
const int PBBuff::kActiveTimeFieldNumber;
const int PBBuff::kBuffFuncFieldNumber;
const int PBBuff::kBuffNameFieldNumber;
const int PBBuff::kBuffIconFieldNumber;
const int PBBuff::kBuffDescribeFieldNumber;
const int PBBuff::kHitrateFieldNumber;
const int PBBuff::kBuffValueFieldNumber;
const int PBBuff::kResistTypeFieldNumber;
const int PBBuff::kLastTimeFieldNumber;
const int PBBuff::kBuffTypeFieldNumber;
const int PBBuff::kCancelBuffFieldNumber;
const int PBBuff::kEnableBattleFieldNumber;
const int PBBuff::kBuffAniFieldNumber;
const int PBBuff::kBuffRowFieldNumber;
const int PBBuff::kBuffDieDelFieldNumber;
const int PBBuff::kTimerTypeFieldNumber;
const int PBBuff::kBuffClearFieldNumber;
const int PBBuff::kBuffMapIDFieldNumber;
const int PBBuff::kBuffLineIDFieldNumber;
const int PBBuff::kSkillLevelFieldNumber;
const int PBBuff::kBuffMapTypeFieldNumber;
const int PBBuff::kCountryBuffFieldNumber;
const int PBBuff::kBuffSuperpositionFieldNumber;
const int PBBuff::kAccurateFieldNumber;
const int PBBuff::kOffRemoveFieldNumber;
const int PBBuff::kTransformFieldNumber;
const int PBBuff::kRemoveCountIDFieldNumber;
#endif  // !_MSC_VER

PBBuff::PBBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuff::InitAsDefaultInstance() {}

PBBuff::PBBuff(const PBBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuff::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  buffserviceid_ = 0u;
  idenvalue_ = 0u;
  buffstyle_ = 0u;
  firstactivetime_ = 0u;
  activetime_ = 0u;
  buffname_ = const_cast< ::std::string*>(&_default_buffname_);
  bufficon_ = const_cast< ::std::string*>(&_default_bufficon_);
  buffdescribe_ = const_cast< ::std::string*>(&_default_buffdescribe_);
  hitrate_ = 0u;
  buffvalue_ = 0u;
  resisttype_ = 0u;
  lasttime_ = 0u;
  bufftype_ = 0u;
  cancelbuff_ = 0u;
  enablebattle_ = 0u;
  buffani_ = const_cast< ::std::string*>(&_default_buffani_);
  buffrow_ = 0u;
  buffdiedel_ = 0u;
  timertype_ = 0u;
  buffclear_ = 0u;
  buffmapid_ = 0u;
  bufflineid_ = 0u;
  skilllevel_ = 0u;
  buffmaptype_ = 0u;
  countrybuff_ = 0u;
  buffsuperposition_ = 0u;
  accurate_ = 0u;
  offremove_ = 0u;
  transform_ = 0u;
  removecountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuff::~PBBuff() {
  SharedDtor();
}

void PBBuff::SharedDtor() {
  if (buffname_ != &_default_buffname_) {
    delete buffname_;
  }
  if (bufficon_ != &_default_bufficon_) {
    delete bufficon_;
  }
  if (buffdescribe_ != &_default_buffdescribe_) {
    delete buffdescribe_;
  }
  if (buffani_ != &_default_buffani_) {
    delete buffani_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuff_descriptor_;
}

const PBBuff& PBBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBuff* PBBuff::default_instance_ = NULL;

PBBuff* PBBuff::New() const {
  return new PBBuff;
}

void PBBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    buffserviceid_ = 0u;
    idenvalue_ = 0u;
    buffstyle_ = 0u;
    firstactivetime_ = 0u;
    activetime_ = 0u;
    if (_has_bit(7)) {
      if (buffname_ != &_default_buffname_) {
        buffname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (bufficon_ != &_default_bufficon_) {
        bufficon_->clear();
      }
    }
    if (_has_bit(9)) {
      if (buffdescribe_ != &_default_buffdescribe_) {
        buffdescribe_->clear();
      }
    }
    hitrate_ = 0u;
    buffvalue_ = 0u;
    resisttype_ = 0u;
    lasttime_ = 0u;
    bufftype_ = 0u;
    cancelbuff_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    enablebattle_ = 0u;
    if (_has_bit(17)) {
      if (buffani_ != &_default_buffani_) {
        buffani_->clear();
      }
    }
    buffrow_ = 0u;
    buffdiedel_ = 0u;
    timertype_ = 0u;
    buffclear_ = 0u;
    buffmapid_ = 0u;
    bufflineid_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    skilllevel_ = 0u;
    buffmaptype_ = 0u;
    countrybuff_ = 0u;
    buffsuperposition_ = 0u;
    accurate_ = 0u;
    offremove_ = 0u;
    transform_ = 0u;
    removecountid_ = 0u;
  }
  bufffunc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BuffServiceID;
        break;
      }
      
      // optional uint32 BuffServiceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffServiceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffserviceid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IdenValue;
        break;
      }
      
      // optional uint32 IdenValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IdenValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &idenvalue_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BuffStyle;
        break;
      }
      
      // optional uint32 BuffStyle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffStyle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffstyle_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_FirstActiveTime;
        break;
      }
      
      // optional uint32 FirstActiveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FirstActiveTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &firstactivetime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ActiveTime;
        break;
      }
      
      // optional uint32 ActiveTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActiveTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activetime_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_BuffFunc;
        break;
      }
      
      // repeated .PBBuffFunc BuffFunc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffFunc:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bufffunc()));
        if (input->ExpectTag(58)) goto parse_BuffFunc;
        if (input->ExpectTag(66)) goto parse_BuffName;
        break;
      }
      
      // optional string BuffName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buffname()));
        if (input->ExpectTag(74)) goto parse_BuffIcon;
        break;
      }
      
      // optional string BuffIcon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffIcon:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bufficon()));
        if (input->ExpectTag(82)) goto parse_BuffDescribe;
        break;
      }
      
      // optional string BuffDescribe = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffDescribe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buffdescribe()));
        if (input->ExpectTag(88)) goto parse_Hitrate;
        break;
      }
      
      // optional uint32 Hitrate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Hitrate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hitrate_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_BuffValue;
        break;
      }
      
      // optional uint32 BuffValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffvalue_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ResistType;
        break;
      }
      
      // optional uint32 ResistType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResistType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resisttype_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_LastTime;
        break;
      }
      
      // optional uint32 LastTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lasttime_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_BuffType;
        break;
      }
      
      // optional uint32 BuffType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufftype_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_CancelBuff;
        break;
      }
      
      // optional uint32 CancelBuff = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CancelBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cancelbuff_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_EnableBattle;
        break;
      }
      
      // optional uint32 EnableBattle = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EnableBattle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &enablebattle_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_BuffAni;
        break;
      }
      
      // optional string BuffAni = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffAni:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_buffani()));
        if (input->ExpectTag(152)) goto parse_BuffRow;
        break;
      }
      
      // optional uint32 BuffRow = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffRow:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffrow_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_BuffDieDel;
        break;
      }
      
      // optional uint32 BuffDieDel = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffDieDel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffdiedel_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_TimerType;
        break;
      }
      
      // optional uint32 TimerType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimerType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timertype_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_BuffClear;
        break;
      }
      
      // optional uint32 BuffClear = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffClear:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffclear_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_BuffMapID;
        break;
      }
      
      // optional uint32 BuffMapID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffmapid_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_BuffLineID;
        break;
      }
      
      // optional uint32 BuffLineID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffLineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufflineid_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_SkillLevel;
        break;
      }
      
      // optional uint32 SkillLevel = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllevel_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_BuffMapType;
        break;
      }
      
      // optional uint32 BuffMapType = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffMapType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffmaptype_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_CountryBuff;
        break;
      }
      
      // optional uint32 CountryBuff = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countrybuff_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_BuffSuperposition;
        break;
      }
      
      // optional uint32 BuffSuperposition = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffSuperposition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffsuperposition_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_Accurate;
        break;
      }
      
      // optional uint32 Accurate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Accurate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accurate_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_OffRemove;
        break;
      }
      
      // optional uint32 OffRemove = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffRemove:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offremove_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_Transform;
        break;
      }
      
      // optional uint32 Transform = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Transform:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &transform_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_RemoveCountID;
        break;
      }
      
      // optional uint32 RemoveCountID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveCountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removecountid_));
        _set_bit(31);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBuff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 BuffServiceID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->buffserviceid(), output);
  }
  
  // optional uint32 IdenValue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->idenvalue(), output);
  }
  
  // optional uint32 BuffStyle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->buffstyle(), output);
  }
  
  // optional uint32 FirstActiveTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->firstactivetime(), output);
  }
  
  // optional uint32 ActiveTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->activetime(), output);
  }
  
  // repeated .PBBuffFunc BuffFunc = 7;
  for (int i = 0; i < this->bufffunc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->bufffunc(i), output);
  }
  
  // optional string BuffName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->buffname(), output);
  }
  
  // optional string BuffIcon = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->bufficon(), output);
  }
  
  // optional string BuffDescribe = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->buffdescribe(), output);
  }
  
  // optional uint32 Hitrate = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->hitrate(), output);
  }
  
  // optional uint32 BuffValue = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->buffvalue(), output);
  }
  
  // optional uint32 ResistType = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->resisttype(), output);
  }
  
  // optional uint32 LastTime = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->lasttime(), output);
  }
  
  // optional uint32 BuffType = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->bufftype(), output);
  }
  
  // optional uint32 CancelBuff = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->cancelbuff(), output);
  }
  
  // optional uint32 EnableBattle = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->enablebattle(), output);
  }
  
  // optional string BuffAni = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteString(18, this->buffani(), output);
  }
  
  // optional uint32 BuffRow = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->buffrow(), output);
  }
  
  // optional uint32 BuffDieDel = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->buffdiedel(), output);
  }
  
  // optional uint32 TimerType = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->timertype(), output);
  }
  
  // optional uint32 BuffClear = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->buffclear(), output);
  }
  
  // optional uint32 BuffMapID = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->buffmapid(), output);
  }
  
  // optional uint32 BuffLineID = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->bufflineid(), output);
  }
  
  // optional uint32 SkillLevel = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->skilllevel(), output);
  }
  
  // optional uint32 BuffMapType = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->buffmaptype(), output);
  }
  
  // optional uint32 CountryBuff = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->countrybuff(), output);
  }
  
  // optional uint32 BuffSuperposition = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->buffsuperposition(), output);
  }
  
  // optional uint32 Accurate = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->accurate(), output);
  }
  
  // optional uint32 OffRemove = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->offremove(), output);
  }
  
  // optional uint32 Transform = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->transform(), output);
  }
  
  // optional uint32 RemoveCountID = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->removecountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 BuffServiceID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->buffserviceid(), target);
  }
  
  // optional uint32 IdenValue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->idenvalue(), target);
  }
  
  // optional uint32 BuffStyle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->buffstyle(), target);
  }
  
  // optional uint32 FirstActiveTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->firstactivetime(), target);
  }
  
  // optional uint32 ActiveTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->activetime(), target);
  }
  
  // repeated .PBBuffFunc BuffFunc = 7;
  for (int i = 0; i < this->bufffunc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->bufffunc(i), target);
  }
  
  // optional string BuffName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->buffname(), target);
  }
  
  // optional string BuffIcon = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->bufficon(), target);
  }
  
  // optional string BuffDescribe = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->buffdescribe(), target);
  }
  
  // optional uint32 Hitrate = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->hitrate(), target);
  }
  
  // optional uint32 BuffValue = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->buffvalue(), target);
  }
  
  // optional uint32 ResistType = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->resisttype(), target);
  }
  
  // optional uint32 LastTime = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->lasttime(), target);
  }
  
  // optional uint32 BuffType = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->bufftype(), target);
  }
  
  // optional uint32 CancelBuff = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->cancelbuff(), target);
  }
  
  // optional uint32 EnableBattle = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->enablebattle(), target);
  }
  
  // optional string BuffAni = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(18, this->buffani(), target);
  }
  
  // optional uint32 BuffRow = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->buffrow(), target);
  }
  
  // optional uint32 BuffDieDel = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->buffdiedel(), target);
  }
  
  // optional uint32 TimerType = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->timertype(), target);
  }
  
  // optional uint32 BuffClear = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->buffclear(), target);
  }
  
  // optional uint32 BuffMapID = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->buffmapid(), target);
  }
  
  // optional uint32 BuffLineID = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->bufflineid(), target);
  }
  
  // optional uint32 SkillLevel = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->skilllevel(), target);
  }
  
  // optional uint32 BuffMapType = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->buffmaptype(), target);
  }
  
  // optional uint32 CountryBuff = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->countrybuff(), target);
  }
  
  // optional uint32 BuffSuperposition = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->buffsuperposition(), target);
  }
  
  // optional uint32 Accurate = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->accurate(), target);
  }
  
  // optional uint32 OffRemove = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->offremove(), target);
  }
  
  // optional uint32 Transform = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->transform(), target);
  }
  
  // optional uint32 RemoveCountID = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->removecountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 BuffServiceID = 2;
    if (has_buffserviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffserviceid());
    }
    
    // optional uint32 IdenValue = 3;
    if (has_idenvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->idenvalue());
    }
    
    // optional uint32 BuffStyle = 4;
    if (has_buffstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffstyle());
    }
    
    // optional uint32 FirstActiveTime = 5;
    if (has_firstactivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->firstactivetime());
    }
    
    // optional uint32 ActiveTime = 6;
    if (has_activetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activetime());
    }
    
    // optional string BuffName = 8;
    if (has_buffname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buffname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string BuffIcon = 9;
    if (has_bufficon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bufficon());
    }
    
    // optional string BuffDescribe = 10;
    if (has_buffdescribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buffdescribe());
    }
    
    // optional uint32 Hitrate = 11;
    if (has_hitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hitrate());
    }
    
    // optional uint32 BuffValue = 12;
    if (has_buffvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffvalue());
    }
    
    // optional uint32 ResistType = 13;
    if (has_resisttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resisttype());
    }
    
    // optional uint32 LastTime = 14;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lasttime());
    }
    
    // optional uint32 BuffType = 15;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufftype());
    }
    
    // optional uint32 CancelBuff = 16;
    if (has_cancelbuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cancelbuff());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 EnableBattle = 17;
    if (has_enablebattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->enablebattle());
    }
    
    // optional string BuffAni = 18;
    if (has_buffani()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->buffani());
    }
    
    // optional uint32 BuffRow = 19;
    if (has_buffrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffrow());
    }
    
    // optional uint32 BuffDieDel = 20;
    if (has_buffdiedel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffdiedel());
    }
    
    // optional uint32 TimerType = 21;
    if (has_timertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timertype());
    }
    
    // optional uint32 BuffClear = 22;
    if (has_buffclear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffclear());
    }
    
    // optional uint32 BuffMapID = 23;
    if (has_buffmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffmapid());
    }
    
    // optional uint32 BuffLineID = 24;
    if (has_bufflineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufflineid());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 SkillLevel = 25;
    if (has_skilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllevel());
    }
    
    // optional uint32 BuffMapType = 26;
    if (has_buffmaptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffmaptype());
    }
    
    // optional uint32 CountryBuff = 27;
    if (has_countrybuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countrybuff());
    }
    
    // optional uint32 BuffSuperposition = 28;
    if (has_buffsuperposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffsuperposition());
    }
    
    // optional uint32 Accurate = 29;
    if (has_accurate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accurate());
    }
    
    // optional uint32 OffRemove = 30;
    if (has_offremove()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offremove());
    }
    
    // optional uint32 Transform = 31;
    if (has_transform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->transform());
    }
    
    // optional uint32 RemoveCountID = 32;
    if (has_removecountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removecountid());
    }
    
  }
  // repeated .PBBuffFunc BuffFunc = 7;
  total_size += 1 * this->bufffunc_size();
  for (int i = 0; i < this->bufffunc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bufffunc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuff::MergeFrom(const PBBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufffunc_.MergeFrom(from.bufffunc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_buffserviceid(from.buffserviceid());
    }
    if (from._has_bit(2)) {
      set_idenvalue(from.idenvalue());
    }
    if (from._has_bit(3)) {
      set_buffstyle(from.buffstyle());
    }
    if (from._has_bit(4)) {
      set_firstactivetime(from.firstactivetime());
    }
    if (from._has_bit(5)) {
      set_activetime(from.activetime());
    }
    if (from._has_bit(7)) {
      set_buffname(from.buffname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_bufficon(from.bufficon());
    }
    if (from._has_bit(9)) {
      set_buffdescribe(from.buffdescribe());
    }
    if (from._has_bit(10)) {
      set_hitrate(from.hitrate());
    }
    if (from._has_bit(11)) {
      set_buffvalue(from.buffvalue());
    }
    if (from._has_bit(12)) {
      set_resisttype(from.resisttype());
    }
    if (from._has_bit(13)) {
      set_lasttime(from.lasttime());
    }
    if (from._has_bit(14)) {
      set_bufftype(from.bufftype());
    }
    if (from._has_bit(15)) {
      set_cancelbuff(from.cancelbuff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_enablebattle(from.enablebattle());
    }
    if (from._has_bit(17)) {
      set_buffani(from.buffani());
    }
    if (from._has_bit(18)) {
      set_buffrow(from.buffrow());
    }
    if (from._has_bit(19)) {
      set_buffdiedel(from.buffdiedel());
    }
    if (from._has_bit(20)) {
      set_timertype(from.timertype());
    }
    if (from._has_bit(21)) {
      set_buffclear(from.buffclear());
    }
    if (from._has_bit(22)) {
      set_buffmapid(from.buffmapid());
    }
    if (from._has_bit(23)) {
      set_bufflineid(from.bufflineid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_skilllevel(from.skilllevel());
    }
    if (from._has_bit(25)) {
      set_buffmaptype(from.buffmaptype());
    }
    if (from._has_bit(26)) {
      set_countrybuff(from.countrybuff());
    }
    if (from._has_bit(27)) {
      set_buffsuperposition(from.buffsuperposition());
    }
    if (from._has_bit(28)) {
      set_accurate(from.accurate());
    }
    if (from._has_bit(29)) {
      set_offremove(from.offremove());
    }
    if (from._has_bit(30)) {
      set_transform(from.transform());
    }
    if (from._has_bit(31)) {
      set_removecountid(from.removecountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuff::CopyFrom(const PBBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuff::Swap(PBBuff* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(buffserviceid_, other->buffserviceid_);
    std::swap(idenvalue_, other->idenvalue_);
    std::swap(buffstyle_, other->buffstyle_);
    std::swap(firstactivetime_, other->firstactivetime_);
    std::swap(activetime_, other->activetime_);
    bufffunc_.Swap(&other->bufffunc_);
    std::swap(buffname_, other->buffname_);
    std::swap(bufficon_, other->bufficon_);
    std::swap(buffdescribe_, other->buffdescribe_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(buffvalue_, other->buffvalue_);
    std::swap(resisttype_, other->resisttype_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(bufftype_, other->bufftype_);
    std::swap(cancelbuff_, other->cancelbuff_);
    std::swap(enablebattle_, other->enablebattle_);
    std::swap(buffani_, other->buffani_);
    std::swap(buffrow_, other->buffrow_);
    std::swap(buffdiedel_, other->buffdiedel_);
    std::swap(timertype_, other->timertype_);
    std::swap(buffclear_, other->buffclear_);
    std::swap(buffmapid_, other->buffmapid_);
    std::swap(bufflineid_, other->bufflineid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(buffmaptype_, other->buffmaptype_);
    std::swap(countrybuff_, other->countrybuff_);
    std::swap(buffsuperposition_, other->buffsuperposition_);
    std::swap(accurate_, other->accurate_);
    std::swap(offremove_, other->offremove_);
    std::swap(transform_, other->transform_);
    std::swap(removecountid_, other->removecountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBuff::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBuff::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBuff::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBuff_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLevelExp::kTempIDFieldNumber;
const int PBLevelExp::kLevelExpFieldNumber;
#endif  // !_MSC_VER

PBLevelExp::PBLevelExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLevelExp::InitAsDefaultInstance() {}

PBLevelExp::PBLevelExp(const PBLevelExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLevelExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLevelExp::~PBLevelExp() {
  SharedDtor();
}

void PBLevelExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLevelExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLevelExp_descriptor_;
}

const PBLevelExp& PBLevelExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLevelExp* PBLevelExp::default_instance_ = NULL;

PBLevelExp* PBLevelExp::New() const {
  return new PBLevelExp;
}

void PBLevelExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  levelexp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLevelExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        break;
      }
      
      // repeated uint64 LevelExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelExp:
        ::google::protobuf::uint64 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(input, &value));
        add_levelexp(value);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLevelExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLevelExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint64 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->levelexp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLevelExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint64 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->levelexp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLevelExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint64 LevelExp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt64Size(
        this->levelexp(i));
    }
    total_size += 1 * this->levelexp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLevelExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLevelExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLevelExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLevelExp::MergeFrom(const PBLevelExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelexp_.MergeFrom(from.levelexp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLevelExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelExp::CopyFrom(const PBLevelExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelExp::Swap(PBLevelExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    levelexp_.Swap(&other->levelexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLevelExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLevelExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLevelExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLevelExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSingleMoneyLmt::kBagMoneyLmtFieldNumber;
const int PBSingleMoneyLmt::kBagBindMoneyLmtFieldNumber;
const int PBSingleMoneyLmt::kStorageMoneyLmtFieldNumber;
const int PBSingleMoneyLmt::kStorageBindMoneyLmtFieldNumber;
#endif  // !_MSC_VER

PBSingleMoneyLmt::PBSingleMoneyLmt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleMoneyLmt::InitAsDefaultInstance() {}

PBSingleMoneyLmt::PBSingleMoneyLmt(const PBSingleMoneyLmt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleMoneyLmt::SharedCtor() {
  _cached_size_ = 0;
  bagmoneylmt_ = 0u;
  bagbindmoneylmt_ = 0u;
  storagemoneylmt_ = 0u;
  storagebindmoneylmt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleMoneyLmt::~PBSingleMoneyLmt() {
  SharedDtor();
}

void PBSingleMoneyLmt::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleMoneyLmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleMoneyLmt_descriptor_;
}

const PBSingleMoneyLmt& PBSingleMoneyLmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSingleMoneyLmt* PBSingleMoneyLmt::default_instance_ = NULL;

PBSingleMoneyLmt* PBSingleMoneyLmt::New() const {
  return new PBSingleMoneyLmt;
}

void PBSingleMoneyLmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagmoneylmt_ = 0u;
    bagbindmoneylmt_ = 0u;
    storagemoneylmt_ = 0u;
    storagebindmoneylmt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleMoneyLmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BagMoneyLmt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bagmoneylmt_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BagBindMoneyLmt;
        break;
      }
      
      // optional uint32 BagBindMoneyLmt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BagBindMoneyLmt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bagbindmoneylmt_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_StorageMoneyLmt;
        break;
      }
      
      // optional uint32 StorageMoneyLmt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StorageMoneyLmt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storagemoneylmt_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_StorageBindMoneyLmt;
        break;
      }
      
      // optional uint32 StorageBindMoneyLmt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StorageBindMoneyLmt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storagebindmoneylmt_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleMoneyLmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleMoneyLmt::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BagMoneyLmt = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->bagmoneylmt(), output);
  }
  
  // optional uint32 BagBindMoneyLmt = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->bagbindmoneylmt(), output);
  }
  
  // optional uint32 StorageMoneyLmt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->storagemoneylmt(), output);
  }
  
  // optional uint32 StorageBindMoneyLmt = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->storagebindmoneylmt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleMoneyLmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BagMoneyLmt = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->bagmoneylmt(), target);
  }
  
  // optional uint32 BagBindMoneyLmt = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->bagbindmoneylmt(), target);
  }
  
  // optional uint32 StorageMoneyLmt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->storagemoneylmt(), target);
  }
  
  // optional uint32 StorageBindMoneyLmt = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->storagebindmoneylmt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleMoneyLmt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BagMoneyLmt = 1;
    if (has_bagmoneylmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bagmoneylmt());
    }
    
    // optional uint32 BagBindMoneyLmt = 2;
    if (has_bagbindmoneylmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bagbindmoneylmt());
    }
    
    // optional uint32 StorageMoneyLmt = 3;
    if (has_storagemoneylmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storagemoneylmt());
    }
    
    // optional uint32 StorageBindMoneyLmt = 4;
    if (has_storagebindmoneylmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storagebindmoneylmt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleMoneyLmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleMoneyLmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleMoneyLmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleMoneyLmt::MergeFrom(const PBSingleMoneyLmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bagmoneylmt(from.bagmoneylmt());
    }
    if (from._has_bit(1)) {
      set_bagbindmoneylmt(from.bagbindmoneylmt());
    }
    if (from._has_bit(2)) {
      set_storagemoneylmt(from.storagemoneylmt());
    }
    if (from._has_bit(3)) {
      set_storagebindmoneylmt(from.storagebindmoneylmt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleMoneyLmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleMoneyLmt::CopyFrom(const PBSingleMoneyLmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleMoneyLmt::Swap(PBSingleMoneyLmt* other) {
  if (other != this) {
    std::swap(bagmoneylmt_, other->bagmoneylmt_);
    std::swap(bagbindmoneylmt_, other->bagbindmoneylmt_);
    std::swap(storagemoneylmt_, other->storagemoneylmt_);
    std::swap(storagebindmoneylmt_, other->storagebindmoneylmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleMoneyLmt::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleMoneyLmt::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleMoneyLmt::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleMoneyLmt_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLevelMoneyLmt::kTempIDFieldNumber;
const int PBLevelMoneyLmt::kLmtTableFieldNumber;
#endif  // !_MSC_VER

PBLevelMoneyLmt::PBLevelMoneyLmt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLevelMoneyLmt::InitAsDefaultInstance() {}

PBLevelMoneyLmt::PBLevelMoneyLmt(const PBLevelMoneyLmt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLevelMoneyLmt::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLevelMoneyLmt::~PBLevelMoneyLmt() {
  SharedDtor();
}

void PBLevelMoneyLmt::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLevelMoneyLmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLevelMoneyLmt_descriptor_;
}

const PBLevelMoneyLmt& PBLevelMoneyLmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLevelMoneyLmt* PBLevelMoneyLmt::default_instance_ = NULL;

PBLevelMoneyLmt* PBLevelMoneyLmt::New() const {
  return new PBLevelMoneyLmt;
}

void PBLevelMoneyLmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  lmttable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLevelMoneyLmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_LmtTable;
        break;
      }
      
      // repeated .PBSingleMoneyLmt LmtTable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LmtTable:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lmttable()));
        if (input->ExpectTag(18)) goto parse_LmtTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLevelMoneyLmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLevelMoneyLmt::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBSingleMoneyLmt LmtTable = 2;
  for (int i = 0; i < this->lmttable_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->lmttable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLevelMoneyLmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBSingleMoneyLmt LmtTable = 2;
  for (int i = 0; i < this->lmttable_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->lmttable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLevelMoneyLmt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBSingleMoneyLmt LmtTable = 2;
  total_size += 1 * this->lmttable_size();
  for (int i = 0; i < this->lmttable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lmttable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLevelMoneyLmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLevelMoneyLmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLevelMoneyLmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLevelMoneyLmt::MergeFrom(const PBLevelMoneyLmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  lmttable_.MergeFrom(from.lmttable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLevelMoneyLmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelMoneyLmt::CopyFrom(const PBLevelMoneyLmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelMoneyLmt::Swap(PBLevelMoneyLmt* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    lmttable_.Swap(&other->lmttable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLevelMoneyLmt::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLevelMoneyLmt::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLevelMoneyLmt::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLevelMoneyLmt_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPetLevelExp::kTempIDFieldNumber;
const int PBPetLevelExp::kLevelExpFieldNumber;
#endif  // !_MSC_VER

PBPetLevelExp::PBPetLevelExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPetLevelExp::InitAsDefaultInstance() {}

PBPetLevelExp::PBPetLevelExp(const PBPetLevelExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPetLevelExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPetLevelExp::~PBPetLevelExp() {
  SharedDtor();
}

void PBPetLevelExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPetLevelExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPetLevelExp_descriptor_;
}

const PBPetLevelExp& PBPetLevelExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPetLevelExp* PBPetLevelExp::default_instance_ = NULL;

PBPetLevelExp* PBPetLevelExp::New() const {
  return new PBPetLevelExp;
}

void PBPetLevelExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  levelexp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPetLevelExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        break;
      }
      
      // repeated uint32 LevelExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelexp(value);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPetLevelExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPetLevelExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelexp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPetLevelExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelexp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPetLevelExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 LevelExp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelexp(i));
    }
    total_size += 1 * this->levelexp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPetLevelExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPetLevelExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPetLevelExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPetLevelExp::MergeFrom(const PBPetLevelExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelexp_.MergeFrom(from.levelexp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPetLevelExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetLevelExp::CopyFrom(const PBPetLevelExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetLevelExp::Swap(PBPetLevelExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    levelexp_.Swap(&other->levelexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPetLevelExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPetLevelExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPetLevelExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPetLevelExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBProduceExp::kTempIDFieldNumber;
const int PBProduceExp::kLevelExpFieldNumber;
#endif  // !_MSC_VER

PBProduceExp::PBProduceExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProduceExp::InitAsDefaultInstance() {}

PBProduceExp::PBProduceExp(const PBProduceExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProduceExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProduceExp::~PBProduceExp() {
  SharedDtor();
}

void PBProduceExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBProduceExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProduceExp_descriptor_;
}

const PBProduceExp& PBProduceExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBProduceExp* PBProduceExp::default_instance_ = NULL;

PBProduceExp* PBProduceExp::New() const {
  return new PBProduceExp;
}

void PBProduceExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  levelexp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProduceExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        break;
      }
      
      // repeated uint32 LevelExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelexp(value);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProduceExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProduceExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelexp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProduceExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 LevelExp = 2;
  for (int i = 0; i < this->levelexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelexp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProduceExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 LevelExp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelexp(i));
    }
    total_size += 1 * this->levelexp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProduceExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProduceExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProduceExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProduceExp::MergeFrom(const PBProduceExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelexp_.MergeFrom(from.levelexp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProduceExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduceExp::CopyFrom(const PBProduceExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduceExp::Swap(PBProduceExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    levelexp_.Swap(&other->levelexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProduceExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProduceExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProduceExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProduceExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBUpg::kSuccessFieldNumber;
const int PBUpg::kFailureFieldNumber;
const int PBUpg::kResultFieldNumber;
const int PBUpg::kIncLevelFieldNumber;
const int PBUpg::kExtSuccessFieldNumber;
#endif  // !_MSC_VER

PBUpg::PBUpg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUpg::InitAsDefaultInstance() {}

PBUpg::PBUpg(const PBUpg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUpg::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0u;
  failure_ = 0u;
  result_ = 0u;
  inclevel_ = 0u;
  extsuccess_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUpg::~PBUpg() {
  SharedDtor();
}

void PBUpg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBUpg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUpg_descriptor_;
}

const PBUpg& PBUpg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBUpg* PBUpg::default_instance_ = NULL;

PBUpg* PBUpg::New() const {
  return new PBUpg;
}

void PBUpg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0u;
    failure_ = 0u;
    result_ = 0u;
    inclevel_ = 0u;
    extsuccess_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUpg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &success_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Failure;
        break;
      }
      
      // optional uint32 Failure = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Failure:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &failure_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IncLevel;
        break;
      }
      
      // optional uint32 IncLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inclevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ExtSuccess;
        break;
      }
      
      // optional uint32 ExtSuccess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtSuccess:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extsuccess_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUpg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBUpg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Success = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->success(), output);
  }
  
  // optional uint32 Failure = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->failure(), output);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->result(), output);
  }
  
  // optional uint32 IncLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->inclevel(), output);
  }
  
  // optional uint32 ExtSuccess = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->extsuccess(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUpg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Success = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->success(), target);
  }
  
  // optional uint32 Failure = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->failure(), target);
  }
  
  // optional uint32 Result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional uint32 IncLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->inclevel(), target);
  }
  
  // optional uint32 ExtSuccess = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->extsuccess(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUpg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->success());
    }
    
    // optional uint32 Failure = 2;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->failure());
    }
    
    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 IncLevel = 4;
    if (has_inclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inclevel());
    }
    
    // optional uint32 ExtSuccess = 5;
    if (has_extsuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extsuccess());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBUpg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUpg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUpg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUpg::MergeFrom(const PBUpg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_success(from.success());
    }
    if (from._has_bit(1)) {
      set_failure(from.failure());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_inclevel(from.inclevel());
    }
    if (from._has_bit(4)) {
      set_extsuccess(from.extsuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUpg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUpg::CopyFrom(const PBUpg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUpg::Swap(PBUpg* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(failure_, other->failure_);
    std::swap(result_, other->result_);
    std::swap(inclevel_, other->inclevel_);
    std::swap(extsuccess_, other->extsuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBUpg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBUpg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBUpg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBUpg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEquipUpg::kTempIDFieldNumber;
const int PBEquipUpg::kEquipUpgFieldNumber;
#endif  // !_MSC_VER

PBEquipUpg::PBEquipUpg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipUpg::InitAsDefaultInstance() {}

PBEquipUpg::PBEquipUpg(const PBEquipUpg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipUpg::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipUpg::~PBEquipUpg() {
  SharedDtor();
}

void PBEquipUpg::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBEquipUpg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipUpg_descriptor_;
}

const PBEquipUpg& PBEquipUpg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipUpg* PBEquipUpg::default_instance_ = NULL;

PBEquipUpg* PBEquipUpg::New() const {
  return new PBEquipUpg;
}

void PBEquipUpg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  equipupg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipUpg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_EquipUpg;
        break;
      }
      
      // repeated .PBUpg EquipUpg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EquipUpg:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_equipupg()));
        if (input->ExpectTag(18)) goto parse_EquipUpg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipUpg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipUpg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBUpg EquipUpg = 2;
  for (int i = 0; i < this->equipupg_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->equipupg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipUpg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBUpg EquipUpg = 2;
  for (int i = 0; i < this->equipupg_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->equipupg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipUpg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBUpg EquipUpg = 2;
  total_size += 1 * this->equipupg_size();
  for (int i = 0; i < this->equipupg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->equipupg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipUpg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipUpg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipUpg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipUpg::MergeFrom(const PBEquipUpg& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipupg_.MergeFrom(from.equipupg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipUpg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipUpg::CopyFrom(const PBEquipUpg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipUpg::Swap(PBEquipUpg* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    equipupg_.Swap(&other->equipupg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipUpg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipUpg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipUpg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipUpg_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSuitProducer::kTempIDFieldNumber;
const int PBSuitProducer::kPropertyTempIDFieldNumber;
const int PBSuitProducer::kUpgTempIDFieldNumber;
const int PBSuitProducer::kExtTempIDFieldNumber;
const int PBSuitProducer::kDescribeTextFieldNumber;
#endif  // !_MSC_VER

PBSuitProducer::PBSuitProducer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSuitProducer::InitAsDefaultInstance() {}

PBSuitProducer::PBSuitProducer(const PBSuitProducer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSuitProducer::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSuitProducer::~PBSuitProducer() {
  SharedDtor();
}

void PBSuitProducer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSuitProducer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSuitProducer_descriptor_;
}

const PBSuitProducer& PBSuitProducer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSuitProducer* PBSuitProducer::default_instance_ = NULL;

PBSuitProducer* PBSuitProducer::New() const {
  return new PBSuitProducer;
}

void PBSuitProducer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  propertytempid_.Clear();
  upgtempid_.Clear();
  exttempid_.Clear();
  describetext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSuitProducer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PropertyTempID;
        break;
      }
      
      // repeated uint32 PropertyTempID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertytempid(value);
        if (input->ExpectTag(16)) goto parse_PropertyTempID;
        if (input->ExpectTag(24)) goto parse_UpgTempID;
        break;
      }
      
      // repeated uint32 UpgTempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgtempid(value);
        if (input->ExpectTag(24)) goto parse_UpgTempID;
        if (input->ExpectTag(32)) goto parse_ExtTempID;
        break;
      }
      
      // repeated uint32 ExtTempID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exttempid(value);
        if (input->ExpectTag(32)) goto parse_ExtTempID;
        if (input->ExpectTag(42)) goto parse_DescribeText;
        break;
      }
      
      // repeated string DescribeText = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DescribeText:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_describetext()));
        if (input->ExpectTag(42)) goto parse_DescribeText;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSuitProducer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSuitProducer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 PropertyTempID = 2;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->propertytempid(i), output);
  }
  
  // repeated uint32 UpgTempID = 3;
  for (int i = 0; i < this->upgtempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->upgtempid(i), output);
  }
  
  // repeated uint32 ExtTempID = 4;
  for (int i = 0; i < this->exttempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->exttempid(i), output);
  }
  
  // repeated string DescribeText = 5;
  for (int i = 0; i < this->describetext_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->describetext(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSuitProducer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 PropertyTempID = 2;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->propertytempid(i), target);
  }
  
  // repeated uint32 UpgTempID = 3;
  for (int i = 0; i < this->upgtempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->upgtempid(i), target);
  }
  
  // repeated uint32 ExtTempID = 4;
  for (int i = 0; i < this->exttempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->exttempid(i), target);
  }
  
  // repeated string DescribeText = 5;
  for (int i = 0; i < this->describetext_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->describetext(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSuitProducer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 PropertyTempID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertytempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertytempid(i));
    }
    total_size += 1 * this->propertytempid_size() + data_size;
  }
  
  // repeated uint32 UpgTempID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgtempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgtempid(i));
    }
    total_size += 1 * this->upgtempid_size() + data_size;
  }
  
  // repeated uint32 ExtTempID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->exttempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exttempid(i));
    }
    total_size += 1 * this->exttempid_size() + data_size;
  }
  
  // repeated string DescribeText = 5;
  total_size += 1 * this->describetext_size();
  for (int i = 0; i < this->describetext_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->describetext(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSuitProducer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSuitProducer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSuitProducer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSuitProducer::MergeFrom(const PBSuitProducer& from) {
  GOOGLE_CHECK_NE(&from, this);
  propertytempid_.MergeFrom(from.propertytempid_);
  upgtempid_.MergeFrom(from.upgtempid_);
  exttempid_.MergeFrom(from.exttempid_);
  describetext_.MergeFrom(from.describetext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSuitProducer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSuitProducer::CopyFrom(const PBSuitProducer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSuitProducer::Swap(PBSuitProducer* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    propertytempid_.Swap(&other->propertytempid_);
    upgtempid_.Swap(&other->upgtempid_);
    exttempid_.Swap(&other->exttempid_);
    describetext_.Swap(&other->describetext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSuitProducer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSuitProducer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSuitProducer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSuitProducer_reflection_;
}

// ===================================================================

const ::std::string PBSuitNormal::_default_name_;
const ::std::string PBSuitNormal::_default_activetitle_;
#ifndef _MSC_VER
const int PBSuitNormal::kTempIDFieldNumber;
const int PBSuitNormal::kNameFieldNumber;
const int PBSuitNormal::kEquipTempIDFieldNumber;
const int PBSuitNormal::kActiveTitleFieldNumber;
const int PBSuitNormal::kPropertyTempIDFieldNumber;
#endif  // !_MSC_VER

PBSuitNormal::PBSuitNormal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSuitNormal::InitAsDefaultInstance() {}

PBSuitNormal::PBSuitNormal(const PBSuitNormal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSuitNormal::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  activetitle_ = const_cast< ::std::string*>(&_default_activetitle_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSuitNormal::~PBSuitNormal() {
  SharedDtor();
}

void PBSuitNormal::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (activetitle_ != &_default_activetitle_) {
    delete activetitle_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSuitNormal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSuitNormal_descriptor_;
}

const PBSuitNormal& PBSuitNormal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSuitNormal* PBSuitNormal::default_instance_ = NULL;

PBSuitNormal* PBSuitNormal::New() const {
  return new PBSuitNormal;
}

void PBSuitNormal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (activetitle_ != &_default_activetitle_) {
        activetitle_->clear();
      }
    }
  }
  equiptempid_.Clear();
  propertytempid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSuitNormal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_EquipTempID;
        break;
      }
      
      // repeated uint32 EquipTempID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_equiptempid(value);
        if (input->ExpectTag(24)) goto parse_EquipTempID;
        if (input->ExpectTag(34)) goto parse_ActiveTitle;
        break;
      }
      
      // optional string ActiveTitle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActiveTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_activetitle()));
        if (input->ExpectTag(40)) goto parse_PropertyTempID;
        break;
      }
      
      // repeated uint32 PropertyTempID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertytempid(value);
        if (input->ExpectTag(40)) goto parse_PropertyTempID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSuitNormal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSuitNormal::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // repeated uint32 EquipTempID = 3;
  for (int i = 0; i < this->equiptempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->equiptempid(i), output);
  }
  
  // optional string ActiveTitle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->activetitle(), output);
  }
  
  // repeated uint32 PropertyTempID = 5;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->propertytempid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSuitNormal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // repeated uint32 EquipTempID = 3;
  for (int i = 0; i < this->equiptempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->equiptempid(i), target);
  }
  
  // optional string ActiveTitle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->activetitle(), target);
  }
  
  // repeated uint32 PropertyTempID = 5;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->propertytempid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSuitNormal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string ActiveTitle = 4;
    if (has_activetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->activetitle());
    }
    
  }
  // repeated uint32 EquipTempID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equiptempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->equiptempid(i));
    }
    total_size += 1 * this->equiptempid_size() + data_size;
  }
  
  // repeated uint32 PropertyTempID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertytempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertytempid(i));
    }
    total_size += 1 * this->propertytempid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSuitNormal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSuitNormal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSuitNormal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSuitNormal::MergeFrom(const PBSuitNormal& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiptempid_.MergeFrom(from.equiptempid_);
  propertytempid_.MergeFrom(from.propertytempid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_activetitle(from.activetitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSuitNormal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSuitNormal::CopyFrom(const PBSuitNormal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSuitNormal::Swap(PBSuitNormal* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    equiptempid_.Swap(&other->equiptempid_);
    std::swap(activetitle_, other->activetitle_);
    propertytempid_.Swap(&other->propertytempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSuitNormal::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSuitNormal::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSuitNormal::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSuitNormal_reflection_;
}

// ===================================================================

const ::std::string PBSpell::_default_name_;
#ifndef _MSC_VER
const int PBSpell::kTempIDFieldNumber;
const int PBSpell::kNameFieldNumber;
const int PBSpell::kSuitIDFieldNumber;
const int PBSpell::kLetterIDFieldNumber;
const int PBSpell::kRequireFieldNumber;
const int PBSpell::kPropertyTempIDFieldNumber;
const int PBSpell::kDescribeTextFieldNumber;
#endif  // !_MSC_VER

PBSpell::PBSpell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSpell::InitAsDefaultInstance() {}

PBSpell::PBSpell(const PBSpell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSpell::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  suitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSpell::~PBSpell() {
  SharedDtor();
}

void PBSpell::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSpell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSpell_descriptor_;
}

const PBSpell& PBSpell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSpell* PBSpell::default_instance_ = NULL;

PBSpell* PBSpell::New() const {
  return new PBSpell;
}

void PBSpell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    suitid_ = 0u;
  }
  letterid_.Clear();
  require_.Clear();
  propertytempid_.Clear();
  describetext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_SuitID;
        break;
      }
      
      // optional uint32 SuitID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuitID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &suitid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LetterID;
        break;
      }
      
      // repeated uint32 LetterID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LetterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_letterid(value);
        if (input->ExpectTag(32)) goto parse_LetterID;
        if (input->ExpectTag(40)) goto parse_Require;
        break;
      }
      
      // repeated uint32 Require = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Require:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_require(value);
        if (input->ExpectTag(40)) goto parse_Require;
        if (input->ExpectTag(48)) goto parse_PropertyTempID;
        break;
      }
      
      // repeated uint32 PropertyTempID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PropertyTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_propertytempid(value);
        if (input->ExpectTag(48)) goto parse_PropertyTempID;
        if (input->ExpectTag(58)) goto parse_DescribeText;
        break;
      }
      
      // repeated string DescribeText = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DescribeText:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_describetext()));
        if (input->ExpectTag(58)) goto parse_DescribeText;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSpell::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 SuitID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->suitid(), output);
  }
  
  // repeated uint32 LetterID = 4;
  for (int i = 0; i < this->letterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->letterid(i), output);
  }
  
  // repeated uint32 Require = 5;
  for (int i = 0; i < this->require_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->require(i), output);
  }
  
  // repeated uint32 PropertyTempID = 6;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->propertytempid(i), output);
  }
  
  // repeated string DescribeText = 7;
  for (int i = 0; i < this->describetext_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->describetext(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSpell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 SuitID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->suitid(), target);
  }
  
  // repeated uint32 LetterID = 4;
  for (int i = 0; i < this->letterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->letterid(i), target);
  }
  
  // repeated uint32 Require = 5;
  for (int i = 0; i < this->require_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->require(i), target);
  }
  
  // repeated uint32 PropertyTempID = 6;
  for (int i = 0; i < this->propertytempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->propertytempid(i), target);
  }
  
  // repeated string DescribeText = 7;
  for (int i = 0; i < this->describetext_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->describetext(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSpell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 SuitID = 3;
    if (has_suitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->suitid());
    }
    
  }
  // repeated uint32 LetterID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->letterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->letterid(i));
    }
    total_size += 1 * this->letterid_size() + data_size;
  }
  
  // repeated uint32 Require = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->require_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->require(i));
    }
    total_size += 1 * this->require_size() + data_size;
  }
  
  // repeated uint32 PropertyTempID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertytempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->propertytempid(i));
    }
    total_size += 1 * this->propertytempid_size() + data_size;
  }
  
  // repeated string DescribeText = 7;
  total_size += 1 * this->describetext_size();
  for (int i = 0; i < this->describetext_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->describetext(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSpell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSpell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSpell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSpell::MergeFrom(const PBSpell& from) {
  GOOGLE_CHECK_NE(&from, this);
  letterid_.MergeFrom(from.letterid_);
  require_.MergeFrom(from.require_);
  propertytempid_.MergeFrom(from.propertytempid_);
  describetext_.MergeFrom(from.describetext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_suitid(from.suitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSpell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpell::CopyFrom(const PBSpell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpell::Swap(PBSpell* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(suitid_, other->suitid_);
    letterid_.Swap(&other->letterid_);
    require_.Swap(&other->require_);
    propertytempid_.Swap(&other->propertytempid_);
    describetext_.Swap(&other->describetext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSpell::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSpell::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSpell::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSpell_reflection_;
}

// ===================================================================

const ::std::string PBProduceEquip::_default_name_;
const ::std::string PBProduceEquip::_default_describe_;
#ifndef _MSC_VER
const int PBProduceEquip::kTempIDFieldNumber;
const int PBProduceEquip::kTypeFieldNumber;
const int PBProduceEquip::kDetailID1FieldNumber;
const int PBProduceEquip::kDetailID2FieldNumber;
const int PBProduceEquip::kLevelFieldNumber;
const int PBProduceEquip::kNameFieldNumber;
const int PBProduceEquip::kMaterialIDFieldNumber;
const int PBProduceEquip::kMaterialNumFieldNumber;
const int PBProduceEquip::kMaterialRankFieldNumber;
const int PBProduceEquip::kItemID1FieldNumber;
const int PBProduceEquip::kItemRand1FieldNumber;
const int PBProduceEquip::kItemID2FieldNumber;
const int PBProduceEquip::kItemRand2FieldNumber;
const int PBProduceEquip::kItemID3FieldNumber;
const int PBProduceEquip::kItemRand3FieldNumber;
const int PBProduceEquip::kMoneyFieldNumber;
const int PBProduceEquip::kBindMoneyFieldNumber;
const int PBProduceEquip::kIconIDFieldNumber;
const int PBProduceEquip::kDescribeFieldNumber;
const int PBProduceEquip::kExpFieldNumber;
#endif  // !_MSC_VER

PBProduceEquip::PBProduceEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProduceEquip::InitAsDefaultInstance() {}

PBProduceEquip::PBProduceEquip(const PBProduceEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProduceEquip::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  type_ = 0u;
  detailid1_ = 0u;
  detailid2_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  materialid_ = 0u;
  materialnum_ = 0u;
  materialrank_ = 0u;
  itemid1_ = 0u;
  itemrand1_ = 0u;
  itemid2_ = 0u;
  itemrand2_ = 0u;
  itemid3_ = 0u;
  itemrand3_ = 0u;
  money_ = 0u;
  bindmoney_ = 0u;
  iconid_ = 0u;
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProduceEquip::~PBProduceEquip() {
  SharedDtor();
}

void PBProduceEquip::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBProduceEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProduceEquip_descriptor_;
}

const PBProduceEquip& PBProduceEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBProduceEquip* PBProduceEquip::default_instance_ = NULL;

PBProduceEquip* PBProduceEquip::New() const {
  return new PBProduceEquip;
}

void PBProduceEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    type_ = 0u;
    detailid1_ = 0u;
    detailid2_ = 0u;
    level_ = 0u;
    if (_has_bit(5)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    materialid_ = 0u;
    materialnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    materialrank_ = 0u;
    itemid1_ = 0u;
    itemrand1_ = 0u;
    itemid2_ = 0u;
    itemrand2_ = 0u;
    itemid3_ = 0u;
    itemrand3_ = 0u;
    money_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bindmoney_ = 0u;
    iconid_ = 0u;
    if (_has_bit(18)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProduceEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DetailID1;
        break;
      }
      
      // optional uint32 DetailID1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DetailID1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &detailid1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DetailID2;
        break;
      }
      
      // optional uint32 DetailID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DetailID2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &detailid2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Name;
        break;
      }
      
      // optional string Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(56)) goto parse_MaterialID;
        break;
      }
      
      // optional uint32 MaterialID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MaterialNum;
        break;
      }
      
      // optional uint32 MaterialNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MaterialRank;
        break;
      }
      
      // optional uint32 MaterialRank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialrank_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ItemID1;
        break;
      }
      
      // optional uint32 ItemID1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid1_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ItemRand1;
        break;
      }
      
      // optional uint32 ItemRand1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemRand1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemrand1_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_ItemID2;
        break;
      }
      
      // optional uint32 ItemID2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid2_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ItemRand2;
        break;
      }
      
      // optional uint32 ItemRand2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemRand2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemrand2_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ItemID3;
        break;
      }
      
      // optional uint32 ItemID3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid3_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_ItemRand3;
        break;
      }
      
      // optional uint32 ItemRand3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemRand3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemrand3_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_BindMoney;
        break;
      }
      
      // optional uint32 BindMoney = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindmoney_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_IconID;
        break;
      }
      
      // optional uint32 IconID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IconID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iconid_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_Describe;
        break;
      }
      
      // optional string Describe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Describe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_describe()));
        if (input->ExpectTag(160)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProduceEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProduceEquip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 DetailID1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->detailid1(), output);
  }
  
  // optional uint32 DetailID2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->detailid2(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional string Name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->name(), output);
  }
  
  // optional uint32 MaterialID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->materialid(), output);
  }
  
  // optional uint32 MaterialNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->materialnum(), output);
  }
  
  // optional uint32 MaterialRank = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->materialrank(), output);
  }
  
  // optional uint32 ItemID1 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->itemid1(), output);
  }
  
  // optional uint32 ItemRand1 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->itemrand1(), output);
  }
  
  // optional uint32 ItemID2 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->itemid2(), output);
  }
  
  // optional uint32 ItemRand2 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->itemrand2(), output);
  }
  
  // optional uint32 ItemID3 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->itemid3(), output);
  }
  
  // optional uint32 ItemRand3 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->itemrand3(), output);
  }
  
  // optional uint32 Money = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->money(), output);
  }
  
  // optional uint32 BindMoney = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->bindmoney(), output);
  }
  
  // optional uint32 IconID = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->iconid(), output);
  }
  
  // optional string Describe = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->describe(), output);
  }
  
  // optional uint32 Exp = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProduceEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 DetailID1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->detailid1(), target);
  }
  
  // optional uint32 DetailID2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->detailid2(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional string Name = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->name(), target);
  }
  
  // optional uint32 MaterialID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->materialid(), target);
  }
  
  // optional uint32 MaterialNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->materialnum(), target);
  }
  
  // optional uint32 MaterialRank = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->materialrank(), target);
  }
  
  // optional uint32 ItemID1 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->itemid1(), target);
  }
  
  // optional uint32 ItemRand1 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->itemrand1(), target);
  }
  
  // optional uint32 ItemID2 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->itemid2(), target);
  }
  
  // optional uint32 ItemRand2 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->itemrand2(), target);
  }
  
  // optional uint32 ItemID3 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->itemid3(), target);
  }
  
  // optional uint32 ItemRand3 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->itemrand3(), target);
  }
  
  // optional uint32 Money = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->money(), target);
  }
  
  // optional uint32 BindMoney = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->bindmoney(), target);
  }
  
  // optional uint32 IconID = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->iconid(), target);
  }
  
  // optional string Describe = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->describe(), target);
  }
  
  // optional uint32 Exp = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProduceEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 DetailID1 = 3;
    if (has_detailid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->detailid1());
    }
    
    // optional uint32 DetailID2 = 4;
    if (has_detailid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->detailid2());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional string Name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 MaterialID = 7;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialid());
    }
    
    // optional uint32 MaterialNum = 8;
    if (has_materialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MaterialRank = 9;
    if (has_materialrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialrank());
    }
    
    // optional uint32 ItemID1 = 10;
    if (has_itemid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid1());
    }
    
    // optional uint32 ItemRand1 = 11;
    if (has_itemrand1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemrand1());
    }
    
    // optional uint32 ItemID2 = 12;
    if (has_itemid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid2());
    }
    
    // optional uint32 ItemRand2 = 13;
    if (has_itemrand2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemrand2());
    }
    
    // optional uint32 ItemID3 = 14;
    if (has_itemid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid3());
    }
    
    // optional uint32 ItemRand3 = 15;
    if (has_itemrand3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemrand3());
    }
    
    // optional uint32 Money = 16;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 BindMoney = 17;
    if (has_bindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindmoney());
    }
    
    // optional uint32 IconID = 18;
    if (has_iconid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iconid());
    }
    
    // optional string Describe = 19;
    if (has_describe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->describe());
    }
    
    // optional uint32 Exp = 20;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProduceEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProduceEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProduceEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProduceEquip::MergeFrom(const PBProduceEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_detailid1(from.detailid1());
    }
    if (from._has_bit(3)) {
      set_detailid2(from.detailid2());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_name(from.name());
    }
    if (from._has_bit(6)) {
      set_materialid(from.materialid());
    }
    if (from._has_bit(7)) {
      set_materialnum(from.materialnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_materialrank(from.materialrank());
    }
    if (from._has_bit(9)) {
      set_itemid1(from.itemid1());
    }
    if (from._has_bit(10)) {
      set_itemrand1(from.itemrand1());
    }
    if (from._has_bit(11)) {
      set_itemid2(from.itemid2());
    }
    if (from._has_bit(12)) {
      set_itemrand2(from.itemrand2());
    }
    if (from._has_bit(13)) {
      set_itemid3(from.itemid3());
    }
    if (from._has_bit(14)) {
      set_itemrand3(from.itemrand3());
    }
    if (from._has_bit(15)) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_bindmoney(from.bindmoney());
    }
    if (from._has_bit(17)) {
      set_iconid(from.iconid());
    }
    if (from._has_bit(18)) {
      set_describe(from.describe());
    }
    if (from._has_bit(19)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProduceEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduceEquip::CopyFrom(const PBProduceEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProduceEquip::Swap(PBProduceEquip* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(detailid1_, other->detailid1_);
    std::swap(detailid2_, other->detailid2_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialnum_, other->materialnum_);
    std::swap(materialrank_, other->materialrank_);
    std::swap(itemid1_, other->itemid1_);
    std::swap(itemrand1_, other->itemrand1_);
    std::swap(itemid2_, other->itemid2_);
    std::swap(itemrand2_, other->itemrand2_);
    std::swap(itemid3_, other->itemid3_);
    std::swap(itemrand3_, other->itemrand3_);
    std::swap(money_, other->money_);
    std::swap(bindmoney_, other->bindmoney_);
    std::swap(iconid_, other->iconid_);
    std::swap(describe_, other->describe_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProduceEquip::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProduceEquip::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProduceEquip::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProduceEquip_reflection_;
}

// ===================================================================

const ::std::string PBProducePhysic::_default_name_;
#ifndef _MSC_VER
const int PBProducePhysic::kTempIDFieldNumber;
const int PBProducePhysic::kTypeFieldNumber;
const int PBProducePhysic::kLevelFieldNumber;
const int PBProducePhysic::kNameFieldNumber;
const int PBProducePhysic::kMaterialIDFieldNumber;
const int PBProducePhysic::kMaterialNumFieldNumber;
const int PBProducePhysic::kItemIDFieldNumber;
const int PBProducePhysic::kExpFieldNumber;
const int PBProducePhysic::kMoneyFieldNumber;
const int PBProducePhysic::kBindMoneyFieldNumber;
#endif  // !_MSC_VER

PBProducePhysic::PBProducePhysic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProducePhysic::InitAsDefaultInstance() {}

PBProducePhysic::PBProducePhysic(const PBProducePhysic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProducePhysic::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  type_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  materialid_ = 0u;
  materialnum_ = 0u;
  itemid_ = 0u;
  exp_ = 0u;
  money_ = 0u;
  bindmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProducePhysic::~PBProducePhysic() {
  SharedDtor();
}

void PBProducePhysic::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBProducePhysic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProducePhysic_descriptor_;
}

const PBProducePhysic& PBProducePhysic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBProducePhysic* PBProducePhysic::default_instance_ = NULL;

PBProducePhysic* PBProducePhysic::New() const {
  return new PBProducePhysic;
}

void PBProducePhysic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    type_ = 0u;
    level_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    materialid_ = 0u;
    materialnum_ = 0u;
    itemid_ = 0u;
    exp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = 0u;
    bindmoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProducePhysic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(40)) goto parse_MaterialID;
        break;
      }
      
      // optional uint32 MaterialID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaterialNum;
        break;
      }
      
      // optional uint32 MaterialNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialnum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_BindMoney;
        break;
      }
      
      // optional uint32 BindMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindmoney_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProducePhysic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProducePhysic::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  // optional uint32 MaterialID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->materialid(), output);
  }
  
  // optional uint32 MaterialNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->materialnum(), output);
  }
  
  // optional uint32 ItemID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->itemid(), output);
  }
  
  // optional uint32 Exp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->exp(), output);
  }
  
  // optional uint32 Money = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->money(), output);
  }
  
  // optional uint32 BindMoney = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->bindmoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProducePhysic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  // optional uint32 MaterialID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->materialid(), target);
  }
  
  // optional uint32 MaterialNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->materialnum(), target);
  }
  
  // optional uint32 ItemID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->itemid(), target);
  }
  
  // optional uint32 Exp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->exp(), target);
  }
  
  // optional uint32 Money = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->money(), target);
  }
  
  // optional uint32 BindMoney = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->bindmoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProducePhysic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 MaterialID = 5;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialid());
    }
    
    // optional uint32 MaterialNum = 6;
    if (has_materialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialnum());
    }
    
    // optional uint32 ItemID = 7;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 Exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 BindMoney = 10;
    if (has_bindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindmoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProducePhysic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProducePhysic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProducePhysic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProducePhysic::MergeFrom(const PBProducePhysic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_materialid(from.materialid());
    }
    if (from._has_bit(5)) {
      set_materialnum(from.materialnum());
    }
    if (from._has_bit(6)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(7)) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_money(from.money());
    }
    if (from._has_bit(9)) {
      set_bindmoney(from.bindmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProducePhysic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProducePhysic::CopyFrom(const PBProducePhysic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProducePhysic::Swap(PBProducePhysic* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialnum_, other->materialnum_);
    std::swap(itemid_, other->itemid_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(bindmoney_, other->bindmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProducePhysic::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProducePhysic::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProducePhysic::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProducePhysic_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOpenSlot::kTempIDFieldNumber;
const int PBOpenSlot::kSlotLevelFieldNumber;
const int PBOpenSlot::kSlotNumberFieldNumber;
#endif  // !_MSC_VER

PBOpenSlot::PBOpenSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOpenSlot::InitAsDefaultInstance() {}

PBOpenSlot::PBOpenSlot(const PBOpenSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOpenSlot::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOpenSlot::~PBOpenSlot() {
  SharedDtor();
}

void PBOpenSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOpenSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOpenSlot_descriptor_;
}

const PBOpenSlot& PBOpenSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOpenSlot* PBOpenSlot::default_instance_ = NULL;

PBOpenSlot* PBOpenSlot::New() const {
  return new PBOpenSlot;
}

void PBOpenSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  slotlevel_.Clear();
  slotnumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOpenSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SlotLevel;
        break;
      }
      
      // repeated uint32 SlotLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slotlevel(value);
        if (input->ExpectTag(16)) goto parse_SlotLevel;
        if (input->ExpectTag(24)) goto parse_SlotNumber;
        break;
      }
      
      // repeated uint32 SlotNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotNumber:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slotnumber(value);
        if (input->ExpectTag(24)) goto parse_SlotNumber;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOpenSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOpenSlot::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 SlotLevel = 2;
  for (int i = 0; i < this->slotlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->slotlevel(i), output);
  }
  
  // repeated uint32 SlotNumber = 3;
  for (int i = 0; i < this->slotnumber_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->slotnumber(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOpenSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 SlotLevel = 2;
  for (int i = 0; i < this->slotlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->slotlevel(i), target);
  }
  
  // repeated uint32 SlotNumber = 3;
  for (int i = 0; i < this->slotnumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->slotnumber(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOpenSlot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 SlotLevel = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slotlevel(i));
    }
    total_size += 1 * this->slotlevel_size() + data_size;
  }
  
  // repeated uint32 SlotNumber = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotnumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slotnumber(i));
    }
    total_size += 1 * this->slotnumber_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOpenSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOpenSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOpenSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOpenSlot::MergeFrom(const PBOpenSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotlevel_.MergeFrom(from.slotlevel_);
  slotnumber_.MergeFrom(from.slotnumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOpenSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOpenSlot::CopyFrom(const PBOpenSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOpenSlot::Swap(PBOpenSlot* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    slotlevel_.Swap(&other->slotlevel_);
    slotnumber_.Swap(&other->slotnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOpenSlot::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOpenSlot::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOpenSlot::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOpenSlot_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCompose::kTempIDFieldNumber;
const int PBCompose::kMaterialIDFieldNumber;
const int PBCompose::kMaterialNumFieldNumber;
const int PBCompose::kItemIDFieldNumber;
const int PBCompose::kItemNumFieldNumber;
#endif  // !_MSC_VER

PBCompose::PBCompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCompose::InitAsDefaultInstance() {}

PBCompose::PBCompose(const PBCompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCompose::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  materialid_ = 0u;
  materialnum_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCompose::~PBCompose() {
  SharedDtor();
}

void PBCompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCompose_descriptor_;
}

const PBCompose& PBCompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCompose* PBCompose::default_instance_ = NULL;

PBCompose* PBCompose::New() const {
  return new PBCompose;
}

void PBCompose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    materialid_ = 0u;
    materialnum_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MaterialID;
        break;
      }
      
      // optional uint32 MaterialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MaterialNum;
        break;
      }
      
      // optional uint32 MaterialNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &materialnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCompose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 MaterialID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->materialid(), output);
  }
  
  // optional uint32 MaterialNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->materialnum(), output);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 MaterialID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->materialid(), target);
  }
  
  // optional uint32 MaterialNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->materialnum(), target);
  }
  
  // optional uint32 ItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCompose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MaterialID = 2;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialid());
    }
    
    // optional uint32 MaterialNum = 3;
    if (has_materialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->materialnum());
    }
    
    // optional uint32 ItemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 5;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCompose::MergeFrom(const PBCompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_materialid(from.materialid());
    }
    if (from._has_bit(2)) {
      set_materialnum(from.materialnum());
    }
    if (from._has_bit(3)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(4)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCompose::CopyFrom(const PBCompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCompose::Swap(PBCompose* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialnum_, other->materialnum_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCompose::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCompose::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCompose::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCompose_reflection_;
}

// ===================================================================

const ::std::string PBMultiCompose::_default_describe_;
#ifndef _MSC_VER
const int PBMultiCompose::kTempIDFieldNumber;
const int PBMultiCompose::kDescribeFieldNumber;
const int PBMultiCompose::kMaterialIDFieldNumber;
const int PBMultiCompose::kMaterialNumFieldNumber;
const int PBMultiCompose::kItemIDFieldNumber;
const int PBMultiCompose::kItemNumFieldNumber;
const int PBMultiCompose::kExpFieldNumber;
const int PBMultiCompose::kOrderFieldNumber;
const int PBMultiCompose::kLifeSkillTypeFieldNumber;
const int PBMultiCompose::kLifeSkillKindFieldNumber;
const int PBMultiCompose::kSpecializedDegreeFieldNumber;
const int PBMultiCompose::kLifeComposeTypeFieldNumber;
const int PBMultiCompose::kCreatValueFieldNumber;
const int PBMultiCompose::kStudyMoneyFieldNumber;
const int PBMultiCompose::kSkillCreatDegreeFieldNumber;
const int PBMultiCompose::kValueFieldNumber;
const int PBMultiCompose::kProbalityFieldNumber;
const int PBMultiCompose::kDegreeValueFieldNumber;
const int PBMultiCompose::kApNeedCostFieldNumber;
const int PBMultiCompose::kUsedTimesFieldNumber;
const int PBMultiCompose::kMinValueFieldNumber;
const int PBMultiCompose::kComposeTypeFieldNumber;
const int PBMultiCompose::kEquipMetierTypeFieldNumber;
const int PBMultiCompose::kSrcEquipIDFieldNumber;
const int PBMultiCompose::kDesEquipIDFieldNumber;
const int PBMultiCompose::kContributeFieldNumber;
const int PBMultiCompose::kUpgItemIDFieldNumber;
const int PBMultiCompose::kUpgItemNumFieldNumber;
const int PBMultiCompose::kNeedValueTypeFieldNumber;
const int PBMultiCompose::kNeedValueFieldNumber;
#endif  // !_MSC_VER

PBMultiCompose::PBMultiCompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMultiCompose::InitAsDefaultInstance() {}

PBMultiCompose::PBMultiCompose(const PBMultiCompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMultiCompose::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  exp_ = 0u;
  order_ = 0u;
  lifeskilltype_ = 0u;
  lifeskillkind_ = 0u;
  specializeddegree_ = 0u;
  lifecomposetype_ = 0u;
  creatvalue_ = 0u;
  studymoney_ = 0u;
  skillcreatdegree_ = 0u;
  apneedcost_ = 0u;
  usedtimes_ = 0u;
  minvalue_ = 0u;
  composetype_ = 0u;
  equipmetiertype_ = 0u;
  srcequipid_ = 0u;
  desequipid_ = 0u;
  contribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMultiCompose::~PBMultiCompose() {
  SharedDtor();
}

void PBMultiCompose::SharedDtor() {
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMultiCompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMultiCompose_descriptor_;
}

const PBMultiCompose& PBMultiCompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMultiCompose* PBMultiCompose::default_instance_ = NULL;

PBMultiCompose* PBMultiCompose::New() const {
  return new PBMultiCompose;
}

void PBMultiCompose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
    exp_ = 0u;
    order_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lifeskilltype_ = 0u;
    lifeskillkind_ = 0u;
    specializeddegree_ = 0u;
    lifecomposetype_ = 0u;
    creatvalue_ = 0u;
    studymoney_ = 0u;
    skillcreatdegree_ = 0u;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    apneedcost_ = 0u;
    usedtimes_ = 0u;
    minvalue_ = 0u;
    composetype_ = 0u;
    equipmetiertype_ = 0u;
    srcequipid_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    desequipid_ = 0u;
    contribute_ = 0u;
  }
  materialid_.Clear();
  materialnum_.Clear();
  itemid_.Clear();
  itemnum_.Clear();
  value_.Clear();
  probality_.Clear();
  degreevalue_.Clear();
  upgitemid_.Clear();
  upgitemnum_.Clear();
  needvaluetype_.Clear();
  needvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMultiCompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Describe;
        break;
      }
      
      // optional string Describe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Describe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_describe()));
        if (input->ExpectTag(24)) goto parse_MaterialID;
        break;
      }
      
      // repeated uint32 MaterialID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_materialid(value);
        if (input->ExpectTag(24)) goto parse_MaterialID;
        if (input->ExpectTag(32)) goto parse_MaterialNum;
        break;
      }
      
      // repeated uint32 MaterialNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaterialNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_materialnum(value);
        if (input->ExpectTag(32)) goto parse_MaterialNum;
        if (input->ExpectTag(40)) goto parse_ItemID;
        break;
      }
      
      // repeated uint32 ItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemid(value);
        if (input->ExpectTag(40)) goto parse_ItemID;
        if (input->ExpectTag(48)) goto parse_ItemNum;
        break;
      }
      
      // repeated uint32 ItemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemnum(value);
        if (input->ExpectTag(48)) goto parse_ItemNum;
        if (input->ExpectTag(56)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LifeSkillType;
        break;
      }
      
      // optional uint32 LifeSkillType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilltype_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LifeSkillKind;
        break;
      }
      
      // optional uint32 LifeSkillKind = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillkind_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SpecializedDegree;
        break;
      }
      
      // optional uint32 SpecializedDegree = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpecializedDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &specializeddegree_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_LifeComposeType;
        break;
      }
      
      // optional uint32 LifeComposeType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeComposeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifecomposetype_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_CreatValue;
        break;
      }
      
      // optional uint32 CreatValue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CreatValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &creatvalue_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_StudyMoney;
        break;
      }
      
      // optional uint32 StudyMoney = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &studymoney_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_SkillCreatDegree;
        break;
      }
      
      // optional uint32 SkillCreatDegree = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillCreatDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillcreatdegree_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_value;
        break;
      }
      
      // repeated uint32 value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_value:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_value(value);
        if (input->ExpectTag(128)) goto parse_value;
        if (input->ExpectTag(136)) goto parse_Probality;
        break;
      }
      
      // repeated uint32 Probality = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probality(value);
        if (input->ExpectTag(136)) goto parse_Probality;
        if (input->ExpectTag(144)) goto parse_DegreeValue;
        break;
      }
      
      // repeated uint32 DegreeValue = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_degreevalue(value);
        if (input->ExpectTag(144)) goto parse_DegreeValue;
        if (input->ExpectTag(152)) goto parse_ApNeedCost;
        break;
      }
      
      // optional uint32 ApNeedCost = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ApNeedCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &apneedcost_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_UsedTimes;
        break;
      }
      
      // optional uint32 UsedTimes = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UsedTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usedtimes_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_MinValue;
        break;
      }
      
      // optional uint32 MinValue = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minvalue_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_ComposeType;
        break;
      }
      
      // optional uint32 ComposeType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composetype_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_EquipMetierType;
        break;
      }
      
      // optional uint32 EquipMetierType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipMetierType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equipmetiertype_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_SrcEquipID;
        break;
      }
      
      // optional uint32 SrcEquipID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcEquipID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcequipid_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_DesEquipID;
        break;
      }
      
      // optional uint32 DesEquipID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesEquipID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desequipid_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_UpgItemID;
        break;
      }
      
      // repeated uint32 UpgItemID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgitemid(value);
        if (input->ExpectTag(216)) goto parse_UpgItemID;
        if (input->ExpectTag(224)) goto parse_UpgItemNum;
        break;
      }
      
      // repeated uint32 UpgItemNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgitemnum(value);
        if (input->ExpectTag(224)) goto parse_UpgItemNum;
        if (input->ExpectTag(232)) goto parse_NeedValueType;
        break;
      }
      
      // repeated uint32 NeedValueType = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedValueType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needvaluetype(value);
        if (input->ExpectTag(232)) goto parse_NeedValueType;
        if (input->ExpectTag(240)) goto parse_NeedValue;
        break;
      }
      
      // repeated uint32 NeedValue = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needvalue(value);
        if (input->ExpectTag(240)) goto parse_NeedValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMultiCompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMultiCompose::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Describe = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->describe(), output);
  }
  
  // repeated uint32 MaterialID = 3;
  for (int i = 0; i < this->materialid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->materialid(i), output);
  }
  
  // repeated uint32 MaterialNum = 4;
  for (int i = 0; i < this->materialnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->materialnum(i), output);
  }
  
  // repeated uint32 ItemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemid(i), output);
  }
  
  // repeated uint32 ItemNum = 6;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->itemnum(i), output);
  }
  
  // optional uint32 Exp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->exp(), output);
  }
  
  // optional uint32 Order = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->order(), output);
  }
  
  // optional uint32 LifeSkillType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->lifeskilltype(), output);
  }
  
  // optional uint32 LifeSkillKind = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->lifeskillkind(), output);
  }
  
  // optional uint32 SpecializedDegree = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->specializeddegree(), output);
  }
  
  // optional uint32 LifeComposeType = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->lifecomposetype(), output);
  }
  
  // optional uint32 CreatValue = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->creatvalue(), output);
  }
  
  // optional uint32 StudyMoney = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->studymoney(), output);
  }
  
  // optional uint32 SkillCreatDegree = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->skillcreatdegree(), output);
  }
  
  // repeated uint32 value = 16;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->value(i), output);
  }
  
  // repeated uint32 Probality = 17;
  for (int i = 0; i < this->probality_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->probality(i), output);
  }
  
  // repeated uint32 DegreeValue = 18;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->degreevalue(i), output);
  }
  
  // optional uint32 ApNeedCost = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->apneedcost(), output);
  }
  
  // optional uint32 UsedTimes = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->usedtimes(), output);
  }
  
  // optional uint32 MinValue = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->minvalue(), output);
  }
  
  // optional uint32 ComposeType = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->composetype(), output);
  }
  
  // optional uint32 EquipMetierType = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->equipmetiertype(), output);
  }
  
  // optional uint32 SrcEquipID = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->srcequipid(), output);
  }
  
  // optional uint32 DesEquipID = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->desequipid(), output);
  }
  
  // optional uint32 Contribute = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->contribute(), output);
  }
  
  // repeated uint32 UpgItemID = 27;
  for (int i = 0; i < this->upgitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->upgitemid(i), output);
  }
  
  // repeated uint32 UpgItemNum = 28;
  for (int i = 0; i < this->upgitemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->upgitemnum(i), output);
  }
  
  // repeated uint32 NeedValueType = 29;
  for (int i = 0; i < this->needvaluetype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->needvaluetype(i), output);
  }
  
  // repeated uint32 NeedValue = 30;
  for (int i = 0; i < this->needvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->needvalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMultiCompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Describe = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->describe(), target);
  }
  
  // repeated uint32 MaterialID = 3;
  for (int i = 0; i < this->materialid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->materialid(i), target);
  }
  
  // repeated uint32 MaterialNum = 4;
  for (int i = 0; i < this->materialnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->materialnum(i), target);
  }
  
  // repeated uint32 ItemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemid(i), target);
  }
  
  // repeated uint32 ItemNum = 6;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->itemnum(i), target);
  }
  
  // optional uint32 Exp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->exp(), target);
  }
  
  // optional uint32 Order = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->order(), target);
  }
  
  // optional uint32 LifeSkillType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->lifeskilltype(), target);
  }
  
  // optional uint32 LifeSkillKind = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->lifeskillkind(), target);
  }
  
  // optional uint32 SpecializedDegree = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->specializeddegree(), target);
  }
  
  // optional uint32 LifeComposeType = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->lifecomposetype(), target);
  }
  
  // optional uint32 CreatValue = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->creatvalue(), target);
  }
  
  // optional uint32 StudyMoney = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->studymoney(), target);
  }
  
  // optional uint32 SkillCreatDegree = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->skillcreatdegree(), target);
  }
  
  // repeated uint32 value = 16;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->value(i), target);
  }
  
  // repeated uint32 Probality = 17;
  for (int i = 0; i < this->probality_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->probality(i), target);
  }
  
  // repeated uint32 DegreeValue = 18;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->degreevalue(i), target);
  }
  
  // optional uint32 ApNeedCost = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->apneedcost(), target);
  }
  
  // optional uint32 UsedTimes = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->usedtimes(), target);
  }
  
  // optional uint32 MinValue = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->minvalue(), target);
  }
  
  // optional uint32 ComposeType = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->composetype(), target);
  }
  
  // optional uint32 EquipMetierType = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->equipmetiertype(), target);
  }
  
  // optional uint32 SrcEquipID = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->srcequipid(), target);
  }
  
  // optional uint32 DesEquipID = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->desequipid(), target);
  }
  
  // optional uint32 Contribute = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->contribute(), target);
  }
  
  // repeated uint32 UpgItemID = 27;
  for (int i = 0; i < this->upgitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->upgitemid(i), target);
  }
  
  // repeated uint32 UpgItemNum = 28;
  for (int i = 0; i < this->upgitemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->upgitemnum(i), target);
  }
  
  // repeated uint32 NeedValueType = 29;
  for (int i = 0; i < this->needvaluetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->needvaluetype(i), target);
  }
  
  // repeated uint32 NeedValue = 30;
  for (int i = 0; i < this->needvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->needvalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMultiCompose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Describe = 2;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->describe());
    }
    
    // optional uint32 Exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
    // optional uint32 Order = 8;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LifeSkillType = 9;
    if (has_lifeskilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilltype());
    }
    
    // optional uint32 LifeSkillKind = 10;
    if (has_lifeskillkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillkind());
    }
    
    // optional uint32 SpecializedDegree = 11;
    if (has_specializeddegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->specializeddegree());
    }
    
    // optional uint32 LifeComposeType = 12;
    if (has_lifecomposetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifecomposetype());
    }
    
    // optional uint32 CreatValue = 13;
    if (has_creatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->creatvalue());
    }
    
    // optional uint32 StudyMoney = 14;
    if (has_studymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->studymoney());
    }
    
    // optional uint32 SkillCreatDegree = 15;
    if (has_skillcreatdegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillcreatdegree());
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional uint32 ApNeedCost = 19;
    if (has_apneedcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->apneedcost());
    }
    
    // optional uint32 UsedTimes = 20;
    if (has_usedtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usedtimes());
    }
    
    // optional uint32 MinValue = 21;
    if (has_minvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minvalue());
    }
    
    // optional uint32 ComposeType = 22;
    if (has_composetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composetype());
    }
    
    // optional uint32 EquipMetierType = 23;
    if (has_equipmetiertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equipmetiertype());
    }
    
    // optional uint32 SrcEquipID = 24;
    if (has_srcequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcequipid());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 DesEquipID = 25;
    if (has_desequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desequipid());
    }
    
    // optional uint32 Contribute = 26;
    if (has_contribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
  }
  // repeated uint32 MaterialID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->materialid(i));
    }
    total_size += 1 * this->materialid_size() + data_size;
  }
  
  // repeated uint32 MaterialNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->materialnum(i));
    }
    total_size += 1 * this->materialnum_size() + data_size;
  }
  
  // repeated uint32 ItemID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }
  
  // repeated uint32 ItemNum = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }
  
  // repeated uint32 value = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->value(i));
    }
    total_size += 2 * this->value_size() + data_size;
  }
  
  // repeated uint32 Probality = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->probality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probality(i));
    }
    total_size += 2 * this->probality_size() + data_size;
  }
  
  // repeated uint32 DegreeValue = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->degreevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->degreevalue(i));
    }
    total_size += 2 * this->degreevalue_size() + data_size;
  }
  
  // repeated uint32 UpgItemID = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgitemid(i));
    }
    total_size += 2 * this->upgitemid_size() + data_size;
  }
  
  // repeated uint32 UpgItemNum = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgitemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgitemnum(i));
    }
    total_size += 2 * this->upgitemnum_size() + data_size;
  }
  
  // repeated uint32 NeedValueType = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->needvaluetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needvaluetype(i));
    }
    total_size += 2 * this->needvaluetype_size() + data_size;
  }
  
  // repeated uint32 NeedValue = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->needvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needvalue(i));
    }
    total_size += 2 * this->needvalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMultiCompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMultiCompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMultiCompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMultiCompose::MergeFrom(const PBMultiCompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialid_.MergeFrom(from.materialid_);
  materialnum_.MergeFrom(from.materialnum_);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  value_.MergeFrom(from.value_);
  probality_.MergeFrom(from.probality_);
  degreevalue_.MergeFrom(from.degreevalue_);
  upgitemid_.MergeFrom(from.upgitemid_);
  upgitemnum_.MergeFrom(from.upgitemnum_);
  needvaluetype_.MergeFrom(from.needvaluetype_);
  needvalue_.MergeFrom(from.needvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_describe(from.describe());
    }
    if (from._has_bit(6)) {
      set_exp(from.exp());
    }
    if (from._has_bit(7)) {
      set_order(from.order());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_lifeskilltype(from.lifeskilltype());
    }
    if (from._has_bit(9)) {
      set_lifeskillkind(from.lifeskillkind());
    }
    if (from._has_bit(10)) {
      set_specializeddegree(from.specializeddegree());
    }
    if (from._has_bit(11)) {
      set_lifecomposetype(from.lifecomposetype());
    }
    if (from._has_bit(12)) {
      set_creatvalue(from.creatvalue());
    }
    if (from._has_bit(13)) {
      set_studymoney(from.studymoney());
    }
    if (from._has_bit(14)) {
      set_skillcreatdegree(from.skillcreatdegree());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from._has_bit(18)) {
      set_apneedcost(from.apneedcost());
    }
    if (from._has_bit(19)) {
      set_usedtimes(from.usedtimes());
    }
    if (from._has_bit(20)) {
      set_minvalue(from.minvalue());
    }
    if (from._has_bit(21)) {
      set_composetype(from.composetype());
    }
    if (from._has_bit(22)) {
      set_equipmetiertype(from.equipmetiertype());
    }
    if (from._has_bit(23)) {
      set_srcequipid(from.srcequipid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_desequipid(from.desequipid());
    }
    if (from._has_bit(25)) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMultiCompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiCompose::CopyFrom(const PBMultiCompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiCompose::Swap(PBMultiCompose* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(describe_, other->describe_);
    materialid_.Swap(&other->materialid_);
    materialnum_.Swap(&other->materialnum_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(exp_, other->exp_);
    std::swap(order_, other->order_);
    std::swap(lifeskilltype_, other->lifeskilltype_);
    std::swap(lifeskillkind_, other->lifeskillkind_);
    std::swap(specializeddegree_, other->specializeddegree_);
    std::swap(lifecomposetype_, other->lifecomposetype_);
    std::swap(creatvalue_, other->creatvalue_);
    std::swap(studymoney_, other->studymoney_);
    std::swap(skillcreatdegree_, other->skillcreatdegree_);
    value_.Swap(&other->value_);
    probality_.Swap(&other->probality_);
    degreevalue_.Swap(&other->degreevalue_);
    std::swap(apneedcost_, other->apneedcost_);
    std::swap(usedtimes_, other->usedtimes_);
    std::swap(minvalue_, other->minvalue_);
    std::swap(composetype_, other->composetype_);
    std::swap(equipmetiertype_, other->equipmetiertype_);
    std::swap(srcequipid_, other->srcequipid_);
    std::swap(desequipid_, other->desequipid_);
    std::swap(contribute_, other->contribute_);
    upgitemid_.Swap(&other->upgitemid_);
    upgitemnum_.Swap(&other->upgitemnum_);
    needvaluetype_.Swap(&other->needvaluetype_);
    needvalue_.Swap(&other->needvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMultiCompose::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMultiCompose::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMultiCompose::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMultiCompose_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTeleTable::kTempIDFieldNumber;
const int PBTeleTable::kLineIDFieldNumber;
const int PBTeleTable::kMapIDFieldNumber;
const int PBTeleTable::kPosXFieldNumber;
const int PBTeleTable::kPosYFieldNumber;
const int PBTeleTable::kDescribeFieldNumber;
const int PBTeleTable::kMoneyFieldNumber;
const int PBTeleTable::kBindMoneyFieldNumber;
const int PBTeleTable::kNeedTempIDFieldNumber;
const int PBTeleTable::kNeedBuffIDFieldNumber;
const int PBTeleTable::kNeedLevelFieldNumber;
#endif  // !_MSC_VER

PBTeleTable::PBTeleTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeleTable::InitAsDefaultInstance() {}

PBTeleTable::PBTeleTable(const PBTeleTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeleTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  bindmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeleTable::~PBTeleTable() {
  SharedDtor();
}

void PBTeleTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTeleTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeleTable_descriptor_;
}

const PBTeleTable& PBTeleTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTeleTable* PBTeleTable::default_instance_ = NULL;

PBTeleTable* PBTeleTable::New() const {
  return new PBTeleTable;
}

void PBTeleTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    bindmoney_ = 0u;
  }
  lineid_.Clear();
  mapid_.Clear();
  posx_.Clear();
  posy_.Clear();
  describe_.Clear();
  money_.Clear();
  needtempid_.Clear();
  needbuffid_.Clear();
  needlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeleTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // repeated uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lineid(value);
        if (input->ExpectTag(16)) goto parse_LineID;
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(24)) goto parse_MapID;
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // repeated uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_posx(value);
        if (input->ExpectTag(32)) goto parse_PosX;
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // repeated uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_posy(value);
        if (input->ExpectTag(40)) goto parse_PosY;
        if (input->ExpectTag(50)) goto parse_Describe;
        break;
      }
      
      // repeated string Describe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Describe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_describe()));
        if (input->ExpectTag(50)) goto parse_Describe;
        if (input->ExpectTag(56)) goto parse_Money;
        break;
      }
      
      // repeated uint32 Money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_money(value);
        if (input->ExpectTag(56)) goto parse_Money;
        if (input->ExpectTag(64)) goto parse_BindMoney;
        break;
      }
      
      // optional uint32 BindMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindmoney_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_NeedTempID;
        break;
      }
      
      // repeated uint32 NeedTempID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedTempID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needtempid(value);
        if (input->ExpectTag(72)) goto parse_NeedTempID;
        if (input->ExpectTag(80)) goto parse_NeedBuffID;
        break;
      }
      
      // repeated uint32 NeedBuffID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedBuffID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needbuffid(value);
        if (input->ExpectTag(80)) goto parse_NeedBuffID;
        if (input->ExpectTag(88)) goto parse_NeedLevel;
        break;
      }
      
      // repeated uint32 NeedLevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needlevel(value);
        if (input->ExpectTag(88)) goto parse_NeedLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeleTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTeleTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 LineID = 2;
  for (int i = 0; i < this->lineid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(i), output);
  }
  
  // repeated uint32 MapID = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(i), output);
  }
  
  // repeated uint32 PosX = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(i), output);
  }
  
  // repeated uint32 PosY = 5;
  for (int i = 0; i < this->posy_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(i), output);
  }
  
  // repeated string Describe = 6;
  for (int i = 0; i < this->describe_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->describe(i), output);
  }
  
  // repeated uint32 Money = 7;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->money(i), output);
  }
  
  // optional uint32 BindMoney = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->bindmoney(), output);
  }
  
  // repeated uint32 NeedTempID = 9;
  for (int i = 0; i < this->needtempid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->needtempid(i), output);
  }
  
  // repeated uint32 NeedBuffID = 10;
  for (int i = 0; i < this->needbuffid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->needbuffid(i), output);
  }
  
  // repeated uint32 NeedLevel = 11;
  for (int i = 0; i < this->needlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->needlevel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeleTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 LineID = 2;
  for (int i = 0; i < this->lineid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(i), target);
  }
  
  // repeated uint32 MapID = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(i), target);
  }
  
  // repeated uint32 PosX = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(i), target);
  }
  
  // repeated uint32 PosY = 5;
  for (int i = 0; i < this->posy_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(i), target);
  }
  
  // repeated string Describe = 6;
  for (int i = 0; i < this->describe_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->describe(i), target);
  }
  
  // repeated uint32 Money = 7;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->money(i), target);
  }
  
  // optional uint32 BindMoney = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->bindmoney(), target);
  }
  
  // repeated uint32 NeedTempID = 9;
  for (int i = 0; i < this->needtempid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->needtempid(i), target);
  }
  
  // repeated uint32 NeedBuffID = 10;
  for (int i = 0; i < this->needbuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->needbuffid(i), target);
  }
  
  // repeated uint32 NeedLevel = 11;
  for (int i = 0; i < this->needlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->needlevel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeleTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 BindMoney = 8;
    if (has_bindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindmoney());
    }
    
  }
  // repeated uint32 LineID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lineid(i));
    }
    total_size += 1 * this->lineid_size() + data_size;
  }
  
  // repeated uint32 MapID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  // repeated uint32 PosX = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }
  
  // repeated uint32 PosY = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->posy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->posy(i));
    }
    total_size += 1 * this->posy_size() + data_size;
  }
  
  // repeated string Describe = 6;
  total_size += 1 * this->describe_size();
  for (int i = 0; i < this->describe_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->describe(i));
  }
  
  // repeated uint32 Money = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }
  
  // repeated uint32 NeedTempID = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->needtempid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needtempid(i));
    }
    total_size += 1 * this->needtempid_size() + data_size;
  }
  
  // repeated uint32 NeedBuffID = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->needbuffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needbuffid(i));
    }
    total_size += 1 * this->needbuffid_size() + data_size;
  }
  
  // repeated uint32 NeedLevel = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->needlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needlevel(i));
    }
    total_size += 1 * this->needlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTeleTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeleTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeleTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeleTable::MergeFrom(const PBTeleTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineid_.MergeFrom(from.lineid_);
  mapid_.MergeFrom(from.mapid_);
  posx_.MergeFrom(from.posx_);
  posy_.MergeFrom(from.posy_);
  describe_.MergeFrom(from.describe_);
  money_.MergeFrom(from.money_);
  needtempid_.MergeFrom(from.needtempid_);
  needbuffid_.MergeFrom(from.needbuffid_);
  needlevel_.MergeFrom(from.needlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(7)) {
      set_bindmoney(from.bindmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeleTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeleTable::CopyFrom(const PBTeleTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeleTable::Swap(PBTeleTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    lineid_.Swap(&other->lineid_);
    mapid_.Swap(&other->mapid_);
    posx_.Swap(&other->posx_);
    posy_.Swap(&other->posy_);
    describe_.Swap(&other->describe_);
    money_.Swap(&other->money_);
    std::swap(bindmoney_, other->bindmoney_);
    needtempid_.Swap(&other->needtempid_);
    needbuffid_.Swap(&other->needbuffid_);
    needlevel_.Swap(&other->needlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTeleTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTeleTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTeleTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTeleTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBData::kTempIDFieldNumber;
const int PBData::kLevelFixFieldNumber;
const int PBData::kTeamFixFieldNumber;
#endif  // !_MSC_VER

PBData::PBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBData::InitAsDefaultInstance() {}

PBData::PBData(const PBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBData::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBData::~PBData() {
  SharedDtor();
}

void PBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBData_descriptor_;
}

const PBData& PBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBData* PBData::default_instance_ = NULL;

PBData* PBData::New() const {
  return new PBData;
}

void PBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  levelfix_.Clear();
  teamfix_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelFix;
        break;
      }
      
      // repeated uint32 LevelFix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelFix:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelfix(value);
        if (input->ExpectTag(16)) goto parse_LevelFix;
        if (input->ExpectTag(24)) goto parse_TeamFix;
        break;
      }
      
      // repeated uint32 TeamFix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFix:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_teamfix(value);
        if (input->ExpectTag(24)) goto parse_TeamFix;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 LevelFix = 2;
  for (int i = 0; i < this->levelfix_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelfix(i), output);
  }
  
  // repeated uint32 TeamFix = 3;
  for (int i = 0; i < this->teamfix_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->teamfix(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 LevelFix = 2;
  for (int i = 0; i < this->levelfix_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelfix(i), target);
  }
  
  // repeated uint32 TeamFix = 3;
  for (int i = 0; i < this->teamfix_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->teamfix(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 LevelFix = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelfix_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelfix(i));
    }
    total_size += 1 * this->levelfix_size() + data_size;
  }
  
  // repeated uint32 TeamFix = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamfix_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->teamfix(i));
    }
    total_size += 1 * this->teamfix_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBData::MergeFrom(const PBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelfix_.MergeFrom(from.levelfix_);
  teamfix_.MergeFrom(from.teamfix_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBData::CopyFrom(const PBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBData::Swap(PBData* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    levelfix_.Swap(&other->levelfix_);
    teamfix_.Swap(&other->teamfix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPetData::kNameColorFieldNumber;
const int PBPetData::kAttackTypeFieldNumber;
const int PBPetData::kPAttackUpFieldNumber;
const int PBPetData::kPAttackLowFieldNumber;
const int PBPetData::kMAttackUpFieldNumber;
const int PBPetData::kMAttackLowFieldNumber;
const int PBPetData::kSpeedFieldNumber;
const int PBPetData::kPDefenceFieldNumber;
const int PBPetData::kMDefenceFieldNumber;
const int PBPetData::kMaxHPFieldNumber;
const int PBPetData::kHPRSpeedFieldNumber;
const int PBPetData::kDeathRateFieldNumber;
const int PBPetData::kDeathValueFieldNumber;
const int PBPetData::kNormalDuckFieldNumber;
const int PBPetData::kSkillDuckFieldNumber;
const int PBPetData::kSkillIDFieldNumber;
const int PBPetData::kSkillLevelFieldNumber;
const int PBPetData::kPAttackRangeFieldNumber;
const int PBPetData::kMAttackRangeFieldNumber;
const int PBPetData::kPReducePerFieldNumber;
const int PBPetData::kMReducePerFieldNumber;
const int PBPetData::kDeathDefenseFieldNumber;
const int PBPetData::kIgnoreDuckFieldNumber;
const int PBPetData::kResDefFieldNumber;
const int PBPetData::kResAttFieldNumber;
const int PBPetData::kAttPercentFieldNumber;
const int PBPetData::kDefPercentFieldNumber;
const int PBPetData::kHPPercentFieldNumber;
#endif  // !_MSC_VER

PBPetData::PBPetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPetData::InitAsDefaultInstance() {}

PBPetData::PBPetData(const PBPetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPetData::SharedCtor() {
  _cached_size_ = 0;
  namecolor_ = 0u;
  attacktype_ = 0u;
  pattackup_ = 0u;
  pattacklow_ = 0u;
  mattackup_ = 0u;
  mattacklow_ = 0u;
  speed_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  maxhp_ = 0u;
  hprspeed_ = 0u;
  deathrate_ = 0u;
  deathvalue_ = 0u;
  normalduck_ = 0u;
  skillduck_ = 0u;
  skillid_ = 0u;
  skilllevel_ = 0u;
  pattackrange_ = 0u;
  mattackrange_ = 0u;
  preduceper_ = 0u;
  mreduceper_ = 0u;
  deathdefense_ = 0u;
  ignoreduck_ = 0u;
  attpercent_ = 0u;
  defpercent_ = 0u;
  hppercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPetData::~PBPetData() {
  SharedDtor();
}

void PBPetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPetData_descriptor_;
}

const PBPetData& PBPetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPetData* PBPetData::default_instance_ = NULL;

PBPetData* PBPetData::New() const {
  return new PBPetData;
}

void PBPetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    namecolor_ = 0u;
    attacktype_ = 0u;
    pattackup_ = 0u;
    pattacklow_ = 0u;
    mattackup_ = 0u;
    mattacklow_ = 0u;
    speed_ = 0u;
    pdefence_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mdefence_ = 0u;
    maxhp_ = 0u;
    hprspeed_ = 0u;
    deathrate_ = 0u;
    deathvalue_ = 0u;
    normalduck_ = 0u;
    skillduck_ = 0u;
    skillid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skilllevel_ = 0u;
    pattackrange_ = 0u;
    mattackrange_ = 0u;
    preduceper_ = 0u;
    mreduceper_ = 0u;
    deathdefense_ = 0u;
    ignoreduck_ = 0u;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    attpercent_ = 0u;
    defpercent_ = 0u;
    hppercent_ = 0u;
  }
  resdef_.Clear();
  resatt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NameColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &namecolor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AttackType;
        break;
      }
      
      // optional uint32 AttackType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attacktype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PAttackUp;
        break;
      }
      
      // optional uint32 PAttackUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackup_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PAttackLow;
        break;
      }
      
      // optional uint32 PAttackLow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackLow:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattacklow_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MAttackUp;
        break;
      }
      
      // optional uint32 MAttackUp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackup_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MAttackLow;
        break;
      }
      
      // optional uint32 MAttackLow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackLow:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattacklow_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Speed;
        break;
      }
      
      // optional uint32 Speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Speed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &speed_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_PDefence;
        break;
      }
      
      // optional uint32 PDefence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pdefence_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MDefence;
        break;
      }
      
      // optional uint32 MDefence = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MDefence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mdefence_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MaxHP;
        break;
      }
      
      // optional uint32 MaxHP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_HPRSpeed;
        break;
      }
      
      // optional uint32 HPRSpeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPRSpeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hprspeed_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DeathRate;
        break;
      }
      
      // optional uint32 DeathRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathrate_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_DeathValue;
        break;
      }
      
      // optional uint32 DeathValue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathvalue_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_NormalDuck;
        break;
      }
      
      // optional uint32 NormalDuck = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NormalDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &normalduck_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_SkillDuck;
        break;
      }
      
      // optional uint32 SkillDuck = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillduck_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_SkillID;
        break;
      }
      
      // optional uint32 SkillID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_SkillLevel;
        break;
      }
      
      // optional uint32 SkillLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllevel_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PAttackRange;
        break;
      }
      
      // optional uint32 PAttackRange = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PAttackRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pattackrange_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_MAttackRange;
        break;
      }
      
      // optional uint32 MAttackRange = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MAttackRange:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mattackrange_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_PReducePer;
        break;
      }
      
      // optional uint32 PReducePer = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PReducePer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preduceper_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_MReducePer;
        break;
      }
      
      // optional uint32 MReducePer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MReducePer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mreduceper_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_DeathDefense;
        break;
      }
      
      // optional uint32 DeathDefense = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDefense:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdefense_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_IgnoreDuck;
        break;
      }
      
      // optional uint32 IgnoreDuck = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IgnoreDuck:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ignoreduck_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_ResDef;
        break;
      }
      
      // repeated uint32 ResDef = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDef:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resdef(value);
        if (input->ExpectTag(192)) goto parse_ResDef;
        if (input->ExpectTag(200)) goto parse_ResAtt;
        break;
      }
      
      // repeated uint32 ResAtt = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAtt:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resatt(value);
        if (input->ExpectTag(200)) goto parse_ResAtt;
        if (input->ExpectTag(208)) goto parse_AttPercent;
        break;
      }
      
      // optional uint32 AttPercent = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attpercent_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_DefPercent;
        break;
      }
      
      // optional uint32 DefPercent = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &defpercent_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_HPPercent;
        break;
      }
      
      // optional uint32 HPPercent = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hppercent_));
        _set_bit(27);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPetData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NameColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->namecolor(), output);
  }
  
  // optional uint32 AttackType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->attacktype(), output);
  }
  
  // optional uint32 PAttackUp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->pattackup(), output);
  }
  
  // optional uint32 PAttackLow = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->pattacklow(), output);
  }
  
  // optional uint32 MAttackUp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mattackup(), output);
  }
  
  // optional uint32 MAttackLow = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->mattacklow(), output);
  }
  
  // optional uint32 Speed = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->speed(), output);
  }
  
  // optional uint32 PDefence = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->pdefence(), output);
  }
  
  // optional uint32 MDefence = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->mdefence(), output);
  }
  
  // optional uint32 MaxHP = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->maxhp(), output);
  }
  
  // optional uint32 HPRSpeed = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->hprspeed(), output);
  }
  
  // optional uint32 DeathRate = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->deathrate(), output);
  }
  
  // optional uint32 DeathValue = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->deathvalue(), output);
  }
  
  // optional uint32 NormalDuck = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->normalduck(), output);
  }
  
  // optional uint32 SkillDuck = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->skillduck(), output);
  }
  
  // optional uint32 SkillID = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->skillid(), output);
  }
  
  // optional uint32 SkillLevel = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->skilllevel(), output);
  }
  
  // optional uint32 PAttackRange = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->pattackrange(), output);
  }
  
  // optional uint32 MAttackRange = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->mattackrange(), output);
  }
  
  // optional uint32 PReducePer = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->preduceper(), output);
  }
  
  // optional uint32 MReducePer = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->mreduceper(), output);
  }
  
  // optional uint32 DeathDefense = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->deathdefense(), output);
  }
  
  // optional uint32 IgnoreDuck = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->ignoreduck(), output);
  }
  
  // repeated uint32 ResDef = 24;
  for (int i = 0; i < this->resdef_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->resdef(i), output);
  }
  
  // repeated uint32 ResAtt = 25;
  for (int i = 0; i < this->resatt_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->resatt(i), output);
  }
  
  // optional uint32 AttPercent = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->attpercent(), output);
  }
  
  // optional uint32 DefPercent = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->defpercent(), output);
  }
  
  // optional uint32 HPPercent = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->hppercent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NameColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->namecolor(), target);
  }
  
  // optional uint32 AttackType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->attacktype(), target);
  }
  
  // optional uint32 PAttackUp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->pattackup(), target);
  }
  
  // optional uint32 PAttackLow = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->pattacklow(), target);
  }
  
  // optional uint32 MAttackUp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mattackup(), target);
  }
  
  // optional uint32 MAttackLow = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->mattacklow(), target);
  }
  
  // optional uint32 Speed = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->speed(), target);
  }
  
  // optional uint32 PDefence = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->pdefence(), target);
  }
  
  // optional uint32 MDefence = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->mdefence(), target);
  }
  
  // optional uint32 MaxHP = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->maxhp(), target);
  }
  
  // optional uint32 HPRSpeed = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->hprspeed(), target);
  }
  
  // optional uint32 DeathRate = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->deathrate(), target);
  }
  
  // optional uint32 DeathValue = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->deathvalue(), target);
  }
  
  // optional uint32 NormalDuck = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->normalduck(), target);
  }
  
  // optional uint32 SkillDuck = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->skillduck(), target);
  }
  
  // optional uint32 SkillID = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->skillid(), target);
  }
  
  // optional uint32 SkillLevel = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->skilllevel(), target);
  }
  
  // optional uint32 PAttackRange = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->pattackrange(), target);
  }
  
  // optional uint32 MAttackRange = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->mattackrange(), target);
  }
  
  // optional uint32 PReducePer = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->preduceper(), target);
  }
  
  // optional uint32 MReducePer = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->mreduceper(), target);
  }
  
  // optional uint32 DeathDefense = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->deathdefense(), target);
  }
  
  // optional uint32 IgnoreDuck = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->ignoreduck(), target);
  }
  
  // repeated uint32 ResDef = 24;
  for (int i = 0; i < this->resdef_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->resdef(i), target);
  }
  
  // repeated uint32 ResAtt = 25;
  for (int i = 0; i < this->resatt_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->resatt(i), target);
  }
  
  // optional uint32 AttPercent = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->attpercent(), target);
  }
  
  // optional uint32 DefPercent = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->defpercent(), target);
  }
  
  // optional uint32 HPPercent = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->hppercent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPetData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NameColor = 1;
    if (has_namecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->namecolor());
    }
    
    // optional uint32 AttackType = 2;
    if (has_attacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attacktype());
    }
    
    // optional uint32 PAttackUp = 3;
    if (has_pattackup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackup());
    }
    
    // optional uint32 PAttackLow = 4;
    if (has_pattacklow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattacklow());
    }
    
    // optional uint32 MAttackUp = 5;
    if (has_mattackup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackup());
    }
    
    // optional uint32 MAttackLow = 6;
    if (has_mattacklow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattacklow());
    }
    
    // optional uint32 Speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->speed());
    }
    
    // optional uint32 PDefence = 8;
    if (has_pdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pdefence());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MDefence = 9;
    if (has_mdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mdefence());
    }
    
    // optional uint32 MaxHP = 10;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhp());
    }
    
    // optional uint32 HPRSpeed = 11;
    if (has_hprspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hprspeed());
    }
    
    // optional uint32 DeathRate = 12;
    if (has_deathrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathrate());
    }
    
    // optional uint32 DeathValue = 13;
    if (has_deathvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathvalue());
    }
    
    // optional uint32 NormalDuck = 14;
    if (has_normalduck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->normalduck());
    }
    
    // optional uint32 SkillDuck = 15;
    if (has_skillduck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillduck());
    }
    
    // optional uint32 SkillID = 16;
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 SkillLevel = 17;
    if (has_skilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllevel());
    }
    
    // optional uint32 PAttackRange = 18;
    if (has_pattackrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pattackrange());
    }
    
    // optional uint32 MAttackRange = 19;
    if (has_mattackrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mattackrange());
    }
    
    // optional uint32 PReducePer = 20;
    if (has_preduceper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preduceper());
    }
    
    // optional uint32 MReducePer = 21;
    if (has_mreduceper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mreduceper());
    }
    
    // optional uint32 DeathDefense = 22;
    if (has_deathdefense()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdefense());
    }
    
    // optional uint32 IgnoreDuck = 23;
    if (has_ignoreduck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ignoreduck());
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 AttPercent = 26;
    if (has_attpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attpercent());
    }
    
    // optional uint32 DefPercent = 27;
    if (has_defpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->defpercent());
    }
    
    // optional uint32 HPPercent = 28;
    if (has_hppercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hppercent());
    }
    
  }
  // repeated uint32 ResDef = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->resdef_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resdef(i));
    }
    total_size += 2 * this->resdef_size() + data_size;
  }
  
  // repeated uint32 ResAtt = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->resatt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resatt(i));
    }
    total_size += 2 * this->resatt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPetData::MergeFrom(const PBPetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resdef_.MergeFrom(from.resdef_);
  resatt_.MergeFrom(from.resatt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_namecolor(from.namecolor());
    }
    if (from._has_bit(1)) {
      set_attacktype(from.attacktype());
    }
    if (from._has_bit(2)) {
      set_pattackup(from.pattackup());
    }
    if (from._has_bit(3)) {
      set_pattacklow(from.pattacklow());
    }
    if (from._has_bit(4)) {
      set_mattackup(from.mattackup());
    }
    if (from._has_bit(5)) {
      set_mattacklow(from.mattacklow());
    }
    if (from._has_bit(6)) {
      set_speed(from.speed());
    }
    if (from._has_bit(7)) {
      set_pdefence(from.pdefence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_mdefence(from.mdefence());
    }
    if (from._has_bit(9)) {
      set_maxhp(from.maxhp());
    }
    if (from._has_bit(10)) {
      set_hprspeed(from.hprspeed());
    }
    if (from._has_bit(11)) {
      set_deathrate(from.deathrate());
    }
    if (from._has_bit(12)) {
      set_deathvalue(from.deathvalue());
    }
    if (from._has_bit(13)) {
      set_normalduck(from.normalduck());
    }
    if (from._has_bit(14)) {
      set_skillduck(from.skillduck());
    }
    if (from._has_bit(15)) {
      set_skillid(from.skillid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_skilllevel(from.skilllevel());
    }
    if (from._has_bit(17)) {
      set_pattackrange(from.pattackrange());
    }
    if (from._has_bit(18)) {
      set_mattackrange(from.mattackrange());
    }
    if (from._has_bit(19)) {
      set_preduceper(from.preduceper());
    }
    if (from._has_bit(20)) {
      set_mreduceper(from.mreduceper());
    }
    if (from._has_bit(21)) {
      set_deathdefense(from.deathdefense());
    }
    if (from._has_bit(22)) {
      set_ignoreduck(from.ignoreduck());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from._has_bit(25)) {
      set_attpercent(from.attpercent());
    }
    if (from._has_bit(26)) {
      set_defpercent(from.defpercent());
    }
    if (from._has_bit(27)) {
      set_hppercent(from.hppercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetData::CopyFrom(const PBPetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPetData::Swap(PBPetData* other) {
  if (other != this) {
    std::swap(namecolor_, other->namecolor_);
    std::swap(attacktype_, other->attacktype_);
    std::swap(pattackup_, other->pattackup_);
    std::swap(pattacklow_, other->pattacklow_);
    std::swap(mattackup_, other->mattackup_);
    std::swap(mattacklow_, other->mattacklow_);
    std::swap(speed_, other->speed_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(hprspeed_, other->hprspeed_);
    std::swap(deathrate_, other->deathrate_);
    std::swap(deathvalue_, other->deathvalue_);
    std::swap(normalduck_, other->normalduck_);
    std::swap(skillduck_, other->skillduck_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(pattackrange_, other->pattackrange_);
    std::swap(mattackrange_, other->mattackrange_);
    std::swap(preduceper_, other->preduceper_);
    std::swap(mreduceper_, other->mreduceper_);
    std::swap(deathdefense_, other->deathdefense_);
    std::swap(ignoreduck_, other->ignoreduck_);
    resdef_.Swap(&other->resdef_);
    resatt_.Swap(&other->resatt_);
    std::swap(attpercent_, other->attpercent_);
    std::swap(defpercent_, other->defpercent_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPetData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPetData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPetData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPetData_reflection_;
}

// ===================================================================

const ::std::string PBSummonBeast::_default_name_;
const ::std::string PBSummonBeast::_default_model_;
#ifndef _MSC_VER
const int PBSummonBeast::kTempIDFieldNumber;
const int PBSummonBeast::kNameFieldNumber;
const int PBSummonBeast::kModelFieldNumber;
const int PBSummonBeast::kLevelFieldNumber;
const int PBSummonBeast::kLevelUpDelayTimeFieldNumber;
const int PBSummonBeast::kPetDataFieldNumber;
const int PBSummonBeast::kAttackFrequencyFieldNumber;
#endif  // !_MSC_VER

PBSummonBeast::PBSummonBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSummonBeast::InitAsDefaultInstance() {}

PBSummonBeast::PBSummonBeast(const PBSummonBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSummonBeast::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  model_ = const_cast< ::std::string*>(&_default_model_);
  level_ = 0u;
  attackfrequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSummonBeast::~PBSummonBeast() {
  SharedDtor();
}

void PBSummonBeast::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (model_ != &_default_model_) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSummonBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSummonBeast_descriptor_;
}

const PBSummonBeast& PBSummonBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSummonBeast* PBSummonBeast::default_instance_ = NULL;

PBSummonBeast* PBSummonBeast::New() const {
  return new PBSummonBeast;
}

void PBSummonBeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (model_ != &_default_model_) {
        model_->clear();
      }
    }
    level_ = 0u;
    attackfrequency_ = 0u;
  }
  levelupdelaytime_.Clear();
  petdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSummonBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Model;
        break;
      }
      
      // optional string Model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Model:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_model()));
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LevelUpDelayTime;
        break;
      }
      
      // repeated uint32 LevelUpDelayTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelUpDelayTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelupdelaytime(value);
        if (input->ExpectTag(40)) goto parse_LevelUpDelayTime;
        if (input->ExpectTag(50)) goto parse_PetData;
        break;
      }
      
      // repeated .PBPetData PetData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PetData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_petdata()));
        if (input->ExpectTag(50)) goto parse_PetData;
        if (input->ExpectTag(56)) goto parse_AttackFrequency;
        break;
      }
      
      // optional uint32 AttackFrequency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackFrequency:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackfrequency_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSummonBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSummonBeast::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->model(), output);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->level(), output);
  }
  
  // repeated uint32 LevelUpDelayTime = 5;
  for (int i = 0; i < this->levelupdelaytime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->levelupdelaytime(i), output);
  }
  
  // repeated .PBPetData PetData = 6;
  for (int i = 0; i < this->petdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->petdata(i), output);
  }
  
  // optional uint32 AttackFrequency = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->attackfrequency(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSummonBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Model = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->model(), target);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // repeated uint32 LevelUpDelayTime = 5;
  for (int i = 0; i < this->levelupdelaytime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->levelupdelaytime(i), target);
  }
  
  // repeated .PBPetData PetData = 6;
  for (int i = 0; i < this->petdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->petdata(i), target);
  }
  
  // optional uint32 AttackFrequency = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->attackfrequency(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSummonBeast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->model());
    }
    
    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 AttackFrequency = 7;
    if (has_attackfrequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackfrequency());
    }
    
  }
  // repeated uint32 LevelUpDelayTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelupdelaytime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelupdelaytime(i));
    }
    total_size += 1 * this->levelupdelaytime_size() + data_size;
  }
  
  // repeated .PBPetData PetData = 6;
  total_size += 1 * this->petdata_size();
  for (int i = 0; i < this->petdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->petdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSummonBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSummonBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSummonBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSummonBeast::MergeFrom(const PBSummonBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelupdelaytime_.MergeFrom(from.levelupdelaytime_);
  petdata_.MergeFrom(from.petdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_model(from.model());
    }
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_attackfrequency(from.attackfrequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSummonBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSummonBeast::CopyFrom(const PBSummonBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSummonBeast::Swap(PBSummonBeast* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(level_, other->level_);
    levelupdelaytime_.Swap(&other->levelupdelaytime_);
    petdata_.Swap(&other->petdata_);
    std::swap(attackfrequency_, other->attackfrequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSummonBeast::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSummonBeast::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSummonBeast::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSummonBeast_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBeginner::kTempIDFieldNumber;
const int PBBeginner::kEquipItemIDFieldNumber;
const int PBBeginner::kEquipItemNumFieldNumber;
const int PBBeginner::kBaggageItemIDFieldNumber;
const int PBBeginner::kBaggageItemNumFieldNumber;
const int PBBeginner::kSkillIDFieldNumber;
const int PBBeginner::kSkillLevelFieldNumber;
const int PBBeginner::kStrNumFieldNumber;
const int PBBeginner::kConNumFieldNumber;
const int PBBeginner::kStaNumFieldNumber;
const int PBBeginner::kWisNumFieldNumber;
const int PBBeginner::kSprNumFieldNumber;
const int PBBeginner::kSkillNumFieldNumber;
const int PBBeginner::kPoxX1FieldNumber;
const int PBBeginner::kPoxX2FieldNumber;
const int PBBeginner::kPoxY1FieldNumber;
const int PBBeginner::kPoxY2FieldNumber;
const int PBBeginner::kSkillID1FieldNumber;
const int PBBeginner::kSkillLevel1FieldNumber;
const int PBBeginner::kSkillID2FieldNumber;
const int PBBeginner::kSkillLevel2FieldNumber;
const int PBBeginner::kSkillID3FieldNumber;
const int PBBeginner::kSkillLevel3FieldNumber;
const int PBBeginner::kSkillID4FieldNumber;
const int PBBeginner::kSkillLevel4FieldNumber;
const int PBBeginner::kSkillID5FieldNumber;
const int PBBeginner::kSkillLevel5FieldNumber;
const int PBBeginner::kSkillID6FieldNumber;
const int PBBeginner::kSkillLevel6FieldNumber;
const int PBBeginner::kBeginnerProtectLevelFieldNumber;
const int PBBeginner::kTransProtectTimeFieldNumber;
const int PBBeginner::kMapIDFieldNumber;
const int PBBeginner::kDeathDuraRateFieldNumber;
const int PBBeginner::kCanMendUseBindMoneyFieldNumber;
const int PBBeginner::kBeginnerAPFieldNumber;
#endif  // !_MSC_VER

PBBeginner::PBBeginner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBeginner::InitAsDefaultInstance() {}

PBBeginner::PBBeginner(const PBBeginner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBeginner::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  strnum_ = 0u;
  connum_ = 0u;
  stanum_ = 0u;
  wisnum_ = 0u;
  sprnum_ = 0u;
  skillnum_ = 0u;
  poxx1_ = 0u;
  poxx2_ = 0u;
  poxy1_ = 0u;
  poxy2_ = 0u;
  beginnerprotectlevel_ = 0u;
  transprotecttime_ = 0u;
  mapid_ = 0u;
  deathdurarate_ = 0u;
  canmendusebindmoney_ = 0u;
  beginnerap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBeginner::~PBBeginner() {
  SharedDtor();
}

void PBBeginner::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBeginner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBeginner_descriptor_;
}

const PBBeginner& PBBeginner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBeginner* PBBeginner::default_instance_ = NULL;

PBBeginner* PBBeginner::New() const {
  return new PBBeginner;
}

void PBBeginner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    strnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    connum_ = 0u;
    stanum_ = 0u;
    wisnum_ = 0u;
    sprnum_ = 0u;
    skillnum_ = 0u;
    poxx1_ = 0u;
    poxx2_ = 0u;
    poxy1_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    poxy2_ = 0u;
  }
  if (_has_bits_[29 / 32] & (0xffu << (29 % 32))) {
    beginnerprotectlevel_ = 0u;
    transprotecttime_ = 0u;
    mapid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    deathdurarate_ = 0u;
    canmendusebindmoney_ = 0u;
    beginnerap_ = 0u;
  }
  equipitemid_.Clear();
  equipitemnum_.Clear();
  baggageitemid_.Clear();
  baggageitemnum_.Clear();
  skillid_.Clear();
  skilllevel_.Clear();
  skillid1_.Clear();
  skilllevel1_.Clear();
  skillid2_.Clear();
  skilllevel2_.Clear();
  skillid3_.Clear();
  skilllevel3_.Clear();
  skillid4_.Clear();
  skilllevel4_.Clear();
  skillid5_.Clear();
  skilllevel5_.Clear();
  skillid6_.Clear();
  skilllevel6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBeginner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EquipItemID;
        break;
      }
      
      // repeated uint32 EquipItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_equipitemid(value);
        if (input->ExpectTag(16)) goto parse_EquipItemID;
        if (input->ExpectTag(24)) goto parse_EquipItemNum;
        break;
      }
      
      // repeated uint32 EquipItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_equipitemnum(value);
        if (input->ExpectTag(24)) goto parse_EquipItemNum;
        if (input->ExpectTag(32)) goto parse_BaggageItemID;
        break;
      }
      
      // repeated uint32 BaggageItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaggageItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_baggageitemid(value);
        if (input->ExpectTag(32)) goto parse_BaggageItemID;
        if (input->ExpectTag(40)) goto parse_BaggageItemNum;
        break;
      }
      
      // repeated uint32 BaggageItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaggageItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_baggageitemnum(value);
        if (input->ExpectTag(40)) goto parse_BaggageItemNum;
        if (input->ExpectTag(48)) goto parse_SkillID;
        break;
      }
      
      // repeated uint32 SkillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid(value);
        if (input->ExpectTag(48)) goto parse_SkillID;
        if (input->ExpectTag(56)) goto parse_SkillLevel;
        break;
      }
      
      // repeated uint32 SkillLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel(value);
        if (input->ExpectTag(56)) goto parse_SkillLevel;
        if (input->ExpectTag(64)) goto parse_StrNum;
        break;
      }
      
      // optional uint32 StrNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StrNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &strnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ConNum;
        break;
      }
      
      // optional uint32 ConNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &connum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_StaNum;
        break;
      }
      
      // optional uint32 StaNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StaNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stanum_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_WisNum;
        break;
      }
      
      // optional uint32 WisNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WisNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wisnum_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_SprNum;
        break;
      }
      
      // optional uint32 SprNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SprNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sprnum_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_SkillNum;
        break;
      }
      
      // optional uint32 SkillNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillnum_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_PoxX1;
        break;
      }
      
      // optional uint32 PoxX1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PoxX1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &poxx1_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_PoxX2;
        break;
      }
      
      // optional uint32 PoxX2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PoxX2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &poxx2_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_PoxY1;
        break;
      }
      
      // optional uint32 PoxY1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PoxY1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &poxy1_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_PoxY2;
        break;
      }
      
      // optional uint32 PoxY2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PoxY2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &poxy2_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_SkillID1;
        break;
      }
      
      // repeated uint32 SkillID1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid1(value);
        if (input->ExpectTag(144)) goto parse_SkillID1;
        if (input->ExpectTag(152)) goto parse_SkillLevel1;
        break;
      }
      
      // repeated uint32 SkillLevel1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel1(value);
        if (input->ExpectTag(152)) goto parse_SkillLevel1;
        if (input->ExpectTag(160)) goto parse_SkillID2;
        break;
      }
      
      // repeated uint32 SkillID2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid2(value);
        if (input->ExpectTag(160)) goto parse_SkillID2;
        if (input->ExpectTag(168)) goto parse_SkillLevel2;
        break;
      }
      
      // repeated uint32 SkillLevel2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel2(value);
        if (input->ExpectTag(168)) goto parse_SkillLevel2;
        if (input->ExpectTag(176)) goto parse_SkillID3;
        break;
      }
      
      // repeated uint32 SkillID3 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID3:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid3(value);
        if (input->ExpectTag(176)) goto parse_SkillID3;
        if (input->ExpectTag(184)) goto parse_SkillLevel3;
        break;
      }
      
      // repeated uint32 SkillLevel3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel3:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel3(value);
        if (input->ExpectTag(184)) goto parse_SkillLevel3;
        if (input->ExpectTag(192)) goto parse_SkillID4;
        break;
      }
      
      // repeated uint32 SkillID4 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID4:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid4(value);
        if (input->ExpectTag(192)) goto parse_SkillID4;
        if (input->ExpectTag(200)) goto parse_SkillLevel4;
        break;
      }
      
      // repeated uint32 SkillLevel4 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel4:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel4(value);
        if (input->ExpectTag(200)) goto parse_SkillLevel4;
        if (input->ExpectTag(208)) goto parse_SkillID5;
        break;
      }
      
      // repeated uint32 SkillID5 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID5:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid5(value);
        if (input->ExpectTag(208)) goto parse_SkillID5;
        if (input->ExpectTag(216)) goto parse_SkillLevel5;
        break;
      }
      
      // repeated uint32 SkillLevel5 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel5:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel5(value);
        if (input->ExpectTag(216)) goto parse_SkillLevel5;
        if (input->ExpectTag(224)) goto parse_SkillID6;
        break;
      }
      
      // repeated uint32 SkillID6 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillID6:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skillid6(value);
        if (input->ExpectTag(224)) goto parse_SkillID6;
        if (input->ExpectTag(232)) goto parse_SkillLevel6;
        break;
      }
      
      // repeated uint32 SkillLevel6 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel6:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_skilllevel6(value);
        if (input->ExpectTag(232)) goto parse_SkillLevel6;
        if (input->ExpectTag(240)) goto parse_BeginnerProtectLevel;
        break;
      }
      
      // optional uint32 BeginnerProtectLevel = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginnerProtectLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beginnerprotectlevel_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_TransProtectTime;
        break;
      }
      
      // optional uint32 TransProtectTime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TransProtectTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &transprotecttime_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_DeathDuraRate;
        break;
      }
      
      // optional uint32 DeathDuraRate = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeathDuraRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deathdurarate_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_CanMendUseBindMoney;
        break;
      }
      
      // optional uint32 CanMendUseBindMoney = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanMendUseBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canmendusebindmoney_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_BeginnerAP;
        break;
      }
      
      // optional uint32 BeginnerAP = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginnerAP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beginnerap_));
        _set_bit(34);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBeginner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBeginner::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 EquipItemID = 2;
  for (int i = 0; i < this->equipitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->equipitemid(i), output);
  }
  
  // repeated uint32 EquipItemNum = 3;
  for (int i = 0; i < this->equipitemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->equipitemnum(i), output);
  }
  
  // repeated uint32 BaggageItemID = 4;
  for (int i = 0; i < this->baggageitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->baggageitemid(i), output);
  }
  
  // repeated uint32 BaggageItemNum = 5;
  for (int i = 0; i < this->baggageitemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->baggageitemnum(i), output);
  }
  
  // repeated uint32 SkillID = 6;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->skillid(i), output);
  }
  
  // repeated uint32 SkillLevel = 7;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->skilllevel(i), output);
  }
  
  // optional uint32 StrNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->strnum(), output);
  }
  
  // optional uint32 ConNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->connum(), output);
  }
  
  // optional uint32 StaNum = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->stanum(), output);
  }
  
  // optional uint32 WisNum = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->wisnum(), output);
  }
  
  // optional uint32 SprNum = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->sprnum(), output);
  }
  
  // optional uint32 SkillNum = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->skillnum(), output);
  }
  
  // optional uint32 PoxX1 = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->poxx1(), output);
  }
  
  // optional uint32 PoxX2 = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->poxx2(), output);
  }
  
  // optional uint32 PoxY1 = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->poxy1(), output);
  }
  
  // optional uint32 PoxY2 = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->poxy2(), output);
  }
  
  // repeated uint32 SkillID1 = 18;
  for (int i = 0; i < this->skillid1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->skillid1(i), output);
  }
  
  // repeated uint32 SkillLevel1 = 19;
  for (int i = 0; i < this->skilllevel1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->skilllevel1(i), output);
  }
  
  // repeated uint32 SkillID2 = 20;
  for (int i = 0; i < this->skillid2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->skillid2(i), output);
  }
  
  // repeated uint32 SkillLevel2 = 21;
  for (int i = 0; i < this->skilllevel2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->skilllevel2(i), output);
  }
  
  // repeated uint32 SkillID3 = 22;
  for (int i = 0; i < this->skillid3_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->skillid3(i), output);
  }
  
  // repeated uint32 SkillLevel3 = 23;
  for (int i = 0; i < this->skilllevel3_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->skilllevel3(i), output);
  }
  
  // repeated uint32 SkillID4 = 24;
  for (int i = 0; i < this->skillid4_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->skillid4(i), output);
  }
  
  // repeated uint32 SkillLevel4 = 25;
  for (int i = 0; i < this->skilllevel4_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->skilllevel4(i), output);
  }
  
  // repeated uint32 SkillID5 = 26;
  for (int i = 0; i < this->skillid5_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->skillid5(i), output);
  }
  
  // repeated uint32 SkillLevel5 = 27;
  for (int i = 0; i < this->skilllevel5_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->skilllevel5(i), output);
  }
  
  // repeated uint32 SkillID6 = 28;
  for (int i = 0; i < this->skillid6_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->skillid6(i), output);
  }
  
  // repeated uint32 SkillLevel6 = 29;
  for (int i = 0; i < this->skilllevel6_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->skilllevel6(i), output);
  }
  
  // optional uint32 BeginnerProtectLevel = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->beginnerprotectlevel(), output);
  }
  
  // optional uint32 TransProtectTime = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->transprotecttime(), output);
  }
  
  // optional uint32 MapID = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->mapid(), output);
  }
  
  // optional uint32 DeathDuraRate = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->deathdurarate(), output);
  }
  
  // optional uint32 CanMendUseBindMoney = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->canmendusebindmoney(), output);
  }
  
  // optional uint32 BeginnerAP = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->beginnerap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBeginner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 EquipItemID = 2;
  for (int i = 0; i < this->equipitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->equipitemid(i), target);
  }
  
  // repeated uint32 EquipItemNum = 3;
  for (int i = 0; i < this->equipitemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->equipitemnum(i), target);
  }
  
  // repeated uint32 BaggageItemID = 4;
  for (int i = 0; i < this->baggageitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->baggageitemid(i), target);
  }
  
  // repeated uint32 BaggageItemNum = 5;
  for (int i = 0; i < this->baggageitemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->baggageitemnum(i), target);
  }
  
  // repeated uint32 SkillID = 6;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->skillid(i), target);
  }
  
  // repeated uint32 SkillLevel = 7;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->skilllevel(i), target);
  }
  
  // optional uint32 StrNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->strnum(), target);
  }
  
  // optional uint32 ConNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->connum(), target);
  }
  
  // optional uint32 StaNum = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->stanum(), target);
  }
  
  // optional uint32 WisNum = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->wisnum(), target);
  }
  
  // optional uint32 SprNum = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->sprnum(), target);
  }
  
  // optional uint32 SkillNum = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->skillnum(), target);
  }
  
  // optional uint32 PoxX1 = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->poxx1(), target);
  }
  
  // optional uint32 PoxX2 = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->poxx2(), target);
  }
  
  // optional uint32 PoxY1 = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->poxy1(), target);
  }
  
  // optional uint32 PoxY2 = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->poxy2(), target);
  }
  
  // repeated uint32 SkillID1 = 18;
  for (int i = 0; i < this->skillid1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->skillid1(i), target);
  }
  
  // repeated uint32 SkillLevel1 = 19;
  for (int i = 0; i < this->skilllevel1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->skilllevel1(i), target);
  }
  
  // repeated uint32 SkillID2 = 20;
  for (int i = 0; i < this->skillid2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->skillid2(i), target);
  }
  
  // repeated uint32 SkillLevel2 = 21;
  for (int i = 0; i < this->skilllevel2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->skilllevel2(i), target);
  }
  
  // repeated uint32 SkillID3 = 22;
  for (int i = 0; i < this->skillid3_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->skillid3(i), target);
  }
  
  // repeated uint32 SkillLevel3 = 23;
  for (int i = 0; i < this->skilllevel3_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->skilllevel3(i), target);
  }
  
  // repeated uint32 SkillID4 = 24;
  for (int i = 0; i < this->skillid4_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->skillid4(i), target);
  }
  
  // repeated uint32 SkillLevel4 = 25;
  for (int i = 0; i < this->skilllevel4_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->skilllevel4(i), target);
  }
  
  // repeated uint32 SkillID5 = 26;
  for (int i = 0; i < this->skillid5_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->skillid5(i), target);
  }
  
  // repeated uint32 SkillLevel5 = 27;
  for (int i = 0; i < this->skilllevel5_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->skilllevel5(i), target);
  }
  
  // repeated uint32 SkillID6 = 28;
  for (int i = 0; i < this->skillid6_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->skillid6(i), target);
  }
  
  // repeated uint32 SkillLevel6 = 29;
  for (int i = 0; i < this->skilllevel6_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->skilllevel6(i), target);
  }
  
  // optional uint32 BeginnerProtectLevel = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->beginnerprotectlevel(), target);
  }
  
  // optional uint32 TransProtectTime = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->transprotecttime(), target);
  }
  
  // optional uint32 MapID = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->mapid(), target);
  }
  
  // optional uint32 DeathDuraRate = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->deathdurarate(), target);
  }
  
  // optional uint32 CanMendUseBindMoney = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->canmendusebindmoney(), target);
  }
  
  // optional uint32 BeginnerAP = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->beginnerap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBeginner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 StrNum = 8;
    if (has_strnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->strnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ConNum = 9;
    if (has_connum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->connum());
    }
    
    // optional uint32 StaNum = 10;
    if (has_stanum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stanum());
    }
    
    // optional uint32 WisNum = 11;
    if (has_wisnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wisnum());
    }
    
    // optional uint32 SprNum = 12;
    if (has_sprnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sprnum());
    }
    
    // optional uint32 SkillNum = 13;
    if (has_skillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillnum());
    }
    
    // optional uint32 PoxX1 = 14;
    if (has_poxx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->poxx1());
    }
    
    // optional uint32 PoxX2 = 15;
    if (has_poxx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->poxx2());
    }
    
    // optional uint32 PoxY1 = 16;
    if (has_poxy1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->poxy1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 PoxY2 = 17;
    if (has_poxy2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->poxy2());
    }
    
  }
  if (_has_bits_[29 / 32] & (0xffu << (29 % 32))) {
    // optional uint32 BeginnerProtectLevel = 30;
    if (has_beginnerprotectlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beginnerprotectlevel());
    }
    
    // optional uint32 TransProtectTime = 31;
    if (has_transprotecttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->transprotecttime());
    }
    
    // optional uint32 MapID = 32;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 DeathDuraRate = 33;
    if (has_deathdurarate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deathdurarate());
    }
    
    // optional uint32 CanMendUseBindMoney = 34;
    if (has_canmendusebindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canmendusebindmoney());
    }
    
    // optional uint32 BeginnerAP = 35;
    if (has_beginnerap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beginnerap());
    }
    
  }
  // repeated uint32 EquipItemID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->equipitemid(i));
    }
    total_size += 1 * this->equipitemid_size() + data_size;
  }
  
  // repeated uint32 EquipItemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipitemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->equipitemnum(i));
    }
    total_size += 1 * this->equipitemnum_size() + data_size;
  }
  
  // repeated uint32 BaggageItemID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->baggageitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->baggageitemid(i));
    }
    total_size += 1 * this->baggageitemid_size() + data_size;
  }
  
  // repeated uint32 BaggageItemNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->baggageitemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->baggageitemnum(i));
    }
    total_size += 1 * this->baggageitemnum_size() + data_size;
  }
  
  // repeated uint32 SkillID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }
  
  // repeated uint32 SkillLevel = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel(i));
    }
    total_size += 1 * this->skilllevel_size() + data_size;
  }
  
  // repeated uint32 SkillID1 = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid1(i));
    }
    total_size += 2 * this->skillid1_size() + data_size;
  }
  
  // repeated uint32 SkillLevel1 = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel1(i));
    }
    total_size += 2 * this->skilllevel1_size() + data_size;
  }
  
  // repeated uint32 SkillID2 = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid2(i));
    }
    total_size += 2 * this->skillid2_size() + data_size;
  }
  
  // repeated uint32 SkillLevel2 = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel2(i));
    }
    total_size += 2 * this->skilllevel2_size() + data_size;
  }
  
  // repeated uint32 SkillID3 = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid3(i));
    }
    total_size += 2 * this->skillid3_size() + data_size;
  }
  
  // repeated uint32 SkillLevel3 = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel3(i));
    }
    total_size += 2 * this->skilllevel3_size() + data_size;
  }
  
  // repeated uint32 SkillID4 = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid4(i));
    }
    total_size += 2 * this->skillid4_size() + data_size;
  }
  
  // repeated uint32 SkillLevel4 = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel4(i));
    }
    total_size += 2 * this->skilllevel4_size() + data_size;
  }
  
  // repeated uint32 SkillID5 = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid5(i));
    }
    total_size += 2 * this->skillid5_size() + data_size;
  }
  
  // repeated uint32 SkillLevel5 = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel5(i));
    }
    total_size += 2 * this->skilllevel5_size() + data_size;
  }
  
  // repeated uint32 SkillID6 = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid6_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skillid6(i));
    }
    total_size += 2 * this->skillid6_size() + data_size;
  }
  
  // repeated uint32 SkillLevel6 = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel6_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->skilllevel6(i));
    }
    total_size += 2 * this->skilllevel6_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBeginner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBeginner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBeginner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBeginner::MergeFrom(const PBBeginner& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipitemid_.MergeFrom(from.equipitemid_);
  equipitemnum_.MergeFrom(from.equipitemnum_);
  baggageitemid_.MergeFrom(from.baggageitemid_);
  baggageitemnum_.MergeFrom(from.baggageitemnum_);
  skillid_.MergeFrom(from.skillid_);
  skilllevel_.MergeFrom(from.skilllevel_);
  skillid1_.MergeFrom(from.skillid1_);
  skilllevel1_.MergeFrom(from.skilllevel1_);
  skillid2_.MergeFrom(from.skillid2_);
  skilllevel2_.MergeFrom(from.skilllevel2_);
  skillid3_.MergeFrom(from.skillid3_);
  skilllevel3_.MergeFrom(from.skilllevel3_);
  skillid4_.MergeFrom(from.skillid4_);
  skilllevel4_.MergeFrom(from.skilllevel4_);
  skillid5_.MergeFrom(from.skillid5_);
  skilllevel5_.MergeFrom(from.skilllevel5_);
  skillid6_.MergeFrom(from.skillid6_);
  skilllevel6_.MergeFrom(from.skilllevel6_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(7)) {
      set_strnum(from.strnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_connum(from.connum());
    }
    if (from._has_bit(9)) {
      set_stanum(from.stanum());
    }
    if (from._has_bit(10)) {
      set_wisnum(from.wisnum());
    }
    if (from._has_bit(11)) {
      set_sprnum(from.sprnum());
    }
    if (from._has_bit(12)) {
      set_skillnum(from.skillnum());
    }
    if (from._has_bit(13)) {
      set_poxx1(from.poxx1());
    }
    if (from._has_bit(14)) {
      set_poxx2(from.poxx2());
    }
    if (from._has_bit(15)) {
      set_poxy1(from.poxy1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_poxy2(from.poxy2());
    }
  }
  if (from._has_bits_[29 / 32] & (0xffu << (29 % 32))) {
    if (from._has_bit(29)) {
      set_beginnerprotectlevel(from.beginnerprotectlevel());
    }
    if (from._has_bit(30)) {
      set_transprotecttime(from.transprotecttime());
    }
    if (from._has_bit(31)) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_deathdurarate(from.deathdurarate());
    }
    if (from._has_bit(33)) {
      set_canmendusebindmoney(from.canmendusebindmoney());
    }
    if (from._has_bit(34)) {
      set_beginnerap(from.beginnerap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBeginner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBeginner::CopyFrom(const PBBeginner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBeginner::Swap(PBBeginner* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    equipitemid_.Swap(&other->equipitemid_);
    equipitemnum_.Swap(&other->equipitemnum_);
    baggageitemid_.Swap(&other->baggageitemid_);
    baggageitemnum_.Swap(&other->baggageitemnum_);
    skillid_.Swap(&other->skillid_);
    skilllevel_.Swap(&other->skilllevel_);
    std::swap(strnum_, other->strnum_);
    std::swap(connum_, other->connum_);
    std::swap(stanum_, other->stanum_);
    std::swap(wisnum_, other->wisnum_);
    std::swap(sprnum_, other->sprnum_);
    std::swap(skillnum_, other->skillnum_);
    std::swap(poxx1_, other->poxx1_);
    std::swap(poxx2_, other->poxx2_);
    std::swap(poxy1_, other->poxy1_);
    std::swap(poxy2_, other->poxy2_);
    skillid1_.Swap(&other->skillid1_);
    skilllevel1_.Swap(&other->skilllevel1_);
    skillid2_.Swap(&other->skillid2_);
    skilllevel2_.Swap(&other->skilllevel2_);
    skillid3_.Swap(&other->skillid3_);
    skilllevel3_.Swap(&other->skilllevel3_);
    skillid4_.Swap(&other->skillid4_);
    skilllevel4_.Swap(&other->skilllevel4_);
    skillid5_.Swap(&other->skillid5_);
    skilllevel5_.Swap(&other->skilllevel5_);
    skillid6_.Swap(&other->skillid6_);
    skilllevel6_.Swap(&other->skilllevel6_);
    std::swap(beginnerprotectlevel_, other->beginnerprotectlevel_);
    std::swap(transprotecttime_, other->transprotecttime_);
    std::swap(mapid_, other->mapid_);
    std::swap(deathdurarate_, other->deathdurarate_);
    std::swap(canmendusebindmoney_, other->canmendusebindmoney_);
    std::swap(beginnerap_, other->beginnerap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBeginner::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBeginner::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBeginner::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBeginner_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDropLevel::kTempIDFieldNumber;
const int PBDropLevel::kRanFieldNumber;
#endif  // !_MSC_VER

PBDropLevel::PBDropLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropLevel::InitAsDefaultInstance() {}

PBDropLevel::PBDropLevel(const PBDropLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropLevel::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropLevel::~PBDropLevel() {
  SharedDtor();
}

void PBDropLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDropLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropLevel_descriptor_;
}

const PBDropLevel& PBDropLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDropLevel* PBDropLevel::default_instance_ = NULL;

PBDropLevel* PBDropLevel::New() const {
  return new PBDropLevel;
}

void PBDropLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  ran_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Ran;
        break;
      }
      
      // repeated uint32 Ran = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Ran:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_ran(value);
        if (input->ExpectTag(16)) goto parse_Ran;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDropLevel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Ran = 2;
  for (int i = 0; i < this->ran_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ran(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Ran = 2;
  for (int i = 0; i < this->ran_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ran(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Ran = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ran_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->ran(i));
    }
    total_size += 1 * this->ran_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDropLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropLevel::MergeFrom(const PBDropLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  ran_.MergeFrom(from.ran_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropLevel::CopyFrom(const PBDropLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropLevel::Swap(PBDropLevel* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    ran_.Swap(&other->ran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDropLevel::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDropLevel::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDropLevel::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDropLevel_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOgreTran::kTempIDFieldNumber;
const int PBOgreTran::kDropFieldNumber;
const int PBOgreTran::kHPFieldNumber;
const int PBOgreTran::kMPFieldNumber;
const int PBOgreTran::kPAFieldNumber;
const int PBOgreTran::kMAFieldNumber;
const int PBOgreTran::kPDFieldNumber;
const int PBOgreTran::kMDFieldNumber;
const int PBOgreTran::kHitFieldNumber;
const int PBOgreTran::kDodgeFieldNumber;
const int PBOgreTran::kExpFieldNumber;
const int PBOgreTran::kIgnoreFieldNumber;
const int PBOgreTran::kDeathFieldNumber;
const int PBOgreTran::kResDefFieldNumber;
const int PBOgreTran::kResAttFieldNumber;
#endif  // !_MSC_VER

PBOgreTran::PBOgreTran()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOgreTran::InitAsDefaultInstance() {}

PBOgreTran::PBOgreTran(const PBOgreTran& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOgreTran::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOgreTran::~PBOgreTran() {
  SharedDtor();
}

void PBOgreTran::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOgreTran::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOgreTran_descriptor_;
}

const PBOgreTran& PBOgreTran::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOgreTran* PBOgreTran::default_instance_ = NULL;

PBOgreTran* PBOgreTran::New() const {
  return new PBOgreTran;
}

void PBOgreTran::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  drop_.Clear();
  hp_.Clear();
  mp_.Clear();
  pa_.Clear();
  ma_.Clear();
  pd_.Clear();
  md_.Clear();
  hit_.Clear();
  dodge_.Clear();
  exp_.Clear();
  ignore_.Clear();
  death_.Clear();
  resdef_.Clear();
  resatt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOgreTran::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Drop;
        break;
      }
      
      // repeated uint32 Drop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Drop:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_drop(value);
        if (input->ExpectTag(16)) goto parse_Drop;
        if (input->ExpectTag(24)) goto parse_HP;
        break;
      }
      
      // repeated uint32 HP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HP:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hp(value);
        if (input->ExpectTag(24)) goto parse_HP;
        if (input->ExpectTag(32)) goto parse_MP;
        break;
      }
      
      // repeated uint32 MP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MP:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mp(value);
        if (input->ExpectTag(32)) goto parse_MP;
        if (input->ExpectTag(40)) goto parse_PA;
        break;
      }
      
      // repeated uint32 PA = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PA:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pa(value);
        if (input->ExpectTag(40)) goto parse_PA;
        if (input->ExpectTag(48)) goto parse_MA;
        break;
      }
      
      // repeated uint32 MA = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MA:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_ma(value);
        if (input->ExpectTag(48)) goto parse_MA;
        if (input->ExpectTag(56)) goto parse_PD;
        break;
      }
      
      // repeated uint32 PD = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PD:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pd(value);
        if (input->ExpectTag(56)) goto parse_PD;
        if (input->ExpectTag(64)) goto parse_MD;
        break;
      }
      
      // repeated uint32 MD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MD:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_md(value);
        if (input->ExpectTag(64)) goto parse_MD;
        if (input->ExpectTag(72)) goto parse_Hit;
        break;
      }
      
      // repeated uint32 Hit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Hit:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hit(value);
        if (input->ExpectTag(72)) goto parse_Hit;
        if (input->ExpectTag(80)) goto parse_Dodge;
        break;
      }
      
      // repeated uint32 Dodge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Dodge:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_dodge(value);
        if (input->ExpectTag(80)) goto parse_Dodge;
        if (input->ExpectTag(88)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(88)) goto parse_Exp;
        if (input->ExpectTag(96)) goto parse_Ignore;
        break;
      }
      
      // repeated uint32 Ignore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Ignore:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_ignore(value);
        if (input->ExpectTag(96)) goto parse_Ignore;
        if (input->ExpectTag(104)) goto parse_Death;
        break;
      }
      
      // repeated uint32 Death = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Death:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_death(value);
        if (input->ExpectTag(104)) goto parse_Death;
        if (input->ExpectTag(112)) goto parse_ResDef;
        break;
      }
      
      // repeated uint32 ResDef = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDef:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resdef(value);
        if (input->ExpectTag(112)) goto parse_ResDef;
        if (input->ExpectTag(120)) goto parse_ResAtt;
        break;
      }
      
      // repeated uint32 ResAtt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAtt:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_resatt(value);
        if (input->ExpectTag(120)) goto parse_ResAtt;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOgreTran::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOgreTran::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Drop = 2;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->drop(i), output);
  }
  
  // repeated uint32 HP = 3;
  for (int i = 0; i < this->hp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->hp(i), output);
  }
  
  // repeated uint32 MP = 4;
  for (int i = 0; i < this->mp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mp(i), output);
  }
  
  // repeated uint32 PA = 5;
  for (int i = 0; i < this->pa_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->pa(i), output);
  }
  
  // repeated uint32 MA = 6;
  for (int i = 0; i < this->ma_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->ma(i), output);
  }
  
  // repeated uint32 PD = 7;
  for (int i = 0; i < this->pd_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->pd(i), output);
  }
  
  // repeated uint32 MD = 8;
  for (int i = 0; i < this->md_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->md(i), output);
  }
  
  // repeated uint32 Hit = 9;
  for (int i = 0; i < this->hit_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->hit(i), output);
  }
  
  // repeated uint32 Dodge = 10;
  for (int i = 0; i < this->dodge_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->dodge(i), output);
  }
  
  // repeated uint32 Exp = 11;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->exp(i), output);
  }
  
  // repeated uint32 Ignore = 12;
  for (int i = 0; i < this->ignore_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->ignore(i), output);
  }
  
  // repeated uint32 Death = 13;
  for (int i = 0; i < this->death_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->death(i), output);
  }
  
  // repeated uint32 ResDef = 14;
  for (int i = 0; i < this->resdef_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->resdef(i), output);
  }
  
  // repeated uint32 ResAtt = 15;
  for (int i = 0; i < this->resatt_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->resatt(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOgreTran::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Drop = 2;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->drop(i), target);
  }
  
  // repeated uint32 HP = 3;
  for (int i = 0; i < this->hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->hp(i), target);
  }
  
  // repeated uint32 MP = 4;
  for (int i = 0; i < this->mp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mp(i), target);
  }
  
  // repeated uint32 PA = 5;
  for (int i = 0; i < this->pa_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->pa(i), target);
  }
  
  // repeated uint32 MA = 6;
  for (int i = 0; i < this->ma_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->ma(i), target);
  }
  
  // repeated uint32 PD = 7;
  for (int i = 0; i < this->pd_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->pd(i), target);
  }
  
  // repeated uint32 MD = 8;
  for (int i = 0; i < this->md_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->md(i), target);
  }
  
  // repeated uint32 Hit = 9;
  for (int i = 0; i < this->hit_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->hit(i), target);
  }
  
  // repeated uint32 Dodge = 10;
  for (int i = 0; i < this->dodge_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->dodge(i), target);
  }
  
  // repeated uint32 Exp = 11;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->exp(i), target);
  }
  
  // repeated uint32 Ignore = 12;
  for (int i = 0; i < this->ignore_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->ignore(i), target);
  }
  
  // repeated uint32 Death = 13;
  for (int i = 0; i < this->death_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->death(i), target);
  }
  
  // repeated uint32 ResDef = 14;
  for (int i = 0; i < this->resdef_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->resdef(i), target);
  }
  
  // repeated uint32 ResAtt = 15;
  for (int i = 0; i < this->resatt_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->resatt(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOgreTran::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Drop = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->drop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->drop(i));
    }
    total_size += 1 * this->drop_size() + data_size;
  }
  
  // repeated uint32 HP = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hp(i));
    }
    total_size += 1 * this->hp_size() + data_size;
  }
  
  // repeated uint32 MP = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mp(i));
    }
    total_size += 1 * this->mp_size() + data_size;
  }
  
  // repeated uint32 PA = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pa_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pa(i));
    }
    total_size += 1 * this->pa_size() + data_size;
  }
  
  // repeated uint32 MA = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ma_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->ma(i));
    }
    total_size += 1 * this->ma_size() + data_size;
  }
  
  // repeated uint32 PD = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pd(i));
    }
    total_size += 1 * this->pd_size() + data_size;
  }
  
  // repeated uint32 MD = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->md_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->md(i));
    }
    total_size += 1 * this->md_size() + data_size;
  }
  
  // repeated uint32 Hit = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->hit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hit(i));
    }
    total_size += 1 * this->hit_size() + data_size;
  }
  
  // repeated uint32 Dodge = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->dodge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->dodge(i));
    }
    total_size += 1 * this->dodge_size() + data_size;
  }
  
  // repeated uint32 Exp = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  // repeated uint32 Ignore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->ignore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->ignore(i));
    }
    total_size += 1 * this->ignore_size() + data_size;
  }
  
  // repeated uint32 Death = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->death_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->death(i));
    }
    total_size += 1 * this->death_size() + data_size;
  }
  
  // repeated uint32 ResDef = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->resdef_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resdef(i));
    }
    total_size += 1 * this->resdef_size() + data_size;
  }
  
  // repeated uint32 ResAtt = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->resatt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->resatt(i));
    }
    total_size += 1 * this->resatt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOgreTran::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOgreTran* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOgreTran*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOgreTran::MergeFrom(const PBOgreTran& from) {
  GOOGLE_CHECK_NE(&from, this);
  drop_.MergeFrom(from.drop_);
  hp_.MergeFrom(from.hp_);
  mp_.MergeFrom(from.mp_);
  pa_.MergeFrom(from.pa_);
  ma_.MergeFrom(from.ma_);
  pd_.MergeFrom(from.pd_);
  md_.MergeFrom(from.md_);
  hit_.MergeFrom(from.hit_);
  dodge_.MergeFrom(from.dodge_);
  exp_.MergeFrom(from.exp_);
  ignore_.MergeFrom(from.ignore_);
  death_.MergeFrom(from.death_);
  resdef_.MergeFrom(from.resdef_);
  resatt_.MergeFrom(from.resatt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOgreTran::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreTran::CopyFrom(const PBOgreTran& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOgreTran::Swap(PBOgreTran* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    drop_.Swap(&other->drop_);
    hp_.Swap(&other->hp_);
    mp_.Swap(&other->mp_);
    pa_.Swap(&other->pa_);
    ma_.Swap(&other->ma_);
    pd_.Swap(&other->pd_);
    md_.Swap(&other->md_);
    hit_.Swap(&other->hit_);
    dodge_.Swap(&other->dodge_);
    exp_.Swap(&other->exp_);
    ignore_.Swap(&other->ignore_);
    death_.Swap(&other->death_);
    resdef_.Swap(&other->resdef_);
    resatt_.Swap(&other->resatt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOgreTran::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOgreTran::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOgreTran::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOgreTran_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMetierPro::kTempIDFieldNumber;
const int PBMetierPro::kMetierRequireFieldNumber;
const int PBMetierPro::kOptionFieldNumber;
const int PBMetierPro::kMetierPropertyFieldNumber;
#endif  // !_MSC_VER

PBMetierPro::PBMetierPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMetierPro::InitAsDefaultInstance() {}

PBMetierPro::PBMetierPro(const PBMetierPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMetierPro::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  metierrequire_ = 0u;
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMetierPro::~PBMetierPro() {
  SharedDtor();
}

void PBMetierPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMetierPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMetierPro_descriptor_;
}

const PBMetierPro& PBMetierPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMetierPro* PBMetierPro::default_instance_ = NULL;

PBMetierPro* PBMetierPro::New() const {
  return new PBMetierPro;
}

void PBMetierPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    metierrequire_ = 0u;
    option_ = 0u;
  }
  metierproperty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMetierPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MetierRequire;
        break;
      }
      
      // optional uint32 MetierRequire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierRequire:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierrequire_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Option;
        break;
      }
      
      // optional uint32 Option = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Option:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &option_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MetierProperty;
        break;
      }
      
      // repeated uint32 MetierProperty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierProperty:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_metierproperty(value);
        if (input->ExpectTag(32)) goto parse_MetierProperty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMetierPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMetierPro::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 MetierRequire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->metierrequire(), output);
  }
  
  // optional uint32 Option = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->option(), output);
  }
  
  // repeated uint32 MetierProperty = 4;
  for (int i = 0; i < this->metierproperty_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metierproperty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMetierPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 MetierRequire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->metierrequire(), target);
  }
  
  // optional uint32 Option = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->option(), target);
  }
  
  // repeated uint32 MetierProperty = 4;
  for (int i = 0; i < this->metierproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metierproperty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMetierPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MetierRequire = 2;
    if (has_metierrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierrequire());
    }
    
    // optional uint32 Option = 3;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->option());
    }
    
  }
  // repeated uint32 MetierProperty = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->metierproperty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->metierproperty(i));
    }
    total_size += 1 * this->metierproperty_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMetierPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMetierPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMetierPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMetierPro::MergeFrom(const PBMetierPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  metierproperty_.MergeFrom(from.metierproperty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_metierrequire(from.metierrequire());
    }
    if (from._has_bit(2)) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMetierPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetierPro::CopyFrom(const PBMetierPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetierPro::Swap(PBMetierPro* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(metierrequire_, other->metierrequire_);
    std::swap(option_, other->option_);
    metierproperty_.Swap(&other->metierproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMetierPro::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMetierPro::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMetierPro::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMetierPro_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLevelProperty::kTempIDFieldNumber;
const int PBLevelProperty::kOptionFieldNumber;
const int PBLevelProperty::kLevelPropertyFieldNumber;
#endif  // !_MSC_VER

PBLevelProperty::PBLevelProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLevelProperty::InitAsDefaultInstance() {}

PBLevelProperty::PBLevelProperty(const PBLevelProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLevelProperty::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  option_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLevelProperty::~PBLevelProperty() {
  SharedDtor();
}

void PBLevelProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLevelProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLevelProperty_descriptor_;
}

const PBLevelProperty& PBLevelProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLevelProperty* PBLevelProperty::default_instance_ = NULL;

PBLevelProperty* PBLevelProperty::New() const {
  return new PBLevelProperty;
}

void PBLevelProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    option_ = 0u;
  }
  levelproperty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLevelProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Option;
        break;
      }
      
      // optional uint32 Option = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Option:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &option_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelProperty;
        break;
      }
      
      // repeated uint32 LevelProperty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelProperty:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelproperty(value);
        if (input->ExpectTag(24)) goto parse_LevelProperty;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLevelProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLevelProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 Option = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->option(), output);
  }
  
  // repeated uint32 LevelProperty = 3;
  for (int i = 0; i < this->levelproperty_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levelproperty(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLevelProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 Option = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->option(), target);
  }
  
  // repeated uint32 LevelProperty = 3;
  for (int i = 0; i < this->levelproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levelproperty(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLevelProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Option = 2;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->option());
    }
    
  }
  // repeated uint32 LevelProperty = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelproperty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelproperty(i));
    }
    total_size += 1 * this->levelproperty_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLevelProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLevelProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLevelProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLevelProperty::MergeFrom(const PBLevelProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelproperty_.MergeFrom(from.levelproperty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLevelProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelProperty::CopyFrom(const PBLevelProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLevelProperty::Swap(PBLevelProperty* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(option_, other->option_);
    levelproperty_.Swap(&other->levelproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLevelProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLevelProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLevelProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLevelProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBHonorToExp::kTempIDFieldNumber;
const int PBHonorToExp::kExpFieldNumber;
const int PBHonorToExp::kWizardFieldNumber;
const int PBHonorToExp::kExpLimitFieldNumber;
const int PBHonorToExp::kItemIDFieldNumber;
const int PBHonorToExp::kItemHonorFieldNumber;
const int PBHonorToExp::kItemLimitFieldNumber;
#endif  // !_MSC_VER

PBHonorToExp::PBHonorToExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHonorToExp::InitAsDefaultInstance() {}

PBHonorToExp::PBHonorToExp(const PBHonorToExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHonorToExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  explimit_ = 0u;
  itemid_ = 0u;
  itemhonor_ = 0u;
  itemlimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHonorToExp::~PBHonorToExp() {
  SharedDtor();
}

void PBHonorToExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBHonorToExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHonorToExp_descriptor_;
}

const PBHonorToExp& PBHonorToExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBHonorToExp* PBHonorToExp::default_instance_ = NULL;

PBHonorToExp* PBHonorToExp::New() const {
  return new PBHonorToExp;
}

void PBHonorToExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    explimit_ = 0u;
    itemid_ = 0u;
    itemhonor_ = 0u;
    itemlimit_ = 0u;
  }
  exp_.Clear();
  wizard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHonorToExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(16)) goto parse_Exp;
        if (input->ExpectTag(24)) goto parse_Wizard;
        break;
      }
      
      // repeated uint32 Wizard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wizard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizard(value);
        if (input->ExpectTag(24)) goto parse_Wizard;
        if (input->ExpectTag(32)) goto parse_ExpLimit;
        break;
      }
      
      // optional uint32 ExpLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &explimit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ItemID;
        break;
      }
      
      // optional uint32 ItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ItemHonor;
        break;
      }
      
      // optional uint32 ItemHonor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemhonor_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ItemLimit;
        break;
      }
      
      // optional uint32 ItemLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemlimit_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHonorToExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBHonorToExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exp(i), output);
  }
  
  // repeated uint32 Wizard = 3;
  for (int i = 0; i < this->wizard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->wizard(i), output);
  }
  
  // optional uint32 ExpLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->explimit(), output);
  }
  
  // optional uint32 ItemID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemid(), output);
  }
  
  // optional uint32 ItemHonor = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->itemhonor(), output);
  }
  
  // optional uint32 ItemLimit = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->itemlimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHonorToExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exp(i), target);
  }
  
  // repeated uint32 Wizard = 3;
  for (int i = 0; i < this->wizard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->wizard(i), target);
  }
  
  // optional uint32 ExpLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->explimit(), target);
  }
  
  // optional uint32 ItemID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemid(), target);
  }
  
  // optional uint32 ItemHonor = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->itemhonor(), target);
  }
  
  // optional uint32 ItemLimit = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->itemlimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHonorToExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ExpLimit = 4;
    if (has_explimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->explimit());
    }
    
    // optional uint32 ItemID = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemHonor = 6;
    if (has_itemhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemhonor());
    }
    
    // optional uint32 ItemLimit = 7;
    if (has_itemlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemlimit());
    }
    
  }
  // repeated uint32 Exp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  // repeated uint32 Wizard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizard(i));
    }
    total_size += 1 * this->wizard_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBHonorToExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHonorToExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHonorToExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHonorToExp::MergeFrom(const PBHonorToExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  wizard_.MergeFrom(from.wizard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(3)) {
      set_explimit(from.explimit());
    }
    if (from._has_bit(4)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(5)) {
      set_itemhonor(from.itemhonor());
    }
    if (from._has_bit(6)) {
      set_itemlimit(from.itemlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHonorToExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorToExp::CopyFrom(const PBHonorToExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorToExp::Swap(PBHonorToExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    exp_.Swap(&other->exp_);
    wizard_.Swap(&other->wizard_);
    std::swap(explimit_, other->explimit_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemhonor_, other->itemhonor_);
    std::swap(itemlimit_, other->itemlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBHonorToExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBHonorToExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBHonorToExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBHonorToExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBHonorObtain::kTempIDFieldNumber;
const int PBHonorObtain::kInLimitFieldNumber;
const int PBHonorObtain::kOutLimitFieldNumber;
const int PBHonorObtain::kOutDieExpFieldNumber;
const int PBHonorObtain::kInDieExpFieldNumber;
const int PBHonorObtain::kBorderDieExpFieldNumber;
const int PBHonorObtain::kOutLowExpFieldNumber;
const int PBHonorObtain::kOutHighExpFieldNumber;
const int PBHonorObtain::kInLowExpFieldNumber;
const int PBHonorObtain::kInHighExpFieldNumber;
const int PBHonorObtain::kBorderLowExpFieldNumber;
const int PBHonorObtain::kBorderHighExpFieldNumber;
const int PBHonorObtain::kLostLowExpFieldNumber;
const int PBHonorObtain::kLostHighExpFieldNumber;
const int PBHonorObtain::kBasicExpFieldNumber;
#endif  // !_MSC_VER

PBHonorObtain::PBHonorObtain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHonorObtain::InitAsDefaultInstance() {}

PBHonorObtain::PBHonorObtain(const PBHonorObtain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHonorObtain::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  inlimit_ = 0u;
  outlimit_ = 0u;
  outdieexp_ = 0u;
  indieexp_ = 0u;
  borderdieexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHonorObtain::~PBHonorObtain() {
  SharedDtor();
}

void PBHonorObtain::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBHonorObtain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHonorObtain_descriptor_;
}

const PBHonorObtain& PBHonorObtain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBHonorObtain* PBHonorObtain::default_instance_ = NULL;

PBHonorObtain* PBHonorObtain::New() const {
  return new PBHonorObtain;
}

void PBHonorObtain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    inlimit_ = 0u;
    outlimit_ = 0u;
    outdieexp_ = 0u;
    indieexp_ = 0u;
    borderdieexp_ = 0u;
  }
  outlowexp_.Clear();
  outhighexp_.Clear();
  inlowexp_.Clear();
  inhighexp_.Clear();
  borderlowexp_.Clear();
  borderhighexp_.Clear();
  lostlowexp_.Clear();
  losthighexp_.Clear();
  basicexp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHonorObtain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_InLimit;
        break;
      }
      
      // optional uint32 InLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inlimit_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OutLimit;
        break;
      }
      
      // optional uint32 OutLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outlimit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OutDieExp;
        break;
      }
      
      // optional uint32 OutDieExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutDieExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outdieexp_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_InDieExp;
        break;
      }
      
      // optional uint32 InDieExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InDieExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &indieexp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BorderDieExp;
        break;
      }
      
      // optional uint32 BorderDieExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BorderDieExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &borderdieexp_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_OutLowExp;
        break;
      }
      
      // repeated uint32 OutLowExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutLowExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_outlowexp(value);
        if (input->ExpectTag(56)) goto parse_OutLowExp;
        if (input->ExpectTag(64)) goto parse_OutHighExp;
        break;
      }
      
      // repeated uint32 OutHighExp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutHighExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_outhighexp(value);
        if (input->ExpectTag(64)) goto parse_OutHighExp;
        if (input->ExpectTag(72)) goto parse_InLowExp;
        break;
      }
      
      // repeated uint32 InLowExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InLowExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_inlowexp(value);
        if (input->ExpectTag(72)) goto parse_InLowExp;
        if (input->ExpectTag(80)) goto parse_InHighExp;
        break;
      }
      
      // repeated uint32 InHighExp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InHighExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_inhighexp(value);
        if (input->ExpectTag(80)) goto parse_InHighExp;
        if (input->ExpectTag(88)) goto parse_BorderLowExp;
        break;
      }
      
      // repeated uint32 BorderLowExp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BorderLowExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_borderlowexp(value);
        if (input->ExpectTag(88)) goto parse_BorderLowExp;
        if (input->ExpectTag(96)) goto parse_BorderHighExp;
        break;
      }
      
      // repeated uint32 BorderHighExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BorderHighExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_borderhighexp(value);
        if (input->ExpectTag(96)) goto parse_BorderHighExp;
        if (input->ExpectTag(104)) goto parse_LostLowExp;
        break;
      }
      
      // repeated uint32 LostLowExp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostLowExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lostlowexp(value);
        if (input->ExpectTag(104)) goto parse_LostLowExp;
        if (input->ExpectTag(112)) goto parse_LostHighExp;
        break;
      }
      
      // repeated uint32 LostHighExp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LostHighExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_losthighexp(value);
        if (input->ExpectTag(112)) goto parse_LostHighExp;
        if (input->ExpectTag(120)) goto parse_BasicExp;
        break;
      }
      
      // repeated uint32 BasicExp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BasicExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_basicexp(value);
        if (input->ExpectTag(120)) goto parse_BasicExp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHonorObtain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBHonorObtain::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 InLimit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->inlimit(), output);
  }
  
  // optional uint32 OutLimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->outlimit(), output);
  }
  
  // optional uint32 OutDieExp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->outdieexp(), output);
  }
  
  // optional uint32 InDieExp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->indieexp(), output);
  }
  
  // optional uint32 BorderDieExp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->borderdieexp(), output);
  }
  
  // repeated uint32 OutLowExp = 7;
  for (int i = 0; i < this->outlowexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->outlowexp(i), output);
  }
  
  // repeated uint32 OutHighExp = 8;
  for (int i = 0; i < this->outhighexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->outhighexp(i), output);
  }
  
  // repeated uint32 InLowExp = 9;
  for (int i = 0; i < this->inlowexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->inlowexp(i), output);
  }
  
  // repeated uint32 InHighExp = 10;
  for (int i = 0; i < this->inhighexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->inhighexp(i), output);
  }
  
  // repeated uint32 BorderLowExp = 11;
  for (int i = 0; i < this->borderlowexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->borderlowexp(i), output);
  }
  
  // repeated uint32 BorderHighExp = 12;
  for (int i = 0; i < this->borderhighexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->borderhighexp(i), output);
  }
  
  // repeated uint32 LostLowExp = 13;
  for (int i = 0; i < this->lostlowexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->lostlowexp(i), output);
  }
  
  // repeated uint32 LostHighExp = 14;
  for (int i = 0; i < this->losthighexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->losthighexp(i), output);
  }
  
  // repeated uint32 BasicExp = 15;
  for (int i = 0; i < this->basicexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->basicexp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHonorObtain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 InLimit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->inlimit(), target);
  }
  
  // optional uint32 OutLimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->outlimit(), target);
  }
  
  // optional uint32 OutDieExp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->outdieexp(), target);
  }
  
  // optional uint32 InDieExp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->indieexp(), target);
  }
  
  // optional uint32 BorderDieExp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->borderdieexp(), target);
  }
  
  // repeated uint32 OutLowExp = 7;
  for (int i = 0; i < this->outlowexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->outlowexp(i), target);
  }
  
  // repeated uint32 OutHighExp = 8;
  for (int i = 0; i < this->outhighexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->outhighexp(i), target);
  }
  
  // repeated uint32 InLowExp = 9;
  for (int i = 0; i < this->inlowexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->inlowexp(i), target);
  }
  
  // repeated uint32 InHighExp = 10;
  for (int i = 0; i < this->inhighexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->inhighexp(i), target);
  }
  
  // repeated uint32 BorderLowExp = 11;
  for (int i = 0; i < this->borderlowexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->borderlowexp(i), target);
  }
  
  // repeated uint32 BorderHighExp = 12;
  for (int i = 0; i < this->borderhighexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->borderhighexp(i), target);
  }
  
  // repeated uint32 LostLowExp = 13;
  for (int i = 0; i < this->lostlowexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->lostlowexp(i), target);
  }
  
  // repeated uint32 LostHighExp = 14;
  for (int i = 0; i < this->losthighexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->losthighexp(i), target);
  }
  
  // repeated uint32 BasicExp = 15;
  for (int i = 0; i < this->basicexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->basicexp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHonorObtain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 InLimit = 2;
    if (has_inlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inlimit());
    }
    
    // optional uint32 OutLimit = 3;
    if (has_outlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outlimit());
    }
    
    // optional uint32 OutDieExp = 4;
    if (has_outdieexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outdieexp());
    }
    
    // optional uint32 InDieExp = 5;
    if (has_indieexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->indieexp());
    }
    
    // optional uint32 BorderDieExp = 6;
    if (has_borderdieexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->borderdieexp());
    }
    
  }
  // repeated uint32 OutLowExp = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->outlowexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->outlowexp(i));
    }
    total_size += 1 * this->outlowexp_size() + data_size;
  }
  
  // repeated uint32 OutHighExp = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->outhighexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->outhighexp(i));
    }
    total_size += 1 * this->outhighexp_size() + data_size;
  }
  
  // repeated uint32 InLowExp = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlowexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->inlowexp(i));
    }
    total_size += 1 * this->inlowexp_size() + data_size;
  }
  
  // repeated uint32 InHighExp = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->inhighexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->inhighexp(i));
    }
    total_size += 1 * this->inhighexp_size() + data_size;
  }
  
  // repeated uint32 BorderLowExp = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->borderlowexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->borderlowexp(i));
    }
    total_size += 1 * this->borderlowexp_size() + data_size;
  }
  
  // repeated uint32 BorderHighExp = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->borderhighexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->borderhighexp(i));
    }
    total_size += 1 * this->borderhighexp_size() + data_size;
  }
  
  // repeated uint32 LostLowExp = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->lostlowexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lostlowexp(i));
    }
    total_size += 1 * this->lostlowexp_size() + data_size;
  }
  
  // repeated uint32 LostHighExp = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->losthighexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->losthighexp(i));
    }
    total_size += 1 * this->losthighexp_size() + data_size;
  }
  
  // repeated uint32 BasicExp = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->basicexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->basicexp(i));
    }
    total_size += 1 * this->basicexp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBHonorObtain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHonorObtain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHonorObtain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHonorObtain::MergeFrom(const PBHonorObtain& from) {
  GOOGLE_CHECK_NE(&from, this);
  outlowexp_.MergeFrom(from.outlowexp_);
  outhighexp_.MergeFrom(from.outhighexp_);
  inlowexp_.MergeFrom(from.inlowexp_);
  inhighexp_.MergeFrom(from.inhighexp_);
  borderlowexp_.MergeFrom(from.borderlowexp_);
  borderhighexp_.MergeFrom(from.borderhighexp_);
  lostlowexp_.MergeFrom(from.lostlowexp_);
  losthighexp_.MergeFrom(from.losthighexp_);
  basicexp_.MergeFrom(from.basicexp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_inlimit(from.inlimit());
    }
    if (from._has_bit(2)) {
      set_outlimit(from.outlimit());
    }
    if (from._has_bit(3)) {
      set_outdieexp(from.outdieexp());
    }
    if (from._has_bit(4)) {
      set_indieexp(from.indieexp());
    }
    if (from._has_bit(5)) {
      set_borderdieexp(from.borderdieexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHonorObtain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorObtain::CopyFrom(const PBHonorObtain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorObtain::Swap(PBHonorObtain* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(inlimit_, other->inlimit_);
    std::swap(outlimit_, other->outlimit_);
    std::swap(outdieexp_, other->outdieexp_);
    std::swap(indieexp_, other->indieexp_);
    std::swap(borderdieexp_, other->borderdieexp_);
    outlowexp_.Swap(&other->outlowexp_);
    outhighexp_.Swap(&other->outhighexp_);
    inlowexp_.Swap(&other->inlowexp_);
    inhighexp_.Swap(&other->inhighexp_);
    borderlowexp_.Swap(&other->borderlowexp_);
    borderhighexp_.Swap(&other->borderhighexp_);
    lostlowexp_.Swap(&other->lostlowexp_);
    losthighexp_.Swap(&other->losthighexp_);
    basicexp_.Swap(&other->basicexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBHonorObtain::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBHonorObtain::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBHonorObtain::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBHonorObtain_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDiploidTable::kTempIDFieldNumber;
const int PBDiploidTable::kTotalTimeFieldNumber;
const int PBDiploidTable::kValidMaxFieldNumber;
const int PBDiploidTable::kTypeNumberFieldNumber;
const int PBDiploidTable::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBDiploidTable::PBDiploidTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDiploidTable::InitAsDefaultInstance() {}

PBDiploidTable::PBDiploidTable(const PBDiploidTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDiploidTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  totaltime_ = 0u;
  validmax_ = 0u;
  typenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDiploidTable::~PBDiploidTable() {
  SharedDtor();
}

void PBDiploidTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDiploidTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDiploidTable_descriptor_;
}

const PBDiploidTable& PBDiploidTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDiploidTable* PBDiploidTable::default_instance_ = NULL;

PBDiploidTable* PBDiploidTable::New() const {
  return new PBDiploidTable;
}

void PBDiploidTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    totaltime_ = 0u;
    validmax_ = 0u;
    typenumber_ = 0u;
  }
  buffid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDiploidTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TotalTime;
        break;
      }
      
      // optional uint32 TotalTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totaltime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ValidMax;
        break;
      }
      
      // optional uint32 ValidMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validmax_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TypeNumber;
        break;
      }
      
      // optional uint32 TypeNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TypeNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &typenumber_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BuffID;
        break;
      }
      
      // repeated uint32 BuffID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_buffid(value);
        if (input->ExpectTag(40)) goto parse_BuffID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDiploidTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDiploidTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 TotalTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->totaltime(), output);
  }
  
  // optional uint32 ValidMax = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->validmax(), output);
  }
  
  // optional uint32 TypeNumber = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->typenumber(), output);
  }
  
  // repeated uint32 BuffID = 5;
  for (int i = 0; i < this->buffid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->buffid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDiploidTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 TotalTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->totaltime(), target);
  }
  
  // optional uint32 ValidMax = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->validmax(), target);
  }
  
  // optional uint32 TypeNumber = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->typenumber(), target);
  }
  
  // repeated uint32 BuffID = 5;
  for (int i = 0; i < this->buffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->buffid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDiploidTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 TotalTime = 2;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totaltime());
    }
    
    // optional uint32 ValidMax = 3;
    if (has_validmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validmax());
    }
    
    // optional uint32 TypeNumber = 4;
    if (has_typenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->typenumber());
    }
    
  }
  // repeated uint32 BuffID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->buffid(i));
    }
    total_size += 1 * this->buffid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDiploidTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDiploidTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDiploidTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDiploidTable::MergeFrom(const PBDiploidTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffid_.MergeFrom(from.buffid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_totaltime(from.totaltime());
    }
    if (from._has_bit(2)) {
      set_validmax(from.validmax());
    }
    if (from._has_bit(3)) {
      set_typenumber(from.typenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDiploidTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDiploidTable::CopyFrom(const PBDiploidTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDiploidTable::Swap(PBDiploidTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(validmax_, other->validmax_);
    std::swap(typenumber_, other->typenumber_);
    buffid_.Swap(&other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDiploidTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDiploidTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDiploidTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDiploidTable_reflection_;
}

// ===================================================================

const ::std::string PBRedStone::_default_magiciconname_;
#ifndef _MSC_VER
const int PBRedStone::kBaseItemFieldNumber;
const int PBRedStone::kMagicIconNameFieldNumber;
const int PBRedStone::kGuageTimeFieldNumber;
const int PBRedStone::kMagicSustainTimeFieldNumber;
const int PBRedStone::kExpTimeFieldNumber;
const int PBRedStone::kRadiusFieldNumber;
const int PBRedStone::kRedStoneTypeFieldNumber;
const int PBRedStone::kFamilyExpRateFieldNumber;
const int PBRedStone::kExpTableIDFieldNumber;
const int PBRedStone::kNumberEffectedFieldNumber;
const int PBRedStone::kMetierIDFieldNumber;
const int PBRedStone::kKeyBuffIDFieldNumber;
const int PBRedStone::kEncBuffIDFieldNumber;
const int PBRedStone::kEncPercentFieldNumber;
const int PBRedStone::kIsEternalFieldNumber;
#endif  // !_MSC_VER

PBRedStone::PBRedStone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRedStone::InitAsDefaultInstance() {  baseitem_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBRedStone::PBRedStone(const PBRedStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRedStone::SharedCtor() {
  _cached_size_ = 0;
  baseitem_ = NULL;
  magiciconname_ = const_cast< ::std::string*>(&_default_magiciconname_);
  guagetime_ = 0u;
  magicsustaintime_ = 0u;
  exptime_ = 0u;
  radius_ = 0u;
  redstonetype_ = 0u;
  familyexprate_ = 0u;
  exptableid_ = 0u;
  numbereffected_ = 0u;
  metierid_ = 0u;
  iseternal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRedStone::~PBRedStone() {
  SharedDtor();
}

void PBRedStone::SharedDtor() {
  if (magiciconname_ != &_default_magiciconname_) {
    delete magiciconname_;
  }
  if (this != default_instance_) {
    delete baseitem_;
  }
}

const ::google::protobuf::Descriptor* PBRedStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRedStone_descriptor_;
}

const PBRedStone& PBRedStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBRedStone* PBRedStone::default_instance_ = NULL;

PBRedStone* PBRedStone::New() const {
  return new PBRedStone;
}

void PBRedStone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseitem_ != NULL) baseitem_->::PBItemBase::Clear();
    }
    if (_has_bit(1)) {
      if (magiciconname_ != &_default_magiciconname_) {
        magiciconname_->clear();
      }
    }
    guagetime_ = 0u;
    magicsustaintime_ = 0u;
    exptime_ = 0u;
    radius_ = 0u;
    redstonetype_ = 0u;
    familyexprate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exptableid_ = 0u;
    numbereffected_ = 0u;
    metierid_ = 0u;
    iseternal_ = 0u;
  }
  keybuffid_.Clear();
  encbuffid_.Clear();
  encpercent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRedStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseitem()));
        if (input->ExpectTag(18)) goto parse_MagicIconName;
        break;
      }
      
      // optional string MagicIconName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MagicIconName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_magiciconname()));
        if (input->ExpectTag(24)) goto parse_GuageTime;
        break;
      }
      
      // optional uint32 GuageTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GuageTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &guagetime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MagicSustainTime;
        break;
      }
      
      // optional uint32 MagicSustainTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MagicSustainTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &magicsustaintime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ExpTime;
        break;
      }
      
      // optional uint32 ExpTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exptime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Radius;
        break;
      }
      
      // optional uint32 Radius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Radius:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &radius_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RedStoneType;
        break;
      }
      
      // optional uint32 RedStoneType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedStoneType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redstonetype_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_FamilyExpRate;
        break;
      }
      
      // optional uint32 FamilyExpRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyExpRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyexprate_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ExpTableID;
        break;
      }
      
      // optional uint32 ExpTableID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exptableid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_NumberEffected;
        break;
      }
      
      // optional uint32 NumberEffected = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NumberEffected:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &numbereffected_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_KeyBuffID;
        break;
      }
      
      // repeated uint32 KeyBuffID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KeyBuffID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_keybuffid(value);
        if (input->ExpectTag(96)) goto parse_KeyBuffID;
        if (input->ExpectTag(104)) goto parse_EncBuffID;
        break;
      }
      
      // repeated uint32 EncBuffID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncBuffID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_encbuffid(value);
        if (input->ExpectTag(104)) goto parse_EncBuffID;
        if (input->ExpectTag(112)) goto parse_EncPercent;
        break;
      }
      
      // repeated uint32 EncPercent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EncPercent:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_encpercent(value);
        if (input->ExpectTag(112)) goto parse_EncPercent;
        if (input->ExpectTag(120)) goto parse_IsEternal;
        break;
      }
      
      // optional uint32 IsEternal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsEternal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &iseternal_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRedStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRedStone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseItem = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseitem(), output);
  }
  
  // optional string MagicIconName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->magiciconname(), output);
  }
  
  // optional uint32 GuageTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->guagetime(), output);
  }
  
  // optional uint32 MagicSustainTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->magicsustaintime(), output);
  }
  
  // optional uint32 ExpTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->exptime(), output);
  }
  
  // optional uint32 Radius = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->radius(), output);
  }
  
  // optional uint32 RedStoneType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->redstonetype(), output);
  }
  
  // optional uint32 FamilyExpRate = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->familyexprate(), output);
  }
  
  // optional uint32 ExpTableID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->exptableid(), output);
  }
  
  // optional uint32 NumberEffected = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->numbereffected(), output);
  }
  
  // optional uint32 MetierID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->metierid(), output);
  }
  
  // repeated uint32 KeyBuffID = 12;
  for (int i = 0; i < this->keybuffid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->keybuffid(i), output);
  }
  
  // repeated uint32 EncBuffID = 13;
  for (int i = 0; i < this->encbuffid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->encbuffid(i), output);
  }
  
  // repeated uint32 EncPercent = 14;
  for (int i = 0; i < this->encpercent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->encpercent(i), output);
  }
  
  // optional uint32 IsEternal = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->iseternal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRedStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseItem = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseitem(), target);
  }
  
  // optional string MagicIconName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->magiciconname(), target);
  }
  
  // optional uint32 GuageTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->guagetime(), target);
  }
  
  // optional uint32 MagicSustainTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->magicsustaintime(), target);
  }
  
  // optional uint32 ExpTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->exptime(), target);
  }
  
  // optional uint32 Radius = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->radius(), target);
  }
  
  // optional uint32 RedStoneType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->redstonetype(), target);
  }
  
  // optional uint32 FamilyExpRate = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->familyexprate(), target);
  }
  
  // optional uint32 ExpTableID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->exptableid(), target);
  }
  
  // optional uint32 NumberEffected = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->numbereffected(), target);
  }
  
  // optional uint32 MetierID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->metierid(), target);
  }
  
  // repeated uint32 KeyBuffID = 12;
  for (int i = 0; i < this->keybuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->keybuffid(i), target);
  }
  
  // repeated uint32 EncBuffID = 13;
  for (int i = 0; i < this->encbuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->encbuffid(i), target);
  }
  
  // repeated uint32 EncPercent = 14;
  for (int i = 0; i < this->encpercent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->encpercent(i), target);
  }
  
  // optional uint32 IsEternal = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->iseternal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRedStone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseItem = 1;
    if (has_baseitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseitem());
    }
    
    // optional string MagicIconName = 2;
    if (has_magiciconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->magiciconname());
    }
    
    // optional uint32 GuageTime = 3;
    if (has_guagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->guagetime());
    }
    
    // optional uint32 MagicSustainTime = 4;
    if (has_magicsustaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->magicsustaintime());
    }
    
    // optional uint32 ExpTime = 5;
    if (has_exptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exptime());
    }
    
    // optional uint32 Radius = 6;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->radius());
    }
    
    // optional uint32 RedStoneType = 7;
    if (has_redstonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redstonetype());
    }
    
    // optional uint32 FamilyExpRate = 8;
    if (has_familyexprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyexprate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ExpTableID = 9;
    if (has_exptableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exptableid());
    }
    
    // optional uint32 NumberEffected = 10;
    if (has_numbereffected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->numbereffected());
    }
    
    // optional uint32 MetierID = 11;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 IsEternal = 15;
    if (has_iseternal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->iseternal());
    }
    
  }
  // repeated uint32 KeyBuffID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->keybuffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->keybuffid(i));
    }
    total_size += 1 * this->keybuffid_size() + data_size;
  }
  
  // repeated uint32 EncBuffID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->encbuffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->encbuffid(i));
    }
    total_size += 1 * this->encbuffid_size() + data_size;
  }
  
  // repeated uint32 EncPercent = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->encpercent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->encpercent(i));
    }
    total_size += 1 * this->encpercent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRedStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRedStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRedStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRedStone::MergeFrom(const PBRedStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  keybuffid_.MergeFrom(from.keybuffid_);
  encbuffid_.MergeFrom(from.encbuffid_);
  encpercent_.MergeFrom(from.encpercent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseitem()->::PBItemBase::MergeFrom(from.baseitem());
    }
    if (from._has_bit(1)) {
      set_magiciconname(from.magiciconname());
    }
    if (from._has_bit(2)) {
      set_guagetime(from.guagetime());
    }
    if (from._has_bit(3)) {
      set_magicsustaintime(from.magicsustaintime());
    }
    if (from._has_bit(4)) {
      set_exptime(from.exptime());
    }
    if (from._has_bit(5)) {
      set_radius(from.radius());
    }
    if (from._has_bit(6)) {
      set_redstonetype(from.redstonetype());
    }
    if (from._has_bit(7)) {
      set_familyexprate(from.familyexprate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_exptableid(from.exptableid());
    }
    if (from._has_bit(9)) {
      set_numbereffected(from.numbereffected());
    }
    if (from._has_bit(10)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(14)) {
      set_iseternal(from.iseternal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRedStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRedStone::CopyFrom(const PBRedStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRedStone::Swap(PBRedStone* other) {
  if (other != this) {
    std::swap(baseitem_, other->baseitem_);
    std::swap(magiciconname_, other->magiciconname_);
    std::swap(guagetime_, other->guagetime_);
    std::swap(magicsustaintime_, other->magicsustaintime_);
    std::swap(exptime_, other->exptime_);
    std::swap(radius_, other->radius_);
    std::swap(redstonetype_, other->redstonetype_);
    std::swap(familyexprate_, other->familyexprate_);
    std::swap(exptableid_, other->exptableid_);
    std::swap(numbereffected_, other->numbereffected_);
    std::swap(metierid_, other->metierid_);
    keybuffid_.Swap(&other->keybuffid_);
    encbuffid_.Swap(&other->encbuffid_);
    encpercent_.Swap(&other->encpercent_);
    std::swap(iseternal_, other->iseternal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRedStone::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRedStone::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRedStone::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRedStone_reflection_;
}

// ===================================================================

const ::std::string PBRedStoneExpTable::_default_effectname_;
#ifndef _MSC_VER
const int PBRedStoneExpTable::kTempIDFieldNumber;
const int PBRedStoneExpTable::kExpFieldNumber;
const int PBRedStoneExpTable::kEffectNameFieldNumber;
#endif  // !_MSC_VER

PBRedStoneExpTable::PBRedStoneExpTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRedStoneExpTable::InitAsDefaultInstance() {}

PBRedStoneExpTable::PBRedStoneExpTable(const PBRedStoneExpTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRedStoneExpTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  effectname_ = const_cast< ::std::string*>(&_default_effectname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRedStoneExpTable::~PBRedStoneExpTable() {
  SharedDtor();
}

void PBRedStoneExpTable::SharedDtor() {
  if (effectname_ != &_default_effectname_) {
    delete effectname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRedStoneExpTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRedStoneExpTable_descriptor_;
}

const PBRedStoneExpTable& PBRedStoneExpTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBRedStoneExpTable* PBRedStoneExpTable::default_instance_ = NULL;

PBRedStoneExpTable* PBRedStoneExpTable::New() const {
  return new PBRedStoneExpTable;
}

void PBRedStoneExpTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(2)) {
      if (effectname_ != &_default_effectname_) {
        effectname_->clear();
      }
    }
  }
  exp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRedStoneExpTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(16)) goto parse_Exp;
        if (input->ExpectTag(26)) goto parse_EffectName;
        break;
      }
      
      // optional string EffectName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EffectName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_effectname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRedStoneExpTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRedStoneExpTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exp(i), output);
  }
  
  // optional string EffectName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->effectname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRedStoneExpTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exp(i), target);
  }
  
  // optional string EffectName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->effectname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRedStoneExpTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string EffectName = 3;
    if (has_effectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->effectname());
    }
    
  }
  // repeated uint32 Exp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRedStoneExpTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRedStoneExpTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRedStoneExpTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRedStoneExpTable::MergeFrom(const PBRedStoneExpTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_effectname(from.effectname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRedStoneExpTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRedStoneExpTable::CopyFrom(const PBRedStoneExpTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRedStoneExpTable::Swap(PBRedStoneExpTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    exp_.Swap(&other->exp_);
    std::swap(effectname_, other->effectname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRedStoneExpTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRedStoneExpTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRedStoneExpTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRedStoneExpTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBReliveTable::kTempIDFieldNumber;
const int PBReliveTable::kFeeFieldNumber;
const int PBReliveTable::kRateFieldNumber;
#endif  // !_MSC_VER

PBReliveTable::PBReliveTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBReliveTable::InitAsDefaultInstance() {}

PBReliveTable::PBReliveTable(const PBReliveTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBReliveTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBReliveTable::~PBReliveTable() {
  SharedDtor();
}

void PBReliveTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBReliveTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBReliveTable_descriptor_;
}

const PBReliveTable& PBReliveTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBReliveTable* PBReliveTable::default_instance_ = NULL;

PBReliveTable* PBReliveTable::New() const {
  return new PBReliveTable;
}

void PBReliveTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    rate_ = 0u;
  }
  fee_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBReliveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Fee;
        break;
      }
      
      // repeated uint32 Fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Fee:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fee(value);
        if (input->ExpectTag(16)) goto parse_Fee;
        if (input->ExpectTag(24)) goto parse_Rate;
        break;
      }
      
      // optional uint32 Rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rate_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBReliveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBReliveTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Fee = 2;
  for (int i = 0; i < this->fee_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fee(i), output);
  }
  
  // optional uint32 Rate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBReliveTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Fee = 2;
  for (int i = 0; i < this->fee_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fee(i), target);
  }
  
  // optional uint32 Rate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBReliveTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 Rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rate());
    }
    
  }
  // repeated uint32 Fee = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fee_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fee(i));
    }
    total_size += 1 * this->fee_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBReliveTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBReliveTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBReliveTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBReliveTable::MergeFrom(const PBReliveTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  fee_.MergeFrom(from.fee_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBReliveTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBReliveTable::CopyFrom(const PBReliveTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBReliveTable::Swap(PBReliveTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    fee_.Swap(&other->fee_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBReliveTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBReliveTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBReliveTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBReliveTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBQuestionExp::kTempIDFieldNumber;
const int PBQuestionExp::kNpcQuestionNumFieldNumber;
const int PBQuestionExp::kExpFieldNumber;
const int PBQuestionExp::kNpcExpAddRateFieldNumber;
#endif  // !_MSC_VER

PBQuestionExp::PBQuestionExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBQuestionExp::InitAsDefaultInstance() {}

PBQuestionExp::PBQuestionExp(const PBQuestionExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBQuestionExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  npcquestionnum_ = 0u;
  npcexpaddrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBQuestionExp::~PBQuestionExp() {
  SharedDtor();
}

void PBQuestionExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBQuestionExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBQuestionExp_descriptor_;
}

const PBQuestionExp& PBQuestionExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBQuestionExp* PBQuestionExp::default_instance_ = NULL;

PBQuestionExp* PBQuestionExp::New() const {
  return new PBQuestionExp;
}

void PBQuestionExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    npcquestionnum_ = 0u;
    npcexpaddrate_ = 0u;
  }
  exp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBQuestionExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcQuestionNum;
        break;
      }
      
      // optional uint32 NpcQuestionNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcQuestionNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcquestionnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(24)) goto parse_Exp;
        if (input->ExpectTag(32)) goto parse_NpcExpAddRate;
        break;
      }
      
      // optional uint32 NpcExpAddRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcExpAddRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcexpaddrate_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBQuestionExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBQuestionExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 NpcQuestionNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcquestionnum(), output);
  }
  
  // repeated uint32 Exp = 3;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->exp(i), output);
  }
  
  // optional uint32 NpcExpAddRate = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcexpaddrate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBQuestionExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 NpcQuestionNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcquestionnum(), target);
  }
  
  // repeated uint32 Exp = 3;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->exp(i), target);
  }
  
  // optional uint32 NpcExpAddRate = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcexpaddrate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBQuestionExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 NpcQuestionNum = 2;
    if (has_npcquestionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcquestionnum());
    }
    
    // optional uint32 NpcExpAddRate = 4;
    if (has_npcexpaddrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcexpaddrate());
    }
    
  }
  // repeated uint32 Exp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBQuestionExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBQuestionExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBQuestionExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBQuestionExp::MergeFrom(const PBQuestionExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_npcquestionnum(from.npcquestionnum());
    }
    if (from._has_bit(3)) {
      set_npcexpaddrate(from.npcexpaddrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBQuestionExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQuestionExp::CopyFrom(const PBQuestionExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQuestionExp::Swap(PBQuestionExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(npcquestionnum_, other->npcquestionnum_);
    exp_.Swap(&other->exp_);
    std::swap(npcexpaddrate_, other->npcexpaddrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBQuestionExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBQuestionExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBQuestionExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBQuestionExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBindChargeTable::kTempIDFieldNumber;
const int PBBindChargeTable::kMoneyBindNeedFieldNumber;
const int PBBindChargeTable::kCanBindUseBMFieldNumber;
const int PBBindChargeTable::kMoneyUnBindNeedFieldNumber;
const int PBBindChargeTable::kUnBindUseBMFieldNumber;
const int PBBindChargeTable::kMoneyResumeBindFieldNumber;
const int PBBindChargeTable::kCanResumeBindFieldNumber;
#endif  // !_MSC_VER

PBBindChargeTable::PBBindChargeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBindChargeTable::InitAsDefaultInstance() {}

PBBindChargeTable::PBBindChargeTable(const PBBindChargeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBindChargeTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  moneybindneed_ = 0u;
  canbindusebm_ = 0u;
  moneyunbindneed_ = 0u;
  unbindusebm_ = 0u;
  moneyresumebind_ = 0u;
  canresumebind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBindChargeTable::~PBBindChargeTable() {
  SharedDtor();
}

void PBBindChargeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBindChargeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBindChargeTable_descriptor_;
}

const PBBindChargeTable& PBBindChargeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBindChargeTable* PBBindChargeTable::default_instance_ = NULL;

PBBindChargeTable* PBBindChargeTable::New() const {
  return new PBBindChargeTable;
}

void PBBindChargeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    moneybindneed_ = 0u;
    canbindusebm_ = 0u;
    moneyunbindneed_ = 0u;
    unbindusebm_ = 0u;
    moneyresumebind_ = 0u;
    canresumebind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBindChargeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MoneyBindNeed;
        break;
      }
      
      // optional uint32 MoneyBindNeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyBindNeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneybindneed_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CanBindUseBM;
        break;
      }
      
      // optional uint32 CanBindUseBM = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanBindUseBM:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canbindusebm_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MoneyUnBindNeed;
        break;
      }
      
      // optional uint32 MoneyUnBindNeed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyUnBindNeed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyunbindneed_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UnBindUseBM;
        break;
      }
      
      // optional uint32 UnBindUseBM = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UnBindUseBM:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unbindusebm_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MoneyResumeBind;
        break;
      }
      
      // optional uint32 MoneyResumeBind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyResumeBind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyresumebind_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CanResumeBind;
        break;
      }
      
      // optional uint32 CanResumeBind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanResumeBind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canresumebind_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBindChargeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBindChargeTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 MoneyBindNeed = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->moneybindneed(), output);
  }
  
  // optional uint32 CanBindUseBM = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->canbindusebm(), output);
  }
  
  // optional uint32 MoneyUnBindNeed = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->moneyunbindneed(), output);
  }
  
  // optional uint32 UnBindUseBM = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->unbindusebm(), output);
  }
  
  // optional uint32 MoneyResumeBind = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->moneyresumebind(), output);
  }
  
  // optional uint32 CanResumeBind = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->canresumebind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBindChargeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 MoneyBindNeed = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->moneybindneed(), target);
  }
  
  // optional uint32 CanBindUseBM = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->canbindusebm(), target);
  }
  
  // optional uint32 MoneyUnBindNeed = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->moneyunbindneed(), target);
  }
  
  // optional uint32 UnBindUseBM = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->unbindusebm(), target);
  }
  
  // optional uint32 MoneyResumeBind = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->moneyresumebind(), target);
  }
  
  // optional uint32 CanResumeBind = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->canresumebind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBindChargeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MoneyBindNeed = 2;
    if (has_moneybindneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneybindneed());
    }
    
    // optional uint32 CanBindUseBM = 3;
    if (has_canbindusebm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canbindusebm());
    }
    
    // optional uint32 MoneyUnBindNeed = 4;
    if (has_moneyunbindneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyunbindneed());
    }
    
    // optional uint32 UnBindUseBM = 5;
    if (has_unbindusebm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unbindusebm());
    }
    
    // optional uint32 MoneyResumeBind = 6;
    if (has_moneyresumebind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyresumebind());
    }
    
    // optional uint32 CanResumeBind = 7;
    if (has_canresumebind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canresumebind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBindChargeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBindChargeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBindChargeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBindChargeTable::MergeFrom(const PBBindChargeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_moneybindneed(from.moneybindneed());
    }
    if (from._has_bit(2)) {
      set_canbindusebm(from.canbindusebm());
    }
    if (from._has_bit(3)) {
      set_moneyunbindneed(from.moneyunbindneed());
    }
    if (from._has_bit(4)) {
      set_unbindusebm(from.unbindusebm());
    }
    if (from._has_bit(5)) {
      set_moneyresumebind(from.moneyresumebind());
    }
    if (from._has_bit(6)) {
      set_canresumebind(from.canresumebind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBindChargeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBindChargeTable::CopyFrom(const PBBindChargeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBindChargeTable::Swap(PBBindChargeTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(moneybindneed_, other->moneybindneed_);
    std::swap(canbindusebm_, other->canbindusebm_);
    std::swap(moneyunbindneed_, other->moneyunbindneed_);
    std::swap(unbindusebm_, other->unbindusebm_);
    std::swap(moneyresumebind_, other->moneyresumebind_);
    std::swap(canresumebind_, other->canresumebind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBindChargeTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBindChargeTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBindChargeTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBindChargeTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMinePos::kMapIDFieldNumber;
const int PBMinePos::kPosXFieldNumber;
const int PBMinePos::kPosYFieldNumber;
const int PBMinePos::kProbabilityFieldNumber;
#endif  // !_MSC_VER

PBMinePos::PBMinePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMinePos::InitAsDefaultInstance() {}

PBMinePos::PBMinePos(const PBMinePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMinePos::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  probability_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMinePos::~PBMinePos() {
  SharedDtor();
}

void PBMinePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMinePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMinePos_descriptor_;
}

const PBMinePos& PBMinePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMinePos* PBMinePos::default_instance_ = NULL;

PBMinePos* PBMinePos::New() const {
  return new PBMinePos;
}

void PBMinePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    probability_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMinePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Probability;
        break;
      }
      
      // optional uint32 Probability = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probability_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMinePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMinePos::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->posx(), output);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posy(), output);
  }
  
  // optional uint32 Probability = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->probability(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMinePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->posx(), target);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posy(), target);
  }
  
  // optional uint32 Probability = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->probability(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMinePos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Probability = 4;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probability());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMinePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMinePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMinePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMinePos::MergeFrom(const PBMinePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_posx(from.posx());
    }
    if (from._has_bit(2)) {
      set_posy(from.posy());
    }
    if (from._has_bit(3)) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMinePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMinePos::CopyFrom(const PBMinePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMinePos::Swap(PBMinePos* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMinePos::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMinePos::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMinePos::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMinePos_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMineEvent::kEventIDFieldNumber;
const int PBMineEvent::kTouchRateFieldNumber;
#endif  // !_MSC_VER

PBMineEvent::PBMineEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMineEvent::InitAsDefaultInstance() {}

PBMineEvent::PBMineEvent(const PBMineEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMineEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  touchrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMineEvent::~PBMineEvent() {
  SharedDtor();
}

void PBMineEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMineEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMineEvent_descriptor_;
}

const PBMineEvent& PBMineEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMineEvent* PBMineEvent::default_instance_ = NULL;

PBMineEvent* PBMineEvent::New() const {
  return new PBMineEvent;
}

void PBMineEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    touchrate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMineEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EventID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eventid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TouchRate;
        break;
      }
      
      // optional uint32 TouchRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TouchRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &touchrate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMineEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMineEvent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->eventid(), output);
  }
  
  // optional uint32 TouchRate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->touchrate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMineEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->eventid(), target);
  }
  
  // optional uint32 TouchRate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->touchrate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMineEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EventID = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eventid());
    }
    
    // optional uint32 TouchRate = 2;
    if (has_touchrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->touchrate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMineEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMineEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMineEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMineEvent::MergeFrom(const PBMineEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_eventid(from.eventid());
    }
    if (from._has_bit(1)) {
      set_touchrate(from.touchrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMineEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineEvent::CopyFrom(const PBMineEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMineEvent::Swap(PBMineEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(touchrate_, other->touchrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMineEvent::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMineEvent::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMineEvent::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMineEvent_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemMineMap::kBaseInfoFieldNumber;
const int PBItemMineMap::kMinePosFieldNumber;
const int PBItemMineMap::kMineEventFieldNumber;
const int PBItemMineMap::kRadiusFieldNumber;
const int PBItemMineMap::kDropTableFieldNumber;
const int PBItemMineMap::kDecBuffFieldNumber;
const int PBItemMineMap::kOgreIDFieldNumber;
const int PBItemMineMap::kOgreNumFieldNumber;
const int PBItemMineMap::kMapIDFieldNumber;
const int PBItemMineMap::kPosXFieldNumber;
const int PBItemMineMap::kPosYFieldNumber;
const int PBItemMineMap::kSpecialFieldNumber;
#endif  // !_MSC_VER

PBItemMineMap::PBItemMineMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemMineMap::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemMineMap::PBItemMineMap(const PBItemMineMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemMineMap::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  radius_ = 0u;
  droptable_ = 0u;
  decbuff_ = 0u;
  ogreid_ = 0u;
  ogrenum_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  special_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemMineMap::~PBItemMineMap() {
  SharedDtor();
}

void PBItemMineMap::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemMineMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemMineMap_descriptor_;
}

const PBItemMineMap& PBItemMineMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemMineMap* PBItemMineMap::default_instance_ = NULL;

PBItemMineMap* PBItemMineMap::New() const {
  return new PBItemMineMap;
}

void PBItemMineMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    radius_ = 0u;
    droptable_ = 0u;
    decbuff_ = 0u;
    ogreid_ = 0u;
    ogrenum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    special_ = 0u;
  }
  minepos_.Clear();
  mineevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemMineMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(18)) goto parse_MinePos;
        break;
      }
      
      // repeated .PBMinePos MinePos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MinePos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_minepos()));
        if (input->ExpectTag(18)) goto parse_MinePos;
        if (input->ExpectTag(26)) goto parse_MineEvent;
        break;
      }
      
      // repeated .PBMineEvent MineEvent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MineEvent:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mineevent()));
        if (input->ExpectTag(26)) goto parse_MineEvent;
        if (input->ExpectTag(32)) goto parse_Radius;
        break;
      }
      
      // optional uint32 Radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Radius:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &radius_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DropTable;
        break;
      }
      
      // optional uint32 DropTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropTable:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &droptable_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_DecBuff;
        break;
      }
      
      // optional uint32 DecBuff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DecBuff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &decbuff_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_OgreID;
        break;
      }
      
      // optional uint32 OgreID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogreid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_OgreNum;
        break;
      }
      
      // optional uint32 OgreNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogrenum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Special;
        break;
      }
      
      // optional uint32 Special = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Special:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &special_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemMineMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemMineMap::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // repeated .PBMinePos MinePos = 2;
  for (int i = 0; i < this->minepos_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->minepos(i), output);
  }
  
  // repeated .PBMineEvent MineEvent = 3;
  for (int i = 0; i < this->mineevent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->mineevent(i), output);
  }
  
  // optional uint32 Radius = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->radius(), output);
  }
  
  // optional uint32 DropTable = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->droptable(), output);
  }
  
  // optional uint32 DecBuff = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->decbuff(), output);
  }
  
  // optional uint32 OgreID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->ogreid(), output);
  }
  
  // optional uint32 OgreNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->ogrenum(), output);
  }
  
  // optional uint32 MapID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->mapid(), output);
  }
  
  // optional uint32 PosX = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->posx(), output);
  }
  
  // optional uint32 PosY = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->posy(), output);
  }
  
  // optional uint32 Special = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->special(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemMineMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // repeated .PBMinePos MinePos = 2;
  for (int i = 0; i < this->minepos_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->minepos(i), target);
  }
  
  // repeated .PBMineEvent MineEvent = 3;
  for (int i = 0; i < this->mineevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->mineevent(i), target);
  }
  
  // optional uint32 Radius = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->radius(), target);
  }
  
  // optional uint32 DropTable = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->droptable(), target);
  }
  
  // optional uint32 DecBuff = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->decbuff(), target);
  }
  
  // optional uint32 OgreID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->ogreid(), target);
  }
  
  // optional uint32 OgreNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->ogrenum(), target);
  }
  
  // optional uint32 MapID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->mapid(), target);
  }
  
  // optional uint32 PosX = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->posx(), target);
  }
  
  // optional uint32 PosY = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->posy(), target);
  }
  
  // optional uint32 Special = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->special(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemMineMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Radius = 4;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->radius());
    }
    
    // optional uint32 DropTable = 5;
    if (has_droptable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->droptable());
    }
    
    // optional uint32 DecBuff = 6;
    if (has_decbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->decbuff());
    }
    
    // optional uint32 OgreID = 7;
    if (has_ogreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogreid());
    }
    
    // optional uint32 OgreNum = 8;
    if (has_ogrenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogrenum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MapID = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 10;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 11;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Special = 12;
    if (has_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->special());
    }
    
  }
  // repeated .PBMinePos MinePos = 2;
  total_size += 1 * this->minepos_size();
  for (int i = 0; i < this->minepos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->minepos(i));
  }
  
  // repeated .PBMineEvent MineEvent = 3;
  total_size += 1 * this->mineevent_size();
  for (int i = 0; i < this->mineevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mineevent(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemMineMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemMineMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemMineMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemMineMap::MergeFrom(const PBItemMineMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  minepos_.MergeFrom(from.minepos_);
  mineevent_.MergeFrom(from.mineevent_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(3)) {
      set_radius(from.radius());
    }
    if (from._has_bit(4)) {
      set_droptable(from.droptable());
    }
    if (from._has_bit(5)) {
      set_decbuff(from.decbuff());
    }
    if (from._has_bit(6)) {
      set_ogreid(from.ogreid());
    }
    if (from._has_bit(7)) {
      set_ogrenum(from.ogrenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(9)) {
      set_posx(from.posx());
    }
    if (from._has_bit(10)) {
      set_posy(from.posy());
    }
    if (from._has_bit(11)) {
      set_special(from.special());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemMineMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMineMap::CopyFrom(const PBItemMineMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMineMap::Swap(PBItemMineMap* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    minepos_.Swap(&other->minepos_);
    mineevent_.Swap(&other->mineevent_);
    std::swap(radius_, other->radius_);
    std::swap(droptable_, other->droptable_);
    std::swap(decbuff_, other->decbuff_);
    std::swap(ogreid_, other->ogreid_);
    std::swap(ogrenum_, other->ogrenum_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(special_, other->special_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemMineMap::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemMineMap::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemMineMap::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemMineMap_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRelatively_Pos::kXFieldNumber;
const int PBRelatively_Pos::kYFieldNumber;
#endif  // !_MSC_VER

PBRelatively_Pos::PBRelatively_Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRelatively_Pos::InitAsDefaultInstance() {}

PBRelatively_Pos::PBRelatively_Pos(const PBRelatively_Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRelatively_Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRelatively_Pos::~PBRelatively_Pos() {
  SharedDtor();
}

void PBRelatively_Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRelatively_Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRelatively_Pos_descriptor_;
}

const PBRelatively_Pos& PBRelatively_Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBRelatively_Pos* PBRelatively_Pos::default_instance_ = NULL;

PBRelatively_Pos* PBRelatively_Pos::New() const {
  return new PBRelatively_Pos;
}

void PBRelatively_Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRelatively_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &x_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }
      
      // optional int32 Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Y:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &y_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRelatively_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRelatively_Pos::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 X = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->x(), output);
  }
  
  // optional int32 Y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRelatively_Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 X = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->x(), target);
  }
  
  // optional int32 Y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRelatively_Pos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->x());
    }
    
    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRelatively_Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRelatively_Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRelatively_Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRelatively_Pos::MergeFrom(const PBRelatively_Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRelatively_Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRelatively_Pos::CopyFrom(const PBRelatively_Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRelatively_Pos::Swap(PBRelatively_Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRelatively_Pos::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRelatively_Pos::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRelatively_Pos::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRelatively_Pos_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBlock::kBaseInfoFieldNumber;
const int PBBlock::kSelectFieldNumber;
const int PBBlock::kPosFieldNumber;
#endif  // !_MSC_VER

PBBlock::PBBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBlock::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBOgreProperty*>(&::PBOgreProperty::default_instance());
}

PBBlock::PBBlock(const PBBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBlock::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  select_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBlock::~PBBlock() {
  SharedDtor();
}

void PBBlock::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBlock_descriptor_;
}

const PBBlock& PBBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBBlock* PBBlock::default_instance_ = NULL;

PBBlock* PBBlock::New() const {
  return new PBBlock;
}

void PBBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBOgreProperty::Clear();
    }
    select_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBOgreProperty BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Select;
        break;
      }
      
      // optional int32 Select = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Select:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &select_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Pos;
        break;
      }
      
      // repeated .PBRelatively_Pos Pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Pos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_pos()));
        if (input->ExpectTag(26)) goto parse_Pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBlock::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBOgreProperty BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional int32 Select = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->select(), output);
  }
  
  // repeated .PBRelatively_Pos Pos = 3;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->pos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBOgreProperty BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional int32 Select = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->select(), target);
  }
  
  // repeated .PBRelatively_Pos Pos = 3;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->pos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBOgreProperty BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional int32 Select = 2;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->select());
    }
    
  }
  // repeated .PBRelatively_Pos Pos = 3;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->pos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBlock::MergeFrom(const PBBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBOgreProperty::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_select(from.select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBlock::CopyFrom(const PBBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBlock::Swap(PBBlock* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(select_, other->select_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBlock::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBlock::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBlock::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBlock_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPKDrop::kStateFieldNumber;
const int PBPKDrop::kEquipDropRateFieldNumber;
const int PBPKDrop::kBagDropRate1FieldNumber;
const int PBPKDrop::kBagDropRate2FieldNumber;
const int PBPKDrop::kGoPrisonRateFieldNumber;
const int PBPKDrop::kPrisonTimeFieldNumber;
#endif  // !_MSC_VER

PBPKDrop::PBPKDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPKDrop::InitAsDefaultInstance() {}

PBPKDrop::PBPKDrop(const PBPKDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPKDrop::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  equipdroprate_ = 0;
  bagdroprate1_ = 0;
  bagdroprate2_ = 0;
  goprisonrate_ = 0;
  prisontime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPKDrop::~PBPKDrop() {
  SharedDtor();
}

void PBPKDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPKDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPKDrop_descriptor_;
}

const PBPKDrop& PBPKDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPKDrop* PBPKDrop::default_instance_ = NULL;

PBPKDrop* PBPKDrop::New() const {
  return new PBPKDrop;
}

void PBPKDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    equipdroprate_ = 0;
    bagdroprate1_ = 0;
    bagdroprate2_ = 0;
    goprisonrate_ = 0;
    prisontime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPKDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 State = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &state_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EquipDropRate;
        break;
      }
      
      // optional int32 EquipDropRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipDropRate:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &equipdroprate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BagDropRate1;
        break;
      }
      
      // optional int32 BagDropRate1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BagDropRate1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &bagdroprate1_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BagDropRate2;
        break;
      }
      
      // optional int32 BagDropRate2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BagDropRate2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &bagdroprate2_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_GoPrisonRate;
        break;
      }
      
      // optional int32 GoPrisonRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GoPrisonRate:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &goprisonrate_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PrisonTime;
        break;
      }
      
      // optional int32 PrisonTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrisonTime:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &prisontime_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPKDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPKDrop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 State = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->state(), output);
  }
  
  // optional int32 EquipDropRate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->equipdroprate(), output);
  }
  
  // optional int32 BagDropRate1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->bagdroprate1(), output);
  }
  
  // optional int32 BagDropRate2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->bagdroprate2(), output);
  }
  
  // optional int32 GoPrisonRate = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->goprisonrate(), output);
  }
  
  // optional int32 PrisonTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->prisontime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPKDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 State = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->state(), target);
  }
  
  // optional int32 EquipDropRate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->equipdroprate(), target);
  }
  
  // optional int32 BagDropRate1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->bagdroprate1(), target);
  }
  
  // optional int32 BagDropRate2 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->bagdroprate2(), target);
  }
  
  // optional int32 GoPrisonRate = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->goprisonrate(), target);
  }
  
  // optional int32 PrisonTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->prisontime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPKDrop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 State = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->state());
    }
    
    // optional int32 EquipDropRate = 2;
    if (has_equipdroprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->equipdroprate());
    }
    
    // optional int32 BagDropRate1 = 3;
    if (has_bagdroprate1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->bagdroprate1());
    }
    
    // optional int32 BagDropRate2 = 4;
    if (has_bagdroprate2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->bagdroprate2());
    }
    
    // optional int32 GoPrisonRate = 5;
    if (has_goprisonrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->goprisonrate());
    }
    
    // optional int32 PrisonTime = 6;
    if (has_prisontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->prisontime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPKDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPKDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPKDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPKDrop::MergeFrom(const PBPKDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_state(from.state());
    }
    if (from._has_bit(1)) {
      set_equipdroprate(from.equipdroprate());
    }
    if (from._has_bit(2)) {
      set_bagdroprate1(from.bagdroprate1());
    }
    if (from._has_bit(3)) {
      set_bagdroprate2(from.bagdroprate2());
    }
    if (from._has_bit(4)) {
      set_goprisonrate(from.goprisonrate());
    }
    if (from._has_bit(5)) {
      set_prisontime(from.prisontime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPKDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPKDrop::CopyFrom(const PBPKDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPKDrop::Swap(PBPKDrop* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(equipdroprate_, other->equipdroprate_);
    std::swap(bagdroprate1_, other->bagdroprate1_);
    std::swap(bagdroprate2_, other->bagdroprate2_);
    std::swap(goprisonrate_, other->goprisonrate_);
    std::swap(prisontime_, other->prisontime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPKDrop::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPKDrop::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPKDrop::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPKDrop_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPKValueTable::kTempIDFieldNumber;
const int PBPKValueTable::kNavyBlueFieldNumber;
const int PBPKValueTable::kBlueFieldNumber;
const int PBPKValueTable::kCambridgeBlueFieldNumber;
const int PBPKValueTable::kWhiteFieldNumber;
const int PBPKValueTable::kRosinessFieldNumber;
const int PBPKValueTable::kRedFieldNumber;
const int PBPKValueTable::kCarMineFieldNumber;
const int PBPKValueTable::kRedTopLimitFieldNumber;
const int PBPKValueTable::kYellowTimeFieldNumber;
const int PBPKValueTable::kDecValueFieldNumber;
const int PBPKValueTable::kDecExpRateFieldNumber;
const int PBPKValueTable::kTopLimitDecExpFieldNumber;
const int PBPKValueTable::kPriceChangeFieldNumber;
const int PBPKValueTable::kLineIDFieldNumber;
const int PBPKValueTable::kMapIDFieldNumber;
const int PBPKValueTable::kPosXFieldNumber;
const int PBPKValueTable::kPosYFieldNumber;
const int PBPKValueTable::kDropFieldNumber;
const int PBPKValueTable::kFreeMapIDFieldNumber;
const int PBPKValueTable::kFreePosXFieldNumber;
const int PBPKValueTable::kFreePosYFieldNumber;
const int PBPKValueTable::kPrisonTimeFieldNumber;
const int PBPKValueTable::kBasePKValueFieldNumber;
const int PBPKValueTable::kPKValueLevelFieldNumber;
const int PBPKValueTable::kDropRateInEnemyFieldNumber;
const int PBPKValueTable::kPrisonBuffIDFieldNumber;
#endif  // !_MSC_VER

PBPKValueTable::PBPKValueTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPKValueTable::InitAsDefaultInstance() {}

PBPKValueTable::PBPKValueTable(const PBPKValueTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPKValueTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  navyblue_ = 0;
  blue_ = 0;
  cambridgeblue_ = 0;
  white_ = 0;
  rosiness_ = 0;
  red_ = 0;
  carmine_ = 0;
  redtoplimit_ = 0;
  yellowtime_ = 0;
  decvalue_ = 0;
  lineid_ = 0;
  mapid_ = 0;
  posx_ = 0;
  posy_ = 0;
  freemapid_ = 0u;
  freeposx_ = 0u;
  freeposy_ = 0u;
  prisontime_ = 0u;
  basepkvalue_ = 0u;
  droprateinenemy_ = 0u;
  prisonbuffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPKValueTable::~PBPKValueTable() {
  SharedDtor();
}

void PBPKValueTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPKValueTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPKValueTable_descriptor_;
}

const PBPKValueTable& PBPKValueTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPKValueTable* PBPKValueTable::default_instance_ = NULL;

PBPKValueTable* PBPKValueTable::New() const {
  return new PBPKValueTable;
}

void PBPKValueTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    navyblue_ = 0;
    blue_ = 0;
    cambridgeblue_ = 0;
    white_ = 0;
    rosiness_ = 0;
    red_ = 0;
    carmine_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    redtoplimit_ = 0;
    yellowtime_ = 0;
    decvalue_ = 0;
    lineid_ = 0;
    mapid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    posx_ = 0;
    posy_ = 0;
    freemapid_ = 0u;
    freeposx_ = 0u;
    freeposy_ = 0u;
    prisontime_ = 0u;
    basepkvalue_ = 0u;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    droprateinenemy_ = 0u;
    prisonbuffid_ = 0u;
  }
  decexprate_.Clear();
  toplimitdecexp_.Clear();
  pricechange_.Clear();
  drop_.Clear();
  pkvaluelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPKValueTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NavyBlue;
        break;
      }
      
      // optional int32 NavyBlue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NavyBlue:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &navyblue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Blue;
        break;
      }
      
      // optional int32 Blue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Blue:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &blue_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CambridgeBlue;
        break;
      }
      
      // optional int32 CambridgeBlue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CambridgeBlue:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &cambridgeblue_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_White;
        break;
      }
      
      // optional int32 White = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_White:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &white_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Rosiness;
        break;
      }
      
      // optional int32 Rosiness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rosiness:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rosiness_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Red;
        break;
      }
      
      // optional int32 Red = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Red:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &red_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CarMine;
        break;
      }
      
      // optional int32 CarMine = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CarMine:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &carmine_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_RedTopLimit;
        break;
      }
      
      // optional int32 RedTopLimit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedTopLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &redtoplimit_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_YellowTime;
        break;
      }
      
      // optional int32 YellowTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YellowTime:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &yellowtime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DecValue;
        break;
      }
      
      // optional int32 DecValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DecValue:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &decvalue_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DecExpRate;
        break;
      }
      
      // repeated int32 DecExpRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DecExpRate:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(input, &value));
        add_decexprate(value);
        if (input->ExpectTag(96)) goto parse_DecExpRate;
        if (input->ExpectTag(104)) goto parse_TopLimitDecExp;
        break;
      }
      
      // repeated int32 TopLimitDecExp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TopLimitDecExp:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(input, &value));
        add_toplimitdecexp(value);
        if (input->ExpectTag(104)) goto parse_TopLimitDecExp;
        if (input->ExpectTag(112)) goto parse_PriceChange;
        break;
      }
      
      // repeated int32 PriceChange = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PriceChange:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(input, &value));
        add_pricechange(value);
        if (input->ExpectTag(112)) goto parse_PriceChange;
        if (input->ExpectTag(120)) goto parse_LineID;
        break;
      }
      
      // optional int32 LineID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &lineid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_MapID;
        break;
      }
      
      // optional int32 MapID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &mapid_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_PosX;
        break;
      }
      
      // optional int32 PosX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posx_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PosY;
        break;
      }
      
      // optional int32 PosY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &posy_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_Drop;
        break;
      }
      
      // repeated .PBPKDrop Drop = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Drop:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_drop()));
        if (input->ExpectTag(154)) goto parse_Drop;
        if (input->ExpectTag(160)) goto parse_FreeMapID;
        break;
      }
      
      // optional uint32 FreeMapID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FreeMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &freemapid_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_FreePosX;
        break;
      }
      
      // optional uint32 FreePosX = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FreePosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &freeposx_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_FreePosY;
        break;
      }
      
      // optional uint32 FreePosY = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FreePosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &freeposy_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_PrisonTime;
        break;
      }
      
      // optional uint32 PrisonTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrisonTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prisontime_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_BasePKValue;
        break;
      }
      
      // optional uint32 BasePKValue = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BasePKValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &basepkvalue_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_PKValueLevel;
        break;
      }
      
      // repeated uint32 PKValueLevel = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PKValueLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pkvaluelevel(value);
        if (input->ExpectTag(200)) goto parse_PKValueLevel;
        if (input->ExpectTag(208)) goto parse_DropRateInEnemy;
        break;
      }
      
      // optional uint32 DropRateInEnemy = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropRateInEnemy:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &droprateinenemy_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_PrisonBuffID;
        break;
      }
      
      // optional uint32 PrisonBuffID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrisonBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prisonbuffid_));
        _set_bit(26);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPKValueTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPKValueTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional int32 NavyBlue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->navyblue(), output);
  }
  
  // optional int32 Blue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->blue(), output);
  }
  
  // optional int32 CambridgeBlue = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->cambridgeblue(), output);
  }
  
  // optional int32 White = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->white(), output);
  }
  
  // optional int32 Rosiness = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->rosiness(), output);
  }
  
  // optional int32 Red = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->red(), output);
  }
  
  // optional int32 CarMine = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->carmine(), output);
  }
  
  // optional int32 RedTopLimit = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->redtoplimit(), output);
  }
  
  // optional int32 YellowTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->yellowtime(), output);
  }
  
  // optional int32 DecValue = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->decvalue(), output);
  }
  
  // repeated int32 DecExpRate = 12;
  for (int i = 0; i < this->decexprate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteInt32(12, this->decexprate(i), output);
  }
  
  // repeated int32 TopLimitDecExp = 13;
  for (int i = 0; i < this->toplimitdecexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->toplimitdecexp(i), output);
  }
  
  // repeated int32 PriceChange = 14;
  for (int i = 0; i < this->pricechange_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->pricechange(i), output);
  }
  
  // optional int32 LineID = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(15, this->lineid(), output);
  }
  
  // optional int32 MapID = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(16, this->mapid(), output);
  }
  
  // optional int32 PosX = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(17, this->posx(), output);
  }
  
  // optional int32 PosY = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(18, this->posy(), output);
  }
  
  // repeated .PBPKDrop Drop = 19;
  for (int i = 0; i < this->drop_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->drop(i), output);
  }
  
  // optional uint32 FreeMapID = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->freemapid(), output);
  }
  
  // optional uint32 FreePosX = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->freeposx(), output);
  }
  
  // optional uint32 FreePosY = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->freeposy(), output);
  }
  
  // optional uint32 PrisonTime = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->prisontime(), output);
  }
  
  // optional uint32 BasePKValue = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->basepkvalue(), output);
  }
  
  // repeated uint32 PKValueLevel = 25;
  for (int i = 0; i < this->pkvaluelevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->pkvaluelevel(i), output);
  }
  
  // optional uint32 DropRateInEnemy = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->droprateinenemy(), output);
  }
  
  // optional uint32 PrisonBuffID = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->prisonbuffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPKValueTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional int32 NavyBlue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->navyblue(), target);
  }
  
  // optional int32 Blue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->blue(), target);
  }
  
  // optional int32 CambridgeBlue = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->cambridgeblue(), target);
  }
  
  // optional int32 White = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->white(), target);
  }
  
  // optional int32 Rosiness = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->rosiness(), target);
  }
  
  // optional int32 Red = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->red(), target);
  }
  
  // optional int32 CarMine = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->carmine(), target);
  }
  
  // optional int32 RedTopLimit = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->redtoplimit(), target);
  }
  
  // optional int32 YellowTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->yellowtime(), target);
  }
  
  // optional int32 DecValue = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->decvalue(), target);
  }
  
  // repeated int32 DecExpRate = 12;
  for (int i = 0; i < this->decexprate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(12, this->decexprate(i), target);
  }
  
  // repeated int32 TopLimitDecExp = 13;
  for (int i = 0; i < this->toplimitdecexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->toplimitdecexp(i), target);
  }
  
  // repeated int32 PriceChange = 14;
  for (int i = 0; i < this->pricechange_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->pricechange(i), target);
  }
  
  // optional int32 LineID = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(15, this->lineid(), target);
  }
  
  // optional int32 MapID = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(16, this->mapid(), target);
  }
  
  // optional int32 PosX = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(17, this->posx(), target);
  }
  
  // optional int32 PosY = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(18, this->posy(), target);
  }
  
  // repeated .PBPKDrop Drop = 19;
  for (int i = 0; i < this->drop_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->drop(i), target);
  }
  
  // optional uint32 FreeMapID = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->freemapid(), target);
  }
  
  // optional uint32 FreePosX = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->freeposx(), target);
  }
  
  // optional uint32 FreePosY = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->freeposy(), target);
  }
  
  // optional uint32 PrisonTime = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->prisontime(), target);
  }
  
  // optional uint32 BasePKValue = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->basepkvalue(), target);
  }
  
  // repeated uint32 PKValueLevel = 25;
  for (int i = 0; i < this->pkvaluelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->pkvaluelevel(i), target);
  }
  
  // optional uint32 DropRateInEnemy = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->droprateinenemy(), target);
  }
  
  // optional uint32 PrisonBuffID = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->prisonbuffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPKValueTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional int32 NavyBlue = 2;
    if (has_navyblue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->navyblue());
    }
    
    // optional int32 Blue = 3;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->blue());
    }
    
    // optional int32 CambridgeBlue = 4;
    if (has_cambridgeblue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->cambridgeblue());
    }
    
    // optional int32 White = 5;
    if (has_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->white());
    }
    
    // optional int32 Rosiness = 6;
    if (has_rosiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rosiness());
    }
    
    // optional int32 Red = 7;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->red());
    }
    
    // optional int32 CarMine = 8;
    if (has_carmine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->carmine());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 RedTopLimit = 9;
    if (has_redtoplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->redtoplimit());
    }
    
    // optional int32 YellowTime = 10;
    if (has_yellowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->yellowtime());
    }
    
    // optional int32 DecValue = 11;
    if (has_decvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->decvalue());
    }
    
    // optional int32 LineID = 15;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->lineid());
    }
    
    // optional int32 MapID = 16;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->mapid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 PosX = 17;
    if (has_posx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posx());
    }
    
    // optional int32 PosY = 18;
    if (has_posy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->posy());
    }
    
    // optional uint32 FreeMapID = 20;
    if (has_freemapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->freemapid());
    }
    
    // optional uint32 FreePosX = 21;
    if (has_freeposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->freeposx());
    }
    
    // optional uint32 FreePosY = 22;
    if (has_freeposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->freeposy());
    }
    
    // optional uint32 PrisonTime = 23;
    if (has_prisontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prisontime());
    }
    
    // optional uint32 BasePKValue = 24;
    if (has_basepkvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->basepkvalue());
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 DropRateInEnemy = 26;
    if (has_droprateinenemy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->droprateinenemy());
    }
    
    // optional uint32 PrisonBuffID = 27;
    if (has_prisonbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prisonbuffid());
    }
    
  }
  // repeated int32 DecExpRate = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->decexprate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::Int32Size(
        this->decexprate(i));
    }
    total_size += 1 * this->decexprate_size() + data_size;
  }
  
  // repeated int32 TopLimitDecExp = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->toplimitdecexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::Int32Size(
        this->toplimitdecexp(i));
    }
    total_size += 1 * this->toplimitdecexp_size() + data_size;
  }
  
  // repeated int32 PriceChange = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->pricechange_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::Int32Size(
        this->pricechange(i));
    }
    total_size += 1 * this->pricechange_size() + data_size;
  }
  
  // repeated .PBPKDrop Drop = 19;
  total_size += 2 * this->drop_size();
  for (int i = 0; i < this->drop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->drop(i));
  }
  
  // repeated uint32 PKValueLevel = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->pkvaluelevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pkvaluelevel(i));
    }
    total_size += 2 * this->pkvaluelevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPKValueTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPKValueTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPKValueTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPKValueTable::MergeFrom(const PBPKValueTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  decexprate_.MergeFrom(from.decexprate_);
  toplimitdecexp_.MergeFrom(from.toplimitdecexp_);
  pricechange_.MergeFrom(from.pricechange_);
  drop_.MergeFrom(from.drop_);
  pkvaluelevel_.MergeFrom(from.pkvaluelevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_navyblue(from.navyblue());
    }
    if (from._has_bit(2)) {
      set_blue(from.blue());
    }
    if (from._has_bit(3)) {
      set_cambridgeblue(from.cambridgeblue());
    }
    if (from._has_bit(4)) {
      set_white(from.white());
    }
    if (from._has_bit(5)) {
      set_rosiness(from.rosiness());
    }
    if (from._has_bit(6)) {
      set_red(from.red());
    }
    if (from._has_bit(7)) {
      set_carmine(from.carmine());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_redtoplimit(from.redtoplimit());
    }
    if (from._has_bit(9)) {
      set_yellowtime(from.yellowtime());
    }
    if (from._has_bit(10)) {
      set_decvalue(from.decvalue());
    }
    if (from._has_bit(14)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(15)) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_posx(from.posx());
    }
    if (from._has_bit(17)) {
      set_posy(from.posy());
    }
    if (from._has_bit(19)) {
      set_freemapid(from.freemapid());
    }
    if (from._has_bit(20)) {
      set_freeposx(from.freeposx());
    }
    if (from._has_bit(21)) {
      set_freeposy(from.freeposy());
    }
    if (from._has_bit(22)) {
      set_prisontime(from.prisontime());
    }
    if (from._has_bit(23)) {
      set_basepkvalue(from.basepkvalue());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from._has_bit(25)) {
      set_droprateinenemy(from.droprateinenemy());
    }
    if (from._has_bit(26)) {
      set_prisonbuffid(from.prisonbuffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPKValueTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPKValueTable::CopyFrom(const PBPKValueTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPKValueTable::Swap(PBPKValueTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(navyblue_, other->navyblue_);
    std::swap(blue_, other->blue_);
    std::swap(cambridgeblue_, other->cambridgeblue_);
    std::swap(white_, other->white_);
    std::swap(rosiness_, other->rosiness_);
    std::swap(red_, other->red_);
    std::swap(carmine_, other->carmine_);
    std::swap(redtoplimit_, other->redtoplimit_);
    std::swap(yellowtime_, other->yellowtime_);
    std::swap(decvalue_, other->decvalue_);
    decexprate_.Swap(&other->decexprate_);
    toplimitdecexp_.Swap(&other->toplimitdecexp_);
    pricechange_.Swap(&other->pricechange_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    drop_.Swap(&other->drop_);
    std::swap(freemapid_, other->freemapid_);
    std::swap(freeposx_, other->freeposx_);
    std::swap(freeposy_, other->freeposy_);
    std::swap(prisontime_, other->prisontime_);
    std::swap(basepkvalue_, other->basepkvalue_);
    pkvaluelevel_.Swap(&other->pkvaluelevel_);
    std::swap(droprateinenemy_, other->droprateinenemy_);
    std::swap(prisonbuffid_, other->prisonbuffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPKValueTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPKValueTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPKValueTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPKValueTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemToken::kBaseInfoFieldNumber;
const int PBItemToken::kPosFieldNumber;
const int PBItemToken::kRadiusFieldNumber;
const int PBItemToken::kOgreIDFieldNumber;
const int PBItemToken::kOgreNumFieldNumber;
#endif  // !_MSC_VER

PBItemToken::PBItemToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemToken::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemToken::PBItemToken(const PBItemToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemToken::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  radius_ = 0u;
  ogreid_ = 0u;
  ogrenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemToken::~PBItemToken() {
  SharedDtor();
}

void PBItemToken::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemToken_descriptor_;
}

const PBItemToken& PBItemToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemToken* PBItemToken::default_instance_ = NULL;

PBItemToken* PBItemToken::New() const {
  return new PBItemToken;
}

void PBItemToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    radius_ = 0u;
    ogreid_ = 0u;
    ogrenum_ = 0u;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }
      
      // repeated .PBMinePos Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Pos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_pos()));
        if (input->ExpectTag(18)) goto parse_Pos;
        if (input->ExpectTag(24)) goto parse_Radius;
        break;
      }
      
      // optional uint32 Radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Radius:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &radius_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OgreID;
        break;
      }
      
      // optional uint32 OgreID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogreid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OgreNum;
        break;
      }
      
      // optional uint32 OgreNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogrenum_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemToken::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // repeated .PBMinePos Pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->pos(i), output);
  }
  
  // optional uint32 Radius = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->radius(), output);
  }
  
  // optional uint32 OgreID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->ogreid(), output);
  }
  
  // optional uint32 OgreNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->ogrenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // repeated .PBMinePos Pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->pos(i), target);
  }
  
  // optional uint32 Radius = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->radius(), target);
  }
  
  // optional uint32 OgreID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->ogreid(), target);
  }
  
  // optional uint32 OgreNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->ogrenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemToken::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Radius = 3;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->radius());
    }
    
    // optional uint32 OgreID = 4;
    if (has_ogreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogreid());
    }
    
    // optional uint32 OgreNum = 5;
    if (has_ogrenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogrenum());
    }
    
  }
  // repeated .PBMinePos Pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->pos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemToken::MergeFrom(const PBItemToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(2)) {
      set_radius(from.radius());
    }
    if (from._has_bit(3)) {
      set_ogreid(from.ogreid());
    }
    if (from._has_bit(4)) {
      set_ogrenum(from.ogrenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemToken::CopyFrom(const PBItemToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemToken::Swap(PBItemToken* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    pos_.Swap(&other->pos_);
    std::swap(radius_, other->radius_);
    std::swap(ogreid_, other->ogreid_);
    std::swap(ogrenum_, other->ogrenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemToken::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemToken::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemToken::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemToken_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemKitBag::kBaseInfoFieldNumber;
const int PBItemKitBag::kIndexNumFieldNumber;
#endif  // !_MSC_VER

PBItemKitBag::PBItemKitBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemKitBag::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemKitBag::PBItemKitBag(const PBItemKitBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemKitBag::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  indexnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemKitBag::~PBItemKitBag() {
  SharedDtor();
}

void PBItemKitBag::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemKitBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemKitBag_descriptor_;
}

const PBItemKitBag& PBItemKitBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemKitBag* PBItemKitBag::default_instance_ = NULL;

PBItemKitBag* PBItemKitBag::New() const {
  return new PBItemKitBag;
}

void PBItemKitBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    indexnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemKitBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_IndexNum;
        break;
      }
      
      // optional uint32 IndexNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IndexNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &indexnum_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemKitBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemKitBag::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 IndexNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->indexnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemKitBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 IndexNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->indexnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemKitBag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 IndexNum = 2;
    if (has_indexnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->indexnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemKitBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemKitBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemKitBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemKitBag::MergeFrom(const PBItemKitBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_indexnum(from.indexnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemKitBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemKitBag::CopyFrom(const PBItemKitBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemKitBag::Swap(PBItemKitBag* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(indexnum_, other->indexnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemKitBag::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemKitBag::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemKitBag::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemKitBag_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemGiftBag::kBaseInfoFieldNumber;
const int PBItemGiftBag::kDropTableIDFieldNumber;
const int PBItemGiftBag::kMinLevelFieldNumber;
const int PBItemGiftBag::kMinMoneyFieldNumber;
const int PBItemGiftBag::kMinBindMoneyFieldNumber;
const int PBItemGiftBag::kMinSilverYBFieldNumber;
const int PBItemGiftBag::kDropInBagFieldNumber;
const int PBItemGiftBag::kMaxMoneyFieldNumber;
const int PBItemGiftBag::kMaxBindMoneyFieldNumber;
const int PBItemGiftBag::kMaxSilverYBFieldNumber;
const int PBItemGiftBag::kCheckBagFieldNumber;
const int PBItemGiftBag::kMinExpFieldNumber;
const int PBItemGiftBag::kMaxExpFieldNumber;
const int PBItemGiftBag::kLevelTableIDFieldNumber;
const int PBItemGiftBag::kLiHuaIDFieldNumber;
const int PBItemGiftBag::kOpenItemIDFieldNumber;
const int PBItemGiftBag::kOpenTableIDFieldNumber;
#endif  // !_MSC_VER

PBItemGiftBag::PBItemGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemGiftBag::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemGiftBag::PBItemGiftBag(const PBItemGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemGiftBag::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  droptableid_ = 0u;
  minlevel_ = 0u;
  minmoney_ = 0u;
  minbindmoney_ = 0u;
  minsilveryb_ = 0u;
  dropinbag_ = 0u;
  maxmoney_ = 0u;
  maxbindmoney_ = 0u;
  maxsilveryb_ = 0u;
  checkbag_ = 0u;
  minexp_ = 0u;
  maxexp_ = 0u;
  lihuaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemGiftBag::~PBItemGiftBag() {
  SharedDtor();
}

void PBItemGiftBag::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemGiftBag_descriptor_;
}

const PBItemGiftBag& PBItemGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemGiftBag* PBItemGiftBag::default_instance_ = NULL;

PBItemGiftBag* PBItemGiftBag::New() const {
  return new PBItemGiftBag;
}

void PBItemGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    droptableid_ = 0u;
    minlevel_ = 0u;
    minmoney_ = 0u;
    minbindmoney_ = 0u;
    minsilveryb_ = 0u;
    dropinbag_ = 0u;
    maxmoney_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxbindmoney_ = 0u;
    maxsilveryb_ = 0u;
    checkbag_ = 0u;
    minexp_ = 0u;
    maxexp_ = 0u;
    lihuaid_ = 0u;
  }
  leveltableid_.Clear();
  openitemid_.Clear();
  opentableid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_DropTableID;
        break;
      }
      
      // optional uint32 DropTableID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &droptableid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MinMoney;
        break;
      }
      
      // optional uint32 MinMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minmoney_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MinBindMoney;
        break;
      }
      
      // optional uint32 MinBindMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minbindmoney_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MinSilverYB;
        break;
      }
      
      // optional uint32 MinSilverYB = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinSilverYB:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minsilveryb_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DropInBag;
        break;
      }
      
      // optional uint32 DropInBag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DropInBag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dropinbag_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MaxMoney;
        break;
      }
      
      // optional uint32 MaxMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmoney_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MaxBindMoney;
        break;
      }
      
      // optional uint32 MaxBindMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxBindMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxbindmoney_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MaxSilverYB;
        break;
      }
      
      // optional uint32 MaxSilverYB = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxSilverYB:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxsilveryb_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CheckBag;
        break;
      }
      
      // optional uint32 CheckBag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CheckBag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &checkbag_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_MinExp;
        break;
      }
      
      // optional uint32 MinExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minexp_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MaxExp;
        break;
      }
      
      // optional uint32 MaxExp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxexp_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_LevelTableID;
        break;
      }
      
      // repeated uint32 LevelTableID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelTableID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_leveltableid(value);
        if (input->ExpectTag(112)) goto parse_LevelTableID;
        if (input->ExpectTag(120)) goto parse_LiHuaID;
        break;
      }
      
      // optional uint32 LiHuaID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LiHuaID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lihuaid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_OpenItemID;
        break;
      }
      
      // repeated uint32 OpenItemID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_openitemid(value);
        if (input->ExpectTag(128)) goto parse_OpenItemID;
        if (input->ExpectTag(136)) goto parse_OpenTableID;
        break;
      }
      
      // repeated uint32 OpenTableID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenTableID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_opentableid(value);
        if (input->ExpectTag(136)) goto parse_OpenTableID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemGiftBag::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 DropTableID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->droptableid(), output);
  }
  
  // optional uint32 MinLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->minlevel(), output);
  }
  
  // optional uint32 MinMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->minmoney(), output);
  }
  
  // optional uint32 MinBindMoney = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->minbindmoney(), output);
  }
  
  // optional uint32 MinSilverYB = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->minsilveryb(), output);
  }
  
  // optional uint32 DropInBag = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->dropinbag(), output);
  }
  
  // optional uint32 MaxMoney = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->maxmoney(), output);
  }
  
  // optional uint32 MaxBindMoney = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->maxbindmoney(), output);
  }
  
  // optional uint32 MaxSilverYB = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->maxsilveryb(), output);
  }
  
  // optional uint32 CheckBag = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->checkbag(), output);
  }
  
  // optional uint32 MinExp = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->minexp(), output);
  }
  
  // optional uint32 MaxExp = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->maxexp(), output);
  }
  
  // repeated uint32 LevelTableID = 14;
  for (int i = 0; i < this->leveltableid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->leveltableid(i), output);
  }
  
  // optional uint32 LiHuaID = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->lihuaid(), output);
  }
  
  // repeated uint32 OpenItemID = 16;
  for (int i = 0; i < this->openitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->openitemid(i), output);
  }
  
  // repeated uint32 OpenTableID = 17;
  for (int i = 0; i < this->opentableid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->opentableid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 DropTableID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->droptableid(), target);
  }
  
  // optional uint32 MinLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->minlevel(), target);
  }
  
  // optional uint32 MinMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->minmoney(), target);
  }
  
  // optional uint32 MinBindMoney = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->minbindmoney(), target);
  }
  
  // optional uint32 MinSilverYB = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->minsilveryb(), target);
  }
  
  // optional uint32 DropInBag = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->dropinbag(), target);
  }
  
  // optional uint32 MaxMoney = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->maxmoney(), target);
  }
  
  // optional uint32 MaxBindMoney = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->maxbindmoney(), target);
  }
  
  // optional uint32 MaxSilverYB = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->maxsilveryb(), target);
  }
  
  // optional uint32 CheckBag = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->checkbag(), target);
  }
  
  // optional uint32 MinExp = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->minexp(), target);
  }
  
  // optional uint32 MaxExp = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->maxexp(), target);
  }
  
  // repeated uint32 LevelTableID = 14;
  for (int i = 0; i < this->leveltableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->leveltableid(i), target);
  }
  
  // optional uint32 LiHuaID = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->lihuaid(), target);
  }
  
  // repeated uint32 OpenItemID = 16;
  for (int i = 0; i < this->openitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->openitemid(i), target);
  }
  
  // repeated uint32 OpenTableID = 17;
  for (int i = 0; i < this->opentableid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->opentableid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemGiftBag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 DropTableID = 2;
    if (has_droptableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->droptableid());
    }
    
    // optional uint32 MinLevel = 3;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional uint32 MinMoney = 4;
    if (has_minmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minmoney());
    }
    
    // optional uint32 MinBindMoney = 5;
    if (has_minbindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minbindmoney());
    }
    
    // optional uint32 MinSilverYB = 6;
    if (has_minsilveryb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minsilveryb());
    }
    
    // optional uint32 DropInBag = 7;
    if (has_dropinbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dropinbag());
    }
    
    // optional uint32 MaxMoney = 8;
    if (has_maxmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MaxBindMoney = 9;
    if (has_maxbindmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxbindmoney());
    }
    
    // optional uint32 MaxSilverYB = 10;
    if (has_maxsilveryb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxsilveryb());
    }
    
    // optional uint32 CheckBag = 11;
    if (has_checkbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->checkbag());
    }
    
    // optional uint32 MinExp = 12;
    if (has_minexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minexp());
    }
    
    // optional uint32 MaxExp = 13;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxexp());
    }
    
    // optional uint32 LiHuaID = 15;
    if (has_lihuaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lihuaid());
    }
    
  }
  // repeated uint32 LevelTableID = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->leveltableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->leveltableid(i));
    }
    total_size += 1 * this->leveltableid_size() + data_size;
  }
  
  // repeated uint32 OpenItemID = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->openitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->openitemid(i));
    }
    total_size += 2 * this->openitemid_size() + data_size;
  }
  
  // repeated uint32 OpenTableID = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->opentableid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->opentableid(i));
    }
    total_size += 2 * this->opentableid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemGiftBag::MergeFrom(const PBItemGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  leveltableid_.MergeFrom(from.leveltableid_);
  openitemid_.MergeFrom(from.openitemid_);
  opentableid_.MergeFrom(from.opentableid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_droptableid(from.droptableid());
    }
    if (from._has_bit(2)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(3)) {
      set_minmoney(from.minmoney());
    }
    if (from._has_bit(4)) {
      set_minbindmoney(from.minbindmoney());
    }
    if (from._has_bit(5)) {
      set_minsilveryb(from.minsilveryb());
    }
    if (from._has_bit(6)) {
      set_dropinbag(from.dropinbag());
    }
    if (from._has_bit(7)) {
      set_maxmoney(from.maxmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_maxbindmoney(from.maxbindmoney());
    }
    if (from._has_bit(9)) {
      set_maxsilveryb(from.maxsilveryb());
    }
    if (from._has_bit(10)) {
      set_checkbag(from.checkbag());
    }
    if (from._has_bit(11)) {
      set_minexp(from.minexp());
    }
    if (from._has_bit(12)) {
      set_maxexp(from.maxexp());
    }
    if (from._has_bit(14)) {
      set_lihuaid(from.lihuaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemGiftBag::CopyFrom(const PBItemGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemGiftBag::Swap(PBItemGiftBag* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(droptableid_, other->droptableid_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(minmoney_, other->minmoney_);
    std::swap(minbindmoney_, other->minbindmoney_);
    std::swap(minsilveryb_, other->minsilveryb_);
    std::swap(dropinbag_, other->dropinbag_);
    std::swap(maxmoney_, other->maxmoney_);
    std::swap(maxbindmoney_, other->maxbindmoney_);
    std::swap(maxsilveryb_, other->maxsilveryb_);
    std::swap(checkbag_, other->checkbag_);
    std::swap(minexp_, other->minexp_);
    std::swap(maxexp_, other->maxexp_);
    leveltableid_.Swap(&other->leveltableid_);
    std::swap(lihuaid_, other->lihuaid_);
    openitemid_.Swap(&other->openitemid_);
    opentableid_.Swap(&other->opentableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemGiftBag::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemGiftBag::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemGiftBag::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemGiftBag_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemAdapter::kTempIDFieldNumber;
const int PBItemAdapter::kItemTypeFieldNumber;
const int PBItemAdapter::kRealTypeFieldNumber;
const int PBItemAdapter::kRealTempIDFieldNumber;
const int PBItemAdapter::kMaxLevelMinusFieldNumber;
const int PBItemAdapter::kParamFieldNumber;
const int PBItemAdapter::kMaxValueFieldNumber;
const int PBItemAdapter::kMinValueFieldNumber;
#endif  // !_MSC_VER

PBItemAdapter::PBItemAdapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemAdapter::InitAsDefaultInstance() {}

PBItemAdapter::PBItemAdapter(const PBItemAdapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemAdapter::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  itemtype_ = 0u;
  realtype_ = 0u;
  realtempid_ = 0u;
  maxlevelminus_ = 0u;
  param_ = 0u;
  maxvalue_ = 0u;
  minvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemAdapter::~PBItemAdapter() {
  SharedDtor();
}

void PBItemAdapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemAdapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemAdapter_descriptor_;
}

const PBItemAdapter& PBItemAdapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemAdapter* PBItemAdapter::default_instance_ = NULL;

PBItemAdapter* PBItemAdapter::New() const {
  return new PBItemAdapter;
}

void PBItemAdapter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    itemtype_ = 0u;
    realtype_ = 0u;
    realtempid_ = 0u;
    maxlevelminus_ = 0u;
    param_ = 0u;
    maxvalue_ = 0u;
    minvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemAdapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemType;
        break;
      }
      
      // optional uint32 ItemType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RealType;
        break;
      }
      
      // optional uint32 RealType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RealType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &realtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RealTempID;
        break;
      }
      
      // optional uint32 RealTempID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RealTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &realtempid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MaxLevelMinus;
        break;
      }
      
      // optional uint32 MaxLevelMinus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevelMinus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevelminus_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MaxValue;
        break;
      }
      
      // optional uint32 MaxValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxvalue_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MinValue;
        break;
      }
      
      // optional uint32 MinValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minvalue_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemAdapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemAdapter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemtype(), output);
  }
  
  // optional uint32 RealType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->realtype(), output);
  }
  
  // optional uint32 RealTempID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->realtempid(), output);
  }
  
  // optional uint32 MaxLevelMinus = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxlevelminus(), output);
  }
  
  // optional uint32 Param = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->param(), output);
  }
  
  // optional uint32 MaxValue = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->maxvalue(), output);
  }
  
  // optional uint32 MinValue = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->minvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemAdapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 ItemType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemtype(), target);
  }
  
  // optional uint32 RealType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->realtype(), target);
  }
  
  // optional uint32 RealTempID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->realtempid(), target);
  }
  
  // optional uint32 MaxLevelMinus = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxlevelminus(), target);
  }
  
  // optional uint32 Param = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->param(), target);
  }
  
  // optional uint32 MaxValue = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->maxvalue(), target);
  }
  
  // optional uint32 MinValue = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->minvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemAdapter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ItemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemtype());
    }
    
    // optional uint32 RealType = 3;
    if (has_realtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->realtype());
    }
    
    // optional uint32 RealTempID = 4;
    if (has_realtempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->realtempid());
    }
    
    // optional uint32 MaxLevelMinus = 5;
    if (has_maxlevelminus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevelminus());
    }
    
    // optional uint32 Param = 6;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
    // optional uint32 MaxValue = 7;
    if (has_maxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxvalue());
    }
    
    // optional uint32 MinValue = 8;
    if (has_minvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemAdapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemAdapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemAdapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemAdapter::MergeFrom(const PBItemAdapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_itemtype(from.itemtype());
    }
    if (from._has_bit(2)) {
      set_realtype(from.realtype());
    }
    if (from._has_bit(3)) {
      set_realtempid(from.realtempid());
    }
    if (from._has_bit(4)) {
      set_maxlevelminus(from.maxlevelminus());
    }
    if (from._has_bit(5)) {
      set_param(from.param());
    }
    if (from._has_bit(6)) {
      set_maxvalue(from.maxvalue());
    }
    if (from._has_bit(7)) {
      set_minvalue(from.minvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemAdapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAdapter::CopyFrom(const PBItemAdapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAdapter::Swap(PBItemAdapter* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(realtype_, other->realtype_);
    std::swap(realtempid_, other->realtempid_);
    std::swap(maxlevelminus_, other->maxlevelminus_);
    std::swap(param_, other->param_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(minvalue_, other->minvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemAdapter::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemAdapter::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemAdapter::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemAdapter_reflection_;
}

// ===================================================================

const ::std::string PBTplHierogram::_default_res_;
#ifndef _MSC_VER
const int PBTplHierogram::kTempIDFieldNumber;
const int PBTplHierogram::kResFieldNumber;
const int PBTplHierogram::kAliveFieldNumber;
const int PBTplHierogram::kTypeFieldNumber;
const int PBTplHierogram::kParame1FieldNumber;
const int PBTplHierogram::kParame2FieldNumber;
#endif  // !_MSC_VER

PBTplHierogram::PBTplHierogram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTplHierogram::InitAsDefaultInstance() {}

PBTplHierogram::PBTplHierogram(const PBTplHierogram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTplHierogram::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  res_ = const_cast< ::std::string*>(&_default_res_);
  alive_ = 0u;
  type_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTplHierogram::~PBTplHierogram() {
  SharedDtor();
}

void PBTplHierogram::SharedDtor() {
  if (res_ != &_default_res_) {
    delete res_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTplHierogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTplHierogram_descriptor_;
}

const PBTplHierogram& PBTplHierogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTplHierogram* PBTplHierogram::default_instance_ = NULL;

PBTplHierogram* PBTplHierogram::New() const {
  return new PBTplHierogram;
}

void PBTplHierogram::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (res_ != &_default_res_) {
        res_->clear();
      }
    }
    alive_ = 0u;
    type_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTplHierogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Res;
        break;
      }
      
      // optional string Res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Res:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_res()));
        if (input->ExpectTag(24)) goto parse_Alive;
        break;
      }
      
      // optional uint32 Alive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Alive:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &alive_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTplHierogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTplHierogram::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Res = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->res(), output);
  }
  
  // optional uint32 Alive = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->alive(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parame2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTplHierogram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Res = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->res(), target);
  }
  
  // optional uint32 Alive = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->alive(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 Parame1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parame2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTplHierogram::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->res());
    }
    
    // optional uint32 Alive = 3;
    if (has_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->alive());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Parame1 = 5;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 6;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTplHierogram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTplHierogram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTplHierogram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTplHierogram::MergeFrom(const PBTplHierogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_res(from.res());
    }
    if (from._has_bit(2)) {
      set_alive(from.alive());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(5)) {
      set_parame2(from.parame2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTplHierogram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplHierogram::CopyFrom(const PBTplHierogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplHierogram::Swap(PBTplHierogram* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(res_, other->res_);
    std::swap(alive_, other->alive_);
    std::swap(type_, other->type_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTplHierogram::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTplHierogram::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTplHierogram::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTplHierogram_reflection_;
}

// ===================================================================

const ::std::string PBStep::_default_stagedesc_;
#ifndef _MSC_VER
const int PBStep::kStageIDFieldNumber;
const int PBStep::kSkillTreeFieldNumber;
const int PBStep::kNextFieldNumber;
const int PBStep::kMaxPointFieldNumber;
const int PBStep::kStageDescFieldNumber;
const int PBStep::kLayerFieldNumber;
#endif  // !_MSC_VER

PBStep::PBStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStep::InitAsDefaultInstance() {}

PBStep::PBStep(const PBStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStep::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  skilltree_ = 0u;
  maxpoint_ = 0u;
  stagedesc_ = const_cast< ::std::string*>(&_default_stagedesc_);
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStep::~PBStep() {
  SharedDtor();
}

void PBStep::SharedDtor() {
  if (stagedesc_ != &_default_stagedesc_) {
    delete stagedesc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStep_descriptor_;
}

const PBStep& PBStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBStep* PBStep::default_instance_ = NULL;

PBStep* PBStep::New() const {
  return new PBStep;
}

void PBStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    skilltree_ = 0u;
    maxpoint_ = 0u;
    if (_has_bit(4)) {
      if (stagedesc_ != &_default_stagedesc_) {
        stagedesc_->clear();
      }
    }
    layer_ = 0u;
  }
  next_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stageid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SkillTree;
        break;
      }
      
      // optional uint32 SkillTree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillTree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilltree_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Next;
        break;
      }
      
      // repeated uint32 Next = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Next:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_next(value);
        if (input->ExpectTag(24)) goto parse_Next;
        if (input->ExpectTag(40)) goto parse_MaxPoint;
        break;
      }
      
      // optional uint32 MaxPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxpoint_));
        _set_bit(3);
        if (input->ExpectTag(50)) goto parse_StageDesc;
        break;
      }
      
      // optional string StageDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StageDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stagedesc()));
        if (input->ExpectTag(56)) goto parse_Layer;
        break;
      }
      
      // optional uint32 Layer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Layer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &layer_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStep::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StageID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stageid(), output);
  }
  
  // optional uint32 SkillTree = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->skilltree(), output);
  }
  
  // repeated uint32 Next = 3;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->next(i), output);
  }
  
  // optional uint32 MaxPoint = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->maxpoint(), output);
  }
  
  // optional string StageDesc = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->stagedesc(), output);
  }
  
  // optional uint32 Layer = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->layer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StageID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stageid(), target);
  }
  
  // optional uint32 SkillTree = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->skilltree(), target);
  }
  
  // repeated uint32 Next = 3;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->next(i), target);
  }
  
  // optional uint32 MaxPoint = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->maxpoint(), target);
  }
  
  // optional string StageDesc = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->stagedesc(), target);
  }
  
  // optional uint32 Layer = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->layer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stageid());
    }
    
    // optional uint32 SkillTree = 2;
    if (has_skilltree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilltree());
    }
    
    // optional uint32 MaxPoint = 5;
    if (has_maxpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxpoint());
    }
    
    // optional string StageDesc = 6;
    if (has_stagedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stagedesc());
    }
    
    // optional uint32 Layer = 7;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->layer());
    }
    
  }
  // repeated uint32 Next = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->next(i));
    }
    total_size += 1 * this->next_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStep::MergeFrom(const PBStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_.MergeFrom(from.next_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stageid(from.stageid());
    }
    if (from._has_bit(1)) {
      set_skilltree(from.skilltree());
    }
    if (from._has_bit(3)) {
      set_maxpoint(from.maxpoint());
    }
    if (from._has_bit(4)) {
      set_stagedesc(from.stagedesc());
    }
    if (from._has_bit(5)) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStep::CopyFrom(const PBStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStep::Swap(PBStep* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(skilltree_, other->skilltree_);
    next_.Swap(&other->next_);
    std::swap(maxpoint_, other->maxpoint_);
    std::swap(stagedesc_, other->stagedesc_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStep::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStep::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStep::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStep_reflection_;
}

// ===================================================================

const ::std::string PBTitle::_default_title_;
const ::std::string PBTitle::_default_descrbe_;
const ::std::string PBTitle::_default_detail_;
#ifndef _MSC_VER
const int PBTitle::kTitleFieldNumber;
const int PBTitle::kTypeFieldNumber;
const int PBTitle::kObtainConditionFieldNumber;
const int PBTitle::kSubConditionFieldNumber;
const int PBTitle::kColorFieldNumber;
const int PBTitle::kAddPropertyFieldNumber;
const int PBTitle::kIsHiddenFieldNumber;
const int PBTitle::kIsReplaceFieldNumber;
const int PBTitle::kDescrbeFieldNumber;
const int PBTitle::kValidTimeFieldNumber;
const int PBTitle::kIsTeamTitleFieldNumber;
const int PBTitle::kParamFieldNumber;
const int PBTitle::kDetailFieldNumber;
#endif  // !_MSC_VER

PBTitle::PBTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTitle::InitAsDefaultInstance() {}

PBTitle::PBTitle(const PBTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTitle::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&_default_title_);
  type_ = 0u;
  obtaincondition_ = 0u;
  subcondition_ = 0u;
  color_ = 0u;
  addproperty_ = 0u;
  ishidden_ = 0u;
  isreplace_ = 0u;
  descrbe_ = const_cast< ::std::string*>(&_default_descrbe_);
  validtime_ = 0u;
  isteamtitle_ = 0u;
  param_ = 0u;
  detail_ = const_cast< ::std::string*>(&_default_detail_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTitle::~PBTitle() {
  SharedDtor();
}

void PBTitle::SharedDtor() {
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (descrbe_ != &_default_descrbe_) {
    delete descrbe_;
  }
  if (detail_ != &_default_detail_) {
    delete detail_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTitle_descriptor_;
}

const PBTitle& PBTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTitle* PBTitle::default_instance_ = NULL;

PBTitle* PBTitle::New() const {
  return new PBTitle;
}

void PBTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    type_ = 0u;
    obtaincondition_ = 0u;
    subcondition_ = 0u;
    color_ = 0u;
    addproperty_ = 0u;
    ishidden_ = 0u;
    isreplace_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (descrbe_ != &_default_descrbe_) {
        descrbe_->clear();
      }
    }
    validtime_ = 0u;
    isteamtitle_ = 0u;
    param_ = 0u;
    if (_has_bit(12)) {
      if (detail_ != &_default_detail_) {
        detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_title()));
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ObtainCondition;
        break;
      }
      
      // optional uint32 ObtainCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ObtainCondition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &obtaincondition_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SubCondition;
        break;
      }
      
      // optional uint32 SubCondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubCondition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subcondition_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_AddProperty;
        break;
      }
      
      // optional uint32 AddProperty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddProperty:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addproperty_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_IsHidden;
        break;
      }
      
      // optional uint32 IsHidden = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsHidden:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishidden_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_IsReplace;
        break;
      }
      
      // optional uint32 IsReplace = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsReplace:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isreplace_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_Descrbe;
        break;
      }
      
      // optional string Descrbe = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Descrbe:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descrbe()));
        if (input->ExpectTag(80)) goto parse_ValidTime;
        break;
      }
      
      // optional uint32 ValidTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &validtime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_IsTeamTitle;
        break;
      }
      
      // optional uint32 IsTeamTitle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsTeamTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isteamtitle_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_Detail;
        break;
      }
      
      // optional string Detail = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Detail:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_detail()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTitle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Title = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->title(), output);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 ObtainCondition = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->obtaincondition(), output);
  }
  
  // optional uint32 SubCondition = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->subcondition(), output);
  }
  
  // optional uint32 Color = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->color(), output);
  }
  
  // optional uint32 AddProperty = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->addproperty(), output);
  }
  
  // optional uint32 IsHidden = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->ishidden(), output);
  }
  
  // optional uint32 IsReplace = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->isreplace(), output);
  }
  
  // optional string Descrbe = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->descrbe(), output);
  }
  
  // optional uint32 ValidTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->validtime(), output);
  }
  
  // optional uint32 IsTeamTitle = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->isteamtitle(), output);
  }
  
  // optional uint32 Param = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->param(), output);
  }
  
  // optional string Detail = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteString(13, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Title = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->title(), target);
  }
  
  // optional uint32 Type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 ObtainCondition = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->obtaincondition(), target);
  }
  
  // optional uint32 SubCondition = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->subcondition(), target);
  }
  
  // optional uint32 Color = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->color(), target);
  }
  
  // optional uint32 AddProperty = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->addproperty(), target);
  }
  
  // optional uint32 IsHidden = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->ishidden(), target);
  }
  
  // optional uint32 IsReplace = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->isreplace(), target);
  }
  
  // optional string Descrbe = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->descrbe(), target);
  }
  
  // optional uint32 ValidTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->validtime(), target);
  }
  
  // optional uint32 IsTeamTitle = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->isteamtitle(), target);
  }
  
  // optional uint32 Param = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->param(), target);
  }
  
  // optional string Detail = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(13, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->title());
    }
    
    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 ObtainCondition = 3;
    if (has_obtaincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->obtaincondition());
    }
    
    // optional uint32 SubCondition = 4;
    if (has_subcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subcondition());
    }
    
    // optional uint32 Color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
    // optional uint32 AddProperty = 6;
    if (has_addproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addproperty());
    }
    
    // optional uint32 IsHidden = 7;
    if (has_ishidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishidden());
    }
    
    // optional uint32 IsReplace = 8;
    if (has_isreplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isreplace());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Descrbe = 9;
    if (has_descrbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descrbe());
    }
    
    // optional uint32 ValidTime = 10;
    if (has_validtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->validtime());
    }
    
    // optional uint32 IsTeamTitle = 11;
    if (has_isteamtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isteamtitle());
    }
    
    // optional uint32 Param = 12;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
    // optional string Detail = 13;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTitle::MergeFrom(const PBTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_title(from.title());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_obtaincondition(from.obtaincondition());
    }
    if (from._has_bit(3)) {
      set_subcondition(from.subcondition());
    }
    if (from._has_bit(4)) {
      set_color(from.color());
    }
    if (from._has_bit(5)) {
      set_addproperty(from.addproperty());
    }
    if (from._has_bit(6)) {
      set_ishidden(from.ishidden());
    }
    if (from._has_bit(7)) {
      set_isreplace(from.isreplace());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_descrbe(from.descrbe());
    }
    if (from._has_bit(9)) {
      set_validtime(from.validtime());
    }
    if (from._has_bit(10)) {
      set_isteamtitle(from.isteamtitle());
    }
    if (from._has_bit(11)) {
      set_param(from.param());
    }
    if (from._has_bit(12)) {
      set_detail(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTitle::CopyFrom(const PBTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTitle::Swap(PBTitle* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(type_, other->type_);
    std::swap(obtaincondition_, other->obtaincondition_);
    std::swap(subcondition_, other->subcondition_);
    std::swap(color_, other->color_);
    std::swap(addproperty_, other->addproperty_);
    std::swap(ishidden_, other->ishidden_);
    std::swap(isreplace_, other->isreplace_);
    std::swap(descrbe_, other->descrbe_);
    std::swap(validtime_, other->validtime_);
    std::swap(isteamtitle_, other->isteamtitle_);
    std::swap(param_, other->param_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTitle::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTitle::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTitle::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTitle_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTitleManager::kTempIDFieldNumber;
const int PBTitleManager::kTitleFieldNumber;
#endif  // !_MSC_VER

PBTitleManager::PBTitleManager()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTitleManager::InitAsDefaultInstance() {}

PBTitleManager::PBTitleManager(const PBTitleManager& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTitleManager::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTitleManager::~PBTitleManager() {
  SharedDtor();
}

void PBTitleManager::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTitleManager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTitleManager_descriptor_;
}

const PBTitleManager& PBTitleManager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTitleManager* PBTitleManager::default_instance_ = NULL;

PBTitleManager* PBTitleManager::New() const {
  return new PBTitleManager;
}

void PBTitleManager::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTitleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }
      
      // repeated .PBTitle Title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Title:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_title()));
        if (input->ExpectTag(18)) goto parse_Title;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTitleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTitleManager::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBTitle Title = 2;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->title(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTitleManager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBTitle Title = 2;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->title(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTitleManager::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBTitle Title = 2;
  total_size += 1 * this->title_size();
  for (int i = 0; i < this->title_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->title(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTitleManager::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTitleManager* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTitleManager*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTitleManager::MergeFrom(const PBTitleManager& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_.MergeFrom(from.title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTitleManager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTitleManager::CopyFrom(const PBTitleManager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTitleManager::Swap(PBTitleManager* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    title_.Swap(&other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTitleManager::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTitleManager::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTitleManager::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTitleManager_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTplBuffImmunity::kTempIDFieldNumber;
const int PBTplBuffImmunity::kBuffTypeFieldNumber;
#endif  // !_MSC_VER

PBTplBuffImmunity::PBTplBuffImmunity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTplBuffImmunity::InitAsDefaultInstance() {}

PBTplBuffImmunity::PBTplBuffImmunity(const PBTplBuffImmunity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTplBuffImmunity::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTplBuffImmunity::~PBTplBuffImmunity() {
  SharedDtor();
}

void PBTplBuffImmunity::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTplBuffImmunity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTplBuffImmunity_descriptor_;
}

const PBTplBuffImmunity& PBTplBuffImmunity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTplBuffImmunity* PBTplBuffImmunity::default_instance_ = NULL;

PBTplBuffImmunity* PBTplBuffImmunity::New() const {
  return new PBTplBuffImmunity;
}

void PBTplBuffImmunity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  bufftype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTplBuffImmunity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BuffType;
        break;
      }
      
      // repeated uint32 BuffType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bufftype(value);
        if (input->ExpectTag(16)) goto parse_BuffType;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTplBuffImmunity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTplBuffImmunity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 BuffType = 2;
  for (int i = 0; i < this->bufftype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->bufftype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTplBuffImmunity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 BuffType = 2;
  for (int i = 0; i < this->bufftype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->bufftype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTplBuffImmunity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 BuffType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufftype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bufftype(i));
    }
    total_size += 1 * this->bufftype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTplBuffImmunity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTplBuffImmunity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTplBuffImmunity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTplBuffImmunity::MergeFrom(const PBTplBuffImmunity& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufftype_.MergeFrom(from.bufftype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTplBuffImmunity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplBuffImmunity::CopyFrom(const PBTplBuffImmunity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplBuffImmunity::Swap(PBTplBuffImmunity* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    bufftype_.Swap(&other->bufftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTplBuffImmunity::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTplBuffImmunity::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTplBuffImmunity::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTplBuffImmunity_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplateTalent::kTempIDFieldNumber;
const int PBTemplateTalent::kStepFieldNumber;
const int PBTemplateTalent::kExpFieldNumber;
#endif  // !_MSC_VER

PBTemplateTalent::PBTemplateTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplateTalent::InitAsDefaultInstance() {}

PBTemplateTalent::PBTemplateTalent(const PBTemplateTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplateTalent::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplateTalent::~PBTemplateTalent() {
  SharedDtor();
}

void PBTemplateTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplateTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateTalent_descriptor_;
}

const PBTemplateTalent& PBTemplateTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplateTalent* PBTemplateTalent::default_instance_ = NULL;

PBTemplateTalent* PBTemplateTalent::New() const {
  return new PBTemplateTalent;
}

void PBTemplateTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  step_.Clear();
  exp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplateTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Step;
        break;
      }
      
      // repeated .PBStep Step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Step:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_step()));
        if (input->ExpectTag(18)) goto parse_Step;
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(24)) goto parse_Exp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplateTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplateTalent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBStep Step = 2;
  for (int i = 0; i < this->step_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->step(i), output);
  }
  
  // repeated uint32 Exp = 3;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->exp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplateTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBStep Step = 2;
  for (int i = 0; i < this->step_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->step(i), target);
  }
  
  // repeated uint32 Exp = 3;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->exp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplateTalent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBStep Step = 2;
  total_size += 1 * this->step_size();
  for (int i = 0; i < this->step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->step(i));
  }
  
  // repeated uint32 Exp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplateTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplateTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplateTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplateTalent::MergeFrom(const PBTemplateTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_.MergeFrom(from.step_);
  exp_.MergeFrom(from.exp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplateTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateTalent::CopyFrom(const PBTemplateTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateTalent::Swap(PBTemplateTalent* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    step_.Swap(&other->step_);
    exp_.Swap(&other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplateTalent::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplateTalent::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplateTalent::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateTalent_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMagicWeaponProIncValue::kLevelPointsFieldNumber;
const int PBMagicWeaponProIncValue::kLevelExpFieldNumber;
const int PBMagicWeaponProIncValue::kLevelProcessValFieldNumber;
const int PBMagicWeaponProIncValue::kLevelProcessCurelFieldNumber;
const int PBMagicWeaponProIncValue::kLevelProcessCurelValFieldNumber;
const int PBMagicWeaponProIncValue::kLevelKeenFieldNumber;
const int PBMagicWeaponProIncValue::kLevelCalmFieldNumber;
const int PBMagicWeaponProIncValue::kLevelMagicFieldNumber;
const int PBMagicWeaponProIncValue::kLevelBierFieldNumber;
const int PBMagicWeaponProIncValue::kLevelImmortalFieldNumber;
#endif  // !_MSC_VER

PBMagicWeaponProIncValue::PBMagicWeaponProIncValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMagicWeaponProIncValue::InitAsDefaultInstance() {}

PBMagicWeaponProIncValue::PBMagicWeaponProIncValue(const PBMagicWeaponProIncValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMagicWeaponProIncValue::SharedCtor() {
  _cached_size_ = 0;
  levelpoints_ = 0u;
  levelexp_ = GOOGLE_ULONGLONG(0);
  levelprocessval_ = 0u;
  levelprocesscurel_ = 0u;
  levelprocesscurelval_ = 0u;
  levelkeen_ = 0u;
  levelcalm_ = 0u;
  levelmagic_ = 0u;
  levelbier_ = 0u;
  levelimmortal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMagicWeaponProIncValue::~PBMagicWeaponProIncValue() {
  SharedDtor();
}

void PBMagicWeaponProIncValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMagicWeaponProIncValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponProIncValue_descriptor_;
}

const PBMagicWeaponProIncValue& PBMagicWeaponProIncValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMagicWeaponProIncValue* PBMagicWeaponProIncValue::default_instance_ = NULL;

PBMagicWeaponProIncValue* PBMagicWeaponProIncValue::New() const {
  return new PBMagicWeaponProIncValue;
}

void PBMagicWeaponProIncValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelpoints_ = 0u;
    levelexp_ = GOOGLE_ULONGLONG(0);
    levelprocessval_ = 0u;
    levelprocesscurel_ = 0u;
    levelprocesscurelval_ = 0u;
    levelkeen_ = 0u;
    levelcalm_ = 0u;
    levelmagic_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    levelbier_ = 0u;
    levelimmortal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMagicWeaponProIncValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LevelPoints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelpoints_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelExp;
        break;
      }
      
      // optional uint64 LevelExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &levelexp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelProcessVal;
        break;
      }
      
      // optional uint32 LevelProcessVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelProcessVal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelprocessval_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LevelProcessCurel;
        break;
      }
      
      // optional uint32 LevelProcessCurel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelProcessCurel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelprocesscurel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LevelProcessCurelVal;
        break;
      }
      
      // optional uint32 LevelProcessCurelVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelProcessCurelVal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelprocesscurelval_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_LevelKeen;
        break;
      }
      
      // optional uint32 LevelKeen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelKeen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelkeen_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LevelCalm;
        break;
      }
      
      // optional uint32 LevelCalm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelCalm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelcalm_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LevelMagic;
        break;
      }
      
      // optional uint32 LevelMagic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMagic:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmagic_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LevelBier;
        break;
      }
      
      // optional uint32 LevelBier = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelBier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelbier_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LevelImmortal;
        break;
      }
      
      // optional uint32 LevelImmortal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelImmortal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelimmortal_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMagicWeaponProIncValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMagicWeaponProIncValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LevelPoints = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->levelpoints(), output);
  }
  
  // optional uint64 LevelExp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->levelexp(), output);
  }
  
  // optional uint32 LevelProcessVal = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levelprocessval(), output);
  }
  
  // optional uint32 LevelProcessCurel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->levelprocesscurel(), output);
  }
  
  // optional uint32 LevelProcessCurelVal = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->levelprocesscurelval(), output);
  }
  
  // optional uint32 LevelKeen = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->levelkeen(), output);
  }
  
  // optional uint32 LevelCalm = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->levelcalm(), output);
  }
  
  // optional uint32 LevelMagic = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->levelmagic(), output);
  }
  
  // optional uint32 LevelBier = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->levelbier(), output);
  }
  
  // optional uint32 LevelImmortal = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->levelimmortal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMagicWeaponProIncValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LevelPoints = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->levelpoints(), target);
  }
  
  // optional uint64 LevelExp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->levelexp(), target);
  }
  
  // optional uint32 LevelProcessVal = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levelprocessval(), target);
  }
  
  // optional uint32 LevelProcessCurel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->levelprocesscurel(), target);
  }
  
  // optional uint32 LevelProcessCurelVal = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->levelprocesscurelval(), target);
  }
  
  // optional uint32 LevelKeen = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->levelkeen(), target);
  }
  
  // optional uint32 LevelCalm = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->levelcalm(), target);
  }
  
  // optional uint32 LevelMagic = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->levelmagic(), target);
  }
  
  // optional uint32 LevelBier = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->levelbier(), target);
  }
  
  // optional uint32 LevelImmortal = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->levelimmortal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMagicWeaponProIncValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LevelPoints = 1;
    if (has_levelpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelpoints());
    }
    
    // optional uint64 LevelExp = 2;
    if (has_levelexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->levelexp());
    }
    
    // optional uint32 LevelProcessVal = 3;
    if (has_levelprocessval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelprocessval());
    }
    
    // optional uint32 LevelProcessCurel = 4;
    if (has_levelprocesscurel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelprocesscurel());
    }
    
    // optional uint32 LevelProcessCurelVal = 5;
    if (has_levelprocesscurelval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelprocesscurelval());
    }
    
    // optional uint32 LevelKeen = 6;
    if (has_levelkeen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelkeen());
    }
    
    // optional uint32 LevelCalm = 7;
    if (has_levelcalm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelcalm());
    }
    
    // optional uint32 LevelMagic = 8;
    if (has_levelmagic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmagic());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LevelBier = 9;
    if (has_levelbier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelbier());
    }
    
    // optional uint32 LevelImmortal = 10;
    if (has_levelimmortal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelimmortal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMagicWeaponProIncValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMagicWeaponProIncValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMagicWeaponProIncValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMagicWeaponProIncValue::MergeFrom(const PBMagicWeaponProIncValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_levelpoints(from.levelpoints());
    }
    if (from._has_bit(1)) {
      set_levelexp(from.levelexp());
    }
    if (from._has_bit(2)) {
      set_levelprocessval(from.levelprocessval());
    }
    if (from._has_bit(3)) {
      set_levelprocesscurel(from.levelprocesscurel());
    }
    if (from._has_bit(4)) {
      set_levelprocesscurelval(from.levelprocesscurelval());
    }
    if (from._has_bit(5)) {
      set_levelkeen(from.levelkeen());
    }
    if (from._has_bit(6)) {
      set_levelcalm(from.levelcalm());
    }
    if (from._has_bit(7)) {
      set_levelmagic(from.levelmagic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_levelbier(from.levelbier());
    }
    if (from._has_bit(9)) {
      set_levelimmortal(from.levelimmortal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMagicWeaponProIncValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponProIncValue::CopyFrom(const PBMagicWeaponProIncValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponProIncValue::Swap(PBMagicWeaponProIncValue* other) {
  if (other != this) {
    std::swap(levelpoints_, other->levelpoints_);
    std::swap(levelexp_, other->levelexp_);
    std::swap(levelprocessval_, other->levelprocessval_);
    std::swap(levelprocesscurel_, other->levelprocesscurel_);
    std::swap(levelprocesscurelval_, other->levelprocesscurelval_);
    std::swap(levelkeen_, other->levelkeen_);
    std::swap(levelcalm_, other->levelcalm_);
    std::swap(levelmagic_, other->levelmagic_);
    std::swap(levelbier_, other->levelbier_);
    std::swap(levelimmortal_, other->levelimmortal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMagicWeaponProIncValue::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMagicWeaponProIncValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMagicWeaponProIncValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponProIncValue_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplateLifeSkill::kTempIDFieldNumber;
const int PBTemplateLifeSkill::kLifeSkillTypeFieldNumber;
const int PBTemplateLifeSkill::kLifeSkillKindFieldNumber;
const int PBTemplateLifeSkill::kDegreeStartedFieldNumber;
const int PBTemplateLifeSkill::kStudyMoneyFieldNumber;
const int PBTemplateLifeSkill::kSkillNameFieldNumber;
const int PBTemplateLifeSkill::kCharacterNameIDFieldNumber;
const int PBTemplateLifeSkill::kStudyDegreeFieldNumber;
const int PBTemplateLifeSkill::kLevelFieldNumber;
const int PBTemplateLifeSkill::kSubSkillLevelLimitFieldNumber;
const int PBTemplateLifeSkill::kDegreeValueFieldNumber;
#endif  // !_MSC_VER

PBTemplateLifeSkill::PBTemplateLifeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplateLifeSkill::InitAsDefaultInstance() {}

PBTemplateLifeSkill::PBTemplateLifeSkill(const PBTemplateLifeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplateLifeSkill::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  lifeskilltype_ = 0u;
  lifeskillkind_ = 0u;
  subskilllevellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplateLifeSkill::~PBTemplateLifeSkill() {
  SharedDtor();
}

void PBTemplateLifeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplateLifeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateLifeSkill_descriptor_;
}

const PBTemplateLifeSkill& PBTemplateLifeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplateLifeSkill* PBTemplateLifeSkill::default_instance_ = NULL;

PBTemplateLifeSkill* PBTemplateLifeSkill::New() const {
  return new PBTemplateLifeSkill;
}

void PBTemplateLifeSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    lifeskilltype_ = 0u;
    lifeskillkind_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    subskilllevellimit_ = 0u;
  }
  degreestarted_.Clear();
  studymoney_.Clear();
  skillname_.Clear();
  characternameid_.Clear();
  studydegree_.Clear();
  level_.Clear();
  degreevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplateLifeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LifeSkillType;
        break;
      }
      
      // optional uint32 LifeSkillType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilltype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LifeSkillKind;
        break;
      }
      
      // optional uint32 LifeSkillKind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillkind_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DegreeStarted;
        break;
      }
      
      // repeated uint32 DegreeStarted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeStarted:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_degreestarted(value);
        if (input->ExpectTag(32)) goto parse_DegreeStarted;
        if (input->ExpectTag(40)) goto parse_StudyMoney;
        break;
      }
      
      // repeated uint32 StudyMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudyMoney:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_studymoney(value);
        if (input->ExpectTag(40)) goto parse_StudyMoney;
        if (input->ExpectTag(50)) goto parse_SkillName;
        break;
      }
      
      // repeated string SkillName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_skillname()));
        if (input->ExpectTag(50)) goto parse_SkillName;
        if (input->ExpectTag(56)) goto parse_CharacterNameID;
        break;
      }
      
      // repeated uint32 CharacterNameID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharacterNameID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_characternameid(value);
        if (input->ExpectTag(56)) goto parse_CharacterNameID;
        if (input->ExpectTag(64)) goto parse_StudyDegree;
        break;
      }
      
      // repeated uint32 StudyDegree = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StudyDegree:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_studydegree(value);
        if (input->ExpectTag(64)) goto parse_StudyDegree;
        if (input->ExpectTag(72)) goto parse_Level;
        break;
      }
      
      // repeated uint32 Level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_level(value);
        if (input->ExpectTag(72)) goto parse_Level;
        if (input->ExpectTag(80)) goto parse_SubSkillLevelLimit;
        break;
      }
      
      // optional uint32 SubSkillLevelLimit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubSkillLevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subskilllevellimit_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DegreeValue;
        break;
      }
      
      // repeated uint32 DegreeValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_degreevalue(value);
        if (input->ExpectTag(88)) goto parse_DegreeValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplateLifeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplateLifeSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 LifeSkillType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lifeskilltype(), output);
  }
  
  // optional uint32 LifeSkillKind = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lifeskillkind(), output);
  }
  
  // repeated uint32 DegreeStarted = 4;
  for (int i = 0; i < this->degreestarted_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->degreestarted(i), output);
  }
  
  // repeated uint32 StudyMoney = 5;
  for (int i = 0; i < this->studymoney_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->studymoney(i), output);
  }
  
  // repeated string SkillName = 6;
  for (int i = 0; i < this->skillname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->skillname(i), output);
  }
  
  // repeated uint32 CharacterNameID = 7;
  for (int i = 0; i < this->characternameid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->characternameid(i), output);
  }
  
  // repeated uint32 StudyDegree = 8;
  for (int i = 0; i < this->studydegree_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->studydegree(i), output);
  }
  
  // repeated uint32 Level = 9;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->level(i), output);
  }
  
  // optional uint32 SubSkillLevelLimit = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->subskilllevellimit(), output);
  }
  
  // repeated uint32 DegreeValue = 11;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->degreevalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplateLifeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 LifeSkillType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lifeskilltype(), target);
  }
  
  // optional uint32 LifeSkillKind = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lifeskillkind(), target);
  }
  
  // repeated uint32 DegreeStarted = 4;
  for (int i = 0; i < this->degreestarted_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->degreestarted(i), target);
  }
  
  // repeated uint32 StudyMoney = 5;
  for (int i = 0; i < this->studymoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->studymoney(i), target);
  }
  
  // repeated string SkillName = 6;
  for (int i = 0; i < this->skillname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->skillname(i), target);
  }
  
  // repeated uint32 CharacterNameID = 7;
  for (int i = 0; i < this->characternameid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->characternameid(i), target);
  }
  
  // repeated uint32 StudyDegree = 8;
  for (int i = 0; i < this->studydegree_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->studydegree(i), target);
  }
  
  // repeated uint32 Level = 9;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->level(i), target);
  }
  
  // optional uint32 SubSkillLevelLimit = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->subskilllevellimit(), target);
  }
  
  // repeated uint32 DegreeValue = 11;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->degreevalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplateLifeSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 LifeSkillType = 2;
    if (has_lifeskilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilltype());
    }
    
    // optional uint32 LifeSkillKind = 3;
    if (has_lifeskillkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillkind());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 SubSkillLevelLimit = 10;
    if (has_subskilllevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subskilllevellimit());
    }
    
  }
  // repeated uint32 DegreeStarted = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->degreestarted_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->degreestarted(i));
    }
    total_size += 1 * this->degreestarted_size() + data_size;
  }
  
  // repeated uint32 StudyMoney = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->studymoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->studymoney(i));
    }
    total_size += 1 * this->studymoney_size() + data_size;
  }
  
  // repeated string SkillName = 6;
  total_size += 1 * this->skillname_size();
  for (int i = 0; i < this->skillname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->skillname(i));
  }
  
  // repeated uint32 CharacterNameID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->characternameid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->characternameid(i));
    }
    total_size += 1 * this->characternameid_size() + data_size;
  }
  
  // repeated uint32 StudyDegree = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->studydegree_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->studydegree(i));
    }
    total_size += 1 * this->studydegree_size() + data_size;
  }
  
  // repeated uint32 Level = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated uint32 DegreeValue = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->degreevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->degreevalue(i));
    }
    total_size += 1 * this->degreevalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplateLifeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplateLifeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplateLifeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplateLifeSkill::MergeFrom(const PBTemplateLifeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  degreestarted_.MergeFrom(from.degreestarted_);
  studymoney_.MergeFrom(from.studymoney_);
  skillname_.MergeFrom(from.skillname_);
  characternameid_.MergeFrom(from.characternameid_);
  studydegree_.MergeFrom(from.studydegree_);
  level_.MergeFrom(from.level_);
  degreevalue_.MergeFrom(from.degreevalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_lifeskilltype(from.lifeskilltype());
    }
    if (from._has_bit(2)) {
      set_lifeskillkind(from.lifeskillkind());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_subskilllevellimit(from.subskilllevellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplateLifeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateLifeSkill::CopyFrom(const PBTemplateLifeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateLifeSkill::Swap(PBTemplateLifeSkill* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(lifeskilltype_, other->lifeskilltype_);
    std::swap(lifeskillkind_, other->lifeskillkind_);
    degreestarted_.Swap(&other->degreestarted_);
    studymoney_.Swap(&other->studymoney_);
    skillname_.Swap(&other->skillname_);
    characternameid_.Swap(&other->characternameid_);
    studydegree_.Swap(&other->studydegree_);
    level_.Swap(&other->level_);
    std::swap(subskilllevellimit_, other->subskilllevellimit_);
    degreevalue_.Swap(&other->degreevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplateLifeSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplateLifeSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplateLifeSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateLifeSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDecompondTable::kFstItemIDFieldNumber;
const int PBDecompondTable::kFstProbabilityFieldNumber;
const int PBDecompondTable::kSecItemIDFieldNumber;
const int PBDecompondTable::kSecProbabilityFieldNumber;
const int PBDecompondTable::kThirdItemIDFieldNumber;
const int PBDecompondTable::kThirdProbabilityFieldNumber;
const int PBDecompondTable::kDegreeNeededFieldNumber;
const int PBDecompondTable::kFstItemNumFieldNumber;
const int PBDecompondTable::kSecItemNumFieldNumber;
const int PBDecompondTable::kThirdItemNumFieldNumber;
#endif  // !_MSC_VER

PBDecompondTable::PBDecompondTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDecompondTable::InitAsDefaultInstance() {}

PBDecompondTable::PBDecompondTable(const PBDecompondTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDecompondTable::SharedCtor() {
  _cached_size_ = 0;
  fstitemid_ = 0u;
  fstprobability_ = 0u;
  secitemid_ = 0u;
  secprobability_ = 0u;
  thirditemid_ = 0u;
  thirdprobability_ = 0u;
  degreeneeded_ = 0u;
  fstitemnum_ = 0u;
  secitemnum_ = 0u;
  thirditemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDecompondTable::~PBDecompondTable() {
  SharedDtor();
}

void PBDecompondTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDecompondTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDecompondTable_descriptor_;
}

const PBDecompondTable& PBDecompondTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDecompondTable* PBDecompondTable::default_instance_ = NULL;

PBDecompondTable* PBDecompondTable::New() const {
  return new PBDecompondTable;
}

void PBDecompondTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fstitemid_ = 0u;
    fstprobability_ = 0u;
    secitemid_ = 0u;
    secprobability_ = 0u;
    thirditemid_ = 0u;
    thirdprobability_ = 0u;
    degreeneeded_ = 0u;
    fstitemnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    secitemnum_ = 0u;
    thirditemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDecompondTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FstItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fstitemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FstProbability;
        break;
      }
      
      // optional uint32 FstProbability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FstProbability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fstprobability_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SecItemID;
        break;
      }
      
      // optional uint32 SecItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SecItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &secitemid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SecProbability;
        break;
      }
      
      // optional uint32 SecProbability = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SecProbability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &secprobability_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ThirdItemID;
        break;
      }
      
      // optional uint32 ThirdItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ThirdItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &thirditemid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ThirdProbability;
        break;
      }
      
      // optional uint32 ThirdProbability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ThirdProbability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &thirdprobability_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DegreeNeeded;
        break;
      }
      
      // optional uint32 DegreeNeeded = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeNeeded:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &degreeneeded_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_FstItemNum;
        break;
      }
      
      // optional uint32 FstItemNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FstItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fstitemnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_SecItemNum;
        break;
      }
      
      // optional uint32 SecItemNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SecItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &secitemnum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ThirdItemNum;
        break;
      }
      
      // optional uint32 ThirdItemNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ThirdItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &thirditemnum_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDecompondTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDecompondTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FstItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->fstitemid(), output);
  }
  
  // optional uint32 FstProbability = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fstprobability(), output);
  }
  
  // optional uint32 SecItemID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->secitemid(), output);
  }
  
  // optional uint32 SecProbability = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->secprobability(), output);
  }
  
  // optional uint32 ThirdItemID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->thirditemid(), output);
  }
  
  // optional uint32 ThirdProbability = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->thirdprobability(), output);
  }
  
  // optional uint32 DegreeNeeded = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->degreeneeded(), output);
  }
  
  // optional uint32 FstItemNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->fstitemnum(), output);
  }
  
  // optional uint32 SecItemNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->secitemnum(), output);
  }
  
  // optional uint32 ThirdItemNum = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->thirditemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDecompondTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FstItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->fstitemid(), target);
  }
  
  // optional uint32 FstProbability = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fstprobability(), target);
  }
  
  // optional uint32 SecItemID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->secitemid(), target);
  }
  
  // optional uint32 SecProbability = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->secprobability(), target);
  }
  
  // optional uint32 ThirdItemID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->thirditemid(), target);
  }
  
  // optional uint32 ThirdProbability = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->thirdprobability(), target);
  }
  
  // optional uint32 DegreeNeeded = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->degreeneeded(), target);
  }
  
  // optional uint32 FstItemNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->fstitemnum(), target);
  }
  
  // optional uint32 SecItemNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->secitemnum(), target);
  }
  
  // optional uint32 ThirdItemNum = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->thirditemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDecompondTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FstItemID = 1;
    if (has_fstitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fstitemid());
    }
    
    // optional uint32 FstProbability = 2;
    if (has_fstprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fstprobability());
    }
    
    // optional uint32 SecItemID = 3;
    if (has_secitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->secitemid());
    }
    
    // optional uint32 SecProbability = 4;
    if (has_secprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->secprobability());
    }
    
    // optional uint32 ThirdItemID = 5;
    if (has_thirditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->thirditemid());
    }
    
    // optional uint32 ThirdProbability = 6;
    if (has_thirdprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->thirdprobability());
    }
    
    // optional uint32 DegreeNeeded = 7;
    if (has_degreeneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->degreeneeded());
    }
    
    // optional uint32 FstItemNum = 8;
    if (has_fstitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fstitemnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SecItemNum = 9;
    if (has_secitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->secitemnum());
    }
    
    // optional uint32 ThirdItemNum = 10;
    if (has_thirditemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->thirditemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDecompondTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDecompondTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDecompondTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDecompondTable::MergeFrom(const PBDecompondTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fstitemid(from.fstitemid());
    }
    if (from._has_bit(1)) {
      set_fstprobability(from.fstprobability());
    }
    if (from._has_bit(2)) {
      set_secitemid(from.secitemid());
    }
    if (from._has_bit(3)) {
      set_secprobability(from.secprobability());
    }
    if (from._has_bit(4)) {
      set_thirditemid(from.thirditemid());
    }
    if (from._has_bit(5)) {
      set_thirdprobability(from.thirdprobability());
    }
    if (from._has_bit(6)) {
      set_degreeneeded(from.degreeneeded());
    }
    if (from._has_bit(7)) {
      set_fstitemnum(from.fstitemnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_secitemnum(from.secitemnum());
    }
    if (from._has_bit(9)) {
      set_thirditemnum(from.thirditemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDecompondTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDecompondTable::CopyFrom(const PBDecompondTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDecompondTable::Swap(PBDecompondTable* other) {
  if (other != this) {
    std::swap(fstitemid_, other->fstitemid_);
    std::swap(fstprobability_, other->fstprobability_);
    std::swap(secitemid_, other->secitemid_);
    std::swap(secprobability_, other->secprobability_);
    std::swap(thirditemid_, other->thirditemid_);
    std::swap(thirdprobability_, other->thirdprobability_);
    std::swap(degreeneeded_, other->degreeneeded_);
    std::swap(fstitemnum_, other->fstitemnum_);
    std::swap(secitemnum_, other->secitemnum_);
    std::swap(thirditemnum_, other->thirditemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDecompondTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDecompondTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDecompondTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDecompondTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCTemplateDecompound::kTempIDFieldNumber;
const int PBCTemplateDecompound::kWhiteDecompondFieldNumber;
const int PBCTemplateDecompound::kBlueDecompondFieldNumber;
const int PBCTemplateDecompound::kPurpleDecompondFieldNumber;
const int PBCTemplateDecompound::kValueFieldNumber;
const int PBCTemplateDecompound::kProbabilityFieldNumber;
const int PBCTemplateDecompound::kDegreeValueFieldNumber;
#endif  // !_MSC_VER

PBCTemplateDecompound::PBCTemplateDecompound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCTemplateDecompound::InitAsDefaultInstance() {}

PBCTemplateDecompound::PBCTemplateDecompound(const PBCTemplateDecompound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCTemplateDecompound::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCTemplateDecompound::~PBCTemplateDecompound() {
  SharedDtor();
}

void PBCTemplateDecompound::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCTemplateDecompound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCTemplateDecompound_descriptor_;
}

const PBCTemplateDecompound& PBCTemplateDecompound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCTemplateDecompound* PBCTemplateDecompound::default_instance_ = NULL;

PBCTemplateDecompound* PBCTemplateDecompound::New() const {
  return new PBCTemplateDecompound;
}

void PBCTemplateDecompound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  whitedecompond_.Clear();
  bluedecompond_.Clear();
  purpledecompond_.Clear();
  value_.Clear();
  probability_.Clear();
  degreevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCTemplateDecompound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_WhiteDecompond;
        break;
      }
      
      // repeated .PBDecompondTable WhiteDecompond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WhiteDecompond:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_whitedecompond()));
        if (input->ExpectTag(18)) goto parse_WhiteDecompond;
        if (input->ExpectTag(26)) goto parse_BlueDecompond;
        break;
      }
      
      // repeated .PBDecompondTable BlueDecompond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BlueDecompond:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bluedecompond()));
        if (input->ExpectTag(26)) goto parse_BlueDecompond;
        if (input->ExpectTag(34)) goto parse_PurpleDecompond;
        break;
      }
      
      // repeated .PBDecompondTable PurpleDecompond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PurpleDecompond:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_purpledecompond()));
        if (input->ExpectTag(34)) goto parse_PurpleDecompond;
        if (input->ExpectTag(40)) goto parse_Value;
        break;
      }
      
      // repeated uint32 Value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_value(value);
        if (input->ExpectTag(40)) goto parse_Value;
        if (input->ExpectTag(48)) goto parse_Probability;
        break;
      }
      
      // repeated uint32 Probability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probability:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probability(value);
        if (input->ExpectTag(48)) goto parse_Probability;
        if (input->ExpectTag(56)) goto parse_DegreeValue;
        break;
      }
      
      // repeated uint32 DegreeValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_degreevalue(value);
        if (input->ExpectTag(56)) goto parse_DegreeValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCTemplateDecompound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCTemplateDecompound::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBDecompondTable WhiteDecompond = 2;
  for (int i = 0; i < this->whitedecompond_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->whitedecompond(i), output);
  }
  
  // repeated .PBDecompondTable BlueDecompond = 3;
  for (int i = 0; i < this->bluedecompond_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->bluedecompond(i), output);
  }
  
  // repeated .PBDecompondTable PurpleDecompond = 4;
  for (int i = 0; i < this->purpledecompond_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->purpledecompond(i), output);
  }
  
  // repeated uint32 Value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->value(i), output);
  }
  
  // repeated uint32 Probability = 6;
  for (int i = 0; i < this->probability_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->probability(i), output);
  }
  
  // repeated uint32 DegreeValue = 7;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->degreevalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCTemplateDecompound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBDecompondTable WhiteDecompond = 2;
  for (int i = 0; i < this->whitedecompond_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->whitedecompond(i), target);
  }
  
  // repeated .PBDecompondTable BlueDecompond = 3;
  for (int i = 0; i < this->bluedecompond_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->bluedecompond(i), target);
  }
  
  // repeated .PBDecompondTable PurpleDecompond = 4;
  for (int i = 0; i < this->purpledecompond_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->purpledecompond(i), target);
  }
  
  // repeated uint32 Value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->value(i), target);
  }
  
  // repeated uint32 Probability = 6;
  for (int i = 0; i < this->probability_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->probability(i), target);
  }
  
  // repeated uint32 DegreeValue = 7;
  for (int i = 0; i < this->degreevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->degreevalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCTemplateDecompound::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBDecompondTable WhiteDecompond = 2;
  total_size += 1 * this->whitedecompond_size();
  for (int i = 0; i < this->whitedecompond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->whitedecompond(i));
  }
  
  // repeated .PBDecompondTable BlueDecompond = 3;
  total_size += 1 * this->bluedecompond_size();
  for (int i = 0; i < this->bluedecompond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bluedecompond(i));
  }
  
  // repeated .PBDecompondTable PurpleDecompond = 4;
  total_size += 1 * this->purpledecompond_size();
  for (int i = 0; i < this->purpledecompond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->purpledecompond(i));
  }
  
  // repeated uint32 Value = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }
  
  // repeated uint32 Probability = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->probability_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probability(i));
    }
    total_size += 1 * this->probability_size() + data_size;
  }
  
  // repeated uint32 DegreeValue = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->degreevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->degreevalue(i));
    }
    total_size += 1 * this->degreevalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCTemplateDecompound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCTemplateDecompound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCTemplateDecompound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCTemplateDecompound::MergeFrom(const PBCTemplateDecompound& from) {
  GOOGLE_CHECK_NE(&from, this);
  whitedecompond_.MergeFrom(from.whitedecompond_);
  bluedecompond_.MergeFrom(from.bluedecompond_);
  purpledecompond_.MergeFrom(from.purpledecompond_);
  value_.MergeFrom(from.value_);
  probability_.MergeFrom(from.probability_);
  degreevalue_.MergeFrom(from.degreevalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCTemplateDecompound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCTemplateDecompound::CopyFrom(const PBCTemplateDecompound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCTemplateDecompound::Swap(PBCTemplateDecompound* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    whitedecompond_.Swap(&other->whitedecompond_);
    bluedecompond_.Swap(&other->bluedecompond_);
    purpledecompond_.Swap(&other->purpledecompond_);
    value_.Swap(&other->value_);
    probability_.Swap(&other->probability_);
    degreevalue_.Swap(&other->degreevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCTemplateDecompound::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCTemplateDecompound::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCTemplateDecompound::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCTemplateDecompound_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTplMagicWeaponProIncTable::kTempIDFieldNumber;
const int PBTplMagicWeaponProIncTable::kValuesFieldNumber;
#endif  // !_MSC_VER

PBTplMagicWeaponProIncTable::PBTplMagicWeaponProIncTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTplMagicWeaponProIncTable::InitAsDefaultInstance() {}

PBTplMagicWeaponProIncTable::PBTplMagicWeaponProIncTable(const PBTplMagicWeaponProIncTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTplMagicWeaponProIncTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTplMagicWeaponProIncTable::~PBTplMagicWeaponProIncTable() {
  SharedDtor();
}

void PBTplMagicWeaponProIncTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTplMagicWeaponProIncTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTplMagicWeaponProIncTable_descriptor_;
}

const PBTplMagicWeaponProIncTable& PBTplMagicWeaponProIncTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTplMagicWeaponProIncTable* PBTplMagicWeaponProIncTable::default_instance_ = NULL;

PBTplMagicWeaponProIncTable* PBTplMagicWeaponProIncTable::New() const {
  return new PBTplMagicWeaponProIncTable;
}

void PBTplMagicWeaponProIncTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTplMagicWeaponProIncTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(26)) goto parse_Values;
        break;
      }
      
      // repeated .PBMagicWeaponProIncValue Values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Values:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_values()));
        if (input->ExpectTag(26)) goto parse_Values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTplMagicWeaponProIncTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTplMagicWeaponProIncTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBMagicWeaponProIncValue Values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTplMagicWeaponProIncTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBMagicWeaponProIncValue Values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTplMagicWeaponProIncTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBMagicWeaponProIncValue Values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTplMagicWeaponProIncTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTplMagicWeaponProIncTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTplMagicWeaponProIncTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTplMagicWeaponProIncTable::MergeFrom(const PBTplMagicWeaponProIncTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTplMagicWeaponProIncTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplMagicWeaponProIncTable::CopyFrom(const PBTplMagicWeaponProIncTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTplMagicWeaponProIncTable::Swap(PBTplMagicWeaponProIncTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTplMagicWeaponProIncTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTplMagicWeaponProIncTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTplMagicWeaponProIncTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTplMagicWeaponProIncTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleMWDecomposeData::kTempIDFieldNumber;
const int SingleMWDecomposeData::kNumMinFieldNumber;
const int SingleMWDecomposeData::kNumMaxFieldNumber;
const int SingleMWDecomposeData::kProbFieldNumber;
#endif  // !_MSC_VER

SingleMWDecomposeData::SingleMWDecomposeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleMWDecomposeData::InitAsDefaultInstance() {}

SingleMWDecomposeData::SingleMWDecomposeData(const SingleMWDecomposeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleMWDecomposeData::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  nummin_ = 0u;
  nummax_ = 0u;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleMWDecomposeData::~SingleMWDecomposeData() {
  SharedDtor();
}

void SingleMWDecomposeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleMWDecomposeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleMWDecomposeData_descriptor_;
}

const SingleMWDecomposeData& SingleMWDecomposeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

SingleMWDecomposeData* SingleMWDecomposeData::default_instance_ = NULL;

SingleMWDecomposeData* SingleMWDecomposeData::New() const {
  return new SingleMWDecomposeData;
}

void SingleMWDecomposeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    nummin_ = 0u;
    nummax_ = 0u;
    prob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleMWDecomposeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NumMin;
        break;
      }
      
      // optional uint32 NumMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NumMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nummin_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NumMax;
        break;
      }
      
      // optional uint32 NumMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NumMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nummax_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Prob;
        break;
      }
      
      // optional uint32 Prob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Prob:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prob_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleMWDecomposeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleMWDecomposeData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 NumMin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->nummin(), output);
  }
  
  // optional uint32 NumMax = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->nummax(), output);
  }
  
  // optional uint32 Prob = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->prob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleMWDecomposeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 NumMin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->nummin(), target);
  }
  
  // optional uint32 NumMax = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->nummax(), target);
  }
  
  // optional uint32 Prob = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->prob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleMWDecomposeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 NumMin = 2;
    if (has_nummin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nummin());
    }
    
    // optional uint32 NumMax = 3;
    if (has_nummax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nummax());
    }
    
    // optional uint32 Prob = 4;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleMWDecomposeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleMWDecomposeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleMWDecomposeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleMWDecomposeData::MergeFrom(const SingleMWDecomposeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_nummin(from.nummin());
    }
    if (from._has_bit(2)) {
      set_nummax(from.nummax());
    }
    if (from._has_bit(3)) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleMWDecomposeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMWDecomposeData::CopyFrom(const SingleMWDecomposeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMWDecomposeData::Swap(SingleMWDecomposeData* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(nummin_, other->nummin_);
    std::swap(nummax_, other->nummax_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleMWDecomposeData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleMWDecomposeData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleMWDecomposeData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleMWDecomposeData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMagicWeaponDecomposeTable::kTempIDFieldNumber;
const int PBMagicWeaponDecomposeTable::kNeedMoneyTypeFieldNumber;
const int PBMagicWeaponDecomposeTable::kNeedMoneyFieldNumber;
const int PBMagicWeaponDecomposeTable::kItemsFieldNumber;
#endif  // !_MSC_VER

PBMagicWeaponDecomposeTable::PBMagicWeaponDecomposeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMagicWeaponDecomposeTable::InitAsDefaultInstance() {}

PBMagicWeaponDecomposeTable::PBMagicWeaponDecomposeTable(const PBMagicWeaponDecomposeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMagicWeaponDecomposeTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  needmoneytype_ = 0u;
  needmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMagicWeaponDecomposeTable::~PBMagicWeaponDecomposeTable() {
  SharedDtor();
}

void PBMagicWeaponDecomposeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMagicWeaponDecomposeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponDecomposeTable_descriptor_;
}

const PBMagicWeaponDecomposeTable& PBMagicWeaponDecomposeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMagicWeaponDecomposeTable* PBMagicWeaponDecomposeTable::default_instance_ = NULL;

PBMagicWeaponDecomposeTable* PBMagicWeaponDecomposeTable::New() const {
  return new PBMagicWeaponDecomposeTable;
}

void PBMagicWeaponDecomposeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    needmoneytype_ = 0u;
    needmoney_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMagicWeaponDecomposeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NeedMoneyType;
        break;
      }
      
      // optional uint32 NeedMoneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoneyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoneytype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedMoney;
        break;
      }
      
      // optional uint32 NeedMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoney_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Items;
        break;
      }
      
      // repeated .SingleMWDecomposeData Items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Items:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_items()));
        if (input->ExpectTag(34)) goto parse_Items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMagicWeaponDecomposeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMagicWeaponDecomposeTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 NeedMoneyType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->needmoneytype(), output);
  }
  
  // optional uint32 NeedMoney = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needmoney(), output);
  }
  
  // repeated .SingleMWDecomposeData Items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMagicWeaponDecomposeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 NeedMoneyType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->needmoneytype(), target);
  }
  
  // optional uint32 NeedMoney = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needmoney(), target);
  }
  
  // repeated .SingleMWDecomposeData Items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMagicWeaponDecomposeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 NeedMoneyType = 2;
    if (has_needmoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoneytype());
    }
    
    // optional uint32 NeedMoney = 3;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoney());
    }
    
  }
  // repeated .SingleMWDecomposeData Items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMagicWeaponDecomposeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMagicWeaponDecomposeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMagicWeaponDecomposeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMagicWeaponDecomposeTable::MergeFrom(const PBMagicWeaponDecomposeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_needmoneytype(from.needmoneytype());
    }
    if (from._has_bit(2)) {
      set_needmoney(from.needmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMagicWeaponDecomposeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponDecomposeTable::CopyFrom(const PBMagicWeaponDecomposeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponDecomposeTable::Swap(PBMagicWeaponDecomposeTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(needmoneytype_, other->needmoneytype_);
    std::swap(needmoney_, other->needmoney_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMagicWeaponDecomposeTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMagicWeaponDecomposeTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMagicWeaponDecomposeTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponDecomposeTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMagicWeaponQuickUpTable::kTempIDFieldNumber;
const int PBMagicWeaponQuickUpTable::kNeedItemFieldNumber;
const int PBMagicWeaponQuickUpTable::kNeedItemNumFieldNumber;
const int PBMagicWeaponQuickUpTable::kNeedMoneyTypeFieldNumber;
const int PBMagicWeaponQuickUpTable::kNeedMoneyFieldNumber;
const int PBMagicWeaponQuickUpTable::kSuccessProbFieldNumber;
const int PBMagicWeaponQuickUpTable::kNewMWIDFieldNumber;
const int PBMagicWeaponQuickUpTable::kNeedLevelFieldNumber;
const int PBMagicWeaponQuickUpTable::kLeastLeveFieldNumber;
#endif  // !_MSC_VER

PBMagicWeaponQuickUpTable::PBMagicWeaponQuickUpTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMagicWeaponQuickUpTable::InitAsDefaultInstance() {}

PBMagicWeaponQuickUpTable::PBMagicWeaponQuickUpTable(const PBMagicWeaponQuickUpTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMagicWeaponQuickUpTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  needitem_ = 0u;
  needitemnum_ = 0u;
  needmoneytype_ = 0u;
  needmoney_ = 0u;
  successprob_ = 0u;
  newmwid_ = 0u;
  needlevel_ = 0u;
  leastleve_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMagicWeaponQuickUpTable::~PBMagicWeaponQuickUpTable() {
  SharedDtor();
}

void PBMagicWeaponQuickUpTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMagicWeaponQuickUpTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponQuickUpTable_descriptor_;
}

const PBMagicWeaponQuickUpTable& PBMagicWeaponQuickUpTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMagicWeaponQuickUpTable* PBMagicWeaponQuickUpTable::default_instance_ = NULL;

PBMagicWeaponQuickUpTable* PBMagicWeaponQuickUpTable::New() const {
  return new PBMagicWeaponQuickUpTable;
}

void PBMagicWeaponQuickUpTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    needitem_ = 0u;
    needitemnum_ = 0u;
    needmoneytype_ = 0u;
    needmoney_ = 0u;
    successprob_ = 0u;
    newmwid_ = 0u;
    needlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leastleve_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMagicWeaponQuickUpTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NeedItem;
        break;
      }
      
      // optional uint32 NeedItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needitem_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedItemNum;
        break;
      }
      
      // optional uint32 NeedItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needitemnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_NeedMoneyType;
        break;
      }
      
      // optional uint32 NeedMoneyType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoneyType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoneytype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_NeedMoney;
        break;
      }
      
      // optional uint32 NeedMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needmoney_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SuccessProb;
        break;
      }
      
      // optional uint32 SuccessProb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuccessProb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &successprob_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NewMWID;
        break;
      }
      
      // optional uint32 NewMWID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewMWID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newmwid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_NeedLevel;
        break;
      }
      
      // optional uint32 NeedLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needlevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LeastLeve;
        break;
      }
      
      // optional uint32 LeastLeve = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeastLeve:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leastleve_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMagicWeaponQuickUpTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMagicWeaponQuickUpTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 NeedItem = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->needitem(), output);
  }
  
  // optional uint32 NeedItemNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needitemnum(), output);
  }
  
  // optional uint32 NeedMoneyType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->needmoneytype(), output);
  }
  
  // optional uint32 NeedMoney = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->needmoney(), output);
  }
  
  // optional uint32 SuccessProb = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->successprob(), output);
  }
  
  // optional uint32 NewMWID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->newmwid(), output);
  }
  
  // optional uint32 NeedLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->needlevel(), output);
  }
  
  // optional uint32 LeastLeve = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->leastleve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMagicWeaponQuickUpTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 NeedItem = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->needitem(), target);
  }
  
  // optional uint32 NeedItemNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needitemnum(), target);
  }
  
  // optional uint32 NeedMoneyType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->needmoneytype(), target);
  }
  
  // optional uint32 NeedMoney = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->needmoney(), target);
  }
  
  // optional uint32 SuccessProb = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->successprob(), target);
  }
  
  // optional uint32 NewMWID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->newmwid(), target);
  }
  
  // optional uint32 NeedLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->needlevel(), target);
  }
  
  // optional uint32 LeastLeve = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->leastleve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMagicWeaponQuickUpTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 NeedItem = 2;
    if (has_needitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needitem());
    }
    
    // optional uint32 NeedItemNum = 3;
    if (has_needitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needitemnum());
    }
    
    // optional uint32 NeedMoneyType = 4;
    if (has_needmoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoneytype());
    }
    
    // optional uint32 NeedMoney = 5;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needmoney());
    }
    
    // optional uint32 SuccessProb = 6;
    if (has_successprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->successprob());
    }
    
    // optional uint32 NewMWID = 7;
    if (has_newmwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newmwid());
    }
    
    // optional uint32 NeedLevel = 8;
    if (has_needlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LeastLeve = 9;
    if (has_leastleve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leastleve());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMagicWeaponQuickUpTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMagicWeaponQuickUpTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMagicWeaponQuickUpTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMagicWeaponQuickUpTable::MergeFrom(const PBMagicWeaponQuickUpTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_needitem(from.needitem());
    }
    if (from._has_bit(2)) {
      set_needitemnum(from.needitemnum());
    }
    if (from._has_bit(3)) {
      set_needmoneytype(from.needmoneytype());
    }
    if (from._has_bit(4)) {
      set_needmoney(from.needmoney());
    }
    if (from._has_bit(5)) {
      set_successprob(from.successprob());
    }
    if (from._has_bit(6)) {
      set_newmwid(from.newmwid());
    }
    if (from._has_bit(7)) {
      set_needlevel(from.needlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_leastleve(from.leastleve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMagicWeaponQuickUpTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponQuickUpTable::CopyFrom(const PBMagicWeaponQuickUpTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponQuickUpTable::Swap(PBMagicWeaponQuickUpTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(needitem_, other->needitem_);
    std::swap(needitemnum_, other->needitemnum_);
    std::swap(needmoneytype_, other->needmoneytype_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(successprob_, other->successprob_);
    std::swap(newmwid_, other->newmwid_);
    std::swap(needlevel_, other->needlevel_);
    std::swap(leastleve_, other->leastleve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMagicWeaponQuickUpTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMagicWeaponQuickUpTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMagicWeaponQuickUpTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponQuickUpTable_reflection_;
}

// ===================================================================

const ::std::string PBItemMagicWeapon::_default_showlevel_;
const ::std::string PBItemMagicWeapon::_default_showtype_;
const ::std::string PBItemMagicWeapon::_default_newweaponname_;
const ::std::string PBItemMagicWeapon::_default_dispresname_;
#ifndef _MSC_VER
const int PBItemMagicWeapon::kBaseFieldNumber;
const int PBItemMagicWeapon::kShowLevelFieldNumber;
const int PBItemMagicWeapon::kShowTypeFieldNumber;
const int PBItemMagicWeapon::kNewWeaponNameFieldNumber;
const int PBItemMagicWeapon::kUmmiBuffIDFieldNumber;
const int PBItemMagicWeapon::kInitLevelFieldNumber;
const int PBItemMagicWeapon::kInitMpFieldNumber;
const int PBItemMagicWeapon::kInitHpFieldNumber;
const int PBItemMagicWeapon::kInitMaxMpFieldNumber;
const int PBItemMagicWeapon::kInitMaxHpFieldNumber;
const int PBItemMagicWeapon::kInitBaseFieldNumber;
const int PBItemMagicWeapon::kInitShapeFieldNumber;
const int PBItemMagicWeapon::kInitEffectFieldNumber;
const int PBItemMagicWeapon::kInitSpirFieldNumber;
const int PBItemMagicWeapon::kIncMaxMpFieldNumber;
const int PBItemMagicWeapon::kIncMaxHpFieldNumber;
const int PBItemMagicWeapon::kMPIncValueFieldNumber;
const int PBItemMagicWeapon::kHPIncValueFieldNumber;
const int PBItemMagicWeapon::kMPIncValuePerMagicFieldNumber;
const int PBItemMagicWeapon::kHPIncValuePerMagicFieldNumber;
const int PBItemMagicWeapon::kAttackIncFieldNumber;
const int PBItemMagicWeapon::kRecovIncFieldNumber;
const int PBItemMagicWeapon::kMaxMPIncFieldNumber;
const int PBItemMagicWeapon::kMaxHPIncFieldNumber;
const int PBItemMagicWeapon::kDeadLineIncFieldNumber;
const int PBItemMagicWeapon::kCanUseBookFieldNumber;
const int PBItemMagicWeapon::kGetSkillSclFieldNumber;
const int PBItemMagicWeapon::kLevelTableIDFieldNumber;
const int PBItemMagicWeapon::kSkillBoxTableIDFieldNumber;
const int PBItemMagicWeapon::kDieOffHpFieldNumber;
const int PBItemMagicWeapon::kProJudgeCostFieldNumber;
const int PBItemMagicWeapon::kDispResNameFieldNumber;
const int PBItemMagicWeapon::kDefaultSkillFieldNumber;
const int PBItemMagicWeapon::kDefaultSkill2FieldNumber;
const int PBItemMagicWeapon::kJudgeEffTableIDFieldNumber;
const int PBItemMagicWeapon::kJudgeSpirTableIDFieldNumber;
const int PBItemMagicWeapon::kLevelQuotietyTabIDFieldNumber;
const int PBItemMagicWeapon::kDecomposeTabIDFieldNumber;
const int PBItemMagicWeapon::kLvByNumFieldNumber;
const int PBItemMagicWeapon::kQuickUpTabIDFieldNumber;
const int PBItemMagicWeapon::kUpLevelTabIDFieldNumber;
#endif  // !_MSC_VER

PBItemMagicWeapon::PBItemMagicWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemMagicWeapon::InitAsDefaultInstance() {  base_ = const_cast< ::PBEquipment*>(&::PBEquipment::default_instance());
}

PBItemMagicWeapon::PBItemMagicWeapon(const PBItemMagicWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemMagicWeapon::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  showlevel_ = const_cast< ::std::string*>(&_default_showlevel_);
  showtype_ = const_cast< ::std::string*>(&_default_showtype_);
  newweaponname_ = const_cast< ::std::string*>(&_default_newweaponname_);
  ummibuffid_ = 0u;
  initlevel_ = 0u;
  initmp_ = 0u;
  inithp_ = 0u;
  initmaxmp_ = 0u;
  initmaxhp_ = 0u;
  initbase_ = 0u;
  initshape_ = 0u;
  initeffect_ = 0u;
  initspir_ = 0u;
  incmaxmp_ = 0u;
  incmaxhp_ = 0u;
  mpincvalue_ = 0u;
  hpincvalue_ = 0u;
  mpincvaluepermagic_ = 0u;
  hpincvaluepermagic_ = 0u;
  attackinc_ = 0u;
  recovinc_ = 0u;
  maxmpinc_ = 0u;
  maxhpinc_ = 0u;
  deadlineinc_ = 0u;
  canusebook_ = 0u;
  getskillscl_ = 0u;
  leveltableid_ = 0u;
  skillboxtableid_ = 0u;
  dieoffhp_ = 0u;
  projudgecost_ = 0u;
  dispresname_ = const_cast< ::std::string*>(&_default_dispresname_);
  defaultskill_ = 0u;
  defaultskill2_ = 0u;
  judgeefftableid_ = 0u;
  judgespirtableid_ = 0u;
  levelquotietytabid_ = 0u;
  decomposetabid_ = 0u;
  lvbynum_ = 0u;
  quickuptabid_ = 0u;
  upleveltabid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemMagicWeapon::~PBItemMagicWeapon() {
  SharedDtor();
}

void PBItemMagicWeapon::SharedDtor() {
  if (showlevel_ != &_default_showlevel_) {
    delete showlevel_;
  }
  if (showtype_ != &_default_showtype_) {
    delete showtype_;
  }
  if (newweaponname_ != &_default_newweaponname_) {
    delete newweaponname_;
  }
  if (dispresname_ != &_default_dispresname_) {
    delete dispresname_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

const ::google::protobuf::Descriptor* PBItemMagicWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemMagicWeapon_descriptor_;
}

const PBItemMagicWeapon& PBItemMagicWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemMagicWeapon* PBItemMagicWeapon::default_instance_ = NULL;

PBItemMagicWeapon* PBItemMagicWeapon::New() const {
  return new PBItemMagicWeapon;
}

void PBItemMagicWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::PBEquipment::Clear();
    }
    if (_has_bit(1)) {
      if (showlevel_ != &_default_showlevel_) {
        showlevel_->clear();
      }
    }
    if (_has_bit(2)) {
      if (showtype_ != &_default_showtype_) {
        showtype_->clear();
      }
    }
    if (_has_bit(3)) {
      if (newweaponname_ != &_default_newweaponname_) {
        newweaponname_->clear();
      }
    }
    ummibuffid_ = 0u;
    initlevel_ = 0u;
    initmp_ = 0u;
    inithp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    initmaxmp_ = 0u;
    initmaxhp_ = 0u;
    initbase_ = 0u;
    initshape_ = 0u;
    initeffect_ = 0u;
    initspir_ = 0u;
    incmaxmp_ = 0u;
    incmaxhp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mpincvalue_ = 0u;
    hpincvalue_ = 0u;
    mpincvaluepermagic_ = 0u;
    hpincvaluepermagic_ = 0u;
    attackinc_ = 0u;
    recovinc_ = 0u;
    maxmpinc_ = 0u;
    maxhpinc_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    deadlineinc_ = 0u;
    canusebook_ = 0u;
    getskillscl_ = 0u;
    leveltableid_ = 0u;
    skillboxtableid_ = 0u;
    dieoffhp_ = 0u;
    projudgecost_ = 0u;
    if (_has_bit(31)) {
      if (dispresname_ != &_default_dispresname_) {
        dispresname_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    defaultskill_ = 0u;
    defaultskill2_ = 0u;
    judgeefftableid_ = 0u;
    judgespirtableid_ = 0u;
    levelquotietytabid_ = 0u;
    decomposetabid_ = 0u;
    lvbynum_ = 0u;
    quickuptabid_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    upleveltabid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemMagicWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBEquipment Base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(18)) goto parse_ShowLevel;
        break;
      }
      
      // optional string ShowLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_showlevel()));
        if (input->ExpectTag(26)) goto parse_ShowType;
        break;
      }
      
      // optional string ShowType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowType:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_showtype()));
        if (input->ExpectTag(34)) goto parse_NewWeaponName;
        break;
      }
      
      // optional string NewWeaponName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_NewWeaponName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_newweaponname()));
        if (input->ExpectTag(40)) goto parse_UmmiBuffID;
        break;
      }
      
      // optional uint32 UmmiBuffID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UmmiBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ummibuffid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_InitLevel;
        break;
      }
      
      // optional uint32 InitLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_InitMp;
        break;
      }
      
      // optional uint32 InitMp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmp_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_InitHp;
        break;
      }
      
      // optional uint32 InitHp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inithp_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_InitMaxMp;
        break;
      }
      
      // optional uint32 InitMaxMp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMaxMp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmaxmp_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_InitMaxHp;
        break;
      }
      
      // optional uint32 InitMaxHp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitMaxHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initmaxhp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_InitBase;
        break;
      }
      
      // optional uint32 InitBase = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitBase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initbase_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_InitShape;
        break;
      }
      
      // optional uint32 InitShape = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitShape:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initshape_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_InitEffect;
        break;
      }
      
      // optional uint32 InitEffect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitEffect:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initeffect_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_InitSpir;
        break;
      }
      
      // optional uint32 InitSpir = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSpir:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initspir_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_IncMaxMp;
        break;
      }
      
      // optional uint32 IncMaxMp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncMaxMp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incmaxmp_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_IncMaxHp;
        break;
      }
      
      // optional uint32 IncMaxHp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncMaxHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incmaxhp_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MPIncValue;
        break;
      }
      
      // optional uint32 MPIncValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPIncValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpincvalue_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_HPIncValue;
        break;
      }
      
      // optional uint32 HPIncValue = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPIncValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpincvalue_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_MPIncValuePerMagic;
        break;
      }
      
      // optional uint32 MPIncValuePerMagic = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MPIncValuePerMagic:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mpincvaluepermagic_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_HPIncValuePerMagic;
        break;
      }
      
      // optional uint32 HPIncValuePerMagic = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HPIncValuePerMagic:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hpincvaluepermagic_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_AttackInc;
        break;
      }
      
      // optional uint32 AttackInc = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttackInc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attackinc_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_RecovInc;
        break;
      }
      
      // optional uint32 RecovInc = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RecovInc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recovinc_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_MaxMPInc;
        break;
      }
      
      // optional uint32 MaxMPInc = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMPInc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmpinc_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_MaxHPInc;
        break;
      }
      
      // optional uint32 MaxHPInc = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHPInc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhpinc_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_DeadLineInc;
        break;
      }
      
      // optional uint32 DeadLineInc = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeadLineInc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deadlineinc_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_CanUseBook;
        break;
      }
      
      // optional uint32 CanUseBook = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanUseBook:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canusebook_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_GetSkillScl;
        break;
      }
      
      // optional uint32 GetSkillScl = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GetSkillScl:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &getskillscl_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_LevelTableID;
        break;
      }
      
      // optional uint32 LevelTableID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leveltableid_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_SkillBoxTableID;
        break;
      }
      
      // optional uint32 SkillBoxTableID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxtableid_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_DieOffHp;
        break;
      }
      
      // optional uint32 DieOffHp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DieOffHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dieoffhp_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_ProJudgeCost;
        break;
      }
      
      // optional uint32 ProJudgeCost = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProJudgeCost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &projudgecost_));
        _set_bit(30);
        if (input->ExpectTag(258)) goto parse_DispResName;
        break;
      }
      
      // optional string DispResName = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DispResName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_dispresname()));
        if (input->ExpectTag(264)) goto parse_DefaultSkill;
        break;
      }
      
      // optional uint32 DefaultSkill = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefaultSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &defaultskill_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_DefaultSkill2;
        break;
      }
      
      // optional uint32 DefaultSkill2 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefaultSkill2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &defaultskill2_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_JudgeEffTableID;
        break;
      }
      
      // optional uint32 JudgeEffTableID = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeEffTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgeefftableid_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_JudgeSpirTableID;
        break;
      }
      
      // optional uint32 JudgeSpirTableID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeSpirTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgespirtableid_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_LevelQuotietyTabID;
        break;
      }
      
      // optional uint32 LevelQuotietyTabID = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelQuotietyTabID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelquotietytabid_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_DecomposeTabID;
        break;
      }
      
      // optional uint32 DecomposeTabID = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DecomposeTabID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &decomposetabid_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_LvByNum;
        break;
      }
      
      // optional uint32 LvByNum = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LvByNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lvbynum_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_QuickUpTabID;
        break;
      }
      
      // optional uint32 QuickUpTabID = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QuickUpTabID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &quickuptabid_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_UpLevelTabID;
        break;
      }
      
      // optional uint32 UpLevelTabID = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpLevelTabID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upleveltabid_));
        _set_bit(40);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemMagicWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemMagicWeapon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBEquipment Base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->base(), output);
  }
  
  // optional string ShowLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->showlevel(), output);
  }
  
  // optional string ShowType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->showtype(), output);
  }
  
  // optional string NewWeaponName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->newweaponname(), output);
  }
  
  // optional uint32 UmmiBuffID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->ummibuffid(), output);
  }
  
  // optional uint32 InitLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->initlevel(), output);
  }
  
  // optional uint32 InitMp = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->initmp(), output);
  }
  
  // optional uint32 InitHp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->inithp(), output);
  }
  
  // optional uint32 InitMaxMp = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->initmaxmp(), output);
  }
  
  // optional uint32 InitMaxHp = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->initmaxhp(), output);
  }
  
  // optional uint32 InitBase = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->initbase(), output);
  }
  
  // optional uint32 InitShape = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->initshape(), output);
  }
  
  // optional uint32 InitEffect = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->initeffect(), output);
  }
  
  // optional uint32 InitSpir = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->initspir(), output);
  }
  
  // optional uint32 IncMaxMp = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->incmaxmp(), output);
  }
  
  // optional uint32 IncMaxHp = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->incmaxhp(), output);
  }
  
  // optional uint32 MPIncValue = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->mpincvalue(), output);
  }
  
  // optional uint32 HPIncValue = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->hpincvalue(), output);
  }
  
  // optional uint32 MPIncValuePerMagic = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->mpincvaluepermagic(), output);
  }
  
  // optional uint32 HPIncValuePerMagic = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->hpincvaluepermagic(), output);
  }
  
  // optional uint32 AttackInc = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->attackinc(), output);
  }
  
  // optional uint32 RecovInc = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->recovinc(), output);
  }
  
  // optional uint32 MaxMPInc = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->maxmpinc(), output);
  }
  
  // optional uint32 MaxHPInc = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->maxhpinc(), output);
  }
  
  // optional uint32 DeadLineInc = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->deadlineinc(), output);
  }
  
  // optional uint32 CanUseBook = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->canusebook(), output);
  }
  
  // optional uint32 GetSkillScl = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->getskillscl(), output);
  }
  
  // optional uint32 LevelTableID = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->leveltableid(), output);
  }
  
  // optional uint32 SkillBoxTableID = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->skillboxtableid(), output);
  }
  
  // optional uint32 DieOffHp = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->dieoffhp(), output);
  }
  
  // optional uint32 ProJudgeCost = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->projudgecost(), output);
  }
  
  // optional string DispResName = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteString(32, this->dispresname(), output);
  }
  
  // optional uint32 DefaultSkill = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->defaultskill(), output);
  }
  
  // optional uint32 DefaultSkill2 = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->defaultskill2(), output);
  }
  
  // optional uint32 JudgeEffTableID = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->judgeefftableid(), output);
  }
  
  // optional uint32 JudgeSpirTableID = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->judgespirtableid(), output);
  }
  
  // optional uint32 LevelQuotietyTabID = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->levelquotietytabid(), output);
  }
  
  // optional uint32 DecomposeTabID = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->decomposetabid(), output);
  }
  
  // optional uint32 LvByNum = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->lvbynum(), output);
  }
  
  // optional uint32 QuickUpTabID = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->quickuptabid(), output);
  }
  
  // optional uint32 UpLevelTabID = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->upleveltabid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemMagicWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBEquipment Base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->base(), target);
  }
  
  // optional string ShowLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->showlevel(), target);
  }
  
  // optional string ShowType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->showtype(), target);
  }
  
  // optional string NewWeaponName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->newweaponname(), target);
  }
  
  // optional uint32 UmmiBuffID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->ummibuffid(), target);
  }
  
  // optional uint32 InitLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->initlevel(), target);
  }
  
  // optional uint32 InitMp = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->initmp(), target);
  }
  
  // optional uint32 InitHp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->inithp(), target);
  }
  
  // optional uint32 InitMaxMp = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->initmaxmp(), target);
  }
  
  // optional uint32 InitMaxHp = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->initmaxhp(), target);
  }
  
  // optional uint32 InitBase = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->initbase(), target);
  }
  
  // optional uint32 InitShape = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->initshape(), target);
  }
  
  // optional uint32 InitEffect = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->initeffect(), target);
  }
  
  // optional uint32 InitSpir = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->initspir(), target);
  }
  
  // optional uint32 IncMaxMp = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->incmaxmp(), target);
  }
  
  // optional uint32 IncMaxHp = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->incmaxhp(), target);
  }
  
  // optional uint32 MPIncValue = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->mpincvalue(), target);
  }
  
  // optional uint32 HPIncValue = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->hpincvalue(), target);
  }
  
  // optional uint32 MPIncValuePerMagic = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->mpincvaluepermagic(), target);
  }
  
  // optional uint32 HPIncValuePerMagic = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->hpincvaluepermagic(), target);
  }
  
  // optional uint32 AttackInc = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->attackinc(), target);
  }
  
  // optional uint32 RecovInc = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->recovinc(), target);
  }
  
  // optional uint32 MaxMPInc = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->maxmpinc(), target);
  }
  
  // optional uint32 MaxHPInc = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->maxhpinc(), target);
  }
  
  // optional uint32 DeadLineInc = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->deadlineinc(), target);
  }
  
  // optional uint32 CanUseBook = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->canusebook(), target);
  }
  
  // optional uint32 GetSkillScl = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->getskillscl(), target);
  }
  
  // optional uint32 LevelTableID = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->leveltableid(), target);
  }
  
  // optional uint32 SkillBoxTableID = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->skillboxtableid(), target);
  }
  
  // optional uint32 DieOffHp = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->dieoffhp(), target);
  }
  
  // optional uint32 ProJudgeCost = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->projudgecost(), target);
  }
  
  // optional string DispResName = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(32, this->dispresname(), target);
  }
  
  // optional uint32 DefaultSkill = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->defaultskill(), target);
  }
  
  // optional uint32 DefaultSkill2 = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->defaultskill2(), target);
  }
  
  // optional uint32 JudgeEffTableID = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->judgeefftableid(), target);
  }
  
  // optional uint32 JudgeSpirTableID = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->judgespirtableid(), target);
  }
  
  // optional uint32 LevelQuotietyTabID = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->levelquotietytabid(), target);
  }
  
  // optional uint32 DecomposeTabID = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->decomposetabid(), target);
  }
  
  // optional uint32 LvByNum = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->lvbynum(), target);
  }
  
  // optional uint32 QuickUpTabID = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->quickuptabid(), target);
  }
  
  // optional uint32 UpLevelTabID = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->upleveltabid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemMagicWeapon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBEquipment Base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional string ShowLevel = 2;
    if (has_showlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->showlevel());
    }
    
    // optional string ShowType = 3;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->showtype());
    }
    
    // optional string NewWeaponName = 4;
    if (has_newweaponname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->newweaponname());
    }
    
    // optional uint32 UmmiBuffID = 5;
    if (has_ummibuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ummibuffid());
    }
    
    // optional uint32 InitLevel = 6;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initlevel());
    }
    
    // optional uint32 InitMp = 7;
    if (has_initmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmp());
    }
    
    // optional uint32 InitHp = 8;
    if (has_inithp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inithp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InitMaxMp = 9;
    if (has_initmaxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmaxmp());
    }
    
    // optional uint32 InitMaxHp = 10;
    if (has_initmaxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initmaxhp());
    }
    
    // optional uint32 InitBase = 11;
    if (has_initbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initbase());
    }
    
    // optional uint32 InitShape = 12;
    if (has_initshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initshape());
    }
    
    // optional uint32 InitEffect = 13;
    if (has_initeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initeffect());
    }
    
    // optional uint32 InitSpir = 14;
    if (has_initspir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initspir());
    }
    
    // optional uint32 IncMaxMp = 15;
    if (has_incmaxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incmaxmp());
    }
    
    // optional uint32 IncMaxHp = 16;
    if (has_incmaxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incmaxhp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MPIncValue = 17;
    if (has_mpincvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpincvalue());
    }
    
    // optional uint32 HPIncValue = 18;
    if (has_hpincvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpincvalue());
    }
    
    // optional uint32 MPIncValuePerMagic = 19;
    if (has_mpincvaluepermagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mpincvaluepermagic());
    }
    
    // optional uint32 HPIncValuePerMagic = 20;
    if (has_hpincvaluepermagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hpincvaluepermagic());
    }
    
    // optional uint32 AttackInc = 21;
    if (has_attackinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attackinc());
    }
    
    // optional uint32 RecovInc = 22;
    if (has_recovinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recovinc());
    }
    
    // optional uint32 MaxMPInc = 23;
    if (has_maxmpinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmpinc());
    }
    
    // optional uint32 MaxHPInc = 24;
    if (has_maxhpinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhpinc());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 DeadLineInc = 25;
    if (has_deadlineinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deadlineinc());
    }
    
    // optional uint32 CanUseBook = 26;
    if (has_canusebook()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canusebook());
    }
    
    // optional uint32 GetSkillScl = 27;
    if (has_getskillscl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->getskillscl());
    }
    
    // optional uint32 LevelTableID = 28;
    if (has_leveltableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leveltableid());
    }
    
    // optional uint32 SkillBoxTableID = 29;
    if (has_skillboxtableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxtableid());
    }
    
    // optional uint32 DieOffHp = 30;
    if (has_dieoffhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dieoffhp());
    }
    
    // optional uint32 ProJudgeCost = 31;
    if (has_projudgecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->projudgecost());
    }
    
    // optional string DispResName = 32;
    if (has_dispresname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->dispresname());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 DefaultSkill = 33;
    if (has_defaultskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->defaultskill());
    }
    
    // optional uint32 DefaultSkill2 = 34;
    if (has_defaultskill2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->defaultskill2());
    }
    
    // optional uint32 JudgeEffTableID = 35;
    if (has_judgeefftableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgeefftableid());
    }
    
    // optional uint32 JudgeSpirTableID = 36;
    if (has_judgespirtableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgespirtableid());
    }
    
    // optional uint32 LevelQuotietyTabID = 37;
    if (has_levelquotietytabid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelquotietytabid());
    }
    
    // optional uint32 DecomposeTabID = 38;
    if (has_decomposetabid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->decomposetabid());
    }
    
    // optional uint32 LvByNum = 39;
    if (has_lvbynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lvbynum());
    }
    
    // optional uint32 QuickUpTabID = 40;
    if (has_quickuptabid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->quickuptabid());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 UpLevelTabID = 41;
    if (has_upleveltabid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upleveltabid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemMagicWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemMagicWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemMagicWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemMagicWeapon::MergeFrom(const PBItemMagicWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::PBEquipment::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_showlevel(from.showlevel());
    }
    if (from._has_bit(2)) {
      set_showtype(from.showtype());
    }
    if (from._has_bit(3)) {
      set_newweaponname(from.newweaponname());
    }
    if (from._has_bit(4)) {
      set_ummibuffid(from.ummibuffid());
    }
    if (from._has_bit(5)) {
      set_initlevel(from.initlevel());
    }
    if (from._has_bit(6)) {
      set_initmp(from.initmp());
    }
    if (from._has_bit(7)) {
      set_inithp(from.inithp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_initmaxmp(from.initmaxmp());
    }
    if (from._has_bit(9)) {
      set_initmaxhp(from.initmaxhp());
    }
    if (from._has_bit(10)) {
      set_initbase(from.initbase());
    }
    if (from._has_bit(11)) {
      set_initshape(from.initshape());
    }
    if (from._has_bit(12)) {
      set_initeffect(from.initeffect());
    }
    if (from._has_bit(13)) {
      set_initspir(from.initspir());
    }
    if (from._has_bit(14)) {
      set_incmaxmp(from.incmaxmp());
    }
    if (from._has_bit(15)) {
      set_incmaxhp(from.incmaxhp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_mpincvalue(from.mpincvalue());
    }
    if (from._has_bit(17)) {
      set_hpincvalue(from.hpincvalue());
    }
    if (from._has_bit(18)) {
      set_mpincvaluepermagic(from.mpincvaluepermagic());
    }
    if (from._has_bit(19)) {
      set_hpincvaluepermagic(from.hpincvaluepermagic());
    }
    if (from._has_bit(20)) {
      set_attackinc(from.attackinc());
    }
    if (from._has_bit(21)) {
      set_recovinc(from.recovinc());
    }
    if (from._has_bit(22)) {
      set_maxmpinc(from.maxmpinc());
    }
    if (from._has_bit(23)) {
      set_maxhpinc(from.maxhpinc());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_deadlineinc(from.deadlineinc());
    }
    if (from._has_bit(25)) {
      set_canusebook(from.canusebook());
    }
    if (from._has_bit(26)) {
      set_getskillscl(from.getskillscl());
    }
    if (from._has_bit(27)) {
      set_leveltableid(from.leveltableid());
    }
    if (from._has_bit(28)) {
      set_skillboxtableid(from.skillboxtableid());
    }
    if (from._has_bit(29)) {
      set_dieoffhp(from.dieoffhp());
    }
    if (from._has_bit(30)) {
      set_projudgecost(from.projudgecost());
    }
    if (from._has_bit(31)) {
      set_dispresname(from.dispresname());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_defaultskill(from.defaultskill());
    }
    if (from._has_bit(33)) {
      set_defaultskill2(from.defaultskill2());
    }
    if (from._has_bit(34)) {
      set_judgeefftableid(from.judgeefftableid());
    }
    if (from._has_bit(35)) {
      set_judgespirtableid(from.judgespirtableid());
    }
    if (from._has_bit(36)) {
      set_levelquotietytabid(from.levelquotietytabid());
    }
    if (from._has_bit(37)) {
      set_decomposetabid(from.decomposetabid());
    }
    if (from._has_bit(38)) {
      set_lvbynum(from.lvbynum());
    }
    if (from._has_bit(39)) {
      set_quickuptabid(from.quickuptabid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_upleveltabid(from.upleveltabid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemMagicWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMagicWeapon::CopyFrom(const PBItemMagicWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMagicWeapon::Swap(PBItemMagicWeapon* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(showlevel_, other->showlevel_);
    std::swap(showtype_, other->showtype_);
    std::swap(newweaponname_, other->newweaponname_);
    std::swap(ummibuffid_, other->ummibuffid_);
    std::swap(initlevel_, other->initlevel_);
    std::swap(initmp_, other->initmp_);
    std::swap(inithp_, other->inithp_);
    std::swap(initmaxmp_, other->initmaxmp_);
    std::swap(initmaxhp_, other->initmaxhp_);
    std::swap(initbase_, other->initbase_);
    std::swap(initshape_, other->initshape_);
    std::swap(initeffect_, other->initeffect_);
    std::swap(initspir_, other->initspir_);
    std::swap(incmaxmp_, other->incmaxmp_);
    std::swap(incmaxhp_, other->incmaxhp_);
    std::swap(mpincvalue_, other->mpincvalue_);
    std::swap(hpincvalue_, other->hpincvalue_);
    std::swap(mpincvaluepermagic_, other->mpincvaluepermagic_);
    std::swap(hpincvaluepermagic_, other->hpincvaluepermagic_);
    std::swap(attackinc_, other->attackinc_);
    std::swap(recovinc_, other->recovinc_);
    std::swap(maxmpinc_, other->maxmpinc_);
    std::swap(maxhpinc_, other->maxhpinc_);
    std::swap(deadlineinc_, other->deadlineinc_);
    std::swap(canusebook_, other->canusebook_);
    std::swap(getskillscl_, other->getskillscl_);
    std::swap(leveltableid_, other->leveltableid_);
    std::swap(skillboxtableid_, other->skillboxtableid_);
    std::swap(dieoffhp_, other->dieoffhp_);
    std::swap(projudgecost_, other->projudgecost_);
    std::swap(dispresname_, other->dispresname_);
    std::swap(defaultskill_, other->defaultskill_);
    std::swap(defaultskill2_, other->defaultskill2_);
    std::swap(judgeefftableid_, other->judgeefftableid_);
    std::swap(judgespirtableid_, other->judgespirtableid_);
    std::swap(levelquotietytabid_, other->levelquotietytabid_);
    std::swap(decomposetabid_, other->decomposetabid_);
    std::swap(lvbynum_, other->lvbynum_);
    std::swap(quickuptabid_, other->quickuptabid_);
    std::swap(upleveltabid_, other->upleveltabid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemMagicWeapon::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemMagicWeapon::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemMagicWeapon::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemMagicWeapon_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSingleSkillStorage::kSkillIDFieldNumber;
const int PBSingleSkillStorage::kFirstProbFieldNumber;
const int PBSingleSkillStorage::kOtherProbFieldNumber;
#endif  // !_MSC_VER

PBSingleSkillStorage::PBSingleSkillStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleSkillStorage::InitAsDefaultInstance() {}

PBSingleSkillStorage::PBSingleSkillStorage(const PBSingleSkillStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleSkillStorage::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  firstprob_ = 0u;
  otherprob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleSkillStorage::~PBSingleSkillStorage() {
  SharedDtor();
}

void PBSingleSkillStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleSkillStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleSkillStorage_descriptor_;
}

const PBSingleSkillStorage& PBSingleSkillStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSingleSkillStorage* PBSingleSkillStorage::default_instance_ = NULL;

PBSingleSkillStorage* PBSingleSkillStorage::New() const {
  return new PBSingleSkillStorage;
}

void PBSingleSkillStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    firstprob_ = 0u;
    otherprob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleSkillStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FirstProb;
        break;
      }
      
      // optional uint32 FirstProb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FirstProb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &firstprob_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OtherProb;
        break;
      }
      
      // optional uint32 OtherProb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherProb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &otherprob_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleSkillStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleSkillStorage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 FirstProb = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->firstprob(), output);
  }
  
  // optional uint32 OtherProb = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->otherprob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleSkillStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 FirstProb = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->firstprob(), target);
  }
  
  // optional uint32 OtherProb = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->otherprob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleSkillStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 FirstProb = 2;
    if (has_firstprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->firstprob());
    }
    
    // optional uint32 OtherProb = 3;
    if (has_otherprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->otherprob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleSkillStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleSkillStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleSkillStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleSkillStorage::MergeFrom(const PBSingleSkillStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_firstprob(from.firstprob());
    }
    if (from._has_bit(2)) {
      set_otherprob(from.otherprob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleSkillStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleSkillStorage::CopyFrom(const PBSingleSkillStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleSkillStorage::Swap(PBSingleSkillStorage* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(firstprob_, other->firstprob_);
    std::swap(otherprob_, other->otherprob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleSkillStorage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleSkillStorage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleSkillStorage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleSkillStorage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemMagicStone::kBaseInfoFieldNumber;
const int PBItemMagicStone::kPartFieldNumber;
const int PBItemMagicStone::kAttributeFieldNumber;
const int PBItemMagicStone::kUsedTimesFieldNumber;
const int PBItemMagicStone::kProbabilityFieldNumber;
const int PBItemMagicStone::kLevelLimitFieldNumber;
#endif  // !_MSC_VER

PBItemMagicStone::PBItemMagicStone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemMagicStone::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemMagicStone::PBItemMagicStone(const PBItemMagicStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemMagicStone::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  part_ = 0u;
  usedtimes_ = 0u;
  levellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemMagicStone::~PBItemMagicStone() {
  SharedDtor();
}

void PBItemMagicStone::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemMagicStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemMagicStone_descriptor_;
}

const PBItemMagicStone& PBItemMagicStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemMagicStone* PBItemMagicStone::default_instance_ = NULL;

PBItemMagicStone* PBItemMagicStone::New() const {
  return new PBItemMagicStone;
}

void PBItemMagicStone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    part_ = 0u;
    usedtimes_ = 0u;
    levellimit_ = 0u;
  }
  attribute_.Clear();
  probability_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemMagicStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Part;
        break;
      }
      
      // optional uint32 Part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Part:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &part_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Attribute;
        break;
      }
      
      // repeated uint32 Attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Attribute:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_attribute(value);
        if (input->ExpectTag(24)) goto parse_Attribute;
        if (input->ExpectTag(32)) goto parse_UsedTimes;
        break;
      }
      
      // optional uint32 UsedTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UsedTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usedtimes_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Probability;
        break;
      }
      
      // repeated uint32 Probability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probability:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probability(value);
        if (input->ExpectTag(40)) goto parse_Probability;
        if (input->ExpectTag(48)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemMagicStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemMagicStone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Part = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->part(), output);
  }
  
  // repeated uint32 Attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->attribute(i), output);
  }
  
  // optional uint32 UsedTimes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->usedtimes(), output);
  }
  
  // repeated uint32 Probability = 5;
  for (int i = 0; i < this->probability_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->probability(i), output);
  }
  
  // optional uint32 LevelLimit = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->levellimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemMagicStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Part = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->part(), target);
  }
  
  // repeated uint32 Attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->attribute(i), target);
  }
  
  // optional uint32 UsedTimes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->usedtimes(), target);
  }
  
  // repeated uint32 Probability = 5;
  for (int i = 0; i < this->probability_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->probability(i), target);
  }
  
  // optional uint32 LevelLimit = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->levellimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemMagicStone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->part());
    }
    
    // optional uint32 UsedTimes = 4;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usedtimes());
    }
    
    // optional uint32 LevelLimit = 6;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
  }
  // repeated uint32 Attribute = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->attribute(i));
    }
    total_size += 1 * this->attribute_size() + data_size;
  }
  
  // repeated uint32 Probability = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->probability_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probability(i));
    }
    total_size += 1 * this->probability_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemMagicStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemMagicStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemMagicStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemMagicStone::MergeFrom(const PBItemMagicStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  probability_.MergeFrom(from.probability_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_part(from.part());
    }
    if (from._has_bit(3)) {
      set_usedtimes(from.usedtimes());
    }
    if (from._has_bit(5)) {
      set_levellimit(from.levellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemMagicStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMagicStone::CopyFrom(const PBItemMagicStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemMagicStone::Swap(PBItemMagicStone* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(part_, other->part_);
    attribute_.Swap(&other->attribute_);
    std::swap(usedtimes_, other->usedtimes_);
    probability_.Swap(&other->probability_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemMagicStone::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemMagicStone::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemMagicStone::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemMagicStone_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLifeSkillScroll::kBaseInfoFieldNumber;
const int PBLifeSkillScroll::kComposeIDFieldNumber;
const int PBLifeSkillScroll::kComposeTypeFieldNumber;
#endif  // !_MSC_VER

PBLifeSkillScroll::PBLifeSkillScroll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLifeSkillScroll::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBLifeSkillScroll::PBLifeSkillScroll(const PBLifeSkillScroll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLifeSkillScroll::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  composeid_ = 0u;
  composetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLifeSkillScroll::~PBLifeSkillScroll() {
  SharedDtor();
}

void PBLifeSkillScroll::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBLifeSkillScroll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkillScroll_descriptor_;
}

const PBLifeSkillScroll& PBLifeSkillScroll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLifeSkillScroll* PBLifeSkillScroll::default_instance_ = NULL;

PBLifeSkillScroll* PBLifeSkillScroll::New() const {
  return new PBLifeSkillScroll;
}

void PBLifeSkillScroll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    composeid_ = 0u;
    composetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLifeSkillScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeType;
        break;
      }
      
      // optional uint32 ComposeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLifeSkillScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLifeSkillScroll::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 ComposeID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->composeid(), output);
  }
  
  // optional uint32 ComposeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLifeSkillScroll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 ComposeID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->composeid(), target);
  }
  
  // optional uint32 ComposeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLifeSkillScroll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 ComposeID = 2;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 ComposeType = 3;
    if (has_composetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLifeSkillScroll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLifeSkillScroll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLifeSkillScroll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLifeSkillScroll::MergeFrom(const PBLifeSkillScroll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(2)) {
      set_composetype(from.composetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLifeSkillScroll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkillScroll::CopyFrom(const PBLifeSkillScroll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkillScroll::Swap(PBLifeSkillScroll* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(composeid_, other->composeid_);
    std::swap(composetype_, other->composetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLifeSkillScroll::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLifeSkillScroll::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLifeSkillScroll::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkillScroll_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillStorage::kTempIDFieldNumber;
const int PBSkillStorage::kValuesFieldNumber;
#endif  // !_MSC_VER

PBSkillStorage::PBSkillStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillStorage::InitAsDefaultInstance() {}

PBSkillStorage::PBSkillStorage(const PBSkillStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillStorage::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillStorage::~PBSkillStorage() {
  SharedDtor();
}

void PBSkillStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillStorage_descriptor_;
}

const PBSkillStorage& PBSkillStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkillStorage* PBSkillStorage::default_instance_ = NULL;

PBSkillStorage* PBSkillStorage::New() const {
  return new PBSkillStorage;
}

void PBSkillStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Values;
        break;
      }
      
      // repeated .PBSingleSkillStorage Values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Values:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_values()));
        if (input->ExpectTag(18)) goto parse_Values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillStorage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBSingleSkillStorage Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBSingleSkillStorage Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBSingleSkillStorage Values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillStorage::MergeFrom(const PBSkillStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillStorage::CopyFrom(const PBSkillStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillStorage::Swap(PBSkillStorage* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillStorage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillStorage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillStorage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillStorage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillBoxProperty::kSkillBoxColorFieldNumber;
const int PBSkillBoxProperty::kSkillBoxNeedValFieldNumber;
const int PBSkillBoxProperty::kInitStateFieldNumber;
const int PBSkillBoxProperty::kInitSkillIDFieldNumber;
const int PBSkillBoxProperty::kSkillBoxTypeFieldNumber;
const int PBSkillBoxProperty::kSkillBoxSkillFieldNumber;
const int PBSkillBoxProperty::kSkillBoxActMoneyFieldNumber;
const int PBSkillBoxProperty::kSkillBoxSkillStorageFieldNumber;
#endif  // !_MSC_VER

PBSkillBoxProperty::PBSkillBoxProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillBoxProperty::InitAsDefaultInstance() {}

PBSkillBoxProperty::PBSkillBoxProperty(const PBSkillBoxProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillBoxProperty::SharedCtor() {
  _cached_size_ = 0;
  skillboxcolor_ = 0u;
  skillboxneedval_ = 0u;
  initstate_ = 0u;
  initskillid_ = 0u;
  skillboxtype_ = 0u;
  skillboxskill_ = 0u;
  skillboxactmoney_ = 0u;
  skillboxskillstorage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillBoxProperty::~PBSkillBoxProperty() {
  SharedDtor();
}

void PBSkillBoxProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillBoxProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillBoxProperty_descriptor_;
}

const PBSkillBoxProperty& PBSkillBoxProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSkillBoxProperty* PBSkillBoxProperty::default_instance_ = NULL;

PBSkillBoxProperty* PBSkillBoxProperty::New() const {
  return new PBSkillBoxProperty;
}

void PBSkillBoxProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillboxcolor_ = 0u;
    skillboxneedval_ = 0u;
    initstate_ = 0u;
    initskillid_ = 0u;
    skillboxtype_ = 0u;
    skillboxskill_ = 0u;
    skillboxactmoney_ = 0u;
    skillboxskillstorage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillBoxProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillBoxColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxcolor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SkillBoxNeedVal;
        break;
      }
      
      // optional uint32 SkillBoxNeedVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxNeedVal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxneedval_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_InitState;
        break;
      }
      
      // optional uint32 InitState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initstate_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_InitSkillID;
        break;
      }
      
      // optional uint32 InitSkillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitSkillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initskillid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SkillBoxType;
        break;
      }
      
      // optional uint32 SkillBoxType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxtype_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SkillBoxSkill;
        break;
      }
      
      // optional uint32 SkillBoxSkill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxskill_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SkillBoxActMoney;
        break;
      }
      
      // optional uint32 SkillBoxActMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxActMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxactmoney_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_SkillBoxSkillStorage;
        break;
      }
      
      // optional uint32 SkillBoxSkillStorage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBoxSkillStorage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillboxskillstorage_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillBoxProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillBoxProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillBoxColor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillboxcolor(), output);
  }
  
  // optional uint32 SkillBoxNeedVal = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->skillboxneedval(), output);
  }
  
  // optional uint32 InitState = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->initstate(), output);
  }
  
  // optional uint32 InitSkillID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->initskillid(), output);
  }
  
  // optional uint32 SkillBoxType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->skillboxtype(), output);
  }
  
  // optional uint32 SkillBoxSkill = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->skillboxskill(), output);
  }
  
  // optional uint32 SkillBoxActMoney = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->skillboxactmoney(), output);
  }
  
  // optional uint32 SkillBoxSkillStorage = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->skillboxskillstorage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillBoxProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillBoxColor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillboxcolor(), target);
  }
  
  // optional uint32 SkillBoxNeedVal = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->skillboxneedval(), target);
  }
  
  // optional uint32 InitState = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->initstate(), target);
  }
  
  // optional uint32 InitSkillID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->initskillid(), target);
  }
  
  // optional uint32 SkillBoxType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->skillboxtype(), target);
  }
  
  // optional uint32 SkillBoxSkill = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->skillboxskill(), target);
  }
  
  // optional uint32 SkillBoxActMoney = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->skillboxactmoney(), target);
  }
  
  // optional uint32 SkillBoxSkillStorage = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->skillboxskillstorage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillBoxProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillBoxColor = 1;
    if (has_skillboxcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxcolor());
    }
    
    // optional uint32 SkillBoxNeedVal = 2;
    if (has_skillboxneedval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxneedval());
    }
    
    // optional uint32 InitState = 3;
    if (has_initstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initstate());
    }
    
    // optional uint32 InitSkillID = 4;
    if (has_initskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initskillid());
    }
    
    // optional uint32 SkillBoxType = 5;
    if (has_skillboxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxtype());
    }
    
    // optional uint32 SkillBoxSkill = 6;
    if (has_skillboxskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxskill());
    }
    
    // optional uint32 SkillBoxActMoney = 7;
    if (has_skillboxactmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxactmoney());
    }
    
    // optional uint32 SkillBoxSkillStorage = 8;
    if (has_skillboxskillstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillboxskillstorage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillBoxProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillBoxProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillBoxProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillBoxProperty::MergeFrom(const PBSkillBoxProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillboxcolor(from.skillboxcolor());
    }
    if (from._has_bit(1)) {
      set_skillboxneedval(from.skillboxneedval());
    }
    if (from._has_bit(2)) {
      set_initstate(from.initstate());
    }
    if (from._has_bit(3)) {
      set_initskillid(from.initskillid());
    }
    if (from._has_bit(4)) {
      set_skillboxtype(from.skillboxtype());
    }
    if (from._has_bit(5)) {
      set_skillboxskill(from.skillboxskill());
    }
    if (from._has_bit(6)) {
      set_skillboxactmoney(from.skillboxactmoney());
    }
    if (from._has_bit(7)) {
      set_skillboxskillstorage(from.skillboxskillstorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillBoxProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillBoxProperty::CopyFrom(const PBSkillBoxProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillBoxProperty::Swap(PBSkillBoxProperty* other) {
  if (other != this) {
    std::swap(skillboxcolor_, other->skillboxcolor_);
    std::swap(skillboxneedval_, other->skillboxneedval_);
    std::swap(initstate_, other->initstate_);
    std::swap(initskillid_, other->initskillid_);
    std::swap(skillboxtype_, other->skillboxtype_);
    std::swap(skillboxskill_, other->skillboxskill_);
    std::swap(skillboxactmoney_, other->skillboxactmoney_);
    std::swap(skillboxskillstorage_, other->skillboxskillstorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillBoxProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillBoxProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillBoxProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillBoxProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMagicWeaponSkillBoxProTable::kTempIDFieldNumber;
const int PBMagicWeaponSkillBoxProTable::kValuesFieldNumber;
#endif  // !_MSC_VER

PBMagicWeaponSkillBoxProTable::PBMagicWeaponSkillBoxProTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMagicWeaponSkillBoxProTable::InitAsDefaultInstance() {}

PBMagicWeaponSkillBoxProTable::PBMagicWeaponSkillBoxProTable(const PBMagicWeaponSkillBoxProTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMagicWeaponSkillBoxProTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMagicWeaponSkillBoxProTable::~PBMagicWeaponSkillBoxProTable() {
  SharedDtor();
}

void PBMagicWeaponSkillBoxProTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMagicWeaponSkillBoxProTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponSkillBoxProTable_descriptor_;
}

const PBMagicWeaponSkillBoxProTable& PBMagicWeaponSkillBoxProTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMagicWeaponSkillBoxProTable* PBMagicWeaponSkillBoxProTable::default_instance_ = NULL;

PBMagicWeaponSkillBoxProTable* PBMagicWeaponSkillBoxProTable::New() const {
  return new PBMagicWeaponSkillBoxProTable;
}

void PBMagicWeaponSkillBoxProTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMagicWeaponSkillBoxProTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Values;
        break;
      }
      
      // repeated .PBSkillBoxProperty Values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Values:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_values()));
        if (input->ExpectTag(18)) goto parse_Values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMagicWeaponSkillBoxProTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMagicWeaponSkillBoxProTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBSkillBoxProperty Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMagicWeaponSkillBoxProTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBSkillBoxProperty Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMagicWeaponSkillBoxProTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBSkillBoxProperty Values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMagicWeaponSkillBoxProTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMagicWeaponSkillBoxProTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMagicWeaponSkillBoxProTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMagicWeaponSkillBoxProTable::MergeFrom(const PBMagicWeaponSkillBoxProTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMagicWeaponSkillBoxProTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponSkillBoxProTable::CopyFrom(const PBMagicWeaponSkillBoxProTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMagicWeaponSkillBoxProTable::Swap(PBMagicWeaponSkillBoxProTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMagicWeaponSkillBoxProTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMagicWeaponSkillBoxProTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMagicWeaponSkillBoxProTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMagicWeaponSkillBoxProTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMWProJudgeEffTable::kTempIDFieldNumber;
const int PBMWProJudgeEffTable::kProbFirstFieldNumber;
const int PBMWProJudgeEffTable::kProbSecondFieldNumber;
const int PBMWProJudgeEffTable::kShowNameFieldNumber;
const int PBMWProJudgeEffTable::kJudgeLevelFieldNumber;
#endif  // !_MSC_VER

PBMWProJudgeEffTable::PBMWProJudgeEffTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMWProJudgeEffTable::InitAsDefaultInstance() {}

PBMWProJudgeEffTable::PBMWProJudgeEffTable(const PBMWProJudgeEffTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMWProJudgeEffTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMWProJudgeEffTable::~PBMWProJudgeEffTable() {
  SharedDtor();
}

void PBMWProJudgeEffTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMWProJudgeEffTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMWProJudgeEffTable_descriptor_;
}

const PBMWProJudgeEffTable& PBMWProJudgeEffTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMWProJudgeEffTable* PBMWProJudgeEffTable::default_instance_ = NULL;

PBMWProJudgeEffTable* PBMWProJudgeEffTable::New() const {
  return new PBMWProJudgeEffTable;
}

void PBMWProJudgeEffTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  probfirst_.Clear();
  probsecond_.Clear();
  showname_.Clear();
  judgelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMWProJudgeEffTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ProbFirst;
        break;
      }
      
      // repeated uint32 ProbFirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProbFirst:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probfirst(value);
        if (input->ExpectTag(16)) goto parse_ProbFirst;
        if (input->ExpectTag(24)) goto parse_ProbSecond;
        break;
      }
      
      // repeated uint32 ProbSecond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProbSecond:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probsecond(value);
        if (input->ExpectTag(24)) goto parse_ProbSecond;
        if (input->ExpectTag(34)) goto parse_ShowName;
        break;
      }
      
      // repeated string ShowName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_showname()));
        if (input->ExpectTag(34)) goto parse_ShowName;
        if (input->ExpectTag(40)) goto parse_JudgeLevel;
        break;
      }
      
      // repeated uint32 JudgeLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_judgelevel(value);
        if (input->ExpectTag(40)) goto parse_JudgeLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMWProJudgeEffTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMWProJudgeEffTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 ProbFirst = 2;
  for (int i = 0; i < this->probfirst_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->probfirst(i), output);
  }
  
  // repeated uint32 ProbSecond = 3;
  for (int i = 0; i < this->probsecond_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->probsecond(i), output);
  }
  
  // repeated string ShowName = 4;
  for (int i = 0; i < this->showname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->showname(i), output);
  }
  
  // repeated uint32 JudgeLevel = 5;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->judgelevel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMWProJudgeEffTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 ProbFirst = 2;
  for (int i = 0; i < this->probfirst_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->probfirst(i), target);
  }
  
  // repeated uint32 ProbSecond = 3;
  for (int i = 0; i < this->probsecond_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->probsecond(i), target);
  }
  
  // repeated string ShowName = 4;
  for (int i = 0; i < this->showname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->showname(i), target);
  }
  
  // repeated uint32 JudgeLevel = 5;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->judgelevel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMWProJudgeEffTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 ProbFirst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->probfirst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probfirst(i));
    }
    total_size += 1 * this->probfirst_size() + data_size;
  }
  
  // repeated uint32 ProbSecond = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->probsecond_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probsecond(i));
    }
    total_size += 1 * this->probsecond_size() + data_size;
  }
  
  // repeated string ShowName = 4;
  total_size += 1 * this->showname_size();
  for (int i = 0; i < this->showname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->showname(i));
  }
  
  // repeated uint32 JudgeLevel = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->judgelevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->judgelevel(i));
    }
    total_size += 1 * this->judgelevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMWProJudgeEffTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMWProJudgeEffTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMWProJudgeEffTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMWProJudgeEffTable::MergeFrom(const PBMWProJudgeEffTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  probfirst_.MergeFrom(from.probfirst_);
  probsecond_.MergeFrom(from.probsecond_);
  showname_.MergeFrom(from.showname_);
  judgelevel_.MergeFrom(from.judgelevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMWProJudgeEffTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWProJudgeEffTable::CopyFrom(const PBMWProJudgeEffTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWProJudgeEffTable::Swap(PBMWProJudgeEffTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    probfirst_.Swap(&other->probfirst_);
    probsecond_.Swap(&other->probsecond_);
    showname_.Swap(&other->showname_);
    judgelevel_.Swap(&other->judgelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMWProJudgeEffTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMWProJudgeEffTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMWProJudgeEffTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMWProJudgeEffTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMWProJudgeSpirTable::kTempIDFieldNumber;
const int PBMWProJudgeSpirTable::kProbFirstFieldNumber;
const int PBMWProJudgeSpirTable::kProbSecondFieldNumber;
const int PBMWProJudgeSpirTable::kShowNameFieldNumber;
const int PBMWProJudgeSpirTable::kJudgeLevelFieldNumber;
#endif  // !_MSC_VER

PBMWProJudgeSpirTable::PBMWProJudgeSpirTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMWProJudgeSpirTable::InitAsDefaultInstance() {}

PBMWProJudgeSpirTable::PBMWProJudgeSpirTable(const PBMWProJudgeSpirTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMWProJudgeSpirTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMWProJudgeSpirTable::~PBMWProJudgeSpirTable() {
  SharedDtor();
}

void PBMWProJudgeSpirTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMWProJudgeSpirTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMWProJudgeSpirTable_descriptor_;
}

const PBMWProJudgeSpirTable& PBMWProJudgeSpirTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMWProJudgeSpirTable* PBMWProJudgeSpirTable::default_instance_ = NULL;

PBMWProJudgeSpirTable* PBMWProJudgeSpirTable::New() const {
  return new PBMWProJudgeSpirTable;
}

void PBMWProJudgeSpirTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  probfirst_.Clear();
  probsecond_.Clear();
  showname_.Clear();
  judgelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMWProJudgeSpirTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ProbFirst;
        break;
      }
      
      // repeated uint32 ProbFirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProbFirst:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probfirst(value);
        if (input->ExpectTag(16)) goto parse_ProbFirst;
        if (input->ExpectTag(24)) goto parse_ProbSecond;
        break;
      }
      
      // repeated uint32 ProbSecond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProbSecond:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_probsecond(value);
        if (input->ExpectTag(24)) goto parse_ProbSecond;
        if (input->ExpectTag(34)) goto parse_ShowName;
        break;
      }
      
      // repeated string ShowName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ShowName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_showname()));
        if (input->ExpectTag(34)) goto parse_ShowName;
        if (input->ExpectTag(40)) goto parse_JudgeLevel;
        break;
      }
      
      // repeated uint32 JudgeLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_judgelevel(value);
        if (input->ExpectTag(40)) goto parse_JudgeLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMWProJudgeSpirTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMWProJudgeSpirTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 ProbFirst = 2;
  for (int i = 0; i < this->probfirst_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->probfirst(i), output);
  }
  
  // repeated uint32 ProbSecond = 3;
  for (int i = 0; i < this->probsecond_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->probsecond(i), output);
  }
  
  // repeated string ShowName = 4;
  for (int i = 0; i < this->showname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->showname(i), output);
  }
  
  // repeated uint32 JudgeLevel = 5;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->judgelevel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMWProJudgeSpirTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 ProbFirst = 2;
  for (int i = 0; i < this->probfirst_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->probfirst(i), target);
  }
  
  // repeated uint32 ProbSecond = 3;
  for (int i = 0; i < this->probsecond_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->probsecond(i), target);
  }
  
  // repeated string ShowName = 4;
  for (int i = 0; i < this->showname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->showname(i), target);
  }
  
  // repeated uint32 JudgeLevel = 5;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->judgelevel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMWProJudgeSpirTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 ProbFirst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->probfirst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probfirst(i));
    }
    total_size += 1 * this->probfirst_size() + data_size;
  }
  
  // repeated uint32 ProbSecond = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->probsecond_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->probsecond(i));
    }
    total_size += 1 * this->probsecond_size() + data_size;
  }
  
  // repeated string ShowName = 4;
  total_size += 1 * this->showname_size();
  for (int i = 0; i < this->showname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->showname(i));
  }
  
  // repeated uint32 JudgeLevel = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->judgelevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->judgelevel(i));
    }
    total_size += 1 * this->judgelevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMWProJudgeSpirTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMWProJudgeSpirTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMWProJudgeSpirTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMWProJudgeSpirTable::MergeFrom(const PBMWProJudgeSpirTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  probfirst_.MergeFrom(from.probfirst_);
  probsecond_.MergeFrom(from.probsecond_);
  showname_.MergeFrom(from.showname_);
  judgelevel_.MergeFrom(from.judgelevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMWProJudgeSpirTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWProJudgeSpirTable::CopyFrom(const PBMWProJudgeSpirTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWProJudgeSpirTable::Swap(PBMWProJudgeSpirTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    probfirst_.Swap(&other->probfirst_);
    probsecond_.Swap(&other->probsecond_);
    showname_.Swap(&other->showname_);
    judgelevel_.Swap(&other->judgelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMWProJudgeSpirTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMWProJudgeSpirTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMWProJudgeSpirTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMWProJudgeSpirTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMWLevelQuotietyTab::kTempIDFieldNumber;
const int PBMWLevelQuotietyTab::kKeenQuotietyFieldNumber;
const int PBMWLevelQuotietyTab::kCalmQuotietyFieldNumber;
const int PBMWLevelQuotietyTab::kMagicQuotietyFieldNumber;
const int PBMWLevelQuotietyTab::kBierQuotietyFieldNumber;
const int PBMWLevelQuotietyTab::kImmorQuotietyFieldNumber;
#endif  // !_MSC_VER

PBMWLevelQuotietyTab::PBMWLevelQuotietyTab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMWLevelQuotietyTab::InitAsDefaultInstance() {}

PBMWLevelQuotietyTab::PBMWLevelQuotietyTab(const PBMWLevelQuotietyTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMWLevelQuotietyTab::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMWLevelQuotietyTab::~PBMWLevelQuotietyTab() {
  SharedDtor();
}

void PBMWLevelQuotietyTab::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMWLevelQuotietyTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMWLevelQuotietyTab_descriptor_;
}

const PBMWLevelQuotietyTab& PBMWLevelQuotietyTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMWLevelQuotietyTab* PBMWLevelQuotietyTab::default_instance_ = NULL;

PBMWLevelQuotietyTab* PBMWLevelQuotietyTab::New() const {
  return new PBMWLevelQuotietyTab;
}

void PBMWLevelQuotietyTab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  keenquotiety_.Clear();
  calmquotiety_.Clear();
  magicquotiety_.Clear();
  bierquotiety_.Clear();
  immorquotiety_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMWLevelQuotietyTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_KeenQuotiety;
        break;
      }
      
      // repeated uint32 KeenQuotiety = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KeenQuotiety:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_keenquotiety(value);
        if (input->ExpectTag(16)) goto parse_KeenQuotiety;
        if (input->ExpectTag(24)) goto parse_CalmQuotiety;
        break;
      }
      
      // repeated uint32 CalmQuotiety = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CalmQuotiety:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_calmquotiety(value);
        if (input->ExpectTag(24)) goto parse_CalmQuotiety;
        if (input->ExpectTag(32)) goto parse_MagicQuotiety;
        break;
      }
      
      // repeated uint32 MagicQuotiety = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MagicQuotiety:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_magicquotiety(value);
        if (input->ExpectTag(32)) goto parse_MagicQuotiety;
        if (input->ExpectTag(40)) goto parse_BierQuotiety;
        break;
      }
      
      // repeated uint32 BierQuotiety = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BierQuotiety:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bierquotiety(value);
        if (input->ExpectTag(40)) goto parse_BierQuotiety;
        if (input->ExpectTag(48)) goto parse_ImmorQuotiety;
        break;
      }
      
      // repeated uint32 ImmorQuotiety = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ImmorQuotiety:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_immorquotiety(value);
        if (input->ExpectTag(48)) goto parse_ImmorQuotiety;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMWLevelQuotietyTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMWLevelQuotietyTab::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 KeenQuotiety = 2;
  for (int i = 0; i < this->keenquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->keenquotiety(i), output);
  }
  
  // repeated uint32 CalmQuotiety = 3;
  for (int i = 0; i < this->calmquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->calmquotiety(i), output);
  }
  
  // repeated uint32 MagicQuotiety = 4;
  for (int i = 0; i < this->magicquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->magicquotiety(i), output);
  }
  
  // repeated uint32 BierQuotiety = 5;
  for (int i = 0; i < this->bierquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->bierquotiety(i), output);
  }
  
  // repeated uint32 ImmorQuotiety = 6;
  for (int i = 0; i < this->immorquotiety_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->immorquotiety(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMWLevelQuotietyTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 KeenQuotiety = 2;
  for (int i = 0; i < this->keenquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->keenquotiety(i), target);
  }
  
  // repeated uint32 CalmQuotiety = 3;
  for (int i = 0; i < this->calmquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->calmquotiety(i), target);
  }
  
  // repeated uint32 MagicQuotiety = 4;
  for (int i = 0; i < this->magicquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->magicquotiety(i), target);
  }
  
  // repeated uint32 BierQuotiety = 5;
  for (int i = 0; i < this->bierquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->bierquotiety(i), target);
  }
  
  // repeated uint32 ImmorQuotiety = 6;
  for (int i = 0; i < this->immorquotiety_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->immorquotiety(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMWLevelQuotietyTab::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 KeenQuotiety = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->keenquotiety_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->keenquotiety(i));
    }
    total_size += 1 * this->keenquotiety_size() + data_size;
  }
  
  // repeated uint32 CalmQuotiety = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->calmquotiety_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->calmquotiety(i));
    }
    total_size += 1 * this->calmquotiety_size() + data_size;
  }
  
  // repeated uint32 MagicQuotiety = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->magicquotiety_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->magicquotiety(i));
    }
    total_size += 1 * this->magicquotiety_size() + data_size;
  }
  
  // repeated uint32 BierQuotiety = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bierquotiety_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bierquotiety(i));
    }
    total_size += 1 * this->bierquotiety_size() + data_size;
  }
  
  // repeated uint32 ImmorQuotiety = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->immorquotiety_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->immorquotiety(i));
    }
    total_size += 1 * this->immorquotiety_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMWLevelQuotietyTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMWLevelQuotietyTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMWLevelQuotietyTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMWLevelQuotietyTab::MergeFrom(const PBMWLevelQuotietyTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  keenquotiety_.MergeFrom(from.keenquotiety_);
  calmquotiety_.MergeFrom(from.calmquotiety_);
  magicquotiety_.MergeFrom(from.magicquotiety_);
  bierquotiety_.MergeFrom(from.bierquotiety_);
  immorquotiety_.MergeFrom(from.immorquotiety_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMWLevelQuotietyTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWLevelQuotietyTab::CopyFrom(const PBMWLevelQuotietyTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMWLevelQuotietyTab::Swap(PBMWLevelQuotietyTab* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    keenquotiety_.Swap(&other->keenquotiety_);
    calmquotiety_.Swap(&other->calmquotiety_);
    magicquotiety_.Swap(&other->magicquotiety_);
    bierquotiety_.Swap(&other->bierquotiety_);
    immorquotiety_.Swap(&other->immorquotiety_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMWLevelQuotietyTab::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMWLevelQuotietyTab::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMWLevelQuotietyTab::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMWLevelQuotietyTab_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFuncItem::kBaseInfoFieldNumber;
const int PBFuncItem::kFuncCodeFieldNumber;
const int PBFuncItem::kParamsFieldNumber;
#endif  // !_MSC_VER

PBFuncItem::PBFuncItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFuncItem::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBFuncItem::PBFuncItem(const PBFuncItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFuncItem::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  funccode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFuncItem::~PBFuncItem() {
  SharedDtor();
}

void PBFuncItem::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBFuncItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFuncItem_descriptor_;
}

const PBFuncItem& PBFuncItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBFuncItem* PBFuncItem::default_instance_ = NULL;

PBFuncItem* PBFuncItem::New() const {
  return new PBFuncItem;
}

void PBFuncItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    funccode_ = 0u;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFuncItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_FuncCode;
        break;
      }
      
      // optional uint32 FuncCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FuncCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &funccode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Params;
        break;
      }
      
      // repeated uint32 Params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Params:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_params(value);
        if (input->ExpectTag(24)) goto parse_Params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFuncItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFuncItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 FuncCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->funccode(), output);
  }
  
  // repeated uint32 Params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFuncItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 FuncCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->funccode(), target);
  }
  
  // repeated uint32 Params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFuncItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 FuncCode = 2;
    if (has_funccode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->funccode());
    }
    
  }
  // repeated uint32 Params = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFuncItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFuncItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFuncItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFuncItem::MergeFrom(const PBFuncItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_funccode(from.funccode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFuncItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFuncItem::CopyFrom(const PBFuncItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFuncItem::Swap(PBFuncItem* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(funccode_, other->funccode_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFuncItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFuncItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFuncItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFuncItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEquipExchangeTable::kTempIDFieldNumber;
const int PBEquipExchangeTable::kComposeIDFieldNumber;
const int PBEquipExchangeTable::kExchangeTypeFieldNumber;
#endif  // !_MSC_VER

PBEquipExchangeTable::PBEquipExchangeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipExchangeTable::InitAsDefaultInstance() {}

PBEquipExchangeTable::PBEquipExchangeTable(const PBEquipExchangeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipExchangeTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  exchangetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipExchangeTable::~PBEquipExchangeTable() {
  SharedDtor();
}

void PBEquipExchangeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBEquipExchangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipExchangeTable_descriptor_;
}

const PBEquipExchangeTable& PBEquipExchangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBEquipExchangeTable* PBEquipExchangeTable::default_instance_ = NULL;

PBEquipExchangeTable* PBEquipExchangeTable::New() const {
  return new PBEquipExchangeTable;
}

void PBEquipExchangeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    exchangetype_ = 0u;
  }
  composeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipExchangeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ComposeID;
        break;
      }
      
      // repeated uint32 ComposeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_composeid(value);
        if (input->ExpectTag(16)) goto parse_ComposeID;
        if (input->ExpectTag(24)) goto parse_ExchangeType;
        break;
      }
      
      // optional uint32 ExchangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangetype_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipExchangeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEquipExchangeTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 ComposeID = 2;
  for (int i = 0; i < this->composeid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->composeid(i), output);
  }
  
  // optional uint32 ExchangeType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->exchangetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipExchangeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 ComposeID = 2;
  for (int i = 0; i < this->composeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->composeid(i), target);
  }
  
  // optional uint32 ExchangeType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->exchangetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipExchangeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ExchangeType = 3;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangetype());
    }
    
  }
  // repeated uint32 ComposeID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->composeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->composeid(i));
    }
    total_size += 1 * this->composeid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEquipExchangeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipExchangeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipExchangeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipExchangeTable::MergeFrom(const PBEquipExchangeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  composeid_.MergeFrom(from.composeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_exchangetype(from.exchangetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipExchangeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipExchangeTable::CopyFrom(const PBEquipExchangeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipExchangeTable::Swap(PBEquipExchangeTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    composeid_.Swap(&other->composeid_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEquipExchangeTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEquipExchangeTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEquipExchangeTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEquipExchangeTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMultiBuffEvent::kEventIDFieldNumber;
const int PBMultiBuffEvent::kTeamFlagFieldNumber;
const int PBMultiBuffEvent::kDistanceFieldNumber;
const int PBMultiBuffEvent::kBuffIDFieldNumber;
const int PBMultiBuffEvent::kRepetionIndexFieldNumber;
#endif  // !_MSC_VER

PBMultiBuffEvent::PBMultiBuffEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMultiBuffEvent::InitAsDefaultInstance() {}

PBMultiBuffEvent::PBMultiBuffEvent(const PBMultiBuffEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMultiBuffEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  teamflag_ = 0u;
  distance_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMultiBuffEvent::~PBMultiBuffEvent() {
  SharedDtor();
}

void PBMultiBuffEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMultiBuffEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMultiBuffEvent_descriptor_;
}

const PBMultiBuffEvent& PBMultiBuffEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMultiBuffEvent* PBMultiBuffEvent::default_instance_ = NULL;

PBMultiBuffEvent* PBMultiBuffEvent::New() const {
  return new PBMultiBuffEvent;
}

void PBMultiBuffEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventid_ = 0u;
    teamflag_ = 0u;
    distance_ = 0u;
    buffid_ = 0u;
  }
  repetionindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMultiBuffEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EventID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &eventid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TeamFlag;
        break;
      }
      
      // optional uint32 TeamFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teamflag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Distance;
        break;
      }
      
      // optional uint32 Distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Distance:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &distance_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RepetionIndex;
        break;
      }
      
      // repeated uint32 RepetionIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_repetionindex(value);
        if (input->ExpectTag(40)) goto parse_RepetionIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMultiBuffEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMultiBuffEvent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->eventid(), output);
  }
  
  // optional uint32 TeamFlag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->teamflag(), output);
  }
  
  // optional uint32 Distance = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->distance(), output);
  }
  
  // optional uint32 BuffID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->buffid(), output);
  }
  
  // repeated uint32 RepetionIndex = 5;
  for (int i = 0; i < this->repetionindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->repetionindex(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMultiBuffEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EventID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->eventid(), target);
  }
  
  // optional uint32 TeamFlag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->teamflag(), target);
  }
  
  // optional uint32 Distance = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->distance(), target);
  }
  
  // optional uint32 BuffID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->buffid(), target);
  }
  
  // repeated uint32 RepetionIndex = 5;
  for (int i = 0; i < this->repetionindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->repetionindex(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMultiBuffEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EventID = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->eventid());
    }
    
    // optional uint32 TeamFlag = 2;
    if (has_teamflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teamflag());
    }
    
    // optional uint32 Distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->distance());
    }
    
    // optional uint32 BuffID = 4;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
  }
  // repeated uint32 RepetionIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->repetionindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->repetionindex(i));
    }
    total_size += 1 * this->repetionindex_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMultiBuffEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMultiBuffEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMultiBuffEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMultiBuffEvent::MergeFrom(const PBMultiBuffEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  repetionindex_.MergeFrom(from.repetionindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_eventid(from.eventid());
    }
    if (from._has_bit(1)) {
      set_teamflag(from.teamflag());
    }
    if (from._has_bit(2)) {
      set_distance(from.distance());
    }
    if (from._has_bit(3)) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMultiBuffEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiBuffEvent::CopyFrom(const PBMultiBuffEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiBuffEvent::Swap(PBMultiBuffEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(teamflag_, other->teamflag_);
    std::swap(distance_, other->distance_);
    std::swap(buffid_, other->buffid_);
    repetionindex_.Swap(&other->repetionindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMultiBuffEvent::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMultiBuffEvent::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMultiBuffEvent::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMultiBuffEvent_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMultiBuff::kTempIDFieldNumber;
const int PBMultiBuff::kBuffEventFieldNumber;
const int PBMultiBuff::kParamFieldNumber;
const int PBMultiBuff::kNewBuffFieldNumber;
#endif  // !_MSC_VER

PBMultiBuff::PBMultiBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMultiBuff::InitAsDefaultInstance() {}

PBMultiBuff::PBMultiBuff(const PBMultiBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMultiBuff::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMultiBuff::~PBMultiBuff() {
  SharedDtor();
}

void PBMultiBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMultiBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMultiBuff_descriptor_;
}

const PBMultiBuff& PBMultiBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMultiBuff* PBMultiBuff::default_instance_ = NULL;

PBMultiBuff* PBMultiBuff::New() const {
  return new PBMultiBuff;
}

void PBMultiBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  buffevent_.Clear();
  param_.Clear();
  newbuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMultiBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuffEvent;
        break;
      }
      
      // repeated .PBMultiBuffEvent BuffEvent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffEvent:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_buffevent()));
        if (input->ExpectTag(18)) goto parse_BuffEvent;
        if (input->ExpectTag(24)) goto parse_Param;
        break;
      }
      
      // repeated uint32 Param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_param(value);
        if (input->ExpectTag(24)) goto parse_Param;
        if (input->ExpectTag(32)) goto parse_NewBuff;
        break;
      }
      
      // repeated uint32 NewBuff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewBuff:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_newbuff(value);
        if (input->ExpectTag(32)) goto parse_NewBuff;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMultiBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMultiBuff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBMultiBuffEvent BuffEvent = 2;
  for (int i = 0; i < this->buffevent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buffevent(i), output);
  }
  
  // repeated uint32 Param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->param(i), output);
  }
  
  // repeated uint32 NewBuff = 4;
  for (int i = 0; i < this->newbuff_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->newbuff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMultiBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBMultiBuffEvent BuffEvent = 2;
  for (int i = 0; i < this->buffevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buffevent(i), target);
  }
  
  // repeated uint32 Param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->param(i), target);
  }
  
  // repeated uint32 NewBuff = 4;
  for (int i = 0; i < this->newbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->newbuff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMultiBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBMultiBuffEvent BuffEvent = 2;
  total_size += 1 * this->buffevent_size();
  for (int i = 0; i < this->buffevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->buffevent(i));
  }
  
  // repeated uint32 Param = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }
  
  // repeated uint32 NewBuff = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->newbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->newbuff(i));
    }
    total_size += 1 * this->newbuff_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMultiBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMultiBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMultiBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMultiBuff::MergeFrom(const PBMultiBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffevent_.MergeFrom(from.buffevent_);
  param_.MergeFrom(from.param_);
  newbuff_.MergeFrom(from.newbuff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMultiBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiBuff::CopyFrom(const PBMultiBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiBuff::Swap(PBMultiBuff* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    buffevent_.Swap(&other->buffevent_);
    param_.Swap(&other->param_);
    newbuff_.Swap(&other->newbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMultiBuff::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMultiBuff::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMultiBuff::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMultiBuff_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCDGroupTable::kTempIDFieldNumber;
const int PBCDGroupTable::kCDTimeFieldNumber;
#endif  // !_MSC_VER

PBCDGroupTable::PBCDGroupTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCDGroupTable::InitAsDefaultInstance() {}

PBCDGroupTable::PBCDGroupTable(const PBCDGroupTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCDGroupTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCDGroupTable::~PBCDGroupTable() {
  SharedDtor();
}

void PBCDGroupTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCDGroupTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCDGroupTable_descriptor_;
}

const PBCDGroupTable& PBCDGroupTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCDGroupTable* PBCDGroupTable::default_instance_ = NULL;

PBCDGroupTable* PBCDGroupTable::New() const {
  return new PBCDGroupTable;
}

void PBCDGroupTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  cdtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCDGroupTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CDTime;
        break;
      }
      
      // repeated uint32 CDTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CDTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_cdtime(value);
        if (input->ExpectTag(16)) goto parse_CDTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCDGroupTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCDGroupTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 CDTime = 2;
  for (int i = 0; i < this->cdtime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->cdtime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCDGroupTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 CDTime = 2;
  for (int i = 0; i < this->cdtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->cdtime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCDGroupTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 CDTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cdtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->cdtime(i));
    }
    total_size += 1 * this->cdtime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCDGroupTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCDGroupTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCDGroupTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCDGroupTable::MergeFrom(const PBCDGroupTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdtime_.MergeFrom(from.cdtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCDGroupTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCDGroupTable::CopyFrom(const PBCDGroupTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCDGroupTable::Swap(PBCDGroupTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    cdtime_.Swap(&other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCDGroupTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCDGroupTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCDGroupTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCDGroupTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMetierAp::kMetierFieldNumber;
const int PBMetierAp::kApFieldNumber;
#endif  // !_MSC_VER

PBMetierAp::PBMetierAp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMetierAp::InitAsDefaultInstance() {}

PBMetierAp::PBMetierAp(const PBMetierAp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMetierAp::SharedCtor() {
  _cached_size_ = 0;
  metier_ = 0u;
  ap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMetierAp::~PBMetierAp() {
  SharedDtor();
}

void PBMetierAp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMetierAp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMetierAp_descriptor_;
}

const PBMetierAp& PBMetierAp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMetierAp* PBMetierAp::default_instance_ = NULL;

PBMetierAp* PBMetierAp::New() const {
  return new PBMetierAp;
}

void PBMetierAp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    metier_ = 0u;
    ap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMetierAp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Metier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Ap;
        break;
      }
      
      // optional uint32 Ap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Ap:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ap_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMetierAp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMetierAp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Metier = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->metier(), output);
  }
  
  // optional uint32 Ap = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMetierAp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Metier = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->metier(), target);
  }
  
  // optional uint32 Ap = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMetierAp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Metier = 1;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Ap = 2;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMetierAp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMetierAp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMetierAp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMetierAp::MergeFrom(const PBMetierAp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_metier(from.metier());
    }
    if (from._has_bit(1)) {
      set_ap(from.ap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMetierAp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetierAp::CopyFrom(const PBMetierAp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMetierAp::Swap(PBMetierAp* other) {
  if (other != this) {
    std::swap(metier_, other->metier_);
    std::swap(ap_, other->ap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMetierAp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMetierAp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMetierAp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMetierAp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBApConfig::kTempIDFieldNumber;
const int PBApConfig::kConsumeHookFieldNumber;
const int PBApConfig::kWorldChatFieldNumber;
const int PBApConfig::kCampChatFieldNumber;
const int PBApConfig::kIncApMaxFieldNumber;
const int PBApConfig::kMetierApFieldNumber;
const int PBApConfig::kRedPhysicFieldNumber;
const int PBApConfig::kBluePhysicFieldNumber;
const int PBApConfig::kApPhysicFieldNumber;
const int PBApConfig::kFbHpPhysicFieldNumber;
const int PBApConfig::kFbMpPhysicFieldNumber;
const int PBApConfig::kMendPhysicFieldNumber;
#endif  // !_MSC_VER

PBApConfig::PBApConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApConfig::InitAsDefaultInstance() {}

PBApConfig::PBApConfig(const PBApConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  consumehook_ = 0u;
  worldchat_ = 0u;
  campchat_ = 0u;
  incapmax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApConfig::~PBApConfig() {
  SharedDtor();
}

void PBApConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBApConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApConfig_descriptor_;
}

const PBApConfig& PBApConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBApConfig* PBApConfig::default_instance_ = NULL;

PBApConfig* PBApConfig::New() const {
  return new PBApConfig;
}

void PBApConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    consumehook_ = 0u;
    worldchat_ = 0u;
    campchat_ = 0u;
    incapmax_ = 0u;
  }
  metierap_.Clear();
  redphysic_.Clear();
  bluephysic_.Clear();
  apphysic_.Clear();
  fbhpphysic_.Clear();
  fbmpphysic_.Clear();
  mendphysic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ConsumeHook;
        break;
      }
      
      // optional uint32 ConsumeHook = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConsumeHook:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &consumehook_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WorldChat;
        break;
      }
      
      // optional uint32 WorldChat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldChat:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldchat_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CampChat;
        break;
      }
      
      // optional uint32 CampChat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampChat:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campchat_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IncApMax;
        break;
      }
      
      // optional uint32 IncApMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncApMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incapmax_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_MetierAp;
        break;
      }
      
      // repeated .PBMetierAp MetierAp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MetierAp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_metierap()));
        if (input->ExpectTag(50)) goto parse_MetierAp;
        if (input->ExpectTag(56)) goto parse_RedPhysic;
        break;
      }
      
      // repeated uint32 RedPhysic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedPhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_redphysic(value);
        if (input->ExpectTag(56)) goto parse_RedPhysic;
        if (input->ExpectTag(64)) goto parse_BluePhysic;
        break;
      }
      
      // repeated uint32 BluePhysic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BluePhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bluephysic(value);
        if (input->ExpectTag(64)) goto parse_BluePhysic;
        if (input->ExpectTag(72)) goto parse_ApPhysic;
        break;
      }
      
      // repeated uint32 ApPhysic = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ApPhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_apphysic(value);
        if (input->ExpectTag(72)) goto parse_ApPhysic;
        if (input->ExpectTag(80)) goto parse_FbHpPhysic;
        break;
      }
      
      // repeated uint32 FbHpPhysic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FbHpPhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fbhpphysic(value);
        if (input->ExpectTag(80)) goto parse_FbHpPhysic;
        if (input->ExpectTag(88)) goto parse_FbMpPhysic;
        break;
      }
      
      // repeated uint32 FbMpPhysic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FbMpPhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fbmpphysic(value);
        if (input->ExpectTag(88)) goto parse_FbMpPhysic;
        if (input->ExpectTag(96)) goto parse_MendPhysic;
        break;
      }
      
      // repeated uint32 MendPhysic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MendPhysic:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mendphysic(value);
        if (input->ExpectTag(96)) goto parse_MendPhysic;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBApConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBApConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 ConsumeHook = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->consumehook(), output);
  }
  
  // optional uint32 WorldChat = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->worldchat(), output);
  }
  
  // optional uint32 CampChat = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->campchat(), output);
  }
  
  // optional uint32 IncApMax = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->incapmax(), output);
  }
  
  // repeated .PBMetierAp MetierAp = 6;
  for (int i = 0; i < this->metierap_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->metierap(i), output);
  }
  
  // repeated uint32 RedPhysic = 7;
  for (int i = 0; i < this->redphysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->redphysic(i), output);
  }
  
  // repeated uint32 BluePhysic = 8;
  for (int i = 0; i < this->bluephysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->bluephysic(i), output);
  }
  
  // repeated uint32 ApPhysic = 9;
  for (int i = 0; i < this->apphysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->apphysic(i), output);
  }
  
  // repeated uint32 FbHpPhysic = 10;
  for (int i = 0; i < this->fbhpphysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->fbhpphysic(i), output);
  }
  
  // repeated uint32 FbMpPhysic = 11;
  for (int i = 0; i < this->fbmpphysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->fbmpphysic(i), output);
  }
  
  // repeated uint32 MendPhysic = 12;
  for (int i = 0; i < this->mendphysic_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->mendphysic(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 ConsumeHook = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->consumehook(), target);
  }
  
  // optional uint32 WorldChat = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->worldchat(), target);
  }
  
  // optional uint32 CampChat = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->campchat(), target);
  }
  
  // optional uint32 IncApMax = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->incapmax(), target);
  }
  
  // repeated .PBMetierAp MetierAp = 6;
  for (int i = 0; i < this->metierap_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->metierap(i), target);
  }
  
  // repeated uint32 RedPhysic = 7;
  for (int i = 0; i < this->redphysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->redphysic(i), target);
  }
  
  // repeated uint32 BluePhysic = 8;
  for (int i = 0; i < this->bluephysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->bluephysic(i), target);
  }
  
  // repeated uint32 ApPhysic = 9;
  for (int i = 0; i < this->apphysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->apphysic(i), target);
  }
  
  // repeated uint32 FbHpPhysic = 10;
  for (int i = 0; i < this->fbhpphysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->fbhpphysic(i), target);
  }
  
  // repeated uint32 FbMpPhysic = 11;
  for (int i = 0; i < this->fbmpphysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->fbmpphysic(i), target);
  }
  
  // repeated uint32 MendPhysic = 12;
  for (int i = 0; i < this->mendphysic_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->mendphysic(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 ConsumeHook = 2;
    if (has_consumehook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->consumehook());
    }
    
    // optional uint32 WorldChat = 3;
    if (has_worldchat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldchat());
    }
    
    // optional uint32 CampChat = 4;
    if (has_campchat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campchat());
    }
    
    // optional uint32 IncApMax = 5;
    if (has_incapmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incapmax());
    }
    
  }
  // repeated .PBMetierAp MetierAp = 6;
  total_size += 1 * this->metierap_size();
  for (int i = 0; i < this->metierap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->metierap(i));
  }
  
  // repeated uint32 RedPhysic = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->redphysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->redphysic(i));
    }
    total_size += 1 * this->redphysic_size() + data_size;
  }
  
  // repeated uint32 BluePhysic = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->bluephysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bluephysic(i));
    }
    total_size += 1 * this->bluephysic_size() + data_size;
  }
  
  // repeated uint32 ApPhysic = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->apphysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->apphysic(i));
    }
    total_size += 1 * this->apphysic_size() + data_size;
  }
  
  // repeated uint32 FbHpPhysic = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->fbhpphysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fbhpphysic(i));
    }
    total_size += 1 * this->fbhpphysic_size() + data_size;
  }
  
  // repeated uint32 FbMpPhysic = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->fbmpphysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fbmpphysic(i));
    }
    total_size += 1 * this->fbmpphysic_size() + data_size;
  }
  
  // repeated uint32 MendPhysic = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->mendphysic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mendphysic(i));
    }
    total_size += 1 * this->mendphysic_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBApConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApConfig::MergeFrom(const PBApConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  metierap_.MergeFrom(from.metierap_);
  redphysic_.MergeFrom(from.redphysic_);
  bluephysic_.MergeFrom(from.bluephysic_);
  apphysic_.MergeFrom(from.apphysic_);
  fbhpphysic_.MergeFrom(from.fbhpphysic_);
  fbmpphysic_.MergeFrom(from.fbmpphysic_);
  mendphysic_.MergeFrom(from.mendphysic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_consumehook(from.consumehook());
    }
    if (from._has_bit(2)) {
      set_worldchat(from.worldchat());
    }
    if (from._has_bit(3)) {
      set_campchat(from.campchat());
    }
    if (from._has_bit(4)) {
      set_incapmax(from.incapmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApConfig::CopyFrom(const PBApConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApConfig::Swap(PBApConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(consumehook_, other->consumehook_);
    std::swap(worldchat_, other->worldchat_);
    std::swap(campchat_, other->campchat_);
    std::swap(incapmax_, other->incapmax_);
    metierap_.Swap(&other->metierap_);
    redphysic_.Swap(&other->redphysic_);
    bluephysic_.Swap(&other->bluephysic_);
    apphysic_.Swap(&other->apphysic_);
    fbhpphysic_.Swap(&other->fbhpphysic_);
    fbmpphysic_.Swap(&other->fbmpphysic_);
    mendphysic_.Swap(&other->mendphysic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBApConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBApConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBApConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBApConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLightTable::kTempIDFieldNumber;
const int PBLightTable::kLevelPointFieldNumber;
const int PBLightTable::kJewelPointFieldNumber;
const int PBLightTable::kLevelGrade1FieldNumber;
const int PBLightTable::kJewelGrade1FieldNumber;
const int PBLightTable::kLevelGrade2FieldNumber;
const int PBLightTable::kJewelGrade2FieldNumber;
#endif  // !_MSC_VER

PBLightTable::PBLightTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLightTable::InitAsDefaultInstance() {}

PBLightTable::PBLightTable(const PBLightTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLightTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLightTable::~PBLightTable() {
  SharedDtor();
}

void PBLightTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLightTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLightTable_descriptor_;
}

const PBLightTable& PBLightTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLightTable* PBLightTable::default_instance_ = NULL;

PBLightTable* PBLightTable::New() const {
  return new PBLightTable;
}

void PBLightTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  levelpoint_.Clear();
  jewelpoint_.Clear();
  levelgrade1_.Clear();
  jewelgrade1_.Clear();
  levelgrade2_.Clear();
  jewelgrade2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLightTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelPoint;
        break;
      }
      
      // repeated uint32 LevelPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelPoint:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelpoint(value);
        if (input->ExpectTag(16)) goto parse_LevelPoint;
        if (input->ExpectTag(24)) goto parse_JewelPoint;
        break;
      }
      
      // repeated uint32 JewelPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JewelPoint:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_jewelpoint(value);
        if (input->ExpectTag(24)) goto parse_JewelPoint;
        if (input->ExpectTag(32)) goto parse_LevelGrade1;
        break;
      }
      
      // repeated uint32 LevelGrade1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelGrade1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelgrade1(value);
        if (input->ExpectTag(32)) goto parse_LevelGrade1;
        if (input->ExpectTag(40)) goto parse_JewelGrade1;
        break;
      }
      
      // repeated uint32 JewelGrade1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JewelGrade1:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_jewelgrade1(value);
        if (input->ExpectTag(40)) goto parse_JewelGrade1;
        if (input->ExpectTag(48)) goto parse_LevelGrade2;
        break;
      }
      
      // repeated uint32 LevelGrade2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelGrade2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_levelgrade2(value);
        if (input->ExpectTag(48)) goto parse_LevelGrade2;
        if (input->ExpectTag(56)) goto parse_JewelGrade2;
        break;
      }
      
      // repeated uint32 JewelGrade2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JewelGrade2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_jewelgrade2(value);
        if (input->ExpectTag(56)) goto parse_JewelGrade2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLightTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLightTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 LevelPoint = 2;
  for (int i = 0; i < this->levelpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelpoint(i), output);
  }
  
  // repeated uint32 JewelPoint = 3;
  for (int i = 0; i < this->jewelpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->jewelpoint(i), output);
  }
  
  // repeated uint32 LevelGrade1 = 4;
  for (int i = 0; i < this->levelgrade1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->levelgrade1(i), output);
  }
  
  // repeated uint32 JewelGrade1 = 5;
  for (int i = 0; i < this->jewelgrade1_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->jewelgrade1(i), output);
  }
  
  // repeated uint32 LevelGrade2 = 6;
  for (int i = 0; i < this->levelgrade2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->levelgrade2(i), output);
  }
  
  // repeated uint32 JewelGrade2 = 7;
  for (int i = 0; i < this->jewelgrade2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->jewelgrade2(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLightTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 LevelPoint = 2;
  for (int i = 0; i < this->levelpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelpoint(i), target);
  }
  
  // repeated uint32 JewelPoint = 3;
  for (int i = 0; i < this->jewelpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->jewelpoint(i), target);
  }
  
  // repeated uint32 LevelGrade1 = 4;
  for (int i = 0; i < this->levelgrade1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->levelgrade1(i), target);
  }
  
  // repeated uint32 JewelGrade1 = 5;
  for (int i = 0; i < this->jewelgrade1_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->jewelgrade1(i), target);
  }
  
  // repeated uint32 LevelGrade2 = 6;
  for (int i = 0; i < this->levelgrade2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->levelgrade2(i), target);
  }
  
  // repeated uint32 JewelGrade2 = 7;
  for (int i = 0; i < this->jewelgrade2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->jewelgrade2(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLightTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 LevelPoint = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelpoint(i));
    }
    total_size += 1 * this->levelpoint_size() + data_size;
  }
  
  // repeated uint32 JewelPoint = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->jewelpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->jewelpoint(i));
    }
    total_size += 1 * this->jewelpoint_size() + data_size;
  }
  
  // repeated uint32 LevelGrade1 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelgrade1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelgrade1(i));
    }
    total_size += 1 * this->levelgrade1_size() + data_size;
  }
  
  // repeated uint32 JewelGrade1 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->jewelgrade1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->jewelgrade1(i));
    }
    total_size += 1 * this->jewelgrade1_size() + data_size;
  }
  
  // repeated uint32 LevelGrade2 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelgrade2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->levelgrade2(i));
    }
    total_size += 1 * this->levelgrade2_size() + data_size;
  }
  
  // repeated uint32 JewelGrade2 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->jewelgrade2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->jewelgrade2(i));
    }
    total_size += 1 * this->jewelgrade2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLightTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLightTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLightTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLightTable::MergeFrom(const PBLightTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelpoint_.MergeFrom(from.levelpoint_);
  jewelpoint_.MergeFrom(from.jewelpoint_);
  levelgrade1_.MergeFrom(from.levelgrade1_);
  jewelgrade1_.MergeFrom(from.jewelgrade1_);
  levelgrade2_.MergeFrom(from.levelgrade2_);
  jewelgrade2_.MergeFrom(from.jewelgrade2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLightTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLightTable::CopyFrom(const PBLightTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLightTable::Swap(PBLightTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    levelpoint_.Swap(&other->levelpoint_);
    jewelpoint_.Swap(&other->jewelpoint_);
    levelgrade1_.Swap(&other->levelgrade1_);
    jewelgrade1_.Swap(&other->jewelgrade1_);
    levelgrade2_.Swap(&other->levelgrade2_);
    jewelgrade2_.Swap(&other->jewelgrade2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLightTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLightTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLightTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLightTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWizardTable::kTempIDFieldNumber;
const int PBWizardTable::kExpFieldNumber;
const int PBWizardTable::kKeepRandFieldNumber;
const int PBWizardTable::kTrendRandFieldNumber;
const int PBWizardTable::kTrendResultFieldNumber;
const int PBWizardTable::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBWizardTable::PBWizardTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWizardTable::InitAsDefaultInstance() {}

PBWizardTable::PBWizardTable(const PBWizardTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWizardTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  keeprand_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWizardTable::~PBWizardTable() {
  SharedDtor();
}

void PBWizardTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBWizardTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWizardTable_descriptor_;
}

const PBWizardTable& PBWizardTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBWizardTable* PBWizardTable::default_instance_ = NULL;

PBWizardTable* PBWizardTable::New() const {
  return new PBWizardTable;
}

void PBWizardTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    keeprand_ = 0u;
    money_ = 0u;
  }
  exp_.Clear();
  trendrand_.Clear();
  trendresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWizardTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(16)) goto parse_Exp;
        if (input->ExpectTag(24)) goto parse_KeepRand;
        break;
      }
      
      // optional uint32 KeepRand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KeepRand:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &keeprand_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TrendRand;
        break;
      }
      
      // repeated uint32 TrendRand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TrendRand:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_trendrand(value);
        if (input->ExpectTag(32)) goto parse_TrendRand;
        if (input->ExpectTag(40)) goto parse_TrendResult;
        break;
      }
      
      // repeated uint32 TrendResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TrendResult:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_trendresult(value);
        if (input->ExpectTag(40)) goto parse_TrendResult;
        if (input->ExpectTag(48)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWizardTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWizardTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exp(i), output);
  }
  
  // optional uint32 KeepRand = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->keeprand(), output);
  }
  
  // repeated uint32 TrendRand = 4;
  for (int i = 0; i < this->trendrand_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->trendrand(i), output);
  }
  
  // repeated uint32 TrendResult = 5;
  for (int i = 0; i < this->trendresult_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->trendresult(i), output);
  }
  
  // optional uint32 Money = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWizardTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exp(i), target);
  }
  
  // optional uint32 KeepRand = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->keeprand(), target);
  }
  
  // repeated uint32 TrendRand = 4;
  for (int i = 0; i < this->trendrand_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->trendrand(i), target);
  }
  
  // repeated uint32 TrendResult = 5;
  for (int i = 0; i < this->trendresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->trendresult(i), target);
  }
  
  // optional uint32 Money = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWizardTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 KeepRand = 3;
    if (has_keeprand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->keeprand());
    }
    
    // optional uint32 Money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  // repeated uint32 Exp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  // repeated uint32 TrendRand = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->trendrand_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->trendrand(i));
    }
    total_size += 1 * this->trendrand_size() + data_size;
  }
  
  // repeated uint32 TrendResult = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->trendresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->trendresult(i));
    }
    total_size += 1 * this->trendresult_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWizardTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWizardTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWizardTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWizardTable::MergeFrom(const PBWizardTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  trendrand_.MergeFrom(from.trendrand_);
  trendresult_.MergeFrom(from.trendresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_keeprand(from.keeprand());
    }
    if (from._has_bit(5)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWizardTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWizardTable::CopyFrom(const PBWizardTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWizardTable::Swap(PBWizardTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    exp_.Swap(&other->exp_);
    std::swap(keeprand_, other->keeprand_);
    trendrand_.Swap(&other->trendrand_);
    trendresult_.Swap(&other->trendresult_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWizardTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWizardTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWizardTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWizardTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBJudgeLevel::kJudgeTypeFieldNumber;
const int PBJudgeLevel::kLevelMinFieldNumber;
const int PBJudgeLevel::kLevelMaxFieldNumber;
const int PBJudgeLevel::kStarFieldNumber;
const int PBJudgeLevel::kLevelTypeFieldNumber;
#endif  // !_MSC_VER

PBJudgeLevel::PBJudgeLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBJudgeLevel::InitAsDefaultInstance() {}

PBJudgeLevel::PBJudgeLevel(const PBJudgeLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBJudgeLevel::SharedCtor() {
  _cached_size_ = 0;
  judgetype_ = 0u;
  levelmin_ = 0u;
  levelmax_ = 0u;
  star_ = 0u;
  leveltype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBJudgeLevel::~PBJudgeLevel() {
  SharedDtor();
}

void PBJudgeLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBJudgeLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeLevel_descriptor_;
}

const PBJudgeLevel& PBJudgeLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBJudgeLevel* PBJudgeLevel::default_instance_ = NULL;

PBJudgeLevel* PBJudgeLevel::New() const {
  return new PBJudgeLevel;
}

void PBJudgeLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    judgetype_ = 0u;
    levelmin_ = 0u;
    levelmax_ = 0u;
    star_ = 0u;
    leveltype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBJudgeLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 JudgeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LevelMin;
        break;
      }
      
      // optional uint32 LevelMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmin_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelMax;
        break;
      }
      
      // optional uint32 LevelMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmax_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Star;
        break;
      }
      
      // optional uint32 Star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Star:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &star_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LevelType;
        break;
      }
      
      // optional uint32 LevelType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leveltype_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBJudgeLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBJudgeLevel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 JudgeType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->judgetype(), output);
  }
  
  // optional uint32 LevelMin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->levelmin(), output);
  }
  
  // optional uint32 LevelMax = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levelmax(), output);
  }
  
  // optional uint32 Star = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->star(), output);
  }
  
  // optional uint32 LevelType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->leveltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBJudgeLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 JudgeType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->judgetype(), target);
  }
  
  // optional uint32 LevelMin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->levelmin(), target);
  }
  
  // optional uint32 LevelMax = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levelmax(), target);
  }
  
  // optional uint32 Star = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->star(), target);
  }
  
  // optional uint32 LevelType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->leveltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBJudgeLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 JudgeType = 1;
    if (has_judgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgetype());
    }
    
    // optional uint32 LevelMin = 2;
    if (has_levelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmin());
    }
    
    // optional uint32 LevelMax = 3;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmax());
    }
    
    // optional uint32 Star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->star());
    }
    
    // optional uint32 LevelType = 5;
    if (has_leveltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leveltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBJudgeLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBJudgeLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBJudgeLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBJudgeLevel::MergeFrom(const PBJudgeLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_judgetype(from.judgetype());
    }
    if (from._has_bit(1)) {
      set_levelmin(from.levelmin());
    }
    if (from._has_bit(2)) {
      set_levelmax(from.levelmax());
    }
    if (from._has_bit(3)) {
      set_star(from.star());
    }
    if (from._has_bit(4)) {
      set_leveltype(from.leveltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBJudgeLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeLevel::CopyFrom(const PBJudgeLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeLevel::Swap(PBJudgeLevel* other) {
  if (other != this) {
    std::swap(judgetype_, other->judgetype_);
    std::swap(levelmin_, other->levelmin_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(star_, other->star_);
    std::swap(leveltype_, other->leveltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBJudgeLevel::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBJudgeLevel::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBJudgeLevel::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeLevel_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBJudgeConfig::kTempIDFieldNumber;
const int PBJudgeConfig::kOpenCDFieldNumber;
const int PBJudgeConfig::kJudgeLevelFieldNumber;
const int PBJudgeConfig::kScoreBaseFieldNumber;
const int PBJudgeConfig::kScoreRateFieldNumber;
const int PBJudgeConfig::kScoreLevelFieldNumber;
#endif  // !_MSC_VER

PBJudgeConfig::PBJudgeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBJudgeConfig::InitAsDefaultInstance() {}

PBJudgeConfig::PBJudgeConfig(const PBJudgeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBJudgeConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  opencd_ = 0u;
  scorebase_ = 0u;
  scorerate_ = 0u;
  scorelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBJudgeConfig::~PBJudgeConfig() {
  SharedDtor();
}

void PBJudgeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBJudgeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeConfig_descriptor_;
}

const PBJudgeConfig& PBJudgeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBJudgeConfig* PBJudgeConfig::default_instance_ = NULL;

PBJudgeConfig* PBJudgeConfig::New() const {
  return new PBJudgeConfig;
}

void PBJudgeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    opencd_ = 0u;
    scorebase_ = 0u;
    scorerate_ = 0u;
    scorelevel_ = 0u;
  }
  judgelevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBJudgeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpenCD;
        break;
      }
      
      // optional uint32 OpenCD = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenCD:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &opencd_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_JudgeLevel;
        break;
      }
      
      // repeated .PBJudgeLevel JudgeLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_JudgeLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_judgelevel()));
        if (input->ExpectTag(26)) goto parse_JudgeLevel;
        if (input->ExpectTag(32)) goto parse_ScoreBase;
        break;
      }
      
      // optional uint32 ScoreBase = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ScoreBase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &scorebase_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ScoreRate;
        break;
      }
      
      // optional uint32 ScoreRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ScoreRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &scorerate_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ScoreLevel;
        break;
      }
      
      // optional uint32 ScoreLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ScoreLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &scorelevel_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBJudgeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBJudgeConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 OpenCD = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->opencd(), output);
  }
  
  // repeated .PBJudgeLevel JudgeLevel = 3;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->judgelevel(i), output);
  }
  
  // optional uint32 ScoreBase = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->scorebase(), output);
  }
  
  // optional uint32 ScoreRate = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->scorerate(), output);
  }
  
  // optional uint32 ScoreLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->scorelevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBJudgeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 OpenCD = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->opencd(), target);
  }
  
  // repeated .PBJudgeLevel JudgeLevel = 3;
  for (int i = 0; i < this->judgelevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->judgelevel(i), target);
  }
  
  // optional uint32 ScoreBase = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->scorebase(), target);
  }
  
  // optional uint32 ScoreRate = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->scorerate(), target);
  }
  
  // optional uint32 ScoreLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->scorelevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBJudgeConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 OpenCD = 2;
    if (has_opencd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->opencd());
    }
    
    // optional uint32 ScoreBase = 4;
    if (has_scorebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->scorebase());
    }
    
    // optional uint32 ScoreRate = 5;
    if (has_scorerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->scorerate());
    }
    
    // optional uint32 ScoreLevel = 6;
    if (has_scorelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->scorelevel());
    }
    
  }
  // repeated .PBJudgeLevel JudgeLevel = 3;
  total_size += 1 * this->judgelevel_size();
  for (int i = 0; i < this->judgelevel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->judgelevel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBJudgeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBJudgeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBJudgeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBJudgeConfig::MergeFrom(const PBJudgeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  judgelevel_.MergeFrom(from.judgelevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_opencd(from.opencd());
    }
    if (from._has_bit(3)) {
      set_scorebase(from.scorebase());
    }
    if (from._has_bit(4)) {
      set_scorerate(from.scorerate());
    }
    if (from._has_bit(5)) {
      set_scorelevel(from.scorelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBJudgeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeConfig::CopyFrom(const PBJudgeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBJudgeConfig::Swap(PBJudgeConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(opencd_, other->opencd_);
    judgelevel_.Swap(&other->judgelevel_);
    std::swap(scorebase_, other->scorebase_);
    std::swap(scorerate_, other->scorerate_);
    std::swap(scorelevel_, other->scorelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBJudgeConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBJudgeConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBJudgeConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBJudgeConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPaperValue::kValueFieldNumber;
const int PBPaperValue::kProbalityFieldNumber;
#endif  // !_MSC_VER

PBPaperValue::PBPaperValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPaperValue::InitAsDefaultInstance() {}

PBPaperValue::PBPaperValue(const PBPaperValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPaperValue::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  probality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPaperValue::~PBPaperValue() {
  SharedDtor();
}

void PBPaperValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPaperValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPaperValue_descriptor_;
}

const PBPaperValue& PBPaperValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPaperValue* PBPaperValue::default_instance_ = NULL;

PBPaperValue* PBPaperValue::New() const {
  return new PBPaperValue;
}

void PBPaperValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
    probality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPaperValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Probality;
        break;
      }
      
      // optional uint32 Probality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probality_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPaperValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPaperValue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->value(), output);
  }
  
  // optional uint32 Probality = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->probality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPaperValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->value(), target);
  }
  
  // optional uint32 Probality = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->probality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPaperValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 Probality = 2;
    if (has_probality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPaperValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPaperValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPaperValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPaperValue::MergeFrom(const PBPaperValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
    if (from._has_bit(1)) {
      set_probality(from.probality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPaperValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPaperValue::CopyFrom(const PBPaperValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPaperValue::Swap(PBPaperValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(probality_, other->probality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPaperValue::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPaperValue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPaperValue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPaperValue_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemRedPaper::kBaseInfoFieldNumber;
const int PBItemRedPaper::kBaseChargeFieldNumber;
const int PBItemRedPaper::kMoneyInfoFieldNumber;
const int PBItemRedPaper::kBindMoneyInfoFieldNumber;
const int PBItemRedPaper::kRedPaperTypeFieldNumber;
#endif  // !_MSC_VER

PBItemRedPaper::PBItemRedPaper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemRedPaper::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemRedPaper::PBItemRedPaper(const PBItemRedPaper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemRedPaper::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  basecharge_ = 0u;
  redpapertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemRedPaper::~PBItemRedPaper() {
  SharedDtor();
}

void PBItemRedPaper::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemRedPaper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemRedPaper_descriptor_;
}

const PBItemRedPaper& PBItemRedPaper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemRedPaper* PBItemRedPaper::default_instance_ = NULL;

PBItemRedPaper* PBItemRedPaper::New() const {
  return new PBItemRedPaper;
}

void PBItemRedPaper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    basecharge_ = 0u;
    redpapertype_ = 0u;
  }
  moneyinfo_.Clear();
  bindmoneyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemRedPaper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_BaseCharge;
        break;
      }
      
      // optional uint32 BaseCharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaseCharge:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &basecharge_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MoneyInfo;
        break;
      }
      
      // repeated .PBPaperValue MoneyInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MoneyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_moneyinfo()));
        if (input->ExpectTag(26)) goto parse_MoneyInfo;
        if (input->ExpectTag(34)) goto parse_BindMoneyInfo;
        break;
      }
      
      // repeated .PBPaperValue BindMoneyInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BindMoneyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bindmoneyinfo()));
        if (input->ExpectTag(34)) goto parse_BindMoneyInfo;
        if (input->ExpectTag(40)) goto parse_RedPaperType;
        break;
      }
      
      // optional uint32 RedPaperType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedPaperType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redpapertype_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemRedPaper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemRedPaper::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 BaseCharge = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->basecharge(), output);
  }
  
  // repeated .PBPaperValue MoneyInfo = 3;
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->moneyinfo(i), output);
  }
  
  // repeated .PBPaperValue BindMoneyInfo = 4;
  for (int i = 0; i < this->bindmoneyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->bindmoneyinfo(i), output);
  }
  
  // optional uint32 RedPaperType = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->redpapertype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemRedPaper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 BaseCharge = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->basecharge(), target);
  }
  
  // repeated .PBPaperValue MoneyInfo = 3;
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->moneyinfo(i), target);
  }
  
  // repeated .PBPaperValue BindMoneyInfo = 4;
  for (int i = 0; i < this->bindmoneyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->bindmoneyinfo(i), target);
  }
  
  // optional uint32 RedPaperType = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->redpapertype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemRedPaper::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 BaseCharge = 2;
    if (has_basecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->basecharge());
    }
    
    // optional uint32 RedPaperType = 5;
    if (has_redpapertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redpapertype());
    }
    
  }
  // repeated .PBPaperValue MoneyInfo = 3;
  total_size += 1 * this->moneyinfo_size();
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->moneyinfo(i));
  }
  
  // repeated .PBPaperValue BindMoneyInfo = 4;
  total_size += 1 * this->bindmoneyinfo_size();
  for (int i = 0; i < this->bindmoneyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bindmoneyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemRedPaper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemRedPaper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemRedPaper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemRedPaper::MergeFrom(const PBItemRedPaper& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneyinfo_.MergeFrom(from.moneyinfo_);
  bindmoneyinfo_.MergeFrom(from.bindmoneyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_basecharge(from.basecharge());
    }
    if (from._has_bit(4)) {
      set_redpapertype(from.redpapertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemRedPaper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRedPaper::CopyFrom(const PBItemRedPaper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRedPaper::Swap(PBItemRedPaper* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(basecharge_, other->basecharge_);
    moneyinfo_.Swap(&other->moneyinfo_);
    bindmoneyinfo_.Swap(&other->bindmoneyinfo_);
    std::swap(redpapertype_, other->redpapertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemRedPaper::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemRedPaper::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemRedPaper::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemRedPaper_reflection_;
}

// ===================================================================

const ::std::string PBTrend::_default_name_;
const ::std::string PBTrend::_default_desc_;
#ifndef _MSC_VER
const int PBTrend::kTempIDFieldNumber;
const int PBTrend::kBonusFieldNumber;
const int PBTrend::kNameFieldNumber;
const int PBTrend::kDescFieldNumber;
#endif  // !_MSC_VER

PBTrend::PBTrend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTrend::InitAsDefaultInstance() {}

PBTrend::PBTrend(const PBTrend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTrend::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTrend::~PBTrend() {
  SharedDtor();
}

void PBTrend::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTrend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTrend_descriptor_;
}

const PBTrend& PBTrend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTrend* PBTrend::default_instance_ = NULL;

PBTrend* PBTrend::New() const {
  return new PBTrend;
}

void PBTrend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
  }
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTrend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Bonus;
        break;
      }
      
      // repeated uint32 Bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Bonus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bonus(value);
        if (input->ExpectTag(16)) goto parse_Bonus;
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(34)) goto parse_Desc;
        break;
      }
      
      // optional string Desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Desc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desc()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTrend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTrend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Bonus = 2;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->bonus(i), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional string Desc = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTrend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Bonus = 2;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->bonus(i), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional string Desc = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTrend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desc());
    }
    
  }
  // repeated uint32 Bonus = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bonus(i));
    }
    total_size += 1 * this->bonus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTrend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTrend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTrend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTrend::MergeFrom(const PBTrend& from) {
  GOOGLE_CHECK_NE(&from, this);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTrend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTrend::CopyFrom(const PBTrend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTrend::Swap(PBTrend* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    bonus_.Swap(&other->bonus_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTrend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTrend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTrend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTrend_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAward::kItemIDFieldNumber;
const int PBAward::kItemNumFieldNumber;
#endif  // !_MSC_VER

PBAward::PBAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAward::InitAsDefaultInstance() {}

PBAward::PBAward(const PBAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAward::~PBAward() {
  SharedDtor();
}

void PBAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAward_descriptor_;
}

const PBAward& PBAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAward* PBAward::default_instance_ = NULL;

PBAward* PBAward::New() const {
  return new PBAward;
}

void PBAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAward::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAward::MergeFrom(const PBAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAward::CopyFrom(const PBAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAward::Swap(PBAward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAward::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAward::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAward::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAward_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAchieveAward::kTempIDFieldNumber;
const int PBAchieveAward::kAwardIDFieldNumber;
const int PBAchieveAward::kAwardNumFieldNumber;
const int PBAchieveAward::kPointFieldNumber;
const int PBAchieveAward::kSysMailIDFieldNumber;
#endif  // !_MSC_VER

PBAchieveAward::PBAchieveAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAchieveAward::InitAsDefaultInstance() {}

PBAchieveAward::PBAchieveAward(const PBAchieveAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAchieveAward::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  sysmailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAchieveAward::~PBAchieveAward() {
  SharedDtor();
}

void PBAchieveAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAchieveAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveAward_descriptor_;
}

const PBAchieveAward& PBAchieveAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAchieveAward* PBAchieveAward::default_instance_ = NULL;

PBAchieveAward* PBAchieveAward::New() const {
  return new PBAchieveAward;
}

void PBAchieveAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    sysmailid_ = 0u;
  }
  awardid_.Clear();
  awardnum_.Clear();
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAchieveAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AwardID;
        break;
      }
      
      // repeated uint32 AwardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_awardid(value);
        if (input->ExpectTag(16)) goto parse_AwardID;
        if (input->ExpectTag(24)) goto parse_AwardNum;
        break;
      }
      
      // repeated uint32 AwardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_awardnum(value);
        if (input->ExpectTag(24)) goto parse_AwardNum;
        if (input->ExpectTag(32)) goto parse_Point;
        break;
      }
      
      // repeated uint32 Point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Point:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_point(value);
        if (input->ExpectTag(32)) goto parse_Point;
        if (input->ExpectTag(40)) goto parse_SysMailID;
        break;
      }
      
      // optional uint32 SysMailID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SysMailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sysmailid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAchieveAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAchieveAward::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 AwardID = 2;
  for (int i = 0; i < this->awardid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->awardid(i), output);
  }
  
  // repeated uint32 AwardNum = 3;
  for (int i = 0; i < this->awardnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->awardnum(i), output);
  }
  
  // repeated uint32 Point = 4;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->point(i), output);
  }
  
  // optional uint32 SysMailID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sysmailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAchieveAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 AwardID = 2;
  for (int i = 0; i < this->awardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->awardid(i), target);
  }
  
  // repeated uint32 AwardNum = 3;
  for (int i = 0; i < this->awardnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->awardnum(i), target);
  }
  
  // repeated uint32 Point = 4;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->point(i), target);
  }
  
  // optional uint32 SysMailID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sysmailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAchieveAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 SysMailID = 5;
    if (has_sysmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sysmailid());
    }
    
  }
  // repeated uint32 AwardID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->awardid(i));
    }
    total_size += 1 * this->awardid_size() + data_size;
  }
  
  // repeated uint32 AwardNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->awardnum(i));
    }
    total_size += 1 * this->awardnum_size() + data_size;
  }
  
  // repeated uint32 Point = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->point_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->point(i));
    }
    total_size += 1 * this->point_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAchieveAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAchieveAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAchieveAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAchieveAward::MergeFrom(const PBAchieveAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardid_.MergeFrom(from.awardid_);
  awardnum_.MergeFrom(from.awardnum_);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(4)) {
      set_sysmailid(from.sysmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAchieveAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveAward::CopyFrom(const PBAchieveAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveAward::Swap(PBAchieveAward* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    awardid_.Swap(&other->awardid_);
    awardnum_.Swap(&other->awardnum_);
    point_.Swap(&other->point_);
    std::swap(sysmailid_, other->sysmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAchieveAward::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAchieveAward::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAchieveAward::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveAward_reflection_;
}

// ===================================================================

const ::std::string PBPower::_default_name_;
const ::std::string PBPower::_default_desc_;
const ::std::string PBPower::_default_icon_;
#ifndef _MSC_VER
const int PBPower::kTempIDFieldNumber;
const int PBPower::kNameFieldNumber;
const int PBPower::kDescFieldNumber;
const int PBPower::kTypeFieldNumber;
const int PBPower::kLevelFieldNumber;
const int PBPower::kOfficialFieldNumber;
const int PBPower::kOrderFieldNumber;
const int PBPower::kParam1FieldNumber;
const int PBPower::kParam2FieldNumber;
const int PBPower::kUseTimeFieldNumber;
const int PBPower::kConstructFieldNumber;
const int PBPower::kPowerFieldNumber;
const int PBPower::kMoneyFieldNumber;
const int PBPower::kIconFieldNumber;
const int PBPower::kCountryFieldNumber;
const int PBPower::kAllCountFieldNumber;
const int PBPower::kStartHourFieldNumber;
const int PBPower::kStartMinFieldNumber;
const int PBPower::kEndHourFieldNumber;
const int PBPower::kEndMinFieldNumber;
#endif  // !_MSC_VER

PBPower::PBPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPower::InitAsDefaultInstance() {}

PBPower::PBPower(const PBPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPower::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  type_ = 0u;
  level_ = 0u;
  official_ = 0u;
  order_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  construct_ = 0u;
  power_ = 0u;
  money_ = 0u;
  icon_ = const_cast< ::std::string*>(&_default_icon_);
  country_ = 0u;
  allcount_ = 0u;
  starthour_ = 0u;
  startmin_ = 0u;
  endhour_ = 0u;
  endmin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPower::~PBPower() {
  SharedDtor();
}

void PBPower::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (icon_ != &_default_icon_) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPower_descriptor_;
}

const PBPower& PBPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBPower* PBPower::default_instance_ = NULL;

PBPower* PBPower::New() const {
  return new PBPower;
}

void PBPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
    type_ = 0u;
    level_ = 0u;
    official_ = 0u;
    order_ = 0u;
    param1_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param2_ = 0u;
    construct_ = 0u;
    power_ = 0u;
    money_ = 0u;
    if (_has_bit(13)) {
      if (icon_ != &_default_icon_) {
        icon_->clear();
      }
    }
    country_ = 0u;
    allcount_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    starthour_ = 0u;
    startmin_ = 0u;
    endhour_ = 0u;
    endmin_ = 0u;
  }
  usetime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }
      
      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Desc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desc()));
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Official;
        break;
      }
      
      // optional uint32 Official = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Official:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &official_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Param2;
        break;
      }
      
      // optional uint32 Param2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param2_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_UseTime;
        break;
      }
      
      // repeated uint32 UseTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_usetime(value);
        if (input->ExpectTag(80)) goto parse_UseTime;
        if (input->ExpectTag(88)) goto parse_Construct;
        break;
      }
      
      // optional uint32 Construct = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Construct:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &construct_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Power;
        break;
      }
      
      // optional uint32 Power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Power:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &power_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_Icon;
        break;
      }
      
      // optional string Icon = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Icon:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_icon()));
        if (input->ExpectTag(120)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_AllCount;
        break;
      }
      
      // optional uint32 AllCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AllCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &allcount_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_StartHour;
        break;
      }
      
      // optional uint32 StartHour = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StartHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &starthour_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_StartMin;
        break;
      }
      
      // optional uint32 StartMin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StartMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &startmin_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_EndHour;
        break;
      }
      
      // optional uint32 EndHour = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EndHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &endhour_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_EndMin;
        break;
      }
      
      // optional uint32 EndMin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EndMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &endmin_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPower::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desc(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 Official = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->official(), output);
  }
  
  // optional uint32 Order = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->order(), output);
  }
  
  // optional uint32 Param1 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->param1(), output);
  }
  
  // optional uint32 Param2 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->param2(), output);
  }
  
  // repeated uint32 UseTime = 10;
  for (int i = 0; i < this->usetime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->usetime(i), output);
  }
  
  // optional uint32 Construct = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->construct(), output);
  }
  
  // optional uint32 Power = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->power(), output);
  }
  
  // optional uint32 Money = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->money(), output);
  }
  
  // optional string Icon = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->icon(), output);
  }
  
  // optional uint32 Country = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->country(), output);
  }
  
  // optional uint32 AllCount = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->allcount(), output);
  }
  
  // optional uint32 StartHour = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->starthour(), output);
  }
  
  // optional uint32 StartMin = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->startmin(), output);
  }
  
  // optional uint32 EndHour = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->endhour(), output);
  }
  
  // optional uint32 EndMin = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->endmin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desc(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 Official = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->official(), target);
  }
  
  // optional uint32 Order = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->order(), target);
  }
  
  // optional uint32 Param1 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->param1(), target);
  }
  
  // optional uint32 Param2 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->param2(), target);
  }
  
  // repeated uint32 UseTime = 10;
  for (int i = 0; i < this->usetime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->usetime(i), target);
  }
  
  // optional uint32 Construct = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->construct(), target);
  }
  
  // optional uint32 Power = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->power(), target);
  }
  
  // optional uint32 Money = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->money(), target);
  }
  
  // optional string Icon = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->icon(), target);
  }
  
  // optional uint32 Country = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->country(), target);
  }
  
  // optional uint32 AllCount = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->allcount(), target);
  }
  
  // optional uint32 StartHour = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->starthour(), target);
  }
  
  // optional uint32 StartMin = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->startmin(), target);
  }
  
  // optional uint32 EndHour = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->endhour(), target);
  }
  
  // optional uint32 EndMin = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->endmin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desc());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Official = 6;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->official());
    }
    
    // optional uint32 Order = 7;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
    // optional uint32 Param1 = 8;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Param2 = 9;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param2());
    }
    
    // optional uint32 Construct = 11;
    if (has_construct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->construct());
    }
    
    // optional uint32 Power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->power());
    }
    
    // optional uint32 Money = 13;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional string Icon = 14;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->icon());
    }
    
    // optional uint32 Country = 15;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 AllCount = 16;
    if (has_allcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->allcount());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 StartHour = 17;
    if (has_starthour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->starthour());
    }
    
    // optional uint32 StartMin = 18;
    if (has_startmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->startmin());
    }
    
    // optional uint32 EndHour = 19;
    if (has_endhour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->endhour());
    }
    
    // optional uint32 EndMin = 20;
    if (has_endmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->endmin());
    }
    
  }
  // repeated uint32 UseTime = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->usetime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->usetime(i));
    }
    total_size += 1 * this->usetime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPower::MergeFrom(const PBPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  usetime_.MergeFrom(from.usetime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_desc(from.desc());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_official(from.official());
    }
    if (from._has_bit(6)) {
      set_order(from.order());
    }
    if (from._has_bit(7)) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_param2(from.param2());
    }
    if (from._has_bit(10)) {
      set_construct(from.construct());
    }
    if (from._has_bit(11)) {
      set_power(from.power());
    }
    if (from._has_bit(12)) {
      set_money(from.money());
    }
    if (from._has_bit(13)) {
      set_icon(from.icon());
    }
    if (from._has_bit(14)) {
      set_country(from.country());
    }
    if (from._has_bit(15)) {
      set_allcount(from.allcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_starthour(from.starthour());
    }
    if (from._has_bit(17)) {
      set_startmin(from.startmin());
    }
    if (from._has_bit(18)) {
      set_endhour(from.endhour());
    }
    if (from._has_bit(19)) {
      set_endmin(from.endmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPower::CopyFrom(const PBPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPower::Swap(PBPower* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(official_, other->official_);
    std::swap(order_, other->order_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    usetime_.Swap(&other->usetime_);
    std::swap(construct_, other->construct_);
    std::swap(power_, other->power_);
    std::swap(money_, other->money_);
    std::swap(icon_, other->icon_);
    std::swap(country_, other->country_);
    std::swap(allcount_, other->allcount_);
    std::swap(starthour_, other->starthour_);
    std::swap(startmin_, other->startmin_);
    std::swap(endhour_, other->endhour_);
    std::swap(endmin_, other->endmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPower::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPower::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPower::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPower_reflection_;
}

// ===================================================================

const ::std::string PBOfficial::_default_name_;
const ::std::string PBOfficial::_default_desc_;
#ifndef _MSC_VER
const int PBOfficial::kTempIDFieldNumber;
const int PBOfficial::kNameFieldNumber;
const int PBOfficial::kDescFieldNumber;
const int PBOfficial::kTypeFieldNumber;
const int PBOfficial::kWizardFieldNumber;
const int PBOfficial::kPowerFieldNumber;
const int PBOfficial::kCountryLevelFieldNumber;
const int PBOfficial::kConstructLevelFieldNumber;
#endif  // !_MSC_VER

PBOfficial::PBOfficial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOfficial::InitAsDefaultInstance() {}

PBOfficial::PBOfficial(const PBOfficial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOfficial::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  type_ = 0u;
  power_ = 0u;
  countrylevel_ = 0u;
  constructlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOfficial::~PBOfficial() {
  SharedDtor();
}

void PBOfficial::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOfficial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOfficial_descriptor_;
}

const PBOfficial& PBOfficial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOfficial* PBOfficial::default_instance_ = NULL;

PBOfficial* PBOfficial::New() const {
  return new PBOfficial;
}

void PBOfficial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
    type_ = 0u;
    power_ = 0u;
    countrylevel_ = 0u;
    constructlevel_ = 0u;
  }
  wizard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOfficial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }
      
      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Desc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desc()));
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Wizard;
        break;
      }
      
      // repeated uint32 Wizard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wizard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizard(value);
        if (input->ExpectTag(40)) goto parse_Wizard;
        if (input->ExpectTag(48)) goto parse_Power;
        break;
      }
      
      // optional uint32 Power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Power:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &power_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CountryLevel;
        break;
      }
      
      // optional uint32 CountryLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countrylevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ConstructLevel;
        break;
      }
      
      // optional uint32 ConstructLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ConstructLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &constructlevel_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOfficial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOfficial::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desc(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // repeated uint32 Wizard = 5;
  for (int i = 0; i < this->wizard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->wizard(i), output);
  }
  
  // optional uint32 Power = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->power(), output);
  }
  
  // optional uint32 CountryLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->countrylevel(), output);
  }
  
  // optional uint32 ConstructLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->constructlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOfficial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desc(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // repeated uint32 Wizard = 5;
  for (int i = 0; i < this->wizard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->wizard(i), target);
  }
  
  // optional uint32 Power = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->power(), target);
  }
  
  // optional uint32 CountryLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->countrylevel(), target);
  }
  
  // optional uint32 ConstructLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->constructlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOfficial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desc());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->power());
    }
    
    // optional uint32 CountryLevel = 7;
    if (has_countrylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countrylevel());
    }
    
    // optional uint32 ConstructLevel = 8;
    if (has_constructlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->constructlevel());
    }
    
  }
  // repeated uint32 Wizard = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizard(i));
    }
    total_size += 1 * this->wizard_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOfficial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOfficial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOfficial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOfficial::MergeFrom(const PBOfficial& from) {
  GOOGLE_CHECK_NE(&from, this);
  wizard_.MergeFrom(from.wizard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_desc(from.desc());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_power(from.power());
    }
    if (from._has_bit(6)) {
      set_countrylevel(from.countrylevel());
    }
    if (from._has_bit(7)) {
      set_constructlevel(from.constructlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOfficial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficial::CopyFrom(const PBOfficial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficial::Swap(PBOfficial* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(type_, other->type_);
    wizard_.Swap(&other->wizard_);
    std::swap(power_, other->power_);
    std::swap(countrylevel_, other->countrylevel_);
    std::swap(constructlevel_, other->constructlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOfficial::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOfficial::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOfficial::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOfficial_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOfficialTable::kTempIDFieldNumber;
const int PBOfficialTable::kOfficialDataFieldNumber;
#endif  // !_MSC_VER

PBOfficialTable::PBOfficialTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOfficialTable::InitAsDefaultInstance() {}

PBOfficialTable::PBOfficialTable(const PBOfficialTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOfficialTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOfficialTable::~PBOfficialTable() {
  SharedDtor();
}

void PBOfficialTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOfficialTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialTable_descriptor_;
}

const PBOfficialTable& PBOfficialTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOfficialTable* PBOfficialTable::default_instance_ = NULL;

PBOfficialTable* PBOfficialTable::New() const {
  return new PBOfficialTable;
}

void PBOfficialTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  officialdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOfficialTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OfficialData;
        break;
      }
      
      // repeated uint32 OfficialData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OfficialData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_officialdata(value);
        if (input->ExpectTag(16)) goto parse_OfficialData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOfficialTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOfficialTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 OfficialData = 2;
  for (int i = 0; i < this->officialdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->officialdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOfficialTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 OfficialData = 2;
  for (int i = 0; i < this->officialdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->officialdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOfficialTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 OfficialData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->officialdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->officialdata(i));
    }
    total_size += 1 * this->officialdata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOfficialTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOfficialTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOfficialTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOfficialTable::MergeFrom(const PBOfficialTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  officialdata_.MergeFrom(from.officialdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOfficialTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialTable::CopyFrom(const PBOfficialTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOfficialTable::Swap(PBOfficialTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    officialdata_.Swap(&other->officialdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOfficialTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOfficialTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOfficialTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOfficialTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBConstructExp::kTempIDFieldNumber;
const int PBConstructExp::kExpFieldNumber;
const int PBConstructExp::kBonusFieldNumber;
#endif  // !_MSC_VER

PBConstructExp::PBConstructExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBConstructExp::InitAsDefaultInstance() {}

PBConstructExp::PBConstructExp(const PBConstructExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBConstructExp::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBConstructExp::~PBConstructExp() {
  SharedDtor();
}

void PBConstructExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBConstructExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBConstructExp_descriptor_;
}

const PBConstructExp& PBConstructExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBConstructExp* PBConstructExp::default_instance_ = NULL;

PBConstructExp* PBConstructExp::New() const {
  return new PBConstructExp;
}

void PBConstructExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  exp_.Clear();
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBConstructExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // repeated uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_exp(value);
        if (input->ExpectTag(16)) goto parse_Exp;
        if (input->ExpectTag(24)) goto parse_Bonus;
        break;
      }
      
      // repeated uint32 Bonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Bonus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bonus(value);
        if (input->ExpectTag(24)) goto parse_Bonus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBConstructExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBConstructExp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exp(i), output);
  }
  
  // repeated uint32 Bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bonus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBConstructExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Exp = 2;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exp(i), target);
  }
  
  // repeated uint32 Bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bonus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBConstructExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Exp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }
  
  // repeated uint32 Bonus = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bonus(i));
    }
    total_size += 1 * this->bonus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBConstructExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBConstructExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBConstructExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBConstructExp::MergeFrom(const PBConstructExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBConstructExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConstructExp::CopyFrom(const PBConstructExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBConstructExp::Swap(PBConstructExp* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    exp_.Swap(&other->exp_);
    bonus_.Swap(&other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBConstructExp::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBConstructExp::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBConstructExp::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBConstructExp_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAddPKTable::kTempIDFieldNumber;
const int PBAddPKTable::kKFChangePowerFieldNumber;
const int PBAddPKTable::kKPChangePowerFieldNumber;
const int PBAddPKTable::kKWChangePowerFieldNumber;
const int PBAddPKTable::kDFChangePowerFieldNumber;
const int PBAddPKTable::kDPChangePowerFieldNumber;
const int PBAddPKTable::kDWChangePowerFieldNumber;
const int PBAddPKTable::kKFChangeFriendFieldNumber;
const int PBAddPKTable::kKPChangeFriendFieldNumber;
const int PBAddPKTable::kKWChangeFriendFieldNumber;
const int PBAddPKTable::kKFChangePKFieldNumber;
const int PBAddPKTable::kKWChangePKFieldNumber;
const int PBAddPKTable::kKPChangePKFieldNumber;
const int PBAddPKTable::kPFriendMinFieldNumber;
const int PBAddPKTable::kPFriendMaxFieldNumber;
const int PBAddPKTable::kKFChangeHonorFieldNumber;
const int PBAddPKTable::kKPChangeHonorFieldNumber;
const int PBAddPKTable::kKWChangeHonorFieldNumber;
#endif  // !_MSC_VER

PBAddPKTable::PBAddPKTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAddPKTable::InitAsDefaultInstance() {}

PBAddPKTable::PBAddPKTable(const PBAddPKTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAddPKTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  kfchangepower_ = 0u;
  kpchangepower_ = 0u;
  kwchangepower_ = 0u;
  dfchangepower_ = 0u;
  dpchangepower_ = 0u;
  dwchangepower_ = 0u;
  kfchangefriend_ = 0u;
  kpchangefriend_ = 0u;
  kwchangefriend_ = 0u;
  kfchangepk_ = 0u;
  kwchangepk_ = 0u;
  kfchangehonor_ = 0u;
  kpchangehonor_ = 0u;
  kwchangehonor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAddPKTable::~PBAddPKTable() {
  SharedDtor();
}

void PBAddPKTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAddPKTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAddPKTable_descriptor_;
}

const PBAddPKTable& PBAddPKTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAddPKTable* PBAddPKTable::default_instance_ = NULL;

PBAddPKTable* PBAddPKTable::New() const {
  return new PBAddPKTable;
}

void PBAddPKTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    kfchangepower_ = 0u;
    kpchangepower_ = 0u;
    kwchangepower_ = 0u;
    dfchangepower_ = 0u;
    dpchangepower_ = 0u;
    dwchangepower_ = 0u;
    kfchangefriend_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kpchangefriend_ = 0u;
    kwchangefriend_ = 0u;
    kfchangepk_ = 0u;
    kwchangepk_ = 0u;
    kfchangehonor_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    kpchangehonor_ = 0u;
    kwchangehonor_ = 0u;
  }
  kpchangepk_.Clear();
  pfriendmin_.Clear();
  pfriendmax_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAddPKTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_KFChangePower;
        break;
      }
      
      // optional uint32 KFChangePower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KFChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kfchangepower_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KPChangePower;
        break;
      }
      
      // optional uint32 KPChangePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KPChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kpchangepower_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_KWChangePower;
        break;
      }
      
      // optional uint32 KWChangePower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KWChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kwchangepower_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DFChangePower;
        break;
      }
      
      // optional uint32 DFChangePower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DFChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dfchangepower_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_DPChangePower;
        break;
      }
      
      // optional uint32 DPChangePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DPChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dpchangepower_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DWChangePower;
        break;
      }
      
      // optional uint32 DWChangePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DWChangePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dwchangepower_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_KFChangeFriend;
        break;
      }
      
      // optional uint32 KFChangeFriend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KFChangeFriend:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kfchangefriend_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_KPChangeFriend;
        break;
      }
      
      // optional uint32 KPChangeFriend = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KPChangeFriend:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kpchangefriend_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_KWChangeFriend;
        break;
      }
      
      // optional uint32 KWChangeFriend = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KWChangeFriend:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kwchangefriend_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_KFChangePK;
        break;
      }
      
      // optional uint32 KFChangePK = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KFChangePK:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kfchangepk_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_KWChangePK;
        break;
      }
      
      // optional uint32 KWChangePK = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KWChangePK:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kwchangepk_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_KPChangePK;
        break;
      }
      
      // repeated uint32 KPChangePK = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KPChangePK:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_kpchangepk(value);
        if (input->ExpectTag(104)) goto parse_KPChangePK;
        if (input->ExpectTag(112)) goto parse_PFriendMin;
        break;
      }
      
      // repeated uint32 PFriendMin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PFriendMin:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pfriendmin(value);
        if (input->ExpectTag(112)) goto parse_PFriendMin;
        if (input->ExpectTag(120)) goto parse_PFriendMax;
        break;
      }
      
      // repeated uint32 PFriendMax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PFriendMax:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pfriendmax(value);
        if (input->ExpectTag(120)) goto parse_PFriendMax;
        if (input->ExpectTag(128)) goto parse_KFChangeHonor;
        break;
      }
      
      // optional uint32 KFChangeHonor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KFChangeHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kfchangehonor_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_KPChangeHonor;
        break;
      }
      
      // optional uint32 KPChangeHonor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KPChangeHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kpchangehonor_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_KWChangeHonor;
        break;
      }
      
      // optional uint32 KWChangeHonor = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KWChangeHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kwchangehonor_));
        _set_bit(17);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAddPKTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAddPKTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 KFChangePower = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->kfchangepower(), output);
  }
  
  // optional uint32 KPChangePower = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->kpchangepower(), output);
  }
  
  // optional uint32 KWChangePower = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->kwchangepower(), output);
  }
  
  // optional uint32 DFChangePower = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->dfchangepower(), output);
  }
  
  // optional uint32 DPChangePower = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->dpchangepower(), output);
  }
  
  // optional uint32 DWChangePower = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->dwchangepower(), output);
  }
  
  // optional uint32 KFChangeFriend = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->kfchangefriend(), output);
  }
  
  // optional uint32 KPChangeFriend = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->kpchangefriend(), output);
  }
  
  // optional uint32 KWChangeFriend = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->kwchangefriend(), output);
  }
  
  // optional uint32 KFChangePK = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->kfchangepk(), output);
  }
  
  // optional uint32 KWChangePK = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->kwchangepk(), output);
  }
  
  // repeated uint32 KPChangePK = 13;
  for (int i = 0; i < this->kpchangepk_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->kpchangepk(i), output);
  }
  
  // repeated uint32 PFriendMin = 14;
  for (int i = 0; i < this->pfriendmin_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->pfriendmin(i), output);
  }
  
  // repeated uint32 PFriendMax = 15;
  for (int i = 0; i < this->pfriendmax_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->pfriendmax(i), output);
  }
  
  // optional uint32 KFChangeHonor = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->kfchangehonor(), output);
  }
  
  // optional uint32 KPChangeHonor = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->kpchangehonor(), output);
  }
  
  // optional uint32 KWChangeHonor = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->kwchangehonor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAddPKTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 KFChangePower = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->kfchangepower(), target);
  }
  
  // optional uint32 KPChangePower = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->kpchangepower(), target);
  }
  
  // optional uint32 KWChangePower = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->kwchangepower(), target);
  }
  
  // optional uint32 DFChangePower = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->dfchangepower(), target);
  }
  
  // optional uint32 DPChangePower = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->dpchangepower(), target);
  }
  
  // optional uint32 DWChangePower = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->dwchangepower(), target);
  }
  
  // optional uint32 KFChangeFriend = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->kfchangefriend(), target);
  }
  
  // optional uint32 KPChangeFriend = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->kpchangefriend(), target);
  }
  
  // optional uint32 KWChangeFriend = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->kwchangefriend(), target);
  }
  
  // optional uint32 KFChangePK = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->kfchangepk(), target);
  }
  
  // optional uint32 KWChangePK = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->kwchangepk(), target);
  }
  
  // repeated uint32 KPChangePK = 13;
  for (int i = 0; i < this->kpchangepk_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->kpchangepk(i), target);
  }
  
  // repeated uint32 PFriendMin = 14;
  for (int i = 0; i < this->pfriendmin_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->pfriendmin(i), target);
  }
  
  // repeated uint32 PFriendMax = 15;
  for (int i = 0; i < this->pfriendmax_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->pfriendmax(i), target);
  }
  
  // optional uint32 KFChangeHonor = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->kfchangehonor(), target);
  }
  
  // optional uint32 KPChangeHonor = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->kpchangehonor(), target);
  }
  
  // optional uint32 KWChangeHonor = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->kwchangehonor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAddPKTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 KFChangePower = 2;
    if (has_kfchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kfchangepower());
    }
    
    // optional uint32 KPChangePower = 3;
    if (has_kpchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kpchangepower());
    }
    
    // optional uint32 KWChangePower = 4;
    if (has_kwchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kwchangepower());
    }
    
    // optional uint32 DFChangePower = 5;
    if (has_dfchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dfchangepower());
    }
    
    // optional uint32 DPChangePower = 6;
    if (has_dpchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dpchangepower());
    }
    
    // optional uint32 DWChangePower = 7;
    if (has_dwchangepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dwchangepower());
    }
    
    // optional uint32 KFChangeFriend = 8;
    if (has_kfchangefriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kfchangefriend());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 KPChangeFriend = 9;
    if (has_kpchangefriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kpchangefriend());
    }
    
    // optional uint32 KWChangeFriend = 10;
    if (has_kwchangefriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kwchangefriend());
    }
    
    // optional uint32 KFChangePK = 11;
    if (has_kfchangepk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kfchangepk());
    }
    
    // optional uint32 KWChangePK = 12;
    if (has_kwchangepk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kwchangepk());
    }
    
    // optional uint32 KFChangeHonor = 16;
    if (has_kfchangehonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kfchangehonor());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 KPChangeHonor = 17;
    if (has_kpchangehonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kpchangehonor());
    }
    
    // optional uint32 KWChangeHonor = 18;
    if (has_kwchangehonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kwchangehonor());
    }
    
  }
  // repeated uint32 KPChangePK = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->kpchangepk_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->kpchangepk(i));
    }
    total_size += 1 * this->kpchangepk_size() + data_size;
  }
  
  // repeated uint32 PFriendMin = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->pfriendmin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pfriendmin(i));
    }
    total_size += 1 * this->pfriendmin_size() + data_size;
  }
  
  // repeated uint32 PFriendMax = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->pfriendmax_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pfriendmax(i));
    }
    total_size += 1 * this->pfriendmax_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAddPKTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAddPKTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAddPKTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAddPKTable::MergeFrom(const PBAddPKTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  kpchangepk_.MergeFrom(from.kpchangepk_);
  pfriendmin_.MergeFrom(from.pfriendmin_);
  pfriendmax_.MergeFrom(from.pfriendmax_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_kfchangepower(from.kfchangepower());
    }
    if (from._has_bit(2)) {
      set_kpchangepower(from.kpchangepower());
    }
    if (from._has_bit(3)) {
      set_kwchangepower(from.kwchangepower());
    }
    if (from._has_bit(4)) {
      set_dfchangepower(from.dfchangepower());
    }
    if (from._has_bit(5)) {
      set_dpchangepower(from.dpchangepower());
    }
    if (from._has_bit(6)) {
      set_dwchangepower(from.dwchangepower());
    }
    if (from._has_bit(7)) {
      set_kfchangefriend(from.kfchangefriend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_kpchangefriend(from.kpchangefriend());
    }
    if (from._has_bit(9)) {
      set_kwchangefriend(from.kwchangefriend());
    }
    if (from._has_bit(10)) {
      set_kfchangepk(from.kfchangepk());
    }
    if (from._has_bit(11)) {
      set_kwchangepk(from.kwchangepk());
    }
    if (from._has_bit(15)) {
      set_kfchangehonor(from.kfchangehonor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_kpchangehonor(from.kpchangehonor());
    }
    if (from._has_bit(17)) {
      set_kwchangehonor(from.kwchangehonor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAddPKTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAddPKTable::CopyFrom(const PBAddPKTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAddPKTable::Swap(PBAddPKTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(kfchangepower_, other->kfchangepower_);
    std::swap(kpchangepower_, other->kpchangepower_);
    std::swap(kwchangepower_, other->kwchangepower_);
    std::swap(dfchangepower_, other->dfchangepower_);
    std::swap(dpchangepower_, other->dpchangepower_);
    std::swap(dwchangepower_, other->dwchangepower_);
    std::swap(kfchangefriend_, other->kfchangefriend_);
    std::swap(kpchangefriend_, other->kpchangefriend_);
    std::swap(kwchangefriend_, other->kwchangefriend_);
    std::swap(kfchangepk_, other->kfchangepk_);
    std::swap(kwchangepk_, other->kwchangepk_);
    kpchangepk_.Swap(&other->kpchangepk_);
    pfriendmin_.Swap(&other->pfriendmin_);
    pfriendmax_.Swap(&other->pfriendmax_);
    std::swap(kfchangehonor_, other->kfchangehonor_);
    std::swap(kpchangehonor_, other->kpchangehonor_);
    std::swap(kwchangehonor_, other->kwchangehonor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAddPKTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAddPKTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAddPKTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAddPKTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMapTable::kTempIDFieldNumber;
const int PBMapTable::kLevelFieldNumber;
const int PBMapTable::kPowerFieldNumber;
#endif  // !_MSC_VER

PBMapTable::PBMapTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMapTable::InitAsDefaultInstance() {}

PBMapTable::PBMapTable(const PBMapTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMapTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMapTable::~PBMapTable() {
  SharedDtor();
}

void PBMapTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMapTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMapTable_descriptor_;
}

const PBMapTable& PBMapTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMapTable* PBMapTable::default_instance_ = NULL;

PBMapTable* PBMapTable::New() const {
  return new PBMapTable;
}

void PBMapTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  level_.Clear();
  power_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMapTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // repeated uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_level(value);
        if (input->ExpectTag(16)) goto parse_Level;
        if (input->ExpectTag(24)) goto parse_Power;
        break;
      }
      
      // repeated uint32 Power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Power:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_power(value);
        if (input->ExpectTag(24)) goto parse_Power;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMapTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMapTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(i), output);
  }
  
  // repeated uint32 Power = 3;
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->power(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMapTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(i), target);
  }
  
  // repeated uint32 Power = 3;
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->power(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMapTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated uint32 Power = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->power(i));
    }
    total_size += 1 * this->power_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMapTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMapTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMapTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMapTable::MergeFrom(const PBMapTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  power_.MergeFrom(from.power_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMapTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapTable::CopyFrom(const PBMapTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapTable::Swap(PBMapTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    level_.Swap(&other->level_);
    power_.Swap(&other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMapTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMapTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMapTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMapTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMultiAttackTable::kTempIDFieldNumber;
const int PBMultiAttackTable::kReduceFieldNumber;
#endif  // !_MSC_VER

PBMultiAttackTable::PBMultiAttackTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMultiAttackTable::InitAsDefaultInstance() {}

PBMultiAttackTable::PBMultiAttackTable(const PBMultiAttackTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMultiAttackTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMultiAttackTable::~PBMultiAttackTable() {
  SharedDtor();
}

void PBMultiAttackTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMultiAttackTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMultiAttackTable_descriptor_;
}

const PBMultiAttackTable& PBMultiAttackTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMultiAttackTable* PBMultiAttackTable::default_instance_ = NULL;

PBMultiAttackTable* PBMultiAttackTable::New() const {
  return new PBMultiAttackTable;
}

void PBMultiAttackTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  reduce_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMultiAttackTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Reduce;
        break;
      }
      
      // repeated uint32 Reduce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Reduce:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_reduce(value);
        if (input->ExpectTag(16)) goto parse_Reduce;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMultiAttackTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMultiAttackTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Reduce = 2;
  for (int i = 0; i < this->reduce_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->reduce(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMultiAttackTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Reduce = 2;
  for (int i = 0; i < this->reduce_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->reduce(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMultiAttackTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 Reduce = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reduce_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->reduce(i));
    }
    total_size += 1 * this->reduce_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMultiAttackTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMultiAttackTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMultiAttackTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMultiAttackTable::MergeFrom(const PBMultiAttackTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  reduce_.MergeFrom(from.reduce_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMultiAttackTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiAttackTable::CopyFrom(const PBMultiAttackTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMultiAttackTable::Swap(PBMultiAttackTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    reduce_.Swap(&other->reduce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMultiAttackTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMultiAttackTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMultiAttackTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMultiAttackTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemVip::kBaseInfoFieldNumber;
const int PBItemVip::kVipLevelFieldNumber;
const int PBItemVip::kVipTimeFieldNumber;
#endif  // !_MSC_VER

PBItemVip::PBItemVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemVip::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemVip::PBItemVip(const PBItemVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemVip::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  viplevel_ = 0u;
  viptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemVip::~PBItemVip() {
  SharedDtor();
}

void PBItemVip::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemVip_descriptor_;
}

const PBItemVip& PBItemVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemVip* PBItemVip::default_instance_ = NULL;

PBItemVip* PBItemVip::New() const {
  return new PBItemVip;
}

void PBItemVip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    viplevel_ = 0u;
    viptime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_VipLevel;
        break;
      }
      
      // optional uint32 VipLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &viplevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_VipTime;
        break;
      }
      
      // optional uint32 VipTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &viptime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemVip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 VipLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->viplevel(), output);
  }
  
  // optional uint32 VipTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->viptime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 VipLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->viplevel(), target);
  }
  
  // optional uint32 VipTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->viptime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemVip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 VipLevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->viplevel());
    }
    
    // optional uint32 VipTime = 3;
    if (has_viptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->viptime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemVip::MergeFrom(const PBItemVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_viplevel(from.viplevel());
    }
    if (from._has_bit(2)) {
      set_viptime(from.viptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemVip::CopyFrom(const PBItemVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemVip::Swap(PBItemVip* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(viptime_, other->viptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemVip::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemVip::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemVip::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemVip_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemClean::kBaseInfoFieldNumber;
const int PBItemClean::kCleanTypeFieldNumber;
const int PBItemClean::kCleanLevelFieldNumber;
const int PBItemClean::kStepFieldNumber;
#endif  // !_MSC_VER

PBItemClean::PBItemClean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemClean::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemClean::PBItemClean(const PBItemClean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemClean::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  cleantype_ = 0u;
  cleanlevel_ = 0u;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemClean::~PBItemClean() {
  SharedDtor();
}

void PBItemClean::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBItemClean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemClean_descriptor_;
}

const PBItemClean& PBItemClean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemClean* PBItemClean::default_instance_ = NULL;

PBItemClean* PBItemClean::New() const {
  return new PBItemClean;
}

void PBItemClean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    cleantype_ = 0u;
    cleanlevel_ = 0u;
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemClean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_CleanType;
        break;
      }
      
      // optional uint32 CleanType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CleanType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleantype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CleanLevel;
        break;
      }
      
      // optional uint32 CleanLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CleanLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleanlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Step;
        break;
      }
      
      // optional uint32 Step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Step:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &step_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemClean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemClean::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 CleanType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->cleantype(), output);
  }
  
  // optional uint32 CleanLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->cleanlevel(), output);
  }
  
  // optional uint32 Step = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemClean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 CleanType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->cleantype(), target);
  }
  
  // optional uint32 CleanLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->cleanlevel(), target);
  }
  
  // optional uint32 Step = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemClean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 CleanType = 2;
    if (has_cleantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleantype());
    }
    
    // optional uint32 CleanLevel = 3;
    if (has_cleanlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleanlevel());
    }
    
    // optional uint32 Step = 4;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemClean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemClean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemClean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemClean::MergeFrom(const PBItemClean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_cleantype(from.cleantype());
    }
    if (from._has_bit(2)) {
      set_cleanlevel(from.cleanlevel());
    }
    if (from._has_bit(3)) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemClean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemClean::CopyFrom(const PBItemClean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemClean::Swap(PBItemClean* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(cleantype_, other->cleantype_);
    std::swap(cleanlevel_, other->cleanlevel_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemClean::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemClean::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemClean::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemClean_reflection_;
}

// ===================================================================

const ::std::string PBAwardInfo::_default_name_;
const ::std::string PBAwardInfo::_default_desc_;
#ifndef _MSC_VER
const int PBAwardInfo::kTempIDFieldNumber;
const int PBAwardInfo::kNameFieldNumber;
const int PBAwardInfo::kDescFieldNumber;
const int PBAwardInfo::kItemIDFieldNumber;
const int PBAwardInfo::kItemNumFieldNumber;
const int PBAwardInfo::kBuffIDFieldNumber;
const int PBAwardInfo::kTimesFieldNumber;
const int PBAwardInfo::kNpcIDFieldNumber;
const int PBAwardInfo::kCountryFieldNumber;
const int PBAwardInfo::kNoFamilyFieldNumber;
#endif  // !_MSC_VER

PBAwardInfo::PBAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAwardInfo::InitAsDefaultInstance() {}

PBAwardInfo::PBAwardInfo(const PBAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  buffid_ = 0u;
  times_ = 0u;
  npcid_ = 0u;
  country_ = 0u;
  nofamily_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAwardInfo::~PBAwardInfo() {
  SharedDtor();
}

void PBAwardInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAwardInfo_descriptor_;
}

const PBAwardInfo& PBAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAwardInfo* PBAwardInfo::default_instance_ = NULL;

PBAwardInfo* PBAwardInfo::New() const {
  return new PBAwardInfo;
}

void PBAwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
    buffid_ = 0u;
    times_ = 0u;
    npcid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    country_ = 0u;
    nofamily_ = 0u;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }
      
      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Desc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desc()));
        if (input->ExpectTag(32)) goto parse_ItemID;
        break;
      }
      
      // repeated uint32 ItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemid(value);
        if (input->ExpectTag(32)) goto parse_ItemID;
        if (input->ExpectTag(40)) goto parse_ItemNum;
        break;
      }
      
      // repeated uint32 ItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemnum(value);
        if (input->ExpectTag(40)) goto parse_ItemNum;
        if (input->ExpectTag(48)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Times;
        break;
      }
      
      // optional uint32 Times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Times:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &times_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_NoFamily;
        break;
      }
      
      // optional uint32 NoFamily = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NoFamily:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nofamily_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAwardInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->desc(), output);
  }
  
  // repeated uint32 ItemID = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemid(i), output);
  }
  
  // repeated uint32 ItemNum = 5;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->itemnum(i), output);
  }
  
  // optional uint32 BuffID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->buffid(), output);
  }
  
  // optional uint32 Times = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->times(), output);
  }
  
  // optional uint32 NpcID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->npcid(), output);
  }
  
  // optional uint32 Country = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->country(), output);
  }
  
  // optional uint32 NoFamily = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->nofamily(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional string Desc = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->desc(), target);
  }
  
  // repeated uint32 ItemID = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemid(i), target);
  }
  
  // repeated uint32 ItemNum = 5;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->itemnum(i), target);
  }
  
  // optional uint32 BuffID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->buffid(), target);
  }
  
  // optional uint32 Times = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->times(), target);
  }
  
  // optional uint32 NpcID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->npcid(), target);
  }
  
  // optional uint32 Country = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->country(), target);
  }
  
  // optional uint32 NoFamily = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->nofamily(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAwardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desc());
    }
    
    // optional uint32 BuffID = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
    // optional uint32 Times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->times());
    }
    
    // optional uint32 NpcID = 8;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 NoFamily = 10;
    if (has_nofamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nofamily());
    }
    
  }
  // repeated uint32 ItemID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }
  
  // repeated uint32 ItemNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAwardInfo::MergeFrom(const PBAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_desc(from.desc());
    }
    if (from._has_bit(5)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(6)) {
      set_times(from.times());
    }
    if (from._has_bit(7)) {
      set_npcid(from.npcid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_country(from.country());
    }
    if (from._has_bit(9)) {
      set_nofamily(from.nofamily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardInfo::CopyFrom(const PBAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardInfo::Swap(PBAwardInfo* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(buffid_, other->buffid_);
    std::swap(times_, other->times_);
    std::swap(npcid_, other->npcid_);
    std::swap(country_, other->country_);
    std::swap(nofamily_, other->nofamily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAwardInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAwardInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAwardInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAwardInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLeagueItem::kItemIDFieldNumber;
const int PBLeagueItem::kItemNumFieldNumber;
const int PBLeagueItem::kProbalityFieldNumber;
#endif  // !_MSC_VER

PBLeagueItem::PBLeagueItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLeagueItem::InitAsDefaultInstance() {}

PBLeagueItem::PBLeagueItem(const PBLeagueItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLeagueItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  probality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLeagueItem::~PBLeagueItem() {
  SharedDtor();
}

void PBLeagueItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLeagueItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueItem_descriptor_;
}

const PBLeagueItem& PBLeagueItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLeagueItem* PBLeagueItem::default_instance_ = NULL;

PBLeagueItem* PBLeagueItem::New() const {
  return new PBLeagueItem;
}

void PBLeagueItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    probality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLeagueItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Probality;
        break;
      }
      
      // optional uint32 Probality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probality_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLeagueItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLeagueItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 Probality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->probality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLeagueItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 Probality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->probality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLeagueItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 Probality = 3;
    if (has_probality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLeagueItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLeagueItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLeagueItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLeagueItem::MergeFrom(const PBLeagueItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_probality(from.probality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLeagueItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueItem::CopyFrom(const PBLeagueItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueItem::Swap(PBLeagueItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(probality_, other->probality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLeagueItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLeagueItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLeagueItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLeagueBag::kItemBaseFieldNumber;
const int PBLeagueBag::kLeagueItemInfoFieldNumber;
const int PBLeagueBag::kLeagueBagTypeFieldNumber;
const int PBLeagueBag::kExchangeTableIDFieldNumber;
const int PBLeagueBag::kMapIDFieldNumber;
const int PBLeagueBag::kPosXFieldNumber;
const int PBLeagueBag::kPosYFieldNumber;
#endif  // !_MSC_VER

PBLeagueBag::PBLeagueBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLeagueBag::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBLeagueBag::PBLeagueBag(const PBLeagueBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLeagueBag::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  leaguebagtype_ = 0u;
  exchangetableid_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLeagueBag::~PBLeagueBag() {
  SharedDtor();
}

void PBLeagueBag::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBLeagueBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueBag_descriptor_;
}

const PBLeagueBag& PBLeagueBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBLeagueBag* PBLeagueBag::default_instance_ = NULL;

PBLeagueBag* PBLeagueBag::New() const {
  return new PBLeagueBag;
}

void PBLeagueBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    leaguebagtype_ = 0u;
    exchangetableid_ = 0u;
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  leagueiteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLeagueBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(18)) goto parse_LeagueItemInfo;
        break;
      }
      
      // repeated .PBLeagueItem LeagueItemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LeagueItemInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_leagueiteminfo()));
        if (input->ExpectTag(18)) goto parse_LeagueItemInfo;
        if (input->ExpectTag(24)) goto parse_LeagueBagType;
        break;
      }
      
      // optional uint32 LeagueBagType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeagueBagType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leaguebagtype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ExchangeTableID;
        break;
      }
      
      // optional uint32 ExchangeTableID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangetableid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLeagueBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLeagueBag::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // repeated .PBLeagueItem LeagueItemInfo = 2;
  for (int i = 0; i < this->leagueiteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->leagueiteminfo(i), output);
  }
  
  // optional uint32 LeagueBagType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->leaguebagtype(), output);
  }
  
  // optional uint32 ExchangeTableID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->exchangetableid(), output);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mapid(), output);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->posx(), output);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLeagueBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // repeated .PBLeagueItem LeagueItemInfo = 2;
  for (int i = 0; i < this->leagueiteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->leagueiteminfo(i), target);
  }
  
  // optional uint32 LeagueBagType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->leaguebagtype(), target);
  }
  
  // optional uint32 ExchangeTableID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->exchangetableid(), target);
  }
  
  // optional uint32 MapID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mapid(), target);
  }
  
  // optional uint32 PosX = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->posx(), target);
  }
  
  // optional uint32 PosY = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLeagueBag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 LeagueBagType = 3;
    if (has_leaguebagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leaguebagtype());
    }
    
    // optional uint32 ExchangeTableID = 4;
    if (has_exchangetableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangetableid());
    }
    
    // optional uint32 MapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 7;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  // repeated .PBLeagueItem LeagueItemInfo = 2;
  total_size += 1 * this->leagueiteminfo_size();
  for (int i = 0; i < this->leagueiteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->leagueiteminfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLeagueBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLeagueBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLeagueBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLeagueBag::MergeFrom(const PBLeagueBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  leagueiteminfo_.MergeFrom(from.leagueiteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(2)) {
      set_leaguebagtype(from.leaguebagtype());
    }
    if (from._has_bit(3)) {
      set_exchangetableid(from.exchangetableid());
    }
    if (from._has_bit(4)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(5)) {
      set_posx(from.posx());
    }
    if (from._has_bit(6)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLeagueBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueBag::CopyFrom(const PBLeagueBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueBag::Swap(PBLeagueBag* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    leagueiteminfo_.Swap(&other->leagueiteminfo_);
    std::swap(leaguebagtype_, other->leaguebagtype_);
    std::swap(exchangetableid_, other->exchangetableid_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLeagueBag::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLeagueBag::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLeagueBag::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueBag_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMatrixTable::kTempIDFieldNumber;
const int PBMatrixTable::kLevelFieldNumber;
const int PBMatrixTable::kMaxLimitFieldNumber;
const int PBMatrixTable::kMinLimitFieldNumber;
const int PBMatrixTable::kMasterItemIDFieldNumber;
const int PBMatrixTable::kMasterItemNumFieldNumber;
const int PBMatrixTable::kMailIDFieldNumber;
const int PBMatrixTable::kFormalLevelFieldNumber;
const int PBMatrixTable::kEducatedLevelFieldNumber;
const int PBMatrixTable::kEnterLimitFieldNumber;
const int PBMatrixTable::kRemoveItemFieldNumber;
const int PBMatrixTable::kRemoveMoneyFieldNumber;
const int PBMatrixTable::kFormalPercentFieldNumber;
const int PBMatrixTable::kEducatedPercentFieldNumber;
const int PBMatrixTable::kReturnLimitFieldNumber;
const int PBMatrixTable::kAlterMaxFieldNumber;
const int PBMatrixTable::kAlterMinFieldNumber;
const int PBMatrixTable::kReturnMailIDFieldNumber;
const int PBMatrixTable::kSlaveItemIDFieldNumber;
const int PBMatrixTable::kSlaveItemNumFieldNumber;
const int PBMatrixTable::kAlterAllFieldNumber;
const int PBMatrixTable::kAlterDefaultFieldNumber;
const int PBMatrixTable::kSlaveMailIDFieldNumber;
#endif  // !_MSC_VER

PBMatrixTable::PBMatrixTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMatrixTable::InitAsDefaultInstance() {}

PBMatrixTable::PBMatrixTable(const PBMatrixTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMatrixTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  maxlimit_ = 0u;
  minlimit_ = 0u;
  formallevel_ = 0u;
  educatedlevel_ = 0u;
  enterlimit_ = 0u;
  removeitem_ = 0u;
  removemoney_ = 0u;
  formalpercent_ = 0u;
  educatedpercent_ = 0u;
  returnlimit_ = 0u;
  altermax_ = 0u;
  altermin_ = 0u;
  returnmailid_ = 0u;
  alterall_ = 0u;
  alterdefault_ = 0u;
  slavemailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMatrixTable::~PBMatrixTable() {
  SharedDtor();
}

void PBMatrixTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMatrixTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMatrixTable_descriptor_;
}

const PBMatrixTable& PBMatrixTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBMatrixTable* PBMatrixTable::default_instance_ = NULL;

PBMatrixTable* PBMatrixTable::New() const {
  return new PBMatrixTable;
}

void PBMatrixTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    maxlimit_ = 0u;
    minlimit_ = 0u;
    formallevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    educatedlevel_ = 0u;
    enterlimit_ = 0u;
    removeitem_ = 0u;
    removemoney_ = 0u;
    formalpercent_ = 0u;
    educatedpercent_ = 0u;
    returnlimit_ = 0u;
    altermax_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    altermin_ = 0u;
    returnmailid_ = 0u;
    alterall_ = 0u;
    alterdefault_ = 0u;
    slavemailid_ = 0u;
  }
  level_.Clear();
  masteritemid_.Clear();
  masteritemnum_.Clear();
  mailid_.Clear();
  slaveitemid_.Clear();
  slaveitemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMatrixTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // repeated uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_level(value);
        if (input->ExpectTag(16)) goto parse_Level;
        if (input->ExpectTag(24)) goto parse_MaxLimit;
        break;
      }
      
      // optional uint32 MaxLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlimit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MinLimit;
        break;
      }
      
      // optional uint32 MinLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlimit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MasterItemID;
        break;
      }
      
      // repeated uint32 MasterItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masteritemid(value);
        if (input->ExpectTag(40)) goto parse_MasterItemID;
        if (input->ExpectTag(48)) goto parse_MasterItemNum;
        break;
      }
      
      // repeated uint32 MasterItemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masteritemnum(value);
        if (input->ExpectTag(48)) goto parse_MasterItemNum;
        if (input->ExpectTag(56)) goto parse_MailID;
        break;
      }
      
      // repeated uint32 MailID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MailID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mailid(value);
        if (input->ExpectTag(56)) goto parse_MailID;
        if (input->ExpectTag(64)) goto parse_FormalLevel;
        break;
      }
      
      // optional uint32 FormalLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FormalLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &formallevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_EducatedLevel;
        break;
      }
      
      // optional uint32 EducatedLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EducatedLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &educatedlevel_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_EnterLimit;
        break;
      }
      
      // optional uint32 EnterLimit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EnterLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &enterlimit_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_RemoveItem;
        break;
      }
      
      // optional uint32 RemoveItem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removeitem_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_RemoveMoney;
        break;
      }
      
      // optional uint32 RemoveMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemoveMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &removemoney_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_FormalPercent;
        break;
      }
      
      // optional uint32 FormalPercent = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FormalPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &formalpercent_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_EducatedPercent;
        break;
      }
      
      // optional uint32 EducatedPercent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EducatedPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &educatedpercent_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_ReturnLimit;
        break;
      }
      
      // optional uint32 ReturnLimit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReturnLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &returnlimit_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_AlterMax;
        break;
      }
      
      // optional uint32 AlterMax = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AlterMax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &altermax_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_AlterMin;
        break;
      }
      
      // optional uint32 AlterMin = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AlterMin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &altermin_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_ReturnMailID;
        break;
      }
      
      // optional uint32 ReturnMailID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReturnMailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &returnmailid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_SlaveItemID;
        break;
      }
      
      // repeated uint32 SlaveItemID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slaveitemid(value);
        if (input->ExpectTag(152)) goto parse_SlaveItemID;
        if (input->ExpectTag(160)) goto parse_SlaveItemNum;
        break;
      }
      
      // repeated uint32 SlaveItemNum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slaveitemnum(value);
        if (input->ExpectTag(160)) goto parse_SlaveItemNum;
        if (input->ExpectTag(168)) goto parse_AlterAll;
        break;
      }
      
      // optional uint32 AlterAll = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AlterAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &alterall_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_AlterDefault;
        break;
      }
      
      // optional uint32 AlterDefault = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AlterDefault:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &alterdefault_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_SlaveMailID;
        break;
      }
      
      // optional uint32 SlaveMailID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveMailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavemailid_));
        _set_bit(22);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMatrixTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMatrixTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 Level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(i), output);
  }
  
  // optional uint32 MaxLimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->maxlimit(), output);
  }
  
  // optional uint32 MinLimit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->minlimit(), output);
  }
  
  // repeated uint32 MasterItemID = 5;
  for (int i = 0; i < this->masteritemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->masteritemid(i), output);
  }
  
  // repeated uint32 MasterItemNum = 6;
  for (int i = 0; i < this->masteritemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->masteritemnum(i), output);
  }
  
  // repeated uint32 MailID = 7;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mailid(i), output);
  }
  
  // optional uint32 FormalLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->formallevel(), output);
  }
  
  // optional uint32 EducatedLevel = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->educatedlevel(), output);
  }
  
  // optional uint32 EnterLimit = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->enterlimit(), output);
  }
  
  // optional uint32 RemoveItem = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->removeitem(), output);
  }
  
  // optional uint32 RemoveMoney = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->removemoney(), output);
  }
  
  // optional uint32 FormalPercent = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->formalpercent(), output);
  }
  
  // optional uint32 EducatedPercent = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->educatedpercent(), output);
  }
  
  // optional uint32 ReturnLimit = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->returnlimit(), output);
  }
  
  // optional uint32 AlterMax = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->altermax(), output);
  }
  
  // optional uint32 AlterMin = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->altermin(), output);
  }
  
  // optional uint32 ReturnMailID = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->returnmailid(), output);
  }
  
  // repeated uint32 SlaveItemID = 19;
  for (int i = 0; i < this->slaveitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->slaveitemid(i), output);
  }
  
  // repeated uint32 SlaveItemNum = 20;
  for (int i = 0; i < this->slaveitemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->slaveitemnum(i), output);
  }
  
  // optional uint32 AlterAll = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->alterall(), output);
  }
  
  // optional uint32 AlterDefault = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->alterdefault(), output);
  }
  
  // optional uint32 SlaveMailID = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->slavemailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMatrixTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 Level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(i), target);
  }
  
  // optional uint32 MaxLimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->maxlimit(), target);
  }
  
  // optional uint32 MinLimit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->minlimit(), target);
  }
  
  // repeated uint32 MasterItemID = 5;
  for (int i = 0; i < this->masteritemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->masteritemid(i), target);
  }
  
  // repeated uint32 MasterItemNum = 6;
  for (int i = 0; i < this->masteritemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->masteritemnum(i), target);
  }
  
  // repeated uint32 MailID = 7;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mailid(i), target);
  }
  
  // optional uint32 FormalLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->formallevel(), target);
  }
  
  // optional uint32 EducatedLevel = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->educatedlevel(), target);
  }
  
  // optional uint32 EnterLimit = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->enterlimit(), target);
  }
  
  // optional uint32 RemoveItem = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->removeitem(), target);
  }
  
  // optional uint32 RemoveMoney = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->removemoney(), target);
  }
  
  // optional uint32 FormalPercent = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->formalpercent(), target);
  }
  
  // optional uint32 EducatedPercent = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->educatedpercent(), target);
  }
  
  // optional uint32 ReturnLimit = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->returnlimit(), target);
  }
  
  // optional uint32 AlterMax = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->altermax(), target);
  }
  
  // optional uint32 AlterMin = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->altermin(), target);
  }
  
  // optional uint32 ReturnMailID = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->returnmailid(), target);
  }
  
  // repeated uint32 SlaveItemID = 19;
  for (int i = 0; i < this->slaveitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->slaveitemid(i), target);
  }
  
  // repeated uint32 SlaveItemNum = 20;
  for (int i = 0; i < this->slaveitemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->slaveitemnum(i), target);
  }
  
  // optional uint32 AlterAll = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->alterall(), target);
  }
  
  // optional uint32 AlterDefault = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->alterdefault(), target);
  }
  
  // optional uint32 SlaveMailID = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->slavemailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMatrixTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MaxLimit = 3;
    if (has_maxlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlimit());
    }
    
    // optional uint32 MinLimit = 4;
    if (has_minlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlimit());
    }
    
    // optional uint32 FormalLevel = 8;
    if (has_formallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->formallevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 EducatedLevel = 9;
    if (has_educatedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->educatedlevel());
    }
    
    // optional uint32 EnterLimit = 10;
    if (has_enterlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->enterlimit());
    }
    
    // optional uint32 RemoveItem = 11;
    if (has_removeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removeitem());
    }
    
    // optional uint32 RemoveMoney = 12;
    if (has_removemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->removemoney());
    }
    
    // optional uint32 FormalPercent = 13;
    if (has_formalpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->formalpercent());
    }
    
    // optional uint32 EducatedPercent = 14;
    if (has_educatedpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->educatedpercent());
    }
    
    // optional uint32 ReturnLimit = 15;
    if (has_returnlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->returnlimit());
    }
    
    // optional uint32 AlterMax = 16;
    if (has_altermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->altermax());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 AlterMin = 17;
    if (has_altermin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->altermin());
    }
    
    // optional uint32 ReturnMailID = 18;
    if (has_returnmailid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->returnmailid());
    }
    
    // optional uint32 AlterAll = 21;
    if (has_alterall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->alterall());
    }
    
    // optional uint32 AlterDefault = 22;
    if (has_alterdefault()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->alterdefault());
    }
    
    // optional uint32 SlaveMailID = 23;
    if (has_slavemailid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavemailid());
    }
    
  }
  // repeated uint32 Level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated uint32 MasterItemID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->masteritemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masteritemid(i));
    }
    total_size += 1 * this->masteritemid_size() + data_size;
  }
  
  // repeated uint32 MasterItemNum = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->masteritemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masteritemnum(i));
    }
    total_size += 1 * this->masteritemnum_size() + data_size;
  }
  
  // repeated uint32 MailID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }
  
  // repeated uint32 SlaveItemID = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->slaveitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slaveitemid(i));
    }
    total_size += 2 * this->slaveitemid_size() + data_size;
  }
  
  // repeated uint32 SlaveItemNum = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->slaveitemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slaveitemnum(i));
    }
    total_size += 2 * this->slaveitemnum_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMatrixTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMatrixTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMatrixTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMatrixTable::MergeFrom(const PBMatrixTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  masteritemid_.MergeFrom(from.masteritemid_);
  masteritemnum_.MergeFrom(from.masteritemnum_);
  mailid_.MergeFrom(from.mailid_);
  slaveitemid_.MergeFrom(from.slaveitemid_);
  slaveitemnum_.MergeFrom(from.slaveitemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(2)) {
      set_maxlimit(from.maxlimit());
    }
    if (from._has_bit(3)) {
      set_minlimit(from.minlimit());
    }
    if (from._has_bit(7)) {
      set_formallevel(from.formallevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_educatedlevel(from.educatedlevel());
    }
    if (from._has_bit(9)) {
      set_enterlimit(from.enterlimit());
    }
    if (from._has_bit(10)) {
      set_removeitem(from.removeitem());
    }
    if (from._has_bit(11)) {
      set_removemoney(from.removemoney());
    }
    if (from._has_bit(12)) {
      set_formalpercent(from.formalpercent());
    }
    if (from._has_bit(13)) {
      set_educatedpercent(from.educatedpercent());
    }
    if (from._has_bit(14)) {
      set_returnlimit(from.returnlimit());
    }
    if (from._has_bit(15)) {
      set_altermax(from.altermax());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_altermin(from.altermin());
    }
    if (from._has_bit(17)) {
      set_returnmailid(from.returnmailid());
    }
    if (from._has_bit(20)) {
      set_alterall(from.alterall());
    }
    if (from._has_bit(21)) {
      set_alterdefault(from.alterdefault());
    }
    if (from._has_bit(22)) {
      set_slavemailid(from.slavemailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMatrixTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatrixTable::CopyFrom(const PBMatrixTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatrixTable::Swap(PBMatrixTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    level_.Swap(&other->level_);
    std::swap(maxlimit_, other->maxlimit_);
    std::swap(minlimit_, other->minlimit_);
    masteritemid_.Swap(&other->masteritemid_);
    masteritemnum_.Swap(&other->masteritemnum_);
    mailid_.Swap(&other->mailid_);
    std::swap(formallevel_, other->formallevel_);
    std::swap(educatedlevel_, other->educatedlevel_);
    std::swap(enterlimit_, other->enterlimit_);
    std::swap(removeitem_, other->removeitem_);
    std::swap(removemoney_, other->removemoney_);
    std::swap(formalpercent_, other->formalpercent_);
    std::swap(educatedpercent_, other->educatedpercent_);
    std::swap(returnlimit_, other->returnlimit_);
    std::swap(altermax_, other->altermax_);
    std::swap(altermin_, other->altermin_);
    std::swap(returnmailid_, other->returnmailid_);
    slaveitemid_.Swap(&other->slaveitemid_);
    slaveitemnum_.Swap(&other->slaveitemnum_);
    std::swap(alterall_, other->alterall_);
    std::swap(alterdefault_, other->alterdefault_);
    std::swap(slavemailid_, other->slavemailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMatrixTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMatrixTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMatrixTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMatrixTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWeddingInfo::kWeddingLengthFieldNumber;
const int PBWeddingInfo::kMoneyNeededFieldNumber;
const int PBWeddingInfo::kDelayMoneyNeededFieldNumber;
const int PBWeddingInfo::kWeddingRedstoneIDFieldNumber;
const int PBWeddingInfo::kWeddingHallRedstoneIDFieldNumber;
const int PBWeddingInfo::kWeddingHallMapIDFieldNumber;
const int PBWeddingInfo::kInvitationCardIDFieldNumber;
const int PBWeddingInfo::kInvitationCardNumFieldNumber;
const int PBWeddingInfo::kFemaleKeepsakeIDFieldNumber;
const int PBWeddingInfo::kMaleKeepsakeIDFieldNumber;
const int PBWeddingInfo::kPosXFieldNumber;
const int PBWeddingInfo::kPosYFieldNumber;
const int PBWeddingInfo::kFemaleKeepsakeTwoFieldNumber;
const int PBWeddingInfo::kMaleKeepsakeTwoFieldNumber;
const int PBWeddingInfo::kFemaleKeepsakeThreeFieldNumber;
const int PBWeddingInfo::kMaleKeepsakeThreeFieldNumber;
const int PBWeddingInfo::kMaleBufferIDFieldNumber;
const int PBWeddingInfo::kFemaleBufferIDFieldNumber;
const int PBWeddingInfo::kMaleItemIDFieldNumber;
const int PBWeddingInfo::kFemaleItemIDFieldNumber;
const int PBWeddingInfo::kGroomPosXFieldNumber;
const int PBWeddingInfo::kGroomPosYFieldNumber;
const int PBWeddingInfo::kBridePosXFieldNumber;
const int PBWeddingInfo::kBridePosYFieldNumber;
const int PBWeddingInfo::kGroomBufferIDFieldNumber;
const int PBWeddingInfo::kBrideBufferIDFieldNumber;
const int PBWeddingInfo::kMarriageItemIDFieldNumber;
const int PBWeddingInfo::kWeddingScrollFieldNumber;
#endif  // !_MSC_VER

PBWeddingInfo::PBWeddingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWeddingInfo::InitAsDefaultInstance() {}

PBWeddingInfo::PBWeddingInfo(const PBWeddingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWeddingInfo::SharedCtor() {
  _cached_size_ = 0;
  weddinglength_ = 0u;
  moneyneeded_ = 0u;
  delaymoneyneeded_ = 0u;
  weddingredstoneid_ = 0u;
  weddinghallredstoneid_ = 0u;
  weddinghallmapid_ = 0u;
  invitationcardid_ = 0u;
  invitationcardnum_ = 0u;
  femalekeepsakeid_ = 0u;
  malekeepsakeid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  femalekeepsaketwo_ = 0u;
  malekeepsaketwo_ = 0u;
  femalekeepsakethree_ = 0u;
  malekeepsakethree_ = 0u;
  malebufferid_ = 0u;
  femalebufferid_ = 0u;
  maleitemid_ = 0u;
  femaleitemid_ = 0u;
  groomposx_ = 0u;
  groomposy_ = 0u;
  brideposx_ = 0u;
  brideposy_ = 0u;
  groombufferid_ = 0u;
  bridebufferid_ = 0u;
  marriageitemid_ = 0u;
  weddingscroll_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWeddingInfo::~PBWeddingInfo() {
  SharedDtor();
}

void PBWeddingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBWeddingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWeddingInfo_descriptor_;
}

const PBWeddingInfo& PBWeddingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBWeddingInfo* PBWeddingInfo::default_instance_ = NULL;

PBWeddingInfo* PBWeddingInfo::New() const {
  return new PBWeddingInfo;
}

void PBWeddingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weddinglength_ = 0u;
    moneyneeded_ = 0u;
    delaymoneyneeded_ = 0u;
    weddingredstoneid_ = 0u;
    weddinghallredstoneid_ = 0u;
    weddinghallmapid_ = 0u;
    invitationcardid_ = 0u;
    invitationcardnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    femalekeepsakeid_ = 0u;
    malekeepsakeid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    femalekeepsaketwo_ = 0u;
    malekeepsaketwo_ = 0u;
    femalekeepsakethree_ = 0u;
    malekeepsakethree_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    malebufferid_ = 0u;
    femalebufferid_ = 0u;
    maleitemid_ = 0u;
    femaleitemid_ = 0u;
    groomposx_ = 0u;
    groomposy_ = 0u;
    brideposx_ = 0u;
    brideposy_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    groombufferid_ = 0u;
    bridebufferid_ = 0u;
    marriageitemid_ = 0u;
    weddingscroll_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWeddingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WeddingLength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddinglength_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MoneyNeeded;
        break;
      }
      
      // optional uint32 MoneyNeeded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MoneyNeeded:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &moneyneeded_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DelayMoneyNeeded;
        break;
      }
      
      // optional uint32 DelayMoneyNeeded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DelayMoneyNeeded:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &delaymoneyneeded_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingRedstoneID;
        break;
      }
      
      // optional uint32 WeddingRedstoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingRedstoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingredstoneid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WeddingHallRedstoneID;
        break;
      }
      
      // optional uint32 WeddingHallRedstoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingHallRedstoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddinghallredstoneid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_WeddingHallMapID;
        break;
      }
      
      // optional uint32 WeddingHallMapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingHallMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddinghallmapid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_InvitationCardID;
        break;
      }
      
      // optional uint32 InvitationCardID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitationCardID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitationcardid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_InvitationCardNum;
        break;
      }
      
      // optional uint32 InvitationCardNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitationCardNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitationcardnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_FemaleKeepsakeID;
        break;
      }
      
      // optional uint32 FemaleKeepsakeID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleKeepsakeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femalekeepsakeid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MaleKeepsakeID;
        break;
      }
      
      // optional uint32 MaleKeepsakeID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleKeepsakeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &malekeepsakeid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_FemaleKeepsakeTwo;
        break;
      }
      
      // optional uint32 FemaleKeepsakeTwo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleKeepsakeTwo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femalekeepsaketwo_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_MaleKeepsakeTwo;
        break;
      }
      
      // optional uint32 MaleKeepsakeTwo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleKeepsakeTwo:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &malekeepsaketwo_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_FemaleKeepsakeThree;
        break;
      }
      
      // optional uint32 FemaleKeepsakeThree = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleKeepsakeThree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femalekeepsakethree_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_MaleKeepsakeThree;
        break;
      }
      
      // optional uint32 MaleKeepsakeThree = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleKeepsakeThree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &malekeepsakethree_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MaleBufferID;
        break;
      }
      
      // optional uint32 MaleBufferID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleBufferID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &malebufferid_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_FemaleBufferID;
        break;
      }
      
      // optional uint32 FemaleBufferID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleBufferID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femalebufferid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_MaleItemID;
        break;
      }
      
      // optional uint32 MaleItemID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maleitemid_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_FemaleItemID;
        break;
      }
      
      // optional uint32 FemaleItemID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femaleitemid_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_GroomPosX;
        break;
      }
      
      // optional uint32 GroomPosX = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomPosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomposx_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_GroomPosY;
        break;
      }
      
      // optional uint32 GroomPosY = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomPosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomposy_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_BridePosX;
        break;
      }
      
      // optional uint32 BridePosX = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BridePosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideposx_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_BridePosY;
        break;
      }
      
      // optional uint32 BridePosY = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BridePosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideposy_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_GroomBufferID;
        break;
      }
      
      // optional uint32 GroomBufferID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomBufferID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groombufferid_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_BrideBufferID;
        break;
      }
      
      // optional uint32 BrideBufferID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideBufferID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bridebufferid_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_MarriageItemID;
        break;
      }
      
      // optional uint32 MarriageItemID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriageitemid_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_WeddingScroll;
        break;
      }
      
      // optional uint32 WeddingScroll = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingScroll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingscroll_));
        _set_bit(27);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWeddingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWeddingInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WeddingLength = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->weddinglength(), output);
  }
  
  // optional uint32 MoneyNeeded = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->moneyneeded(), output);
  }
  
  // optional uint32 DelayMoneyNeeded = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->delaymoneyneeded(), output);
  }
  
  // optional uint32 WeddingRedstoneID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingredstoneid(), output);
  }
  
  // optional uint32 WeddingHallRedstoneID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weddinghallredstoneid(), output);
  }
  
  // optional uint32 WeddingHallMapID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->weddinghallmapid(), output);
  }
  
  // optional uint32 InvitationCardID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->invitationcardid(), output);
  }
  
  // optional uint32 InvitationCardNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->invitationcardnum(), output);
  }
  
  // optional uint32 FemaleKeepsakeID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->femalekeepsakeid(), output);
  }
  
  // optional uint32 MaleKeepsakeID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->malekeepsakeid(), output);
  }
  
  // optional uint32 PosX = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->posx(), output);
  }
  
  // optional uint32 PosY = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->posy(), output);
  }
  
  // optional uint32 FemaleKeepsakeTwo = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->femalekeepsaketwo(), output);
  }
  
  // optional uint32 MaleKeepsakeTwo = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->malekeepsaketwo(), output);
  }
  
  // optional uint32 FemaleKeepsakeThree = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->femalekeepsakethree(), output);
  }
  
  // optional uint32 MaleKeepsakeThree = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->malekeepsakethree(), output);
  }
  
  // optional uint32 MaleBufferID = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->malebufferid(), output);
  }
  
  // optional uint32 FemaleBufferID = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->femalebufferid(), output);
  }
  
  // optional uint32 MaleItemID = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->maleitemid(), output);
  }
  
  // optional uint32 FemaleItemID = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->femaleitemid(), output);
  }
  
  // optional uint32 GroomPosX = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->groomposx(), output);
  }
  
  // optional uint32 GroomPosY = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->groomposy(), output);
  }
  
  // optional uint32 BridePosX = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->brideposx(), output);
  }
  
  // optional uint32 BridePosY = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->brideposy(), output);
  }
  
  // optional uint32 GroomBufferID = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->groombufferid(), output);
  }
  
  // optional uint32 BrideBufferID = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->bridebufferid(), output);
  }
  
  // optional uint32 MarriageItemID = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->marriageitemid(), output);
  }
  
  // optional uint32 WeddingScroll = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->weddingscroll(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWeddingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WeddingLength = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->weddinglength(), target);
  }
  
  // optional uint32 MoneyNeeded = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->moneyneeded(), target);
  }
  
  // optional uint32 DelayMoneyNeeded = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->delaymoneyneeded(), target);
  }
  
  // optional uint32 WeddingRedstoneID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingredstoneid(), target);
  }
  
  // optional uint32 WeddingHallRedstoneID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weddinghallredstoneid(), target);
  }
  
  // optional uint32 WeddingHallMapID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->weddinghallmapid(), target);
  }
  
  // optional uint32 InvitationCardID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->invitationcardid(), target);
  }
  
  // optional uint32 InvitationCardNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->invitationcardnum(), target);
  }
  
  // optional uint32 FemaleKeepsakeID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->femalekeepsakeid(), target);
  }
  
  // optional uint32 MaleKeepsakeID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->malekeepsakeid(), target);
  }
  
  // optional uint32 PosX = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->posx(), target);
  }
  
  // optional uint32 PosY = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->posy(), target);
  }
  
  // optional uint32 FemaleKeepsakeTwo = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->femalekeepsaketwo(), target);
  }
  
  // optional uint32 MaleKeepsakeTwo = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->malekeepsaketwo(), target);
  }
  
  // optional uint32 FemaleKeepsakeThree = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->femalekeepsakethree(), target);
  }
  
  // optional uint32 MaleKeepsakeThree = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->malekeepsakethree(), target);
  }
  
  // optional uint32 MaleBufferID = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->malebufferid(), target);
  }
  
  // optional uint32 FemaleBufferID = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->femalebufferid(), target);
  }
  
  // optional uint32 MaleItemID = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->maleitemid(), target);
  }
  
  // optional uint32 FemaleItemID = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->femaleitemid(), target);
  }
  
  // optional uint32 GroomPosX = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->groomposx(), target);
  }
  
  // optional uint32 GroomPosY = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->groomposy(), target);
  }
  
  // optional uint32 BridePosX = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->brideposx(), target);
  }
  
  // optional uint32 BridePosY = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->brideposy(), target);
  }
  
  // optional uint32 GroomBufferID = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->groombufferid(), target);
  }
  
  // optional uint32 BrideBufferID = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->bridebufferid(), target);
  }
  
  // optional uint32 MarriageItemID = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->marriageitemid(), target);
  }
  
  // optional uint32 WeddingScroll = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->weddingscroll(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWeddingInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WeddingLength = 1;
    if (has_weddinglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddinglength());
    }
    
    // optional uint32 MoneyNeeded = 2;
    if (has_moneyneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->moneyneeded());
    }
    
    // optional uint32 DelayMoneyNeeded = 3;
    if (has_delaymoneyneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->delaymoneyneeded());
    }
    
    // optional uint32 WeddingRedstoneID = 4;
    if (has_weddingredstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingredstoneid());
    }
    
    // optional uint32 WeddingHallRedstoneID = 5;
    if (has_weddinghallredstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddinghallredstoneid());
    }
    
    // optional uint32 WeddingHallMapID = 6;
    if (has_weddinghallmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddinghallmapid());
    }
    
    // optional uint32 InvitationCardID = 7;
    if (has_invitationcardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitationcardid());
    }
    
    // optional uint32 InvitationCardNum = 8;
    if (has_invitationcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitationcardnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 FemaleKeepsakeID = 9;
    if (has_femalekeepsakeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femalekeepsakeid());
    }
    
    // optional uint32 MaleKeepsakeID = 10;
    if (has_malekeepsakeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->malekeepsakeid());
    }
    
    // optional uint32 PosX = 11;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 12;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 FemaleKeepsakeTwo = 13;
    if (has_femalekeepsaketwo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femalekeepsaketwo());
    }
    
    // optional uint32 MaleKeepsakeTwo = 14;
    if (has_malekeepsaketwo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->malekeepsaketwo());
    }
    
    // optional uint32 FemaleKeepsakeThree = 15;
    if (has_femalekeepsakethree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femalekeepsakethree());
    }
    
    // optional uint32 MaleKeepsakeThree = 16;
    if (has_malekeepsakethree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->malekeepsakethree());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MaleBufferID = 17;
    if (has_malebufferid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->malebufferid());
    }
    
    // optional uint32 FemaleBufferID = 18;
    if (has_femalebufferid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femalebufferid());
    }
    
    // optional uint32 MaleItemID = 19;
    if (has_maleitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maleitemid());
    }
    
    // optional uint32 FemaleItemID = 20;
    if (has_femaleitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femaleitemid());
    }
    
    // optional uint32 GroomPosX = 21;
    if (has_groomposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomposx());
    }
    
    // optional uint32 GroomPosY = 22;
    if (has_groomposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomposy());
    }
    
    // optional uint32 BridePosX = 23;
    if (has_brideposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideposx());
    }
    
    // optional uint32 BridePosY = 24;
    if (has_brideposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideposy());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 GroomBufferID = 25;
    if (has_groombufferid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groombufferid());
    }
    
    // optional uint32 BrideBufferID = 26;
    if (has_bridebufferid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bridebufferid());
    }
    
    // optional uint32 MarriageItemID = 27;
    if (has_marriageitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriageitemid());
    }
    
    // optional uint32 WeddingScroll = 28;
    if (has_weddingscroll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingscroll());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWeddingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWeddingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWeddingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWeddingInfo::MergeFrom(const PBWeddingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_weddinglength(from.weddinglength());
    }
    if (from._has_bit(1)) {
      set_moneyneeded(from.moneyneeded());
    }
    if (from._has_bit(2)) {
      set_delaymoneyneeded(from.delaymoneyneeded());
    }
    if (from._has_bit(3)) {
      set_weddingredstoneid(from.weddingredstoneid());
    }
    if (from._has_bit(4)) {
      set_weddinghallredstoneid(from.weddinghallredstoneid());
    }
    if (from._has_bit(5)) {
      set_weddinghallmapid(from.weddinghallmapid());
    }
    if (from._has_bit(6)) {
      set_invitationcardid(from.invitationcardid());
    }
    if (from._has_bit(7)) {
      set_invitationcardnum(from.invitationcardnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_femalekeepsakeid(from.femalekeepsakeid());
    }
    if (from._has_bit(9)) {
      set_malekeepsakeid(from.malekeepsakeid());
    }
    if (from._has_bit(10)) {
      set_posx(from.posx());
    }
    if (from._has_bit(11)) {
      set_posy(from.posy());
    }
    if (from._has_bit(12)) {
      set_femalekeepsaketwo(from.femalekeepsaketwo());
    }
    if (from._has_bit(13)) {
      set_malekeepsaketwo(from.malekeepsaketwo());
    }
    if (from._has_bit(14)) {
      set_femalekeepsakethree(from.femalekeepsakethree());
    }
    if (from._has_bit(15)) {
      set_malekeepsakethree(from.malekeepsakethree());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_malebufferid(from.malebufferid());
    }
    if (from._has_bit(17)) {
      set_femalebufferid(from.femalebufferid());
    }
    if (from._has_bit(18)) {
      set_maleitemid(from.maleitemid());
    }
    if (from._has_bit(19)) {
      set_femaleitemid(from.femaleitemid());
    }
    if (from._has_bit(20)) {
      set_groomposx(from.groomposx());
    }
    if (from._has_bit(21)) {
      set_groomposy(from.groomposy());
    }
    if (from._has_bit(22)) {
      set_brideposx(from.brideposx());
    }
    if (from._has_bit(23)) {
      set_brideposy(from.brideposy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_groombufferid(from.groombufferid());
    }
    if (from._has_bit(25)) {
      set_bridebufferid(from.bridebufferid());
    }
    if (from._has_bit(26)) {
      set_marriageitemid(from.marriageitemid());
    }
    if (from._has_bit(27)) {
      set_weddingscroll(from.weddingscroll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWeddingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWeddingInfo::CopyFrom(const PBWeddingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWeddingInfo::Swap(PBWeddingInfo* other) {
  if (other != this) {
    std::swap(weddinglength_, other->weddinglength_);
    std::swap(moneyneeded_, other->moneyneeded_);
    std::swap(delaymoneyneeded_, other->delaymoneyneeded_);
    std::swap(weddingredstoneid_, other->weddingredstoneid_);
    std::swap(weddinghallredstoneid_, other->weddinghallredstoneid_);
    std::swap(weddinghallmapid_, other->weddinghallmapid_);
    std::swap(invitationcardid_, other->invitationcardid_);
    std::swap(invitationcardnum_, other->invitationcardnum_);
    std::swap(femalekeepsakeid_, other->femalekeepsakeid_);
    std::swap(malekeepsakeid_, other->malekeepsakeid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(femalekeepsaketwo_, other->femalekeepsaketwo_);
    std::swap(malekeepsaketwo_, other->malekeepsaketwo_);
    std::swap(femalekeepsakethree_, other->femalekeepsakethree_);
    std::swap(malekeepsakethree_, other->malekeepsakethree_);
    std::swap(malebufferid_, other->malebufferid_);
    std::swap(femalebufferid_, other->femalebufferid_);
    std::swap(maleitemid_, other->maleitemid_);
    std::swap(femaleitemid_, other->femaleitemid_);
    std::swap(groomposx_, other->groomposx_);
    std::swap(groomposy_, other->groomposy_);
    std::swap(brideposx_, other->brideposx_);
    std::swap(brideposy_, other->brideposy_);
    std::swap(groombufferid_, other->groombufferid_);
    std::swap(bridebufferid_, other->bridebufferid_);
    std::swap(marriageitemid_, other->marriageitemid_);
    std::swap(weddingscroll_, other->weddingscroll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWeddingInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWeddingInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWeddingInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWeddingInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBKeepsnakeInfo::kKeepsakeIDFieldNumber;
const int PBKeepsnakeInfo::kEquipIDFieldNumber;
#endif  // !_MSC_VER

PBKeepsnakeInfo::PBKeepsnakeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBKeepsnakeInfo::InitAsDefaultInstance() {}

PBKeepsnakeInfo::PBKeepsnakeInfo(const PBKeepsnakeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBKeepsnakeInfo::SharedCtor() {
  _cached_size_ = 0;
  keepsakeid_ = 0u;
  equipid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBKeepsnakeInfo::~PBKeepsnakeInfo() {
  SharedDtor();
}

void PBKeepsnakeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBKeepsnakeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBKeepsnakeInfo_descriptor_;
}

const PBKeepsnakeInfo& PBKeepsnakeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBKeepsnakeInfo* PBKeepsnakeInfo::default_instance_ = NULL;

PBKeepsnakeInfo* PBKeepsnakeInfo::New() const {
  return new PBKeepsnakeInfo;
}

void PBKeepsnakeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keepsakeid_ = 0u;
    equipid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBKeepsnakeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 KeepsakeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &keepsakeid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EquipID;
        break;
      }
      
      // optional uint32 EquipID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EquipID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &equipid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBKeepsnakeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBKeepsnakeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 KeepsakeID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->keepsakeid(), output);
  }
  
  // optional uint32 EquipID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->equipid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBKeepsnakeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 KeepsakeID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->keepsakeid(), target);
  }
  
  // optional uint32 EquipID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->equipid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBKeepsnakeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 KeepsakeID = 1;
    if (has_keepsakeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->keepsakeid());
    }
    
    // optional uint32 EquipID = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->equipid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBKeepsnakeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBKeepsnakeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBKeepsnakeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBKeepsnakeInfo::MergeFrom(const PBKeepsnakeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_keepsakeid(from.keepsakeid());
    }
    if (from._has_bit(1)) {
      set_equipid(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBKeepsnakeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBKeepsnakeInfo::CopyFrom(const PBKeepsnakeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBKeepsnakeInfo::Swap(PBKeepsnakeInfo* other) {
  if (other != this) {
    std::swap(keepsakeid_, other->keepsakeid_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBKeepsnakeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBKeepsnakeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBKeepsnakeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBKeepsnakeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplateMarriageConfig::kTempIDFieldNumber;
const int PBTemplateMarriageConfig::kWeddingInfoFieldNumber;
const int PBTemplateMarriageConfig::kFemaleKeepsakeInfoFieldNumber;
const int PBTemplateMarriageConfig::kMaleKeepsakeInfoFieldNumber;
const int PBTemplateMarriageConfig::kWeddingNpcFieldNumber;
const int PBTemplateMarriageConfig::kMarriageLevelFieldNumber;
const int PBTemplateMarriageConfig::kMarriageMoneyFieldNumber;
const int PBTemplateMarriageConfig::kMapIDFieldNumber;
const int PBTemplateMarriageConfig::kPosXFieldNumber;
const int PBTemplateMarriageConfig::kPosYFieldNumber;
const int PBTemplateMarriageConfig::kDivorceItemIDFieldNumber;
const int PBTemplateMarriageConfig::kMarriageTitleIDFieldNumber;
const int PBTemplateMarriageConfig::kMaleKeepsakeIDFieldNumber;
const int PBTemplateMarriageConfig::kFemaleKeepsakeIDFieldNumber;
const int PBTemplateMarriageConfig::kInvitationIDFieldNumber;
const int PBTemplateMarriageConfig::kInvitationNumFieldNumber;
const int PBTemplateMarriageConfig::kMaleItemIDFieldNumber;
const int PBTemplateMarriageConfig::kFemaleItemIDFieldNumber;
const int PBTemplateMarriageConfig::kBaitangBuffIDFieldNumber;
const int PBTemplateMarriageConfig::kBasicMarriageItemFieldNumber;
const int PBTemplateMarriageConfig::kBasicMarriageItemNumFieldNumber;
const int PBTemplateMarriageConfig::kMarriageNpcMapIDFieldNumber;
const int PBTemplateMarriageConfig::kMarriageNpcPosXFieldNumber;
const int PBTemplateMarriageConfig::kMarriageNpcPosYFieldNumber;
const int PBTemplateMarriageConfig::kMarriageIntimacyFieldNumber;
const int PBTemplateMarriageConfig::kIntimacyItemNumFieldNumber;
#endif  // !_MSC_VER

PBTemplateMarriageConfig::PBTemplateMarriageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplateMarriageConfig::InitAsDefaultInstance() {}

PBTemplateMarriageConfig::PBTemplateMarriageConfig(const PBTemplateMarriageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplateMarriageConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  marriagelevel_ = 0u;
  marriagemoney_ = 0u;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  divorceitemid_ = 0u;
  marriagetitleid_ = 0u;
  malekeepsakeid_ = 0u;
  femalekeepsakeid_ = 0u;
  invitationid_ = 0u;
  invitationnum_ = 0u;
  maleitemid_ = 0u;
  femaleitemid_ = 0u;
  baitangbuffid_ = 0u;
  basicmarriageitem_ = 0u;
  basicmarriageitemnum_ = 0u;
  marriagenpcmapid_ = 0u;
  marriagenpcposx_ = 0u;
  marriagenpcposy_ = 0u;
  marriageintimacy_ = 0u;
  intimacyitemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplateMarriageConfig::~PBTemplateMarriageConfig() {
  SharedDtor();
}

void PBTemplateMarriageConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplateMarriageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateMarriageConfig_descriptor_;
}

const PBTemplateMarriageConfig& PBTemplateMarriageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplateMarriageConfig* PBTemplateMarriageConfig::default_instance_ = NULL;

PBTemplateMarriageConfig* PBTemplateMarriageConfig::New() const {
  return new PBTemplateMarriageConfig;
}

void PBTemplateMarriageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    marriagelevel_ = 0u;
    marriagemoney_ = 0u;
    mapid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posx_ = 0u;
    posy_ = 0u;
    divorceitemid_ = 0u;
    marriagetitleid_ = 0u;
    malekeepsakeid_ = 0u;
    femalekeepsakeid_ = 0u;
    invitationid_ = 0u;
    invitationnum_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maleitemid_ = 0u;
    femaleitemid_ = 0u;
    baitangbuffid_ = 0u;
    basicmarriageitem_ = 0u;
    basicmarriageitemnum_ = 0u;
    marriagenpcmapid_ = 0u;
    marriagenpcposx_ = 0u;
    marriagenpcposy_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    marriageintimacy_ = 0u;
    intimacyitemnum_ = 0u;
  }
  weddinginfo_.Clear();
  femalekeepsakeinfo_.Clear();
  malekeepsakeinfo_.Clear();
  weddingnpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplateMarriageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_WeddingInfo;
        break;
      }
      
      // repeated .PBWeddingInfo WeddingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WeddingInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_weddinginfo()));
        if (input->ExpectTag(18)) goto parse_WeddingInfo;
        if (input->ExpectTag(26)) goto parse_FemaleKeepsakeInfo;
        break;
      }
      
      // repeated .PBKeepsnakeInfo FemaleKeepsakeInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FemaleKeepsakeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_femalekeepsakeinfo()));
        if (input->ExpectTag(26)) goto parse_FemaleKeepsakeInfo;
        if (input->ExpectTag(34)) goto parse_MaleKeepsakeInfo;
        break;
      }
      
      // repeated .PBKeepsnakeInfo MaleKeepsakeInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MaleKeepsakeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_malekeepsakeinfo()));
        if (input->ExpectTag(34)) goto parse_MaleKeepsakeInfo;
        if (input->ExpectTag(40)) goto parse_WeddingNpc;
        break;
      }
      
      // repeated uint32 WeddingNpc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingNpc:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_weddingnpc(value);
        if (input->ExpectTag(40)) goto parse_WeddingNpc;
        if (input->ExpectTag(48)) goto parse_MarriageLevel;
        break;
      }
      
      // optional uint32 MarriageLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagelevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MarriageMoney;
        break;
      }
      
      // optional uint32 MarriageMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagemoney_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DivorceItemID;
        break;
      }
      
      // optional uint32 DivorceItemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DivorceItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &divorceitemid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_MarriageTitleID;
        break;
      }
      
      // optional uint32 MarriageTitleID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageTitleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagetitleid_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MaleKeepsakeID;
        break;
      }
      
      // optional uint32 MaleKeepsakeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleKeepsakeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &malekeepsakeid_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_FemaleKeepsakeID;
        break;
      }
      
      // optional uint32 FemaleKeepsakeID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleKeepsakeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femalekeepsakeid_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_InvitationID;
        break;
      }
      
      // optional uint32 InvitationID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitationID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitationid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_InvitationNum;
        break;
      }
      
      // optional uint32 InvitationNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitationNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitationnum_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MaleItemID;
        break;
      }
      
      // optional uint32 MaleItemID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaleItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maleitemid_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_FemaleItemID;
        break;
      }
      
      // optional uint32 FemaleItemID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FemaleItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &femaleitemid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_BaitangBuffID;
        break;
      }
      
      // optional uint32 BaitangBuffID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaitangBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &baitangbuffid_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_BasicMarriageItem;
        break;
      }
      
      // optional uint32 BasicMarriageItem = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BasicMarriageItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &basicmarriageitem_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_BasicMarriageItemNum;
        break;
      }
      
      // optional uint32 BasicMarriageItemNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BasicMarriageItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &basicmarriageitemnum_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MarriageNpcMapID;
        break;
      }
      
      // optional uint32 MarriageNpcMapID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageNpcMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagenpcmapid_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_MarriageNpcPosX;
        break;
      }
      
      // optional uint32 MarriageNpcPosX = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageNpcPosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagenpcposx_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_MarriageNpcPosY;
        break;
      }
      
      // optional uint32 MarriageNpcPosY = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageNpcPosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagenpcposy_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_MarriageIntimacy;
        break;
      }
      
      // optional uint32 MarriageIntimacy = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageIntimacy:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriageintimacy_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_IntimacyItemNum;
        break;
      }
      
      // optional uint32 IntimacyItemNum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntimacyItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intimacyitemnum_));
        _set_bit(25);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplateMarriageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplateMarriageConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBWeddingInfo WeddingInfo = 2;
  for (int i = 0; i < this->weddinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->weddinginfo(i), output);
  }
  
  // repeated .PBKeepsnakeInfo FemaleKeepsakeInfo = 3;
  for (int i = 0; i < this->femalekeepsakeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->femalekeepsakeinfo(i), output);
  }
  
  // repeated .PBKeepsnakeInfo MaleKeepsakeInfo = 4;
  for (int i = 0; i < this->malekeepsakeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->malekeepsakeinfo(i), output);
  }
  
  // repeated uint32 WeddingNpc = 5;
  for (int i = 0; i < this->weddingnpc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weddingnpc(i), output);
  }
  
  // optional uint32 MarriageLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->marriagelevel(), output);
  }
  
  // optional uint32 MarriageMoney = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->marriagemoney(), output);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->mapid(), output);
  }
  
  // optional uint32 PosX = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->posx(), output);
  }
  
  // optional uint32 PosY = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->posy(), output);
  }
  
  // optional uint32 DivorceItemID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->divorceitemid(), output);
  }
  
  // optional uint32 MarriageTitleID = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->marriagetitleid(), output);
  }
  
  // optional uint32 MaleKeepsakeID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->malekeepsakeid(), output);
  }
  
  // optional uint32 FemaleKeepsakeID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->femalekeepsakeid(), output);
  }
  
  // optional uint32 InvitationID = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->invitationid(), output);
  }
  
  // optional uint32 InvitationNum = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->invitationnum(), output);
  }
  
  // optional uint32 MaleItemID = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->maleitemid(), output);
  }
  
  // optional uint32 FemaleItemID = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->femaleitemid(), output);
  }
  
  // optional uint32 BaitangBuffID = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->baitangbuffid(), output);
  }
  
  // optional uint32 BasicMarriageItem = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->basicmarriageitem(), output);
  }
  
  // optional uint32 BasicMarriageItemNum = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->basicmarriageitemnum(), output);
  }
  
  // optional uint32 MarriageNpcMapID = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->marriagenpcmapid(), output);
  }
  
  // optional uint32 MarriageNpcPosX = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->marriagenpcposx(), output);
  }
  
  // optional uint32 MarriageNpcPosY = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->marriagenpcposy(), output);
  }
  
  // optional uint32 MarriageIntimacy = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->marriageintimacy(), output);
  }
  
  // optional uint32 IntimacyItemNum = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->intimacyitemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplateMarriageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBWeddingInfo WeddingInfo = 2;
  for (int i = 0; i < this->weddinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->weddinginfo(i), target);
  }
  
  // repeated .PBKeepsnakeInfo FemaleKeepsakeInfo = 3;
  for (int i = 0; i < this->femalekeepsakeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->femalekeepsakeinfo(i), target);
  }
  
  // repeated .PBKeepsnakeInfo MaleKeepsakeInfo = 4;
  for (int i = 0; i < this->malekeepsakeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->malekeepsakeinfo(i), target);
  }
  
  // repeated uint32 WeddingNpc = 5;
  for (int i = 0; i < this->weddingnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weddingnpc(i), target);
  }
  
  // optional uint32 MarriageLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->marriagelevel(), target);
  }
  
  // optional uint32 MarriageMoney = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->marriagemoney(), target);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->mapid(), target);
  }
  
  // optional uint32 PosX = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->posx(), target);
  }
  
  // optional uint32 PosY = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->posy(), target);
  }
  
  // optional uint32 DivorceItemID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->divorceitemid(), target);
  }
  
  // optional uint32 MarriageTitleID = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->marriagetitleid(), target);
  }
  
  // optional uint32 MaleKeepsakeID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->malekeepsakeid(), target);
  }
  
  // optional uint32 FemaleKeepsakeID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->femalekeepsakeid(), target);
  }
  
  // optional uint32 InvitationID = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->invitationid(), target);
  }
  
  // optional uint32 InvitationNum = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->invitationnum(), target);
  }
  
  // optional uint32 MaleItemID = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->maleitemid(), target);
  }
  
  // optional uint32 FemaleItemID = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->femaleitemid(), target);
  }
  
  // optional uint32 BaitangBuffID = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->baitangbuffid(), target);
  }
  
  // optional uint32 BasicMarriageItem = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->basicmarriageitem(), target);
  }
  
  // optional uint32 BasicMarriageItemNum = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->basicmarriageitemnum(), target);
  }
  
  // optional uint32 MarriageNpcMapID = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->marriagenpcmapid(), target);
  }
  
  // optional uint32 MarriageNpcPosX = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->marriagenpcposx(), target);
  }
  
  // optional uint32 MarriageNpcPosY = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->marriagenpcposy(), target);
  }
  
  // optional uint32 MarriageIntimacy = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->marriageintimacy(), target);
  }
  
  // optional uint32 IntimacyItemNum = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->intimacyitemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplateMarriageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MarriageLevel = 6;
    if (has_marriagelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagelevel());
    }
    
    // optional uint32 MarriageMoney = 7;
    if (has_marriagemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagemoney());
    }
    
    // optional uint32 MapID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PosX = 9;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 10;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 DivorceItemID = 11;
    if (has_divorceitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->divorceitemid());
    }
    
    // optional uint32 MarriageTitleID = 12;
    if (has_marriagetitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagetitleid());
    }
    
    // optional uint32 MaleKeepsakeID = 13;
    if (has_malekeepsakeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->malekeepsakeid());
    }
    
    // optional uint32 FemaleKeepsakeID = 14;
    if (has_femalekeepsakeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femalekeepsakeid());
    }
    
    // optional uint32 InvitationID = 15;
    if (has_invitationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitationid());
    }
    
    // optional uint32 InvitationNum = 16;
    if (has_invitationnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitationnum());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MaleItemID = 17;
    if (has_maleitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maleitemid());
    }
    
    // optional uint32 FemaleItemID = 18;
    if (has_femaleitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->femaleitemid());
    }
    
    // optional uint32 BaitangBuffID = 19;
    if (has_baitangbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->baitangbuffid());
    }
    
    // optional uint32 BasicMarriageItem = 20;
    if (has_basicmarriageitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->basicmarriageitem());
    }
    
    // optional uint32 BasicMarriageItemNum = 21;
    if (has_basicmarriageitemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->basicmarriageitemnum());
    }
    
    // optional uint32 MarriageNpcMapID = 22;
    if (has_marriagenpcmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagenpcmapid());
    }
    
    // optional uint32 MarriageNpcPosX = 23;
    if (has_marriagenpcposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagenpcposx());
    }
    
    // optional uint32 MarriageNpcPosY = 24;
    if (has_marriagenpcposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagenpcposy());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 MarriageIntimacy = 25;
    if (has_marriageintimacy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriageintimacy());
    }
    
    // optional uint32 IntimacyItemNum = 26;
    if (has_intimacyitemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intimacyitemnum());
    }
    
  }
  // repeated .PBWeddingInfo WeddingInfo = 2;
  total_size += 1 * this->weddinginfo_size();
  for (int i = 0; i < this->weddinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->weddinginfo(i));
  }
  
  // repeated .PBKeepsnakeInfo FemaleKeepsakeInfo = 3;
  total_size += 1 * this->femalekeepsakeinfo_size();
  for (int i = 0; i < this->femalekeepsakeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->femalekeepsakeinfo(i));
  }
  
  // repeated .PBKeepsnakeInfo MaleKeepsakeInfo = 4;
  total_size += 1 * this->malekeepsakeinfo_size();
  for (int i = 0; i < this->malekeepsakeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->malekeepsakeinfo(i));
  }
  
  // repeated uint32 WeddingNpc = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->weddingnpc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->weddingnpc(i));
    }
    total_size += 1 * this->weddingnpc_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplateMarriageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplateMarriageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplateMarriageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplateMarriageConfig::MergeFrom(const PBTemplateMarriageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  weddinginfo_.MergeFrom(from.weddinginfo_);
  femalekeepsakeinfo_.MergeFrom(from.femalekeepsakeinfo_);
  malekeepsakeinfo_.MergeFrom(from.malekeepsakeinfo_);
  weddingnpc_.MergeFrom(from.weddingnpc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(5)) {
      set_marriagelevel(from.marriagelevel());
    }
    if (from._has_bit(6)) {
      set_marriagemoney(from.marriagemoney());
    }
    if (from._has_bit(7)) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_posx(from.posx());
    }
    if (from._has_bit(9)) {
      set_posy(from.posy());
    }
    if (from._has_bit(10)) {
      set_divorceitemid(from.divorceitemid());
    }
    if (from._has_bit(11)) {
      set_marriagetitleid(from.marriagetitleid());
    }
    if (from._has_bit(12)) {
      set_malekeepsakeid(from.malekeepsakeid());
    }
    if (from._has_bit(13)) {
      set_femalekeepsakeid(from.femalekeepsakeid());
    }
    if (from._has_bit(14)) {
      set_invitationid(from.invitationid());
    }
    if (from._has_bit(15)) {
      set_invitationnum(from.invitationnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_maleitemid(from.maleitemid());
    }
    if (from._has_bit(17)) {
      set_femaleitemid(from.femaleitemid());
    }
    if (from._has_bit(18)) {
      set_baitangbuffid(from.baitangbuffid());
    }
    if (from._has_bit(19)) {
      set_basicmarriageitem(from.basicmarriageitem());
    }
    if (from._has_bit(20)) {
      set_basicmarriageitemnum(from.basicmarriageitemnum());
    }
    if (from._has_bit(21)) {
      set_marriagenpcmapid(from.marriagenpcmapid());
    }
    if (from._has_bit(22)) {
      set_marriagenpcposx(from.marriagenpcposx());
    }
    if (from._has_bit(23)) {
      set_marriagenpcposy(from.marriagenpcposy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_marriageintimacy(from.marriageintimacy());
    }
    if (from._has_bit(25)) {
      set_intimacyitemnum(from.intimacyitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplateMarriageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateMarriageConfig::CopyFrom(const PBTemplateMarriageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateMarriageConfig::Swap(PBTemplateMarriageConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    weddinginfo_.Swap(&other->weddinginfo_);
    femalekeepsakeinfo_.Swap(&other->femalekeepsakeinfo_);
    malekeepsakeinfo_.Swap(&other->malekeepsakeinfo_);
    weddingnpc_.Swap(&other->weddingnpc_);
    std::swap(marriagelevel_, other->marriagelevel_);
    std::swap(marriagemoney_, other->marriagemoney_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(divorceitemid_, other->divorceitemid_);
    std::swap(marriagetitleid_, other->marriagetitleid_);
    std::swap(malekeepsakeid_, other->malekeepsakeid_);
    std::swap(femalekeepsakeid_, other->femalekeepsakeid_);
    std::swap(invitationid_, other->invitationid_);
    std::swap(invitationnum_, other->invitationnum_);
    std::swap(maleitemid_, other->maleitemid_);
    std::swap(femaleitemid_, other->femaleitemid_);
    std::swap(baitangbuffid_, other->baitangbuffid_);
    std::swap(basicmarriageitem_, other->basicmarriageitem_);
    std::swap(basicmarriageitemnum_, other->basicmarriageitemnum_);
    std::swap(marriagenpcmapid_, other->marriagenpcmapid_);
    std::swap(marriagenpcposx_, other->marriagenpcposx_);
    std::swap(marriagenpcposy_, other->marriagenpcposy_);
    std::swap(marriageintimacy_, other->marriageintimacy_);
    std::swap(intimacyitemnum_, other->intimacyitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplateMarriageConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplateMarriageConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplateMarriageConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateMarriageConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBInvitation::kItemBaseFieldNumber;
const int PBInvitation::kExchangeItemIDFieldNumber;
#endif  // !_MSC_VER

PBInvitation::PBInvitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBInvitation::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBInvitation::PBInvitation(const PBInvitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBInvitation::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  exchangeitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBInvitation::~PBInvitation() {
  SharedDtor();
}

void PBInvitation::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBInvitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBInvitation_descriptor_;
}

const PBInvitation& PBInvitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBInvitation* PBInvitation::default_instance_ = NULL;

PBInvitation* PBInvitation::New() const {
  return new PBInvitation;
}

void PBInvitation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    exchangeitemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_ExchangeItemID;
        break;
      }
      
      // optional uint32 ExchangeItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangeitemid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBInvitation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 ExchangeItemID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exchangeitemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBInvitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 ExchangeItemID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exchangeitemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBInvitation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 ExchangeItemID = 2;
    if (has_exchangeitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangeitemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBInvitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBInvitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBInvitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBInvitation::MergeFrom(const PBInvitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_exchangeitemid(from.exchangeitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBInvitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInvitation::CopyFrom(const PBInvitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInvitation::Swap(PBInvitation* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(exchangeitemid_, other->exchangeitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBInvitation::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBInvitation::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBInvitation::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBInvitation_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int ProGressInfo::kFuncTypeFieldNumber;
const int ProGressInfo::kProGressTimeFieldNumber;
#endif  // !_MSC_VER

ProGressInfo::ProGressInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGressInfo::InitAsDefaultInstance() {}

ProGressInfo::ProGressInfo(const ProGressInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGressInfo::SharedCtor() {
  _cached_size_ = 0;
  functype_ = 0u;
  progresstime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGressInfo::~ProGressInfo() {
  SharedDtor();
}

void ProGressInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ProGressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGressInfo_descriptor_;
}

const ProGressInfo& ProGressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

ProGressInfo* ProGressInfo::default_instance_ = NULL;

ProGressInfo* ProGressInfo::New() const {
  return new ProGressInfo;
}

void ProGressInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functype_ = 0u;
    progresstime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FuncType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &functype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ProGressTime;
        break;
      }
      
      // optional uint32 ProGressTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProGressTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &progresstime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ProGressInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FuncType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->functype(), output);
  }
  
  // optional uint32 ProGressTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->progresstime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGressInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FuncType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->functype(), target);
  }
  
  // optional uint32 ProGressTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->progresstime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGressInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FuncType = 1;
    if (has_functype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->functype());
    }
    
    // optional uint32 ProGressTime = 2;
    if (has_progresstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->progresstime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ProGressInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGressInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGressInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGressInfo::MergeFrom(const ProGressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_functype(from.functype());
    }
    if (from._has_bit(1)) {
      set_progresstime(from.progresstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGressInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGressInfo::CopyFrom(const ProGressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGressInfo::Swap(ProGressInfo* other) {
  if (other != this) {
    std::swap(functype_, other->functype_);
    std::swap(progresstime_, other->progresstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ProGressInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* ProGressInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ProGressInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ProGressInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBProGressConfig::kTmpIDFieldNumber;
const int PBProGressConfig::kProgressFieldNumber;
#endif  // !_MSC_VER

PBProGressConfig::PBProGressConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProGressConfig::InitAsDefaultInstance() {}

PBProGressConfig::PBProGressConfig(const PBProGressConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProGressConfig::SharedCtor() {
  _cached_size_ = 0;
  tmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProGressConfig::~PBProGressConfig() {
  SharedDtor();
}

void PBProGressConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBProGressConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProGressConfig_descriptor_;
}

const PBProGressConfig& PBProGressConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBProGressConfig* PBProGressConfig::default_instance_ = NULL;

PBProGressConfig* PBProGressConfig::New() const {
  return new PBProGressConfig;
}

void PBProGressConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmpid_ = 0u;
  }
  progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProGressConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TmpID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tmpid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Progress;
        break;
      }
      
      // repeated .ProGressInfo Progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Progress:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_progress()));
        if (input->ExpectTag(18)) goto parse_Progress;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProGressConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProGressConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tmpid(), output);
  }
  
  // repeated .ProGressInfo Progress = 2;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->progress(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProGressConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TmpID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tmpid(), target);
  }
  
  // repeated .ProGressInfo Progress = 2;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->progress(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProGressConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TmpID = 1;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tmpid());
    }
    
  }
  // repeated .ProGressInfo Progress = 2;
  total_size += 1 * this->progress_size();
  for (int i = 0; i < this->progress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->progress(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProGressConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProGressConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProGressConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProGressConfig::MergeFrom(const PBProGressConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmpid(from.tmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProGressConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProGressConfig::CopyFrom(const PBProGressConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProGressConfig::Swap(PBProGressConfig* other) {
  if (other != this) {
    std::swap(tmpid_, other->tmpid_);
    progress_.Swap(&other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProGressConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProGressConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProGressConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProGressConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSysInvitation::kItemBaseFieldNumber;
const int PBSysInvitation::kInvitationIDFieldNumber;
#endif  // !_MSC_VER

PBSysInvitation::PBSysInvitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSysInvitation::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBSysInvitation::PBSysInvitation(const PBSysInvitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSysInvitation::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  invitationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSysInvitation::~PBSysInvitation() {
  SharedDtor();
}

void PBSysInvitation::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBSysInvitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSysInvitation_descriptor_;
}

const PBSysInvitation& PBSysInvitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSysInvitation* PBSysInvitation::default_instance_ = NULL;

PBSysInvitation* PBSysInvitation::New() const {
  return new PBSysInvitation;
}

void PBSysInvitation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    invitationid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSysInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_InvitationID;
        break;
      }
      
      // optional uint32 InvitationID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvitationID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitationid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSysInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSysInvitation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 InvitationID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->invitationid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSysInvitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 InvitationID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->invitationid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSysInvitation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 InvitationID = 2;
    if (has_invitationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitationid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSysInvitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSysInvitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSysInvitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSysInvitation::MergeFrom(const PBSysInvitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_invitationid(from.invitationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSysInvitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSysInvitation::CopyFrom(const PBSysInvitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSysInvitation::Swap(PBSysInvitation* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(invitationid_, other->invitationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSysInvitation::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSysInvitation::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSysInvitation::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSysInvitation_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCount::kCountTypeFieldNumber;
const int PBCount::kCountTimeFieldNumber;
const int PBCount::kVipTimeFieldNumber;
const int PBCount::kClearTypeFieldNumber;
#endif  // !_MSC_VER

PBCount::PBCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCount::InitAsDefaultInstance() {}

PBCount::PBCount(const PBCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCount::SharedCtor() {
  _cached_size_ = 0;
  counttype_ = 0u;
  counttime_ = 0u;
  viptime_ = 0u;
  cleartype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCount::~PBCount() {
  SharedDtor();
}

void PBCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCount_descriptor_;
}

const PBCount& PBCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCount* PBCount::default_instance_ = NULL;

PBCount* PBCount::New() const {
  return new PBCount;
}

void PBCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counttype_ = 0u;
    counttime_ = 0u;
    viptime_ = 0u;
    cleartype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CountType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &counttype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CountTime;
        break;
      }
      
      // optional uint32 CountTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &counttime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_VipTime;
        break;
      }
      
      // optional uint32 VipTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &viptime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ClearType;
        break;
      }
      
      // optional uint32 ClearType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClearType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleartype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CountType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->counttype(), output);
  }
  
  // optional uint32 CountTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->counttime(), output);
  }
  
  // optional uint32 VipTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->viptime(), output);
  }
  
  // optional uint32 ClearType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->cleartype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CountType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->counttype(), target);
  }
  
  // optional uint32 CountTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->counttime(), target);
  }
  
  // optional uint32 VipTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->viptime(), target);
  }
  
  // optional uint32 ClearType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->cleartype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CountType = 1;
    if (has_counttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->counttype());
    }
    
    // optional uint32 CountTime = 2;
    if (has_counttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->counttime());
    }
    
    // optional uint32 VipTime = 3;
    if (has_viptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->viptime());
    }
    
    // optional uint32 ClearType = 4;
    if (has_cleartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleartype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCount::MergeFrom(const PBCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_counttype(from.counttype());
    }
    if (from._has_bit(1)) {
      set_counttime(from.counttime());
    }
    if (from._has_bit(2)) {
      set_viptime(from.viptime());
    }
    if (from._has_bit(3)) {
      set_cleartype(from.cleartype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCount::CopyFrom(const PBCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCount::Swap(PBCount* other) {
  if (other != this) {
    std::swap(counttype_, other->counttype_);
    std::swap(counttime_, other->counttime_);
    std::swap(viptime_, other->viptime_);
    std::swap(cleartype_, other->cleartype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCount::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCount::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCount::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCount_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCountTable::kTempIDFieldNumber;
const int PBCountTable::kCountDataFieldNumber;
#endif  // !_MSC_VER

PBCountTable::PBCountTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCountTable::InitAsDefaultInstance() {}

PBCountTable::PBCountTable(const PBCountTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCountTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCountTable::~PBCountTable() {
  SharedDtor();
}

void PBCountTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCountTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCountTable_descriptor_;
}

const PBCountTable& PBCountTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCountTable* PBCountTable::default_instance_ = NULL;

PBCountTable* PBCountTable::New() const {
  return new PBCountTable;
}

void PBCountTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  countdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCountTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CountData;
        break;
      }
      
      // repeated .PBCount CountData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CountData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_countdata()));
        if (input->ExpectTag(18)) goto parse_CountData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCountTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCountTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBCount CountData = 2;
  for (int i = 0; i < this->countdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->countdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCountTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBCount CountData = 2;
  for (int i = 0; i < this->countdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->countdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCountTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBCount CountData = 2;
  total_size += 1 * this->countdata_size();
  for (int i = 0; i < this->countdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->countdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCountTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCountTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCountTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCountTable::MergeFrom(const PBCountTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  countdata_.MergeFrom(from.countdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCountTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCountTable::CopyFrom(const PBCountTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCountTable::Swap(PBCountTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    countdata_.Swap(&other->countdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCountTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCountTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCountTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCountTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBActivityConfig::kTempIDFieldNumber;
const int PBActivityConfig::kHydrangeaThrowTimeFieldNumber;
const int PBActivityConfig::kHydrangeaSugarIDFieldNumber;
const int PBActivityConfig::kSugarSpreadTimeFieldNumber;
const int PBActivityConfig::kSugarSpreadNumFieldNumber;
const int PBActivityConfig::kHydrangeaActivityTimeFieldNumber;
const int PBActivityConfig::kHydrangeaHolderTimeFieldNumber;
const int PBActivityConfig::kHydrangeaRabTimeFieldNumber;
const int PBActivityConfig::kHydrangeaRedstoneIDFieldNumber;
const int PBActivityConfig::kHydrangeaExpTableIDFieldNumber;
const int PBActivityConfig::kPreliminaryTitleIDFieldNumber;
const int PBActivityConfig::kPreliminaryBaseScoreFieldNumber;
const int PBActivityConfig::kPreliminaryExtralScoreFieldNumber;
const int PBActivityConfig::kPreliminaryTipsTimeFieldNumber;
const int PBActivityConfig::kPreliminaryAnswerTimeFieldNumber;
const int PBActivityConfig::kPreliminaryQuestionTimeFieldNumber;
const int PBActivityConfig::kPreliminaryQuestionNumFieldNumber;
const int PBActivityConfig::kPreliminaryExpTableIDFieldNumber;
const int PBActivityConfig::kEffectiveOffLineExchangeRateFieldNumber;
const int PBActivityConfig::kMaxOnLineEffectiveTimeFieldNumber;
const int PBActivityConfig::kMaxEffectiveOffLineTimeFieldNumber;
const int PBActivityConfig::kMaxOffLineTimeFieldNumber;
const int PBActivityConfig::kOffLineTimeLimitFieldNumber;
const int PBActivityConfig::kVipOffLineExchangeRateFieldNumber;
#endif  // !_MSC_VER

PBActivityConfig::PBActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivityConfig::InitAsDefaultInstance() {}

PBActivityConfig::PBActivityConfig(const PBActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  hydrangeathrowtime_ = 0u;
  sugarspreadtime_ = 0u;
  sugarspreadnum_ = 0u;
  hydrangeaactivitytime_ = 0u;
  hydrangeaholdertime_ = 0u;
  hydrangearabtime_ = 0u;
  hydrangearedstoneid_ = 0u;
  hydrangeaexptableid_ = 0u;
  preliminarytitleid_ = 0u;
  preliminarybasescore_ = 0u;
  preliminarytipstime_ = 0u;
  preliminaryanswertime_ = 0u;
  preliminaryquestiontime_ = 0u;
  preliminaryquestionnum_ = 0u;
  preliminaryexptableid_ = 0u;
  effectiveofflineexchangerate_ = 0u;
  maxonlineeffectivetime_ = 0u;
  maxeffectiveofflinetime_ = 0u;
  maxofflinetime_ = 0u;
  offlinetimelimit_ = 0u;
  vipofflineexchangerate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivityConfig::~PBActivityConfig() {
  SharedDtor();
}

void PBActivityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivityConfig_descriptor_;
}

const PBActivityConfig& PBActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBActivityConfig* PBActivityConfig::default_instance_ = NULL;

PBActivityConfig* PBActivityConfig::New() const {
  return new PBActivityConfig;
}

void PBActivityConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    hydrangeathrowtime_ = 0u;
    sugarspreadtime_ = 0u;
    sugarspreadnum_ = 0u;
    hydrangeaactivitytime_ = 0u;
    hydrangeaholdertime_ = 0u;
    hydrangearabtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hydrangearedstoneid_ = 0u;
    hydrangeaexptableid_ = 0u;
    preliminarytitleid_ = 0u;
    preliminarybasescore_ = 0u;
    preliminarytipstime_ = 0u;
    preliminaryanswertime_ = 0u;
    preliminaryquestiontime_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    preliminaryquestionnum_ = 0u;
    preliminaryexptableid_ = 0u;
    effectiveofflineexchangerate_ = 0u;
    maxonlineeffectivetime_ = 0u;
    maxeffectiveofflinetime_ = 0u;
    maxofflinetime_ = 0u;
    offlinetimelimit_ = 0u;
    vipofflineexchangerate_ = 0u;
  }
  hydrangeasugarid_.Clear();
  preliminaryextralscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_HydrangeaThrowTime;
        break;
      }
      
      // optional uint32 HydrangeaThrowTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaThrowTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangeathrowtime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HydrangeaSugarID;
        break;
      }
      
      // repeated uint32 HydrangeaSugarID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaSugarID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hydrangeasugarid(value);
        if (input->ExpectTag(24)) goto parse_HydrangeaSugarID;
        if (input->ExpectTag(32)) goto parse_SugarSpreadTime;
        break;
      }
      
      // optional uint32 SugarSpreadTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SugarSpreadTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sugarspreadtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SugarSpreadNum;
        break;
      }
      
      // optional uint32 SugarSpreadNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SugarSpreadNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sugarspreadnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_HydrangeaActivityTime;
        break;
      }
      
      // optional uint32 HydrangeaActivityTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaActivityTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangeaactivitytime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_HydrangeaHolderTime;
        break;
      }
      
      // optional uint32 HydrangeaHolderTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaHolderTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangeaholdertime_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_HydrangeaRabTime;
        break;
      }
      
      // optional uint32 HydrangeaRabTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaRabTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangearabtime_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_HydrangeaRedstoneID;
        break;
      }
      
      // optional uint32 HydrangeaRedstoneID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaRedstoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangearedstoneid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_HydrangeaExpTableID;
        break;
      }
      
      // optional uint32 HydrangeaExpTableID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HydrangeaExpTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hydrangeaexptableid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_PreliminaryTitleID;
        break;
      }
      
      // optional uint32 PreliminaryTitleID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryTitleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminarytitleid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_PreliminaryBaseScore;
        break;
      }
      
      // optional uint32 PreliminaryBaseScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryBaseScore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminarybasescore_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_PreliminaryExtralScore;
        break;
      }
      
      // repeated uint32 PreliminaryExtralScore = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryExtralScore:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_preliminaryextralscore(value);
        if (input->ExpectTag(104)) goto parse_PreliminaryExtralScore;
        if (input->ExpectTag(112)) goto parse_PreliminaryTipsTime;
        break;
      }
      
      // optional uint32 PreliminaryTipsTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryTipsTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminarytipstime_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_PreliminaryAnswerTime;
        break;
      }
      
      // optional uint32 PreliminaryAnswerTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryAnswerTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminaryanswertime_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_PreliminaryQuestionTime;
        break;
      }
      
      // optional uint32 PreliminaryQuestionTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryQuestionTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminaryquestiontime_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_PreliminaryQuestionNum;
        break;
      }
      
      // optional uint32 PreliminaryQuestionNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryQuestionNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminaryquestionnum_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PreliminaryExpTableID;
        break;
      }
      
      // optional uint32 PreliminaryExpTableID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PreliminaryExpTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &preliminaryexptableid_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_EffectiveOffLineExchangeRate;
        break;
      }
      
      // optional uint32 EffectiveOffLineExchangeRate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EffectiveOffLineExchangeRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &effectiveofflineexchangerate_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_MaxOnLineEffectiveTime;
        break;
      }
      
      // optional uint32 MaxOnLineEffectiveTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxOnLineEffectiveTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxonlineeffectivetime_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_MaxEffectiveOffLineTime;
        break;
      }
      
      // optional uint32 MaxEffectiveOffLineTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxEffectiveOffLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxeffectiveofflinetime_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MaxOffLineTime;
        break;
      }
      
      // optional uint32 MaxOffLineTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxOffLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxofflinetime_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_OffLineTimeLimit;
        break;
      }
      
      // optional uint32 OffLineTimeLimit = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffLineTimeLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offlinetimelimit_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_VipOffLineExchangeRate;
        break;
      }
      
      // optional uint32 VipOffLineExchangeRate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipOffLineExchangeRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipofflineexchangerate_));
        _set_bit(23);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBActivityConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 HydrangeaThrowTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->hydrangeathrowtime(), output);
  }
  
  // repeated uint32 HydrangeaSugarID = 3;
  for (int i = 0; i < this->hydrangeasugarid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->hydrangeasugarid(i), output);
  }
  
  // optional uint32 SugarSpreadTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sugarspreadtime(), output);
  }
  
  // optional uint32 SugarSpreadNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sugarspreadnum(), output);
  }
  
  // optional uint32 HydrangeaActivityTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->hydrangeaactivitytime(), output);
  }
  
  // optional uint32 HydrangeaHolderTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->hydrangeaholdertime(), output);
  }
  
  // optional uint32 HydrangeaRabTime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->hydrangearabtime(), output);
  }
  
  // optional uint32 HydrangeaRedstoneID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->hydrangearedstoneid(), output);
  }
  
  // optional uint32 HydrangeaExpTableID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->hydrangeaexptableid(), output);
  }
  
  // optional uint32 PreliminaryTitleID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->preliminarytitleid(), output);
  }
  
  // optional uint32 PreliminaryBaseScore = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->preliminarybasescore(), output);
  }
  
  // repeated uint32 PreliminaryExtralScore = 13;
  for (int i = 0; i < this->preliminaryextralscore_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->preliminaryextralscore(i), output);
  }
  
  // optional uint32 PreliminaryTipsTime = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->preliminarytipstime(), output);
  }
  
  // optional uint32 PreliminaryAnswerTime = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->preliminaryanswertime(), output);
  }
  
  // optional uint32 PreliminaryQuestionTime = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->preliminaryquestiontime(), output);
  }
  
  // optional uint32 PreliminaryQuestionNum = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->preliminaryquestionnum(), output);
  }
  
  // optional uint32 PreliminaryExpTableID = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->preliminaryexptableid(), output);
  }
  
  // optional uint32 EffectiveOffLineExchangeRate = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->effectiveofflineexchangerate(), output);
  }
  
  // optional uint32 MaxOnLineEffectiveTime = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->maxonlineeffectivetime(), output);
  }
  
  // optional uint32 MaxEffectiveOffLineTime = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->maxeffectiveofflinetime(), output);
  }
  
  // optional uint32 MaxOffLineTime = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->maxofflinetime(), output);
  }
  
  // optional uint32 OffLineTimeLimit = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->offlinetimelimit(), output);
  }
  
  // optional uint32 VipOffLineExchangeRate = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->vipofflineexchangerate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 HydrangeaThrowTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->hydrangeathrowtime(), target);
  }
  
  // repeated uint32 HydrangeaSugarID = 3;
  for (int i = 0; i < this->hydrangeasugarid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->hydrangeasugarid(i), target);
  }
  
  // optional uint32 SugarSpreadTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sugarspreadtime(), target);
  }
  
  // optional uint32 SugarSpreadNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sugarspreadnum(), target);
  }
  
  // optional uint32 HydrangeaActivityTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->hydrangeaactivitytime(), target);
  }
  
  // optional uint32 HydrangeaHolderTime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->hydrangeaholdertime(), target);
  }
  
  // optional uint32 HydrangeaRabTime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->hydrangearabtime(), target);
  }
  
  // optional uint32 HydrangeaRedstoneID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->hydrangearedstoneid(), target);
  }
  
  // optional uint32 HydrangeaExpTableID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->hydrangeaexptableid(), target);
  }
  
  // optional uint32 PreliminaryTitleID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->preliminarytitleid(), target);
  }
  
  // optional uint32 PreliminaryBaseScore = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->preliminarybasescore(), target);
  }
  
  // repeated uint32 PreliminaryExtralScore = 13;
  for (int i = 0; i < this->preliminaryextralscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->preliminaryextralscore(i), target);
  }
  
  // optional uint32 PreliminaryTipsTime = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->preliminarytipstime(), target);
  }
  
  // optional uint32 PreliminaryAnswerTime = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->preliminaryanswertime(), target);
  }
  
  // optional uint32 PreliminaryQuestionTime = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->preliminaryquestiontime(), target);
  }
  
  // optional uint32 PreliminaryQuestionNum = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->preliminaryquestionnum(), target);
  }
  
  // optional uint32 PreliminaryExpTableID = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->preliminaryexptableid(), target);
  }
  
  // optional uint32 EffectiveOffLineExchangeRate = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->effectiveofflineexchangerate(), target);
  }
  
  // optional uint32 MaxOnLineEffectiveTime = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->maxonlineeffectivetime(), target);
  }
  
  // optional uint32 MaxEffectiveOffLineTime = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->maxeffectiveofflinetime(), target);
  }
  
  // optional uint32 MaxOffLineTime = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->maxofflinetime(), target);
  }
  
  // optional uint32 OffLineTimeLimit = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->offlinetimelimit(), target);
  }
  
  // optional uint32 VipOffLineExchangeRate = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->vipofflineexchangerate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivityConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 HydrangeaThrowTime = 2;
    if (has_hydrangeathrowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangeathrowtime());
    }
    
    // optional uint32 SugarSpreadTime = 4;
    if (has_sugarspreadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sugarspreadtime());
    }
    
    // optional uint32 SugarSpreadNum = 5;
    if (has_sugarspreadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sugarspreadnum());
    }
    
    // optional uint32 HydrangeaActivityTime = 6;
    if (has_hydrangeaactivitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangeaactivitytime());
    }
    
    // optional uint32 HydrangeaHolderTime = 7;
    if (has_hydrangeaholdertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangeaholdertime());
    }
    
    // optional uint32 HydrangeaRabTime = 8;
    if (has_hydrangearabtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangearabtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 HydrangeaRedstoneID = 9;
    if (has_hydrangearedstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangearedstoneid());
    }
    
    // optional uint32 HydrangeaExpTableID = 10;
    if (has_hydrangeaexptableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hydrangeaexptableid());
    }
    
    // optional uint32 PreliminaryTitleID = 11;
    if (has_preliminarytitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminarytitleid());
    }
    
    // optional uint32 PreliminaryBaseScore = 12;
    if (has_preliminarybasescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminarybasescore());
    }
    
    // optional uint32 PreliminaryTipsTime = 14;
    if (has_preliminarytipstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminarytipstime());
    }
    
    // optional uint32 PreliminaryAnswerTime = 15;
    if (has_preliminaryanswertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminaryanswertime());
    }
    
    // optional uint32 PreliminaryQuestionTime = 16;
    if (has_preliminaryquestiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminaryquestiontime());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 PreliminaryQuestionNum = 17;
    if (has_preliminaryquestionnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminaryquestionnum());
    }
    
    // optional uint32 PreliminaryExpTableID = 18;
    if (has_preliminaryexptableid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->preliminaryexptableid());
    }
    
    // optional uint32 EffectiveOffLineExchangeRate = 19;
    if (has_effectiveofflineexchangerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->effectiveofflineexchangerate());
    }
    
    // optional uint32 MaxOnLineEffectiveTime = 20;
    if (has_maxonlineeffectivetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxonlineeffectivetime());
    }
    
    // optional uint32 MaxEffectiveOffLineTime = 21;
    if (has_maxeffectiveofflinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxeffectiveofflinetime());
    }
    
    // optional uint32 MaxOffLineTime = 22;
    if (has_maxofflinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxofflinetime());
    }
    
    // optional uint32 OffLineTimeLimit = 23;
    if (has_offlinetimelimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offlinetimelimit());
    }
    
    // optional uint32 VipOffLineExchangeRate = 24;
    if (has_vipofflineexchangerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipofflineexchangerate());
    }
    
  }
  // repeated uint32 HydrangeaSugarID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hydrangeasugarid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hydrangeasugarid(i));
    }
    total_size += 1 * this->hydrangeasugarid_size() + data_size;
  }
  
  // repeated uint32 PreliminaryExtralScore = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->preliminaryextralscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->preliminaryextralscore(i));
    }
    total_size += 1 * this->preliminaryextralscore_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivityConfig::MergeFrom(const PBActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  hydrangeasugarid_.MergeFrom(from.hydrangeasugarid_);
  preliminaryextralscore_.MergeFrom(from.preliminaryextralscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_hydrangeathrowtime(from.hydrangeathrowtime());
    }
    if (from._has_bit(3)) {
      set_sugarspreadtime(from.sugarspreadtime());
    }
    if (from._has_bit(4)) {
      set_sugarspreadnum(from.sugarspreadnum());
    }
    if (from._has_bit(5)) {
      set_hydrangeaactivitytime(from.hydrangeaactivitytime());
    }
    if (from._has_bit(6)) {
      set_hydrangeaholdertime(from.hydrangeaholdertime());
    }
    if (from._has_bit(7)) {
      set_hydrangearabtime(from.hydrangearabtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_hydrangearedstoneid(from.hydrangearedstoneid());
    }
    if (from._has_bit(9)) {
      set_hydrangeaexptableid(from.hydrangeaexptableid());
    }
    if (from._has_bit(10)) {
      set_preliminarytitleid(from.preliminarytitleid());
    }
    if (from._has_bit(11)) {
      set_preliminarybasescore(from.preliminarybasescore());
    }
    if (from._has_bit(13)) {
      set_preliminarytipstime(from.preliminarytipstime());
    }
    if (from._has_bit(14)) {
      set_preliminaryanswertime(from.preliminaryanswertime());
    }
    if (from._has_bit(15)) {
      set_preliminaryquestiontime(from.preliminaryquestiontime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_preliminaryquestionnum(from.preliminaryquestionnum());
    }
    if (from._has_bit(17)) {
      set_preliminaryexptableid(from.preliminaryexptableid());
    }
    if (from._has_bit(18)) {
      set_effectiveofflineexchangerate(from.effectiveofflineexchangerate());
    }
    if (from._has_bit(19)) {
      set_maxonlineeffectivetime(from.maxonlineeffectivetime());
    }
    if (from._has_bit(20)) {
      set_maxeffectiveofflinetime(from.maxeffectiveofflinetime());
    }
    if (from._has_bit(21)) {
      set_maxofflinetime(from.maxofflinetime());
    }
    if (from._has_bit(22)) {
      set_offlinetimelimit(from.offlinetimelimit());
    }
    if (from._has_bit(23)) {
      set_vipofflineexchangerate(from.vipofflineexchangerate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityConfig::CopyFrom(const PBActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityConfig::Swap(PBActivityConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(hydrangeathrowtime_, other->hydrangeathrowtime_);
    hydrangeasugarid_.Swap(&other->hydrangeasugarid_);
    std::swap(sugarspreadtime_, other->sugarspreadtime_);
    std::swap(sugarspreadnum_, other->sugarspreadnum_);
    std::swap(hydrangeaactivitytime_, other->hydrangeaactivitytime_);
    std::swap(hydrangeaholdertime_, other->hydrangeaholdertime_);
    std::swap(hydrangearabtime_, other->hydrangearabtime_);
    std::swap(hydrangearedstoneid_, other->hydrangearedstoneid_);
    std::swap(hydrangeaexptableid_, other->hydrangeaexptableid_);
    std::swap(preliminarytitleid_, other->preliminarytitleid_);
    std::swap(preliminarybasescore_, other->preliminarybasescore_);
    preliminaryextralscore_.Swap(&other->preliminaryextralscore_);
    std::swap(preliminarytipstime_, other->preliminarytipstime_);
    std::swap(preliminaryanswertime_, other->preliminaryanswertime_);
    std::swap(preliminaryquestiontime_, other->preliminaryquestiontime_);
    std::swap(preliminaryquestionnum_, other->preliminaryquestionnum_);
    std::swap(preliminaryexptableid_, other->preliminaryexptableid_);
    std::swap(effectiveofflineexchangerate_, other->effectiveofflineexchangerate_);
    std::swap(maxonlineeffectivetime_, other->maxonlineeffectivetime_);
    std::swap(maxeffectiveofflinetime_, other->maxeffectiveofflinetime_);
    std::swap(maxofflinetime_, other->maxofflinetime_);
    std::swap(offlinetimelimit_, other->offlinetimelimit_);
    std::swap(vipofflineexchangerate_, other->vipofflineexchangerate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBActivityConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBActivityConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBActivityConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBActivityConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemRefresh::kItemBaseFieldNumber;
const int PBItemRefresh::kColorFieldNumber;
const int PBItemRefresh::kLevelFieldNumber;
const int PBItemRefresh::kLimitPosFieldNumber;
#endif  // !_MSC_VER

PBItemRefresh::PBItemRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemRefresh::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemRefresh::PBItemRefresh(const PBItemRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemRefresh::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  color_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemRefresh::~PBItemRefresh() {
  SharedDtor();
}

void PBItemRefresh::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemRefresh_descriptor_;
}

const PBItemRefresh& PBItemRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemRefresh* PBItemRefresh::default_instance_ = NULL;

PBItemRefresh* PBItemRefresh::New() const {
  return new PBItemRefresh;
}

void PBItemRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    color_ = 0u;
    level_ = 0u;
  }
  limitpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LimitPos;
        break;
      }
      
      // repeated uint32 LimitPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LimitPos:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_limitpos(value);
        if (input->ExpectTag(32)) goto parse_LimitPos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemRefresh::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->color(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // repeated uint32 LimitPos = 4;
  for (int i = 0; i < this->limitpos_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->limitpos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 Color = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->color(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // repeated uint32 LimitPos = 4;
  for (int i = 0; i < this->limitpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->limitpos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemRefresh::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 Color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  // repeated uint32 LimitPos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->limitpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->limitpos(i));
    }
    total_size += 1 * this->limitpos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemRefresh::MergeFrom(const PBItemRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  limitpos_.MergeFrom(from.limitpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_color(from.color());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRefresh::CopyFrom(const PBItemRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemRefresh::Swap(PBItemRefresh* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(color_, other->color_);
    std::swap(level_, other->level_);
    limitpos_.Swap(&other->limitpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemRefresh::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemRefresh::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemRefresh::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemRefresh_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemSummon::kItemBaseFieldNumber;
const int PBItemSummon::kSummonTypeFieldNumber;
#endif  // !_MSC_VER

PBItemSummon::PBItemSummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSummon::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemSummon::PBItemSummon(const PBItemSummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSummon::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  summontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSummon::~PBItemSummon() {
  SharedDtor();
}

void PBItemSummon::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemSummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSummon_descriptor_;
}

const PBItemSummon& PBItemSummon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemSummon* PBItemSummon::default_instance_ = NULL;

PBItemSummon* PBItemSummon::New() const {
  return new PBItemSummon;
}

void PBItemSummon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    summontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_SummonType;
        break;
      }
      
      // optional uint32 SummonType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &summontype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemSummon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 SummonType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->summontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 SummonType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->summontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSummon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 SummonType = 2;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->summontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemSummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSummon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSummon::MergeFrom(const PBItemSummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_summontype(from.summontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSummon::CopyFrom(const PBItemSummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSummon::Swap(PBItemSummon* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(summontype_, other->summontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemSummon::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemSummon::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemSummon::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemSummon_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDirectTable::kTempIDFieldNumber;
const int PBDirectTable::kDirectIDFieldNumber;
const int PBDirectTable::kLuckIDFieldNumber;
const int PBDirectTable::kLuckRateFieldNumber;
#endif  // !_MSC_VER

PBDirectTable::PBDirectTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDirectTable::InitAsDefaultInstance() {}

PBDirectTable::PBDirectTable(const PBDirectTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDirectTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDirectTable::~PBDirectTable() {
  SharedDtor();
}

void PBDirectTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDirectTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDirectTable_descriptor_;
}

const PBDirectTable& PBDirectTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDirectTable* PBDirectTable::default_instance_ = NULL;

PBDirectTable* PBDirectTable::New() const {
  return new PBDirectTable;
}

void PBDirectTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  directid_.Clear();
  luckid_.Clear();
  luckrate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDirectTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DirectID;
        break;
      }
      
      // repeated uint32 DirectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DirectID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_directid(value);
        if (input->ExpectTag(16)) goto parse_DirectID;
        if (input->ExpectTag(24)) goto parse_LuckID;
        break;
      }
      
      // repeated uint32 LuckID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LuckID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_luckid(value);
        if (input->ExpectTag(24)) goto parse_LuckID;
        if (input->ExpectTag(32)) goto parse_LuckRate;
        break;
      }
      
      // repeated uint32 LuckRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LuckRate:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_luckrate(value);
        if (input->ExpectTag(32)) goto parse_LuckRate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDirectTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDirectTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 DirectID = 2;
  for (int i = 0; i < this->directid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->directid(i), output);
  }
  
  // repeated uint32 LuckID = 3;
  for (int i = 0; i < this->luckid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->luckid(i), output);
  }
  
  // repeated uint32 LuckRate = 4;
  for (int i = 0; i < this->luckrate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->luckrate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDirectTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 DirectID = 2;
  for (int i = 0; i < this->directid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->directid(i), target);
  }
  
  // repeated uint32 LuckID = 3;
  for (int i = 0; i < this->luckid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->luckid(i), target);
  }
  
  // repeated uint32 LuckRate = 4;
  for (int i = 0; i < this->luckrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->luckrate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDirectTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 DirectID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->directid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->directid(i));
    }
    total_size += 1 * this->directid_size() + data_size;
  }
  
  // repeated uint32 LuckID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->luckid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->luckid(i));
    }
    total_size += 1 * this->luckid_size() + data_size;
  }
  
  // repeated uint32 LuckRate = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->luckrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->luckrate(i));
    }
    total_size += 1 * this->luckrate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDirectTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDirectTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDirectTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDirectTable::MergeFrom(const PBDirectTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  directid_.MergeFrom(from.directid_);
  luckid_.MergeFrom(from.luckid_);
  luckrate_.MergeFrom(from.luckrate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDirectTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDirectTable::CopyFrom(const PBDirectTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDirectTable::Swap(PBDirectTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    directid_.Swap(&other->directid_);
    luckid_.Swap(&other->luckid_);
    luckrate_.Swap(&other->luckrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDirectTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDirectTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDirectTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDirectTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemDirect::kItemBaseFieldNumber;
const int PBItemDirect::kLevelFieldNumber;
const int PBItemDirect::kStarFieldNumber;
#endif  // !_MSC_VER

PBItemDirect::PBItemDirect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemDirect::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemDirect::PBItemDirect(const PBItemDirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemDirect::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  level_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemDirect::~PBItemDirect() {
  SharedDtor();
}

void PBItemDirect::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemDirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemDirect_descriptor_;
}

const PBItemDirect& PBItemDirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemDirect* PBItemDirect::default_instance_ = NULL;

PBItemDirect* PBItemDirect::New() const {
  return new PBItemDirect;
}

void PBItemDirect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    level_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Star;
        break;
      }
      
      // optional uint32 Star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Star:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &star_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemDirect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 Star = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemDirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 Star = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemDirect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemDirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemDirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemDirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemDirect::MergeFrom(const PBItemDirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemDirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemDirect::CopyFrom(const PBItemDirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemDirect::Swap(PBItemDirect* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemDirect::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemDirect::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemDirect::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemDirect_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemGetStar::kItemBaseFieldNumber;
const int PBItemGetStar::kLevelFieldNumber;
#endif  // !_MSC_VER

PBItemGetStar::PBItemGetStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemGetStar::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemGetStar::PBItemGetStar(const PBItemGetStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemGetStar::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemGetStar::~PBItemGetStar() {
  SharedDtor();
}

void PBItemGetStar::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemGetStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemGetStar_descriptor_;
}

const PBItemGetStar& PBItemGetStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemGetStar* PBItemGetStar::default_instance_ = NULL;

PBItemGetStar* PBItemGetStar::New() const {
  return new PBItemGetStar;
}

void PBItemGetStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemGetStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemGetStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemGetStar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemGetStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemGetStar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemGetStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemGetStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemGetStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemGetStar::MergeFrom(const PBItemGetStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemGetStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemGetStar::CopyFrom(const PBItemGetStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemGetStar::Swap(PBItemGetStar* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemGetStar::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemGetStar::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemGetStar::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemGetStar_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWarDate::kDayFieldNumber;
const int PBWarDate::kHourFieldNumber;
const int PBWarDate::kMinuteFieldNumber;
#endif  // !_MSC_VER

PBWarDate::PBWarDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWarDate::InitAsDefaultInstance() {}

PBWarDate::PBWarDate(const PBWarDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWarDate::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWarDate::~PBWarDate() {
  SharedDtor();
}

void PBWarDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBWarDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWarDate_descriptor_;
}

const PBWarDate& PBWarDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBWarDate* PBWarDate::default_instance_ = NULL;

PBWarDate* PBWarDate::New() const {
  return new PBWarDate;
}

void PBWarDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    hour_ = 0u;
    minute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWarDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &day_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Hour;
        break;
      }
      
      // optional uint32 Hour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Hour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hour_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Minute;
        break;
      }
      
      // optional uint32 Minute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Minute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minute_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWarDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWarDate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Day = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->day(), output);
  }
  
  // optional uint32 Hour = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->hour(), output);
  }
  
  // optional uint32 Minute = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->minute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWarDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Day = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->day(), target);
  }
  
  // optional uint32 Hour = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->hour(), target);
  }
  
  // optional uint32 Minute = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->minute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWarDate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->day());
    }
    
    // optional uint32 Hour = 2;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hour());
    }
    
    // optional uint32 Minute = 3;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWarDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWarDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWarDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWarDate::MergeFrom(const PBWarDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_day(from.day());
    }
    if (from._has_bit(1)) {
      set_hour(from.hour());
    }
    if (from._has_bit(2)) {
      set_minute(from.minute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWarDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWarDate::CopyFrom(const PBWarDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWarDate::Swap(PBWarDate* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWarDate::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWarDate::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWarDate::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWarDate_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTax::kTaxRateFieldNumber;
const int PBTax::kIncomeRateFieldNumber;
const int PBTax::kLimitFieldNumber;
#endif  // !_MSC_VER

PBTax::PBTax()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTax::InitAsDefaultInstance() {}

PBTax::PBTax(const PBTax& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTax::SharedCtor() {
  _cached_size_ = 0;
  taxrate_ = 0u;
  incomerate_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTax::~PBTax() {
  SharedDtor();
}

void PBTax::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTax_descriptor_;
}

const PBTax& PBTax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTax* PBTax::default_instance_ = NULL;

PBTax* PBTax::New() const {
  return new PBTax;
}

void PBTax::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taxrate_ = 0u;
    incomerate_ = 0u;
    limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaxRate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taxrate_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_IncomeRate;
        break;
      }
      
      // optional uint32 IncomeRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncomeRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incomerate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }
      
      // optional uint32 Limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Limit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &limit_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTax::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaxRate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taxrate(), output);
  }
  
  // optional uint32 IncomeRate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->incomerate(), output);
  }
  
  // optional uint32 Limit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTax::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaxRate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taxrate(), target);
  }
  
  // optional uint32 IncomeRate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->incomerate(), target);
  }
  
  // optional uint32 Limit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTax::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaxRate = 1;
    if (has_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taxrate());
    }
    
    // optional uint32 IncomeRate = 2;
    if (has_incomerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incomerate());
    }
    
    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTax::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTax* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTax*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTax::MergeFrom(const PBTax& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taxrate(from.taxrate());
    }
    if (from._has_bit(1)) {
      set_incomerate(from.incomerate());
    }
    if (from._has_bit(2)) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTax::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTax::CopyFrom(const PBTax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTax::Swap(PBTax* other) {
  if (other != this) {
    std::swap(taxrate_, other->taxrate_);
    std::swap(incomerate_, other->incomerate_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTax::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTax::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTax::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTax_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWorldBattleConfig::kTempIDFieldNumber;
const int PBWorldBattleConfig::kSubmitBeginFieldNumber;
const int PBWorldBattleConfig::kBattleBeginFieldNumber;
const int PBWorldBattleConfig::kBattleEndFieldNumber;
const int PBWorldBattleConfig::kStoneIDFieldNumber;
const int PBWorldBattleConfig::kInitBuffIDFieldNumber;
const int PBWorldBattleConfig::kFlagSourceFieldNumber;
const int PBWorldBattleConfig::kKillSourceFieldNumber;
const int PBWorldBattleConfig::kFlagBonusFieldNumber;
const int PBWorldBattleConfig::kPerNumFieldNumber;
const int PBWorldBattleConfig::kMapIDFieldNumber;
const int PBWorldBattleConfig::kSubmitMoneyFieldNumber;
const int PBWorldBattleConfig::kSubmitLevelFieldNumber;
const int PBWorldBattleConfig::kPosXFieldNumber;
const int PBWorldBattleConfig::kPosYFieldNumber;
const int PBWorldBattleConfig::kOutMapIDFieldNumber;
const int PBWorldBattleConfig::kOutPosXFieldNumber;
const int PBWorldBattleConfig::kOutPosYFieldNumber;
const int PBWorldBattleConfig::kFlagIndexFieldNumber;
const int PBWorldBattleConfig::kBidEndFieldNumber;
const int PBWorldBattleConfig::kMaxWarHonorFieldNumber;
const int PBWorldBattleConfig::kTitleFieldNumber;
const int PBWorldBattleConfig::kNoticeBeginFieldNumber;
const int PBWorldBattleConfig::kTitleValidTimeFieldNumber;
const int PBWorldBattleConfig::kStonePosXFieldNumber;
const int PBWorldBattleConfig::kStonePosYFieldNumber;
const int PBWorldBattleConfig::kTaxFieldNumber;
const int PBWorldBattleConfig::kWinTaxFieldNumber;
#endif  // !_MSC_VER

PBWorldBattleConfig::PBWorldBattleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBattleConfig::InitAsDefaultInstance() {  submitbegin_ = const_cast< ::PBWarDate*>(&::PBWarDate::default_instance());
  battlebegin_ = const_cast< ::PBWarDate*>(&::PBWarDate::default_instance());
  battleend_ = const_cast< ::PBWarDate*>(&::PBWarDate::default_instance());
  bidend_ = const_cast< ::PBWarDate*>(&::PBWarDate::default_instance());
  noticebegin_ = const_cast< ::PBWarDate*>(&::PBWarDate::default_instance());
}

PBWorldBattleConfig::PBWorldBattleConfig(const PBWorldBattleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBattleConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  submitbegin_ = NULL;
  battlebegin_ = NULL;
  battleend_ = NULL;
  initbuffid_ = 0u;
  flagsource_ = 0u;
  killsource_ = 0u;
  flagbonus_ = 0u;
  submitlevel_ = 0u;
  outmapid_ = 0u;
  outposx_ = 0u;
  outposy_ = 0u;
  bidend_ = NULL;
  maxwarhonor_ = 0u;
  noticebegin_ = NULL;
  titlevalidtime_ = 0u;
  stoneposx_ = 0u;
  stoneposy_ = 0u;
  wintax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBattleConfig::~PBWorldBattleConfig() {
  SharedDtor();
}

void PBWorldBattleConfig::SharedDtor() {
  if (this != default_instance_) {
    delete submitbegin_;
    delete battlebegin_;
    delete battleend_;
    delete bidend_;
    delete noticebegin_;
  }
}

const ::google::protobuf::Descriptor* PBWorldBattleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBattleConfig_descriptor_;
}

const PBWorldBattleConfig& PBWorldBattleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBWorldBattleConfig* PBWorldBattleConfig::default_instance_ = NULL;

PBWorldBattleConfig* PBWorldBattleConfig::New() const {
  return new PBWorldBattleConfig;
}

void PBWorldBattleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    if (_has_bit(1)) {
      if (submitbegin_ != NULL) submitbegin_->::PBWarDate::Clear();
    }
    if (_has_bit(2)) {
      if (battlebegin_ != NULL) battlebegin_->::PBWarDate::Clear();
    }
    if (_has_bit(3)) {
      if (battleend_ != NULL) battleend_->::PBWarDate::Clear();
    }
    initbuffid_ = 0u;
    flagsource_ = 0u;
    killsource_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flagbonus_ = 0u;
    submitlevel_ = 0u;
    outmapid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    outposx_ = 0u;
    outposy_ = 0u;
    if (_has_bit(19)) {
      if (bidend_ != NULL) bidend_->::PBWarDate::Clear();
    }
    maxwarhonor_ = 0u;
    if (_has_bit(22)) {
      if (noticebegin_ != NULL) noticebegin_->::PBWarDate::Clear();
    }
    titlevalidtime_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    stoneposx_ = 0u;
    stoneposy_ = 0u;
    wintax_ = 0u;
  }
  stoneid_.Clear();
  pernum_.Clear();
  mapid_.Clear();
  submitmoney_.Clear();
  posx_.Clear();
  posy_.Clear();
  flagindex_.Clear();
  title_.Clear();
  tax_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBattleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SubmitBegin;
        break;
      }
      
      // optional .PBWarDate SubmitBegin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SubmitBegin:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_submitbegin()));
        if (input->ExpectTag(26)) goto parse_BattleBegin;
        break;
      }
      
      // optional .PBWarDate BattleBegin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleBegin:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_battlebegin()));
        if (input->ExpectTag(34)) goto parse_BattleEnd;
        break;
      }
      
      // optional .PBWarDate BattleEnd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleEnd:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_battleend()));
        if (input->ExpectTag(40)) goto parse_StoneID;
        break;
      }
      
      // repeated uint32 StoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StoneID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_stoneid(value);
        if (input->ExpectTag(40)) goto parse_StoneID;
        if (input->ExpectTag(48)) goto parse_InitBuffID;
        break;
      }
      
      // optional uint32 InitBuffID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InitBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initbuffid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_FlagSource;
        break;
      }
      
      // optional uint32 FlagSource = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagSource:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagsource_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_KillSource;
        break;
      }
      
      // optional uint32 KillSource = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillSource:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killsource_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_FlagBonus;
        break;
      }
      
      // optional uint32 FlagBonus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagBonus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagbonus_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PerNum;
        break;
      }
      
      // repeated uint32 PerNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PerNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pernum(value);
        if (input->ExpectTag(80)) goto parse_PerNum;
        if (input->ExpectTag(88)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(88)) goto parse_MapID;
        if (input->ExpectTag(96)) goto parse_SubmitMoney;
        break;
      }
      
      // repeated uint32 SubmitMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubmitMoney:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_submitmoney(value);
        if (input->ExpectTag(96)) goto parse_SubmitMoney;
        if (input->ExpectTag(104)) goto parse_SubmitLevel;
        break;
      }
      
      // optional uint32 SubmitLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubmitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &submitlevel_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_PosX;
        break;
      }
      
      // repeated uint32 PosX = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_posx(value);
        if (input->ExpectTag(112)) goto parse_PosX;
        if (input->ExpectTag(120)) goto parse_PosY;
        break;
      }
      
      // repeated uint32 PosY = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_posy(value);
        if (input->ExpectTag(120)) goto parse_PosY;
        if (input->ExpectTag(128)) goto parse_OutMapID;
        break;
      }
      
      // optional uint32 OutMapID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outmapid_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_OutPosX;
        break;
      }
      
      // optional uint32 OutPosX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutPosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outposx_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_OutPosY;
        break;
      }
      
      // optional uint32 OutPosY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutPosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outposy_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_FlagIndex;
        break;
      }
      
      // repeated uint32 FlagIndex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_flagindex(value);
        if (input->ExpectTag(152)) goto parse_FlagIndex;
        if (input->ExpectTag(162)) goto parse_BidEnd;
        break;
      }
      
      // optional .PBWarDate BidEnd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BidEnd:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_bidend()));
        if (input->ExpectTag(168)) goto parse_MaxWarHonor;
        break;
      }
      
      // optional uint32 MaxWarHonor = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxWarHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxwarhonor_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_Title;
        break;
      }
      
      // repeated uint32 Title = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Title:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_title(value);
        if (input->ExpectTag(176)) goto parse_Title;
        if (input->ExpectTag(186)) goto parse_NoticeBegin;
        break;
      }
      
      // optional .PBWarDate NoticeBegin = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_NoticeBegin:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_noticebegin()));
        if (input->ExpectTag(192)) goto parse_TitleValidTime;
        break;
      }
      
      // optional uint32 TitleValidTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TitleValidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &titlevalidtime_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_StonePosX;
        break;
      }
      
      // optional uint32 StonePosX = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StonePosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoneposx_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_StonePosY;
        break;
      }
      
      // optional uint32 StonePosY = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StonePosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stoneposy_));
        _set_bit(25);
        if (input->ExpectTag(218)) goto parse_Tax;
        break;
      }
      
      // repeated .PBTax Tax = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tax:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tax()));
        if (input->ExpectTag(218)) goto parse_Tax;
        if (input->ExpectTag(224)) goto parse_WinTax;
        break;
      }
      
      // optional uint32 WinTax = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WinTax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wintax_));
        _set_bit(27);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBattleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWorldBattleConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional .PBWarDate SubmitBegin = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->submitbegin(), output);
  }
  
  // optional .PBWarDate BattleBegin = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->battlebegin(), output);
  }
  
  // optional .PBWarDate BattleEnd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->battleend(), output);
  }
  
  // repeated uint32 StoneID = 5;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->stoneid(i), output);
  }
  
  // optional uint32 InitBuffID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->initbuffid(), output);
  }
  
  // optional uint32 FlagSource = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->flagsource(), output);
  }
  
  // optional uint32 KillSource = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->killsource(), output);
  }
  
  // optional uint32 FlagBonus = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->flagbonus(), output);
  }
  
  // repeated uint32 PerNum = 10;
  for (int i = 0; i < this->pernum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->pernum(i), output);
  }
  
  // repeated uint32 MapID = 11;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->mapid(i), output);
  }
  
  // repeated uint32 SubmitMoney = 12;
  for (int i = 0; i < this->submitmoney_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->submitmoney(i), output);
  }
  
  // optional uint32 SubmitLevel = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->submitlevel(), output);
  }
  
  // repeated uint32 PosX = 14;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->posx(i), output);
  }
  
  // repeated uint32 PosY = 15;
  for (int i = 0; i < this->posy_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->posy(i), output);
  }
  
  // optional uint32 OutMapID = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->outmapid(), output);
  }
  
  // optional uint32 OutPosX = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->outposx(), output);
  }
  
  // optional uint32 OutPosY = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->outposy(), output);
  }
  
  // repeated uint32 FlagIndex = 19;
  for (int i = 0; i < this->flagindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->flagindex(i), output);
  }
  
  // optional .PBWarDate BidEnd = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->bidend(), output);
  }
  
  // optional uint32 MaxWarHonor = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->maxwarhonor(), output);
  }
  
  // repeated uint32 Title = 22;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->title(i), output);
  }
  
  // optional .PBWarDate NoticeBegin = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->noticebegin(), output);
  }
  
  // optional uint32 TitleValidTime = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->titlevalidtime(), output);
  }
  
  // optional uint32 StonePosX = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->stoneposx(), output);
  }
  
  // optional uint32 StonePosY = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->stoneposy(), output);
  }
  
  // repeated .PBTax Tax = 27;
  for (int i = 0; i < this->tax_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->tax(i), output);
  }
  
  // optional uint32 WinTax = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->wintax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBattleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional .PBWarDate SubmitBegin = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->submitbegin(), target);
  }
  
  // optional .PBWarDate BattleBegin = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->battlebegin(), target);
  }
  
  // optional .PBWarDate BattleEnd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->battleend(), target);
  }
  
  // repeated uint32 StoneID = 5;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->stoneid(i), target);
  }
  
  // optional uint32 InitBuffID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->initbuffid(), target);
  }
  
  // optional uint32 FlagSource = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->flagsource(), target);
  }
  
  // optional uint32 KillSource = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->killsource(), target);
  }
  
  // optional uint32 FlagBonus = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->flagbonus(), target);
  }
  
  // repeated uint32 PerNum = 10;
  for (int i = 0; i < this->pernum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->pernum(i), target);
  }
  
  // repeated uint32 MapID = 11;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->mapid(i), target);
  }
  
  // repeated uint32 SubmitMoney = 12;
  for (int i = 0; i < this->submitmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->submitmoney(i), target);
  }
  
  // optional uint32 SubmitLevel = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->submitlevel(), target);
  }
  
  // repeated uint32 PosX = 14;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->posx(i), target);
  }
  
  // repeated uint32 PosY = 15;
  for (int i = 0; i < this->posy_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->posy(i), target);
  }
  
  // optional uint32 OutMapID = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->outmapid(), target);
  }
  
  // optional uint32 OutPosX = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->outposx(), target);
  }
  
  // optional uint32 OutPosY = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->outposy(), target);
  }
  
  // repeated uint32 FlagIndex = 19;
  for (int i = 0; i < this->flagindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->flagindex(i), target);
  }
  
  // optional .PBWarDate BidEnd = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->bidend(), target);
  }
  
  // optional uint32 MaxWarHonor = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->maxwarhonor(), target);
  }
  
  // repeated uint32 Title = 22;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->title(i), target);
  }
  
  // optional .PBWarDate NoticeBegin = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->noticebegin(), target);
  }
  
  // optional uint32 TitleValidTime = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->titlevalidtime(), target);
  }
  
  // optional uint32 StonePosX = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->stoneposx(), target);
  }
  
  // optional uint32 StonePosY = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->stoneposy(), target);
  }
  
  // repeated .PBTax Tax = 27;
  for (int i = 0; i < this->tax_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->tax(i), target);
  }
  
  // optional uint32 WinTax = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->wintax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBattleConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional .PBWarDate SubmitBegin = 2;
    if (has_submitbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->submitbegin());
    }
    
    // optional .PBWarDate BattleBegin = 3;
    if (has_battlebegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->battlebegin());
    }
    
    // optional .PBWarDate BattleEnd = 4;
    if (has_battleend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->battleend());
    }
    
    // optional uint32 InitBuffID = 6;
    if (has_initbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initbuffid());
    }
    
    // optional uint32 FlagSource = 7;
    if (has_flagsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagsource());
    }
    
    // optional uint32 KillSource = 8;
    if (has_killsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killsource());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 FlagBonus = 9;
    if (has_flagbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagbonus());
    }
    
    // optional uint32 SubmitLevel = 13;
    if (has_submitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->submitlevel());
    }
    
    // optional uint32 OutMapID = 16;
    if (has_outmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outmapid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 OutPosX = 17;
    if (has_outposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outposx());
    }
    
    // optional uint32 OutPosY = 18;
    if (has_outposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outposy());
    }
    
    // optional .PBWarDate BidEnd = 20;
    if (has_bidend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->bidend());
    }
    
    // optional uint32 MaxWarHonor = 21;
    if (has_maxwarhonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxwarhonor());
    }
    
    // optional .PBWarDate NoticeBegin = 23;
    if (has_noticebegin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->noticebegin());
    }
    
    // optional uint32 TitleValidTime = 24;
    if (has_titlevalidtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->titlevalidtime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 StonePosX = 25;
    if (has_stoneposx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoneposx());
    }
    
    // optional uint32 StonePosY = 26;
    if (has_stoneposy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stoneposy());
    }
    
    // optional uint32 WinTax = 28;
    if (has_wintax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wintax());
    }
    
  }
  // repeated uint32 StoneID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }
  
  // repeated uint32 PerNum = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->pernum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pernum(i));
    }
    total_size += 1 * this->pernum_size() + data_size;
  }
  
  // repeated uint32 MapID = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  // repeated uint32 SubmitMoney = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->submitmoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->submitmoney(i));
    }
    total_size += 1 * this->submitmoney_size() + data_size;
  }
  
  // repeated uint32 PosX = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }
  
  // repeated uint32 PosY = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->posy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->posy(i));
    }
    total_size += 1 * this->posy_size() + data_size;
  }
  
  // repeated uint32 FlagIndex = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->flagindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->flagindex(i));
    }
    total_size += 2 * this->flagindex_size() + data_size;
  }
  
  // repeated uint32 Title = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->title(i));
    }
    total_size += 2 * this->title_size() + data_size;
  }
  
  // repeated .PBTax Tax = 27;
  total_size += 2 * this->tax_size();
  for (int i = 0; i < this->tax_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tax(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWorldBattleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBattleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBattleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBattleConfig::MergeFrom(const PBWorldBattleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  stoneid_.MergeFrom(from.stoneid_);
  pernum_.MergeFrom(from.pernum_);
  mapid_.MergeFrom(from.mapid_);
  submitmoney_.MergeFrom(from.submitmoney_);
  posx_.MergeFrom(from.posx_);
  posy_.MergeFrom(from.posy_);
  flagindex_.MergeFrom(from.flagindex_);
  title_.MergeFrom(from.title_);
  tax_.MergeFrom(from.tax_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      mutable_submitbegin()->::PBWarDate::MergeFrom(from.submitbegin());
    }
    if (from._has_bit(2)) {
      mutable_battlebegin()->::PBWarDate::MergeFrom(from.battlebegin());
    }
    if (from._has_bit(3)) {
      mutable_battleend()->::PBWarDate::MergeFrom(from.battleend());
    }
    if (from._has_bit(5)) {
      set_initbuffid(from.initbuffid());
    }
    if (from._has_bit(6)) {
      set_flagsource(from.flagsource());
    }
    if (from._has_bit(7)) {
      set_killsource(from.killsource());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_flagbonus(from.flagbonus());
    }
    if (from._has_bit(12)) {
      set_submitlevel(from.submitlevel());
    }
    if (from._has_bit(15)) {
      set_outmapid(from.outmapid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_outposx(from.outposx());
    }
    if (from._has_bit(17)) {
      set_outposy(from.outposy());
    }
    if (from._has_bit(19)) {
      mutable_bidend()->::PBWarDate::MergeFrom(from.bidend());
    }
    if (from._has_bit(20)) {
      set_maxwarhonor(from.maxwarhonor());
    }
    if (from._has_bit(22)) {
      mutable_noticebegin()->::PBWarDate::MergeFrom(from.noticebegin());
    }
    if (from._has_bit(23)) {
      set_titlevalidtime(from.titlevalidtime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_stoneposx(from.stoneposx());
    }
    if (from._has_bit(25)) {
      set_stoneposy(from.stoneposy());
    }
    if (from._has_bit(27)) {
      set_wintax(from.wintax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBattleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBattleConfig::CopyFrom(const PBWorldBattleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBattleConfig::Swap(PBWorldBattleConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(submitbegin_, other->submitbegin_);
    std::swap(battlebegin_, other->battlebegin_);
    std::swap(battleend_, other->battleend_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(initbuffid_, other->initbuffid_);
    std::swap(flagsource_, other->flagsource_);
    std::swap(killsource_, other->killsource_);
    std::swap(flagbonus_, other->flagbonus_);
    pernum_.Swap(&other->pernum_);
    mapid_.Swap(&other->mapid_);
    submitmoney_.Swap(&other->submitmoney_);
    std::swap(submitlevel_, other->submitlevel_);
    posx_.Swap(&other->posx_);
    posy_.Swap(&other->posy_);
    std::swap(outmapid_, other->outmapid_);
    std::swap(outposx_, other->outposx_);
    std::swap(outposy_, other->outposy_);
    flagindex_.Swap(&other->flagindex_);
    std::swap(bidend_, other->bidend_);
    std::swap(maxwarhonor_, other->maxwarhonor_);
    title_.Swap(&other->title_);
    std::swap(noticebegin_, other->noticebegin_);
    std::swap(titlevalidtime_, other->titlevalidtime_);
    std::swap(stoneposx_, other->stoneposx_);
    std::swap(stoneposy_, other->stoneposy_);
    tax_.Swap(&other->tax_);
    std::swap(wintax_, other->wintax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWorldBattleConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWorldBattleConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWorldBattleConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBattleConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDegreeInfo::kValueFieldNumber;
const int PBDegreeInfo::kProbalityFieldNumber;
const int PBDegreeInfo::kDegreeValueFieldNumber;
#endif  // !_MSC_VER

PBDegreeInfo::PBDegreeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDegreeInfo::InitAsDefaultInstance() {}

PBDegreeInfo::PBDegreeInfo(const PBDegreeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDegreeInfo::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  probality_ = 0u;
  degreevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDegreeInfo::~PBDegreeInfo() {
  SharedDtor();
}

void PBDegreeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDegreeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDegreeInfo_descriptor_;
}

const PBDegreeInfo& PBDegreeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBDegreeInfo* PBDegreeInfo::default_instance_ = NULL;

PBDegreeInfo* PBDegreeInfo::New() const {
  return new PBDegreeInfo;
}

void PBDegreeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
    probality_ = 0u;
    degreevalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDegreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Probality;
        break;
      }
      
      // optional uint32 Probality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probality_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DegreeValue;
        break;
      }
      
      // optional uint32 DegreeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DegreeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &degreevalue_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDegreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDegreeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->value(), output);
  }
  
  // optional uint32 Probality = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->probality(), output);
  }
  
  // optional uint32 DegreeValue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->degreevalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDegreeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->value(), target);
  }
  
  // optional uint32 Probality = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->probality(), target);
  }
  
  // optional uint32 DegreeValue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->degreevalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDegreeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 Probality = 2;
    if (has_probality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probality());
    }
    
    // optional uint32 DegreeValue = 3;
    if (has_degreevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->degreevalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDegreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDegreeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDegreeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDegreeInfo::MergeFrom(const PBDegreeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
    if (from._has_bit(1)) {
      set_probality(from.probality());
    }
    if (from._has_bit(2)) {
      set_degreevalue(from.degreevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDegreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDegreeInfo::CopyFrom(const PBDegreeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDegreeInfo::Swap(PBDegreeInfo* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(probality_, other->probality_);
    std::swap(degreevalue_, other->degreevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDegreeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDegreeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDegreeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDegreeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemInfo::kItemIDFieldNumber;
const int PBItemInfo::kItemNumFieldNumber;
const int PBItemInfo::kProbalityFieldNumber;
#endif  // !_MSC_VER

PBItemInfo::PBItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemInfo::InitAsDefaultInstance() {}

PBItemInfo::PBItemInfo(const PBItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  probality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemInfo::~PBItemInfo() {
  SharedDtor();
}

void PBItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemInfo_descriptor_;
}

const PBItemInfo& PBItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemInfo* PBItemInfo::default_instance_ = NULL;

PBItemInfo* PBItemInfo::New() const {
  return new PBItemInfo;
}

void PBItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    probality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Probality;
        break;
      }
      
      // optional uint32 Probality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Probality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probality_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 Probality = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->probality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 Probality = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->probality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 Probality = 3;
    if (has_probality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemInfo::MergeFrom(const PBItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_probality(from.probality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemInfo::CopyFrom(const PBItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemInfo::Swap(PBItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(probality_, other->probality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemAutoCollect::kItemInfoFieldNumber;
const int PBItemAutoCollect::kDegreeInfoFieldNumber;
const int PBItemAutoCollect::kMapIDFieldNumber;
const int PBItemAutoCollect::kPosXFieldNumber;
const int PBItemAutoCollect::kPosYFieldNumber;
const int PBItemAutoCollect::kGridFieldNumber;
const int PBItemAutoCollect::kMaxUseTimesFieldNumber;
#endif  // !_MSC_VER

PBItemAutoCollect::PBItemAutoCollect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemAutoCollect::InitAsDefaultInstance() {}

PBItemAutoCollect::PBItemAutoCollect(const PBItemAutoCollect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemAutoCollect::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  grid_ = 0u;
  maxusetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemAutoCollect::~PBItemAutoCollect() {
  SharedDtor();
}

void PBItemAutoCollect::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemAutoCollect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemAutoCollect_descriptor_;
}

const PBItemAutoCollect& PBItemAutoCollect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemAutoCollect* PBItemAutoCollect::default_instance_ = NULL;

PBItemAutoCollect* PBItemAutoCollect::New() const {
  return new PBItemAutoCollect;
}

void PBItemAutoCollect::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    mapid_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    grid_ = 0u;
    maxusetimes_ = 0u;
  }
  iteminfo_.Clear();
  degreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemAutoCollect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBItemInfo ItemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_iteminfo()));
        if (input->ExpectTag(10)) goto parse_ItemInfo;
        if (input->ExpectTag(18)) goto parse_DegreeInfo;
        break;
      }
      
      // repeated .PBDegreeInfo DegreeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DegreeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_degreeinfo()));
        if (input->ExpectTag(18)) goto parse_DegreeInfo;
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Grid;
        break;
      }
      
      // optional uint32 Grid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Grid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &grid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MaxUseTimes;
        break;
      }
      
      // optional uint32 MaxUseTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxUseTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxusetimes_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemAutoCollect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemAutoCollect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->iteminfo(i), output);
  }
  
  // repeated .PBDegreeInfo DegreeInfo = 2;
  for (int i = 0; i < this->degreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->degreeinfo(i), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posx(), output);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posy(), output);
  }
  
  // optional uint32 Grid = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->grid(), output);
  }
  
  // optional uint32 MaxUseTimes = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->maxusetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemAutoCollect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemInfo ItemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->iteminfo(i), target);
  }
  
  // repeated .PBDegreeInfo DegreeInfo = 2;
  for (int i = 0; i < this->degreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->degreeinfo(i), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 PosX = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posx(), target);
  }
  
  // optional uint32 PosY = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posy(), target);
  }
  
  // optional uint32 Grid = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->grid(), target);
  }
  
  // optional uint32 MaxUseTimes = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->maxusetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemAutoCollect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 Grid = 6;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->grid());
    }
    
    // optional uint32 MaxUseTimes = 7;
    if (has_maxusetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxusetimes());
    }
    
  }
  // repeated .PBItemInfo ItemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->iteminfo(i));
  }
  
  // repeated .PBDegreeInfo DegreeInfo = 2;
  total_size += 1 * this->degreeinfo_size();
  for (int i = 0; i < this->degreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->degreeinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemAutoCollect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemAutoCollect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemAutoCollect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemAutoCollect::MergeFrom(const PBItemAutoCollect& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  degreeinfo_.MergeFrom(from.degreeinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_posx(from.posx());
    }
    if (from._has_bit(4)) {
      set_posy(from.posy());
    }
    if (from._has_bit(5)) {
      set_grid(from.grid());
    }
    if (from._has_bit(6)) {
      set_maxusetimes(from.maxusetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemAutoCollect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAutoCollect::CopyFrom(const PBItemAutoCollect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAutoCollect::Swap(PBItemAutoCollect* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    degreeinfo_.Swap(&other->degreeinfo_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(grid_, other->grid_);
    std::swap(maxusetimes_, other->maxusetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemAutoCollect::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemAutoCollect::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemAutoCollect::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemAutoCollect_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFangCunTreeNode::kSkillIDFieldNumber;
const int PBFangCunTreeNode::kMaxLevelFieldNumber;
const int PBFangCunTreeNode::kNeedSkillIDFieldNumber;
const int PBFangCunTreeNode::kNeedSkillPointFieldNumber;
const int PBFangCunTreeNode::kLevelFieldNumber;
const int PBFangCunTreeNode::kNeedBookFieldNumber;
const int PBFangCunTreeNode::kStageFieldNumber;
const int PBFangCunTreeNode::kOrderFieldNumber;
#endif  // !_MSC_VER

PBFangCunTreeNode::PBFangCunTreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFangCunTreeNode::InitAsDefaultInstance() {}

PBFangCunTreeNode::PBFangCunTreeNode(const PBFangCunTreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFangCunTreeNode::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  maxlevel_ = 0u;
  level_ = 0u;
  needbook_ = 0u;
  stage_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFangCunTreeNode::~PBFangCunTreeNode() {
  SharedDtor();
}

void PBFangCunTreeNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFangCunTreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFangCunTreeNode_descriptor_;
}

const PBFangCunTreeNode& PBFangCunTreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBFangCunTreeNode* PBFangCunTreeNode::default_instance_ = NULL;

PBFangCunTreeNode* PBFangCunTreeNode::New() const {
  return new PBFangCunTreeNode;
}

void PBFangCunTreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    maxlevel_ = 0u;
    level_ = 0u;
    needbook_ = 0u;
    stage_ = 0u;
    order_ = 0u;
  }
  needskillid_.Clear();
  needskillpoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFangCunTreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedSkillID;
        break;
      }
      
      // repeated uint32 NeedSkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needskillid(value);
        if (input->ExpectTag(24)) goto parse_NeedSkillID;
        if (input->ExpectTag(32)) goto parse_NeedSkillPoint;
        break;
      }
      
      // repeated uint32 NeedSkillPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSkillPoint:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_needskillpoint(value);
        if (input->ExpectTag(32)) goto parse_NeedSkillPoint;
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NeedBook;
        break;
      }
      
      // optional uint32 NeedBook = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedBook:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needbook_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Stage;
        break;
      }
      
      // optional uint32 Stage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stage_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFangCunTreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFangCunTreeNode::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->maxlevel(), output);
  }
  
  // repeated uint32 NeedSkillID = 3;
  for (int i = 0; i < this->needskillid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needskillid(i), output);
  }
  
  // repeated uint32 NeedSkillPoint = 4;
  for (int i = 0; i < this->needskillpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->needskillpoint(i), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 NeedBook = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->needbook(), output);
  }
  
  // optional uint32 Stage = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->stage(), output);
  }
  
  // optional uint32 Order = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFangCunTreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 MaxLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->maxlevel(), target);
  }
  
  // repeated uint32 NeedSkillID = 3;
  for (int i = 0; i < this->needskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needskillid(i), target);
  }
  
  // repeated uint32 NeedSkillPoint = 4;
  for (int i = 0; i < this->needskillpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->needskillpoint(i), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 NeedBook = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->needbook(), target);
  }
  
  // optional uint32 Stage = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->stage(), target);
  }
  
  // optional uint32 Order = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFangCunTreeNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 MaxLevel = 2;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 NeedBook = 6;
    if (has_needbook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needbook());
    }
    
    // optional uint32 Stage = 7;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stage());
    }
    
    // optional uint32 Order = 8;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  // repeated uint32 NeedSkillID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->needskillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needskillid(i));
    }
    total_size += 1 * this->needskillid_size() + data_size;
  }
  
  // repeated uint32 NeedSkillPoint = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->needskillpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->needskillpoint(i));
    }
    total_size += 1 * this->needskillpoint_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFangCunTreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFangCunTreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFangCunTreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFangCunTreeNode::MergeFrom(const PBFangCunTreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  needskillid_.MergeFrom(from.needskillid_);
  needskillpoint_.MergeFrom(from.needskillpoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_needbook(from.needbook());
    }
    if (from._has_bit(6)) {
      set_stage(from.stage());
    }
    if (from._has_bit(7)) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFangCunTreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangCunTreeNode::CopyFrom(const PBFangCunTreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangCunTreeNode::Swap(PBFangCunTreeNode* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(maxlevel_, other->maxlevel_);
    needskillid_.Swap(&other->needskillid_);
    needskillpoint_.Swap(&other->needskillpoint_);
    std::swap(level_, other->level_);
    std::swap(needbook_, other->needbook_);
    std::swap(stage_, other->stage_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFangCunTreeNode::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFangCunTreeNode::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFangCunTreeNode::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFangCunTreeNode_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFangCunTree::kTempIDFieldNumber;
const int PBFangCunTree::kSkillNodeFieldNumber;
#endif  // !_MSC_VER

PBFangCunTree::PBFangCunTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFangCunTree::InitAsDefaultInstance() {}

PBFangCunTree::PBFangCunTree(const PBFangCunTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFangCunTree::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFangCunTree::~PBFangCunTree() {
  SharedDtor();
}

void PBFangCunTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFangCunTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFangCunTree_descriptor_;
}

const PBFangCunTree& PBFangCunTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBFangCunTree* PBFangCunTree::default_instance_ = NULL;

PBFangCunTree* PBFangCunTree::New() const {
  return new PBFangCunTree;
}

void PBFangCunTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  skillnode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFangCunTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SkillNode;
        break;
      }
      
      // repeated .PBFangCunTreeNode SkillNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillNode:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skillnode()));
        if (input->ExpectTag(18)) goto parse_SkillNode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFangCunTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFangCunTree::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBFangCunTreeNode SkillNode = 2;
  for (int i = 0; i < this->skillnode_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->skillnode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFangCunTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBFangCunTreeNode SkillNode = 2;
  for (int i = 0; i < this->skillnode_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->skillnode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFangCunTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBFangCunTreeNode SkillNode = 2;
  total_size += 1 * this->skillnode_size();
  for (int i = 0; i < this->skillnode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skillnode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFangCunTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFangCunTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFangCunTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFangCunTree::MergeFrom(const PBFangCunTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillnode_.MergeFrom(from.skillnode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFangCunTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangCunTree::CopyFrom(const PBFangCunTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFangCunTree::Swap(PBFangCunTree* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    skillnode_.Swap(&other->skillnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFangCunTree::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFangCunTree::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFangCunTree::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFangCunTree_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemBlackPills::kItemBaseFieldNumber;
const int PBItemBlackPills::kExchangeTimeFieldNumber;
const int PBItemBlackPills::kExpTableIDFieldNumber;
#endif  // !_MSC_VER

PBItemBlackPills::PBItemBlackPills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBlackPills::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemBlackPills::PBItemBlackPills(const PBItemBlackPills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBlackPills::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  exchangetime_ = 0u;
  exptableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBlackPills::~PBItemBlackPills() {
  SharedDtor();
}

void PBItemBlackPills::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemBlackPills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBlackPills_descriptor_;
}

const PBItemBlackPills& PBItemBlackPills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemBlackPills* PBItemBlackPills::default_instance_ = NULL;

PBItemBlackPills* PBItemBlackPills::New() const {
  return new PBItemBlackPills;
}

void PBItemBlackPills::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    exchangetime_ = 0u;
    exptableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBlackPills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_ExchangeTime;
        break;
      }
      
      // optional uint32 ExchangeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangetime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ExpTableID;
        break;
      }
      
      // optional uint32 ExpTableID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpTableID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exptableid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBlackPills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBlackPills::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint32 ExchangeTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exchangetime(), output);
  }
  
  // optional uint32 ExpTableID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->exptableid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBlackPills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint32 ExchangeTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exchangetime(), target);
  }
  
  // optional uint32 ExpTableID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->exptableid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBlackPills::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint32 ExchangeTime = 2;
    if (has_exchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangetime());
    }
    
    // optional uint32 ExpTableID = 3;
    if (has_exptableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exptableid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBlackPills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBlackPills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBlackPills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBlackPills::MergeFrom(const PBItemBlackPills& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_exchangetime(from.exchangetime());
    }
    if (from._has_bit(2)) {
      set_exptableid(from.exptableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBlackPills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBlackPills::CopyFrom(const PBItemBlackPills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBlackPills::Swap(PBItemBlackPills* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(exchangetime_, other->exchangetime_);
    std::swap(exptableid_, other->exptableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBlackPills::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBlackPills::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBlackPills::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBlackPills_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBStage::kStageIDFieldNumber;
const int PBStage::kNextFieldNumber;
const int PBStage::kLayerFieldNumber;
#endif  // !_MSC_VER

PBStage::PBStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStage::InitAsDefaultInstance() {}

PBStage::PBStage(const PBStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStage::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStage::~PBStage() {
  SharedDtor();
}

void PBStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStage_descriptor_;
}

const PBStage& PBStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBStage* PBStage::default_instance_ = NULL;

PBStage* PBStage::New() const {
  return new PBStage;
}

void PBStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    layer_ = 0u;
  }
  next_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stageid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Next;
        break;
      }
      
      // repeated uint32 Next = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Next:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_next(value);
        if (input->ExpectTag(16)) goto parse_Next;
        if (input->ExpectTag(24)) goto parse_Layer;
        break;
      }
      
      // optional uint32 Layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Layer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &layer_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StageID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->stageid(), output);
  }
  
  // repeated uint32 Next = 2;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->next(i), output);
  }
  
  // optional uint32 Layer = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->layer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StageID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->stageid(), target);
  }
  
  // repeated uint32 Next = 2;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->next(i), target);
  }
  
  // optional uint32 Layer = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->layer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stageid());
    }
    
    // optional uint32 Layer = 3;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->layer());
    }
    
  }
  // repeated uint32 Next = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->next(i));
    }
    total_size += 1 * this->next_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStage::MergeFrom(const PBStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_.MergeFrom(from.next_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stageid(from.stageid());
    }
    if (from._has_bit(2)) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStage::CopyFrom(const PBStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStage::Swap(PBStage* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    next_.Swap(&other->next_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTemplateTalentStage::kTempIDFieldNumber;
const int PBTemplateTalentStage::kStageFieldNumber;
#endif  // !_MSC_VER

PBTemplateTalentStage::PBTemplateTalentStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTemplateTalentStage::InitAsDefaultInstance() {}

PBTemplateTalentStage::PBTemplateTalentStage(const PBTemplateTalentStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTemplateTalentStage::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTemplateTalentStage::~PBTemplateTalentStage() {
  SharedDtor();
}

void PBTemplateTalentStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTemplateTalentStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateTalentStage_descriptor_;
}

const PBTemplateTalentStage& PBTemplateTalentStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBTemplateTalentStage* PBTemplateTalentStage::default_instance_ = NULL;

PBTemplateTalentStage* PBTemplateTalentStage::New() const {
  return new PBTemplateTalentStage;
}

void PBTemplateTalentStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTemplateTalentStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Stage;
        break;
      }
      
      // repeated .PBStage Stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Stage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_stage()));
        if (input->ExpectTag(18)) goto parse_Stage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTemplateTalentStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTemplateTalentStage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated .PBStage Stage = 2;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->stage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTemplateTalentStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated .PBStage Stage = 2;
  for (int i = 0; i < this->stage_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->stage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTemplateTalentStage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated .PBStage Stage = 2;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->stage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTemplateTalentStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTemplateTalentStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTemplateTalentStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTemplateTalentStage::MergeFrom(const PBTemplateTalentStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_.MergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTemplateTalentStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateTalentStage::CopyFrom(const PBTemplateTalentStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTemplateTalentStage::Swap(PBTemplateTalentStage* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    stage_.Swap(&other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTemplateTalentStage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTemplateTalentStage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTemplateTalentStage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTemplateTalentStage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemExpContainer::kItemBaseFieldNumber;
const int PBItemExpContainer::kMaxExpFieldNumber;
const int PBItemExpContainer::kOgreExpRateFieldNumber;
const int PBItemExpContainer::kExpPillsIDFieldNumber;
#endif  // !_MSC_VER

PBItemExpContainer::PBItemExpContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExpContainer::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemExpContainer::PBItemExpContainer(const PBItemExpContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExpContainer::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  maxexp_ = GOOGLE_ULONGLONG(0);
  ogreexprate_ = 0u;
  exppillsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExpContainer::~PBItemExpContainer() {
  SharedDtor();
}

void PBItemExpContainer::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemExpContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpContainer_descriptor_;
}

const PBItemExpContainer& PBItemExpContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemExpContainer* PBItemExpContainer::default_instance_ = NULL;

PBItemExpContainer* PBItemExpContainer::New() const {
  return new PBItemExpContainer;
}

void PBItemExpContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    maxexp_ = GOOGLE_ULONGLONG(0);
    ogreexprate_ = 0u;
    exppillsid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExpContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_MaxExp;
        break;
      }
      
      // optional uint64 MaxExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &maxexp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OgreExpRate;
        break;
      }
      
      // optional uint32 OgreExpRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OgreExpRate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ogreexprate_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ExpPillsID;
        break;
      }
      
      // optional uint32 ExpPillsID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpPillsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exppillsid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExpContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExpContainer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint64 MaxExp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->maxexp(), output);
  }
  
  // optional uint32 OgreExpRate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ogreexprate(), output);
  }
  
  // optional uint32 ExpPillsID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->exppillsid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExpContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint64 MaxExp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->maxexp(), target);
  }
  
  // optional uint32 OgreExpRate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ogreexprate(), target);
  }
  
  // optional uint32 ExpPillsID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->exppillsid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExpContainer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint64 MaxExp = 2;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->maxexp());
    }
    
    // optional uint32 OgreExpRate = 3;
    if (has_ogreexprate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ogreexprate());
    }
    
    // optional uint32 ExpPillsID = 4;
    if (has_exppillsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exppillsid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExpContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExpContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExpContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExpContainer::MergeFrom(const PBItemExpContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_maxexp(from.maxexp());
    }
    if (from._has_bit(2)) {
      set_ogreexprate(from.ogreexprate());
    }
    if (from._has_bit(3)) {
      set_exppillsid(from.exppillsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExpContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpContainer::CopyFrom(const PBItemExpContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpContainer::Swap(PBItemExpContainer* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(maxexp_, other->maxexp_);
    std::swap(ogreexprate_, other->ogreexprate_);
    std::swap(exppillsid_, other->exppillsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExpContainer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExpContainer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExpContainer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpContainer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemExpPills::kItemBaseFieldNumber;
const int PBItemExpPills::kExpFieldNumber;
const int PBItemExpPills::kLevelLimitFieldNumber;
#endif  // !_MSC_VER

PBItemExpPills::PBItemExpPills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExpPills::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemExpPills::PBItemExpPills(const PBItemExpPills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExpPills::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  exp_ = GOOGLE_ULONGLONG(0);
  levellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExpPills::~PBItemExpPills() {
  SharedDtor();
}

void PBItemExpPills::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemExpPills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpPills_descriptor_;
}

const PBItemExpPills& PBItemExpPills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemExpPills* PBItemExpPills::default_instance_ = NULL;

PBItemExpPills* PBItemExpPills::New() const {
  return new PBItemExpPills;
}

void PBItemExpPills::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    exp_ = GOOGLE_ULONGLONG(0);
    levellimit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExpPills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExpPills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExpPills::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->exp(), output);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levellimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExpPills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->exp(), target);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levellimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExpPills::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 LevelLimit = 3;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExpPills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExpPills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExpPills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExpPills::MergeFrom(const PBItemExpPills& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_levellimit(from.levellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExpPills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpPills::CopyFrom(const PBItemExpPills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpPills::Swap(PBItemExpPills* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(exp_, other->exp_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExpPills::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExpPills::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExpPills::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpPills_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemExpTome::kItemBaseFieldNumber;
const int PBItemExpTome::kExpFieldNumber;
const int PBItemExpTome::kLevelLimitFieldNumber;
const int PBItemExpTome::kOpenItemIDFieldNumber;
#endif  // !_MSC_VER

PBItemExpTome::PBItemExpTome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemExpTome::InitAsDefaultInstance() {  itembase_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBItemExpTome::PBItemExpTome(const PBItemExpTome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemExpTome::SharedCtor() {
  _cached_size_ = 0;
  itembase_ = NULL;
  exp_ = GOOGLE_ULONGLONG(0);
  levellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemExpTome::~PBItemExpTome() {
  SharedDtor();
}

void PBItemExpTome::SharedDtor() {
  if (this != default_instance_) {
    delete itembase_;
  }
}

const ::google::protobuf::Descriptor* PBItemExpTome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpTome_descriptor_;
}

const PBItemExpTome& PBItemExpTome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBItemExpTome* PBItemExpTome::default_instance_ = NULL;

PBItemExpTome* PBItemExpTome::New() const {
  return new PBItemExpTome;
}

void PBItemExpTome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (itembase_ != NULL) itembase_->::PBItemBase::Clear();
    }
    exp_ = GOOGLE_ULONGLONG(0);
    levellimit_ = 0u;
  }
  openitemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemExpTome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase ItemBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itembase()));
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_OpenItemID;
        break;
      }
      
      // repeated uint32 OpenItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_openitemid(value);
        if (input->ExpectTag(32)) goto parse_OpenItemID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemExpTome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemExpTome::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->itembase(), output);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->exp(), output);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->levellimit(), output);
  }
  
  // repeated uint32 OpenItemID = 4;
  for (int i = 0; i < this->openitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->openitemid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemExpTome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase ItemBase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->itembase(), target);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->exp(), target);
  }
  
  // optional uint32 LevelLimit = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->levellimit(), target);
  }
  
  // repeated uint32 OpenItemID = 4;
  for (int i = 0; i < this->openitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->openitemid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemExpTome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase ItemBase = 1;
    if (has_itembase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itembase());
    }
    
    // optional uint64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 LevelLimit = 3;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
  }
  // repeated uint32 OpenItemID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->openitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->openitemid(i));
    }
    total_size += 1 * this->openitemid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemExpTome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemExpTome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemExpTome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemExpTome::MergeFrom(const PBItemExpTome& from) {
  GOOGLE_CHECK_NE(&from, this);
  openitemid_.MergeFrom(from.openitemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_itembase()->::PBItemBase::MergeFrom(from.itembase());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_levellimit(from.levellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemExpTome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpTome::CopyFrom(const PBItemExpTome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemExpTome::Swap(PBItemExpTome* other) {
  if (other != this) {
    std::swap(itembase_, other->itembase_);
    std::swap(exp_, other->exp_);
    std::swap(levellimit_, other->levellimit_);
    openitemid_.Swap(&other->openitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemExpTome::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemExpTome::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemExpTome::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemExpTome_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAccuseConfig::kTempIDFieldNumber;
const int PBAccuseConfig::kAccuseBeginHourFieldNumber;
const int PBAccuseConfig::kAccuseBeginMinuteFieldNumber;
const int PBAccuseConfig::kAccuseLevelFieldNumber;
const int PBAccuseConfig::kAccuseEndHourFieldNumber;
const int PBAccuseConfig::kAccuseEndMinuteFieldNumber;
const int PBAccuseConfig::kAccuseMoneyFieldNumber;
const int PBAccuseConfig::kAccusePersonFieldNumber;
const int PBAccuseConfig::kAccusePercentFieldNumber;
const int PBAccuseConfig::kAwardPowerFieldNumber;
const int PBAccuseConfig::kGateNumFieldNumber;
const int PBAccuseConfig::kFlagNumFieldNumber;
const int PBAccuseConfig::kGatePowerFieldNumber;
const int PBAccuseConfig::kFlagPowerFieldNumber;
const int PBAccuseConfig::kAccuseNoticeHourFieldNumber;
const int PBAccuseConfig::kAccuseNoticeMinuteFieldNumber;
const int PBAccuseConfig::kNoticePowerFieldNumber;
const int PBAccuseConfig::kGateParam1FieldNumber;
const int PBAccuseConfig::kFlagParam1FieldNumber;
const int PBAccuseConfig::kGateParam2FieldNumber;
const int PBAccuseConfig::kFlagParam2FieldNumber;
const int PBAccuseConfig::kGateParam3FieldNumber;
const int PBAccuseConfig::kFlagParam3FieldNumber;
const int PBAccuseConfig::kLWPercentFieldNumber;
#endif  // !_MSC_VER

PBAccuseConfig::PBAccuseConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAccuseConfig::InitAsDefaultInstance() {}

PBAccuseConfig::PBAccuseConfig(const PBAccuseConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAccuseConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  accusebeginhour_ = 0u;
  accusebeginminute_ = 0u;
  accuselevel_ = 0u;
  accuseendhour_ = 0u;
  accuseendminute_ = 0u;
  accusemoney_ = 0u;
  accuseperson_ = 0u;
  accusepercent_ = 0u;
  awardpower_ = 0u;
  gatenum_ = 0u;
  flagnum_ = 0u;
  gatepower_ = 0u;
  flagpower_ = 0u;
  accusenoticehour_ = 0u;
  accusenoticeminute_ = 0u;
  noticepower_ = 0u;
  gateparam1_ = 0u;
  flagparam1_ = 0u;
  gateparam2_ = 0u;
  flagparam2_ = 0u;
  gateparam3_ = 0u;
  flagparam3_ = 0u;
  lwpercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAccuseConfig::~PBAccuseConfig() {
  SharedDtor();
}

void PBAccuseConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAccuseConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAccuseConfig_descriptor_;
}

const PBAccuseConfig& PBAccuseConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBAccuseConfig* PBAccuseConfig::default_instance_ = NULL;

PBAccuseConfig* PBAccuseConfig::New() const {
  return new PBAccuseConfig;
}

void PBAccuseConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    accusebeginhour_ = 0u;
    accusebeginminute_ = 0u;
    accuselevel_ = 0u;
    accuseendhour_ = 0u;
    accuseendminute_ = 0u;
    accusemoney_ = 0u;
    accuseperson_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accusepercent_ = 0u;
    awardpower_ = 0u;
    gatenum_ = 0u;
    flagnum_ = 0u;
    gatepower_ = 0u;
    flagpower_ = 0u;
    accusenoticehour_ = 0u;
    accusenoticeminute_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    noticepower_ = 0u;
    gateparam1_ = 0u;
    flagparam1_ = 0u;
    gateparam2_ = 0u;
    flagparam2_ = 0u;
    gateparam3_ = 0u;
    flagparam3_ = 0u;
    lwpercent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAccuseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccuseBeginHour;
        break;
      }
      
      // optional uint32 AccuseBeginHour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseBeginHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusebeginhour_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AccuseBeginMinute;
        break;
      }
      
      // optional uint32 AccuseBeginMinute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseBeginMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusebeginminute_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccuseLevel;
        break;
      }
      
      // optional uint32 AccuseLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuselevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_AccuseEndHour;
        break;
      }
      
      // optional uint32 AccuseEndHour = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseEndHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuseendhour_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_AccuseEndMinute;
        break;
      }
      
      // optional uint32 AccuseEndMinute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseEndMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuseendminute_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_AccuseMoney;
        break;
      }
      
      // optional uint32 AccuseMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusemoney_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_AccusePerson;
        break;
      }
      
      // optional uint32 AccusePerson = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccusePerson:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accuseperson_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_AccusePercent;
        break;
      }
      
      // optional uint32 AccusePercent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccusePercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusepercent_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_AwardPower;
        break;
      }
      
      // optional uint32 AwardPower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardPower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &awardpower_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_GateNum;
        break;
      }
      
      // optional uint32 GateNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gatenum_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_FlagNum;
        break;
      }
      
      // optional uint32 FlagNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagnum_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_GatePower;
        break;
      }
      
      // optional uint32 GatePower = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GatePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gatepower_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_FlagPower;
        break;
      }
      
      // optional uint32 FlagPower = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagPower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagpower_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_AccuseNoticeHour;
        break;
      }
      
      // optional uint32 AccuseNoticeHour = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseNoticeHour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusenoticehour_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_AccuseNoticeMinute;
        break;
      }
      
      // optional uint32 AccuseNoticeMinute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccuseNoticeMinute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accusenoticeminute_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_NoticePower;
        break;
      }
      
      // optional uint32 NoticePower = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NoticePower:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &noticepower_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_GateParam1;
        break;
      }
      
      // optional uint32 GateParam1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gateparam1_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_FlagParam1;
        break;
      }
      
      // optional uint32 FlagParam1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagParam1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagparam1_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_GateParam2;
        break;
      }
      
      // optional uint32 GateParam2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gateparam2_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_FlagParam2;
        break;
      }
      
      // optional uint32 FlagParam2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagParam2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagparam2_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_GateParam3;
        break;
      }
      
      // optional uint32 GateParam3 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gateparam3_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_FlagParam3;
        break;
      }
      
      // optional uint32 FlagParam3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagParam3:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagparam3_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_LWPercent;
        break;
      }
      
      // optional uint32 LWPercent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LWPercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lwpercent_));
        _set_bit(23);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAccuseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAccuseConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 AccuseBeginHour = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accusebeginhour(), output);
  }
  
  // optional uint32 AccuseBeginMinute = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accusebeginminute(), output);
  }
  
  // optional uint32 AccuseLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accuselevel(), output);
  }
  
  // optional uint32 AccuseEndHour = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->accuseendhour(), output);
  }
  
  // optional uint32 AccuseEndMinute = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->accuseendminute(), output);
  }
  
  // optional uint32 AccuseMoney = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->accusemoney(), output);
  }
  
  // optional uint32 AccusePerson = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->accuseperson(), output);
  }
  
  // optional uint32 AccusePercent = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->accusepercent(), output);
  }
  
  // optional uint32 AwardPower = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->awardpower(), output);
  }
  
  // optional uint32 GateNum = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->gatenum(), output);
  }
  
  // optional uint32 FlagNum = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->flagnum(), output);
  }
  
  // optional uint32 GatePower = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->gatepower(), output);
  }
  
  // optional uint32 FlagPower = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->flagpower(), output);
  }
  
  // optional uint32 AccuseNoticeHour = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->accusenoticehour(), output);
  }
  
  // optional uint32 AccuseNoticeMinute = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->accusenoticeminute(), output);
  }
  
  // optional uint32 NoticePower = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->noticepower(), output);
  }
  
  // optional uint32 GateParam1 = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->gateparam1(), output);
  }
  
  // optional uint32 FlagParam1 = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->flagparam1(), output);
  }
  
  // optional uint32 GateParam2 = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->gateparam2(), output);
  }
  
  // optional uint32 FlagParam2 = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->flagparam2(), output);
  }
  
  // optional uint32 GateParam3 = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->gateparam3(), output);
  }
  
  // optional uint32 FlagParam3 = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->flagparam3(), output);
  }
  
  // optional uint32 LWPercent = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->lwpercent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAccuseConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 AccuseBeginHour = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accusebeginhour(), target);
  }
  
  // optional uint32 AccuseBeginMinute = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accusebeginminute(), target);
  }
  
  // optional uint32 AccuseLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accuselevel(), target);
  }
  
  // optional uint32 AccuseEndHour = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->accuseendhour(), target);
  }
  
  // optional uint32 AccuseEndMinute = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->accuseendminute(), target);
  }
  
  // optional uint32 AccuseMoney = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->accusemoney(), target);
  }
  
  // optional uint32 AccusePerson = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->accuseperson(), target);
  }
  
  // optional uint32 AccusePercent = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->accusepercent(), target);
  }
  
  // optional uint32 AwardPower = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->awardpower(), target);
  }
  
  // optional uint32 GateNum = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->gatenum(), target);
  }
  
  // optional uint32 FlagNum = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->flagnum(), target);
  }
  
  // optional uint32 GatePower = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->gatepower(), target);
  }
  
  // optional uint32 FlagPower = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->flagpower(), target);
  }
  
  // optional uint32 AccuseNoticeHour = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->accusenoticehour(), target);
  }
  
  // optional uint32 AccuseNoticeMinute = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->accusenoticeminute(), target);
  }
  
  // optional uint32 NoticePower = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->noticepower(), target);
  }
  
  // optional uint32 GateParam1 = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->gateparam1(), target);
  }
  
  // optional uint32 FlagParam1 = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->flagparam1(), target);
  }
  
  // optional uint32 GateParam2 = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->gateparam2(), target);
  }
  
  // optional uint32 FlagParam2 = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->flagparam2(), target);
  }
  
  // optional uint32 GateParam3 = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->gateparam3(), target);
  }
  
  // optional uint32 FlagParam3 = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->flagparam3(), target);
  }
  
  // optional uint32 LWPercent = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->lwpercent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAccuseConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 AccuseBeginHour = 2;
    if (has_accusebeginhour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusebeginhour());
    }
    
    // optional uint32 AccuseBeginMinute = 3;
    if (has_accusebeginminute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusebeginminute());
    }
    
    // optional uint32 AccuseLevel = 4;
    if (has_accuselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuselevel());
    }
    
    // optional uint32 AccuseEndHour = 5;
    if (has_accuseendhour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuseendhour());
    }
    
    // optional uint32 AccuseEndMinute = 6;
    if (has_accuseendminute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuseendminute());
    }
    
    // optional uint32 AccuseMoney = 7;
    if (has_accusemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusemoney());
    }
    
    // optional uint32 AccusePerson = 8;
    if (has_accuseperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accuseperson());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 AccusePercent = 9;
    if (has_accusepercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusepercent());
    }
    
    // optional uint32 AwardPower = 10;
    if (has_awardpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->awardpower());
    }
    
    // optional uint32 GateNum = 11;
    if (has_gatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gatenum());
    }
    
    // optional uint32 FlagNum = 12;
    if (has_flagnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagnum());
    }
    
    // optional uint32 GatePower = 13;
    if (has_gatepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gatepower());
    }
    
    // optional uint32 FlagPower = 14;
    if (has_flagpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagpower());
    }
    
    // optional uint32 AccuseNoticeHour = 15;
    if (has_accusenoticehour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusenoticehour());
    }
    
    // optional uint32 AccuseNoticeMinute = 16;
    if (has_accusenoticeminute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accusenoticeminute());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 NoticePower = 17;
    if (has_noticepower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->noticepower());
    }
    
    // optional uint32 GateParam1 = 18;
    if (has_gateparam1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gateparam1());
    }
    
    // optional uint32 FlagParam1 = 19;
    if (has_flagparam1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagparam1());
    }
    
    // optional uint32 GateParam2 = 20;
    if (has_gateparam2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gateparam2());
    }
    
    // optional uint32 FlagParam2 = 21;
    if (has_flagparam2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagparam2());
    }
    
    // optional uint32 GateParam3 = 22;
    if (has_gateparam3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gateparam3());
    }
    
    // optional uint32 FlagParam3 = 23;
    if (has_flagparam3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagparam3());
    }
    
    // optional uint32 LWPercent = 24;
    if (has_lwpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lwpercent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAccuseConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAccuseConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAccuseConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAccuseConfig::MergeFrom(const PBAccuseConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_accusebeginhour(from.accusebeginhour());
    }
    if (from._has_bit(2)) {
      set_accusebeginminute(from.accusebeginminute());
    }
    if (from._has_bit(3)) {
      set_accuselevel(from.accuselevel());
    }
    if (from._has_bit(4)) {
      set_accuseendhour(from.accuseendhour());
    }
    if (from._has_bit(5)) {
      set_accuseendminute(from.accuseendminute());
    }
    if (from._has_bit(6)) {
      set_accusemoney(from.accusemoney());
    }
    if (from._has_bit(7)) {
      set_accuseperson(from.accuseperson());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_accusepercent(from.accusepercent());
    }
    if (from._has_bit(9)) {
      set_awardpower(from.awardpower());
    }
    if (from._has_bit(10)) {
      set_gatenum(from.gatenum());
    }
    if (from._has_bit(11)) {
      set_flagnum(from.flagnum());
    }
    if (from._has_bit(12)) {
      set_gatepower(from.gatepower());
    }
    if (from._has_bit(13)) {
      set_flagpower(from.flagpower());
    }
    if (from._has_bit(14)) {
      set_accusenoticehour(from.accusenoticehour());
    }
    if (from._has_bit(15)) {
      set_accusenoticeminute(from.accusenoticeminute());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_noticepower(from.noticepower());
    }
    if (from._has_bit(17)) {
      set_gateparam1(from.gateparam1());
    }
    if (from._has_bit(18)) {
      set_flagparam1(from.flagparam1());
    }
    if (from._has_bit(19)) {
      set_gateparam2(from.gateparam2());
    }
    if (from._has_bit(20)) {
      set_flagparam2(from.flagparam2());
    }
    if (from._has_bit(21)) {
      set_gateparam3(from.gateparam3());
    }
    if (from._has_bit(22)) {
      set_flagparam3(from.flagparam3());
    }
    if (from._has_bit(23)) {
      set_lwpercent(from.lwpercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAccuseConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccuseConfig::CopyFrom(const PBAccuseConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccuseConfig::Swap(PBAccuseConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(accusebeginhour_, other->accusebeginhour_);
    std::swap(accusebeginminute_, other->accusebeginminute_);
    std::swap(accuselevel_, other->accuselevel_);
    std::swap(accuseendhour_, other->accuseendhour_);
    std::swap(accuseendminute_, other->accuseendminute_);
    std::swap(accusemoney_, other->accusemoney_);
    std::swap(accuseperson_, other->accuseperson_);
    std::swap(accusepercent_, other->accusepercent_);
    std::swap(awardpower_, other->awardpower_);
    std::swap(gatenum_, other->gatenum_);
    std::swap(flagnum_, other->flagnum_);
    std::swap(gatepower_, other->gatepower_);
    std::swap(flagpower_, other->flagpower_);
    std::swap(accusenoticehour_, other->accusenoticehour_);
    std::swap(accusenoticeminute_, other->accusenoticeminute_);
    std::swap(noticepower_, other->noticepower_);
    std::swap(gateparam1_, other->gateparam1_);
    std::swap(flagparam1_, other->flagparam1_);
    std::swap(gateparam2_, other->gateparam2_);
    std::swap(flagparam2_, other->flagparam2_);
    std::swap(gateparam3_, other->gateparam3_);
    std::swap(flagparam3_, other->flagparam3_);
    std::swap(lwpercent_, other->lwpercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAccuseConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAccuseConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAccuseConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAccuseConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBGlobalMapConfig::kTempIDFieldNumber;
const int PBGlobalMapConfig::kMapIDFieldNumber;
const int PBGlobalMapConfig::kBuffIDFieldNumber;
const int PBGlobalMapConfig::kLimitFieldNumber;
const int PBGlobalMapConfig::kOutMapFieldNumber;
const int PBGlobalMapConfig::kOutXFieldNumber;
const int PBGlobalMapConfig::kOutYFieldNumber;
const int PBGlobalMapConfig::kEscapeBuffIDFieldNumber;
#endif  // !_MSC_VER

PBGlobalMapConfig::PBGlobalMapConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGlobalMapConfig::InitAsDefaultInstance() {}

PBGlobalMapConfig::PBGlobalMapConfig(const PBGlobalMapConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGlobalMapConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  mapid_ = 0u;
  buffid_ = 0u;
  limit_ = 0u;
  outmap_ = 0u;
  outx_ = 0u;
  outy_ = 0u;
  escapebuffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGlobalMapConfig::~PBGlobalMapConfig() {
  SharedDtor();
}

void PBGlobalMapConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGlobalMapConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGlobalMapConfig_descriptor_;
}

const PBGlobalMapConfig& PBGlobalMapConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBGlobalMapConfig* PBGlobalMapConfig::default_instance_ = NULL;

PBGlobalMapConfig* PBGlobalMapConfig::New() const {
  return new PBGlobalMapConfig;
}

void PBGlobalMapConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    mapid_ = 0u;
    buffid_ = 0u;
    limit_ = 0u;
    outmap_ = 0u;
    outx_ = 0u;
    outy_ = 0u;
    escapebuffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGlobalMapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BuffID;
        break;
      }
      
      // optional uint32 BuffID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Limit;
        break;
      }
      
      // optional uint32 Limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Limit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &limit_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_OutMap;
        break;
      }
      
      // optional uint32 OutMap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutMap:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outmap_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OutX;
        break;
      }
      
      // optional uint32 OutX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outx_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_OutY;
        break;
      }
      
      // optional uint32 OutY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outy_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_EscapeBuffID;
        break;
      }
      
      // optional uint32 EscapeBuffID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EscapeBuffID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &escapebuffid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGlobalMapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGlobalMapConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mapid(), output);
  }
  
  // optional uint32 BuffID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->buffid(), output);
  }
  
  // optional uint32 Limit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->limit(), output);
  }
  
  // optional uint32 OutMap = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->outmap(), output);
  }
  
  // optional uint32 OutX = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->outx(), output);
  }
  
  // optional uint32 OutY = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->outy(), output);
  }
  
  // optional uint32 EscapeBuffID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->escapebuffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGlobalMapConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 MapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mapid(), target);
  }
  
  // optional uint32 BuffID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->buffid(), target);
  }
  
  // optional uint32 Limit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->limit(), target);
  }
  
  // optional uint32 OutMap = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->outmap(), target);
  }
  
  // optional uint32 OutX = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->outx(), target);
  }
  
  // optional uint32 OutY = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->outy(), target);
  }
  
  // optional uint32 EscapeBuffID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->escapebuffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGlobalMapConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 MapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 BuffID = 3;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
    // optional uint32 Limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->limit());
    }
    
    // optional uint32 OutMap = 5;
    if (has_outmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outmap());
    }
    
    // optional uint32 OutX = 6;
    if (has_outx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outx());
    }
    
    // optional uint32 OutY = 7;
    if (has_outy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outy());
    }
    
    // optional uint32 EscapeBuffID = 8;
    if (has_escapebuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->escapebuffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGlobalMapConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGlobalMapConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGlobalMapConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGlobalMapConfig::MergeFrom(const PBGlobalMapConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(2)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(3)) {
      set_limit(from.limit());
    }
    if (from._has_bit(4)) {
      set_outmap(from.outmap());
    }
    if (from._has_bit(5)) {
      set_outx(from.outx());
    }
    if (from._has_bit(6)) {
      set_outy(from.outy());
    }
    if (from._has_bit(7)) {
      set_escapebuffid(from.escapebuffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGlobalMapConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGlobalMapConfig::CopyFrom(const PBGlobalMapConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGlobalMapConfig::Swap(PBGlobalMapConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(mapid_, other->mapid_);
    std::swap(buffid_, other->buffid_);
    std::swap(limit_, other->limit_);
    std::swap(outmap_, other->outmap_);
    std::swap(outx_, other->outx_);
    std::swap(outy_, other->outy_);
    std::swap(escapebuffid_, other->escapebuffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGlobalMapConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGlobalMapConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGlobalMapConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGlobalMapConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsBOSS::kTempIDFieldNumber;
const int PBCorpsBOSS::kBOSSIDFieldNumber;
const int PBCorpsBOSS::kHardBOSSIDFieldNumber;
const int PBCorpsBOSS::kValueLimitFieldNumber;
const int PBCorpsBOSS::kDropDescFieldNumber;
const int PBCorpsBOSS::kHardDropDescFieldNumber;
const int PBCorpsBOSS::kSummonMinLevelFieldNumber;
const int PBCorpsBOSS::kHardSummonMinLevelFieldNumber;
const int PBCorpsBOSS::kSummonMinValueFieldNumber;
const int PBCorpsBOSS::kHardSummonMinValueFieldNumber;
#endif  // !_MSC_VER

PBCorpsBOSS::PBCorpsBOSS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsBOSS::InitAsDefaultInstance() {}

PBCorpsBOSS::PBCorpsBOSS(const PBCorpsBOSS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsBOSS::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsBOSS::~PBCorpsBOSS() {
  SharedDtor();
}

void PBCorpsBOSS::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsBOSS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBOSS_descriptor_;
}

const PBCorpsBOSS& PBCorpsBOSS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsBOSS* PBCorpsBOSS::default_instance_ = NULL;

PBCorpsBOSS* PBCorpsBOSS::New() const {
  return new PBCorpsBOSS;
}

void PBCorpsBOSS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  bossid_.Clear();
  hardbossid_.Clear();
  valuelimit_.Clear();
  dropdesc_.Clear();
  harddropdesc_.Clear();
  summonminlevel_.Clear();
  hardsummonminlevel_.Clear();
  summonminvalue_.Clear();
  hardsummonminvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsBOSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BOSSID;
        break;
      }
      
      // repeated uint32 BOSSID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BOSSID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bossid(value);
        if (input->ExpectTag(16)) goto parse_BOSSID;
        if (input->ExpectTag(24)) goto parse_HardBOSSID;
        break;
      }
      
      // repeated uint32 HardBOSSID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HardBOSSID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hardbossid(value);
        if (input->ExpectTag(24)) goto parse_HardBOSSID;
        if (input->ExpectTag(32)) goto parse_ValueLimit;
        break;
      }
      
      // repeated uint32 ValueLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ValueLimit:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_valuelimit(value);
        if (input->ExpectTag(32)) goto parse_ValueLimit;
        if (input->ExpectTag(42)) goto parse_DropDesc;
        break;
      }
      
      // repeated string DropDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DropDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_dropdesc()));
        if (input->ExpectTag(42)) goto parse_DropDesc;
        if (input->ExpectTag(50)) goto parse_HardDropDesc;
        break;
      }
      
      // repeated string HardDropDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HardDropDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_harddropdesc()));
        if (input->ExpectTag(50)) goto parse_HardDropDesc;
        if (input->ExpectTag(56)) goto parse_SummonMinLevel;
        break;
      }
      
      // repeated uint32 SummonMinLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonMinLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_summonminlevel(value);
        if (input->ExpectTag(56)) goto parse_SummonMinLevel;
        if (input->ExpectTag(64)) goto parse_HardSummonMinLevel;
        break;
      }
      
      // repeated uint32 HardSummonMinLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HardSummonMinLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hardsummonminlevel(value);
        if (input->ExpectTag(64)) goto parse_HardSummonMinLevel;
        if (input->ExpectTag(72)) goto parse_SummonMinValue;
        break;
      }
      
      // repeated uint32 SummonMinValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SummonMinValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_summonminvalue(value);
        if (input->ExpectTag(72)) goto parse_SummonMinValue;
        if (input->ExpectTag(80)) goto parse_HardSummonMinValue;
        break;
      }
      
      // repeated uint32 HardSummonMinValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HardSummonMinValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_hardsummonminvalue(value);
        if (input->ExpectTag(80)) goto parse_HardSummonMinValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsBOSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsBOSS::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 BOSSID = 2;
  for (int i = 0; i < this->bossid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->bossid(i), output);
  }
  
  // repeated uint32 HardBOSSID = 3;
  for (int i = 0; i < this->hardbossid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->hardbossid(i), output);
  }
  
  // repeated uint32 ValueLimit = 4;
  for (int i = 0; i < this->valuelimit_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->valuelimit(i), output);
  }
  
  // repeated string DropDesc = 5;
  for (int i = 0; i < this->dropdesc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->dropdesc(i), output);
  }
  
  // repeated string HardDropDesc = 6;
  for (int i = 0; i < this->harddropdesc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->harddropdesc(i), output);
  }
  
  // repeated uint32 SummonMinLevel = 7;
  for (int i = 0; i < this->summonminlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->summonminlevel(i), output);
  }
  
  // repeated uint32 HardSummonMinLevel = 8;
  for (int i = 0; i < this->hardsummonminlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->hardsummonminlevel(i), output);
  }
  
  // repeated uint32 SummonMinValue = 9;
  for (int i = 0; i < this->summonminvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->summonminvalue(i), output);
  }
  
  // repeated uint32 HardSummonMinValue = 10;
  for (int i = 0; i < this->hardsummonminvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->hardsummonminvalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsBOSS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 BOSSID = 2;
  for (int i = 0; i < this->bossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->bossid(i), target);
  }
  
  // repeated uint32 HardBOSSID = 3;
  for (int i = 0; i < this->hardbossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->hardbossid(i), target);
  }
  
  // repeated uint32 ValueLimit = 4;
  for (int i = 0; i < this->valuelimit_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->valuelimit(i), target);
  }
  
  // repeated string DropDesc = 5;
  for (int i = 0; i < this->dropdesc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->dropdesc(i), target);
  }
  
  // repeated string HardDropDesc = 6;
  for (int i = 0; i < this->harddropdesc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->harddropdesc(i), target);
  }
  
  // repeated uint32 SummonMinLevel = 7;
  for (int i = 0; i < this->summonminlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->summonminlevel(i), target);
  }
  
  // repeated uint32 HardSummonMinLevel = 8;
  for (int i = 0; i < this->hardsummonminlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->hardsummonminlevel(i), target);
  }
  
  // repeated uint32 SummonMinValue = 9;
  for (int i = 0; i < this->summonminvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->summonminvalue(i), target);
  }
  
  // repeated uint32 HardSummonMinValue = 10;
  for (int i = 0; i < this->hardsummonminvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->hardsummonminvalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsBOSS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  // repeated uint32 BOSSID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bossid(i));
    }
    total_size += 1 * this->bossid_size() + data_size;
  }
  
  // repeated uint32 HardBOSSID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hardbossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hardbossid(i));
    }
    total_size += 1 * this->hardbossid_size() + data_size;
  }
  
  // repeated uint32 ValueLimit = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->valuelimit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->valuelimit(i));
    }
    total_size += 1 * this->valuelimit_size() + data_size;
  }
  
  // repeated string DropDesc = 5;
  total_size += 1 * this->dropdesc_size();
  for (int i = 0; i < this->dropdesc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->dropdesc(i));
  }
  
  // repeated string HardDropDesc = 6;
  total_size += 1 * this->harddropdesc_size();
  for (int i = 0; i < this->harddropdesc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->harddropdesc(i));
  }
  
  // repeated uint32 SummonMinLevel = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->summonminlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->summonminlevel(i));
    }
    total_size += 1 * this->summonminlevel_size() + data_size;
  }
  
  // repeated uint32 HardSummonMinLevel = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->hardsummonminlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hardsummonminlevel(i));
    }
    total_size += 1 * this->hardsummonminlevel_size() + data_size;
  }
  
  // repeated uint32 SummonMinValue = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->summonminvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->summonminvalue(i));
    }
    total_size += 1 * this->summonminvalue_size() + data_size;
  }
  
  // repeated uint32 HardSummonMinValue = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hardsummonminvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->hardsummonminvalue(i));
    }
    total_size += 1 * this->hardsummonminvalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsBOSS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsBOSS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsBOSS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsBOSS::MergeFrom(const PBCorpsBOSS& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossid_.MergeFrom(from.bossid_);
  hardbossid_.MergeFrom(from.hardbossid_);
  valuelimit_.MergeFrom(from.valuelimit_);
  dropdesc_.MergeFrom(from.dropdesc_);
  harddropdesc_.MergeFrom(from.harddropdesc_);
  summonminlevel_.MergeFrom(from.summonminlevel_);
  hardsummonminlevel_.MergeFrom(from.hardsummonminlevel_);
  summonminvalue_.MergeFrom(from.summonminvalue_);
  hardsummonminvalue_.MergeFrom(from.hardsummonminvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsBOSS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBOSS::CopyFrom(const PBCorpsBOSS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBOSS::Swap(PBCorpsBOSS* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    bossid_.Swap(&other->bossid_);
    hardbossid_.Swap(&other->hardbossid_);
    valuelimit_.Swap(&other->valuelimit_);
    dropdesc_.Swap(&other->dropdesc_);
    harddropdesc_.Swap(&other->harddropdesc_);
    summonminlevel_.Swap(&other->summonminlevel_);
    hardsummonminlevel_.Swap(&other->hardsummonminlevel_);
    summonminvalue_.Swap(&other->summonminvalue_);
    hardsummonminvalue_.Swap(&other->hardsummonminvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsBOSS::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsBOSS::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsBOSS::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBOSS_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBOffLineExpConfig::kTempIDFieldNumber;
const int PBOffLineExpConfig::kOffLineUnitFieldNumber;
const int PBOffLineExpConfig::kOffLineExpFieldNumber;
const int PBOffLineExpConfig::kOffLineLevelFieldNumber;
const int PBOffLineExpConfig::kExpLimitFieldNumber;
const int PBOffLineExpConfig::kOffLinePercentFieldNumber;
#endif  // !_MSC_VER

PBOffLineExpConfig::PBOffLineExpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBOffLineExpConfig::InitAsDefaultInstance() {}

PBOffLineExpConfig::PBOffLineExpConfig(const PBOffLineExpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBOffLineExpConfig::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  offlineunit_ = 0u;
  offlinelevel_ = 0u;
  offlinepercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBOffLineExpConfig::~PBOffLineExpConfig() {
  SharedDtor();
}

void PBOffLineExpConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBOffLineExpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBOffLineExpConfig_descriptor_;
}

const PBOffLineExpConfig& PBOffLineExpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBOffLineExpConfig* PBOffLineExpConfig::default_instance_ = NULL;

PBOffLineExpConfig* PBOffLineExpConfig::New() const {
  return new PBOffLineExpConfig;
}

void PBOffLineExpConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    offlineunit_ = 0u;
    offlinelevel_ = 0u;
    offlinepercent_ = 0u;
  }
  offlineexp_.Clear();
  explimit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBOffLineExpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OffLineUnit;
        break;
      }
      
      // optional uint32 OffLineUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffLineUnit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offlineunit_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OffLineExp;
        break;
      }
      
      // repeated uint32 OffLineExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffLineExp:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_offlineexp(value);
        if (input->ExpectTag(24)) goto parse_OffLineExp;
        if (input->ExpectTag(32)) goto parse_OffLineLevel;
        break;
      }
      
      // optional uint32 OffLineLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffLineLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offlinelevel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ExpLimit;
        break;
      }
      
      // repeated uint32 ExpLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpLimit:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_explimit(value);
        if (input->ExpectTag(40)) goto parse_ExpLimit;
        if (input->ExpectTag(48)) goto parse_OffLinePercent;
        break;
      }
      
      // optional uint32 OffLinePercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OffLinePercent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offlinepercent_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBOffLineExpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBOffLineExpConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // optional uint32 OffLineUnit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->offlineunit(), output);
  }
  
  // repeated uint32 OffLineExp = 3;
  for (int i = 0; i < this->offlineexp_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->offlineexp(i), output);
  }
  
  // optional uint32 OffLineLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->offlinelevel(), output);
  }
  
  // repeated uint32 ExpLimit = 5;
  for (int i = 0; i < this->explimit_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->explimit(i), output);
  }
  
  // optional uint32 OffLinePercent = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->offlinepercent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBOffLineExpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // optional uint32 OffLineUnit = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->offlineunit(), target);
  }
  
  // repeated uint32 OffLineExp = 3;
  for (int i = 0; i < this->offlineexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->offlineexp(i), target);
  }
  
  // optional uint32 OffLineLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->offlinelevel(), target);
  }
  
  // repeated uint32 ExpLimit = 5;
  for (int i = 0; i < this->explimit_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->explimit(i), target);
  }
  
  // optional uint32 OffLinePercent = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->offlinepercent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBOffLineExpConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 OffLineUnit = 2;
    if (has_offlineunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offlineunit());
    }
    
    // optional uint32 OffLineLevel = 4;
    if (has_offlinelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offlinelevel());
    }
    
    // optional uint32 OffLinePercent = 6;
    if (has_offlinepercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offlinepercent());
    }
    
  }
  // repeated uint32 OffLineExp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->offlineexp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->offlineexp(i));
    }
    total_size += 1 * this->offlineexp_size() + data_size;
  }
  
  // repeated uint32 ExpLimit = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->explimit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->explimit(i));
    }
    total_size += 1 * this->explimit_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBOffLineExpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBOffLineExpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBOffLineExpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBOffLineExpConfig::MergeFrom(const PBOffLineExpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  offlineexp_.MergeFrom(from.offlineexp_);
  explimit_.MergeFrom(from.explimit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(1)) {
      set_offlineunit(from.offlineunit());
    }
    if (from._has_bit(3)) {
      set_offlinelevel(from.offlinelevel());
    }
    if (from._has_bit(5)) {
      set_offlinepercent(from.offlinepercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBOffLineExpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOffLineExpConfig::CopyFrom(const PBOffLineExpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBOffLineExpConfig::Swap(PBOffLineExpConfig* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    std::swap(offlineunit_, other->offlineunit_);
    offlineexp_.Swap(&other->offlineexp_);
    std::swap(offlinelevel_, other->offlinelevel_);
    explimit_.Swap(&other->explimit_);
    std::swap(offlinepercent_, other->offlinepercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBOffLineExpConfig::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBOffLineExpConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBOffLineExpConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBOffLineExpConfig_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepeFameTable::kTempIDFieldNumber;
const int PBRepeFameTable::kFameTypeFieldNumber;
const int PBRepeFameTable::kFameValueFieldNumber;
const int PBRepeFameTable::kItemValueFieldNumber;
const int PBRepeFameTable::kCombatItemIDFieldNumber;
const int PBRepeFameTable::kRepeItemIDFieldNumber;
const int PBRepeFameTable::kCommonItemIDFieldNumber;
const int PBRepeFameTable::kCombatLimitFieldNumber;
const int PBRepeFameTable::kRepeLimitFieldNumber;
const int PBRepeFameTable::kCommonLimitFieldNumber;
#endif  // !_MSC_VER

PBRepeFameTable::PBRepeFameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepeFameTable::InitAsDefaultInstance() {}

PBRepeFameTable::PBRepeFameTable(const PBRepeFameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepeFameTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  combatitemid_ = 0u;
  repeitemid_ = 0u;
  commonitemid_ = 0u;
  combatlimit_ = 0u;
  repelimit_ = 0u;
  commonlimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepeFameTable::~PBRepeFameTable() {
  SharedDtor();
}

void PBRepeFameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepeFameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepeFameTable_descriptor_;
}

const PBRepeFameTable& PBRepeFameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBRepeFameTable* PBRepeFameTable::default_instance_ = NULL;

PBRepeFameTable* PBRepeFameTable::New() const {
  return new PBRepeFameTable;
}

void PBRepeFameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
    combatitemid_ = 0u;
    repeitemid_ = 0u;
    commonitemid_ = 0u;
    combatlimit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    repelimit_ = 0u;
    commonlimit_ = 0u;
  }
  fametype_.Clear();
  famevalue_.Clear();
  itemvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepeFameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FameType;
        break;
      }
      
      // repeated uint32 FameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FameType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fametype(value);
        if (input->ExpectTag(16)) goto parse_FameType;
        if (input->ExpectTag(24)) goto parse_FameValue;
        break;
      }
      
      // repeated uint32 FameValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FameValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_famevalue(value);
        if (input->ExpectTag(24)) goto parse_FameValue;
        if (input->ExpectTag(32)) goto parse_ItemValue;
        break;
      }
      
      // repeated uint32 ItemValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemvalue(value);
        if (input->ExpectTag(32)) goto parse_ItemValue;
        if (input->ExpectTag(40)) goto parse_CombatItemID;
        break;
      }
      
      // optional uint32 CombatItemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CombatItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &combatitemid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RepeItemID;
        break;
      }
      
      // optional uint32 RepeItemID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeitemid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CommonItemID;
        break;
      }
      
      // optional uint32 CommonItemID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commonitemid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CombatLimit;
        break;
      }
      
      // optional uint32 CombatLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CombatLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &combatlimit_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_RepeLimit;
        break;
      }
      
      // optional uint32 RepeLimit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repelimit_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CommonLimit;
        break;
      }
      
      // optional uint32 CommonLimit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commonlimit_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepeFameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepeFameTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 FameType = 2;
  for (int i = 0; i < this->fametype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->fametype(i), output);
  }
  
  // repeated uint32 FameValue = 3;
  for (int i = 0; i < this->famevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->famevalue(i), output);
  }
  
  // repeated uint32 ItemValue = 4;
  for (int i = 0; i < this->itemvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->itemvalue(i), output);
  }
  
  // optional uint32 CombatItemID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->combatitemid(), output);
  }
  
  // optional uint32 RepeItemID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->repeitemid(), output);
  }
  
  // optional uint32 CommonItemID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->commonitemid(), output);
  }
  
  // optional uint32 CombatLimit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->combatlimit(), output);
  }
  
  // optional uint32 RepeLimit = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->repelimit(), output);
  }
  
  // optional uint32 CommonLimit = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->commonlimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepeFameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 FameType = 2;
  for (int i = 0; i < this->fametype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->fametype(i), target);
  }
  
  // repeated uint32 FameValue = 3;
  for (int i = 0; i < this->famevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->famevalue(i), target);
  }
  
  // repeated uint32 ItemValue = 4;
  for (int i = 0; i < this->itemvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->itemvalue(i), target);
  }
  
  // optional uint32 CombatItemID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->combatitemid(), target);
  }
  
  // optional uint32 RepeItemID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->repeitemid(), target);
  }
  
  // optional uint32 CommonItemID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->commonitemid(), target);
  }
  
  // optional uint32 CombatLimit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->combatlimit(), target);
  }
  
  // optional uint32 RepeLimit = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->repelimit(), target);
  }
  
  // optional uint32 CommonLimit = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->commonlimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepeFameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
    // optional uint32 CombatItemID = 5;
    if (has_combatitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->combatitemid());
    }
    
    // optional uint32 RepeItemID = 6;
    if (has_repeitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeitemid());
    }
    
    // optional uint32 CommonItemID = 7;
    if (has_commonitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commonitemid());
    }
    
    // optional uint32 CombatLimit = 8;
    if (has_combatlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->combatlimit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 RepeLimit = 9;
    if (has_repelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repelimit());
    }
    
    // optional uint32 CommonLimit = 10;
    if (has_commonlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commonlimit());
    }
    
  }
  // repeated uint32 FameType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fametype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fametype(i));
    }
    total_size += 1 * this->fametype_size() + data_size;
  }
  
  // repeated uint32 FameValue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->famevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->famevalue(i));
    }
    total_size += 1 * this->famevalue_size() + data_size;
  }
  
  // repeated uint32 ItemValue = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemvalue(i));
    }
    total_size += 1 * this->itemvalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepeFameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepeFameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepeFameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepeFameTable::MergeFrom(const PBRepeFameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  fametype_.MergeFrom(from.fametype_);
  famevalue_.MergeFrom(from.famevalue_);
  itemvalue_.MergeFrom(from.itemvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
    if (from._has_bit(4)) {
      set_combatitemid(from.combatitemid());
    }
    if (from._has_bit(5)) {
      set_repeitemid(from.repeitemid());
    }
    if (from._has_bit(6)) {
      set_commonitemid(from.commonitemid());
    }
    if (from._has_bit(7)) {
      set_combatlimit(from.combatlimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_repelimit(from.repelimit());
    }
    if (from._has_bit(9)) {
      set_commonlimit(from.commonlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepeFameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepeFameTable::CopyFrom(const PBRepeFameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepeFameTable::Swap(PBRepeFameTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    fametype_.Swap(&other->fametype_);
    famevalue_.Swap(&other->famevalue_);
    itemvalue_.Swap(&other->itemvalue_);
    std::swap(combatitemid_, other->combatitemid_);
    std::swap(repeitemid_, other->repeitemid_);
    std::swap(commonitemid_, other->commonitemid_);
    std::swap(combatlimit_, other->combatlimit_);
    std::swap(repelimit_, other->repelimit_);
    std::swap(commonlimit_, other->commonlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepeFameTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepeFameTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepeFameTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepeFameTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCastingSpiritTable::kTempIDFieldNumber;
const int PBCastingSpiritTable::kOpenStatusFieldNumber;
const int PBCastingSpiritTable::kPositionNameFieldNumber;
const int PBCastingSpiritTable::kPositionDescFieldNumber;
const int PBCastingSpiritTable::kSpiritTypeNameFieldNumber;
const int PBCastingSpiritTable::kSpiritTypeDescFieldNumber;
const int PBCastingSpiritTable::kSpiritItemFieldNumber;
const int PBCastingSpiritTable::kSpiritItemNumFieldNumber;
const int PBCastingSpiritTable::kUpgradeMoneyFieldNumber;
const int PBCastingSpiritTable::kDowngradeMoneyFieldNumber;
const int PBCastingSpiritTable::kUpgradeItemFieldNumber;
const int PBCastingSpiritTable::kDowngradeItemFieldNumber;
#endif  // !_MSC_VER

PBCastingSpiritTable::PBCastingSpiritTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCastingSpiritTable::InitAsDefaultInstance() {}

PBCastingSpiritTable::PBCastingSpiritTable(const PBCastingSpiritTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCastingSpiritTable::SharedCtor() {
  _cached_size_ = 0;
  tempid_ = 0u;
  upgradeitem_ = 0u;
  downgradeitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCastingSpiritTable::~PBCastingSpiritTable() {
  SharedDtor();
}

void PBCastingSpiritTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCastingSpiritTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCastingSpiritTable_descriptor_;
}

const PBCastingSpiritTable& PBCastingSpiritTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBCastingSpiritTable* PBCastingSpiritTable::default_instance_ = NULL;

PBCastingSpiritTable* PBCastingSpiritTable::New() const {
  return new PBCastingSpiritTable;
}

void PBCastingSpiritTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tempid_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    upgradeitem_ = 0u;
    downgradeitem_ = 0u;
  }
  openstatus_.Clear();
  positionname_.Clear();
  positiondesc_.Clear();
  spirittypename_.Clear();
  spirittypedesc_.Clear();
  spirititem_.Clear();
  spirititemnum_.Clear();
  upgrademoney_.Clear();
  downgrademoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCastingSpiritTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TempID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tempid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OpenStatus;
        break;
      }
      
      // repeated uint32 OpenStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OpenStatus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_openstatus(value);
        if (input->ExpectTag(16)) goto parse_OpenStatus;
        if (input->ExpectTag(26)) goto parse_PositionName;
        break;
      }
      
      // repeated string PositionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PositionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_positionname()));
        if (input->ExpectTag(26)) goto parse_PositionName;
        if (input->ExpectTag(34)) goto parse_PositionDesc;
        break;
      }
      
      // repeated string PositionDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PositionDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_positiondesc()));
        if (input->ExpectTag(34)) goto parse_PositionDesc;
        if (input->ExpectTag(42)) goto parse_SpiritTypeName;
        break;
      }
      
      // repeated string SpiritTypeName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpiritTypeName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_spirittypename()));
        if (input->ExpectTag(42)) goto parse_SpiritTypeName;
        if (input->ExpectTag(50)) goto parse_SpiritTypeDesc;
        break;
      }
      
      // repeated string SpiritTypeDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpiritTypeDesc:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_spirittypedesc()));
        if (input->ExpectTag(50)) goto parse_SpiritTypeDesc;
        if (input->ExpectTag(56)) goto parse_SpiritItem;
        break;
      }
      
      // repeated uint32 SpiritItem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpiritItem:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_spirititem(value);
        if (input->ExpectTag(56)) goto parse_SpiritItem;
        if (input->ExpectTag(64)) goto parse_SpiritItemNum;
        break;
      }
      
      // repeated uint32 SpiritItemNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpiritItemNum:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_spirititemnum(value);
        if (input->ExpectTag(64)) goto parse_SpiritItemNum;
        if (input->ExpectTag(72)) goto parse_UpgradeMoney;
        break;
      }
      
      // repeated uint32 UpgradeMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgradeMoney:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_upgrademoney(value);
        if (input->ExpectTag(72)) goto parse_UpgradeMoney;
        if (input->ExpectTag(80)) goto parse_DowngradeMoney;
        break;
      }
      
      // repeated uint32 DowngradeMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DowngradeMoney:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_downgrademoney(value);
        if (input->ExpectTag(80)) goto parse_DowngradeMoney;
        if (input->ExpectTag(88)) goto parse_UpgradeItem;
        break;
      }
      
      // optional uint32 UpgradeItem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpgradeItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upgradeitem_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_DowngradeItem;
        break;
      }
      
      // optional uint32 DowngradeItem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DowngradeItem:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &downgradeitem_));
        _set_bit(11);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCastingSpiritTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCastingSpiritTable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tempid(), output);
  }
  
  // repeated uint32 OpenStatus = 2;
  for (int i = 0; i < this->openstatus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->openstatus(i), output);
  }
  
  // repeated string PositionName = 3;
  for (int i = 0; i < this->positionname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->positionname(i), output);
  }
  
  // repeated string PositionDesc = 4;
  for (int i = 0; i < this->positiondesc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->positiondesc(i), output);
  }
  
  // repeated string SpiritTypeName = 5;
  for (int i = 0; i < this->spirittypename_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->spirittypename(i), output);
  }
  
  // repeated string SpiritTypeDesc = 6;
  for (int i = 0; i < this->spirittypedesc_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->spirittypedesc(i), output);
  }
  
  // repeated uint32 SpiritItem = 7;
  for (int i = 0; i < this->spirititem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->spirititem(i), output);
  }
  
  // repeated uint32 SpiritItemNum = 8;
  for (int i = 0; i < this->spirititemnum_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->spirititemnum(i), output);
  }
  
  // repeated uint32 UpgradeMoney = 9;
  for (int i = 0; i < this->upgrademoney_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->upgrademoney(i), output);
  }
  
  // repeated uint32 DowngradeMoney = 10;
  for (int i = 0; i < this->downgrademoney_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->downgrademoney(i), output);
  }
  
  // optional uint32 UpgradeItem = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->upgradeitem(), output);
  }
  
  // optional uint32 DowngradeItem = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->downgradeitem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCastingSpiritTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TempID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tempid(), target);
  }
  
  // repeated uint32 OpenStatus = 2;
  for (int i = 0; i < this->openstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->openstatus(i), target);
  }
  
  // repeated string PositionName = 3;
  for (int i = 0; i < this->positionname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->positionname(i), target);
  }
  
  // repeated string PositionDesc = 4;
  for (int i = 0; i < this->positiondesc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->positiondesc(i), target);
  }
  
  // repeated string SpiritTypeName = 5;
  for (int i = 0; i < this->spirittypename_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->spirittypename(i), target);
  }
  
  // repeated string SpiritTypeDesc = 6;
  for (int i = 0; i < this->spirittypedesc_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->spirittypedesc(i), target);
  }
  
  // repeated uint32 SpiritItem = 7;
  for (int i = 0; i < this->spirititem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->spirititem(i), target);
  }
  
  // repeated uint32 SpiritItemNum = 8;
  for (int i = 0; i < this->spirititemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->spirititemnum(i), target);
  }
  
  // repeated uint32 UpgradeMoney = 9;
  for (int i = 0; i < this->upgrademoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->upgrademoney(i), target);
  }
  
  // repeated uint32 DowngradeMoney = 10;
  for (int i = 0; i < this->downgrademoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->downgrademoney(i), target);
  }
  
  // optional uint32 UpgradeItem = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->upgradeitem(), target);
  }
  
  // optional uint32 DowngradeItem = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->downgradeitem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCastingSpiritTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TempID = 1;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tempid());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 UpgradeItem = 11;
    if (has_upgradeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upgradeitem());
    }
    
    // optional uint32 DowngradeItem = 12;
    if (has_downgradeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->downgradeitem());
    }
    
  }
  // repeated uint32 OpenStatus = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->openstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->openstatus(i));
    }
    total_size += 1 * this->openstatus_size() + data_size;
  }
  
  // repeated string PositionName = 3;
  total_size += 1 * this->positionname_size();
  for (int i = 0; i < this->positionname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->positionname(i));
  }
  
  // repeated string PositionDesc = 4;
  total_size += 1 * this->positiondesc_size();
  for (int i = 0; i < this->positiondesc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->positiondesc(i));
  }
  
  // repeated string SpiritTypeName = 5;
  total_size += 1 * this->spirittypename_size();
  for (int i = 0; i < this->spirittypename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->spirittypename(i));
  }
  
  // repeated string SpiritTypeDesc = 6;
  total_size += 1 * this->spirittypedesc_size();
  for (int i = 0; i < this->spirittypedesc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->spirittypedesc(i));
  }
  
  // repeated uint32 SpiritItem = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->spirititem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->spirititem(i));
    }
    total_size += 1 * this->spirititem_size() + data_size;
  }
  
  // repeated uint32 SpiritItemNum = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->spirititemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->spirititemnum(i));
    }
    total_size += 1 * this->spirititemnum_size() + data_size;
  }
  
  // repeated uint32 UpgradeMoney = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgrademoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->upgrademoney(i));
    }
    total_size += 1 * this->upgrademoney_size() + data_size;
  }
  
  // repeated uint32 DowngradeMoney = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->downgrademoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->downgrademoney(i));
    }
    total_size += 1 * this->downgrademoney_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCastingSpiritTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCastingSpiritTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCastingSpiritTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCastingSpiritTable::MergeFrom(const PBCastingSpiritTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  openstatus_.MergeFrom(from.openstatus_);
  positionname_.MergeFrom(from.positionname_);
  positiondesc_.MergeFrom(from.positiondesc_);
  spirittypename_.MergeFrom(from.spirittypename_);
  spirittypedesc_.MergeFrom(from.spirittypedesc_);
  spirititem_.MergeFrom(from.spirititem_);
  spirititemnum_.MergeFrom(from.spirititemnum_);
  upgrademoney_.MergeFrom(from.upgrademoney_);
  downgrademoney_.MergeFrom(from.downgrademoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tempid(from.tempid());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from._has_bit(10)) {
      set_upgradeitem(from.upgradeitem());
    }
    if (from._has_bit(11)) {
      set_downgradeitem(from.downgradeitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCastingSpiritTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCastingSpiritTable::CopyFrom(const PBCastingSpiritTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCastingSpiritTable::Swap(PBCastingSpiritTable* other) {
  if (other != this) {
    std::swap(tempid_, other->tempid_);
    openstatus_.Swap(&other->openstatus_);
    positionname_.Swap(&other->positionname_);
    positiondesc_.Swap(&other->positiondesc_);
    spirittypename_.Swap(&other->spirittypename_);
    spirittypedesc_.Swap(&other->spirittypedesc_);
    spirititem_.Swap(&other->spirititem_);
    spirititemnum_.Swap(&other->spirititemnum_);
    upgrademoney_.Swap(&other->upgrademoney_);
    downgrademoney_.Swap(&other->downgrademoney_);
    std::swap(upgradeitem_, other->upgradeitem_);
    std::swap(downgradeitem_, other->downgradeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCastingSpiritTable::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCastingSpiritTable::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCastingSpiritTable::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCastingSpiritTable_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSpiritItem::kBaseInfoFieldNumber;
const int PBSpiritItem::kGradeFieldNumber;
const int PBSpiritItem::kColorGradeFieldNumber;
const int PBSpiritItem::kSpiritTypeFieldNumber;
const int PBSpiritItem::kLevelLimitFieldNumber;
const int PBSpiritItem::kEffectPointFieldNumber;
#endif  // !_MSC_VER

PBSpiritItem::PBSpiritItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSpiritItem::InitAsDefaultInstance() {  baseinfo_ = const_cast< ::PBItemBase*>(&::PBItemBase::default_instance());
}

PBSpiritItem::PBSpiritItem(const PBSpiritItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSpiritItem::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  grade_ = 0u;
  colorgrade_ = 0u;
  spirittype_ = 0u;
  levellimit_ = 0u;
  effectpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSpiritItem::~PBSpiritItem() {
  SharedDtor();
}

void PBSpiritItem::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

const ::google::protobuf::Descriptor* PBSpiritItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritItem_descriptor_;
}

const PBSpiritItem& PBSpiritItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_5fpb_2ehxx();  return *default_instance_;
}

PBSpiritItem* PBSpiritItem::default_instance_ = NULL;

PBSpiritItem* PBSpiritItem::New() const {
  return new PBSpiritItem;
}

void PBSpiritItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (baseinfo_ != NULL) baseinfo_->::PBItemBase::Clear();
    }
    grade_ = 0u;
    colorgrade_ = 0u;
    spirittype_ = 0u;
    levellimit_ = 0u;
    effectpoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSpiritItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBItemBase BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baseinfo()));
        if (input->ExpectTag(16)) goto parse_Grade;
        break;
      }
      
      // optional uint32 Grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Grade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &grade_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ColorGrade;
        break;
      }
      
      // optional uint32 ColorGrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ColorGrade:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &colorgrade_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SpiritType;
        break;
      }
      
      // optional uint32 SpiritType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpiritType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &spirittype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LevelLimit;
        break;
      }
      
      // optional uint32 LevelLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levellimit_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_EffectPoint;
        break;
      }
      
      // optional uint32 EffectPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EffectPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &effectpoint_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSpiritItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSpiritItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->baseinfo(), output);
  }
  
  // optional uint32 Grade = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->grade(), output);
  }
  
  // optional uint32 ColorGrade = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->colorgrade(), output);
  }
  
  // optional uint32 SpiritType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->spirittype(), output);
  }
  
  // optional uint32 LevelLimit = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->levellimit(), output);
  }
  
  // optional uint32 EffectPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->effectpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSpiritItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItemBase BaseInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->baseinfo(), target);
  }
  
  // optional uint32 Grade = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->grade(), target);
  }
  
  // optional uint32 ColorGrade = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->colorgrade(), target);
  }
  
  // optional uint32 SpiritType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->spirittype(), target);
  }
  
  // optional uint32 LevelLimit = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->levellimit(), target);
  }
  
  // optional uint32 EffectPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->effectpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSpiritItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItemBase BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional uint32 Grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->grade());
    }
    
    // optional uint32 ColorGrade = 3;
    if (has_colorgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->colorgrade());
    }
    
    // optional uint32 SpiritType = 4;
    if (has_spirittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->spirittype());
    }
    
    // optional uint32 LevelLimit = 5;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levellimit());
    }
    
    // optional uint32 EffectPoint = 6;
    if (has_effectpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->effectpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSpiritItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSpiritItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSpiritItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSpiritItem::MergeFrom(const PBSpiritItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_baseinfo()->::PBItemBase::MergeFrom(from.baseinfo());
    }
    if (from._has_bit(1)) {
      set_grade(from.grade());
    }
    if (from._has_bit(2)) {
      set_colorgrade(from.colorgrade());
    }
    if (from._has_bit(3)) {
      set_spirittype(from.spirittype());
    }
    if (from._has_bit(4)) {
      set_levellimit(from.levellimit());
    }
    if (from._has_bit(5)) {
      set_effectpoint(from.effectpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSpiritItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritItem::CopyFrom(const PBSpiritItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritItem::Swap(PBSpiritItem* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(grade_, other->grade_);
    std::swap(colorgrade_, other->colorgrade_);
    std::swap(spirittype_, other->spirittype_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(effectpoint_, other->effectpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSpiritItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSpiritItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSpiritItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritItem_reflection_;
}
