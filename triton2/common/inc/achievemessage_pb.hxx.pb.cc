// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "achievemessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageAchieveReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAchieveBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAchieveBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveGetSingleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveGetSingleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveGetSingleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveGetSingleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveGetAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveGetAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveGetAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveGetAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAchieveFinishNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAchieveFinishNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAchieveParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAchieveParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBAchieveBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBAchieveBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAllHonorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAllHonorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHonorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHonorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetAllHonorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetAllHonorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageHonorFinishNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHonorFinishNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetStageBonusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetStageBonusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetStageBonusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetStageBonusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AchieveMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_achievemessage_5fpb_2ehxx() {
  protobuf_AddDesc_achievemessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achievemessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageAchieveReportRequest_descriptor_ = file->message_type(0);
  static const int CMessageAchieveReportRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportRequest, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportRequest, value_),
  };
  CMessageAchieveReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveReportRequest_descriptor_,
      CMessageAchieveReportRequest::default_instance_,
      CMessageAchieveReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveReportRequest));
  CMessageAchieveReportResponse_descriptor_ = file->message_type(1);
  static const int CMessageAchieveReportResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportResponse, rtncode_),
  };
  CMessageAchieveReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveReportResponse_descriptor_,
      CMessageAchieveReportResponse::default_instance_,
      CMessageAchieveReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveReportResponse));
  PBAchieve_descriptor_ = file->message_type(2);
  static const int PBAchieve_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, roottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, param_),
  };
  PBAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAchieve_descriptor_,
      PBAchieve::default_instance_,
      PBAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAchieve));
  PBAchieveBuffer_descriptor_ = file->message_type(3);
  static const int PBAchieveBuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveBuffer, achieve_),
  };
  PBAchieveBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAchieveBuffer_descriptor_,
      PBAchieveBuffer::default_instance_,
      PBAchieveBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAchieveBuffer));
  CMessageAchieveGetSingleRequest_descriptor_ = file->message_type(4);
  static const int CMessageAchieveGetSingleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleRequest, achieveid_),
  };
  CMessageAchieveGetSingleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveGetSingleRequest_descriptor_,
      CMessageAchieveGetSingleRequest::default_instance_,
      CMessageAchieveGetSingleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveGetSingleRequest));
  CMessageAchieveGetSingleResponse_descriptor_ = file->message_type(5);
  static const int CMessageAchieveGetSingleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleResponse, achieve_),
  };
  CMessageAchieveGetSingleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveGetSingleResponse_descriptor_,
      CMessageAchieveGetSingleResponse::default_instance_,
      CMessageAchieveGetSingleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetSingleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveGetSingleResponse));
  CMessageAchieveGetAllRequest_descriptor_ = file->message_type(6);
  static const int CMessageAchieveGetAllRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllRequest, isopen_),
  };
  CMessageAchieveGetAllRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveGetAllRequest_descriptor_,
      CMessageAchieveGetAllRequest::default_instance_,
      CMessageAchieveGetAllRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveGetAllRequest));
  CMessageAchieveGetAllResponse_descriptor_ = file->message_type(7);
  static const int CMessageAchieveGetAllResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, achievebuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, isopen_),
  };
  CMessageAchieveGetAllResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveGetAllResponse_descriptor_,
      CMessageAchieveGetAllResponse::default_instance_,
      CMessageAchieveGetAllResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveGetAllResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveGetAllResponse));
  CMessageAchieveFinishNotice_descriptor_ = file->message_type(8);
  static const int CMessageAchieveFinishNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, name_),
  };
  CMessageAchieveFinishNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAchieveFinishNotice_descriptor_,
      CMessageAchieveFinishNotice::default_instance_,
      CMessageAchieveFinishNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAchieveFinishNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAchieveFinishNotice));
  PBAchieveParam_descriptor_ = file->message_type(9);
  static const int PBAchieveParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveParam, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveParam, value_),
  };
  PBAchieveParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAchieveParam_descriptor_,
      PBAchieveParam::default_instance_,
      PBAchieveParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAchieveParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAchieveParam));
  PBDBAchieve_descriptor_ = file->message_type(10);
  static const int PBDBAchieve_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, achieveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, roottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, param_),
  };
  PBDBAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBAchieve_descriptor_,
      PBDBAchieve::default_instance_,
      PBDBAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBAchieve));
  PBDBAchieveBuffer_descriptor_ = file->message_type(11);
  static const int PBDBAchieveBuffer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, honordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, stage_),
  };
  PBDBAchieveBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBAchieveBuffer_descriptor_,
      PBDBAchieveBuffer::default_instance_,
      PBDBAchieveBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAchieveBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBAchieveBuffer));
  CMessageGetAllHonorRequest_descriptor_ = file->message_type(12);
  static const int CMessageGetAllHonorRequest_offsets_[1] = {
  };
  CMessageGetAllHonorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAllHonorRequest_descriptor_,
      CMessageGetAllHonorRequest::default_instance_,
      CMessageGetAllHonorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllHonorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllHonorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAllHonorRequest));
  PBHonorData_descriptor_ = file->message_type(13);
  static const int PBHonorData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorData, param_),
  };
  PBHonorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHonorData_descriptor_,
      PBHonorData::default_instance_,
      PBHonorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHonorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHonorData));
  CMessageGetAllHonorResponse_descriptor_ = file->message_type(14);
  static const int CMessageGetAllHonorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllHonorResponse, honordata_),
  };
  CMessageGetAllHonorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetAllHonorResponse_descriptor_,
      CMessageGetAllHonorResponse::default_instance_,
      CMessageGetAllHonorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllHonorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetAllHonorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetAllHonorResponse));
  CMessageHonorFinishNotice_descriptor_ = file->message_type(15);
  static const int CMessageHonorFinishNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHonorFinishNotice, honordata_),
  };
  CMessageHonorFinishNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHonorFinishNotice_descriptor_,
      CMessageHonorFinishNotice::default_instance_,
      CMessageHonorFinishNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHonorFinishNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHonorFinishNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHonorFinishNotice));
  CMessageGetStageBonusRequest_descriptor_ = file->message_type(16);
  static const int CMessageGetStageBonusRequest_offsets_[1] = {
  };
  CMessageGetStageBonusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetStageBonusRequest_descriptor_,
      CMessageGetStageBonusRequest::default_instance_,
      CMessageGetStageBonusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetStageBonusRequest));
  CMessageGetStageBonusResponse_descriptor_ = file->message_type(17);
  static const int CMessageGetStageBonusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusResponse, stage_),
  };
  CMessageGetStageBonusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetStageBonusResponse_descriptor_,
      CMessageGetStageBonusResponse::default_instance_,
      CMessageGetStageBonusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetStageBonusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetStageBonusResponse));
  AchieveMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achievemessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveReportRequest_descriptor_, &CMessageAchieveReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveReportResponse_descriptor_, &CMessageAchieveReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAchieve_descriptor_, &PBAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAchieveBuffer_descriptor_, &PBAchieveBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveGetSingleRequest_descriptor_, &CMessageAchieveGetSingleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveGetSingleResponse_descriptor_, &CMessageAchieveGetSingleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveGetAllRequest_descriptor_, &CMessageAchieveGetAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveGetAllResponse_descriptor_, &CMessageAchieveGetAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAchieveFinishNotice_descriptor_, &CMessageAchieveFinishNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAchieveParam_descriptor_, &PBAchieveParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBAchieve_descriptor_, &PBDBAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBAchieveBuffer_descriptor_, &PBDBAchieveBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAllHonorRequest_descriptor_, &CMessageGetAllHonorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHonorData_descriptor_, &PBHonorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetAllHonorResponse_descriptor_, &CMessageGetAllHonorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHonorFinishNotice_descriptor_, &CMessageHonorFinishNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetStageBonusRequest_descriptor_, &CMessageGetStageBonusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetStageBonusResponse_descriptor_, &CMessageGetStageBonusResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achievemessage_5fpb_2ehxx() {
  delete CMessageAchieveReportRequest::default_instance_;
  delete CMessageAchieveReportRequest_reflection_;
  delete CMessageAchieveReportResponse::default_instance_;
  delete CMessageAchieveReportResponse_reflection_;
  delete PBAchieve::default_instance_;
  delete PBAchieve_reflection_;
  delete PBAchieveBuffer::default_instance_;
  delete PBAchieveBuffer_reflection_;
  delete CMessageAchieveGetSingleRequest::default_instance_;
  delete CMessageAchieveGetSingleRequest_reflection_;
  delete CMessageAchieveGetSingleResponse::default_instance_;
  delete CMessageAchieveGetSingleResponse_reflection_;
  delete CMessageAchieveGetAllRequest::default_instance_;
  delete CMessageAchieveGetAllRequest_reflection_;
  delete CMessageAchieveGetAllResponse::default_instance_;
  delete CMessageAchieveGetAllResponse_reflection_;
  delete CMessageAchieveFinishNotice::default_instance_;
  delete CMessageAchieveFinishNotice_reflection_;
  delete PBAchieveParam::default_instance_;
  delete PBAchieveParam_reflection_;
  delete PBDBAchieve::default_instance_;
  delete PBDBAchieve_reflection_;
  delete PBDBAchieveBuffer::default_instance_;
  delete PBDBAchieveBuffer_reflection_;
  delete CMessageGetAllHonorRequest::default_instance_;
  delete CMessageGetAllHonorRequest_reflection_;
  delete PBHonorData::default_instance_;
  delete PBHonorData_reflection_;
  delete CMessageGetAllHonorResponse::default_instance_;
  delete CMessageGetAllHonorResponse_reflection_;
  delete CMessageHonorFinishNotice::default_instance_;
  delete CMessageHonorFinishNotice_reflection_;
  delete CMessageGetStageBonusRequest::default_instance_;
  delete CMessageGetStageBonusRequest_reflection_;
  delete CMessageGetStageBonusResponse::default_instance_;
  delete CMessageGetStageBonusResponse_reflection_;
}

void protobuf_AddDesc_achievemessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025achievemessage_pb.hxx\"M\n\034CMessageAchie"
    "veReportRequest\022\021\n\tAchieveID\030\001 \001(\r\022\013\n\003Ke"
    "y\030\002 \001(\r\022\r\n\005Value\030\003 \001(\r\"0\n\035CMessageAchiev"
    "eReportResponse\022\017\n\007RtnCode\030\001 \001(\r\"n\n\tPBAc"
    "hieve\022\021\n\tAchieveID\030\001 \001(\r\022\014\n\004Time\030\002 \001(\r\022\016"
    "\n\006Status\030\003 \001(\r\022\020\n\010RootType\030\004 \001(\r\022\036\n\005Para"
    "m\030\005 \003(\0132\017.PBAchieveParam\".\n\017PBAchieveBuf"
    "fer\022\033\n\007Achieve\030\001 \003(\0132\n.PBAchieve\"4\n\037CMes"
    "sageAchieveGetSingleRequest\022\021\n\tAchieveID"
    "\030\001 \001(\r\"?\n CMessageAchieveGetSingleRespon"
    "se\022\033\n\007Achieve\030\001 \001(\0132\n.PBAchieve\".\n\034CMess"
    "ageAchieveGetAllRequest\022\016\n\006IsOpen\030\001 \001(\r\""
    "{\n\035CMessageAchieveGetAllResponse\022\022\n\nTota"
    "lPoint\030\001 \001(\r\022\'\n\rAchieveBuffer\030\002 \001(\0132\020.PB"
    "AchieveBuffer\022\r\n\005Stage\030\003 \001(\r\022\016\n\006IsOpen\030\004"
    " \001(\r\"l\n\033CMessageAchieveFinishNotice\022\033\n\007A"
    "chieve\030\001 \001(\0132\n.PBAchieve\022\022\n\nTotalPoint\030\002"
    " \001(\r\022\016\n\006CharID\030\003 \001(\r\022\014\n\004Name\030\004 \001(\t\",\n\016PB"
    "AchieveParam\022\013\n\003Key\030\001 \001(\r\022\r\n\005Value\030\002 \001(\r"
    "\"p\n\013PBDBAchieve\022\021\n\tAchieveID\030\001 \001(\r\022\014\n\004Ti"
    "me\030\002 \001(\r\022\016\n\006Status\030\003 \001(\r\022\020\n\010RootType\030\004 \001"
    "(\r\022\036\n\005Param\030\005 \003(\0132\017.PBAchieveParam\"\206\001\n\021P"
    "BDBAchieveBuffer\022\035\n\007Achieve\030\001 \003(\0132\014.PBDB"
    "Achieve\022\037\n\tHonorData\030\002 \003(\0132\014.PBHonorData"
    "\022\016\n\006CharID\030\003 \001(\r\022\022\n\nTotalPoint\030\004 \001(\r\022\r\n\005"
    "Stage\030\005 \001(\r\"\034\n\032CMessageGetAllHonorReques"
    "t\"9\n\013PBHonorData\022\r\n\005MapID\030\001 \001(\r\022\014\n\004Time\030"
    "\002 \001(\r\022\r\n\005Param\030\003 \001(\r\">\n\033CMessageGetAllHo"
    "norResponse\022\037\n\tHonorData\030\001 \003(\0132\014.PBHonor"
    "Data\"<\n\031CMessageHonorFinishNotice\022\037\n\tHon"
    "orData\030\001 \001(\0132\014.PBHonorData\"\036\n\034CMessageGe"
    "tStageBonusRequest\">\n\035CMessageGetStageBo"
    "nusResponse\022\016\n\006Result\030\001 \001(\r\022\r\n\005Stage\030\002 \001"
    "(\r*\304\003\n\020AchieveMessageID\022\"\n\034ID_C2S_REQUES"
    "T_REPORTACHIEVE\020\201\240\001\022#\n\035ID_S2C_RESPONSE_R"
    "EPORTACHIEVE\020\202\240\001\022%\n\037ID_C2S_REQUEST_GETSI"
    "NGLEACHIEVE\020\203\240\001\022&\n ID_S2C_RESPONSE_GETSI"
    "NGLEACHIEVE\020\204\240\001\022\"\n\034ID_C2S_REQUEST_GETALL"
    "ACHIEVE\020\205\240\001\022#\n\035ID_S2C_RESPONSE_GETALLACH"
    "IEVE\020\206\240\001\022!\n\033ID_S2C_NOTIFY_ACHIEVENOTICE\020"
    "\207\240\001\022 \n\032ID_C2S_REQUEST_GETALLHONOR\020\210\240\001\022!\n"
    "\033ID_S2C_RESPONSE_GETALLHONOR\020\211\240\001\022\036\n\030ID_S"
    "2C_NOTIFY_HONORFINSH\020\212\240\001\022\"\n\034ID_C2S_REQUE"
    "ST_GETSTAGEBONUS\020\213\240\001\022#\n\035ID_S2C_RESPONSE_"
    "GETSTAGEBONUS\020\214\240\001B\002H\001", 1781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achievemessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageAchieveReportRequest::default_instance_ = new CMessageAchieveReportRequest();
  CMessageAchieveReportResponse::default_instance_ = new CMessageAchieveReportResponse();
  PBAchieve::default_instance_ = new PBAchieve();
  PBAchieveBuffer::default_instance_ = new PBAchieveBuffer();
  CMessageAchieveGetSingleRequest::default_instance_ = new CMessageAchieveGetSingleRequest();
  CMessageAchieveGetSingleResponse::default_instance_ = new CMessageAchieveGetSingleResponse();
  CMessageAchieveGetAllRequest::default_instance_ = new CMessageAchieveGetAllRequest();
  CMessageAchieveGetAllResponse::default_instance_ = new CMessageAchieveGetAllResponse();
  CMessageAchieveFinishNotice::default_instance_ = new CMessageAchieveFinishNotice();
  PBAchieveParam::default_instance_ = new PBAchieveParam();
  PBDBAchieve::default_instance_ = new PBDBAchieve();
  PBDBAchieveBuffer::default_instance_ = new PBDBAchieveBuffer();
  CMessageGetAllHonorRequest::default_instance_ = new CMessageGetAllHonorRequest();
  PBHonorData::default_instance_ = new PBHonorData();
  CMessageGetAllHonorResponse::default_instance_ = new CMessageGetAllHonorResponse();
  CMessageHonorFinishNotice::default_instance_ = new CMessageHonorFinishNotice();
  CMessageGetStageBonusRequest::default_instance_ = new CMessageGetStageBonusRequest();
  CMessageGetStageBonusResponse::default_instance_ = new CMessageGetStageBonusResponse();
  CMessageAchieveReportRequest::default_instance_->InitAsDefaultInstance();
  CMessageAchieveReportResponse::default_instance_->InitAsDefaultInstance();
  PBAchieve::default_instance_->InitAsDefaultInstance();
  PBAchieveBuffer::default_instance_->InitAsDefaultInstance();
  CMessageAchieveGetSingleRequest::default_instance_->InitAsDefaultInstance();
  CMessageAchieveGetSingleResponse::default_instance_->InitAsDefaultInstance();
  CMessageAchieveGetAllRequest::default_instance_->InitAsDefaultInstance();
  CMessageAchieveGetAllResponse::default_instance_->InitAsDefaultInstance();
  CMessageAchieveFinishNotice::default_instance_->InitAsDefaultInstance();
  PBAchieveParam::default_instance_->InitAsDefaultInstance();
  PBDBAchieve::default_instance_->InitAsDefaultInstance();
  PBDBAchieveBuffer::default_instance_->InitAsDefaultInstance();
  CMessageGetAllHonorRequest::default_instance_->InitAsDefaultInstance();
  PBHonorData::default_instance_->InitAsDefaultInstance();
  CMessageGetAllHonorResponse::default_instance_->InitAsDefaultInstance();
  CMessageHonorFinishNotice::default_instance_->InitAsDefaultInstance();
  CMessageGetStageBonusRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetStageBonusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achievemessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achievemessage_5fpb_2ehxx {
  StaticDescriptorInitializer_achievemessage_5fpb_2ehxx() {
    protobuf_AddDesc_achievemessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_achievemessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* AchieveMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveMessageID_descriptor_;
}
bool AchieveMessageID_IsValid(int value) {
  switch(value) {
    case 20481:
    case 20482:
    case 20483:
    case 20484:
    case 20485:
    case 20486:
    case 20487:
    case 20488:
    case 20489:
    case 20490:
    case 20491:
    case 20492:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveReportRequest::kAchieveIDFieldNumber;
const int CMessageAchieveReportRequest::kKeyFieldNumber;
const int CMessageAchieveReportRequest::kValueFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveReportRequest::CMessageAchieveReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveReportRequest::InitAsDefaultInstance() {}

CMessageAchieveReportRequest::CMessageAchieveReportRequest(const CMessageAchieveReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveReportRequest::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0u;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveReportRequest::~CMessageAchieveReportRequest() {
  SharedDtor();
}

void CMessageAchieveReportRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveReportRequest_descriptor_;
}

const CMessageAchieveReportRequest& CMessageAchieveReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveReportRequest* CMessageAchieveReportRequest::default_instance_ = NULL;

CMessageAchieveReportRequest* CMessageAchieveReportRequest::New() const {
  return new CMessageAchieveReportRequest;
}

void CMessageAchieveReportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0u;
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AchieveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achieveid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }
      
      // optional uint32 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveReportRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->achieveid(), output);
  }
  
  // optional uint32 Key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->key(), output);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveReportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->achieveid(), target);
  }
  
  // optional uint32 Key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->key(), target);
  }
  
  // optional uint32 Value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveReportRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchieveID = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achieveid());
    }
    
    // optional uint32 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
    // optional uint32 Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveReportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveReportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveReportRequest::MergeFrom(const CMessageAchieveReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achieveid(from.achieveid());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveReportRequest::CopyFrom(const CMessageAchieveReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveReportRequest::Swap(CMessageAchieveReportRequest* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveReportRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveReportRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveReportRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveReportRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveReportResponse::kRtnCodeFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveReportResponse::CMessageAchieveReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveReportResponse::InitAsDefaultInstance() {}

CMessageAchieveReportResponse::CMessageAchieveReportResponse(const CMessageAchieveReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveReportResponse::SharedCtor() {
  _cached_size_ = 0;
  rtncode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveReportResponse::~CMessageAchieveReportResponse() {
  SharedDtor();
}

void CMessageAchieveReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveReportResponse_descriptor_;
}

const CMessageAchieveReportResponse& CMessageAchieveReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveReportResponse* CMessageAchieveReportResponse::default_instance_ = NULL;

CMessageAchieveReportResponse* CMessageAchieveReportResponse::New() const {
  return new CMessageAchieveReportResponse;
}

void CMessageAchieveReportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtncode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RtnCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rtncode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveReportResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rtncode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RtnCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rtncode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveReportResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RtnCode = 1;
    if (has_rtncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rtncode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveReportResponse::MergeFrom(const CMessageAchieveReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rtncode(from.rtncode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveReportResponse::CopyFrom(const CMessageAchieveReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveReportResponse::Swap(CMessageAchieveReportResponse* other) {
  if (other != this) {
    std::swap(rtncode_, other->rtncode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveReportResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveReportResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveReportResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveReportResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAchieve::kAchieveIDFieldNumber;
const int PBAchieve::kTimeFieldNumber;
const int PBAchieve::kStatusFieldNumber;
const int PBAchieve::kRootTypeFieldNumber;
const int PBAchieve::kParamFieldNumber;
#endif  // !_MSC_VER

PBAchieve::PBAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAchieve::InitAsDefaultInstance() {}

PBAchieve::PBAchieve(const PBAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAchieve::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0u;
  time_ = 0u;
  status_ = 0u;
  roottype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAchieve::~PBAchieve() {
  SharedDtor();
}

void PBAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAchieve_descriptor_;
}

const PBAchieve& PBAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBAchieve* PBAchieve::default_instance_ = NULL;

PBAchieve* PBAchieve::New() const {
  return new PBAchieve;
}

void PBAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0u;
    time_ = 0u;
    status_ = 0u;
    roottype_ = 0u;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AchieveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achieveid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RootType;
        break;
      }
      
      // optional uint32 RootType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RootType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roottype_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Param;
        break;
      }
      
      // repeated .PBAchieveParam Param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_param()));
        if (input->ExpectTag(42)) goto parse_Param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAchieve::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->achieveid(), output);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->time(), output);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->status(), output);
  }
  
  // optional uint32 RootType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roottype(), output);
  }
  
  // repeated .PBAchieveParam Param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->achieveid(), target);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->status(), target);
  }
  
  // optional uint32 RootType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roottype(), target);
  }
  
  // repeated .PBAchieveParam Param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAchieve::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchieveID = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achieveid());
    }
    
    // optional uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 RootType = 4;
    if (has_roottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roottype());
    }
    
  }
  // repeated .PBAchieveParam Param = 5;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAchieve::MergeFrom(const PBAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achieveid(from.achieveid());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_roottype(from.roottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieve::CopyFrom(const PBAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieve::Swap(PBAchieve* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(roottype_, other->roottype_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAchieve::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAchieve::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAchieve::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAchieve_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAchieveBuffer::kAchieveFieldNumber;
#endif  // !_MSC_VER

PBAchieveBuffer::PBAchieveBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAchieveBuffer::InitAsDefaultInstance() {}

PBAchieveBuffer::PBAchieveBuffer(const PBAchieveBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAchieveBuffer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAchieveBuffer::~PBAchieveBuffer() {
  SharedDtor();
}

void PBAchieveBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAchieveBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveBuffer_descriptor_;
}

const PBAchieveBuffer& PBAchieveBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBAchieveBuffer* PBAchieveBuffer::default_instance_ = NULL;

PBAchieveBuffer* PBAchieveBuffer::New() const {
  return new PBAchieveBuffer;
}

void PBAchieveBuffer::Clear() {
  achieve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAchieveBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBAchieve Achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Achieve:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_achieve()));
        if (input->ExpectTag(10)) goto parse_Achieve;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAchieveBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAchieveBuffer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBAchieve Achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->achieve(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAchieveBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBAchieve Achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->achieve(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAchieveBuffer::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBAchieve Achieve = 1;
  total_size += 1 * this->achieve_size();
  for (int i = 0; i < this->achieve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->achieve(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAchieveBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAchieveBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAchieveBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAchieveBuffer::MergeFrom(const PBAchieveBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_.MergeFrom(from.achieve_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAchieveBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveBuffer::CopyFrom(const PBAchieveBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveBuffer::Swap(PBAchieveBuffer* other) {
  if (other != this) {
    achieve_.Swap(&other->achieve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAchieveBuffer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAchieveBuffer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAchieveBuffer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveBuffer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveGetSingleRequest::kAchieveIDFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveGetSingleRequest::CMessageAchieveGetSingleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveGetSingleRequest::InitAsDefaultInstance() {}

CMessageAchieveGetSingleRequest::CMessageAchieveGetSingleRequest(const CMessageAchieveGetSingleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveGetSingleRequest::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveGetSingleRequest::~CMessageAchieveGetSingleRequest() {
  SharedDtor();
}

void CMessageAchieveGetSingleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveGetSingleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetSingleRequest_descriptor_;
}

const CMessageAchieveGetSingleRequest& CMessageAchieveGetSingleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveGetSingleRequest* CMessageAchieveGetSingleRequest::default_instance_ = NULL;

CMessageAchieveGetSingleRequest* CMessageAchieveGetSingleRequest::New() const {
  return new CMessageAchieveGetSingleRequest;
}

void CMessageAchieveGetSingleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveGetSingleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AchieveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achieveid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveGetSingleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveGetSingleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->achieveid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveGetSingleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->achieveid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveGetSingleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchieveID = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achieveid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveGetSingleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveGetSingleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveGetSingleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveGetSingleRequest::MergeFrom(const CMessageAchieveGetSingleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achieveid(from.achieveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveGetSingleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetSingleRequest::CopyFrom(const CMessageAchieveGetSingleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetSingleRequest::Swap(CMessageAchieveGetSingleRequest* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveGetSingleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveGetSingleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveGetSingleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetSingleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveGetSingleResponse::kAchieveFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveGetSingleResponse::CMessageAchieveGetSingleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveGetSingleResponse::InitAsDefaultInstance() {  achieve_ = const_cast< ::PBAchieve*>(&::PBAchieve::default_instance());
}

CMessageAchieveGetSingleResponse::CMessageAchieveGetSingleResponse(const CMessageAchieveGetSingleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveGetSingleResponse::SharedCtor() {
  _cached_size_ = 0;
  achieve_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveGetSingleResponse::~CMessageAchieveGetSingleResponse() {
  SharedDtor();
}

void CMessageAchieveGetSingleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete achieve_;
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveGetSingleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetSingleResponse_descriptor_;
}

const CMessageAchieveGetSingleResponse& CMessageAchieveGetSingleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveGetSingleResponse* CMessageAchieveGetSingleResponse::default_instance_ = NULL;

CMessageAchieveGetSingleResponse* CMessageAchieveGetSingleResponse::New() const {
  return new CMessageAchieveGetSingleResponse;
}

void CMessageAchieveGetSingleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (achieve_ != NULL) achieve_->::PBAchieve::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveGetSingleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBAchieve Achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_achieve()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveGetSingleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveGetSingleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBAchieve Achieve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->achieve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveGetSingleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAchieve Achieve = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->achieve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveGetSingleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAchieve Achieve = 1;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->achieve());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveGetSingleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveGetSingleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveGetSingleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveGetSingleResponse::MergeFrom(const CMessageAchieveGetSingleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_achieve()->::PBAchieve::MergeFrom(from.achieve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveGetSingleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetSingleResponse::CopyFrom(const CMessageAchieveGetSingleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetSingleResponse::Swap(CMessageAchieveGetSingleResponse* other) {
  if (other != this) {
    std::swap(achieve_, other->achieve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveGetSingleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveGetSingleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveGetSingleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetSingleResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveGetAllRequest::kIsOpenFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveGetAllRequest::CMessageAchieveGetAllRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveGetAllRequest::InitAsDefaultInstance() {}

CMessageAchieveGetAllRequest::CMessageAchieveGetAllRequest(const CMessageAchieveGetAllRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveGetAllRequest::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveGetAllRequest::~CMessageAchieveGetAllRequest() {
  SharedDtor();
}

void CMessageAchieveGetAllRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveGetAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetAllRequest_descriptor_;
}

const CMessageAchieveGetAllRequest& CMessageAchieveGetAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveGetAllRequest* CMessageAchieveGetAllRequest::default_instance_ = NULL;

CMessageAchieveGetAllRequest* CMessageAchieveGetAllRequest::New() const {
  return new CMessageAchieveGetAllRequest;
}

void CMessageAchieveGetAllRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveGetAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 IsOpen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isopen_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveGetAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveGetAllRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 IsOpen = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveGetAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 IsOpen = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveGetAllRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsOpen = 1;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isopen());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveGetAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveGetAllRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveGetAllRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveGetAllRequest::MergeFrom(const CMessageAchieveGetAllRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveGetAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetAllRequest::CopyFrom(const CMessageAchieveGetAllRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetAllRequest::Swap(CMessageAchieveGetAllRequest* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveGetAllRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveGetAllRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveGetAllRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetAllRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAchieveGetAllResponse::kTotalPointFieldNumber;
const int CMessageAchieveGetAllResponse::kAchieveBufferFieldNumber;
const int CMessageAchieveGetAllResponse::kStageFieldNumber;
const int CMessageAchieveGetAllResponse::kIsOpenFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveGetAllResponse::CMessageAchieveGetAllResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveGetAllResponse::InitAsDefaultInstance() {  achievebuffer_ = const_cast< ::PBAchieveBuffer*>(&::PBAchieveBuffer::default_instance());
}

CMessageAchieveGetAllResponse::CMessageAchieveGetAllResponse(const CMessageAchieveGetAllResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveGetAllResponse::SharedCtor() {
  _cached_size_ = 0;
  totalpoint_ = 0u;
  achievebuffer_ = NULL;
  stage_ = 0u;
  isopen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveGetAllResponse::~CMessageAchieveGetAllResponse() {
  SharedDtor();
}

void CMessageAchieveGetAllResponse::SharedDtor() {
  if (this != default_instance_) {
    delete achievebuffer_;
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveGetAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetAllResponse_descriptor_;
}

const CMessageAchieveGetAllResponse& CMessageAchieveGetAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveGetAllResponse* CMessageAchieveGetAllResponse::default_instance_ = NULL;

CMessageAchieveGetAllResponse* CMessageAchieveGetAllResponse::New() const {
  return new CMessageAchieveGetAllResponse;
}

void CMessageAchieveGetAllResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalpoint_ = 0u;
    if (_has_bit(1)) {
      if (achievebuffer_ != NULL) achievebuffer_->::PBAchieveBuffer::Clear();
    }
    stage_ = 0u;
    isopen_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveGetAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TotalPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpoint_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_AchieveBuffer;
        break;
      }
      
      // optional .PBAchieveBuffer AchieveBuffer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AchieveBuffer:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_achievebuffer()));
        if (input->ExpectTag(24)) goto parse_Stage;
        break;
      }
      
      // optional uint32 Stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stage_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IsOpen;
        break;
      }
      
      // optional uint32 IsOpen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsOpen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isopen_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveGetAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveGetAllResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TotalPoint = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->totalpoint(), output);
  }
  
  // optional .PBAchieveBuffer AchieveBuffer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->achievebuffer(), output);
  }
  
  // optional uint32 Stage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stage(), output);
  }
  
  // optional uint32 IsOpen = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveGetAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TotalPoint = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->totalpoint(), target);
  }
  
  // optional .PBAchieveBuffer AchieveBuffer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->achievebuffer(), target);
  }
  
  // optional uint32 Stage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stage(), target);
  }
  
  // optional uint32 IsOpen = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveGetAllResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalPoint = 1;
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpoint());
    }
    
    // optional .PBAchieveBuffer AchieveBuffer = 2;
    if (has_achievebuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->achievebuffer());
    }
    
    // optional uint32 Stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stage());
    }
    
    // optional uint32 IsOpen = 4;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isopen());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveGetAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveGetAllResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveGetAllResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveGetAllResponse::MergeFrom(const CMessageAchieveGetAllResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_totalpoint(from.totalpoint());
    }
    if (from._has_bit(1)) {
      mutable_achievebuffer()->::PBAchieveBuffer::MergeFrom(from.achievebuffer());
    }
    if (from._has_bit(2)) {
      set_stage(from.stage());
    }
    if (from._has_bit(3)) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveGetAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetAllResponse::CopyFrom(const CMessageAchieveGetAllResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveGetAllResponse::Swap(CMessageAchieveGetAllResponse* other) {
  if (other != this) {
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(achievebuffer_, other->achievebuffer_);
    std::swap(stage_, other->stage_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveGetAllResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveGetAllResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveGetAllResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveGetAllResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageAchieveFinishNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageAchieveFinishNotice::kAchieveFieldNumber;
const int CMessageAchieveFinishNotice::kTotalPointFieldNumber;
const int CMessageAchieveFinishNotice::kCharIDFieldNumber;
const int CMessageAchieveFinishNotice::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageAchieveFinishNotice::CMessageAchieveFinishNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAchieveFinishNotice::InitAsDefaultInstance() {  achieve_ = const_cast< ::PBAchieve*>(&::PBAchieve::default_instance());
}

CMessageAchieveFinishNotice::CMessageAchieveFinishNotice(const CMessageAchieveFinishNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAchieveFinishNotice::SharedCtor() {
  _cached_size_ = 0;
  achieve_ = NULL;
  totalpoint_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAchieveFinishNotice::~CMessageAchieveFinishNotice() {
  SharedDtor();
}

void CMessageAchieveFinishNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete achieve_;
  }
}

const ::google::protobuf::Descriptor* CMessageAchieveFinishNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveFinishNotice_descriptor_;
}

const CMessageAchieveFinishNotice& CMessageAchieveFinishNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAchieveFinishNotice* CMessageAchieveFinishNotice::default_instance_ = NULL;

CMessageAchieveFinishNotice* CMessageAchieveFinishNotice::New() const {
  return new CMessageAchieveFinishNotice;
}

void CMessageAchieveFinishNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (achieve_ != NULL) achieve_->::PBAchieve::Clear();
    }
    totalpoint_ = 0u;
    charid_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAchieveFinishNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBAchieve Achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_achieve()));
        if (input->ExpectTag(16)) goto parse_TotalPoint;
        break;
      }
      
      // optional uint32 TotalPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpoint_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAchieveFinishNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAchieveFinishNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBAchieve Achieve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->achieve(), output);
  }
  
  // optional uint32 TotalPoint = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->totalpoint(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAchieveFinishNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAchieve Achieve = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->achieve(), target);
  }
  
  // optional uint32 TotalPoint = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->totalpoint(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAchieveFinishNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAchieve Achieve = 1;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->achieve());
    }
    
    // optional uint32 TotalPoint = 2;
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpoint());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAchieveFinishNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAchieveFinishNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAchieveFinishNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAchieveFinishNotice::MergeFrom(const CMessageAchieveFinishNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_achieve()->::PBAchieve::MergeFrom(from.achieve());
    }
    if (from._has_bit(1)) {
      set_totalpoint(from.totalpoint());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAchieveFinishNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveFinishNotice::CopyFrom(const CMessageAchieveFinishNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAchieveFinishNotice::Swap(CMessageAchieveFinishNotice* other) {
  if (other != this) {
    std::swap(achieve_, other->achieve_);
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAchieveFinishNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAchieveFinishNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAchieveFinishNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAchieveFinishNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAchieveParam::kKeyFieldNumber;
const int PBAchieveParam::kValueFieldNumber;
#endif  // !_MSC_VER

PBAchieveParam::PBAchieveParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAchieveParam::InitAsDefaultInstance() {}

PBAchieveParam::PBAchieveParam(const PBAchieveParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAchieveParam::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAchieveParam::~PBAchieveParam() {
  SharedDtor();
}

void PBAchieveParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAchieveParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveParam_descriptor_;
}

const PBAchieveParam& PBAchieveParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBAchieveParam* PBAchieveParam::default_instance_ = NULL;

PBAchieveParam* PBAchieveParam::New() const {
  return new PBAchieveParam;
}

void PBAchieveParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAchieveParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAchieveParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAchieveParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->key(), output);
  }
  
  // optional uint32 Value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAchieveParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // optional uint32 Value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAchieveParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
    // optional uint32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAchieveParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAchieveParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAchieveParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAchieveParam::MergeFrom(const PBAchieveParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAchieveParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveParam::CopyFrom(const PBAchieveParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAchieveParam::Swap(PBAchieveParam* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAchieveParam::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAchieveParam::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAchieveParam::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAchieveParam_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDBAchieve::kAchieveIDFieldNumber;
const int PBDBAchieve::kTimeFieldNumber;
const int PBDBAchieve::kStatusFieldNumber;
const int PBDBAchieve::kRootTypeFieldNumber;
const int PBDBAchieve::kParamFieldNumber;
#endif  // !_MSC_VER

PBDBAchieve::PBDBAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBAchieve::InitAsDefaultInstance() {}

PBDBAchieve::PBDBAchieve(const PBDBAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBAchieve::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0u;
  time_ = 0u;
  status_ = 0u;
  roottype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBAchieve::~PBDBAchieve() {
  SharedDtor();
}

void PBDBAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDBAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBAchieve_descriptor_;
}

const PBDBAchieve& PBDBAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBDBAchieve* PBDBAchieve::default_instance_ = NULL;

PBDBAchieve* PBDBAchieve::New() const {
  return new PBDBAchieve;
}

void PBDBAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0u;
    time_ = 0u;
    status_ = 0u;
    roottype_ = 0u;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AchieveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achieveid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RootType;
        break;
      }
      
      // optional uint32 RootType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RootType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roottype_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Param;
        break;
      }
      
      // repeated .PBAchieveParam Param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_param()));
        if (input->ExpectTag(42)) goto parse_Param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDBAchieve::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->achieveid(), output);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->time(), output);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->status(), output);
  }
  
  // optional uint32 RootType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roottype(), output);
  }
  
  // repeated .PBAchieveParam Param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AchieveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->achieveid(), target);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->status(), target);
  }
  
  // optional uint32 RootType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roottype(), target);
  }
  
  // repeated .PBAchieveParam Param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBAchieve::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchieveID = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achieveid());
    }
    
    // optional uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 RootType = 4;
    if (has_roottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roottype());
    }
    
  }
  // repeated .PBAchieveParam Param = 5;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDBAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBAchieve::MergeFrom(const PBDBAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_achieveid(from.achieveid());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_roottype(from.roottype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAchieve::CopyFrom(const PBDBAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAchieve::Swap(PBDBAchieve* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(roottype_, other->roottype_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDBAchieve::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDBAchieve::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDBAchieve::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDBAchieve_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBDBAchieveBuffer::kAchieveFieldNumber;
const int PBDBAchieveBuffer::kHonorDataFieldNumber;
const int PBDBAchieveBuffer::kCharIDFieldNumber;
const int PBDBAchieveBuffer::kTotalPointFieldNumber;
const int PBDBAchieveBuffer::kStageFieldNumber;
#endif  // !_MSC_VER

PBDBAchieveBuffer::PBDBAchieveBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBAchieveBuffer::InitAsDefaultInstance() {}

PBDBAchieveBuffer::PBDBAchieveBuffer(const PBDBAchieveBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBAchieveBuffer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  totalpoint_ = 0u;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBAchieveBuffer::~PBDBAchieveBuffer() {
  SharedDtor();
}

void PBDBAchieveBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBDBAchieveBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBAchieveBuffer_descriptor_;
}

const PBDBAchieveBuffer& PBDBAchieveBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBDBAchieveBuffer* PBDBAchieveBuffer::default_instance_ = NULL;

PBDBAchieveBuffer* PBDBAchieveBuffer::New() const {
  return new PBDBAchieveBuffer;
}

void PBDBAchieveBuffer::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    charid_ = 0u;
    totalpoint_ = 0u;
    stage_ = 0u;
  }
  achieve_.Clear();
  honordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBAchieveBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBDBAchieve Achieve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Achieve:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_achieve()));
        if (input->ExpectTag(10)) goto parse_Achieve;
        if (input->ExpectTag(18)) goto parse_HonorData;
        break;
      }
      
      // repeated .PBHonorData HonorData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HonorData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_honordata()));
        if (input->ExpectTag(18)) goto parse_HonorData;
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TotalPoint;
        break;
      }
      
      // optional uint32 TotalPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalpoint_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Stage;
        break;
      }
      
      // optional uint32 Stage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stage_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBAchieveBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBDBAchieveBuffer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBDBAchieve Achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->achieve(i), output);
  }
  
  // repeated .PBHonorData HonorData = 2;
  for (int i = 0; i < this->honordata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->honordata(i), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 TotalPoint = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->totalpoint(), output);
  }
  
  // optional uint32 Stage = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->stage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBAchieveBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBDBAchieve Achieve = 1;
  for (int i = 0; i < this->achieve_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->achieve(i), target);
  }
  
  // repeated .PBHonorData HonorData = 2;
  for (int i = 0; i < this->honordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->honordata(i), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 TotalPoint = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->totalpoint(), target);
  }
  
  // optional uint32 Stage = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->stage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBAchieveBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 TotalPoint = 4;
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalpoint());
    }
    
    // optional uint32 Stage = 5;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stage());
    }
    
  }
  // repeated .PBDBAchieve Achieve = 1;
  total_size += 1 * this->achieve_size();
  for (int i = 0; i < this->achieve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->achieve(i));
  }
  
  // repeated .PBHonorData HonorData = 2;
  total_size += 1 * this->honordata_size();
  for (int i = 0; i < this->honordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->honordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBDBAchieveBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBAchieveBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBAchieveBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBAchieveBuffer::MergeFrom(const PBDBAchieveBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_.MergeFrom(from.achieve_);
  honordata_.MergeFrom(from.honordata_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_totalpoint(from.totalpoint());
    }
    if (from._has_bit(4)) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBAchieveBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAchieveBuffer::CopyFrom(const PBDBAchieveBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAchieveBuffer::Swap(PBDBAchieveBuffer* other) {
  if (other != this) {
    achieve_.Swap(&other->achieve_);
    honordata_.Swap(&other->honordata_);
    std::swap(charid_, other->charid_);
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBDBAchieveBuffer::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBDBAchieveBuffer::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBDBAchieveBuffer::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBDBAchieveBuffer_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageGetAllHonorRequest::CMessageGetAllHonorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAllHonorRequest::InitAsDefaultInstance() {}

CMessageGetAllHonorRequest::CMessageGetAllHonorRequest(const CMessageGetAllHonorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAllHonorRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAllHonorRequest::~CMessageGetAllHonorRequest() {
  SharedDtor();
}

void CMessageGetAllHonorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAllHonorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllHonorRequest_descriptor_;
}

const CMessageGetAllHonorRequest& CMessageGetAllHonorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAllHonorRequest* CMessageGetAllHonorRequest::default_instance_ = NULL;

CMessageGetAllHonorRequest* CMessageGetAllHonorRequest::New() const {
  return new CMessageGetAllHonorRequest;
}

void CMessageGetAllHonorRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAllHonorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageGetAllHonorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAllHonorRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAllHonorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAllHonorRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAllHonorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAllHonorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAllHonorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAllHonorRequest::MergeFrom(const CMessageGetAllHonorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAllHonorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllHonorRequest::CopyFrom(const CMessageGetAllHonorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllHonorRequest::Swap(CMessageGetAllHonorRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAllHonorRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAllHonorRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAllHonorRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllHonorRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBHonorData::kMapIDFieldNumber;
const int PBHonorData::kTimeFieldNumber;
const int PBHonorData::kParamFieldNumber;
#endif  // !_MSC_VER

PBHonorData::PBHonorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHonorData::InitAsDefaultInstance() {}

PBHonorData::PBHonorData(const PBHonorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHonorData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  time_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHonorData::~PBHonorData() {
  SharedDtor();
}

void PBHonorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBHonorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHonorData_descriptor_;
}

const PBHonorData& PBHonorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

PBHonorData* PBHonorData::default_instance_ = NULL;

PBHonorData* PBHonorData::New() const {
  return new PBHonorData;
}

void PBHonorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    time_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHonorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHonorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBHonorData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->time(), output);
  }
  
  // optional uint32 Param = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHonorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional uint32 Param = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHonorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 Param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBHonorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHonorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHonorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHonorData::MergeFrom(const PBHonorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHonorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorData::CopyFrom(const PBHonorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHonorData::Swap(PBHonorData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(time_, other->time_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBHonorData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBHonorData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBHonorData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBHonorData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetAllHonorResponse::kHonorDataFieldNumber;
#endif  // !_MSC_VER

CMessageGetAllHonorResponse::CMessageGetAllHonorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetAllHonorResponse::InitAsDefaultInstance() {}

CMessageGetAllHonorResponse::CMessageGetAllHonorResponse(const CMessageGetAllHonorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetAllHonorResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetAllHonorResponse::~CMessageGetAllHonorResponse() {
  SharedDtor();
}

void CMessageGetAllHonorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetAllHonorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllHonorResponse_descriptor_;
}

const CMessageGetAllHonorResponse& CMessageGetAllHonorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetAllHonorResponse* CMessageGetAllHonorResponse::default_instance_ = NULL;

CMessageGetAllHonorResponse* CMessageGetAllHonorResponse::New() const {
  return new CMessageGetAllHonorResponse;
}

void CMessageGetAllHonorResponse::Clear() {
  honordata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetAllHonorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBHonorData HonorData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HonorData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_honordata()));
        if (input->ExpectTag(10)) goto parse_HonorData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetAllHonorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetAllHonorResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBHonorData HonorData = 1;
  for (int i = 0; i < this->honordata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->honordata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetAllHonorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBHonorData HonorData = 1;
  for (int i = 0; i < this->honordata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->honordata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetAllHonorResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBHonorData HonorData = 1;
  total_size += 1 * this->honordata_size();
  for (int i = 0; i < this->honordata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->honordata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetAllHonorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetAllHonorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetAllHonorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetAllHonorResponse::MergeFrom(const CMessageGetAllHonorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  honordata_.MergeFrom(from.honordata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetAllHonorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllHonorResponse::CopyFrom(const CMessageGetAllHonorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetAllHonorResponse::Swap(CMessageGetAllHonorResponse* other) {
  if (other != this) {
    honordata_.Swap(&other->honordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetAllHonorResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetAllHonorResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetAllHonorResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetAllHonorResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageHonorFinishNotice::kHonorDataFieldNumber;
#endif  // !_MSC_VER

CMessageHonorFinishNotice::CMessageHonorFinishNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHonorFinishNotice::InitAsDefaultInstance() {  honordata_ = const_cast< ::PBHonorData*>(&::PBHonorData::default_instance());
}

CMessageHonorFinishNotice::CMessageHonorFinishNotice(const CMessageHonorFinishNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHonorFinishNotice::SharedCtor() {
  _cached_size_ = 0;
  honordata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHonorFinishNotice::~CMessageHonorFinishNotice() {
  SharedDtor();
}

void CMessageHonorFinishNotice::SharedDtor() {
  if (this != default_instance_) {
    delete honordata_;
  }
}

const ::google::protobuf::Descriptor* CMessageHonorFinishNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHonorFinishNotice_descriptor_;
}

const CMessageHonorFinishNotice& CMessageHonorFinishNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageHonorFinishNotice* CMessageHonorFinishNotice::default_instance_ = NULL;

CMessageHonorFinishNotice* CMessageHonorFinishNotice::New() const {
  return new CMessageHonorFinishNotice;
}

void CMessageHonorFinishNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (honordata_ != NULL) honordata_->::PBHonorData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHonorFinishNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBHonorData HonorData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_honordata()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageHonorFinishNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageHonorFinishNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBHonorData HonorData = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->honordata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHonorFinishNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBHonorData HonorData = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->honordata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHonorFinishNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBHonorData HonorData = 1;
    if (has_honordata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->honordata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageHonorFinishNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHonorFinishNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHonorFinishNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHonorFinishNotice::MergeFrom(const CMessageHonorFinishNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_honordata()->::PBHonorData::MergeFrom(from.honordata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHonorFinishNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHonorFinishNotice::CopyFrom(const CMessageHonorFinishNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHonorFinishNotice::Swap(CMessageHonorFinishNotice* other) {
  if (other != this) {
    std::swap(honordata_, other->honordata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageHonorFinishNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageHonorFinishNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageHonorFinishNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageHonorFinishNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageGetStageBonusRequest::CMessageGetStageBonusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetStageBonusRequest::InitAsDefaultInstance() {}

CMessageGetStageBonusRequest::CMessageGetStageBonusRequest(const CMessageGetStageBonusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetStageBonusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetStageBonusRequest::~CMessageGetStageBonusRequest() {
  SharedDtor();
}

void CMessageGetStageBonusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetStageBonusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetStageBonusRequest_descriptor_;
}

const CMessageGetStageBonusRequest& CMessageGetStageBonusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetStageBonusRequest* CMessageGetStageBonusRequest::default_instance_ = NULL;

CMessageGetStageBonusRequest* CMessageGetStageBonusRequest::New() const {
  return new CMessageGetStageBonusRequest;
}

void CMessageGetStageBonusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetStageBonusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageGetStageBonusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetStageBonusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetStageBonusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetStageBonusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetStageBonusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetStageBonusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetStageBonusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetStageBonusRequest::MergeFrom(const CMessageGetStageBonusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetStageBonusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetStageBonusRequest::CopyFrom(const CMessageGetStageBonusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetStageBonusRequest::Swap(CMessageGetStageBonusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetStageBonusRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetStageBonusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetStageBonusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetStageBonusRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetStageBonusResponse::kResultFieldNumber;
const int CMessageGetStageBonusResponse::kStageFieldNumber;
#endif  // !_MSC_VER

CMessageGetStageBonusResponse::CMessageGetStageBonusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetStageBonusResponse::InitAsDefaultInstance() {}

CMessageGetStageBonusResponse::CMessageGetStageBonusResponse(const CMessageGetStageBonusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetStageBonusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetStageBonusResponse::~CMessageGetStageBonusResponse() {
  SharedDtor();
}

void CMessageGetStageBonusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetStageBonusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetStageBonusResponse_descriptor_;
}

const CMessageGetStageBonusResponse& CMessageGetStageBonusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achievemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetStageBonusResponse* CMessageGetStageBonusResponse::default_instance_ = NULL;

CMessageGetStageBonusResponse* CMessageGetStageBonusResponse::New() const {
  return new CMessageGetStageBonusResponse;
}

void CMessageGetStageBonusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetStageBonusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Stage;
        break;
      }
      
      // optional uint32 Stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stage_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetStageBonusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetStageBonusResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 Stage = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->stage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetStageBonusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 Stage = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->stage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetStageBonusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetStageBonusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetStageBonusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetStageBonusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetStageBonusResponse::MergeFrom(const CMessageGetStageBonusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetStageBonusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetStageBonusResponse::CopyFrom(const CMessageGetStageBonusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetStageBonusResponse::Swap(CMessageGetStageBonusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetStageBonusResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetStageBonusResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetStageBonusResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetStageBonusResponse_reflection_;
}
