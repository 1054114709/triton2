// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "marriagemessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageApplyMarryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyMarryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageApplyMarryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageApplyMarryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMarryRequestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMarryRequestNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyMarryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyMarryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyMarryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyMarryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMarriageTipsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMarriageTipsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBeginWeddingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBeginWeddingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBeginWeddingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBeginWeddingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBeginWeddingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBeginWeddingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyBeginWeddingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyBeginWeddingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWeddingStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWeddingStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterMarriageHallNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterMarriageHallNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyEnterMarriageHallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReplyEnterMarriageHallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNewlyEnterHallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNewlyEnterHallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNewlyEnterHallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNewlyEnterHallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGuestEnterHallRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGuestEnterHallRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGuestEnterHallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGuestEnterHallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBaitangRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBaitangRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBaitangResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBaitangResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBaitangNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBaitangNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePutKeepSakeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePutKeepSakeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePutKeepSakeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePutKeepSakeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExchangeKeepsakeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExchangeKeepsakeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExchangeKeepsakeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDivorceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDivorceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDivorceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDivorceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDivorceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDivorceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageMarryResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageMarryResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBeginWeddingResultNofiy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBeginWeddingResultNofiy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCampMarriageInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMarriageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMarriageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMarriageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMarriageList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetCampMarriageInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePersonMarriedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePersonMarriedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePersonMarriageInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePersonMarriageInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSpouseDivorceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSpouseDivorceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseSysInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseSysInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseSysInvitationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseSysInvitationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTimeToPutKeepsakeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTimeToPutKeepsakeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelWeddingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelWeddingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelWeddingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelWeddingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageNewlyMarriedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageNewlyMarriedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageWeddingEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWeddingEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartKeepsakeExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStartKeepsakeExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStopKeepsakeExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStopKeepsakeExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageStopKeepsakeExchangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInvitationExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInvitationExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInvitationExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInvitationExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExchangeResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExchangeResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeleToWeddingNpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageTeleToWeddingNpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReviewWeddingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReviewWeddingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReviewWeddingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReviewWeddingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReviewWeddingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReviewWeddingNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarriageMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_marriagemessage_5fpb_2ehxx() {
  protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marriagemessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageApplyMarryRequest_descriptor_ = file->message_type(0);
  static const int CMessageApplyMarryRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, dayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, holdwedding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, entityid_),
  };
  CMessageApplyMarryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyMarryRequest_descriptor_,
      CMessageApplyMarryRequest::default_instance_,
      CMessageApplyMarryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyMarryRequest));
  CMessageApplyMarryResponse_descriptor_ = file->message_type(1);
  static const int CMessageApplyMarryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryResponse, errcode_),
  };
  CMessageApplyMarryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageApplyMarryResponse_descriptor_,
      CMessageApplyMarryResponse::default_instance_,
      CMessageApplyMarryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageApplyMarryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageApplyMarryResponse));
  CMessageMarryRequestNotify_descriptor_ = file->message_type(2);
  static const int CMessageMarryRequestNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, weddingmodule_),
  };
  CMessageMarryRequestNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMarryRequestNotify_descriptor_,
      CMessageMarryRequestNotify::default_instance_,
      CMessageMarryRequestNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryRequestNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMarryRequestNotify));
  CMessageReplyMarryRequest_descriptor_ = file->message_type(3);
  static const int CMessageReplyMarryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryRequest, entityid_),
  };
  CMessageReplyMarryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyMarryRequest_descriptor_,
      CMessageReplyMarryRequest::default_instance_,
      CMessageReplyMarryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyMarryRequest));
  CMessageReplyMarryResponse_descriptor_ = file->message_type(4);
  static const int CMessageReplyMarryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, spousename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, marriagestatus_),
  };
  CMessageReplyMarryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyMarryResponse_descriptor_,
      CMessageReplyMarryResponse::default_instance_,
      CMessageReplyMarryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyMarryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyMarryResponse));
  CMessageMarriageTipsNotify_descriptor_ = file->message_type(5);
  static const int CMessageMarriageTipsNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarriageTipsNotify, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarriageTipsNotify, weddingstatus_),
  };
  CMessageMarriageTipsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMarriageTipsNotify_descriptor_,
      CMessageMarriageTipsNotify::default_instance_,
      CMessageMarriageTipsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarriageTipsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarriageTipsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMarriageTipsNotify));
  CMessageBeginWeddingRequest_descriptor_ = file->message_type(6);
  static const int CMessageBeginWeddingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingRequest, entityid_),
  };
  CMessageBeginWeddingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBeginWeddingRequest_descriptor_,
      CMessageBeginWeddingRequest::default_instance_,
      CMessageBeginWeddingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBeginWeddingRequest));
  CMessageBeginWeddingResponse_descriptor_ = file->message_type(7);
  static const int CMessageBeginWeddingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResponse, errcode_),
  };
  CMessageBeginWeddingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBeginWeddingResponse_descriptor_,
      CMessageBeginWeddingResponse::default_instance_,
      CMessageBeginWeddingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBeginWeddingResponse));
  CMessageBeginWeddingNotify_descriptor_ = file->message_type(8);
  static const int CMessageBeginWeddingNotify_offsets_[1] = {
  };
  CMessageBeginWeddingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBeginWeddingNotify_descriptor_,
      CMessageBeginWeddingNotify::default_instance_,
      CMessageBeginWeddingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBeginWeddingNotify));
  CMessageReplyBeginWeddingRequest_descriptor_ = file->message_type(9);
  static const int CMessageReplyBeginWeddingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingRequest, entityid_),
  };
  CMessageReplyBeginWeddingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyBeginWeddingRequest_descriptor_,
      CMessageReplyBeginWeddingRequest::default_instance_,
      CMessageReplyBeginWeddingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyBeginWeddingRequest));
  CMessageReplyBeginWeddingResponse_descriptor_ = file->message_type(10);
  static const int CMessageReplyBeginWeddingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingResponse, errcode_),
  };
  CMessageReplyBeginWeddingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyBeginWeddingResponse_descriptor_,
      CMessageReplyBeginWeddingResponse::default_instance_,
      CMessageReplyBeginWeddingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyBeginWeddingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyBeginWeddingResponse));
  CMessageWeddingStartNotify_descriptor_ = file->message_type(11);
  static const int CMessageWeddingStartNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, weddingtimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, groomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, brideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, campid_),
  };
  CMessageWeddingStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWeddingStartNotify_descriptor_,
      CMessageWeddingStartNotify::default_instance_,
      CMessageWeddingStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWeddingStartNotify));
  CMessageEnterMarriageHallNotify_descriptor_ = file->message_type(12);
  static const int CMessageEnterMarriageHallNotify_offsets_[1] = {
  };
  CMessageEnterMarriageHallNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterMarriageHallNotify_descriptor_,
      CMessageEnterMarriageHallNotify::default_instance_,
      CMessageEnterMarriageHallNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterMarriageHallNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterMarriageHallNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterMarriageHallNotify));
  CMessageReplyEnterMarriageHallRequest_descriptor_ = file->message_type(13);
  static const int CMessageReplyEnterMarriageHallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallRequest, result_),
  };
  CMessageReplyEnterMarriageHallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyEnterMarriageHallRequest_descriptor_,
      CMessageReplyEnterMarriageHallRequest::default_instance_,
      CMessageReplyEnterMarriageHallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyEnterMarriageHallRequest));
  CMessageReplyEnterMarriageHallResponse_descriptor_ = file->message_type(14);
  static const int CMessageReplyEnterMarriageHallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallResponse, errcode_),
  };
  CMessageReplyEnterMarriageHallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReplyEnterMarriageHallResponse_descriptor_,
      CMessageReplyEnterMarriageHallResponse::default_instance_,
      CMessageReplyEnterMarriageHallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReplyEnterMarriageHallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReplyEnterMarriageHallResponse));
  CMessageNewlyEnterHallRequest_descriptor_ = file->message_type(15);
  static const int CMessageNewlyEnterHallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallRequest, entityid_),
  };
  CMessageNewlyEnterHallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNewlyEnterHallRequest_descriptor_,
      CMessageNewlyEnterHallRequest::default_instance_,
      CMessageNewlyEnterHallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNewlyEnterHallRequest));
  CMessageNewlyEnterHallResponse_descriptor_ = file->message_type(16);
  static const int CMessageNewlyEnterHallResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallResponse, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallResponse, baitangend_),
  };
  CMessageNewlyEnterHallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNewlyEnterHallResponse_descriptor_,
      CMessageNewlyEnterHallResponse::default_instance_,
      CMessageNewlyEnterHallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyEnterHallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNewlyEnterHallResponse));
  CMessageGuestEnterHallRequest_descriptor_ = file->message_type(17);
  static const int CMessageGuestEnterHallRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallRequest, entityid_),
  };
  CMessageGuestEnterHallRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGuestEnterHallRequest_descriptor_,
      CMessageGuestEnterHallRequest::default_instance_,
      CMessageGuestEnterHallRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGuestEnterHallRequest));
  CMessageGuestEnterHallResponse_descriptor_ = file->message_type(18);
  static const int CMessageGuestEnterHallResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallResponse, errcode_),
  };
  CMessageGuestEnterHallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGuestEnterHallResponse_descriptor_,
      CMessageGuestEnterHallResponse::default_instance_,
      CMessageGuestEnterHallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGuestEnterHallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGuestEnterHallResponse));
  CMessageBaitangRequest_descriptor_ = file->message_type(19);
  static const int CMessageBaitangRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangRequest, entityid_),
  };
  CMessageBaitangRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBaitangRequest_descriptor_,
      CMessageBaitangRequest::default_instance_,
      CMessageBaitangRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBaitangRequest));
  CMessageBaitangResponse_descriptor_ = file->message_type(20);
  static const int CMessageBaitangResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangResponse, errcode_),
  };
  CMessageBaitangResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBaitangResponse_descriptor_,
      CMessageBaitangResponse::default_instance_,
      CMessageBaitangResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBaitangResponse));
  CMessageBaitangNotify_descriptor_ = file->message_type(21);
  static const int CMessageBaitangNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, groomentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, brideentityid_),
  };
  CMessageBaitangNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBaitangNotify_descriptor_,
      CMessageBaitangNotify::default_instance_,
      CMessageBaitangNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBaitangNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBaitangNotify));
  CMessagePutKeepSakeRequest_descriptor_ = file->message_type(22);
  static const int CMessagePutKeepSakeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeRequest, keepsakeindex_),
  };
  CMessagePutKeepSakeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePutKeepSakeRequest_descriptor_,
      CMessagePutKeepSakeRequest::default_instance_,
      CMessagePutKeepSakeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePutKeepSakeRequest));
  CMessagePutKeepSakeResponse_descriptor_ = file->message_type(23);
  static const int CMessagePutKeepSakeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeResponse, index_),
  };
  CMessagePutKeepSakeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePutKeepSakeResponse_descriptor_,
      CMessagePutKeepSakeResponse::default_instance_,
      CMessagePutKeepSakeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePutKeepSakeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePutKeepSakeResponse));
  CMessageExchangeKeepsakeRequest_descriptor_ = file->message_type(24);
  static const int CMessageExchangeKeepsakeRequest_offsets_[1] = {
  };
  CMessageExchangeKeepsakeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExchangeKeepsakeRequest_descriptor_,
      CMessageExchangeKeepsakeRequest::default_instance_,
      CMessageExchangeKeepsakeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExchangeKeepsakeRequest));
  CMessageExchangeKeepsakeResponse_descriptor_ = file->message_type(25);
  static const int CMessageExchangeKeepsakeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeResponse, errcode_),
  };
  CMessageExchangeKeepsakeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExchangeKeepsakeResponse_descriptor_,
      CMessageExchangeKeepsakeResponse::default_instance_,
      CMessageExchangeKeepsakeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExchangeKeepsakeResponse));
  CMessageExchangeKeepsakeNotify_descriptor_ = file->message_type(26);
  static const int CMessageExchangeKeepsakeNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, bridekeepsake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, groomkeepsake_),
  };
  CMessageExchangeKeepsakeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExchangeKeepsakeNotify_descriptor_,
      CMessageExchangeKeepsakeNotify::default_instance_,
      CMessageExchangeKeepsakeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeKeepsakeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExchangeKeepsakeNotify));
  CMessageDivorceRequest_descriptor_ = file->message_type(27);
  static const int CMessageDivorceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceRequest, entityid_),
  };
  CMessageDivorceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDivorceRequest_descriptor_,
      CMessageDivorceRequest::default_instance_,
      CMessageDivorceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDivorceRequest));
  CMessageDivorceResponse_descriptor_ = file->message_type(28);
  static const int CMessageDivorceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceResponse, errcode_),
  };
  CMessageDivorceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDivorceResponse_descriptor_,
      CMessageDivorceResponse::default_instance_,
      CMessageDivorceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDivorceResponse));
  CMessageDivorceNotify_descriptor_ = file->message_type(29);
  static const int CMessageDivorceNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, groomcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, bridecharid_),
  };
  CMessageDivorceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDivorceNotify_descriptor_,
      CMessageDivorceNotify::default_instance_,
      CMessageDivorceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDivorceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDivorceNotify));
  CMessageMarryResultNotify_descriptor_ = file->message_type(30);
  static const int CMessageMarryResultNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, spousename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, marriagestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, weddingtime_),
  };
  CMessageMarryResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageMarryResultNotify_descriptor_,
      CMessageMarryResultNotify::default_instance_,
      CMessageMarryResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageMarryResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageMarryResultNotify));
  CMessageBeginWeddingResultNofiy_descriptor_ = file->message_type(31);
  static const int CMessageBeginWeddingResultNofiy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResultNofiy, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResultNofiy, spousename_),
  };
  CMessageBeginWeddingResultNofiy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBeginWeddingResultNofiy_descriptor_,
      CMessageBeginWeddingResultNofiy::default_instance_,
      CMessageBeginWeddingResultNofiy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResultNofiy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBeginWeddingResultNofiy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBeginWeddingResultNofiy));
  CMessageGetCampMarriageInfoRequest_descriptor_ = file->message_type(32);
  static const int CMessageGetCampMarriageInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoRequest, entityid_),
  };
  CMessageGetCampMarriageInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCampMarriageInfoRequest_descriptor_,
      CMessageGetCampMarriageInfoRequest::default_instance_,
      CMessageGetCampMarriageInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCampMarriageInfoRequest));
  PBMarriageInfo_descriptor_ = file->message_type(33);
  static const int PBMarriageInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, weddingendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, commoallowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, timeused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, timeid_),
  };
  PBMarriageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMarriageInfo_descriptor_,
      PBMarriageInfo::default_instance_,
      PBMarriageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMarriageInfo));
  PBMarriageList_descriptor_ = file->message_type(34);
  static const int PBMarriageList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, marriageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, day_),
  };
  PBMarriageList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMarriageList_descriptor_,
      PBMarriageList::default_instance_,
      PBMarriageList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMarriageList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMarriageList));
  CMessageGetCampMarriageInfoResponse_descriptor_ = file->message_type(35);
  static const int CMessageGetCampMarriageInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoResponse, marriagelista_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoResponse, marriagelistb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoResponse, marriagelistc_),
  };
  CMessageGetCampMarriageInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetCampMarriageInfoResponse_descriptor_,
      CMessageGetCampMarriageInfoResponse::default_instance_,
      CMessageGetCampMarriageInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetCampMarriageInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetCampMarriageInfoResponse));
  CMessagePersonMarriedNotify_descriptor_ = file->message_type(36);
  static const int CMessagePersonMarriedNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriedNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriedNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriedNotify, serversequence_),
  };
  CMessagePersonMarriedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePersonMarriedNotify_descriptor_,
      CMessagePersonMarriedNotify::default_instance_,
      CMessagePersonMarriedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePersonMarriedNotify));
  CMessagePersonMarriageInfoNotify_descriptor_ = file->message_type(37);
  static const int CMessagePersonMarriageInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, spousename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, marriagestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, roleid_),
  };
  CMessagePersonMarriageInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePersonMarriageInfoNotify_descriptor_,
      CMessagePersonMarriageInfoNotify::default_instance_,
      CMessagePersonMarriageInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePersonMarriageInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePersonMarriageInfoNotify));
  CMessageSpouseDivorceNotify_descriptor_ = file->message_type(38);
  static const int CMessageSpouseDivorceNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpouseDivorceNotify, router_),
  };
  CMessageSpouseDivorceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSpouseDivorceNotify_descriptor_,
      CMessageSpouseDivorceNotify::default_instance_,
      CMessageSpouseDivorceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpouseDivorceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSpouseDivorceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSpouseDivorceNotify));
  CMessageUseSysInvitationRequest_descriptor_ = file->message_type(39);
  static const int CMessageUseSysInvitationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationRequest, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationRequest, receivedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationRequest, receivedid_),
  };
  CMessageUseSysInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseSysInvitationRequest_descriptor_,
      CMessageUseSysInvitationRequest::default_instance_,
      CMessageUseSysInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseSysInvitationRequest));
  CMessageUseSysInvitationResponse_descriptor_ = file->message_type(40);
  static const int CMessageUseSysInvitationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationResponse, errcode_),
  };
  CMessageUseSysInvitationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseSysInvitationResponse_descriptor_,
      CMessageUseSysInvitationResponse::default_instance_,
      CMessageUseSysInvitationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseSysInvitationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseSysInvitationResponse));
  CMessageTimeToPutKeepsakeNotify_descriptor_ = file->message_type(41);
  static const int CMessageTimeToPutKeepsakeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTimeToPutKeepsakeNotify, groomroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTimeToPutKeepsakeNotify, brideroleid_),
  };
  CMessageTimeToPutKeepsakeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTimeToPutKeepsakeNotify_descriptor_,
      CMessageTimeToPutKeepsakeNotify::default_instance_,
      CMessageTimeToPutKeepsakeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTimeToPutKeepsakeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTimeToPutKeepsakeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTimeToPutKeepsakeNotify));
  CMessageCancelWeddingRequest_descriptor_ = file->message_type(42);
  static const int CMessageCancelWeddingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingRequest, entityid_),
  };
  CMessageCancelWeddingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelWeddingRequest_descriptor_,
      CMessageCancelWeddingRequest::default_instance_,
      CMessageCancelWeddingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelWeddingRequest));
  CMessageCancelWeddingResponse_descriptor_ = file->message_type(43);
  static const int CMessageCancelWeddingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingResponse, errcode_),
  };
  CMessageCancelWeddingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelWeddingResponse_descriptor_,
      CMessageCancelWeddingResponse::default_instance_,
      CMessageCancelWeddingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelWeddingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelWeddingResponse));
  CMessageNewlyMarriedNotify_descriptor_ = file->message_type(44);
  static const int CMessageNewlyMarriedNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, weddingtimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, seversequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, brideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, groomid_),
  };
  CMessageNewlyMarriedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageNewlyMarriedNotify_descriptor_,
      CMessageNewlyMarriedNotify::default_instance_,
      CMessageNewlyMarriedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageNewlyMarriedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageNewlyMarriedNotify));
  CMessageWeddingEndNotify_descriptor_ = file->message_type(45);
  static const int CMessageWeddingEndNotify_offsets_[1] = {
  };
  CMessageWeddingEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWeddingEndNotify_descriptor_,
      CMessageWeddingEndNotify::default_instance_,
      CMessageWeddingEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWeddingEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWeddingEndNotify));
  CMessageStartKeepsakeExchangeRequest_descriptor_ = file->message_type(46);
  static const int CMessageStartKeepsakeExchangeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeRequest, entityid_),
  };
  CMessageStartKeepsakeExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartKeepsakeExchangeRequest_descriptor_,
      CMessageStartKeepsakeExchangeRequest::default_instance_,
      CMessageStartKeepsakeExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartKeepsakeExchangeRequest));
  CMessageStartKeepsakeExchangeResponse_descriptor_ = file->message_type(47);
  static const int CMessageStartKeepsakeExchangeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeResponse, errcode_),
  };
  CMessageStartKeepsakeExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStartKeepsakeExchangeResponse_descriptor_,
      CMessageStartKeepsakeExchangeResponse::default_instance_,
      CMessageStartKeepsakeExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStartKeepsakeExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStartKeepsakeExchangeResponse));
  CMessageStopKeepsakeExchangeRequest_descriptor_ = file->message_type(48);
  static const int CMessageStopKeepsakeExchangeRequest_offsets_[1] = {
  };
  CMessageStopKeepsakeExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStopKeepsakeExchangeRequest_descriptor_,
      CMessageStopKeepsakeExchangeRequest::default_instance_,
      CMessageStopKeepsakeExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStopKeepsakeExchangeRequest));
  CMessageStopKeepsakeExchangeResponse_descriptor_ = file->message_type(49);
  static const int CMessageStopKeepsakeExchangeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeResponse, errcode_),
  };
  CMessageStopKeepsakeExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStopKeepsakeExchangeResponse_descriptor_,
      CMessageStopKeepsakeExchangeResponse::default_instance_,
      CMessageStopKeepsakeExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStopKeepsakeExchangeResponse));
  CMessageStopKeepsakeExchangeNotify_descriptor_ = file->message_type(50);
  static const int CMessageStopKeepsakeExchangeNotify_offsets_[1] = {
  };
  CMessageStopKeepsakeExchangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageStopKeepsakeExchangeNotify_descriptor_,
      CMessageStopKeepsakeExchangeNotify::default_instance_,
      CMessageStopKeepsakeExchangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageStopKeepsakeExchangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageStopKeepsakeExchangeNotify));
  CMessageInvitationExchangeRequest_descriptor_ = file->message_type(51);
  static const int CMessageInvitationExchangeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeRequest, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeRequest, entityid_),
  };
  CMessageInvitationExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInvitationExchangeRequest_descriptor_,
      CMessageInvitationExchangeRequest::default_instance_,
      CMessageInvitationExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInvitationExchangeRequest));
  CMessageInvitationExchangeResponse_descriptor_ = file->message_type(52);
  static const int CMessageInvitationExchangeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeResponse, errcode_),
  };
  CMessageInvitationExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInvitationExchangeResponse_descriptor_,
      CMessageInvitationExchangeResponse::default_instance_,
      CMessageInvitationExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInvitationExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInvitationExchangeResponse));
  CMessageExchangeResultNotify_descriptor_ = file->message_type(53);
  static const int CMessageExchangeResultNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, groomroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, brideroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, groomitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, brideitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, groomname_),
  };
  CMessageExchangeResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExchangeResultNotify_descriptor_,
      CMessageExchangeResultNotify::default_instance_,
      CMessageExchangeResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExchangeResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExchangeResultNotify));
  CMessageTeleToWeddingNpcRequest_descriptor_ = file->message_type(54);
  static const int CMessageTeleToWeddingNpcRequest_offsets_[1] = {
  };
  CMessageTeleToWeddingNpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeleToWeddingNpcRequest_descriptor_,
      CMessageTeleToWeddingNpcRequest::default_instance_,
      CMessageTeleToWeddingNpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeleToWeddingNpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeleToWeddingNpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeleToWeddingNpcRequest));
  CMessageTeleToWeddingNpcResponse_descriptor_ = file->message_type(55);
  static const int CMessageTeleToWeddingNpcResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeleToWeddingNpcResponse, errcode_),
  };
  CMessageTeleToWeddingNpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageTeleToWeddingNpcResponse_descriptor_,
      CMessageTeleToWeddingNpcResponse::default_instance_,
      CMessageTeleToWeddingNpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeleToWeddingNpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageTeleToWeddingNpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageTeleToWeddingNpcResponse));
  CMessageReviewWeddingRequest_descriptor_ = file->message_type(56);
  static const int CMessageReviewWeddingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, dayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, entityid_),
  };
  CMessageReviewWeddingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReviewWeddingRequest_descriptor_,
      CMessageReviewWeddingRequest::default_instance_,
      CMessageReviewWeddingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReviewWeddingRequest));
  CMessageReviewWeddingResponse_descriptor_ = file->message_type(57);
  static const int CMessageReviewWeddingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingResponse, errcode_),
  };
  CMessageReviewWeddingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReviewWeddingResponse_descriptor_,
      CMessageReviewWeddingResponse::default_instance_,
      CMessageReviewWeddingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReviewWeddingResponse));
  CMessageReviewWeddingNotify_descriptor_ = file->message_type(58);
  static const int CMessageReviewWeddingNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, weddingtimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, weddingmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, brideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, groomid_),
  };
  CMessageReviewWeddingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReviewWeddingNotify_descriptor_,
      CMessageReviewWeddingNotify::default_instance_,
      CMessageReviewWeddingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReviewWeddingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReviewWeddingNotify));
  MarriageMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marriagemessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyMarryRequest_descriptor_, &CMessageApplyMarryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageApplyMarryResponse_descriptor_, &CMessageApplyMarryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMarryRequestNotify_descriptor_, &CMessageMarryRequestNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyMarryRequest_descriptor_, &CMessageReplyMarryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyMarryResponse_descriptor_, &CMessageReplyMarryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMarriageTipsNotify_descriptor_, &CMessageMarriageTipsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBeginWeddingRequest_descriptor_, &CMessageBeginWeddingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBeginWeddingResponse_descriptor_, &CMessageBeginWeddingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBeginWeddingNotify_descriptor_, &CMessageBeginWeddingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyBeginWeddingRequest_descriptor_, &CMessageReplyBeginWeddingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyBeginWeddingResponse_descriptor_, &CMessageReplyBeginWeddingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWeddingStartNotify_descriptor_, &CMessageWeddingStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterMarriageHallNotify_descriptor_, &CMessageEnterMarriageHallNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyEnterMarriageHallRequest_descriptor_, &CMessageReplyEnterMarriageHallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReplyEnterMarriageHallResponse_descriptor_, &CMessageReplyEnterMarriageHallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNewlyEnterHallRequest_descriptor_, &CMessageNewlyEnterHallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNewlyEnterHallResponse_descriptor_, &CMessageNewlyEnterHallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGuestEnterHallRequest_descriptor_, &CMessageGuestEnterHallRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGuestEnterHallResponse_descriptor_, &CMessageGuestEnterHallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBaitangRequest_descriptor_, &CMessageBaitangRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBaitangResponse_descriptor_, &CMessageBaitangResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBaitangNotify_descriptor_, &CMessageBaitangNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePutKeepSakeRequest_descriptor_, &CMessagePutKeepSakeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePutKeepSakeResponse_descriptor_, &CMessagePutKeepSakeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExchangeKeepsakeRequest_descriptor_, &CMessageExchangeKeepsakeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExchangeKeepsakeResponse_descriptor_, &CMessageExchangeKeepsakeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExchangeKeepsakeNotify_descriptor_, &CMessageExchangeKeepsakeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDivorceRequest_descriptor_, &CMessageDivorceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDivorceResponse_descriptor_, &CMessageDivorceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDivorceNotify_descriptor_, &CMessageDivorceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageMarryResultNotify_descriptor_, &CMessageMarryResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBeginWeddingResultNofiy_descriptor_, &CMessageBeginWeddingResultNofiy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCampMarriageInfoRequest_descriptor_, &CMessageGetCampMarriageInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMarriageInfo_descriptor_, &PBMarriageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMarriageList_descriptor_, &PBMarriageList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetCampMarriageInfoResponse_descriptor_, &CMessageGetCampMarriageInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePersonMarriedNotify_descriptor_, &CMessagePersonMarriedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePersonMarriageInfoNotify_descriptor_, &CMessagePersonMarriageInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSpouseDivorceNotify_descriptor_, &CMessageSpouseDivorceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseSysInvitationRequest_descriptor_, &CMessageUseSysInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseSysInvitationResponse_descriptor_, &CMessageUseSysInvitationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTimeToPutKeepsakeNotify_descriptor_, &CMessageTimeToPutKeepsakeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelWeddingRequest_descriptor_, &CMessageCancelWeddingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelWeddingResponse_descriptor_, &CMessageCancelWeddingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageNewlyMarriedNotify_descriptor_, &CMessageNewlyMarriedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWeddingEndNotify_descriptor_, &CMessageWeddingEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartKeepsakeExchangeRequest_descriptor_, &CMessageStartKeepsakeExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStartKeepsakeExchangeResponse_descriptor_, &CMessageStartKeepsakeExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStopKeepsakeExchangeRequest_descriptor_, &CMessageStopKeepsakeExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStopKeepsakeExchangeResponse_descriptor_, &CMessageStopKeepsakeExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageStopKeepsakeExchangeNotify_descriptor_, &CMessageStopKeepsakeExchangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInvitationExchangeRequest_descriptor_, &CMessageInvitationExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInvitationExchangeResponse_descriptor_, &CMessageInvitationExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExchangeResultNotify_descriptor_, &CMessageExchangeResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeleToWeddingNpcRequest_descriptor_, &CMessageTeleToWeddingNpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageTeleToWeddingNpcResponse_descriptor_, &CMessageTeleToWeddingNpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReviewWeddingRequest_descriptor_, &CMessageReviewWeddingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReviewWeddingResponse_descriptor_, &CMessageReviewWeddingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReviewWeddingNotify_descriptor_, &CMessageReviewWeddingNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx() {
  delete CMessageApplyMarryRequest::default_instance_;
  delete CMessageApplyMarryRequest_reflection_;
  delete CMessageApplyMarryResponse::default_instance_;
  delete CMessageApplyMarryResponse_reflection_;
  delete CMessageMarryRequestNotify::default_instance_;
  delete CMessageMarryRequestNotify_reflection_;
  delete CMessageReplyMarryRequest::default_instance_;
  delete CMessageReplyMarryRequest_reflection_;
  delete CMessageReplyMarryResponse::default_instance_;
  delete CMessageReplyMarryResponse_reflection_;
  delete CMessageMarriageTipsNotify::default_instance_;
  delete CMessageMarriageTipsNotify_reflection_;
  delete CMessageBeginWeddingRequest::default_instance_;
  delete CMessageBeginWeddingRequest_reflection_;
  delete CMessageBeginWeddingResponse::default_instance_;
  delete CMessageBeginWeddingResponse_reflection_;
  delete CMessageBeginWeddingNotify::default_instance_;
  delete CMessageBeginWeddingNotify_reflection_;
  delete CMessageReplyBeginWeddingRequest::default_instance_;
  delete CMessageReplyBeginWeddingRequest_reflection_;
  delete CMessageReplyBeginWeddingResponse::default_instance_;
  delete CMessageReplyBeginWeddingResponse_reflection_;
  delete CMessageWeddingStartNotify::default_instance_;
  delete CMessageWeddingStartNotify_reflection_;
  delete CMessageEnterMarriageHallNotify::default_instance_;
  delete CMessageEnterMarriageHallNotify_reflection_;
  delete CMessageReplyEnterMarriageHallRequest::default_instance_;
  delete CMessageReplyEnterMarriageHallRequest_reflection_;
  delete CMessageReplyEnterMarriageHallResponse::default_instance_;
  delete CMessageReplyEnterMarriageHallResponse_reflection_;
  delete CMessageNewlyEnterHallRequest::default_instance_;
  delete CMessageNewlyEnterHallRequest_reflection_;
  delete CMessageNewlyEnterHallResponse::default_instance_;
  delete CMessageNewlyEnterHallResponse_reflection_;
  delete CMessageGuestEnterHallRequest::default_instance_;
  delete CMessageGuestEnterHallRequest_reflection_;
  delete CMessageGuestEnterHallResponse::default_instance_;
  delete CMessageGuestEnterHallResponse_reflection_;
  delete CMessageBaitangRequest::default_instance_;
  delete CMessageBaitangRequest_reflection_;
  delete CMessageBaitangResponse::default_instance_;
  delete CMessageBaitangResponse_reflection_;
  delete CMessageBaitangNotify::default_instance_;
  delete CMessageBaitangNotify_reflection_;
  delete CMessagePutKeepSakeRequest::default_instance_;
  delete CMessagePutKeepSakeRequest_reflection_;
  delete CMessagePutKeepSakeResponse::default_instance_;
  delete CMessagePutKeepSakeResponse_reflection_;
  delete CMessageExchangeKeepsakeRequest::default_instance_;
  delete CMessageExchangeKeepsakeRequest_reflection_;
  delete CMessageExchangeKeepsakeResponse::default_instance_;
  delete CMessageExchangeKeepsakeResponse_reflection_;
  delete CMessageExchangeKeepsakeNotify::default_instance_;
  delete CMessageExchangeKeepsakeNotify_reflection_;
  delete CMessageDivorceRequest::default_instance_;
  delete CMessageDivorceRequest_reflection_;
  delete CMessageDivorceResponse::default_instance_;
  delete CMessageDivorceResponse_reflection_;
  delete CMessageDivorceNotify::default_instance_;
  delete CMessageDivorceNotify_reflection_;
  delete CMessageMarryResultNotify::default_instance_;
  delete CMessageMarryResultNotify_reflection_;
  delete CMessageBeginWeddingResultNofiy::default_instance_;
  delete CMessageBeginWeddingResultNofiy_reflection_;
  delete CMessageGetCampMarriageInfoRequest::default_instance_;
  delete CMessageGetCampMarriageInfoRequest_reflection_;
  delete PBMarriageInfo::default_instance_;
  delete PBMarriageInfo_reflection_;
  delete PBMarriageList::default_instance_;
  delete PBMarriageList_reflection_;
  delete CMessageGetCampMarriageInfoResponse::default_instance_;
  delete CMessageGetCampMarriageInfoResponse_reflection_;
  delete CMessagePersonMarriedNotify::default_instance_;
  delete CMessagePersonMarriedNotify_reflection_;
  delete CMessagePersonMarriageInfoNotify::default_instance_;
  delete CMessagePersonMarriageInfoNotify_reflection_;
  delete CMessageSpouseDivorceNotify::default_instance_;
  delete CMessageSpouseDivorceNotify_reflection_;
  delete CMessageUseSysInvitationRequest::default_instance_;
  delete CMessageUseSysInvitationRequest_reflection_;
  delete CMessageUseSysInvitationResponse::default_instance_;
  delete CMessageUseSysInvitationResponse_reflection_;
  delete CMessageTimeToPutKeepsakeNotify::default_instance_;
  delete CMessageTimeToPutKeepsakeNotify_reflection_;
  delete CMessageCancelWeddingRequest::default_instance_;
  delete CMessageCancelWeddingRequest_reflection_;
  delete CMessageCancelWeddingResponse::default_instance_;
  delete CMessageCancelWeddingResponse_reflection_;
  delete CMessageNewlyMarriedNotify::default_instance_;
  delete CMessageNewlyMarriedNotify_reflection_;
  delete CMessageWeddingEndNotify::default_instance_;
  delete CMessageWeddingEndNotify_reflection_;
  delete CMessageStartKeepsakeExchangeRequest::default_instance_;
  delete CMessageStartKeepsakeExchangeRequest_reflection_;
  delete CMessageStartKeepsakeExchangeResponse::default_instance_;
  delete CMessageStartKeepsakeExchangeResponse_reflection_;
  delete CMessageStopKeepsakeExchangeRequest::default_instance_;
  delete CMessageStopKeepsakeExchangeRequest_reflection_;
  delete CMessageStopKeepsakeExchangeResponse::default_instance_;
  delete CMessageStopKeepsakeExchangeResponse_reflection_;
  delete CMessageStopKeepsakeExchangeNotify::default_instance_;
  delete CMessageStopKeepsakeExchangeNotify_reflection_;
  delete CMessageInvitationExchangeRequest::default_instance_;
  delete CMessageInvitationExchangeRequest_reflection_;
  delete CMessageInvitationExchangeResponse::default_instance_;
  delete CMessageInvitationExchangeResponse_reflection_;
  delete CMessageExchangeResultNotify::default_instance_;
  delete CMessageExchangeResultNotify_reflection_;
  delete CMessageTeleToWeddingNpcRequest::default_instance_;
  delete CMessageTeleToWeddingNpcRequest_reflection_;
  delete CMessageTeleToWeddingNpcResponse::default_instance_;
  delete CMessageTeleToWeddingNpcResponse_reflection_;
  delete CMessageReviewWeddingRequest::default_instance_;
  delete CMessageReviewWeddingRequest_reflection_;
  delete CMessageReviewWeddingResponse::default_instance_;
  delete CMessageReviewWeddingResponse_reflection_;
  delete CMessageReviewWeddingNotify::default_instance_;
  delete CMessageReviewWeddingNotify_reflection_;
}

void protobuf_AddDesc_marriagemessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_property_5fpb_2ehxx();
  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026marriagemessage_pb.hxx\032\017property_pb.hx"
    "x\032\022coremessage_pb.hxx\"x\n\031CMessageApplyMa"
    "rryRequest\022\016\n\006TimeID\030\001 \001(\r\022\025\n\rWeddingMod"
    "ule\030\002 \001(\r\022\r\n\005DayID\030\003 \001(\r\022\023\n\013HoldWedding\030"
    "\004 \001(\r\022\020\n\010EntityID\030\005 \001(\r\"-\n\032CMessageApply"
    "MarryResponse\022\017\n\007Errcode\030\001 \001(\r\"\222\001\n\032CMess"
    "ageMarryRequestNotify\022\016\n\006RoleID\030\001 \001(\r\022\020\n"
    "\010RoleName\030\002 \001(\t\022\014\n\004Year\030\003 \001(\r\022\r\n\005Month\030\004"
    " \001(\r\022\013\n\003Day\030\005 \001(\r\022\021\n\tBeginTime\030\006 \001(\r\022\025\n\r"
    "WeddingModule\030\007 \001(\r\"=\n\031CMessageReplyMarr"
    "yRequest\022\016\n\006Result\030\001 \001(\r\022\020\n\010EntityID\030\002 \001"
    "(\r\"i\n\032CMessageReplyMarryResponse\022\017\n\007Errc"
    "ode\030\001 \001(\r\022\016\n\006Result\030\002 \001(\r\022\022\n\nSpouseName\030"
    "\003 \001(\t\022\026\n\016MarriageStatus\030\004 \001(\r\"H\n\032CMessag"
    "eMarriageTipsNotify\022\023\n\013WeddingTime\030\001 \001(\r"
    "\022\025\n\rWeddingStatus\030\002 \001(\r\"/\n\033CMessageBegin"
    "WeddingRequest\022\020\n\010EntityID\030\001 \001(\r\"/\n\034CMes"
    "sageBeginWeddingResponse\022\017\n\007Errcode\030\001 \001("
    "\r\"\034\n\032CMessageBeginWeddingNotify\"D\n CMess"
    "ageReplyBeginWeddingRequest\022\016\n\006Result\030\001 "
    "\001(\r\022\020\n\010EntityID\030\002 \001(\r\"4\n!CMessageReplyBe"
    "ginWeddingResponse\022\017\n\007Errcode\030\001 \001(\r\"\246\001\n\032"
    "CMessageWeddingStartNotify\022\021\n\tGroomName\030"
    "\001 \001(\t\022\021\n\tBrideName\030\002 \001(\t\022\031\n\021WeddingTimeL"
    "ength\030\003 \001(\r\022\025\n\rWeddingModule\030\004 \001(\r\022\017\n\007Gr"
    "oomID\030\005 \001(\r\022\017\n\007BrideID\030\006 \001(\r\022\016\n\006CampID\030\007"
    " \001(\r\"!\n\037CMessageEnterMarriageHallNotify\""
    "7\n%CMessageReplyEnterMarriageHallRequest"
    "\022\016\n\006Result\030\001 \001(\r\"9\n&CMessageReplyEnterMa"
    "rriageHallResponse\022\017\n\007Errcode\030\001 \001(\r\"1\n\035C"
    "MessageNewlyEnterHallRequest\022\020\n\010EntityID"
    "\030\001 \001(\r\"\\\n\036CMessageNewlyEnterHallResponse"
    "\022\017\n\007Errcode\030\001 \001(\r\022\025\n\rWeddingModule\030\002 \001(\r"
    "\022\022\n\nBaitangEnd\030\003 \001(\r\"1\n\035CMessageGuestEnt"
    "erHallRequest\022\020\n\010EntityID\030\001 \001(\r\"1\n\036CMess"
    "ageGuestEnterHallResponse\022\017\n\007Errcode\030\001 \001"
    "(\r\"*\n\026CMessageBaitangRequest\022\020\n\010EntityID"
    "\030\001 \001(\r\"*\n\027CMessageBaitangResponse\022\017\n\007Err"
    "code\030\001 \001(\r\"k\n\025CMessageBaitangNotify\022\021\n\tG"
    "roomName\030\001 \001(\t\022\021\n\tBrideName\030\002 \001(\t\022\025\n\rGro"
    "omEntityID\030\003 \001(\r\022\025\n\rBrideEntityID\030\004 \001(\r\""
    "3\n\032CMessagePutKeepSakeRequest\022\025\n\rKeepsak"
    "eIndex\030\001 \001(\r\"=\n\033CMessagePutKeepSakeRespo"
    "nse\022\017\n\007Errcode\030\001 \001(\r\022\r\n\005Index\030\002 \001(\r\"!\n\037C"
    "MessageExchangeKeepsakeRequest\"3\n CMessa"
    "geExchangeKeepsakeResponse\022\017\n\007Errcode\030\001 "
    "\001(\r\"\222\001\n\036CMessageExchangeKeepsakeNotify\022\021"
    "\n\tGroomName\030\001 \001(\t\022$\n\rBrideKeepsake\030\002 \001(\013"
    "2\r.PBItemObject\022\021\n\tBrideName\030\003 \001(\t\022$\n\rGr"
    "oomKeepsake\030\004 \001(\0132\r.PBItemObject\"*\n\026CMes"
    "sageDivorceRequest\022\020\n\010EntityID\030\001 \001(\r\"*\n\027"
    "CMessageDivorceResponse\022\017\n\007Errcode\030\001 \001(\r"
    "\"g\n\025CMessageDivorceNotify\022\021\n\tGroomName\030\001"
    " \001(\t\022\023\n\013GroomCharID\030\002 \001(\r\022\021\n\tBrideName\030\003"
    " \001(\t\022\023\n\013BrideCharID\030\004 \001(\r\"l\n\031CMessageMar"
    "ryResultNotify\022\016\n\006Result\030\001 \001(\r\022\022\n\nSpouse"
    "Name\030\002 \001(\t\022\026\n\016MarriageStatus\030\003 \001(\r\022\023\n\013We"
    "ddingTime\030\004 \001(\r\"E\n\037CMessageBeginWeddingR"
    "esultNofiy\022\016\n\006Result\030\001 \001(\r\022\022\n\nSpouseName"
    "\030\002 \001(\t\"6\n\"CMessageGetCampMarriageInfoReq"
    "uest\022\020\n\010EntityID\030\001 \001(\r\"\233\001\n\016PBMarriageInf"
    "o\022\021\n\tGroomName\030\001 \001(\t\022\021\n\tBrideName\030\002 \001(\t\022"
    "\023\n\013WeddingTime\030\003 \001(\r\022\026\n\016WeddingEndTime\030\004"
    " \001(\r\022\024\n\014CommoAllowed\030\005 \001(\r\022\020\n\010TimeUsed\030\006"
    " \001(\r\022\016\n\006TimeID\030\007 \001(\r\"a\n\016PBMarriageList\022%"
    "\n\014MarriageInfo\030\001 \003(\0132\017.PBMarriageInfo\022\014\n"
    "\004Year\030\002 \001(\r\022\r\n\005Month\030\003 \001(\r\022\013\n\003Day\030\004 \001(\r\""
    "\235\001\n#CMessageGetCampMarriageInfoResponse\022"
    "&\n\rMarriageListA\030\001 \001(\0132\017.PBMarriageList\022"
    "&\n\rMarriageListB\030\002 \001(\0132\017.PBMarriageList\022"
    "&\n\rMarriageListC\030\003 \001(\0132\017.PBMarriageList\""
    "[\n\033CMessagePersonMarriedNotify\022\021\n\tGroomN"
    "ame\030\001 \001(\t\022\021\n\tBrideName\030\002 \001(\t\022\026\n\016ServerSe"
    "quence\030\003 \001(\r\"s\n CMessagePersonMarriageIn"
    "foNotify\022\022\n\nSpouseName\030\001 \001(\t\022\026\n\016Marriage"
    "Status\030\002 \001(\r\022\023\n\013WeddingTime\030\003 \001(\r\022\016\n\006Rol"
    "eID\030\004 \001(\r\">\n\033CMessageSpouseDivorceNotify"
    "\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\"^\n\037CMe"
    "ssageUseSysInvitationRequest\022\021\n\tItemInde"
    "x\030\001 \001(\r\022\024\n\014ReceivedName\030\002 \001(\t\022\022\n\nReceive"
    "dID\030\003 \001(\r\"3\n CMessageUseSysInvitationRes"
    "ponse\022\017\n\007Errcode\030\001 \001(\r\"K\n\037CMessageTimeTo"
    "PutKeepsakeNotify\022\023\n\013GroomRoleID\030\001 \001(\r\022\023"
    "\n\013BrideRoleID\030\002 \001(\r\"0\n\034CMessageCancelWed"
    "dingRequest\022\020\n\010EntityID\030\001 \001(\r\"0\n\035CMessag"
    "eCancelWeddingResponse\022\017\n\007Errcode\030\002 \001(\r\""
    "\322\001\n\032CMessageNewlyMarriedNotify\022\021\n\tBrideN"
    "ame\030\001 \001(\t\022\021\n\tGroomName\030\002 \001(\t\022\023\n\013WeddingT"
    "ime\030\003 \001(\r\022\031\n\021WeddingTimeLength\030\004 \001(\r\022\025\n\r"
    "WeddingModule\030\005 \001(\r\022\016\n\006CampID\030\006 \001(\r\022\025\n\rS"
    "everSequence\030\007 \001(\r\022\017\n\007BrideID\030\010 \001(\r\022\017\n\007G"
    "roomID\030\t \001(\r\"\032\n\030CMessageWeddingEndNotify"
    "\"8\n$CMessageStartKeepsakeExchangeRequest"
    "\022\020\n\010EntityID\030\001 \001(\r\"8\n%CMessageStartKeeps"
    "akeExchangeResponse\022\017\n\007Errcode\030\001 \001(\r\"%\n#"
    "CMessageStopKeepsakeExchangeRequest\"7\n$C"
    "MessageStopKeepsakeExchangeResponse\022\017\n\007E"
    "rrcode\030\001 \001(\r\"$\n\"CMessageStopKeepsakeExch"
    "angeNotify\"H\n!CMessageInvitationExchange"
    "Request\022\021\n\tItemIndex\030\001 \001(\r\022\020\n\010EntityID\030\002"
    " \001(\r\"5\n\"CMessageInvitationExchangeRespon"
    "se\022\017\n\007Errcode\030\001 \001(\r\"\230\001\n\034CMessageExchange"
    "ResultNotify\022\023\n\013GroomRoleID\030\001 \001(\r\022\023\n\013Bri"
    "deRoleID\030\002 \001(\r\022\023\n\013GroomItemID\030\003 \001(\r\022\023\n\013B"
    "rideItemID\030\004 \001(\r\022\021\n\tBrideName\030\005 \001(\t\022\021\n\tG"
    "roomName\030\006 \001(\t\"!\n\037CMessageTeleToWeddingN"
    "pcRequest\"3\n CMessageTeleToWeddingNpcRes"
    "ponse\022\017\n\007Errcode\030\001 \001(\r\"f\n\034CMessageReview"
    "WeddingRequest\022\016\n\006TimeID\030\001 \001(\r\022\025\n\rWeddin"
    "gModule\030\002 \001(\r\022\r\n\005DayID\030\003 \001(\r\022\020\n\010EntityID"
    "\030\004 \001(\r\"0\n\035CMessageReviewWeddingResponse\022"
    "\017\n\007Errcode\030\006 \001(\r\"\274\001\n\033CMessageReviewWeddi"
    "ngNotify\022\021\n\tBrideName\030\001 \001(\t\022\021\n\tGroomName"
    "\030\002 \001(\t\022\023\n\013WeddingTime\030\003 \001(\r\022\031\n\021WeddingTi"
    "meLength\030\004 \001(\r\022\025\n\rWeddingModule\030\005 \001(\r\022\016\n"
    "\006CampID\030\006 \001(\r\022\017\n\007BrideID\030\007 \001(\r\022\017\n\007GroomI"
    "D\030\010 \001(\r*\363\020\n\021MarriageMessageID\022\026\n\020MARRIAG"
    "E_MESSAGE\020\200\270\001\022\037\n\031ID_C2S_REQUEST_APPLYMAR"
    "RY\020\201\270\001\022 \n\032ID_S2C_RESPONSE_APPLYMARRY\020\202\270\001"
    "\022 \n\032ID_S2C_NOTIFY_MARRYREQUEST\020\203\270\001\022\037\n\031ID"
    "_C2S_REQUEST_REPLYMARRY\020\204\270\001\022 \n\032ID_S2C_RE"
    "SPONSE_REPLYMARRY\020\205\270\001\022 \n\032ID_S2C_NOTIFY_M"
    "ARRIAGETIPS\020\206\270\001\022!\n\033ID_C2S_REQUEST_BEGINW"
    "EDDING\020\207\270\001\022\"\n\034ID_S2C_RESPONSE_BEGINWEDDI"
    "NG\020\210\270\001\022 \n\032ID_S2C_NOTIFY_BEGINWEDDING\020\211\270\001"
    "\022&\n ID_C2S_REQUEST_REPLYBEGINWEDDING\020\212\270\001"
    "\022\'\n!ID_S2C_RESPONSE_REPLYBEGINWEDDING\020\213\270"
    "\001\022 \n\032ID_S2C_NOTIFY_WEDDINGSTART\020\214\270\001\022%\n\037I"
    "D_S2C_NOTIFY_ENTERMARRIAGEHALL\020\215\270\001\022+\n%ID"
    "_C2S_REQUEST_REPLYENTERMARRIAGEHALL\020\216\270\001\022"
    ",\n&ID_S2C_RESPONSE_REPLYENTERMARRIAGEHAL"
    "L\020\217\270\001\022&\n ID_C2S_REQUEST_NEWLYWEDENTERHAL"
    "L\020\220\270\001\022\'\n!ID_S2C_RESPONSE_NEWLYWEDENTERHA"
    "LL\020\221\270\001\022#\n\035ID_C2S_REQUEST_GUESTENTERHALL\020"
    "\222\270\001\022$\n\036ID_S2C_RESPONSE_GUESTENTERHALL\020\223\270"
    "\001\022\034\n\026ID_C2S_REQUEST_BAITANG\020\224\270\001\022\035\n\027ID_S2"
    "C_RESPONSE_BAITANG\020\225\270\001\022\033\n\025ID_S2C_NOTIFY_"
    "BAITANG\020\226\270\001\022 \n\032ID_C2S_REQUEST_PUTKEEPSAK"
    "E\020\227\270\001\022!\n\033ID_S2C_RESPONSE_PUTKEEPSAKE\020\230\270\001"
    "\022$\n\036ID_C2S_REQUEST_EXCHANGKEEPSAKE\020\231\270\001\022%"
    "\n\037ID_S2C_RESPONSE_EXCHANGKEEPSAKE\020\232\270\001\022$\n"
    "\036ID_S2C_NOTIFY_EXCHANGEKEEPSAKE\020\233\270\001\022\034\n\026I"
    "D_C2S_REQUEST_DIVORCE\020\234\270\001\022\035\n\027ID_S2C_RESP"
    "ONSE_DIVORCE\020\235\270\001\022\033\n\025ID_S2C_NOTIFY_DIVORC"
    "E\020\236\270\001\022\037\n\031ID_S2C_NOTIFY_MARRYRESULT\020\237\270\001\022%"
    "\n\037ID_S2C_NOTIFY_BEGINWEDINGRESULT\020\240\270\001\022(\n"
    "\"ID_C2S_REQUEST_GETCAMPMARRAIGEINFO\020\241\270\001\022"
    ")\n#ID_S2C_RESPONSE_GETCAMPMARRIAGEINFO\020\242"
    "\270\001\022!\n\033ID_S2C_NOTIFY_PERSONMARRIED\020\243\270\001\022&\n"
    " ID_S2C_NOTIFY_PERSONMARRIAGEINFO\020\244\270\001\022!\n"
    "\033ID_S2C_NOTIFY_SPOUSEDIVORCE\020\245\274\001\022%\n\037ID_C"
    "2S_REQUEST_USESYSINVITATION\020\246\270\001\022&\n ID_S2"
    "C_RESPONSE_USESYSINVITATION\020\247\270\001\022%\n\037ID_S2"
    "C_NOTIFY_TIMETOPUTKEEPSAKE\020\250\270\001\022\"\n\034ID_C2S"
    "_REQUEST_CANCELWEDDING\020\251\270\001\022#\n\035ID_S2C_RES"
    "PONSE_CANCELWEDDING\020\260\270\001\022 \n\032ID_S2C_NOTIFY"
    "_NEWLYMARRIED\020\261\270\001\022\036\n\030ID_S2C_NOTIFY_WEDDI"
    "NGEND\020\262\270\001\022*\n$ID_C2S_REQUEST_STARTKEEPSAK"
    "EEXCHANGE\020\263\270\001\022+\n%ID_S2C_RESPONSE_STARTKE"
    "EPSAKEEXCHANGE\020\264\270\001\022)\n#ID_C2S_REQUEST_STO"
    "PKEEPSAKEEXCHANGE\020\265\270\001\022*\n$ID_S2C_RESPONSE"
    "_STOPKEEPSAKEEXCHANGE\020\266\270\001\022(\n\"ID_S2C_NOTI"
    "FY_STOPKEEPSAKEEXCHANGE\020\267\270\001\022\'\n!ID_C2S_RE"
    "QUEST_INVITATIONEXCHANGE\020\270\270\001\022(\n\"ID_S2C_R"
    "ESPONSE_INVITATIONEXCHANGE\020\271\270\001\022\"\n\034ID_S2C"
    "_NOTIFY_EXCHANGERESULT\020\272\270\001\022%\n\037ID_C2S_REQ"
    "UEST_TELETOWEDDINGNPC\020\273\270\001\022&\n ID_S2C_RESP"
    "ONSE_TELETOWEDDINGNPC\020\274\270\001\022\"\n\034ID_C2S_REQU"
    "EST_REVIEWWEDDING\020\275\270\001\022#\n\035ID_S2C_RESPONSE"
    "_REVIEWWEDDING\020\276\270\001\022!\n\033ID_S2C_NOTIFY_REVI"
    "EWWEDDING\020\277\270\001B\002H\001", 6817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marriagemessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageApplyMarryRequest::default_instance_ = new CMessageApplyMarryRequest();
  CMessageApplyMarryResponse::default_instance_ = new CMessageApplyMarryResponse();
  CMessageMarryRequestNotify::default_instance_ = new CMessageMarryRequestNotify();
  CMessageReplyMarryRequest::default_instance_ = new CMessageReplyMarryRequest();
  CMessageReplyMarryResponse::default_instance_ = new CMessageReplyMarryResponse();
  CMessageMarriageTipsNotify::default_instance_ = new CMessageMarriageTipsNotify();
  CMessageBeginWeddingRequest::default_instance_ = new CMessageBeginWeddingRequest();
  CMessageBeginWeddingResponse::default_instance_ = new CMessageBeginWeddingResponse();
  CMessageBeginWeddingNotify::default_instance_ = new CMessageBeginWeddingNotify();
  CMessageReplyBeginWeddingRequest::default_instance_ = new CMessageReplyBeginWeddingRequest();
  CMessageReplyBeginWeddingResponse::default_instance_ = new CMessageReplyBeginWeddingResponse();
  CMessageWeddingStartNotify::default_instance_ = new CMessageWeddingStartNotify();
  CMessageEnterMarriageHallNotify::default_instance_ = new CMessageEnterMarriageHallNotify();
  CMessageReplyEnterMarriageHallRequest::default_instance_ = new CMessageReplyEnterMarriageHallRequest();
  CMessageReplyEnterMarriageHallResponse::default_instance_ = new CMessageReplyEnterMarriageHallResponse();
  CMessageNewlyEnterHallRequest::default_instance_ = new CMessageNewlyEnterHallRequest();
  CMessageNewlyEnterHallResponse::default_instance_ = new CMessageNewlyEnterHallResponse();
  CMessageGuestEnterHallRequest::default_instance_ = new CMessageGuestEnterHallRequest();
  CMessageGuestEnterHallResponse::default_instance_ = new CMessageGuestEnterHallResponse();
  CMessageBaitangRequest::default_instance_ = new CMessageBaitangRequest();
  CMessageBaitangResponse::default_instance_ = new CMessageBaitangResponse();
  CMessageBaitangNotify::default_instance_ = new CMessageBaitangNotify();
  CMessagePutKeepSakeRequest::default_instance_ = new CMessagePutKeepSakeRequest();
  CMessagePutKeepSakeResponse::default_instance_ = new CMessagePutKeepSakeResponse();
  CMessageExchangeKeepsakeRequest::default_instance_ = new CMessageExchangeKeepsakeRequest();
  CMessageExchangeKeepsakeResponse::default_instance_ = new CMessageExchangeKeepsakeResponse();
  CMessageExchangeKeepsakeNotify::default_instance_ = new CMessageExchangeKeepsakeNotify();
  CMessageDivorceRequest::default_instance_ = new CMessageDivorceRequest();
  CMessageDivorceResponse::default_instance_ = new CMessageDivorceResponse();
  CMessageDivorceNotify::default_instance_ = new CMessageDivorceNotify();
  CMessageMarryResultNotify::default_instance_ = new CMessageMarryResultNotify();
  CMessageBeginWeddingResultNofiy::default_instance_ = new CMessageBeginWeddingResultNofiy();
  CMessageGetCampMarriageInfoRequest::default_instance_ = new CMessageGetCampMarriageInfoRequest();
  PBMarriageInfo::default_instance_ = new PBMarriageInfo();
  PBMarriageList::default_instance_ = new PBMarriageList();
  CMessageGetCampMarriageInfoResponse::default_instance_ = new CMessageGetCampMarriageInfoResponse();
  CMessagePersonMarriedNotify::default_instance_ = new CMessagePersonMarriedNotify();
  CMessagePersonMarriageInfoNotify::default_instance_ = new CMessagePersonMarriageInfoNotify();
  CMessageSpouseDivorceNotify::default_instance_ = new CMessageSpouseDivorceNotify();
  CMessageUseSysInvitationRequest::default_instance_ = new CMessageUseSysInvitationRequest();
  CMessageUseSysInvitationResponse::default_instance_ = new CMessageUseSysInvitationResponse();
  CMessageTimeToPutKeepsakeNotify::default_instance_ = new CMessageTimeToPutKeepsakeNotify();
  CMessageCancelWeddingRequest::default_instance_ = new CMessageCancelWeddingRequest();
  CMessageCancelWeddingResponse::default_instance_ = new CMessageCancelWeddingResponse();
  CMessageNewlyMarriedNotify::default_instance_ = new CMessageNewlyMarriedNotify();
  CMessageWeddingEndNotify::default_instance_ = new CMessageWeddingEndNotify();
  CMessageStartKeepsakeExchangeRequest::default_instance_ = new CMessageStartKeepsakeExchangeRequest();
  CMessageStartKeepsakeExchangeResponse::default_instance_ = new CMessageStartKeepsakeExchangeResponse();
  CMessageStopKeepsakeExchangeRequest::default_instance_ = new CMessageStopKeepsakeExchangeRequest();
  CMessageStopKeepsakeExchangeResponse::default_instance_ = new CMessageStopKeepsakeExchangeResponse();
  CMessageStopKeepsakeExchangeNotify::default_instance_ = new CMessageStopKeepsakeExchangeNotify();
  CMessageInvitationExchangeRequest::default_instance_ = new CMessageInvitationExchangeRequest();
  CMessageInvitationExchangeResponse::default_instance_ = new CMessageInvitationExchangeResponse();
  CMessageExchangeResultNotify::default_instance_ = new CMessageExchangeResultNotify();
  CMessageTeleToWeddingNpcRequest::default_instance_ = new CMessageTeleToWeddingNpcRequest();
  CMessageTeleToWeddingNpcResponse::default_instance_ = new CMessageTeleToWeddingNpcResponse();
  CMessageReviewWeddingRequest::default_instance_ = new CMessageReviewWeddingRequest();
  CMessageReviewWeddingResponse::default_instance_ = new CMessageReviewWeddingResponse();
  CMessageReviewWeddingNotify::default_instance_ = new CMessageReviewWeddingNotify();
  CMessageApplyMarryRequest::default_instance_->InitAsDefaultInstance();
  CMessageApplyMarryResponse::default_instance_->InitAsDefaultInstance();
  CMessageMarryRequestNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyMarryRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyMarryResponse::default_instance_->InitAsDefaultInstance();
  CMessageMarriageTipsNotify::default_instance_->InitAsDefaultInstance();
  CMessageBeginWeddingRequest::default_instance_->InitAsDefaultInstance();
  CMessageBeginWeddingResponse::default_instance_->InitAsDefaultInstance();
  CMessageBeginWeddingNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyBeginWeddingRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyBeginWeddingResponse::default_instance_->InitAsDefaultInstance();
  CMessageWeddingStartNotify::default_instance_->InitAsDefaultInstance();
  CMessageEnterMarriageHallNotify::default_instance_->InitAsDefaultInstance();
  CMessageReplyEnterMarriageHallRequest::default_instance_->InitAsDefaultInstance();
  CMessageReplyEnterMarriageHallResponse::default_instance_->InitAsDefaultInstance();
  CMessageNewlyEnterHallRequest::default_instance_->InitAsDefaultInstance();
  CMessageNewlyEnterHallResponse::default_instance_->InitAsDefaultInstance();
  CMessageGuestEnterHallRequest::default_instance_->InitAsDefaultInstance();
  CMessageGuestEnterHallResponse::default_instance_->InitAsDefaultInstance();
  CMessageBaitangRequest::default_instance_->InitAsDefaultInstance();
  CMessageBaitangResponse::default_instance_->InitAsDefaultInstance();
  CMessageBaitangNotify::default_instance_->InitAsDefaultInstance();
  CMessagePutKeepSakeRequest::default_instance_->InitAsDefaultInstance();
  CMessagePutKeepSakeResponse::default_instance_->InitAsDefaultInstance();
  CMessageExchangeKeepsakeRequest::default_instance_->InitAsDefaultInstance();
  CMessageExchangeKeepsakeResponse::default_instance_->InitAsDefaultInstance();
  CMessageExchangeKeepsakeNotify::default_instance_->InitAsDefaultInstance();
  CMessageDivorceRequest::default_instance_->InitAsDefaultInstance();
  CMessageDivorceResponse::default_instance_->InitAsDefaultInstance();
  CMessageDivorceNotify::default_instance_->InitAsDefaultInstance();
  CMessageMarryResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageBeginWeddingResultNofiy::default_instance_->InitAsDefaultInstance();
  CMessageGetCampMarriageInfoRequest::default_instance_->InitAsDefaultInstance();
  PBMarriageInfo::default_instance_->InitAsDefaultInstance();
  PBMarriageList::default_instance_->InitAsDefaultInstance();
  CMessageGetCampMarriageInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessagePersonMarriedNotify::default_instance_->InitAsDefaultInstance();
  CMessagePersonMarriageInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageSpouseDivorceNotify::default_instance_->InitAsDefaultInstance();
  CMessageUseSysInvitationRequest::default_instance_->InitAsDefaultInstance();
  CMessageUseSysInvitationResponse::default_instance_->InitAsDefaultInstance();
  CMessageTimeToPutKeepsakeNotify::default_instance_->InitAsDefaultInstance();
  CMessageCancelWeddingRequest::default_instance_->InitAsDefaultInstance();
  CMessageCancelWeddingResponse::default_instance_->InitAsDefaultInstance();
  CMessageNewlyMarriedNotify::default_instance_->InitAsDefaultInstance();
  CMessageWeddingEndNotify::default_instance_->InitAsDefaultInstance();
  CMessageStartKeepsakeExchangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageStartKeepsakeExchangeResponse::default_instance_->InitAsDefaultInstance();
  CMessageStopKeepsakeExchangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageStopKeepsakeExchangeResponse::default_instance_->InitAsDefaultInstance();
  CMessageStopKeepsakeExchangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageInvitationExchangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageInvitationExchangeResponse::default_instance_->InitAsDefaultInstance();
  CMessageExchangeResultNotify::default_instance_->InitAsDefaultInstance();
  CMessageTeleToWeddingNpcRequest::default_instance_->InitAsDefaultInstance();
  CMessageTeleToWeddingNpcResponse::default_instance_->InitAsDefaultInstance();
  CMessageReviewWeddingRequest::default_instance_->InitAsDefaultInstance();
  CMessageReviewWeddingResponse::default_instance_->InitAsDefaultInstance();
  CMessageReviewWeddingNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marriagemessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marriagemessage_5fpb_2ehxx {
  StaticDescriptorInitializer_marriagemessage_5fpb_2ehxx() {
    protobuf_AddDesc_marriagemessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_marriagemessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* MarriageMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageMessageID_descriptor_;
}
bool MarriageMessageID_IsValid(int value) {
  switch(value) {
    case 23552:
    case 23553:
    case 23554:
    case 23555:
    case 23556:
    case 23557:
    case 23558:
    case 23559:
    case 23560:
    case 23561:
    case 23562:
    case 23563:
    case 23564:
    case 23565:
    case 23566:
    case 23567:
    case 23568:
    case 23569:
    case 23570:
    case 23571:
    case 23572:
    case 23573:
    case 23574:
    case 23575:
    case 23576:
    case 23577:
    case 23578:
    case 23579:
    case 23580:
    case 23581:
    case 23582:
    case 23583:
    case 23584:
    case 23585:
    case 23586:
    case 23587:
    case 23588:
    case 23590:
    case 23591:
    case 23592:
    case 23593:
    case 23600:
    case 23601:
    case 23602:
    case 23603:
    case 23604:
    case 23605:
    case 23606:
    case 23607:
    case 23608:
    case 23609:
    case 23610:
    case 23611:
    case 23612:
    case 23613:
    case 23614:
    case 23615:
    case 24101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageApplyMarryRequest::kTimeIDFieldNumber;
const int CMessageApplyMarryRequest::kWeddingModuleFieldNumber;
const int CMessageApplyMarryRequest::kDayIDFieldNumber;
const int CMessageApplyMarryRequest::kHoldWeddingFieldNumber;
const int CMessageApplyMarryRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageApplyMarryRequest::CMessageApplyMarryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyMarryRequest::InitAsDefaultInstance() {}

CMessageApplyMarryRequest::CMessageApplyMarryRequest(const CMessageApplyMarryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyMarryRequest::SharedCtor() {
  _cached_size_ = 0;
  timeid_ = 0u;
  weddingmodule_ = 0u;
  dayid_ = 0u;
  holdwedding_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyMarryRequest::~CMessageApplyMarryRequest() {
  SharedDtor();
}

void CMessageApplyMarryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageApplyMarryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyMarryRequest_descriptor_;
}

const CMessageApplyMarryRequest& CMessageApplyMarryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyMarryRequest* CMessageApplyMarryRequest::default_instance_ = NULL;

CMessageApplyMarryRequest* CMessageApplyMarryRequest::New() const {
  return new CMessageApplyMarryRequest;
}

void CMessageApplyMarryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeid_ = 0u;
    weddingmodule_ = 0u;
    dayid_ = 0u;
    holdwedding_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyMarryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TimeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DayID;
        break;
      }
      
      // optional uint32 DayID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DayID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dayid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_HoldWedding;
        break;
      }
      
      // optional uint32 HoldWedding = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HoldWedding:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &holdwedding_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyMarryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyMarryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TimeID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->timeid(), output);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weddingmodule(), output);
  }
  
  // optional uint32 DayID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->dayid(), output);
  }
  
  // optional uint32 HoldWedding = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->holdwedding(), output);
  }
  
  // optional uint32 EntityID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyMarryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TimeID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->timeid(), target);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weddingmodule(), target);
  }
  
  // optional uint32 DayID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->dayid(), target);
  }
  
  // optional uint32 HoldWedding = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->holdwedding(), target);
  }
  
  // optional uint32 EntityID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyMarryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TimeID = 1;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeid());
    }
    
    // optional uint32 WeddingModule = 2;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 DayID = 3;
    if (has_dayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dayid());
    }
    
    // optional uint32 HoldWedding = 4;
    if (has_holdwedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->holdwedding());
    }
    
    // optional uint32 EntityID = 5;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyMarryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyMarryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyMarryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyMarryRequest::MergeFrom(const CMessageApplyMarryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeid(from.timeid());
    }
    if (from._has_bit(1)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(2)) {
      set_dayid(from.dayid());
    }
    if (from._has_bit(3)) {
      set_holdwedding(from.holdwedding());
    }
    if (from._has_bit(4)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyMarryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyMarryRequest::CopyFrom(const CMessageApplyMarryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyMarryRequest::Swap(CMessageApplyMarryRequest* other) {
  if (other != this) {
    std::swap(timeid_, other->timeid_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(dayid_, other->dayid_);
    std::swap(holdwedding_, other->holdwedding_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyMarryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyMarryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyMarryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyMarryRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageApplyMarryResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageApplyMarryResponse::CMessageApplyMarryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageApplyMarryResponse::InitAsDefaultInstance() {}

CMessageApplyMarryResponse::CMessageApplyMarryResponse(const CMessageApplyMarryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageApplyMarryResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageApplyMarryResponse::~CMessageApplyMarryResponse() {
  SharedDtor();
}

void CMessageApplyMarryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageApplyMarryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyMarryResponse_descriptor_;
}

const CMessageApplyMarryResponse& CMessageApplyMarryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageApplyMarryResponse* CMessageApplyMarryResponse::default_instance_ = NULL;

CMessageApplyMarryResponse* CMessageApplyMarryResponse::New() const {
  return new CMessageApplyMarryResponse;
}

void CMessageApplyMarryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageApplyMarryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageApplyMarryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageApplyMarryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageApplyMarryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageApplyMarryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageApplyMarryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageApplyMarryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageApplyMarryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageApplyMarryResponse::MergeFrom(const CMessageApplyMarryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageApplyMarryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyMarryResponse::CopyFrom(const CMessageApplyMarryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageApplyMarryResponse::Swap(CMessageApplyMarryResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageApplyMarryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageApplyMarryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageApplyMarryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageApplyMarryResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageMarryRequestNotify::_default_rolename_;
#ifndef _MSC_VER
const int CMessageMarryRequestNotify::kRoleIDFieldNumber;
const int CMessageMarryRequestNotify::kRoleNameFieldNumber;
const int CMessageMarryRequestNotify::kYearFieldNumber;
const int CMessageMarryRequestNotify::kMonthFieldNumber;
const int CMessageMarryRequestNotify::kDayFieldNumber;
const int CMessageMarryRequestNotify::kBeginTimeFieldNumber;
const int CMessageMarryRequestNotify::kWeddingModuleFieldNumber;
#endif  // !_MSC_VER

CMessageMarryRequestNotify::CMessageMarryRequestNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMarryRequestNotify::InitAsDefaultInstance() {}

CMessageMarryRequestNotify::CMessageMarryRequestNotify(const CMessageMarryRequestNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMarryRequestNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  begintime_ = 0u;
  weddingmodule_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMarryRequestNotify::~CMessageMarryRequestNotify() {
  SharedDtor();
}

void CMessageMarryRequestNotify::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMarryRequestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarryRequestNotify_descriptor_;
}

const CMessageMarryRequestNotify& CMessageMarryRequestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMarryRequestNotify* CMessageMarryRequestNotify::default_instance_ = NULL;

CMessageMarryRequestNotify* CMessageMarryRequestNotify::New() const {
  return new CMessageMarryRequestNotify;
}

void CMessageMarryRequestNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    year_ = 0u;
    month_ = 0u;
    day_ = 0u;
    begintime_ = 0u;
    weddingmodule_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMarryRequestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(24)) goto parse_Year;
        break;
      }
      
      // optional uint32 Year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Year:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &year_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Month;
        break;
      }
      
      // optional uint32 Month = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Month:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &month_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Day;
        break;
      }
      
      // optional uint32 Day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Day:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &day_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BeginTime;
        break;
      }
      
      // optional uint32 BeginTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &begintime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMarryRequestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMarryRequestNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->rolename(), output);
  }
  
  // optional uint32 Year = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->year(), output);
  }
  
  // optional uint32 Month = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->month(), output);
  }
  
  // optional uint32 Day = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->day(), output);
  }
  
  // optional uint32 BeginTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->begintime(), output);
  }
  
  // optional uint32 WeddingModule = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->weddingmodule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMarryRequestNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->rolename(), target);
  }
  
  // optional uint32 Year = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->year(), target);
  }
  
  // optional uint32 Month = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->month(), target);
  }
  
  // optional uint32 Day = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->day(), target);
  }
  
  // optional uint32 BeginTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->begintime(), target);
  }
  
  // optional uint32 WeddingModule = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->weddingmodule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMarryRequestNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 Year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->year());
    }
    
    // optional uint32 Month = 4;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->month());
    }
    
    // optional uint32 Day = 5;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->day());
    }
    
    // optional uint32 BeginTime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->begintime());
    }
    
    // optional uint32 WeddingModule = 7;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMarryRequestNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMarryRequestNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMarryRequestNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMarryRequestNotify::MergeFrom(const CMessageMarryRequestNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(2)) {
      set_year(from.year());
    }
    if (from._has_bit(3)) {
      set_month(from.month());
    }
    if (from._has_bit(4)) {
      set_day(from.day());
    }
    if (from._has_bit(5)) {
      set_begintime(from.begintime());
    }
    if (from._has_bit(6)) {
      set_weddingmodule(from.weddingmodule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMarryRequestNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarryRequestNotify::CopyFrom(const CMessageMarryRequestNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarryRequestNotify::Swap(CMessageMarryRequestNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(begintime_, other->begintime_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMarryRequestNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMarryRequestNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMarryRequestNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarryRequestNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyMarryRequest::kResultFieldNumber;
const int CMessageReplyMarryRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyMarryRequest::CMessageReplyMarryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyMarryRequest::InitAsDefaultInstance() {}

CMessageReplyMarryRequest::CMessageReplyMarryRequest(const CMessageReplyMarryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyMarryRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyMarryRequest::~CMessageReplyMarryRequest() {
  SharedDtor();
}

void CMessageReplyMarryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyMarryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMarryRequest_descriptor_;
}

const CMessageReplyMarryRequest& CMessageReplyMarryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyMarryRequest* CMessageReplyMarryRequest::default_instance_ = NULL;

CMessageReplyMarryRequest* CMessageReplyMarryRequest::New() const {
  return new CMessageReplyMarryRequest;
}

void CMessageReplyMarryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyMarryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyMarryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyMarryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyMarryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyMarryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyMarryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyMarryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyMarryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyMarryRequest::MergeFrom(const CMessageReplyMarryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyMarryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMarryRequest::CopyFrom(const CMessageReplyMarryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMarryRequest::Swap(CMessageReplyMarryRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyMarryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyMarryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyMarryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMarryRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageReplyMarryResponse::_default_spousename_;
#ifndef _MSC_VER
const int CMessageReplyMarryResponse::kErrcodeFieldNumber;
const int CMessageReplyMarryResponse::kResultFieldNumber;
const int CMessageReplyMarryResponse::kSpouseNameFieldNumber;
const int CMessageReplyMarryResponse::kMarriageStatusFieldNumber;
#endif  // !_MSC_VER

CMessageReplyMarryResponse::CMessageReplyMarryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyMarryResponse::InitAsDefaultInstance() {}

CMessageReplyMarryResponse::CMessageReplyMarryResponse(const CMessageReplyMarryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyMarryResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  result_ = 0u;
  spousename_ = const_cast< ::std::string*>(&_default_spousename_);
  marriagestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyMarryResponse::~CMessageReplyMarryResponse() {
  SharedDtor();
}

void CMessageReplyMarryResponse::SharedDtor() {
  if (spousename_ != &_default_spousename_) {
    delete spousename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyMarryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMarryResponse_descriptor_;
}

const CMessageReplyMarryResponse& CMessageReplyMarryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyMarryResponse* CMessageReplyMarryResponse::default_instance_ = NULL;

CMessageReplyMarryResponse* CMessageReplyMarryResponse::New() const {
  return new CMessageReplyMarryResponse;
}

void CMessageReplyMarryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (spousename_ != &_default_spousename_) {
        spousename_->clear();
      }
    }
    marriagestatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyMarryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_SpouseName;
        break;
      }
      
      // optional string SpouseName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpouseName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_spousename()));
        if (input->ExpectTag(32)) goto parse_MarriageStatus;
        break;
      }
      
      // optional uint32 MarriageStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagestatus_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyMarryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyMarryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional string SpouseName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->spousename(), output);
  }
  
  // optional uint32 MarriageStatus = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->marriagestatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyMarryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 Result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string SpouseName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->spousename(), target);
  }
  
  // optional uint32 MarriageStatus = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->marriagestatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyMarryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string SpouseName = 3;
    if (has_spousename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->spousename());
    }
    
    // optional uint32 MarriageStatus = 4;
    if (has_marriagestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagestatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyMarryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyMarryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyMarryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyMarryResponse::MergeFrom(const CMessageReplyMarryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_spousename(from.spousename());
    }
    if (from._has_bit(3)) {
      set_marriagestatus(from.marriagestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyMarryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMarryResponse::CopyFrom(const CMessageReplyMarryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyMarryResponse::Swap(CMessageReplyMarryResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(result_, other->result_);
    std::swap(spousename_, other->spousename_);
    std::swap(marriagestatus_, other->marriagestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyMarryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyMarryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyMarryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyMarryResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageMarriageTipsNotify::kWeddingTimeFieldNumber;
const int CMessageMarriageTipsNotify::kWeddingStatusFieldNumber;
#endif  // !_MSC_VER

CMessageMarriageTipsNotify::CMessageMarriageTipsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMarriageTipsNotify::InitAsDefaultInstance() {}

CMessageMarriageTipsNotify::CMessageMarriageTipsNotify(const CMessageMarriageTipsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMarriageTipsNotify::SharedCtor() {
  _cached_size_ = 0;
  weddingtime_ = 0u;
  weddingstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMarriageTipsNotify::~CMessageMarriageTipsNotify() {
  SharedDtor();
}

void CMessageMarriageTipsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMarriageTipsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarriageTipsNotify_descriptor_;
}

const CMessageMarriageTipsNotify& CMessageMarriageTipsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMarriageTipsNotify* CMessageMarriageTipsNotify::default_instance_ = NULL;

CMessageMarriageTipsNotify* CMessageMarriageTipsNotify::New() const {
  return new CMessageMarriageTipsNotify;
}

void CMessageMarriageTipsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weddingtime_ = 0u;
    weddingstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMarriageTipsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 WeddingTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeddingStatus;
        break;
      }
      
      // optional uint32 WeddingStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingstatus_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMarriageTipsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMarriageTipsNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 WeddingTime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->weddingtime(), output);
  }
  
  // optional uint32 WeddingStatus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weddingstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMarriageTipsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 WeddingTime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->weddingtime(), target);
  }
  
  // optional uint32 WeddingStatus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weddingstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMarriageTipsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WeddingTime = 1;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 WeddingStatus = 2;
    if (has_weddingstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingstatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMarriageTipsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMarriageTipsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMarriageTipsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMarriageTipsNotify::MergeFrom(const CMessageMarriageTipsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(1)) {
      set_weddingstatus(from.weddingstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMarriageTipsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarriageTipsNotify::CopyFrom(const CMessageMarriageTipsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarriageTipsNotify::Swap(CMessageMarriageTipsNotify* other) {
  if (other != this) {
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(weddingstatus_, other->weddingstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMarriageTipsNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMarriageTipsNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMarriageTipsNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarriageTipsNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBeginWeddingRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageBeginWeddingRequest::CMessageBeginWeddingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBeginWeddingRequest::InitAsDefaultInstance() {}

CMessageBeginWeddingRequest::CMessageBeginWeddingRequest(const CMessageBeginWeddingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBeginWeddingRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBeginWeddingRequest::~CMessageBeginWeddingRequest() {
  SharedDtor();
}

void CMessageBeginWeddingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingRequest_descriptor_;
}

const CMessageBeginWeddingRequest& CMessageBeginWeddingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBeginWeddingRequest* CMessageBeginWeddingRequest::default_instance_ = NULL;

CMessageBeginWeddingRequest* CMessageBeginWeddingRequest::New() const {
  return new CMessageBeginWeddingRequest;
}

void CMessageBeginWeddingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBeginWeddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBeginWeddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBeginWeddingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBeginWeddingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBeginWeddingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBeginWeddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBeginWeddingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBeginWeddingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBeginWeddingRequest::MergeFrom(const CMessageBeginWeddingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBeginWeddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingRequest::CopyFrom(const CMessageBeginWeddingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingRequest::Swap(CMessageBeginWeddingRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBeginWeddingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBeginWeddingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBeginWeddingResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageBeginWeddingResponse::CMessageBeginWeddingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBeginWeddingResponse::InitAsDefaultInstance() {}

CMessageBeginWeddingResponse::CMessageBeginWeddingResponse(const CMessageBeginWeddingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBeginWeddingResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBeginWeddingResponse::~CMessageBeginWeddingResponse() {
  SharedDtor();
}

void CMessageBeginWeddingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingResponse_descriptor_;
}

const CMessageBeginWeddingResponse& CMessageBeginWeddingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBeginWeddingResponse* CMessageBeginWeddingResponse::default_instance_ = NULL;

CMessageBeginWeddingResponse* CMessageBeginWeddingResponse::New() const {
  return new CMessageBeginWeddingResponse;
}

void CMessageBeginWeddingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBeginWeddingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBeginWeddingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBeginWeddingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBeginWeddingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBeginWeddingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBeginWeddingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBeginWeddingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBeginWeddingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBeginWeddingResponse::MergeFrom(const CMessageBeginWeddingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBeginWeddingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingResponse::CopyFrom(const CMessageBeginWeddingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingResponse::Swap(CMessageBeginWeddingResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBeginWeddingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBeginWeddingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageBeginWeddingNotify::CMessageBeginWeddingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBeginWeddingNotify::InitAsDefaultInstance() {}

CMessageBeginWeddingNotify::CMessageBeginWeddingNotify(const CMessageBeginWeddingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBeginWeddingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBeginWeddingNotify::~CMessageBeginWeddingNotify() {
  SharedDtor();
}

void CMessageBeginWeddingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingNotify_descriptor_;
}

const CMessageBeginWeddingNotify& CMessageBeginWeddingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBeginWeddingNotify* CMessageBeginWeddingNotify::default_instance_ = NULL;

CMessageBeginWeddingNotify* CMessageBeginWeddingNotify::New() const {
  return new CMessageBeginWeddingNotify;
}

void CMessageBeginWeddingNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBeginWeddingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageBeginWeddingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBeginWeddingNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBeginWeddingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBeginWeddingNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBeginWeddingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBeginWeddingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBeginWeddingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBeginWeddingNotify::MergeFrom(const CMessageBeginWeddingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBeginWeddingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingNotify::CopyFrom(const CMessageBeginWeddingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingNotify::Swap(CMessageBeginWeddingNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBeginWeddingNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBeginWeddingNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyBeginWeddingRequest::kResultFieldNumber;
const int CMessageReplyBeginWeddingRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageReplyBeginWeddingRequest::CMessageReplyBeginWeddingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyBeginWeddingRequest::InitAsDefaultInstance() {}

CMessageReplyBeginWeddingRequest::CMessageReplyBeginWeddingRequest(const CMessageReplyBeginWeddingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyBeginWeddingRequest::~CMessageReplyBeginWeddingRequest() {
  SharedDtor();
}

void CMessageReplyBeginWeddingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyBeginWeddingRequest_descriptor_;
}

const CMessageReplyBeginWeddingRequest& CMessageReplyBeginWeddingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyBeginWeddingRequest* CMessageReplyBeginWeddingRequest::default_instance_ = NULL;

CMessageReplyBeginWeddingRequest* CMessageReplyBeginWeddingRequest::New() const {
  return new CMessageReplyBeginWeddingRequest;
}

void CMessageReplyBeginWeddingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyBeginWeddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyBeginWeddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyBeginWeddingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyBeginWeddingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyBeginWeddingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyBeginWeddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyBeginWeddingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyBeginWeddingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyBeginWeddingRequest::MergeFrom(const CMessageReplyBeginWeddingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyBeginWeddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingRequest::CopyFrom(const CMessageReplyBeginWeddingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingRequest::Swap(CMessageReplyBeginWeddingRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyBeginWeddingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyBeginWeddingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyBeginWeddingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyBeginWeddingResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageReplyBeginWeddingResponse::CMessageReplyBeginWeddingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyBeginWeddingResponse::InitAsDefaultInstance() {}

CMessageReplyBeginWeddingResponse::CMessageReplyBeginWeddingResponse(const CMessageReplyBeginWeddingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyBeginWeddingResponse::~CMessageReplyBeginWeddingResponse() {
  SharedDtor();
}

void CMessageReplyBeginWeddingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyBeginWeddingResponse_descriptor_;
}

const CMessageReplyBeginWeddingResponse& CMessageReplyBeginWeddingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyBeginWeddingResponse* CMessageReplyBeginWeddingResponse::default_instance_ = NULL;

CMessageReplyBeginWeddingResponse* CMessageReplyBeginWeddingResponse::New() const {
  return new CMessageReplyBeginWeddingResponse;
}

void CMessageReplyBeginWeddingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyBeginWeddingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyBeginWeddingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyBeginWeddingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyBeginWeddingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyBeginWeddingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyBeginWeddingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyBeginWeddingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyBeginWeddingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyBeginWeddingResponse::MergeFrom(const CMessageReplyBeginWeddingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyBeginWeddingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingResponse::CopyFrom(const CMessageReplyBeginWeddingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyBeginWeddingResponse::Swap(CMessageReplyBeginWeddingResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyBeginWeddingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyBeginWeddingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyBeginWeddingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyBeginWeddingResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageWeddingStartNotify::_default_groomname_;
const ::std::string CMessageWeddingStartNotify::_default_bridename_;
#ifndef _MSC_VER
const int CMessageWeddingStartNotify::kGroomNameFieldNumber;
const int CMessageWeddingStartNotify::kBrideNameFieldNumber;
const int CMessageWeddingStartNotify::kWeddingTimeLengthFieldNumber;
const int CMessageWeddingStartNotify::kWeddingModuleFieldNumber;
const int CMessageWeddingStartNotify::kGroomIDFieldNumber;
const int CMessageWeddingStartNotify::kBrideIDFieldNumber;
const int CMessageWeddingStartNotify::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageWeddingStartNotify::CMessageWeddingStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWeddingStartNotify::InitAsDefaultInstance() {}

CMessageWeddingStartNotify::CMessageWeddingStartNotify(const CMessageWeddingStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWeddingStartNotify::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  weddingtimelength_ = 0u;
  weddingmodule_ = 0u;
  groomid_ = 0u;
  brideid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWeddingStartNotify::~CMessageWeddingStartNotify() {
  SharedDtor();
}

void CMessageWeddingStartNotify::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWeddingStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWeddingStartNotify_descriptor_;
}

const CMessageWeddingStartNotify& CMessageWeddingStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWeddingStartNotify* CMessageWeddingStartNotify::default_instance_ = NULL;

CMessageWeddingStartNotify* CMessageWeddingStartNotify::New() const {
  return new CMessageWeddingStartNotify;
}

void CMessageWeddingStartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    weddingtimelength_ = 0u;
    weddingmodule_ = 0u;
    groomid_ = 0u;
    brideid_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWeddingStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(18)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(24)) goto parse_WeddingTimeLength;
        break;
      }
      
      // optional uint32 WeddingTimeLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtimelength_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_GroomID;
        break;
      }
      
      // optional uint32 GroomID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BrideID;
        break;
      }
      
      // optional uint32 BrideID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWeddingStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWeddingStartNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bridename(), output);
  }
  
  // optional uint32 WeddingTimeLength = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->weddingtimelength(), output);
  }
  
  // optional uint32 WeddingModule = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingmodule(), output);
  }
  
  // optional uint32 GroomID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->groomid(), output);
  }
  
  // optional uint32 BrideID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->brideid(), output);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWeddingStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bridename(), target);
  }
  
  // optional uint32 WeddingTimeLength = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->weddingtimelength(), target);
  }
  
  // optional uint32 WeddingModule = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingmodule(), target);
  }
  
  // optional uint32 GroomID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->groomid(), target);
  }
  
  // optional uint32 BrideID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->brideid(), target);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWeddingStartNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional string BrideName = 2;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 WeddingTimeLength = 3;
    if (has_weddingtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtimelength());
    }
    
    // optional uint32 WeddingModule = 4;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 GroomID = 5;
    if (has_groomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomid());
    }
    
    // optional uint32 BrideID = 6;
    if (has_brideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideid());
    }
    
    // optional uint32 CampID = 7;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWeddingStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWeddingStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWeddingStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWeddingStartNotify::MergeFrom(const CMessageWeddingStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(2)) {
      set_weddingtimelength(from.weddingtimelength());
    }
    if (from._has_bit(3)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(4)) {
      set_groomid(from.groomid());
    }
    if (from._has_bit(5)) {
      set_brideid(from.brideid());
    }
    if (from._has_bit(6)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWeddingStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWeddingStartNotify::CopyFrom(const CMessageWeddingStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWeddingStartNotify::Swap(CMessageWeddingStartNotify* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(bridename_, other->bridename_);
    std::swap(weddingtimelength_, other->weddingtimelength_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(groomid_, other->groomid_);
    std::swap(brideid_, other->brideid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWeddingStartNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWeddingStartNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWeddingStartNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWeddingStartNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageEnterMarriageHallNotify::CMessageEnterMarriageHallNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterMarriageHallNotify::InitAsDefaultInstance() {}

CMessageEnterMarriageHallNotify::CMessageEnterMarriageHallNotify(const CMessageEnterMarriageHallNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterMarriageHallNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterMarriageHallNotify::~CMessageEnterMarriageHallNotify() {
  SharedDtor();
}

void CMessageEnterMarriageHallNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterMarriageHallNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterMarriageHallNotify_descriptor_;
}

const CMessageEnterMarriageHallNotify& CMessageEnterMarriageHallNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterMarriageHallNotify* CMessageEnterMarriageHallNotify::default_instance_ = NULL;

CMessageEnterMarriageHallNotify* CMessageEnterMarriageHallNotify::New() const {
  return new CMessageEnterMarriageHallNotify;
}

void CMessageEnterMarriageHallNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterMarriageHallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageEnterMarriageHallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterMarriageHallNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterMarriageHallNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterMarriageHallNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterMarriageHallNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterMarriageHallNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterMarriageHallNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterMarriageHallNotify::MergeFrom(const CMessageEnterMarriageHallNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterMarriageHallNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterMarriageHallNotify::CopyFrom(const CMessageEnterMarriageHallNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterMarriageHallNotify::Swap(CMessageEnterMarriageHallNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterMarriageHallNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterMarriageHallNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterMarriageHallNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterMarriageHallNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyEnterMarriageHallRequest::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageReplyEnterMarriageHallRequest::CMessageReplyEnterMarriageHallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyEnterMarriageHallRequest::InitAsDefaultInstance() {}

CMessageReplyEnterMarriageHallRequest::CMessageReplyEnterMarriageHallRequest(const CMessageReplyEnterMarriageHallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyEnterMarriageHallRequest::~CMessageReplyEnterMarriageHallRequest() {
  SharedDtor();
}

void CMessageReplyEnterMarriageHallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyEnterMarriageHallRequest_descriptor_;
}

const CMessageReplyEnterMarriageHallRequest& CMessageReplyEnterMarriageHallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyEnterMarriageHallRequest* CMessageReplyEnterMarriageHallRequest::default_instance_ = NULL;

CMessageReplyEnterMarriageHallRequest* CMessageReplyEnterMarriageHallRequest::New() const {
  return new CMessageReplyEnterMarriageHallRequest;
}

void CMessageReplyEnterMarriageHallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyEnterMarriageHallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyEnterMarriageHallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyEnterMarriageHallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyEnterMarriageHallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyEnterMarriageHallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyEnterMarriageHallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyEnterMarriageHallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyEnterMarriageHallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyEnterMarriageHallRequest::MergeFrom(const CMessageReplyEnterMarriageHallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyEnterMarriageHallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallRequest::CopyFrom(const CMessageReplyEnterMarriageHallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallRequest::Swap(CMessageReplyEnterMarriageHallRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyEnterMarriageHallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyEnterMarriageHallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyEnterMarriageHallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReplyEnterMarriageHallResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageReplyEnterMarriageHallResponse::CMessageReplyEnterMarriageHallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReplyEnterMarriageHallResponse::InitAsDefaultInstance() {}

CMessageReplyEnterMarriageHallResponse::CMessageReplyEnterMarriageHallResponse(const CMessageReplyEnterMarriageHallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReplyEnterMarriageHallResponse::~CMessageReplyEnterMarriageHallResponse() {
  SharedDtor();
}

void CMessageReplyEnterMarriageHallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyEnterMarriageHallResponse_descriptor_;
}

const CMessageReplyEnterMarriageHallResponse& CMessageReplyEnterMarriageHallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReplyEnterMarriageHallResponse* CMessageReplyEnterMarriageHallResponse::default_instance_ = NULL;

CMessageReplyEnterMarriageHallResponse* CMessageReplyEnterMarriageHallResponse::New() const {
  return new CMessageReplyEnterMarriageHallResponse;
}

void CMessageReplyEnterMarriageHallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReplyEnterMarriageHallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReplyEnterMarriageHallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReplyEnterMarriageHallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReplyEnterMarriageHallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReplyEnterMarriageHallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReplyEnterMarriageHallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReplyEnterMarriageHallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReplyEnterMarriageHallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReplyEnterMarriageHallResponse::MergeFrom(const CMessageReplyEnterMarriageHallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReplyEnterMarriageHallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallResponse::CopyFrom(const CMessageReplyEnterMarriageHallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReplyEnterMarriageHallResponse::Swap(CMessageReplyEnterMarriageHallResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReplyEnterMarriageHallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReplyEnterMarriageHallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReplyEnterMarriageHallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReplyEnterMarriageHallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNewlyEnterHallRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageNewlyEnterHallRequest::CMessageNewlyEnterHallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNewlyEnterHallRequest::InitAsDefaultInstance() {}

CMessageNewlyEnterHallRequest::CMessageNewlyEnterHallRequest(const CMessageNewlyEnterHallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNewlyEnterHallRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNewlyEnterHallRequest::~CMessageNewlyEnterHallRequest() {
  SharedDtor();
}

void CMessageNewlyEnterHallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNewlyEnterHallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyEnterHallRequest_descriptor_;
}

const CMessageNewlyEnterHallRequest& CMessageNewlyEnterHallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNewlyEnterHallRequest* CMessageNewlyEnterHallRequest::default_instance_ = NULL;

CMessageNewlyEnterHallRequest* CMessageNewlyEnterHallRequest::New() const {
  return new CMessageNewlyEnterHallRequest;
}

void CMessageNewlyEnterHallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNewlyEnterHallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNewlyEnterHallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNewlyEnterHallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNewlyEnterHallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNewlyEnterHallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNewlyEnterHallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNewlyEnterHallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNewlyEnterHallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNewlyEnterHallRequest::MergeFrom(const CMessageNewlyEnterHallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNewlyEnterHallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyEnterHallRequest::CopyFrom(const CMessageNewlyEnterHallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyEnterHallRequest::Swap(CMessageNewlyEnterHallRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNewlyEnterHallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNewlyEnterHallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNewlyEnterHallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyEnterHallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageNewlyEnterHallResponse::kErrcodeFieldNumber;
const int CMessageNewlyEnterHallResponse::kWeddingModuleFieldNumber;
const int CMessageNewlyEnterHallResponse::kBaitangEndFieldNumber;
#endif  // !_MSC_VER

CMessageNewlyEnterHallResponse::CMessageNewlyEnterHallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNewlyEnterHallResponse::InitAsDefaultInstance() {}

CMessageNewlyEnterHallResponse::CMessageNewlyEnterHallResponse(const CMessageNewlyEnterHallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNewlyEnterHallResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  weddingmodule_ = 0u;
  baitangend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNewlyEnterHallResponse::~CMessageNewlyEnterHallResponse() {
  SharedDtor();
}

void CMessageNewlyEnterHallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNewlyEnterHallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyEnterHallResponse_descriptor_;
}

const CMessageNewlyEnterHallResponse& CMessageNewlyEnterHallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNewlyEnterHallResponse* CMessageNewlyEnterHallResponse::default_instance_ = NULL;

CMessageNewlyEnterHallResponse* CMessageNewlyEnterHallResponse::New() const {
  return new CMessageNewlyEnterHallResponse;
}

void CMessageNewlyEnterHallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    weddingmodule_ = 0u;
    baitangend_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNewlyEnterHallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BaitangEnd;
        break;
      }
      
      // optional uint32 BaitangEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BaitangEnd:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &baitangend_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNewlyEnterHallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNewlyEnterHallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weddingmodule(), output);
  }
  
  // optional uint32 BaitangEnd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->baitangend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNewlyEnterHallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weddingmodule(), target);
  }
  
  // optional uint32 BaitangEnd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->baitangend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNewlyEnterHallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 WeddingModule = 2;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 BaitangEnd = 3;
    if (has_baitangend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->baitangend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNewlyEnterHallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNewlyEnterHallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNewlyEnterHallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNewlyEnterHallResponse::MergeFrom(const CMessageNewlyEnterHallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(2)) {
      set_baitangend(from.baitangend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNewlyEnterHallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyEnterHallResponse::CopyFrom(const CMessageNewlyEnterHallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyEnterHallResponse::Swap(CMessageNewlyEnterHallResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(baitangend_, other->baitangend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNewlyEnterHallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNewlyEnterHallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNewlyEnterHallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyEnterHallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGuestEnterHallRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGuestEnterHallRequest::CMessageGuestEnterHallRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGuestEnterHallRequest::InitAsDefaultInstance() {}

CMessageGuestEnterHallRequest::CMessageGuestEnterHallRequest(const CMessageGuestEnterHallRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGuestEnterHallRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGuestEnterHallRequest::~CMessageGuestEnterHallRequest() {
  SharedDtor();
}

void CMessageGuestEnterHallRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGuestEnterHallRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGuestEnterHallRequest_descriptor_;
}

const CMessageGuestEnterHallRequest& CMessageGuestEnterHallRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGuestEnterHallRequest* CMessageGuestEnterHallRequest::default_instance_ = NULL;

CMessageGuestEnterHallRequest* CMessageGuestEnterHallRequest::New() const {
  return new CMessageGuestEnterHallRequest;
}

void CMessageGuestEnterHallRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGuestEnterHallRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGuestEnterHallRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGuestEnterHallRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGuestEnterHallRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGuestEnterHallRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGuestEnterHallRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGuestEnterHallRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGuestEnterHallRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGuestEnterHallRequest::MergeFrom(const CMessageGuestEnterHallRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGuestEnterHallRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGuestEnterHallRequest::CopyFrom(const CMessageGuestEnterHallRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGuestEnterHallRequest::Swap(CMessageGuestEnterHallRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGuestEnterHallRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGuestEnterHallRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGuestEnterHallRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGuestEnterHallRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGuestEnterHallResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageGuestEnterHallResponse::CMessageGuestEnterHallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGuestEnterHallResponse::InitAsDefaultInstance() {}

CMessageGuestEnterHallResponse::CMessageGuestEnterHallResponse(const CMessageGuestEnterHallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGuestEnterHallResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGuestEnterHallResponse::~CMessageGuestEnterHallResponse() {
  SharedDtor();
}

void CMessageGuestEnterHallResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGuestEnterHallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGuestEnterHallResponse_descriptor_;
}

const CMessageGuestEnterHallResponse& CMessageGuestEnterHallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGuestEnterHallResponse* CMessageGuestEnterHallResponse::default_instance_ = NULL;

CMessageGuestEnterHallResponse* CMessageGuestEnterHallResponse::New() const {
  return new CMessageGuestEnterHallResponse;
}

void CMessageGuestEnterHallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGuestEnterHallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGuestEnterHallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGuestEnterHallResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGuestEnterHallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGuestEnterHallResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGuestEnterHallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGuestEnterHallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGuestEnterHallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGuestEnterHallResponse::MergeFrom(const CMessageGuestEnterHallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGuestEnterHallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGuestEnterHallResponse::CopyFrom(const CMessageGuestEnterHallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGuestEnterHallResponse::Swap(CMessageGuestEnterHallResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGuestEnterHallResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGuestEnterHallResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGuestEnterHallResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGuestEnterHallResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBaitangRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageBaitangRequest::CMessageBaitangRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBaitangRequest::InitAsDefaultInstance() {}

CMessageBaitangRequest::CMessageBaitangRequest(const CMessageBaitangRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBaitangRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBaitangRequest::~CMessageBaitangRequest() {
  SharedDtor();
}

void CMessageBaitangRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBaitangRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangRequest_descriptor_;
}

const CMessageBaitangRequest& CMessageBaitangRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBaitangRequest* CMessageBaitangRequest::default_instance_ = NULL;

CMessageBaitangRequest* CMessageBaitangRequest::New() const {
  return new CMessageBaitangRequest;
}

void CMessageBaitangRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBaitangRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBaitangRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBaitangRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBaitangRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBaitangRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBaitangRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBaitangRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBaitangRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBaitangRequest::MergeFrom(const CMessageBaitangRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBaitangRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangRequest::CopyFrom(const CMessageBaitangRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangRequest::Swap(CMessageBaitangRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBaitangRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBaitangRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBaitangRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBaitangResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageBaitangResponse::CMessageBaitangResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBaitangResponse::InitAsDefaultInstance() {}

CMessageBaitangResponse::CMessageBaitangResponse(const CMessageBaitangResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBaitangResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBaitangResponse::~CMessageBaitangResponse() {
  SharedDtor();
}

void CMessageBaitangResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBaitangResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangResponse_descriptor_;
}

const CMessageBaitangResponse& CMessageBaitangResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBaitangResponse* CMessageBaitangResponse::default_instance_ = NULL;

CMessageBaitangResponse* CMessageBaitangResponse::New() const {
  return new CMessageBaitangResponse;
}

void CMessageBaitangResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBaitangResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBaitangResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBaitangResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBaitangResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBaitangResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBaitangResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBaitangResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBaitangResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBaitangResponse::MergeFrom(const CMessageBaitangResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBaitangResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangResponse::CopyFrom(const CMessageBaitangResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangResponse::Swap(CMessageBaitangResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBaitangResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBaitangResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBaitangResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageBaitangNotify::_default_groomname_;
const ::std::string CMessageBaitangNotify::_default_bridename_;
#ifndef _MSC_VER
const int CMessageBaitangNotify::kGroomNameFieldNumber;
const int CMessageBaitangNotify::kBrideNameFieldNumber;
const int CMessageBaitangNotify::kGroomEntityIDFieldNumber;
const int CMessageBaitangNotify::kBrideEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageBaitangNotify::CMessageBaitangNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBaitangNotify::InitAsDefaultInstance() {}

CMessageBaitangNotify::CMessageBaitangNotify(const CMessageBaitangNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBaitangNotify::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  groomentityid_ = 0u;
  brideentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBaitangNotify::~CMessageBaitangNotify() {
  SharedDtor();
}

void CMessageBaitangNotify::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBaitangNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangNotify_descriptor_;
}

const CMessageBaitangNotify& CMessageBaitangNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBaitangNotify* CMessageBaitangNotify::default_instance_ = NULL;

CMessageBaitangNotify* CMessageBaitangNotify::New() const {
  return new CMessageBaitangNotify;
}

void CMessageBaitangNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    groomentityid_ = 0u;
    brideentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBaitangNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(18)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(24)) goto parse_GroomEntityID;
        break;
      }
      
      // optional uint32 GroomEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BrideEntityID;
        break;
      }
      
      // optional uint32 BrideEntityID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideentityid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBaitangNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBaitangNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bridename(), output);
  }
  
  // optional uint32 GroomEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->groomentityid(), output);
  }
  
  // optional uint32 BrideEntityID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->brideentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBaitangNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bridename(), target);
  }
  
  // optional uint32 GroomEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->groomentityid(), target);
  }
  
  // optional uint32 BrideEntityID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->brideentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBaitangNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional string BrideName = 2;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 GroomEntityID = 3;
    if (has_groomentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomentityid());
    }
    
    // optional uint32 BrideEntityID = 4;
    if (has_brideentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBaitangNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBaitangNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBaitangNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBaitangNotify::MergeFrom(const CMessageBaitangNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(2)) {
      set_groomentityid(from.groomentityid());
    }
    if (from._has_bit(3)) {
      set_brideentityid(from.brideentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBaitangNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangNotify::CopyFrom(const CMessageBaitangNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBaitangNotify::Swap(CMessageBaitangNotify* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(bridename_, other->bridename_);
    std::swap(groomentityid_, other->groomentityid_);
    std::swap(brideentityid_, other->brideentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBaitangNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBaitangNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBaitangNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBaitangNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePutKeepSakeRequest::kKeepsakeIndexFieldNumber;
#endif  // !_MSC_VER

CMessagePutKeepSakeRequest::CMessagePutKeepSakeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePutKeepSakeRequest::InitAsDefaultInstance() {}

CMessagePutKeepSakeRequest::CMessagePutKeepSakeRequest(const CMessagePutKeepSakeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePutKeepSakeRequest::SharedCtor() {
  _cached_size_ = 0;
  keepsakeindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePutKeepSakeRequest::~CMessagePutKeepSakeRequest() {
  SharedDtor();
}

void CMessagePutKeepSakeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePutKeepSakeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePutKeepSakeRequest_descriptor_;
}

const CMessagePutKeepSakeRequest& CMessagePutKeepSakeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePutKeepSakeRequest* CMessagePutKeepSakeRequest::default_instance_ = NULL;

CMessagePutKeepSakeRequest* CMessagePutKeepSakeRequest::New() const {
  return new CMessagePutKeepSakeRequest;
}

void CMessagePutKeepSakeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keepsakeindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePutKeepSakeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 KeepsakeIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &keepsakeindex_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePutKeepSakeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePutKeepSakeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 KeepsakeIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->keepsakeindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePutKeepSakeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 KeepsakeIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->keepsakeindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePutKeepSakeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 KeepsakeIndex = 1;
    if (has_keepsakeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->keepsakeindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePutKeepSakeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePutKeepSakeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePutKeepSakeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePutKeepSakeRequest::MergeFrom(const CMessagePutKeepSakeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_keepsakeindex(from.keepsakeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePutKeepSakeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePutKeepSakeRequest::CopyFrom(const CMessagePutKeepSakeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePutKeepSakeRequest::Swap(CMessagePutKeepSakeRequest* other) {
  if (other != this) {
    std::swap(keepsakeindex_, other->keepsakeindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePutKeepSakeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePutKeepSakeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePutKeepSakeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePutKeepSakeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePutKeepSakeResponse::kErrcodeFieldNumber;
const int CMessagePutKeepSakeResponse::kIndexFieldNumber;
#endif  // !_MSC_VER

CMessagePutKeepSakeResponse::CMessagePutKeepSakeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePutKeepSakeResponse::InitAsDefaultInstance() {}

CMessagePutKeepSakeResponse::CMessagePutKeepSakeResponse(const CMessagePutKeepSakeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePutKeepSakeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePutKeepSakeResponse::~CMessagePutKeepSakeResponse() {
  SharedDtor();
}

void CMessagePutKeepSakeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePutKeepSakeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePutKeepSakeResponse_descriptor_;
}

const CMessagePutKeepSakeResponse& CMessagePutKeepSakeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePutKeepSakeResponse* CMessagePutKeepSakeResponse::default_instance_ = NULL;

CMessagePutKeepSakeResponse* CMessagePutKeepSakeResponse::New() const {
  return new CMessagePutKeepSakeResponse;
}

void CMessagePutKeepSakeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePutKeepSakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }
      
      // optional uint32 Index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Index:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePutKeepSakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePutKeepSakeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 Index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePutKeepSakeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 Index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePutKeepSakeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePutKeepSakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePutKeepSakeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePutKeepSakeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePutKeepSakeResponse::MergeFrom(const CMessagePutKeepSakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePutKeepSakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePutKeepSakeResponse::CopyFrom(const CMessagePutKeepSakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePutKeepSakeResponse::Swap(CMessagePutKeepSakeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePutKeepSakeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePutKeepSakeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePutKeepSakeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePutKeepSakeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageExchangeKeepsakeRequest::CMessageExchangeKeepsakeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExchangeKeepsakeRequest::InitAsDefaultInstance() {}

CMessageExchangeKeepsakeRequest::CMessageExchangeKeepsakeRequest(const CMessageExchangeKeepsakeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExchangeKeepsakeRequest::~CMessageExchangeKeepsakeRequest() {
  SharedDtor();
}

void CMessageExchangeKeepsakeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeRequest_descriptor_;
}

const CMessageExchangeKeepsakeRequest& CMessageExchangeKeepsakeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageExchangeKeepsakeRequest* CMessageExchangeKeepsakeRequest::default_instance_ = NULL;

CMessageExchangeKeepsakeRequest* CMessageExchangeKeepsakeRequest::New() const {
  return new CMessageExchangeKeepsakeRequest;
}

void CMessageExchangeKeepsakeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExchangeKeepsakeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageExchangeKeepsakeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExchangeKeepsakeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExchangeKeepsakeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExchangeKeepsakeRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExchangeKeepsakeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExchangeKeepsakeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExchangeKeepsakeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExchangeKeepsakeRequest::MergeFrom(const CMessageExchangeKeepsakeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExchangeKeepsakeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeRequest::CopyFrom(const CMessageExchangeKeepsakeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeRequest::Swap(CMessageExchangeKeepsakeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExchangeKeepsakeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExchangeKeepsakeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageExchangeKeepsakeResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageExchangeKeepsakeResponse::CMessageExchangeKeepsakeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExchangeKeepsakeResponse::InitAsDefaultInstance() {}

CMessageExchangeKeepsakeResponse::CMessageExchangeKeepsakeResponse(const CMessageExchangeKeepsakeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExchangeKeepsakeResponse::~CMessageExchangeKeepsakeResponse() {
  SharedDtor();
}

void CMessageExchangeKeepsakeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeResponse_descriptor_;
}

const CMessageExchangeKeepsakeResponse& CMessageExchangeKeepsakeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageExchangeKeepsakeResponse* CMessageExchangeKeepsakeResponse::default_instance_ = NULL;

CMessageExchangeKeepsakeResponse* CMessageExchangeKeepsakeResponse::New() const {
  return new CMessageExchangeKeepsakeResponse;
}

void CMessageExchangeKeepsakeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExchangeKeepsakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExchangeKeepsakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExchangeKeepsakeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExchangeKeepsakeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExchangeKeepsakeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExchangeKeepsakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExchangeKeepsakeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExchangeKeepsakeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExchangeKeepsakeResponse::MergeFrom(const CMessageExchangeKeepsakeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExchangeKeepsakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeResponse::CopyFrom(const CMessageExchangeKeepsakeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeResponse::Swap(CMessageExchangeKeepsakeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExchangeKeepsakeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExchangeKeepsakeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageExchangeKeepsakeNotify::_default_groomname_;
const ::std::string CMessageExchangeKeepsakeNotify::_default_bridename_;
#ifndef _MSC_VER
const int CMessageExchangeKeepsakeNotify::kGroomNameFieldNumber;
const int CMessageExchangeKeepsakeNotify::kBrideKeepsakeFieldNumber;
const int CMessageExchangeKeepsakeNotify::kBrideNameFieldNumber;
const int CMessageExchangeKeepsakeNotify::kGroomKeepsakeFieldNumber;
#endif  // !_MSC_VER

CMessageExchangeKeepsakeNotify::CMessageExchangeKeepsakeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExchangeKeepsakeNotify::InitAsDefaultInstance() {  bridekeepsake_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
  groomkeepsake_ = const_cast< ::PBItemObject*>(&::PBItemObject::default_instance());
}

CMessageExchangeKeepsakeNotify::CMessageExchangeKeepsakeNotify(const CMessageExchangeKeepsakeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeNotify::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridekeepsake_ = NULL;
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  groomkeepsake_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExchangeKeepsakeNotify::~CMessageExchangeKeepsakeNotify() {
  SharedDtor();
}

void CMessageExchangeKeepsakeNotify::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
    delete bridekeepsake_;
    delete groomkeepsake_;
  }
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeNotify_descriptor_;
}

const CMessageExchangeKeepsakeNotify& CMessageExchangeKeepsakeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageExchangeKeepsakeNotify* CMessageExchangeKeepsakeNotify::default_instance_ = NULL;

CMessageExchangeKeepsakeNotify* CMessageExchangeKeepsakeNotify::New() const {
  return new CMessageExchangeKeepsakeNotify;
}

void CMessageExchangeKeepsakeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bridekeepsake_ != NULL) bridekeepsake_->::PBItemObject::Clear();
    }
    if (_has_bit(2)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    if (_has_bit(3)) {
      if (groomkeepsake_ != NULL) groomkeepsake_->::PBItemObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExchangeKeepsakeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(18)) goto parse_BrideKeepsake;
        break;
      }
      
      // optional .PBItemObject BrideKeepsake = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideKeepsake:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_bridekeepsake()));
        if (input->ExpectTag(26)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(34)) goto parse_GroomKeepsake;
        break;
      }
      
      // optional .PBItemObject GroomKeepsake = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroomKeepsake:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_groomkeepsake()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExchangeKeepsakeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExchangeKeepsakeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional .PBItemObject BrideKeepsake = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->bridekeepsake(), output);
  }
  
  // optional string BrideName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->bridename(), output);
  }
  
  // optional .PBItemObject GroomKeepsake = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->groomkeepsake(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExchangeKeepsakeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional .PBItemObject BrideKeepsake = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->bridekeepsake(), target);
  }
  
  // optional string BrideName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->bridename(), target);
  }
  
  // optional .PBItemObject GroomKeepsake = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->groomkeepsake(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExchangeKeepsakeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional .PBItemObject BrideKeepsake = 2;
    if (has_bridekeepsake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->bridekeepsake());
    }
    
    // optional string BrideName = 3;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional .PBItemObject GroomKeepsake = 4;
    if (has_groomkeepsake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->groomkeepsake());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExchangeKeepsakeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExchangeKeepsakeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExchangeKeepsakeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExchangeKeepsakeNotify::MergeFrom(const CMessageExchangeKeepsakeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      mutable_bridekeepsake()->::PBItemObject::MergeFrom(from.bridekeepsake());
    }
    if (from._has_bit(2)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(3)) {
      mutable_groomkeepsake()->::PBItemObject::MergeFrom(from.groomkeepsake());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExchangeKeepsakeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeNotify::CopyFrom(const CMessageExchangeKeepsakeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeKeepsakeNotify::Swap(CMessageExchangeKeepsakeNotify* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(bridekeepsake_, other->bridekeepsake_);
    std::swap(bridename_, other->bridename_);
    std::swap(groomkeepsake_, other->groomkeepsake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExchangeKeepsakeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExchangeKeepsakeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExchangeKeepsakeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeKeepsakeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDivorceRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageDivorceRequest::CMessageDivorceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDivorceRequest::InitAsDefaultInstance() {}

CMessageDivorceRequest::CMessageDivorceRequest(const CMessageDivorceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDivorceRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDivorceRequest::~CMessageDivorceRequest() {
  SharedDtor();
}

void CMessageDivorceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDivorceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceRequest_descriptor_;
}

const CMessageDivorceRequest& CMessageDivorceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDivorceRequest* CMessageDivorceRequest::default_instance_ = NULL;

CMessageDivorceRequest* CMessageDivorceRequest::New() const {
  return new CMessageDivorceRequest;
}

void CMessageDivorceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDivorceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDivorceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDivorceRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDivorceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDivorceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDivorceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDivorceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDivorceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDivorceRequest::MergeFrom(const CMessageDivorceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDivorceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceRequest::CopyFrom(const CMessageDivorceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceRequest::Swap(CMessageDivorceRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDivorceRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDivorceRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDivorceRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDivorceResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageDivorceResponse::CMessageDivorceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDivorceResponse::InitAsDefaultInstance() {}

CMessageDivorceResponse::CMessageDivorceResponse(const CMessageDivorceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDivorceResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDivorceResponse::~CMessageDivorceResponse() {
  SharedDtor();
}

void CMessageDivorceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDivorceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceResponse_descriptor_;
}

const CMessageDivorceResponse& CMessageDivorceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDivorceResponse* CMessageDivorceResponse::default_instance_ = NULL;

CMessageDivorceResponse* CMessageDivorceResponse::New() const {
  return new CMessageDivorceResponse;
}

void CMessageDivorceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDivorceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDivorceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDivorceResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDivorceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDivorceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDivorceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDivorceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDivorceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDivorceResponse::MergeFrom(const CMessageDivorceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDivorceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceResponse::CopyFrom(const CMessageDivorceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceResponse::Swap(CMessageDivorceResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDivorceResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDivorceResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDivorceResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageDivorceNotify::_default_groomname_;
const ::std::string CMessageDivorceNotify::_default_bridename_;
#ifndef _MSC_VER
const int CMessageDivorceNotify::kGroomNameFieldNumber;
const int CMessageDivorceNotify::kGroomCharIDFieldNumber;
const int CMessageDivorceNotify::kBrideNameFieldNumber;
const int CMessageDivorceNotify::kBrideCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageDivorceNotify::CMessageDivorceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDivorceNotify::InitAsDefaultInstance() {}

CMessageDivorceNotify::CMessageDivorceNotify(const CMessageDivorceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDivorceNotify::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  groomcharid_ = 0u;
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  bridecharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDivorceNotify::~CMessageDivorceNotify() {
  SharedDtor();
}

void CMessageDivorceNotify::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDivorceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceNotify_descriptor_;
}

const CMessageDivorceNotify& CMessageDivorceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDivorceNotify* CMessageDivorceNotify::default_instance_ = NULL;

CMessageDivorceNotify* CMessageDivorceNotify::New() const {
  return new CMessageDivorceNotify;
}

void CMessageDivorceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    groomcharid_ = 0u;
    if (_has_bit(2)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    bridecharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDivorceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(16)) goto parse_GroomCharID;
        break;
      }
      
      // optional uint32 GroomCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomcharid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(32)) goto parse_BrideCharID;
        break;
      }
      
      // optional uint32 BrideCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bridecharid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDivorceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDivorceNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional uint32 GroomCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->groomcharid(), output);
  }
  
  // optional string BrideName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->bridename(), output);
  }
  
  // optional uint32 BrideCharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->bridecharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDivorceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional uint32 GroomCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->groomcharid(), target);
  }
  
  // optional string BrideName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->bridename(), target);
  }
  
  // optional uint32 BrideCharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->bridecharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDivorceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional uint32 GroomCharID = 2;
    if (has_groomcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomcharid());
    }
    
    // optional string BrideName = 3;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 BrideCharID = 4;
    if (has_bridecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bridecharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDivorceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDivorceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDivorceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDivorceNotify::MergeFrom(const CMessageDivorceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      set_groomcharid(from.groomcharid());
    }
    if (from._has_bit(2)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(3)) {
      set_bridecharid(from.bridecharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDivorceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceNotify::CopyFrom(const CMessageDivorceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDivorceNotify::Swap(CMessageDivorceNotify* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(groomcharid_, other->groomcharid_);
    std::swap(bridename_, other->bridename_);
    std::swap(bridecharid_, other->bridecharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDivorceNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDivorceNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDivorceNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDivorceNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageMarryResultNotify::_default_spousename_;
#ifndef _MSC_VER
const int CMessageMarryResultNotify::kResultFieldNumber;
const int CMessageMarryResultNotify::kSpouseNameFieldNumber;
const int CMessageMarryResultNotify::kMarriageStatusFieldNumber;
const int CMessageMarryResultNotify::kWeddingTimeFieldNumber;
#endif  // !_MSC_VER

CMessageMarryResultNotify::CMessageMarryResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageMarryResultNotify::InitAsDefaultInstance() {}

CMessageMarryResultNotify::CMessageMarryResultNotify(const CMessageMarryResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageMarryResultNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  spousename_ = const_cast< ::std::string*>(&_default_spousename_);
  marriagestatus_ = 0u;
  weddingtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageMarryResultNotify::~CMessageMarryResultNotify() {
  SharedDtor();
}

void CMessageMarryResultNotify::SharedDtor() {
  if (spousename_ != &_default_spousename_) {
    delete spousename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageMarryResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarryResultNotify_descriptor_;
}

const CMessageMarryResultNotify& CMessageMarryResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageMarryResultNotify* CMessageMarryResultNotify::default_instance_ = NULL;

CMessageMarryResultNotify* CMessageMarryResultNotify::New() const {
  return new CMessageMarryResultNotify;
}

void CMessageMarryResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (spousename_ != &_default_spousename_) {
        spousename_->clear();
      }
    }
    marriagestatus_ = 0u;
    weddingtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageMarryResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SpouseName;
        break;
      }
      
      // optional string SpouseName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpouseName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_spousename()));
        if (input->ExpectTag(24)) goto parse_MarriageStatus;
        break;
      }
      
      // optional uint32 MarriageStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagestatus_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageMarryResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageMarryResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional string SpouseName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->spousename(), output);
  }
  
  // optional uint32 MarriageStatus = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->marriagestatus(), output);
  }
  
  // optional uint32 WeddingTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageMarryResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional string SpouseName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->spousename(), target);
  }
  
  // optional uint32 MarriageStatus = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->marriagestatus(), target);
  }
  
  // optional uint32 WeddingTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageMarryResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string SpouseName = 2;
    if (has_spousename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->spousename());
    }
    
    // optional uint32 MarriageStatus = 3;
    if (has_marriagestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagestatus());
    }
    
    // optional uint32 WeddingTime = 4;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageMarryResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageMarryResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageMarryResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageMarryResultNotify::MergeFrom(const CMessageMarryResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_spousename(from.spousename());
    }
    if (from._has_bit(2)) {
      set_marriagestatus(from.marriagestatus());
    }
    if (from._has_bit(3)) {
      set_weddingtime(from.weddingtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageMarryResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarryResultNotify::CopyFrom(const CMessageMarryResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageMarryResultNotify::Swap(CMessageMarryResultNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(spousename_, other->spousename_);
    std::swap(marriagestatus_, other->marriagestatus_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageMarryResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageMarryResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageMarryResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageMarryResultNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageBeginWeddingResultNofiy::_default_spousename_;
#ifndef _MSC_VER
const int CMessageBeginWeddingResultNofiy::kResultFieldNumber;
const int CMessageBeginWeddingResultNofiy::kSpouseNameFieldNumber;
#endif  // !_MSC_VER

CMessageBeginWeddingResultNofiy::CMessageBeginWeddingResultNofiy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBeginWeddingResultNofiy::InitAsDefaultInstance() {}

CMessageBeginWeddingResultNofiy::CMessageBeginWeddingResultNofiy(const CMessageBeginWeddingResultNofiy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBeginWeddingResultNofiy::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  spousename_ = const_cast< ::std::string*>(&_default_spousename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBeginWeddingResultNofiy::~CMessageBeginWeddingResultNofiy() {
  SharedDtor();
}

void CMessageBeginWeddingResultNofiy::SharedDtor() {
  if (spousename_ != &_default_spousename_) {
    delete spousename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingResultNofiy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingResultNofiy_descriptor_;
}

const CMessageBeginWeddingResultNofiy& CMessageBeginWeddingResultNofiy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageBeginWeddingResultNofiy* CMessageBeginWeddingResultNofiy::default_instance_ = NULL;

CMessageBeginWeddingResultNofiy* CMessageBeginWeddingResultNofiy::New() const {
  return new CMessageBeginWeddingResultNofiy;
}

void CMessageBeginWeddingResultNofiy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (spousename_ != &_default_spousename_) {
        spousename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBeginWeddingResultNofiy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SpouseName;
        break;
      }
      
      // optional string SpouseName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpouseName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_spousename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBeginWeddingResultNofiy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBeginWeddingResultNofiy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional string SpouseName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->spousename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBeginWeddingResultNofiy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional string SpouseName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->spousename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBeginWeddingResultNofiy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional string SpouseName = 2;
    if (has_spousename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->spousename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBeginWeddingResultNofiy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBeginWeddingResultNofiy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBeginWeddingResultNofiy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBeginWeddingResultNofiy::MergeFrom(const CMessageBeginWeddingResultNofiy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_spousename(from.spousename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBeginWeddingResultNofiy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingResultNofiy::CopyFrom(const CMessageBeginWeddingResultNofiy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBeginWeddingResultNofiy::Swap(CMessageBeginWeddingResultNofiy* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(spousename_, other->spousename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBeginWeddingResultNofiy::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBeginWeddingResultNofiy::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBeginWeddingResultNofiy::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBeginWeddingResultNofiy_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCampMarriageInfoRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetCampMarriageInfoRequest::CMessageGetCampMarriageInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCampMarriageInfoRequest::InitAsDefaultInstance() {}

CMessageGetCampMarriageInfoRequest::CMessageGetCampMarriageInfoRequest(const CMessageGetCampMarriageInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCampMarriageInfoRequest::~CMessageGetCampMarriageInfoRequest() {
  SharedDtor();
}

void CMessageGetCampMarriageInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampMarriageInfoRequest_descriptor_;
}

const CMessageGetCampMarriageInfoRequest& CMessageGetCampMarriageInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCampMarriageInfoRequest* CMessageGetCampMarriageInfoRequest::default_instance_ = NULL;

CMessageGetCampMarriageInfoRequest* CMessageGetCampMarriageInfoRequest::New() const {
  return new CMessageGetCampMarriageInfoRequest;
}

void CMessageGetCampMarriageInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCampMarriageInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCampMarriageInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCampMarriageInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCampMarriageInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCampMarriageInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCampMarriageInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCampMarriageInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCampMarriageInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCampMarriageInfoRequest::MergeFrom(const CMessageGetCampMarriageInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCampMarriageInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoRequest::CopyFrom(const CMessageGetCampMarriageInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoRequest::Swap(CMessageGetCampMarriageInfoRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCampMarriageInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCampMarriageInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampMarriageInfoRequest_reflection_;
}

// ===================================================================

const ::std::string PBMarriageInfo::_default_groomname_;
const ::std::string PBMarriageInfo::_default_bridename_;
#ifndef _MSC_VER
const int PBMarriageInfo::kGroomNameFieldNumber;
const int PBMarriageInfo::kBrideNameFieldNumber;
const int PBMarriageInfo::kWeddingTimeFieldNumber;
const int PBMarriageInfo::kWeddingEndTimeFieldNumber;
const int PBMarriageInfo::kCommoAllowedFieldNumber;
const int PBMarriageInfo::kTimeUsedFieldNumber;
const int PBMarriageInfo::kTimeIDFieldNumber;
#endif  // !_MSC_VER

PBMarriageInfo::PBMarriageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMarriageInfo::InitAsDefaultInstance() {}

PBMarriageInfo::PBMarriageInfo(const PBMarriageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMarriageInfo::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  weddingtime_ = 0u;
  weddingendtime_ = 0u;
  commoallowed_ = 0u;
  timeused_ = 0u;
  timeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMarriageInfo::~PBMarriageInfo() {
  SharedDtor();
}

void PBMarriageInfo::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMarriageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMarriageInfo_descriptor_;
}

const PBMarriageInfo& PBMarriageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

PBMarriageInfo* PBMarriageInfo::default_instance_ = NULL;

PBMarriageInfo* PBMarriageInfo::New() const {
  return new PBMarriageInfo;
}

void PBMarriageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    weddingtime_ = 0u;
    weddingendtime_ = 0u;
    commoallowed_ = 0u;
    timeused_ = 0u;
    timeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMarriageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(18)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(24)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingEndTime;
        break;
      }
      
      // optional uint32 WeddingEndTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingEndTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingendtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CommoAllowed;
        break;
      }
      
      // optional uint32 CommoAllowed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommoAllowed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commoallowed_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TimeUsed;
        break;
      }
      
      // optional uint32 TimeUsed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeUsed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeused_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TimeID;
        break;
      }
      
      // optional uint32 TimeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMarriageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMarriageInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bridename(), output);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->weddingtime(), output);
  }
  
  // optional uint32 WeddingEndTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingendtime(), output);
  }
  
  // optional uint32 CommoAllowed = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->commoallowed(), output);
  }
  
  // optional uint32 TimeUsed = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->timeused(), output);
  }
  
  // optional uint32 TimeID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->timeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMarriageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bridename(), target);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->weddingtime(), target);
  }
  
  // optional uint32 WeddingEndTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingendtime(), target);
  }
  
  // optional uint32 CommoAllowed = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->commoallowed(), target);
  }
  
  // optional uint32 TimeUsed = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->timeused(), target);
  }
  
  // optional uint32 TimeID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->timeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMarriageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional string BrideName = 2;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 WeddingTime = 3;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 WeddingEndTime = 4;
    if (has_weddingendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingendtime());
    }
    
    // optional uint32 CommoAllowed = 5;
    if (has_commoallowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commoallowed());
    }
    
    // optional uint32 TimeUsed = 6;
    if (has_timeused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeused());
    }
    
    // optional uint32 TimeID = 7;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMarriageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMarriageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMarriageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMarriageInfo::MergeFrom(const PBMarriageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(2)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(3)) {
      set_weddingendtime(from.weddingendtime());
    }
    if (from._has_bit(4)) {
      set_commoallowed(from.commoallowed());
    }
    if (from._has_bit(5)) {
      set_timeused(from.timeused());
    }
    if (from._has_bit(6)) {
      set_timeid(from.timeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMarriageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarriageInfo::CopyFrom(const PBMarriageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarriageInfo::Swap(PBMarriageInfo* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(bridename_, other->bridename_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(weddingendtime_, other->weddingendtime_);
    std::swap(commoallowed_, other->commoallowed_);
    std::swap(timeused_, other->timeused_);
    std::swap(timeid_, other->timeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMarriageInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMarriageInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMarriageInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMarriageInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMarriageList::kMarriageInfoFieldNumber;
const int PBMarriageList::kYearFieldNumber;
const int PBMarriageList::kMonthFieldNumber;
const int PBMarriageList::kDayFieldNumber;
#endif  // !_MSC_VER

PBMarriageList::PBMarriageList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMarriageList::InitAsDefaultInstance() {}

PBMarriageList::PBMarriageList(const PBMarriageList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMarriageList::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMarriageList::~PBMarriageList() {
  SharedDtor();
}

void PBMarriageList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMarriageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMarriageList_descriptor_;
}

const PBMarriageList& PBMarriageList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

PBMarriageList* PBMarriageList::default_instance_ = NULL;

PBMarriageList* PBMarriageList::New() const {
  return new PBMarriageList;
}

void PBMarriageList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    year_ = 0u;
    month_ = 0u;
    day_ = 0u;
  }
  marriageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMarriageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBMarriageInfo MarriageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MarriageInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_marriageinfo()));
        if (input->ExpectTag(10)) goto parse_MarriageInfo;
        if (input->ExpectTag(16)) goto parse_Year;
        break;
      }
      
      // optional uint32 Year = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Year:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &year_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Month;
        break;
      }
      
      // optional uint32 Month = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Month:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &month_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Day;
        break;
      }
      
      // optional uint32 Day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Day:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &day_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMarriageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMarriageList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBMarriageInfo MarriageInfo = 1;
  for (int i = 0; i < this->marriageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->marriageinfo(i), output);
  }
  
  // optional uint32 Year = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->year(), output);
  }
  
  // optional uint32 Month = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->month(), output);
  }
  
  // optional uint32 Day = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMarriageList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMarriageInfo MarriageInfo = 1;
  for (int i = 0; i < this->marriageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->marriageinfo(i), target);
  }
  
  // optional uint32 Year = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->year(), target);
  }
  
  // optional uint32 Month = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->month(), target);
  }
  
  // optional uint32 Day = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMarriageList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Year = 2;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->year());
    }
    
    // optional uint32 Month = 3;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->month());
    }
    
    // optional uint32 Day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->day());
    }
    
  }
  // repeated .PBMarriageInfo MarriageInfo = 1;
  total_size += 1 * this->marriageinfo_size();
  for (int i = 0; i < this->marriageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->marriageinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMarriageList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMarriageList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMarriageList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMarriageList::MergeFrom(const PBMarriageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  marriageinfo_.MergeFrom(from.marriageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_year(from.year());
    }
    if (from._has_bit(2)) {
      set_month(from.month());
    }
    if (from._has_bit(3)) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMarriageList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarriageList::CopyFrom(const PBMarriageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMarriageList::Swap(PBMarriageList* other) {
  if (other != this) {
    marriageinfo_.Swap(&other->marriageinfo_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMarriageList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMarriageList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMarriageList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMarriageList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetCampMarriageInfoResponse::kMarriageListAFieldNumber;
const int CMessageGetCampMarriageInfoResponse::kMarriageListBFieldNumber;
const int CMessageGetCampMarriageInfoResponse::kMarriageListCFieldNumber;
#endif  // !_MSC_VER

CMessageGetCampMarriageInfoResponse::CMessageGetCampMarriageInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetCampMarriageInfoResponse::InitAsDefaultInstance() {  marriagelista_ = const_cast< ::PBMarriageList*>(&::PBMarriageList::default_instance());
  marriagelistb_ = const_cast< ::PBMarriageList*>(&::PBMarriageList::default_instance());
  marriagelistc_ = const_cast< ::PBMarriageList*>(&::PBMarriageList::default_instance());
}

CMessageGetCampMarriageInfoResponse::CMessageGetCampMarriageInfoResponse(const CMessageGetCampMarriageInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  marriagelista_ = NULL;
  marriagelistb_ = NULL;
  marriagelistc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetCampMarriageInfoResponse::~CMessageGetCampMarriageInfoResponse() {
  SharedDtor();
}

void CMessageGetCampMarriageInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete marriagelista_;
    delete marriagelistb_;
    delete marriagelistc_;
  }
}

const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampMarriageInfoResponse_descriptor_;
}

const CMessageGetCampMarriageInfoResponse& CMessageGetCampMarriageInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetCampMarriageInfoResponse* CMessageGetCampMarriageInfoResponse::default_instance_ = NULL;

CMessageGetCampMarriageInfoResponse* CMessageGetCampMarriageInfoResponse::New() const {
  return new CMessageGetCampMarriageInfoResponse;
}

void CMessageGetCampMarriageInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (marriagelista_ != NULL) marriagelista_->::PBMarriageList::Clear();
    }
    if (_has_bit(1)) {
      if (marriagelistb_ != NULL) marriagelistb_->::PBMarriageList::Clear();
    }
    if (_has_bit(2)) {
      if (marriagelistc_ != NULL) marriagelistc_->::PBMarriageList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetCampMarriageInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBMarriageList MarriageListA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_marriagelista()));
        if (input->ExpectTag(18)) goto parse_MarriageListB;
        break;
      }
      
      // optional .PBMarriageList MarriageListB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MarriageListB:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_marriagelistb()));
        if (input->ExpectTag(26)) goto parse_MarriageListC;
        break;
      }
      
      // optional .PBMarriageList MarriageListC = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MarriageListC:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_marriagelistc()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetCampMarriageInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetCampMarriageInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBMarriageList MarriageListA = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->marriagelista(), output);
  }
  
  // optional .PBMarriageList MarriageListB = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->marriagelistb(), output);
  }
  
  // optional .PBMarriageList MarriageListC = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->marriagelistc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetCampMarriageInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBMarriageList MarriageListA = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->marriagelista(), target);
  }
  
  // optional .PBMarriageList MarriageListB = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->marriagelistb(), target);
  }
  
  // optional .PBMarriageList MarriageListC = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->marriagelistc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetCampMarriageInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBMarriageList MarriageListA = 1;
    if (has_marriagelista()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->marriagelista());
    }
    
    // optional .PBMarriageList MarriageListB = 2;
    if (has_marriagelistb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->marriagelistb());
    }
    
    // optional .PBMarriageList MarriageListC = 3;
    if (has_marriagelistc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->marriagelistc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetCampMarriageInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetCampMarriageInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetCampMarriageInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetCampMarriageInfoResponse::MergeFrom(const CMessageGetCampMarriageInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_marriagelista()->::PBMarriageList::MergeFrom(from.marriagelista());
    }
    if (from._has_bit(1)) {
      mutable_marriagelistb()->::PBMarriageList::MergeFrom(from.marriagelistb());
    }
    if (from._has_bit(2)) {
      mutable_marriagelistc()->::PBMarriageList::MergeFrom(from.marriagelistc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetCampMarriageInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoResponse::CopyFrom(const CMessageGetCampMarriageInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetCampMarriageInfoResponse::Swap(CMessageGetCampMarriageInfoResponse* other) {
  if (other != this) {
    std::swap(marriagelista_, other->marriagelista_);
    std::swap(marriagelistb_, other->marriagelistb_);
    std::swap(marriagelistc_, other->marriagelistc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetCampMarriageInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetCampMarriageInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetCampMarriageInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetCampMarriageInfoResponse_reflection_;
}

// ===================================================================

const ::std::string CMessagePersonMarriedNotify::_default_groomname_;
const ::std::string CMessagePersonMarriedNotify::_default_bridename_;
#ifndef _MSC_VER
const int CMessagePersonMarriedNotify::kGroomNameFieldNumber;
const int CMessagePersonMarriedNotify::kBrideNameFieldNumber;
const int CMessagePersonMarriedNotify::kServerSequenceFieldNumber;
#endif  // !_MSC_VER

CMessagePersonMarriedNotify::CMessagePersonMarriedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePersonMarriedNotify::InitAsDefaultInstance() {}

CMessagePersonMarriedNotify::CMessagePersonMarriedNotify(const CMessagePersonMarriedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePersonMarriedNotify::SharedCtor() {
  _cached_size_ = 0;
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  serversequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePersonMarriedNotify::~CMessagePersonMarriedNotify() {
  SharedDtor();
}

void CMessagePersonMarriedNotify::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePersonMarriedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonMarriedNotify_descriptor_;
}

const CMessagePersonMarriedNotify& CMessagePersonMarriedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePersonMarriedNotify* CMessagePersonMarriedNotify::default_instance_ = NULL;

CMessagePersonMarriedNotify* CMessagePersonMarriedNotify::New() const {
  return new CMessagePersonMarriedNotify;
}

void CMessagePersonMarriedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    serversequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePersonMarriedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string GroomName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(18)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(24)) goto parse_ServerSequence;
        break;
      }
      
      // optional uint32 ServerSequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerSequence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serversequence_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePersonMarriedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePersonMarriedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groomname(), output);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->bridename(), output);
  }
  
  // optional uint32 ServerSequence = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->serversequence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePersonMarriedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroomName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groomname(), target);
  }
  
  // optional string BrideName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->bridename(), target);
  }
  
  // optional uint32 ServerSequence = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->serversequence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePersonMarriedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroomName = 1;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional string BrideName = 2;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 ServerSequence = 3;
    if (has_serversequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serversequence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePersonMarriedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePersonMarriedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePersonMarriedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePersonMarriedNotify::MergeFrom(const CMessagePersonMarriedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(1)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(2)) {
      set_serversequence(from.serversequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePersonMarriedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonMarriedNotify::CopyFrom(const CMessagePersonMarriedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonMarriedNotify::Swap(CMessagePersonMarriedNotify* other) {
  if (other != this) {
    std::swap(groomname_, other->groomname_);
    std::swap(bridename_, other->bridename_);
    std::swap(serversequence_, other->serversequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePersonMarriedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePersonMarriedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePersonMarriedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonMarriedNotify_reflection_;
}

// ===================================================================

const ::std::string CMessagePersonMarriageInfoNotify::_default_spousename_;
#ifndef _MSC_VER
const int CMessagePersonMarriageInfoNotify::kSpouseNameFieldNumber;
const int CMessagePersonMarriageInfoNotify::kMarriageStatusFieldNumber;
const int CMessagePersonMarriageInfoNotify::kWeddingTimeFieldNumber;
const int CMessagePersonMarriageInfoNotify::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessagePersonMarriageInfoNotify::CMessagePersonMarriageInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePersonMarriageInfoNotify::InitAsDefaultInstance() {}

CMessagePersonMarriageInfoNotify::CMessagePersonMarriageInfoNotify(const CMessagePersonMarriageInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePersonMarriageInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  spousename_ = const_cast< ::std::string*>(&_default_spousename_);
  marriagestatus_ = 0u;
  weddingtime_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePersonMarriageInfoNotify::~CMessagePersonMarriageInfoNotify() {
  SharedDtor();
}

void CMessagePersonMarriageInfoNotify::SharedDtor() {
  if (spousename_ != &_default_spousename_) {
    delete spousename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePersonMarriageInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonMarriageInfoNotify_descriptor_;
}

const CMessagePersonMarriageInfoNotify& CMessagePersonMarriageInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePersonMarriageInfoNotify* CMessagePersonMarriageInfoNotify::default_instance_ = NULL;

CMessagePersonMarriageInfoNotify* CMessagePersonMarriageInfoNotify::New() const {
  return new CMessagePersonMarriageInfoNotify;
}

void CMessagePersonMarriageInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (spousename_ != &_default_spousename_) {
        spousename_->clear();
      }
    }
    marriagestatus_ = 0u;
    weddingtime_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePersonMarriageInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SpouseName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_spousename()));
        if (input->ExpectTag(16)) goto parse_MarriageStatus;
        break;
      }
      
      // optional uint32 MarriageStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MarriageStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &marriagestatus_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePersonMarriageInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePersonMarriageInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SpouseName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->spousename(), output);
  }
  
  // optional uint32 MarriageStatus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->marriagestatus(), output);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->weddingtime(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePersonMarriageInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SpouseName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->spousename(), target);
  }
  
  // optional uint32 MarriageStatus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->marriagestatus(), target);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->weddingtime(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePersonMarriageInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SpouseName = 1;
    if (has_spousename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->spousename());
    }
    
    // optional uint32 MarriageStatus = 2;
    if (has_marriagestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->marriagestatus());
    }
    
    // optional uint32 WeddingTime = 3;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePersonMarriageInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePersonMarriageInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePersonMarriageInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePersonMarriageInfoNotify::MergeFrom(const CMessagePersonMarriageInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_spousename(from.spousename());
    }
    if (from._has_bit(1)) {
      set_marriagestatus(from.marriagestatus());
    }
    if (from._has_bit(2)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePersonMarriageInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonMarriageInfoNotify::CopyFrom(const CMessagePersonMarriageInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePersonMarriageInfoNotify::Swap(CMessagePersonMarriageInfoNotify* other) {
  if (other != this) {
    std::swap(spousename_, other->spousename_);
    std::swap(marriagestatus_, other->marriagestatus_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePersonMarriageInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePersonMarriageInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePersonMarriageInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePersonMarriageInfoNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSpouseDivorceNotify::kRouterFieldNumber;
#endif  // !_MSC_VER

CMessageSpouseDivorceNotify::CMessageSpouseDivorceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSpouseDivorceNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageSpouseDivorceNotify::CMessageSpouseDivorceNotify(const CMessageSpouseDivorceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSpouseDivorceNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSpouseDivorceNotify::~CMessageSpouseDivorceNotify() {
  SharedDtor();
}

void CMessageSpouseDivorceNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageSpouseDivorceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSpouseDivorceNotify_descriptor_;
}

const CMessageSpouseDivorceNotify& CMessageSpouseDivorceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSpouseDivorceNotify* CMessageSpouseDivorceNotify::default_instance_ = NULL;

CMessageSpouseDivorceNotify* CMessageSpouseDivorceNotify::New() const {
  return new CMessageSpouseDivorceNotify;
}

void CMessageSpouseDivorceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSpouseDivorceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSpouseDivorceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSpouseDivorceNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSpouseDivorceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSpouseDivorceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSpouseDivorceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSpouseDivorceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSpouseDivorceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSpouseDivorceNotify::MergeFrom(const CMessageSpouseDivorceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSpouseDivorceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSpouseDivorceNotify::CopyFrom(const CMessageSpouseDivorceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSpouseDivorceNotify::Swap(CMessageSpouseDivorceNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSpouseDivorceNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSpouseDivorceNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSpouseDivorceNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSpouseDivorceNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageUseSysInvitationRequest::_default_receivedname_;
#ifndef _MSC_VER
const int CMessageUseSysInvitationRequest::kItemIndexFieldNumber;
const int CMessageUseSysInvitationRequest::kReceivedNameFieldNumber;
const int CMessageUseSysInvitationRequest::kReceivedIDFieldNumber;
#endif  // !_MSC_VER

CMessageUseSysInvitationRequest::CMessageUseSysInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseSysInvitationRequest::InitAsDefaultInstance() {}

CMessageUseSysInvitationRequest::CMessageUseSysInvitationRequest(const CMessageUseSysInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseSysInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  receivedname_ = const_cast< ::std::string*>(&_default_receivedname_);
  receivedid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseSysInvitationRequest::~CMessageUseSysInvitationRequest() {
  SharedDtor();
}

void CMessageUseSysInvitationRequest::SharedDtor() {
  if (receivedname_ != &_default_receivedname_) {
    delete receivedname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseSysInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseSysInvitationRequest_descriptor_;
}

const CMessageUseSysInvitationRequest& CMessageUseSysInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseSysInvitationRequest* CMessageUseSysInvitationRequest::default_instance_ = NULL;

CMessageUseSysInvitationRequest* CMessageUseSysInvitationRequest::New() const {
  return new CMessageUseSysInvitationRequest;
}

void CMessageUseSysInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    if (_has_bit(1)) {
      if (receivedname_ != &_default_receivedname_) {
        receivedname_->clear();
      }
    }
    receivedid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseSysInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ReceivedName;
        break;
      }
      
      // optional string ReceivedName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ReceivedName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_receivedname()));
        if (input->ExpectTag(24)) goto parse_ReceivedID;
        break;
      }
      
      // optional uint32 ReceivedID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReceivedID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &receivedid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseSysInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseSysInvitationRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional string ReceivedName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->receivedname(), output);
  }
  
  // optional uint32 ReceivedID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->receivedid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseSysInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional string ReceivedName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->receivedname(), target);
  }
  
  // optional uint32 ReceivedID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->receivedid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseSysInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional string ReceivedName = 2;
    if (has_receivedname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->receivedname());
    }
    
    // optional uint32 ReceivedID = 3;
    if (has_receivedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->receivedid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseSysInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseSysInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseSysInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseSysInvitationRequest::MergeFrom(const CMessageUseSysInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_receivedname(from.receivedname());
    }
    if (from._has_bit(2)) {
      set_receivedid(from.receivedid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseSysInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseSysInvitationRequest::CopyFrom(const CMessageUseSysInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseSysInvitationRequest::Swap(CMessageUseSysInvitationRequest* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(receivedname_, other->receivedname_);
    std::swap(receivedid_, other->receivedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseSysInvitationRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseSysInvitationRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseSysInvitationRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseSysInvitationRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUseSysInvitationResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageUseSysInvitationResponse::CMessageUseSysInvitationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseSysInvitationResponse::InitAsDefaultInstance() {}

CMessageUseSysInvitationResponse::CMessageUseSysInvitationResponse(const CMessageUseSysInvitationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseSysInvitationResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseSysInvitationResponse::~CMessageUseSysInvitationResponse() {
  SharedDtor();
}

void CMessageUseSysInvitationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseSysInvitationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseSysInvitationResponse_descriptor_;
}

const CMessageUseSysInvitationResponse& CMessageUseSysInvitationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseSysInvitationResponse* CMessageUseSysInvitationResponse::default_instance_ = NULL;

CMessageUseSysInvitationResponse* CMessageUseSysInvitationResponse::New() const {
  return new CMessageUseSysInvitationResponse;
}

void CMessageUseSysInvitationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseSysInvitationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseSysInvitationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseSysInvitationResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseSysInvitationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseSysInvitationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseSysInvitationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseSysInvitationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseSysInvitationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseSysInvitationResponse::MergeFrom(const CMessageUseSysInvitationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseSysInvitationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseSysInvitationResponse::CopyFrom(const CMessageUseSysInvitationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseSysInvitationResponse::Swap(CMessageUseSysInvitationResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseSysInvitationResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseSysInvitationResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseSysInvitationResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseSysInvitationResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTimeToPutKeepsakeNotify::kGroomRoleIDFieldNumber;
const int CMessageTimeToPutKeepsakeNotify::kBrideRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageTimeToPutKeepsakeNotify::CMessageTimeToPutKeepsakeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTimeToPutKeepsakeNotify::InitAsDefaultInstance() {}

CMessageTimeToPutKeepsakeNotify::CMessageTimeToPutKeepsakeNotify(const CMessageTimeToPutKeepsakeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTimeToPutKeepsakeNotify::SharedCtor() {
  _cached_size_ = 0;
  groomroleid_ = 0u;
  brideroleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTimeToPutKeepsakeNotify::~CMessageTimeToPutKeepsakeNotify() {
  SharedDtor();
}

void CMessageTimeToPutKeepsakeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTimeToPutKeepsakeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTimeToPutKeepsakeNotify_descriptor_;
}

const CMessageTimeToPutKeepsakeNotify& CMessageTimeToPutKeepsakeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTimeToPutKeepsakeNotify* CMessageTimeToPutKeepsakeNotify::default_instance_ = NULL;

CMessageTimeToPutKeepsakeNotify* CMessageTimeToPutKeepsakeNotify::New() const {
  return new CMessageTimeToPutKeepsakeNotify;
}

void CMessageTimeToPutKeepsakeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groomroleid_ = 0u;
    brideroleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTimeToPutKeepsakeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GroomRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomroleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BrideRoleID;
        break;
      }
      
      // optional uint32 BrideRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideroleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTimeToPutKeepsakeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTimeToPutKeepsakeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GroomRoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->groomroleid(), output);
  }
  
  // optional uint32 BrideRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->brideroleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTimeToPutKeepsakeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GroomRoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->groomroleid(), target);
  }
  
  // optional uint32 BrideRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->brideroleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTimeToPutKeepsakeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroomRoleID = 1;
    if (has_groomroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomroleid());
    }
    
    // optional uint32 BrideRoleID = 2;
    if (has_brideroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideroleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTimeToPutKeepsakeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTimeToPutKeepsakeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTimeToPutKeepsakeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTimeToPutKeepsakeNotify::MergeFrom(const CMessageTimeToPutKeepsakeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomroleid(from.groomroleid());
    }
    if (from._has_bit(1)) {
      set_brideroleid(from.brideroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTimeToPutKeepsakeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTimeToPutKeepsakeNotify::CopyFrom(const CMessageTimeToPutKeepsakeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTimeToPutKeepsakeNotify::Swap(CMessageTimeToPutKeepsakeNotify* other) {
  if (other != this) {
    std::swap(groomroleid_, other->groomroleid_);
    std::swap(brideroleid_, other->brideroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTimeToPutKeepsakeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTimeToPutKeepsakeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTimeToPutKeepsakeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTimeToPutKeepsakeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelWeddingRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageCancelWeddingRequest::CMessageCancelWeddingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelWeddingRequest::InitAsDefaultInstance() {}

CMessageCancelWeddingRequest::CMessageCancelWeddingRequest(const CMessageCancelWeddingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelWeddingRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelWeddingRequest::~CMessageCancelWeddingRequest() {
  SharedDtor();
}

void CMessageCancelWeddingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCancelWeddingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelWeddingRequest_descriptor_;
}

const CMessageCancelWeddingRequest& CMessageCancelWeddingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelWeddingRequest* CMessageCancelWeddingRequest::default_instance_ = NULL;

CMessageCancelWeddingRequest* CMessageCancelWeddingRequest::New() const {
  return new CMessageCancelWeddingRequest;
}

void CMessageCancelWeddingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelWeddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelWeddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelWeddingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelWeddingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelWeddingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelWeddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelWeddingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelWeddingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelWeddingRequest::MergeFrom(const CMessageCancelWeddingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelWeddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelWeddingRequest::CopyFrom(const CMessageCancelWeddingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelWeddingRequest::Swap(CMessageCancelWeddingRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelWeddingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelWeddingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelWeddingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelWeddingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelWeddingResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCancelWeddingResponse::CMessageCancelWeddingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelWeddingResponse::InitAsDefaultInstance() {}

CMessageCancelWeddingResponse::CMessageCancelWeddingResponse(const CMessageCancelWeddingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelWeddingResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelWeddingResponse::~CMessageCancelWeddingResponse() {
  SharedDtor();
}

void CMessageCancelWeddingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCancelWeddingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelWeddingResponse_descriptor_;
}

const CMessageCancelWeddingResponse& CMessageCancelWeddingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelWeddingResponse* CMessageCancelWeddingResponse::default_instance_ = NULL;

CMessageCancelWeddingResponse* CMessageCancelWeddingResponse::New() const {
  return new CMessageCancelWeddingResponse;
}

void CMessageCancelWeddingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelWeddingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelWeddingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelWeddingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelWeddingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelWeddingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelWeddingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelWeddingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelWeddingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelWeddingResponse::MergeFrom(const CMessageCancelWeddingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelWeddingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelWeddingResponse::CopyFrom(const CMessageCancelWeddingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelWeddingResponse::Swap(CMessageCancelWeddingResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelWeddingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelWeddingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelWeddingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelWeddingResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageNewlyMarriedNotify::_default_bridename_;
const ::std::string CMessageNewlyMarriedNotify::_default_groomname_;
#ifndef _MSC_VER
const int CMessageNewlyMarriedNotify::kBrideNameFieldNumber;
const int CMessageNewlyMarriedNotify::kGroomNameFieldNumber;
const int CMessageNewlyMarriedNotify::kWeddingTimeFieldNumber;
const int CMessageNewlyMarriedNotify::kWeddingTimeLengthFieldNumber;
const int CMessageNewlyMarriedNotify::kWeddingModuleFieldNumber;
const int CMessageNewlyMarriedNotify::kCampIDFieldNumber;
const int CMessageNewlyMarriedNotify::kSeverSequenceFieldNumber;
const int CMessageNewlyMarriedNotify::kBrideIDFieldNumber;
const int CMessageNewlyMarriedNotify::kGroomIDFieldNumber;
#endif  // !_MSC_VER

CMessageNewlyMarriedNotify::CMessageNewlyMarriedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageNewlyMarriedNotify::InitAsDefaultInstance() {}

CMessageNewlyMarriedNotify::CMessageNewlyMarriedNotify(const CMessageNewlyMarriedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageNewlyMarriedNotify::SharedCtor() {
  _cached_size_ = 0;
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  weddingtime_ = 0u;
  weddingtimelength_ = 0u;
  weddingmodule_ = 0u;
  campid_ = 0u;
  seversequence_ = 0u;
  brideid_ = 0u;
  groomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageNewlyMarriedNotify::~CMessageNewlyMarriedNotify() {
  SharedDtor();
}

void CMessageNewlyMarriedNotify::SharedDtor() {
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageNewlyMarriedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyMarriedNotify_descriptor_;
}

const CMessageNewlyMarriedNotify& CMessageNewlyMarriedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageNewlyMarriedNotify* CMessageNewlyMarriedNotify::default_instance_ = NULL;

CMessageNewlyMarriedNotify* CMessageNewlyMarriedNotify::New() const {
  return new CMessageNewlyMarriedNotify;
}

void CMessageNewlyMarriedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    if (_has_bit(1)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    weddingtime_ = 0u;
    weddingtimelength_ = 0u;
    weddingmodule_ = 0u;
    campid_ = 0u;
    seversequence_ = 0u;
    brideid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    groomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageNewlyMarriedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string BrideName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(18)) goto parse_GroomName;
        break;
      }
      
      // optional string GroomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(24)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingTimeLength;
        break;
      }
      
      // optional uint32 WeddingTimeLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtimelength_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SeverSequence;
        break;
      }
      
      // optional uint32 SeverSequence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SeverSequence:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &seversequence_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_BrideID;
        break;
      }
      
      // optional uint32 BrideID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_GroomID;
        break;
      }
      
      // optional uint32 GroomID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomid_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageNewlyMarriedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageNewlyMarriedNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string BrideName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->bridename(), output);
  }
  
  // optional string GroomName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->groomname(), output);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->weddingtime(), output);
  }
  
  // optional uint32 WeddingTimeLength = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingtimelength(), output);
  }
  
  // optional uint32 WeddingModule = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weddingmodule(), output);
  }
  
  // optional uint32 CampID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->campid(), output);
  }
  
  // optional uint32 SeverSequence = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->seversequence(), output);
  }
  
  // optional uint32 BrideID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->brideid(), output);
  }
  
  // optional uint32 GroomID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->groomid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageNewlyMarriedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string BrideName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->bridename(), target);
  }
  
  // optional string GroomName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->groomname(), target);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->weddingtime(), target);
  }
  
  // optional uint32 WeddingTimeLength = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingtimelength(), target);
  }
  
  // optional uint32 WeddingModule = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weddingmodule(), target);
  }
  
  // optional uint32 CampID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->campid(), target);
  }
  
  // optional uint32 SeverSequence = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->seversequence(), target);
  }
  
  // optional uint32 BrideID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->brideid(), target);
  }
  
  // optional uint32 GroomID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->groomid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageNewlyMarriedNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BrideName = 1;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional string GroomName = 2;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional uint32 WeddingTime = 3;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 WeddingTimeLength = 4;
    if (has_weddingtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtimelength());
    }
    
    // optional uint32 WeddingModule = 5;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 CampID = 6;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 SeverSequence = 7;
    if (has_seversequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->seversequence());
    }
    
    // optional uint32 BrideID = 8;
    if (has_brideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 GroomID = 9;
    if (has_groomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageNewlyMarriedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageNewlyMarriedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageNewlyMarriedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageNewlyMarriedNotify::MergeFrom(const CMessageNewlyMarriedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(1)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(2)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(3)) {
      set_weddingtimelength(from.weddingtimelength());
    }
    if (from._has_bit(4)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(5)) {
      set_campid(from.campid());
    }
    if (from._has_bit(6)) {
      set_seversequence(from.seversequence());
    }
    if (from._has_bit(7)) {
      set_brideid(from.brideid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_groomid(from.groomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageNewlyMarriedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyMarriedNotify::CopyFrom(const CMessageNewlyMarriedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageNewlyMarriedNotify::Swap(CMessageNewlyMarriedNotify* other) {
  if (other != this) {
    std::swap(bridename_, other->bridename_);
    std::swap(groomname_, other->groomname_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(weddingtimelength_, other->weddingtimelength_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(campid_, other->campid_);
    std::swap(seversequence_, other->seversequence_);
    std::swap(brideid_, other->brideid_);
    std::swap(groomid_, other->groomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageNewlyMarriedNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageNewlyMarriedNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageNewlyMarriedNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageNewlyMarriedNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageWeddingEndNotify::CMessageWeddingEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWeddingEndNotify::InitAsDefaultInstance() {}

CMessageWeddingEndNotify::CMessageWeddingEndNotify(const CMessageWeddingEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWeddingEndNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWeddingEndNotify::~CMessageWeddingEndNotify() {
  SharedDtor();
}

void CMessageWeddingEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWeddingEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWeddingEndNotify_descriptor_;
}

const CMessageWeddingEndNotify& CMessageWeddingEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWeddingEndNotify* CMessageWeddingEndNotify::default_instance_ = NULL;

CMessageWeddingEndNotify* CMessageWeddingEndNotify::New() const {
  return new CMessageWeddingEndNotify;
}

void CMessageWeddingEndNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWeddingEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageWeddingEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWeddingEndNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWeddingEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWeddingEndNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWeddingEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWeddingEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWeddingEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWeddingEndNotify::MergeFrom(const CMessageWeddingEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWeddingEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWeddingEndNotify::CopyFrom(const CMessageWeddingEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWeddingEndNotify::Swap(CMessageWeddingEndNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWeddingEndNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWeddingEndNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWeddingEndNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWeddingEndNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStartKeepsakeExchangeRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageStartKeepsakeExchangeRequest::CMessageStartKeepsakeExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartKeepsakeExchangeRequest::InitAsDefaultInstance() {}

CMessageStartKeepsakeExchangeRequest::CMessageStartKeepsakeExchangeRequest(const CMessageStartKeepsakeExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartKeepsakeExchangeRequest::~CMessageStartKeepsakeExchangeRequest() {
  SharedDtor();
}

void CMessageStartKeepsakeExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartKeepsakeExchangeRequest_descriptor_;
}

const CMessageStartKeepsakeExchangeRequest& CMessageStartKeepsakeExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartKeepsakeExchangeRequest* CMessageStartKeepsakeExchangeRequest::default_instance_ = NULL;

CMessageStartKeepsakeExchangeRequest* CMessageStartKeepsakeExchangeRequest::New() const {
  return new CMessageStartKeepsakeExchangeRequest;
}

void CMessageStartKeepsakeExchangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartKeepsakeExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartKeepsakeExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartKeepsakeExchangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartKeepsakeExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartKeepsakeExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartKeepsakeExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartKeepsakeExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartKeepsakeExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartKeepsakeExchangeRequest::MergeFrom(const CMessageStartKeepsakeExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartKeepsakeExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeRequest::CopyFrom(const CMessageStartKeepsakeExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeRequest::Swap(CMessageStartKeepsakeExchangeRequest* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartKeepsakeExchangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartKeepsakeExchangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartKeepsakeExchangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStartKeepsakeExchangeResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageStartKeepsakeExchangeResponse::CMessageStartKeepsakeExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStartKeepsakeExchangeResponse::InitAsDefaultInstance() {}

CMessageStartKeepsakeExchangeResponse::CMessageStartKeepsakeExchangeResponse(const CMessageStartKeepsakeExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStartKeepsakeExchangeResponse::~CMessageStartKeepsakeExchangeResponse() {
  SharedDtor();
}

void CMessageStartKeepsakeExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartKeepsakeExchangeResponse_descriptor_;
}

const CMessageStartKeepsakeExchangeResponse& CMessageStartKeepsakeExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStartKeepsakeExchangeResponse* CMessageStartKeepsakeExchangeResponse::default_instance_ = NULL;

CMessageStartKeepsakeExchangeResponse* CMessageStartKeepsakeExchangeResponse::New() const {
  return new CMessageStartKeepsakeExchangeResponse;
}

void CMessageStartKeepsakeExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStartKeepsakeExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStartKeepsakeExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStartKeepsakeExchangeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStartKeepsakeExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStartKeepsakeExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStartKeepsakeExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStartKeepsakeExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStartKeepsakeExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStartKeepsakeExchangeResponse::MergeFrom(const CMessageStartKeepsakeExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStartKeepsakeExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeResponse::CopyFrom(const CMessageStartKeepsakeExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStartKeepsakeExchangeResponse::Swap(CMessageStartKeepsakeExchangeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStartKeepsakeExchangeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStartKeepsakeExchangeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStartKeepsakeExchangeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStartKeepsakeExchangeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageStopKeepsakeExchangeRequest::CMessageStopKeepsakeExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStopKeepsakeExchangeRequest::InitAsDefaultInstance() {}

CMessageStopKeepsakeExchangeRequest::CMessageStopKeepsakeExchangeRequest(const CMessageStopKeepsakeExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStopKeepsakeExchangeRequest::~CMessageStopKeepsakeExchangeRequest() {
  SharedDtor();
}

void CMessageStopKeepsakeExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeRequest_descriptor_;
}

const CMessageStopKeepsakeExchangeRequest& CMessageStopKeepsakeExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStopKeepsakeExchangeRequest* CMessageStopKeepsakeExchangeRequest::default_instance_ = NULL;

CMessageStopKeepsakeExchangeRequest* CMessageStopKeepsakeExchangeRequest::New() const {
  return new CMessageStopKeepsakeExchangeRequest;
}

void CMessageStopKeepsakeExchangeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStopKeepsakeExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageStopKeepsakeExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStopKeepsakeExchangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStopKeepsakeExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStopKeepsakeExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStopKeepsakeExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStopKeepsakeExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStopKeepsakeExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStopKeepsakeExchangeRequest::MergeFrom(const CMessageStopKeepsakeExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStopKeepsakeExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeRequest::CopyFrom(const CMessageStopKeepsakeExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeRequest::Swap(CMessageStopKeepsakeExchangeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStopKeepsakeExchangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStopKeepsakeExchangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageStopKeepsakeExchangeResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageStopKeepsakeExchangeResponse::CMessageStopKeepsakeExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStopKeepsakeExchangeResponse::InitAsDefaultInstance() {}

CMessageStopKeepsakeExchangeResponse::CMessageStopKeepsakeExchangeResponse(const CMessageStopKeepsakeExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStopKeepsakeExchangeResponse::~CMessageStopKeepsakeExchangeResponse() {
  SharedDtor();
}

void CMessageStopKeepsakeExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeResponse_descriptor_;
}

const CMessageStopKeepsakeExchangeResponse& CMessageStopKeepsakeExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStopKeepsakeExchangeResponse* CMessageStopKeepsakeExchangeResponse::default_instance_ = NULL;

CMessageStopKeepsakeExchangeResponse* CMessageStopKeepsakeExchangeResponse::New() const {
  return new CMessageStopKeepsakeExchangeResponse;
}

void CMessageStopKeepsakeExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStopKeepsakeExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageStopKeepsakeExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStopKeepsakeExchangeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStopKeepsakeExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStopKeepsakeExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStopKeepsakeExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStopKeepsakeExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStopKeepsakeExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStopKeepsakeExchangeResponse::MergeFrom(const CMessageStopKeepsakeExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStopKeepsakeExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeResponse::CopyFrom(const CMessageStopKeepsakeExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeResponse::Swap(CMessageStopKeepsakeExchangeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStopKeepsakeExchangeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStopKeepsakeExchangeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageStopKeepsakeExchangeNotify::CMessageStopKeepsakeExchangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageStopKeepsakeExchangeNotify::InitAsDefaultInstance() {}

CMessageStopKeepsakeExchangeNotify::CMessageStopKeepsakeExchangeNotify(const CMessageStopKeepsakeExchangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageStopKeepsakeExchangeNotify::~CMessageStopKeepsakeExchangeNotify() {
  SharedDtor();
}

void CMessageStopKeepsakeExchangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeNotify_descriptor_;
}

const CMessageStopKeepsakeExchangeNotify& CMessageStopKeepsakeExchangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageStopKeepsakeExchangeNotify* CMessageStopKeepsakeExchangeNotify::default_instance_ = NULL;

CMessageStopKeepsakeExchangeNotify* CMessageStopKeepsakeExchangeNotify::New() const {
  return new CMessageStopKeepsakeExchangeNotify;
}

void CMessageStopKeepsakeExchangeNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageStopKeepsakeExchangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageStopKeepsakeExchangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageStopKeepsakeExchangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageStopKeepsakeExchangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageStopKeepsakeExchangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageStopKeepsakeExchangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageStopKeepsakeExchangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageStopKeepsakeExchangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageStopKeepsakeExchangeNotify::MergeFrom(const CMessageStopKeepsakeExchangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageStopKeepsakeExchangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeNotify::CopyFrom(const CMessageStopKeepsakeExchangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageStopKeepsakeExchangeNotify::Swap(CMessageStopKeepsakeExchangeNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageStopKeepsakeExchangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageStopKeepsakeExchangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageStopKeepsakeExchangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageStopKeepsakeExchangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInvitationExchangeRequest::kItemIndexFieldNumber;
const int CMessageInvitationExchangeRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageInvitationExchangeRequest::CMessageInvitationExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInvitationExchangeRequest::InitAsDefaultInstance() {}

CMessageInvitationExchangeRequest::CMessageInvitationExchangeRequest(const CMessageInvitationExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInvitationExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInvitationExchangeRequest::~CMessageInvitationExchangeRequest() {
  SharedDtor();
}

void CMessageInvitationExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInvitationExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvitationExchangeRequest_descriptor_;
}

const CMessageInvitationExchangeRequest& CMessageInvitationExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInvitationExchangeRequest* CMessageInvitationExchangeRequest::default_instance_ = NULL;

CMessageInvitationExchangeRequest* CMessageInvitationExchangeRequest::New() const {
  return new CMessageInvitationExchangeRequest;
}

void CMessageInvitationExchangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInvitationExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInvitationExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInvitationExchangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInvitationExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional uint32 EntityID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInvitationExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 EntityID = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInvitationExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInvitationExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInvitationExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInvitationExchangeRequest::MergeFrom(const CMessageInvitationExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInvitationExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvitationExchangeRequest::CopyFrom(const CMessageInvitationExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvitationExchangeRequest::Swap(CMessageInvitationExchangeRequest* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInvitationExchangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInvitationExchangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInvitationExchangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvitationExchangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInvitationExchangeResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageInvitationExchangeResponse::CMessageInvitationExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInvitationExchangeResponse::InitAsDefaultInstance() {}

CMessageInvitationExchangeResponse::CMessageInvitationExchangeResponse(const CMessageInvitationExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInvitationExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInvitationExchangeResponse::~CMessageInvitationExchangeResponse() {
  SharedDtor();
}

void CMessageInvitationExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInvitationExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvitationExchangeResponse_descriptor_;
}

const CMessageInvitationExchangeResponse& CMessageInvitationExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInvitationExchangeResponse* CMessageInvitationExchangeResponse::default_instance_ = NULL;

CMessageInvitationExchangeResponse* CMessageInvitationExchangeResponse::New() const {
  return new CMessageInvitationExchangeResponse;
}

void CMessageInvitationExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInvitationExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInvitationExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInvitationExchangeResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInvitationExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInvitationExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInvitationExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInvitationExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInvitationExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInvitationExchangeResponse::MergeFrom(const CMessageInvitationExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInvitationExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvitationExchangeResponse::CopyFrom(const CMessageInvitationExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInvitationExchangeResponse::Swap(CMessageInvitationExchangeResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInvitationExchangeResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInvitationExchangeResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInvitationExchangeResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInvitationExchangeResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageExchangeResultNotify::_default_bridename_;
const ::std::string CMessageExchangeResultNotify::_default_groomname_;
#ifndef _MSC_VER
const int CMessageExchangeResultNotify::kGroomRoleIDFieldNumber;
const int CMessageExchangeResultNotify::kBrideRoleIDFieldNumber;
const int CMessageExchangeResultNotify::kGroomItemIDFieldNumber;
const int CMessageExchangeResultNotify::kBrideItemIDFieldNumber;
const int CMessageExchangeResultNotify::kBrideNameFieldNumber;
const int CMessageExchangeResultNotify::kGroomNameFieldNumber;
#endif  // !_MSC_VER

CMessageExchangeResultNotify::CMessageExchangeResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExchangeResultNotify::InitAsDefaultInstance() {}

CMessageExchangeResultNotify::CMessageExchangeResultNotify(const CMessageExchangeResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExchangeResultNotify::SharedCtor() {
  _cached_size_ = 0;
  groomroleid_ = 0u;
  brideroleid_ = 0u;
  groomitemid_ = 0u;
  brideitemid_ = 0u;
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExchangeResultNotify::~CMessageExchangeResultNotify() {
  SharedDtor();
}

void CMessageExchangeResultNotify::SharedDtor() {
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExchangeResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeResultNotify_descriptor_;
}

const CMessageExchangeResultNotify& CMessageExchangeResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageExchangeResultNotify* CMessageExchangeResultNotify::default_instance_ = NULL;

CMessageExchangeResultNotify* CMessageExchangeResultNotify::New() const {
  return new CMessageExchangeResultNotify;
}

void CMessageExchangeResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groomroleid_ = 0u;
    brideroleid_ = 0u;
    groomitemid_ = 0u;
    brideitemid_ = 0u;
    if (_has_bit(4)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    if (_has_bit(5)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExchangeResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GroomRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomroleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BrideRoleID;
        break;
      }
      
      // optional uint32 BrideRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideroleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GroomItemID;
        break;
      }
      
      // optional uint32 GroomItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomitemid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BrideItemID;
        break;
      }
      
      // optional uint32 BrideItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideItemID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideitemid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(50)) goto parse_GroomName;
        break;
      }
      
      // optional string GroomName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExchangeResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExchangeResultNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GroomRoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->groomroleid(), output);
  }
  
  // optional uint32 BrideRoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->brideroleid(), output);
  }
  
  // optional uint32 GroomItemID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->groomitemid(), output);
  }
  
  // optional uint32 BrideItemID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->brideitemid(), output);
  }
  
  // optional string BrideName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->bridename(), output);
  }
  
  // optional string GroomName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->groomname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExchangeResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GroomRoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->groomroleid(), target);
  }
  
  // optional uint32 BrideRoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->brideroleid(), target);
  }
  
  // optional uint32 GroomItemID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->groomitemid(), target);
  }
  
  // optional uint32 BrideItemID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->brideitemid(), target);
  }
  
  // optional string BrideName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->bridename(), target);
  }
  
  // optional string GroomName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->groomname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExchangeResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroomRoleID = 1;
    if (has_groomroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomroleid());
    }
    
    // optional uint32 BrideRoleID = 2;
    if (has_brideroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideroleid());
    }
    
    // optional uint32 GroomItemID = 3;
    if (has_groomitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomitemid());
    }
    
    // optional uint32 BrideItemID = 4;
    if (has_brideitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideitemid());
    }
    
    // optional string BrideName = 5;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional string GroomName = 6;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExchangeResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExchangeResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExchangeResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExchangeResultNotify::MergeFrom(const CMessageExchangeResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groomroleid(from.groomroleid());
    }
    if (from._has_bit(1)) {
      set_brideroleid(from.brideroleid());
    }
    if (from._has_bit(2)) {
      set_groomitemid(from.groomitemid());
    }
    if (from._has_bit(3)) {
      set_brideitemid(from.brideitemid());
    }
    if (from._has_bit(4)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(5)) {
      set_groomname(from.groomname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExchangeResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeResultNotify::CopyFrom(const CMessageExchangeResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExchangeResultNotify::Swap(CMessageExchangeResultNotify* other) {
  if (other != this) {
    std::swap(groomroleid_, other->groomroleid_);
    std::swap(brideroleid_, other->brideroleid_);
    std::swap(groomitemid_, other->groomitemid_);
    std::swap(brideitemid_, other->brideitemid_);
    std::swap(bridename_, other->bridename_);
    std::swap(groomname_, other->groomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExchangeResultNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExchangeResultNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExchangeResultNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExchangeResultNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageTeleToWeddingNpcRequest::CMessageTeleToWeddingNpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeleToWeddingNpcRequest::InitAsDefaultInstance() {}

CMessageTeleToWeddingNpcRequest::CMessageTeleToWeddingNpcRequest(const CMessageTeleToWeddingNpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeleToWeddingNpcRequest::~CMessageTeleToWeddingNpcRequest() {
  SharedDtor();
}

void CMessageTeleToWeddingNpcRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeleToWeddingNpcRequest_descriptor_;
}

const CMessageTeleToWeddingNpcRequest& CMessageTeleToWeddingNpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeleToWeddingNpcRequest* CMessageTeleToWeddingNpcRequest::default_instance_ = NULL;

CMessageTeleToWeddingNpcRequest* CMessageTeleToWeddingNpcRequest::New() const {
  return new CMessageTeleToWeddingNpcRequest;
}

void CMessageTeleToWeddingNpcRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeleToWeddingNpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageTeleToWeddingNpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeleToWeddingNpcRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeleToWeddingNpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeleToWeddingNpcRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeleToWeddingNpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeleToWeddingNpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeleToWeddingNpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeleToWeddingNpcRequest::MergeFrom(const CMessageTeleToWeddingNpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeleToWeddingNpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcRequest::CopyFrom(const CMessageTeleToWeddingNpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcRequest::Swap(CMessageTeleToWeddingNpcRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeleToWeddingNpcRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeleToWeddingNpcRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeleToWeddingNpcRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageTeleToWeddingNpcResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageTeleToWeddingNpcResponse::CMessageTeleToWeddingNpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageTeleToWeddingNpcResponse::InitAsDefaultInstance() {}

CMessageTeleToWeddingNpcResponse::CMessageTeleToWeddingNpcResponse(const CMessageTeleToWeddingNpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageTeleToWeddingNpcResponse::~CMessageTeleToWeddingNpcResponse() {
  SharedDtor();
}

void CMessageTeleToWeddingNpcResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeleToWeddingNpcResponse_descriptor_;
}

const CMessageTeleToWeddingNpcResponse& CMessageTeleToWeddingNpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageTeleToWeddingNpcResponse* CMessageTeleToWeddingNpcResponse::default_instance_ = NULL;

CMessageTeleToWeddingNpcResponse* CMessageTeleToWeddingNpcResponse::New() const {
  return new CMessageTeleToWeddingNpcResponse;
}

void CMessageTeleToWeddingNpcResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageTeleToWeddingNpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageTeleToWeddingNpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageTeleToWeddingNpcResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageTeleToWeddingNpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageTeleToWeddingNpcResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageTeleToWeddingNpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageTeleToWeddingNpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageTeleToWeddingNpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageTeleToWeddingNpcResponse::MergeFrom(const CMessageTeleToWeddingNpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageTeleToWeddingNpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcResponse::CopyFrom(const CMessageTeleToWeddingNpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageTeleToWeddingNpcResponse::Swap(CMessageTeleToWeddingNpcResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageTeleToWeddingNpcResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageTeleToWeddingNpcResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageTeleToWeddingNpcResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageTeleToWeddingNpcResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReviewWeddingRequest::kTimeIDFieldNumber;
const int CMessageReviewWeddingRequest::kWeddingModuleFieldNumber;
const int CMessageReviewWeddingRequest::kDayIDFieldNumber;
const int CMessageReviewWeddingRequest::kEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageReviewWeddingRequest::CMessageReviewWeddingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReviewWeddingRequest::InitAsDefaultInstance() {}

CMessageReviewWeddingRequest::CMessageReviewWeddingRequest(const CMessageReviewWeddingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReviewWeddingRequest::SharedCtor() {
  _cached_size_ = 0;
  timeid_ = 0u;
  weddingmodule_ = 0u;
  dayid_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReviewWeddingRequest::~CMessageReviewWeddingRequest() {
  SharedDtor();
}

void CMessageReviewWeddingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingRequest_descriptor_;
}

const CMessageReviewWeddingRequest& CMessageReviewWeddingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReviewWeddingRequest* CMessageReviewWeddingRequest::default_instance_ = NULL;

CMessageReviewWeddingRequest* CMessageReviewWeddingRequest::New() const {
  return new CMessageReviewWeddingRequest;
}

void CMessageReviewWeddingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeid_ = 0u;
    weddingmodule_ = 0u;
    dayid_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReviewWeddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TimeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DayID;
        break;
      }
      
      // optional uint32 DayID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DayID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dayid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReviewWeddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReviewWeddingRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TimeID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->timeid(), output);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weddingmodule(), output);
  }
  
  // optional uint32 DayID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->dayid(), output);
  }
  
  // optional uint32 EntityID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReviewWeddingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TimeID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->timeid(), target);
  }
  
  // optional uint32 WeddingModule = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weddingmodule(), target);
  }
  
  // optional uint32 DayID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->dayid(), target);
  }
  
  // optional uint32 EntityID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReviewWeddingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TimeID = 1;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeid());
    }
    
    // optional uint32 WeddingModule = 2;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 DayID = 3;
    if (has_dayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dayid());
    }
    
    // optional uint32 EntityID = 4;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReviewWeddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReviewWeddingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReviewWeddingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReviewWeddingRequest::MergeFrom(const CMessageReviewWeddingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeid(from.timeid());
    }
    if (from._has_bit(1)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(2)) {
      set_dayid(from.dayid());
    }
    if (from._has_bit(3)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReviewWeddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingRequest::CopyFrom(const CMessageReviewWeddingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingRequest::Swap(CMessageReviewWeddingRequest* other) {
  if (other != this) {
    std::swap(timeid_, other->timeid_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(dayid_, other->dayid_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReviewWeddingRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReviewWeddingRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReviewWeddingResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageReviewWeddingResponse::CMessageReviewWeddingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReviewWeddingResponse::InitAsDefaultInstance() {}

CMessageReviewWeddingResponse::CMessageReviewWeddingResponse(const CMessageReviewWeddingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReviewWeddingResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReviewWeddingResponse::~CMessageReviewWeddingResponse() {
  SharedDtor();
}

void CMessageReviewWeddingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingResponse_descriptor_;
}

const CMessageReviewWeddingResponse& CMessageReviewWeddingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReviewWeddingResponse* CMessageReviewWeddingResponse::default_instance_ = NULL;

CMessageReviewWeddingResponse* CMessageReviewWeddingResponse::New() const {
  return new CMessageReviewWeddingResponse;
}

void CMessageReviewWeddingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReviewWeddingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReviewWeddingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReviewWeddingResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 6;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReviewWeddingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 6;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReviewWeddingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 6;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReviewWeddingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReviewWeddingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReviewWeddingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReviewWeddingResponse::MergeFrom(const CMessageReviewWeddingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReviewWeddingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingResponse::CopyFrom(const CMessageReviewWeddingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingResponse::Swap(CMessageReviewWeddingResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReviewWeddingResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReviewWeddingResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageReviewWeddingNotify::_default_bridename_;
const ::std::string CMessageReviewWeddingNotify::_default_groomname_;
#ifndef _MSC_VER
const int CMessageReviewWeddingNotify::kBrideNameFieldNumber;
const int CMessageReviewWeddingNotify::kGroomNameFieldNumber;
const int CMessageReviewWeddingNotify::kWeddingTimeFieldNumber;
const int CMessageReviewWeddingNotify::kWeddingTimeLengthFieldNumber;
const int CMessageReviewWeddingNotify::kWeddingModuleFieldNumber;
const int CMessageReviewWeddingNotify::kCampIDFieldNumber;
const int CMessageReviewWeddingNotify::kBrideIDFieldNumber;
const int CMessageReviewWeddingNotify::kGroomIDFieldNumber;
#endif  // !_MSC_VER

CMessageReviewWeddingNotify::CMessageReviewWeddingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReviewWeddingNotify::InitAsDefaultInstance() {}

CMessageReviewWeddingNotify::CMessageReviewWeddingNotify(const CMessageReviewWeddingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReviewWeddingNotify::SharedCtor() {
  _cached_size_ = 0;
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  weddingtime_ = 0u;
  weddingtimelength_ = 0u;
  weddingmodule_ = 0u;
  campid_ = 0u;
  brideid_ = 0u;
  groomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReviewWeddingNotify::~CMessageReviewWeddingNotify() {
  SharedDtor();
}

void CMessageReviewWeddingNotify::SharedDtor() {
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingNotify_descriptor_;
}

const CMessageReviewWeddingNotify& CMessageReviewWeddingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marriagemessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReviewWeddingNotify* CMessageReviewWeddingNotify::default_instance_ = NULL;

CMessageReviewWeddingNotify* CMessageReviewWeddingNotify::New() const {
  return new CMessageReviewWeddingNotify;
}

void CMessageReviewWeddingNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    if (_has_bit(1)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    weddingtime_ = 0u;
    weddingtimelength_ = 0u;
    weddingmodule_ = 0u;
    campid_ = 0u;
    brideid_ = 0u;
    groomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReviewWeddingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string BrideName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(18)) goto parse_GroomName;
        break;
      }
      
      // optional string GroomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(24)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeddingTimeLength;
        break;
      }
      
      // optional uint32 WeddingTimeLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtimelength_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WeddingModule;
        break;
      }
      
      // optional uint32 WeddingModule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingModule:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingmodule_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_BrideID;
        break;
      }
      
      // optional uint32 BrideID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BrideID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &brideid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_GroomID;
        break;
      }
      
      // optional uint32 GroomID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroomID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groomid_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReviewWeddingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReviewWeddingNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string BrideName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->bridename(), output);
  }
  
  // optional string GroomName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->groomname(), output);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->weddingtime(), output);
  }
  
  // optional uint32 WeddingTimeLength = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weddingtimelength(), output);
  }
  
  // optional uint32 WeddingModule = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weddingmodule(), output);
  }
  
  // optional uint32 CampID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->campid(), output);
  }
  
  // optional uint32 BrideID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->brideid(), output);
  }
  
  // optional uint32 GroomID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->groomid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReviewWeddingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string BrideName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->bridename(), target);
  }
  
  // optional string GroomName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->groomname(), target);
  }
  
  // optional uint32 WeddingTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->weddingtime(), target);
  }
  
  // optional uint32 WeddingTimeLength = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weddingtimelength(), target);
  }
  
  // optional uint32 WeddingModule = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weddingmodule(), target);
  }
  
  // optional uint32 CampID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->campid(), target);
  }
  
  // optional uint32 BrideID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->brideid(), target);
  }
  
  // optional uint32 GroomID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->groomid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReviewWeddingNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BrideName = 1;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional string GroomName = 2;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional uint32 WeddingTime = 3;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 WeddingTimeLength = 4;
    if (has_weddingtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtimelength());
    }
    
    // optional uint32 WeddingModule = 5;
    if (has_weddingmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingmodule());
    }
    
    // optional uint32 CampID = 6;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 BrideID = 7;
    if (has_brideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->brideid());
    }
    
    // optional uint32 GroomID = 8;
    if (has_groomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groomid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReviewWeddingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReviewWeddingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReviewWeddingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReviewWeddingNotify::MergeFrom(const CMessageReviewWeddingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(1)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(2)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(3)) {
      set_weddingtimelength(from.weddingtimelength());
    }
    if (from._has_bit(4)) {
      set_weddingmodule(from.weddingmodule());
    }
    if (from._has_bit(5)) {
      set_campid(from.campid());
    }
    if (from._has_bit(6)) {
      set_brideid(from.brideid());
    }
    if (from._has_bit(7)) {
      set_groomid(from.groomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReviewWeddingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingNotify::CopyFrom(const CMessageReviewWeddingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReviewWeddingNotify::Swap(CMessageReviewWeddingNotify* other) {
  if (other != this) {
    std::swap(bridename_, other->bridename_);
    std::swap(groomname_, other->groomname_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(weddingtimelength_, other->weddingtimelength_);
    std::swap(weddingmodule_, other->weddingmodule_);
    std::swap(campid_, other->campid_);
    std::swap(brideid_, other->brideid_);
    std::swap(groomid_, other->groomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReviewWeddingNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReviewWeddingNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReviewWeddingNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReviewWeddingNotify_reflection_;
}
