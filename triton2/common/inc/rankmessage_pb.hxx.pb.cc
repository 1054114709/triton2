// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "rankmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBSingleRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetPlayerRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetPlayerRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetPlayerRankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetPlayerRankResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RankMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rankmessage_5fpb_2ehxx() {
  protobuf_AddDesc_rankmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rankmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBSingleRankInfo_descriptor_ = file->message_type(0);
  static const int PBSingleRankInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, continuousboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, continuousfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, rankvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, rankchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, rankchangeval_),
  };
  PBSingleRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleRankInfo_descriptor_,
      PBSingleRankInfo::default_instance_,
      PBSingleRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleRankInfo));
  CMessageGetPlayerRankRequest_descriptor_ = file->message_type(1);
  static const int CMessageGetPlayerRankRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, recordnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, beginindex_),
  };
  CMessageGetPlayerRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetPlayerRankRequest_descriptor_,
      CMessageGetPlayerRankRequest::default_instance_,
      CMessageGetPlayerRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetPlayerRankRequest));
  CMessageGetPlayerRankResponse_descriptor_ = file->message_type(2);
  static const int CMessageGetPlayerRankResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, myrankchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, myrankvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, myrankchangeval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, myrankindex_),
  };
  CMessageGetPlayerRankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetPlayerRankResponse_descriptor_,
      CMessageGetPlayerRankResponse::default_instance_,
      CMessageGetPlayerRankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetPlayerRankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetPlayerRankResponse));
  RankMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rankmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleRankInfo_descriptor_, &PBSingleRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetPlayerRankRequest_descriptor_, &CMessageGetPlayerRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetPlayerRankResponse_descriptor_, &CMessageGetPlayerRankResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rankmessage_5fpb_2ehxx() {
  delete PBSingleRankInfo::default_instance_;
  delete PBSingleRankInfo_reflection_;
  delete CMessageGetPlayerRankRequest::default_instance_;
  delete CMessageGetPlayerRankRequest_reflection_;
  delete CMessageGetPlayerRankResponse::default_instance_;
  delete CMessageGetPlayerRankResponse_reflection_;
}

void protobuf_AddDesc_rankmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rankmessage_pb.hxx\"\342\001\n\020PBSingleRankInf"
    "o\022\020\n\010CharName\030\001 \001(\t\022\014\n\004Rank\030\002 \001(\r\022\027\n\017Con"
    "tinuousBoard\030\003 \001(\r\022\016\n\006Metier\030\004 \001(\r\022\017\n\007Co"
    "untry\030\005 \001(\r\022\027\n\017ContinuousFirst\030\006 \001(\r\022\r\n\005"
    "Title\030\007 \001(\r\022\016\n\006CharID\030\010 \001(\r\022\021\n\tRankValue"
    "\030\t \001(\r\022\022\n\nRankChange\030\n \001(\005\022\025\n\rRankChange"
    "Val\030\013 \001(\005\"g\n\034CMessageGetPlayerRankReques"
    "t\022\020\n\010RankType\030\001 \001(\r\022\021\n\tRecordNum\030\002 \001(\r\022\016"
    "\n\006CharID\030\003 \001(\r\022\022\n\nBeginIndex\030\004 \001(\r\"\277\001\n\035C"
    "MessageGetPlayerRankResponse\022\024\n\014MyRankCh"
    "ange\030\001 \001(\r\022\020\n\010RankType\030\002 \001(\r\022\023\n\013MyRankVa"
    "lue\030\003 \001(\r\022#\n\010RankInfo\030\004 \003(\0132\021.PBSingleRa"
    "nkInfo\022\016\n\006CharID\030\005 \001(\r\022\027\n\017MyRankChangeVa"
    "l\030\006 \001(\005\022\023\n\013MyRankIndex\030\007 \001(\r*P\n\rRankMess"
    "ageID\022\036\n\031ID_C2S_REQUEST_PLAYERRANK\020\201x\022\037\n"
    "\032ID_S2C_RESPONSE_PLAYERRANK\020\202xB\002H\001", 634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rankmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBSingleRankInfo::default_instance_ = new PBSingleRankInfo();
  CMessageGetPlayerRankRequest::default_instance_ = new CMessageGetPlayerRankRequest();
  CMessageGetPlayerRankResponse::default_instance_ = new CMessageGetPlayerRankResponse();
  PBSingleRankInfo::default_instance_->InitAsDefaultInstance();
  CMessageGetPlayerRankRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetPlayerRankResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rankmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rankmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_rankmessage_5fpb_2ehxx() {
    protobuf_AddDesc_rankmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_rankmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* RankMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankMessageID_descriptor_;
}
bool RankMessageID_IsValid(int value) {
  switch(value) {
    case 15361:
    case 15362:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string PBSingleRankInfo::_default_charname_;
#ifndef _MSC_VER
const int PBSingleRankInfo::kCharNameFieldNumber;
const int PBSingleRankInfo::kRankFieldNumber;
const int PBSingleRankInfo::kContinuousBoardFieldNumber;
const int PBSingleRankInfo::kMetierFieldNumber;
const int PBSingleRankInfo::kCountryFieldNumber;
const int PBSingleRankInfo::kContinuousFirstFieldNumber;
const int PBSingleRankInfo::kTitleFieldNumber;
const int PBSingleRankInfo::kCharIDFieldNumber;
const int PBSingleRankInfo::kRankValueFieldNumber;
const int PBSingleRankInfo::kRankChangeFieldNumber;
const int PBSingleRankInfo::kRankChangeValFieldNumber;
#endif  // !_MSC_VER

PBSingleRankInfo::PBSingleRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleRankInfo::InitAsDefaultInstance() {}

PBSingleRankInfo::PBSingleRankInfo(const PBSingleRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleRankInfo::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  rank_ = 0u;
  continuousboard_ = 0u;
  metier_ = 0u;
  country_ = 0u;
  continuousfirst_ = 0u;
  title_ = 0u;
  charid_ = 0u;
  rankvalue_ = 0u;
  rankchange_ = 0;
  rankchangeval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleRankInfo::~PBSingleRankInfo() {
  SharedDtor();
}

void PBSingleRankInfo::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleRankInfo_descriptor_;
}

const PBSingleRankInfo& PBSingleRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rankmessage_5fpb_2ehxx();  return *default_instance_;
}

PBSingleRankInfo* PBSingleRankInfo::default_instance_ = NULL;

PBSingleRankInfo* PBSingleRankInfo::New() const {
  return new PBSingleRankInfo;
}

void PBSingleRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    rank_ = 0u;
    continuousboard_ = 0u;
    metier_ = 0u;
    country_ = 0u;
    continuousfirst_ = 0u;
    title_ = 0u;
    charid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rankvalue_ = 0u;
    rankchange_ = 0;
    rankchangeval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string CharName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }
      
      // optional uint32 Rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rank_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ContinuousBoard;
        break;
      }
      
      // optional uint32 ContinuousBoard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContinuousBoard:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &continuousboard_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Country;
        break;
      }
      
      // optional uint32 Country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Country:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &country_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ContinuousFirst;
        break;
      }
      
      // optional uint32 ContinuousFirst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContinuousFirst:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &continuousfirst_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Title;
        break;
      }
      
      // optional uint32 Title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Title:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &title_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_RankValue;
        break;
      }
      
      // optional uint32 RankValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rankvalue_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RankChange;
        break;
      }
      
      // optional int32 RankChange = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankChange:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rankchange_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_RankChangeVal;
        break;
      }
      
      // optional int32 RankChangeVal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankChangeVal:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &rankchangeval_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleRankInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string CharName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->charname(), output);
  }
  
  // optional uint32 Rank = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rank(), output);
  }
  
  // optional uint32 ContinuousBoard = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->continuousboard(), output);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metier(), output);
  }
  
  // optional uint32 Country = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->country(), output);
  }
  
  // optional uint32 ContinuousFirst = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->continuousfirst(), output);
  }
  
  // optional uint32 Title = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->title(), output);
  }
  
  // optional uint32 CharID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->charid(), output);
  }
  
  // optional uint32 RankValue = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->rankvalue(), output);
  }
  
  // optional int32 RankChange = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(10, this->rankchange(), output);
  }
  
  // optional int32 RankChangeVal = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->rankchangeval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string CharName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->charname(), target);
  }
  
  // optional uint32 Rank = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rank(), target);
  }
  
  // optional uint32 ContinuousBoard = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->continuousboard(), target);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metier(), target);
  }
  
  // optional uint32 Country = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->country(), target);
  }
  
  // optional uint32 ContinuousFirst = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->continuousfirst(), target);
  }
  
  // optional uint32 Title = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->title(), target);
  }
  
  // optional uint32 CharID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->charid(), target);
  }
  
  // optional uint32 RankValue = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->rankvalue(), target);
  }
  
  // optional int32 RankChange = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(10, this->rankchange(), target);
  }
  
  // optional int32 RankChangeVal = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->rankchangeval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CharName = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rank());
    }
    
    // optional uint32 ContinuousBoard = 3;
    if (has_continuousboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->continuousboard());
    }
    
    // optional uint32 Metier = 4;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->country());
    }
    
    // optional uint32 ContinuousFirst = 6;
    if (has_continuousfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->continuousfirst());
    }
    
    // optional uint32 Title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->title());
    }
    
    // optional uint32 CharID = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 RankValue = 9;
    if (has_rankvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rankvalue());
    }
    
    // optional int32 RankChange = 10;
    if (has_rankchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rankchange());
    }
    
    // optional int32 RankChangeVal = 11;
    if (has_rankchangeval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->rankchangeval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleRankInfo::MergeFrom(const PBSingleRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charname(from.charname());
    }
    if (from._has_bit(1)) {
      set_rank(from.rank());
    }
    if (from._has_bit(2)) {
      set_continuousboard(from.continuousboard());
    }
    if (from._has_bit(3)) {
      set_metier(from.metier());
    }
    if (from._has_bit(4)) {
      set_country(from.country());
    }
    if (from._has_bit(5)) {
      set_continuousfirst(from.continuousfirst());
    }
    if (from._has_bit(6)) {
      set_title(from.title());
    }
    if (from._has_bit(7)) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_rankvalue(from.rankvalue());
    }
    if (from._has_bit(9)) {
      set_rankchange(from.rankchange());
    }
    if (from._has_bit(10)) {
      set_rankchangeval(from.rankchangeval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleRankInfo::CopyFrom(const PBSingleRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleRankInfo::Swap(PBSingleRankInfo* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(rank_, other->rank_);
    std::swap(continuousboard_, other->continuousboard_);
    std::swap(metier_, other->metier_);
    std::swap(country_, other->country_);
    std::swap(continuousfirst_, other->continuousfirst_);
    std::swap(title_, other->title_);
    std::swap(charid_, other->charid_);
    std::swap(rankvalue_, other->rankvalue_);
    std::swap(rankchange_, other->rankchange_);
    std::swap(rankchangeval_, other->rankchangeval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleRankInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleRankInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleRankInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleRankInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetPlayerRankRequest::kRankTypeFieldNumber;
const int CMessageGetPlayerRankRequest::kRecordNumFieldNumber;
const int CMessageGetPlayerRankRequest::kCharIDFieldNumber;
const int CMessageGetPlayerRankRequest::kBeginIndexFieldNumber;
#endif  // !_MSC_VER

CMessageGetPlayerRankRequest::CMessageGetPlayerRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetPlayerRankRequest::InitAsDefaultInstance() {}

CMessageGetPlayerRankRequest::CMessageGetPlayerRankRequest(const CMessageGetPlayerRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetPlayerRankRequest::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  recordnum_ = 0u;
  charid_ = 0u;
  beginindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetPlayerRankRequest::~CMessageGetPlayerRankRequest() {
  SharedDtor();
}

void CMessageGetPlayerRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetPlayerRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerRankRequest_descriptor_;
}

const CMessageGetPlayerRankRequest& CMessageGetPlayerRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rankmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetPlayerRankRequest* CMessageGetPlayerRankRequest::default_instance_ = NULL;

CMessageGetPlayerRankRequest* CMessageGetPlayerRankRequest::New() const {
  return new CMessageGetPlayerRankRequest;
}

void CMessageGetPlayerRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    recordnum_ = 0u;
    charid_ = 0u;
    beginindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetPlayerRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ranktype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RecordNum;
        break;
      }
      
      // optional uint32 RecordNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RecordNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recordnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BeginIndex;
        break;
      }
      
      // optional uint32 BeginIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beginindex_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetPlayerRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetPlayerRankRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RankType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->ranktype(), output);
  }
  
  // optional uint32 RecordNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->recordnum(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 BeginIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->beginindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetPlayerRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RankType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->ranktype(), target);
  }
  
  // optional uint32 RecordNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->recordnum(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 BeginIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->beginindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetPlayerRankRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ranktype());
    }
    
    // optional uint32 RecordNum = 2;
    if (has_recordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recordnum());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BeginIndex = 4;
    if (has_beginindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beginindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetPlayerRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetPlayerRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetPlayerRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetPlayerRankRequest::MergeFrom(const CMessageGetPlayerRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ranktype(from.ranktype());
    }
    if (from._has_bit(1)) {
      set_recordnum(from.recordnum());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_beginindex(from.beginindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetPlayerRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerRankRequest::CopyFrom(const CMessageGetPlayerRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerRankRequest::Swap(CMessageGetPlayerRankRequest* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(recordnum_, other->recordnum_);
    std::swap(charid_, other->charid_);
    std::swap(beginindex_, other->beginindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetPlayerRankRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetPlayerRankRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetPlayerRankRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerRankRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetPlayerRankResponse::kMyRankChangeFieldNumber;
const int CMessageGetPlayerRankResponse::kRankTypeFieldNumber;
const int CMessageGetPlayerRankResponse::kMyRankValueFieldNumber;
const int CMessageGetPlayerRankResponse::kRankInfoFieldNumber;
const int CMessageGetPlayerRankResponse::kCharIDFieldNumber;
const int CMessageGetPlayerRankResponse::kMyRankChangeValFieldNumber;
const int CMessageGetPlayerRankResponse::kMyRankIndexFieldNumber;
#endif  // !_MSC_VER

CMessageGetPlayerRankResponse::CMessageGetPlayerRankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetPlayerRankResponse::InitAsDefaultInstance() {}

CMessageGetPlayerRankResponse::CMessageGetPlayerRankResponse(const CMessageGetPlayerRankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetPlayerRankResponse::SharedCtor() {
  _cached_size_ = 0;
  myrankchange_ = 0u;
  ranktype_ = 0u;
  myrankvalue_ = 0u;
  charid_ = 0u;
  myrankchangeval_ = 0;
  myrankindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetPlayerRankResponse::~CMessageGetPlayerRankResponse() {
  SharedDtor();
}

void CMessageGetPlayerRankResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetPlayerRankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerRankResponse_descriptor_;
}

const CMessageGetPlayerRankResponse& CMessageGetPlayerRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rankmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetPlayerRankResponse* CMessageGetPlayerRankResponse::default_instance_ = NULL;

CMessageGetPlayerRankResponse* CMessageGetPlayerRankResponse::New() const {
  return new CMessageGetPlayerRankResponse;
}

void CMessageGetPlayerRankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myrankchange_ = 0u;
    ranktype_ = 0u;
    myrankvalue_ = 0u;
    charid_ = 0u;
    myrankchangeval_ = 0;
    myrankindex_ = 0u;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetPlayerRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MyRankChange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &myrankchange_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RankType;
        break;
      }
      
      // optional uint32 RankType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RankType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ranktype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MyRankValue;
        break;
      }
      
      // optional uint32 MyRankValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MyRankValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &myrankvalue_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_RankInfo;
        break;
      }
      
      // repeated .PBSingleRankInfo RankInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RankInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_rankinfo()));
        if (input->ExpectTag(34)) goto parse_RankInfo;
        if (input->ExpectTag(40)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MyRankChangeVal;
        break;
      }
      
      // optional int32 MyRankChangeVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MyRankChangeVal:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &myrankchangeval_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MyRankIndex;
        break;
      }
      
      // optional uint32 MyRankIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MyRankIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &myrankindex_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetPlayerRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetPlayerRankResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MyRankChange = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->myrankchange(), output);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ranktype(), output);
  }
  
  // optional uint32 MyRankValue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->myrankvalue(), output);
  }
  
  // repeated .PBSingleRankInfo RankInfo = 4;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->rankinfo(i), output);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charid(), output);
  }
  
  // optional int32 MyRankChangeVal = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->myrankchangeval(), output);
  }
  
  // optional uint32 MyRankIndex = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->myrankindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetPlayerRankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MyRankChange = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->myrankchange(), target);
  }
  
  // optional uint32 RankType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ranktype(), target);
  }
  
  // optional uint32 MyRankValue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->myrankvalue(), target);
  }
  
  // repeated .PBSingleRankInfo RankInfo = 4;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->rankinfo(i), target);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charid(), target);
  }
  
  // optional int32 MyRankChangeVal = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->myrankchangeval(), target);
  }
  
  // optional uint32 MyRankIndex = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->myrankindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetPlayerRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MyRankChange = 1;
    if (has_myrankchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->myrankchange());
    }
    
    // optional uint32 RankType = 2;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ranktype());
    }
    
    // optional uint32 MyRankValue = 3;
    if (has_myrankvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->myrankvalue());
    }
    
    // optional uint32 CharID = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional int32 MyRankChangeVal = 6;
    if (has_myrankchangeval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->myrankchangeval());
    }
    
    // optional uint32 MyRankIndex = 7;
    if (has_myrankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->myrankindex());
    }
    
  }
  // repeated .PBSingleRankInfo RankInfo = 4;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->rankinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetPlayerRankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetPlayerRankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetPlayerRankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetPlayerRankResponse::MergeFrom(const CMessageGetPlayerRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_myrankchange(from.myrankchange());
    }
    if (from._has_bit(1)) {
      set_ranktype(from.ranktype());
    }
    if (from._has_bit(2)) {
      set_myrankvalue(from.myrankvalue());
    }
    if (from._has_bit(4)) {
      set_charid(from.charid());
    }
    if (from._has_bit(5)) {
      set_myrankchangeval(from.myrankchangeval());
    }
    if (from._has_bit(6)) {
      set_myrankindex(from.myrankindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetPlayerRankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerRankResponse::CopyFrom(const CMessageGetPlayerRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetPlayerRankResponse::Swap(CMessageGetPlayerRankResponse* other) {
  if (other != this) {
    std::swap(myrankchange_, other->myrankchange_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(myrankvalue_, other->myrankvalue_);
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(charid_, other->charid_);
    std::swap(myrankchangeval_, other->myrankchangeval_);
    std::swap(myrankindex_, other->myrankindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetPlayerRankResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetPlayerRankResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetPlayerRankResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetPlayerRankResponse_reflection_;
}
