// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "corpsinfo_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CorpsProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorpsProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsBattleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsBattleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorpsInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorpsInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsFamilyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsFamilyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsFamilyInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsFamilyInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUnionBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUnionBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsPublishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsPublishInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_corpsinfo_5fpb_2ehxx() {
  protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "corpsinfo_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CorpsProperty_descriptor_ = file->message_type(0);
  static const int CorpsProperty_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsrootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsfamilynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsbuttullin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsrooterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsdevelop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, warrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, warwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, warlostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, familystarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, warexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, warmaxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, maxfamilynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, canlevelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, challengestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, challengemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, maxgeneralnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, maxcounsellornum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, maincitymap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, levelglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, levlemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, bossrefinevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, refinevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, bosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, bosscdlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, bosscdcool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, bossrepetionopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpscurbossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsbossscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpscollectactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, corpsreptionopentime_),
  };
  CorpsProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorpsProperty_descriptor_,
      CorpsProperty::default_instance_,
      CorpsProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorpsProperty));
  PBCorpsBattle_descriptor_ = file->message_type(1);
  static const int PBCorpsBattle_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, npcstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, warstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, descorpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, bidmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, descorpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, rootername_),
  };
  PBCorpsBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsBattle_descriptor_,
      PBCorpsBattle::default_instance_,
      PBCorpsBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsBattle));
  PBCorpsBoss_descriptor_ = file->message_type(2);
  static const int PBCorpsBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBoss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBoss, canintotimes_),
  };
  PBCorpsBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsBoss_descriptor_,
      PBCorpsBoss::default_instance_,
      PBCorpsBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsBoss));
  PBCorpsBattleList_descriptor_ = file->message_type(3);
  static const int PBCorpsBattleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattleList, battlelist_),
  };
  PBCorpsBattleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsBattleList_descriptor_,
      PBCorpsBattleList::default_instance_,
      PBCorpsBattleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBattleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsBattleList));
  PBCorpsMember_descriptor_ = file->message_type(4);
  static const int PBCorpsMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMember, familymemberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMember, familyproperty_),
  };
  PBCorpsMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsMember_descriptor_,
      PBCorpsMember::default_instance_,
      PBCorpsMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsMember));
  PBCorpsMemberList_descriptor_ = file->message_type(5);
  static const int PBCorpsMemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberList, corpsmemberlist_),
  };
  PBCorpsMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsMemberList_descriptor_,
      PBCorpsMemberList::default_instance_,
      PBCorpsMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsMemberList));
  PBCorpsApplyList_descriptor_ = file->message_type(6);
  static const int PBCorpsApplyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsApplyList, applylist_),
  };
  PBCorpsApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsApplyList_descriptor_,
      PBCorpsApplyList::default_instance_,
      PBCorpsApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsApplyList));
  PBCorpsBasicInfo_descriptor_ = file->message_type(7);
  static const int PBCorpsBasicInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsfamilynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsrootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsrooterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsdevelop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, maxfamilynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, corpsstarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, maincitymap_),
  };
  PBCorpsBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsBasicInfo_descriptor_,
      PBCorpsBasicInfo::default_instance_,
      PBCorpsBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsBasicInfo));
  CorpsInfoList_descriptor_ = file->message_type(8);
  static const int CorpsInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsInfoList, corpslist_),
  };
  CorpsInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorpsInfoList_descriptor_,
      CorpsInfoList::default_instance_,
      CorpsInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpsInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorpsInfoList));
  PBCorpsFamilyInfo_descriptor_ = file->message_type(9);
  static const int PBCorpsFamilyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfo, familyid_),
  };
  PBCorpsFamilyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsFamilyInfo_descriptor_,
      PBCorpsFamilyInfo::default_instance_,
      PBCorpsFamilyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsFamilyInfo));
  PBCorpsFamilyInfoList_descriptor_ = file->message_type(10);
  static const int PBCorpsFamilyInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfoList, familyinfo_),
  };
  PBCorpsFamilyInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsFamilyInfoList_descriptor_,
      PBCorpsFamilyInfoList::default_instance_,
      PBCorpsFamilyInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsFamilyInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsFamilyInfoList));
  PBUnionBasicInfo_descriptor_ = file->message_type(11);
  static const int PBUnionBasicInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, coreid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, corename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, rootername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, rooterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, corpsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, money_),
  };
  PBUnionBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUnionBasicInfo_descriptor_,
      PBUnionBasicInfo::default_instance_,
      PBUnionBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUnionBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUnionBasicInfo));
  PBTaskListInfo_descriptor_ = file->message_type(12);
  static const int PBTaskListInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskListInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskListInfo, taskstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskListInfo, entityid_),
  };
  PBTaskListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskListInfo_descriptor_,
      PBTaskListInfo::default_instance_,
      PBTaskListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskListInfo));
  PBCorpsPublishInfo_descriptor_ = file->message_type(13);
  static const int PBCorpsPublishInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsPublishInfo, todaytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsPublishInfo, weektimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsPublishInfo, tasklist_),
  };
  PBCorpsPublishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsPublishInfo_descriptor_,
      PBCorpsPublishInfo::default_instance_,
      PBCorpsPublishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsPublishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsPublishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsPublishInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_corpsinfo_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorpsProperty_descriptor_, &CorpsProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsBattle_descriptor_, &PBCorpsBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsBoss_descriptor_, &PBCorpsBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsBattleList_descriptor_, &PBCorpsBattleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsMember_descriptor_, &PBCorpsMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsMemberList_descriptor_, &PBCorpsMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsApplyList_descriptor_, &PBCorpsApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsBasicInfo_descriptor_, &PBCorpsBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorpsInfoList_descriptor_, &CorpsInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsFamilyInfo_descriptor_, &PBCorpsFamilyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsFamilyInfoList_descriptor_, &PBCorpsFamilyInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUnionBasicInfo_descriptor_, &PBUnionBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskListInfo_descriptor_, &PBTaskListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsPublishInfo_descriptor_, &PBCorpsPublishInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx() {
  delete CorpsProperty::default_instance_;
  delete CorpsProperty_reflection_;
  delete PBCorpsBattle::default_instance_;
  delete PBCorpsBattle_reflection_;
  delete PBCorpsBoss::default_instance_;
  delete PBCorpsBoss_reflection_;
  delete PBCorpsBattleList::default_instance_;
  delete PBCorpsBattleList_reflection_;
  delete PBCorpsMember::default_instance_;
  delete PBCorpsMember_reflection_;
  delete PBCorpsMemberList::default_instance_;
  delete PBCorpsMemberList_reflection_;
  delete PBCorpsApplyList::default_instance_;
  delete PBCorpsApplyList_reflection_;
  delete PBCorpsBasicInfo::default_instance_;
  delete PBCorpsBasicInfo_reflection_;
  delete CorpsInfoList::default_instance_;
  delete CorpsInfoList_reflection_;
  delete PBCorpsFamilyInfo::default_instance_;
  delete PBCorpsFamilyInfo_reflection_;
  delete PBCorpsFamilyInfoList::default_instance_;
  delete PBCorpsFamilyInfoList_reflection_;
  delete PBUnionBasicInfo::default_instance_;
  delete PBUnionBasicInfo_reflection_;
  delete PBTaskListInfo::default_instance_;
  delete PBTaskListInfo_reflection_;
  delete PBCorpsPublishInfo::default_instance_;
  delete PBCorpsPublishInfo_reflection_;
}

void protobuf_AddDesc_corpsinfo_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020corpsinfo_pb.hxx\032\023familydbinfo_pb.hxx\""
    "\373\006\n\rCorpsProperty\022\022\n\nCorpsMoney\030\001 \001(\r\022\027\n"
    "\017CorpsRooterName\030\002 \001(\t\022\026\n\016CorpsFamilyNum"
    "\030\003 \001(\r\022\022\n\nCorpsLevel\030\004 \001(\r\022\026\n\016CorpsButtu"
    "llin\030\005 \001(\t\022\026\n\016CorpsMemberNum\030\006 \001(\r\022\025\n\rCo"
    "rpsRooterID\030\007 \001(\r\022\017\n\007CorpsID\030\010 \001(\r\022\021\n\tCo"
    "rpsName\030\t \001(\t\022\022\n\nCorpsGlory\030\n \001(\r\022\024\n\014Cor"
    "psDevelop\030\013 \001(\r\022\017\n\007WarRank\030\014 \001(\r\022\021\n\tWarW"
    "inNum\030\r \001(\r\022\022\n\nWarLostNum\030\016 \001(\r\022\027\n\017Famil"
    "yStarLevel\030\017 \001(\r\022\016\n\006WarExp\030\020 \001(\r\022\021\n\tWarM"
    "axExp\030\021 \001(\r\022\024\n\014MaxFamilyNum\030\022 \001(\r\022\022\n\nCan"
    "LevelUp\030\023 \001(\r\022\027\n\017ChallengeStatus\030\024 \001(\r\022\026"
    "\n\016ChallengeMoney\030\025 \001(\r\022\025\n\rMaxGeneralNum\030"
    "\026 \001(\r\022\030\n\020MaxCounsellorNum\030\027 \001(\r\022\"\n\nBattl"
    "eInfo\030\030 \003(\0132\016.PBCorpsBattle\022\021\n\tCountryID"
    "\030\031 \001(\r\022\r\n\005Color\030\032 \001(\r\022\023\n\013MainCityMap\030\033 \001"
    "(\r\022\022\n\nLevelGlory\030\035 \001(\r\022\022\n\nLevleMoney\030\036 \001"
    "(\r\022\027\n\017BOSSRefineValue\030\037 \001(\r\022\023\n\013RefineVal"
    "ue\030  \001(\r\022\036\n\010BossList\030! \003(\0132\014.PBCorpsBoss"
    "\022\023\n\013BossCDLimit\030\" \001(\r\022\022\n\nBossCDCool\030# \001("
    "\r\022\030\n\020BossRepetionOpen\030$ \001(\r\022\026\n\016CorpsCurB"
    "ossID\030% \001(\r\022\026\n\016CorpsBossScore\030& \001(\r\022\032\n\022C"
    "orpsCollectActive\030\' \001(\r\022\034\n\024CorpsReptionO"
    "penTime\030( \001(\r\"\343\001\n\rPBCorpsBattle\022\r\n\005NpcID"
    "\030\001 \001(\r\022\021\n\tNpcStatus\030\002 \001(\r\022\021\n\tWarStatus\030\003"
    " \001(\r\022\024\n\014DesCorpsName\030\004 \001(\t\022\014\n\004Type\030\005 \001(\r"
    "\022\020\n\010BidMoney\030\006 \001(\r\022\022\n\nDesCorpsID\030\007 \001(\r\022\r"
    "\n\005MapID\030\010 \001(\r\022\014\n\004Time\030\t \001(\r\022\017\n\007CorpsID\030\n"
    " \001(\r\022\021\n\tCorpsName\030\013 \001(\t\022\022\n\nRooterName\030\014 "
    "\001(\t\"3\n\013PBCorpsBoss\022\016\n\006BossId\030\001 \001(\r\022\024\n\014Ca"
    "nIntoTimes\030\002 \001(\r\"7\n\021PBCorpsBattleList\022\"\n"
    "\nBattleList\030\001 \003(\0132\016.PBCorpsBattle\"c\n\rPBC"
    "orpsMember\022-\n\020FamilyMemberList\030\001 \001(\0132\023.P"
    "BFamilyMemberList\022#\n\016FamilyProperty\030\002 \001("
    "\0132\013.FamilyData\"<\n\021PBCorpsMemberList\022\'\n\017C"
    "orpsMemberList\030\001 \003(\0132\016.PBCorpsMember\"2\n\020"
    "PBCorpsApplyList\022\036\n\tApplyList\030\001 \003(\0132\013.Fa"
    "milyData\"\253\002\n\020PBCorpsBasicInfo\022\026\n\016CorpsMe"
    "mberNum\030\001 \001(\r\022\026\n\016CorpsFamilyNum\030\002 \001(\r\022\017\n"
    "\007CorpsID\030\003 \001(\r\022\022\n\nCorpsMoney\030\004 \001(\r\022\027\n\017Co"
    "rpsRooterName\030\005 \001(\t\022\025\n\rCorpsRooterID\030\006 \001"
    "(\r\022\022\n\nCorpsLevel\030\007 \001(\r\022\021\n\tCorpsName\030\010 \001("
    "\t\022\022\n\nCorpsGlory\030\t \001(\r\022\024\n\014CorpsDevelop\030\n "
    "\001(\r\022\024\n\014MaxFamilyNum\030\013 \001(\r\022\026\n\016CorpsStarLe"
    "vel\030\014 \001(\r\022\023\n\013MainCityMap\030\r \001(\r\"5\n\rCorpsI"
    "nfoList\022$\n\tCorpsList\030\001 \003(\0132\021.PBCorpsBasi"
    "cInfo\"9\n\021PBCorpsFamilyInfo\022\022\n\nContribute"
    "\030\001 \001(\r\022\020\n\010FamilyID\030\002 \001(\r\"?\n\025PBCorpsFamil"
    "yInfoList\022&\n\nFamilyInfo\030\001 \003(\0132\022.PBCorpsF"
    "amilyInfo\"\321\001\n\020PBUnionBasicInfo\022\017\n\007UnionI"
    "D\030\001 \001(\r\022\021\n\tUnionName\030\002 \001(\t\022\016\n\006CoreID\030\003 \001"
    "(\r\022\020\n\010CoreName\030\004 \001(\t\022\022\n\nRooterName\030\005 \001(\t"
    "\022\020\n\010RooterID\030\006 \001(\r\022\016\n\006CityID\030\007 \001(\r\022\020\n\010Co"
    "rpsNum\030\010 \001(\r\022\021\n\tMemberNum\030\t \001(\r\022\r\n\005MapID"
    "\030\n \003(\r\022\r\n\005Money\030\013 \001(\r\"E\n\016PBTaskListInfo\022"
    "\016\n\006TaskID\030\001 \001(\r\022\021\n\tTaskState\030\002 \001(\r\022\020\n\010En"
    "tityID\030\003 \001(\r\"^\n\022PBCorpsPublishInfo\022\022\n\nTo"
    "dayTimes\030\001 \001(\r\022\021\n\tWeekTimes\030\002 \001(\r\022!\n\010Tas"
    "kList\030\003 \003(\0132\017.PBTaskListInfoB\002H\001", 2352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "corpsinfo_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CorpsProperty::default_instance_ = new CorpsProperty();
  PBCorpsBattle::default_instance_ = new PBCorpsBattle();
  PBCorpsBoss::default_instance_ = new PBCorpsBoss();
  PBCorpsBattleList::default_instance_ = new PBCorpsBattleList();
  PBCorpsMember::default_instance_ = new PBCorpsMember();
  PBCorpsMemberList::default_instance_ = new PBCorpsMemberList();
  PBCorpsApplyList::default_instance_ = new PBCorpsApplyList();
  PBCorpsBasicInfo::default_instance_ = new PBCorpsBasicInfo();
  CorpsInfoList::default_instance_ = new CorpsInfoList();
  PBCorpsFamilyInfo::default_instance_ = new PBCorpsFamilyInfo();
  PBCorpsFamilyInfoList::default_instance_ = new PBCorpsFamilyInfoList();
  PBUnionBasicInfo::default_instance_ = new PBUnionBasicInfo();
  PBTaskListInfo::default_instance_ = new PBTaskListInfo();
  PBCorpsPublishInfo::default_instance_ = new PBCorpsPublishInfo();
  CorpsProperty::default_instance_->InitAsDefaultInstance();
  PBCorpsBattle::default_instance_->InitAsDefaultInstance();
  PBCorpsBoss::default_instance_->InitAsDefaultInstance();
  PBCorpsBattleList::default_instance_->InitAsDefaultInstance();
  PBCorpsMember::default_instance_->InitAsDefaultInstance();
  PBCorpsMemberList::default_instance_->InitAsDefaultInstance();
  PBCorpsApplyList::default_instance_->InitAsDefaultInstance();
  PBCorpsBasicInfo::default_instance_->InitAsDefaultInstance();
  CorpsInfoList::default_instance_->InitAsDefaultInstance();
  PBCorpsFamilyInfo::default_instance_->InitAsDefaultInstance();
  PBCorpsFamilyInfoList::default_instance_->InitAsDefaultInstance();
  PBUnionBasicInfo::default_instance_->InitAsDefaultInstance();
  PBTaskListInfo::default_instance_->InitAsDefaultInstance();
  PBCorpsPublishInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_corpsinfo_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_corpsinfo_5fpb_2ehxx {
  StaticDescriptorInitializer_corpsinfo_5fpb_2ehxx() {
    protobuf_AddDesc_corpsinfo_5fpb_2ehxx();
  }
} static_descriptor_initializer_corpsinfo_5fpb_2ehxx_;


// ===================================================================

const ::std::string CorpsProperty::_default_corpsrootername_;
const ::std::string CorpsProperty::_default_corpsbuttullin_;
const ::std::string CorpsProperty::_default_corpsname_;
#ifndef _MSC_VER
const int CorpsProperty::kCorpsMoneyFieldNumber;
const int CorpsProperty::kCorpsRooterNameFieldNumber;
const int CorpsProperty::kCorpsFamilyNumFieldNumber;
const int CorpsProperty::kCorpsLevelFieldNumber;
const int CorpsProperty::kCorpsButtullinFieldNumber;
const int CorpsProperty::kCorpsMemberNumFieldNumber;
const int CorpsProperty::kCorpsRooterIDFieldNumber;
const int CorpsProperty::kCorpsIDFieldNumber;
const int CorpsProperty::kCorpsNameFieldNumber;
const int CorpsProperty::kCorpsGloryFieldNumber;
const int CorpsProperty::kCorpsDevelopFieldNumber;
const int CorpsProperty::kWarRankFieldNumber;
const int CorpsProperty::kWarWinNumFieldNumber;
const int CorpsProperty::kWarLostNumFieldNumber;
const int CorpsProperty::kFamilyStarLevelFieldNumber;
const int CorpsProperty::kWarExpFieldNumber;
const int CorpsProperty::kWarMaxExpFieldNumber;
const int CorpsProperty::kMaxFamilyNumFieldNumber;
const int CorpsProperty::kCanLevelUpFieldNumber;
const int CorpsProperty::kChallengeStatusFieldNumber;
const int CorpsProperty::kChallengeMoneyFieldNumber;
const int CorpsProperty::kMaxGeneralNumFieldNumber;
const int CorpsProperty::kMaxCounsellorNumFieldNumber;
const int CorpsProperty::kBattleInfoFieldNumber;
const int CorpsProperty::kCountryIDFieldNumber;
const int CorpsProperty::kColorFieldNumber;
const int CorpsProperty::kMainCityMapFieldNumber;
const int CorpsProperty::kLevelGloryFieldNumber;
const int CorpsProperty::kLevleMoneyFieldNumber;
const int CorpsProperty::kBOSSRefineValueFieldNumber;
const int CorpsProperty::kRefineValueFieldNumber;
const int CorpsProperty::kBossListFieldNumber;
const int CorpsProperty::kBossCDLimitFieldNumber;
const int CorpsProperty::kBossCDCoolFieldNumber;
const int CorpsProperty::kBossRepetionOpenFieldNumber;
const int CorpsProperty::kCorpsCurBossIDFieldNumber;
const int CorpsProperty::kCorpsBossScoreFieldNumber;
const int CorpsProperty::kCorpsCollectActiveFieldNumber;
const int CorpsProperty::kCorpsReptionOpenTimeFieldNumber;
#endif  // !_MSC_VER

CorpsProperty::CorpsProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorpsProperty::InitAsDefaultInstance() {}

CorpsProperty::CorpsProperty(const CorpsProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsProperty::SharedCtor() {
  _cached_size_ = 0;
  corpsmoney_ = 0u;
  corpsrootername_ = const_cast< ::std::string*>(&_default_corpsrootername_);
  corpsfamilynum_ = 0u;
  corpslevel_ = 0u;
  corpsbuttullin_ = const_cast< ::std::string*>(&_default_corpsbuttullin_);
  corpsmembernum_ = 0u;
  corpsrooterid_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsglory_ = 0u;
  corpsdevelop_ = 0u;
  warrank_ = 0u;
  warwinnum_ = 0u;
  warlostnum_ = 0u;
  familystarlevel_ = 0u;
  warexp_ = 0u;
  warmaxexp_ = 0u;
  maxfamilynum_ = 0u;
  canlevelup_ = 0u;
  challengestatus_ = 0u;
  challengemoney_ = 0u;
  maxgeneralnum_ = 0u;
  maxcounsellornum_ = 0u;
  countryid_ = 0u;
  color_ = 0u;
  maincitymap_ = 0u;
  levelglory_ = 0u;
  levlemoney_ = 0u;
  bossrefinevalue_ = 0u;
  refinevalue_ = 0u;
  bosscdlimit_ = 0u;
  bosscdcool_ = 0u;
  bossrepetionopen_ = 0u;
  corpscurbossid_ = 0u;
  corpsbossscore_ = 0u;
  corpscollectactive_ = 0u;
  corpsreptionopentime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsProperty::~CorpsProperty() {
  SharedDtor();
}

void CorpsProperty::SharedDtor() {
  if (corpsrootername_ != &_default_corpsrootername_) {
    delete corpsrootername_;
  }
  if (corpsbuttullin_ != &_default_corpsbuttullin_) {
    delete corpsbuttullin_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CorpsProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpsProperty_descriptor_;
}

const CorpsProperty& CorpsProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

CorpsProperty* CorpsProperty::default_instance_ = NULL;

CorpsProperty* CorpsProperty::New() const {
  return new CorpsProperty;
}

void CorpsProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsmoney_ = 0u;
    if (_has_bit(1)) {
      if (corpsrootername_ != &_default_corpsrootername_) {
        corpsrootername_->clear();
      }
    }
    corpsfamilynum_ = 0u;
    corpslevel_ = 0u;
    if (_has_bit(4)) {
      if (corpsbuttullin_ != &_default_corpsbuttullin_) {
        corpsbuttullin_->clear();
      }
    }
    corpsmembernum_ = 0u;
    corpsrooterid_ = 0u;
    corpsid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    corpsglory_ = 0u;
    corpsdevelop_ = 0u;
    warrank_ = 0u;
    warwinnum_ = 0u;
    warlostnum_ = 0u;
    familystarlevel_ = 0u;
    warexp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    warmaxexp_ = 0u;
    maxfamilynum_ = 0u;
    canlevelup_ = 0u;
    challengestatus_ = 0u;
    challengemoney_ = 0u;
    maxgeneralnum_ = 0u;
    maxcounsellornum_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    countryid_ = 0u;
    color_ = 0u;
    maincitymap_ = 0u;
    levelglory_ = 0u;
    levlemoney_ = 0u;
    bossrefinevalue_ = 0u;
    refinevalue_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    bosscdlimit_ = 0u;
    bosscdcool_ = 0u;
    bossrepetionopen_ = 0u;
    corpscurbossid_ = 0u;
    corpsbossscore_ = 0u;
    corpscollectactive_ = 0u;
    corpsreptionopentime_ = 0u;
  }
  battleinfo_.Clear();
  bosslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorpsProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_CorpsRooterName;
        break;
      }
      
      // optional string CorpsRooterName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsRooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsrootername()));
        if (input->ExpectTag(24)) goto parse_CorpsFamilyNum;
        break;
      }
      
      // optional uint32 CorpsFamilyNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsFamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsfamilynum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsLevel;
        break;
      }
      
      // optional uint32 CorpsLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpslevel_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_CorpsButtullin;
        break;
      }
      
      // optional string CorpsButtullin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsButtullin:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsbuttullin()));
        if (input->ExpectTag(48)) goto parse_CorpsMemberNum;
        break;
      }
      
      // optional uint32 CorpsMemberNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmembernum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CorpsRooterID;
        break;
      }
      
      // optional uint32 CorpsRooterID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsRooterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsrooterid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(80)) goto parse_CorpsGlory;
        break;
      }
      
      // optional uint32 CorpsGlory = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsglory_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CorpsDevelop;
        break;
      }
      
      // optional uint32 CorpsDevelop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsDevelop:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsdevelop_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_WarRank;
        break;
      }
      
      // optional uint32 WarRank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warrank_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_WarWinNum;
        break;
      }
      
      // optional uint32 WarWinNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarWinNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warwinnum_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_WarLostNum;
        break;
      }
      
      // optional uint32 WarLostNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarLostNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warlostnum_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_FamilyStarLevel;
        break;
      }
      
      // optional uint32 FamilyStarLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familystarlevel_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_WarExp;
        break;
      }
      
      // optional uint32 WarExp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warexp_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_WarMaxExp;
        break;
      }
      
      // optional uint32 WarMaxExp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarMaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warmaxexp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_MaxFamilyNum;
        break;
      }
      
      // optional uint32 MaxFamilyNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxFamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxfamilynum_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_CanLevelUp;
        break;
      }
      
      // optional uint32 CanLevelUp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanLevelUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canlevelup_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_ChallengeStatus;
        break;
      }
      
      // optional uint32 ChallengeStatus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengestatus_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_ChallengeMoney;
        break;
      }
      
      // optional uint32 ChallengeMoney = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengemoney_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MaxGeneralNum;
        break;
      }
      
      // optional uint32 MaxGeneralNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxGeneralNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxgeneralnum_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_MaxCounsellorNum;
        break;
      }
      
      // optional uint32 MaxCounsellorNum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxCounsellorNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxcounsellornum_));
        _set_bit(22);
        if (input->ExpectTag(194)) goto parse_BattleInfo;
        break;
      }
      
      // repeated .PBCorpsBattle BattleInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_battleinfo()));
        if (input->ExpectTag(194)) goto parse_BattleInfo;
        if (input->ExpectTag(200)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_Color;
        break;
      }
      
      // optional uint32 Color = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Color:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &color_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_MainCityMap;
        break;
      }
      
      // optional uint32 MainCityMap = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MainCityMap:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maincitymap_));
        _set_bit(26);
        if (input->ExpectTag(232)) goto parse_LevelGlory;
        break;
      }
      
      // optional uint32 LevelGlory = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelglory_));
        _set_bit(27);
        if (input->ExpectTag(240)) goto parse_LevleMoney;
        break;
      }
      
      // optional uint32 LevleMoney = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevleMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levlemoney_));
        _set_bit(28);
        if (input->ExpectTag(248)) goto parse_BOSSRefineValue;
        break;
      }
      
      // optional uint32 BOSSRefineValue = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BOSSRefineValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossrefinevalue_));
        _set_bit(29);
        if (input->ExpectTag(256)) goto parse_RefineValue;
        break;
      }
      
      // optional uint32 RefineValue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RefineValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &refinevalue_));
        _set_bit(30);
        if (input->ExpectTag(266)) goto parse_BossList;
        break;
      }
      
      // repeated .PBCorpsBoss BossList = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BossList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_bosslist()));
        if (input->ExpectTag(266)) goto parse_BossList;
        if (input->ExpectTag(272)) goto parse_BossCDLimit;
        break;
      }
      
      // optional uint32 BossCDLimit = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossCDLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bosscdlimit_));
        _set_bit(32);
        if (input->ExpectTag(280)) goto parse_BossCDCool;
        break;
      }
      
      // optional uint32 BossCDCool = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossCDCool:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bosscdcool_));
        _set_bit(33);
        if (input->ExpectTag(288)) goto parse_BossRepetionOpen;
        break;
      }
      
      // optional uint32 BossRepetionOpen = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BossRepetionOpen:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossrepetionopen_));
        _set_bit(34);
        if (input->ExpectTag(296)) goto parse_CorpsCurBossID;
        break;
      }
      
      // optional uint32 CorpsCurBossID = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsCurBossID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscurbossid_));
        _set_bit(35);
        if (input->ExpectTag(304)) goto parse_CorpsBossScore;
        break;
      }
      
      // optional uint32 CorpsBossScore = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsBossScore:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsbossscore_));
        _set_bit(36);
        if (input->ExpectTag(312)) goto parse_CorpsCollectActive;
        break;
      }
      
      // optional uint32 CorpsCollectActive = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsCollectActive:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscollectactive_));
        _set_bit(37);
        if (input->ExpectTag(320)) goto parse_CorpsReptionOpenTime;
        break;
      }
      
      // optional uint32 CorpsReptionOpenTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsReptionOpenTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsreptionopentime_));
        _set_bit(38);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CorpsProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsMoney = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsmoney(), output);
  }
  
  // optional string CorpsRooterName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->corpsrootername(), output);
  }
  
  // optional uint32 CorpsFamilyNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsfamilynum(), output);
  }
  
  // optional uint32 CorpsLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpslevel(), output);
  }
  
  // optional string CorpsButtullin = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->corpsbuttullin(), output);
  }
  
  // optional uint32 CorpsMemberNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->corpsmembernum(), output);
  }
  
  // optional uint32 CorpsRooterID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->corpsrooterid(), output);
  }
  
  // optional uint32 CorpsID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->corpsid(), output);
  }
  
  // optional string CorpsName = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->corpsname(), output);
  }
  
  // optional uint32 CorpsGlory = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->corpsglory(), output);
  }
  
  // optional uint32 CorpsDevelop = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->corpsdevelop(), output);
  }
  
  // optional uint32 WarRank = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->warrank(), output);
  }
  
  // optional uint32 WarWinNum = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->warwinnum(), output);
  }
  
  // optional uint32 WarLostNum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->warlostnum(), output);
  }
  
  // optional uint32 FamilyStarLevel = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->familystarlevel(), output);
  }
  
  // optional uint32 WarExp = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->warexp(), output);
  }
  
  // optional uint32 WarMaxExp = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->warmaxexp(), output);
  }
  
  // optional uint32 MaxFamilyNum = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->maxfamilynum(), output);
  }
  
  // optional uint32 CanLevelUp = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->canlevelup(), output);
  }
  
  // optional uint32 ChallengeStatus = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->challengestatus(), output);
  }
  
  // optional uint32 ChallengeMoney = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->challengemoney(), output);
  }
  
  // optional uint32 MaxGeneralNum = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->maxgeneralnum(), output);
  }
  
  // optional uint32 MaxCounsellorNum = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->maxcounsellornum(), output);
  }
  
  // repeated .PBCorpsBattle BattleInfo = 24;
  for (int i = 0; i < this->battleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->battleinfo(i), output);
  }
  
  // optional uint32 CountryID = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->countryid(), output);
  }
  
  // optional uint32 Color = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->color(), output);
  }
  
  // optional uint32 MainCityMap = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->maincitymap(), output);
  }
  
  // optional uint32 LevelGlory = 29;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->levelglory(), output);
  }
  
  // optional uint32 LevleMoney = 30;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->levlemoney(), output);
  }
  
  // optional uint32 BOSSRefineValue = 31;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->bossrefinevalue(), output);
  }
  
  // optional uint32 RefineValue = 32;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->refinevalue(), output);
  }
  
  // repeated .PBCorpsBoss BossList = 33;
  for (int i = 0; i < this->bosslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(33, this->bosslist(i), output);
  }
  
  // optional uint32 BossCDLimit = 34;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->bosscdlimit(), output);
  }
  
  // optional uint32 BossCDCool = 35;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->bosscdcool(), output);
  }
  
  // optional uint32 BossRepetionOpen = 36;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->bossrepetionopen(), output);
  }
  
  // optional uint32 CorpsCurBossID = 37;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->corpscurbossid(), output);
  }
  
  // optional uint32 CorpsBossScore = 38;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->corpsbossscore(), output);
  }
  
  // optional uint32 CorpsCollectActive = 39;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->corpscollectactive(), output);
  }
  
  // optional uint32 CorpsReptionOpenTime = 40;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->corpsreptionopentime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorpsProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsMoney = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsmoney(), target);
  }
  
  // optional string CorpsRooterName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->corpsrootername(), target);
  }
  
  // optional uint32 CorpsFamilyNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsfamilynum(), target);
  }
  
  // optional uint32 CorpsLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpslevel(), target);
  }
  
  // optional string CorpsButtullin = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->corpsbuttullin(), target);
  }
  
  // optional uint32 CorpsMemberNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->corpsmembernum(), target);
  }
  
  // optional uint32 CorpsRooterID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->corpsrooterid(), target);
  }
  
  // optional uint32 CorpsID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->corpsid(), target);
  }
  
  // optional string CorpsName = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->corpsname(), target);
  }
  
  // optional uint32 CorpsGlory = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->corpsglory(), target);
  }
  
  // optional uint32 CorpsDevelop = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->corpsdevelop(), target);
  }
  
  // optional uint32 WarRank = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->warrank(), target);
  }
  
  // optional uint32 WarWinNum = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->warwinnum(), target);
  }
  
  // optional uint32 WarLostNum = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->warlostnum(), target);
  }
  
  // optional uint32 FamilyStarLevel = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->familystarlevel(), target);
  }
  
  // optional uint32 WarExp = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->warexp(), target);
  }
  
  // optional uint32 WarMaxExp = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->warmaxexp(), target);
  }
  
  // optional uint32 MaxFamilyNum = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->maxfamilynum(), target);
  }
  
  // optional uint32 CanLevelUp = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->canlevelup(), target);
  }
  
  // optional uint32 ChallengeStatus = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->challengestatus(), target);
  }
  
  // optional uint32 ChallengeMoney = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->challengemoney(), target);
  }
  
  // optional uint32 MaxGeneralNum = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->maxgeneralnum(), target);
  }
  
  // optional uint32 MaxCounsellorNum = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->maxcounsellornum(), target);
  }
  
  // repeated .PBCorpsBattle BattleInfo = 24;
  for (int i = 0; i < this->battleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->battleinfo(i), target);
  }
  
  // optional uint32 CountryID = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->countryid(), target);
  }
  
  // optional uint32 Color = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->color(), target);
  }
  
  // optional uint32 MainCityMap = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->maincitymap(), target);
  }
  
  // optional uint32 LevelGlory = 29;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->levelglory(), target);
  }
  
  // optional uint32 LevleMoney = 30;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->levlemoney(), target);
  }
  
  // optional uint32 BOSSRefineValue = 31;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->bossrefinevalue(), target);
  }
  
  // optional uint32 RefineValue = 32;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->refinevalue(), target);
  }
  
  // repeated .PBCorpsBoss BossList = 33;
  for (int i = 0; i < this->bosslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(33, this->bosslist(i), target);
  }
  
  // optional uint32 BossCDLimit = 34;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->bosscdlimit(), target);
  }
  
  // optional uint32 BossCDCool = 35;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->bosscdcool(), target);
  }
  
  // optional uint32 BossRepetionOpen = 36;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->bossrepetionopen(), target);
  }
  
  // optional uint32 CorpsCurBossID = 37;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->corpscurbossid(), target);
  }
  
  // optional uint32 CorpsBossScore = 38;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->corpsbossscore(), target);
  }
  
  // optional uint32 CorpsCollectActive = 39;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->corpscollectactive(), target);
  }
  
  // optional uint32 CorpsReptionOpenTime = 40;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->corpsreptionopentime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorpsProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsMoney = 1;
    if (has_corpsmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
    // optional string CorpsRooterName = 2;
    if (has_corpsrootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsrootername());
    }
    
    // optional uint32 CorpsFamilyNum = 3;
    if (has_corpsfamilynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsfamilynum());
    }
    
    // optional uint32 CorpsLevel = 4;
    if (has_corpslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpslevel());
    }
    
    // optional string CorpsButtullin = 5;
    if (has_corpsbuttullin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsbuttullin());
    }
    
    // optional uint32 CorpsMemberNum = 6;
    if (has_corpsmembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmembernum());
    }
    
    // optional uint32 CorpsRooterID = 7;
    if (has_corpsrooterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsrooterid());
    }
    
    // optional uint32 CorpsID = 8;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CorpsName = 9;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional uint32 CorpsGlory = 10;
    if (has_corpsglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsglory());
    }
    
    // optional uint32 CorpsDevelop = 11;
    if (has_corpsdevelop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsdevelop());
    }
    
    // optional uint32 WarRank = 12;
    if (has_warrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warrank());
    }
    
    // optional uint32 WarWinNum = 13;
    if (has_warwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warwinnum());
    }
    
    // optional uint32 WarLostNum = 14;
    if (has_warlostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warlostnum());
    }
    
    // optional uint32 FamilyStarLevel = 15;
    if (has_familystarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familystarlevel());
    }
    
    // optional uint32 WarExp = 16;
    if (has_warexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warexp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 WarMaxExp = 17;
    if (has_warmaxexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warmaxexp());
    }
    
    // optional uint32 MaxFamilyNum = 18;
    if (has_maxfamilynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxfamilynum());
    }
    
    // optional uint32 CanLevelUp = 19;
    if (has_canlevelup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canlevelup());
    }
    
    // optional uint32 ChallengeStatus = 20;
    if (has_challengestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengestatus());
    }
    
    // optional uint32 ChallengeMoney = 21;
    if (has_challengemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengemoney());
    }
    
    // optional uint32 MaxGeneralNum = 22;
    if (has_maxgeneralnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxgeneralnum());
    }
    
    // optional uint32 MaxCounsellorNum = 23;
    if (has_maxcounsellornum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxcounsellornum());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 CountryID = 25;
    if (has_countryid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 Color = 26;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->color());
    }
    
    // optional uint32 MainCityMap = 27;
    if (has_maincitymap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maincitymap());
    }
    
    // optional uint32 LevelGlory = 29;
    if (has_levelglory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelglory());
    }
    
    // optional uint32 LevleMoney = 30;
    if (has_levlemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levlemoney());
    }
    
    // optional uint32 BOSSRefineValue = 31;
    if (has_bossrefinevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossrefinevalue());
    }
    
    // optional uint32 RefineValue = 32;
    if (has_refinevalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->refinevalue());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 BossCDLimit = 34;
    if (has_bosscdlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bosscdlimit());
    }
    
    // optional uint32 BossCDCool = 35;
    if (has_bosscdcool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bosscdcool());
    }
    
    // optional uint32 BossRepetionOpen = 36;
    if (has_bossrepetionopen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossrepetionopen());
    }
    
    // optional uint32 CorpsCurBossID = 37;
    if (has_corpscurbossid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscurbossid());
    }
    
    // optional uint32 CorpsBossScore = 38;
    if (has_corpsbossscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsbossscore());
    }
    
    // optional uint32 CorpsCollectActive = 39;
    if (has_corpscollectactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscollectactive());
    }
    
    // optional uint32 CorpsReptionOpenTime = 40;
    if (has_corpsreptionopentime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsreptionopentime());
    }
    
  }
  // repeated .PBCorpsBattle BattleInfo = 24;
  total_size += 2 * this->battleinfo_size();
  for (int i = 0; i < this->battleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->battleinfo(i));
  }
  
  // repeated .PBCorpsBoss BossList = 33;
  total_size += 2 * this->bosslist_size();
  for (int i = 0; i < this->bosslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->bosslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CorpsProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorpsProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorpsProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorpsProperty::MergeFrom(const CorpsProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleinfo_.MergeFrom(from.battleinfo_);
  bosslist_.MergeFrom(from.bosslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsmoney(from.corpsmoney());
    }
    if (from._has_bit(1)) {
      set_corpsrootername(from.corpsrootername());
    }
    if (from._has_bit(2)) {
      set_corpsfamilynum(from.corpsfamilynum());
    }
    if (from._has_bit(3)) {
      set_corpslevel(from.corpslevel());
    }
    if (from._has_bit(4)) {
      set_corpsbuttullin(from.corpsbuttullin());
    }
    if (from._has_bit(5)) {
      set_corpsmembernum(from.corpsmembernum());
    }
    if (from._has_bit(6)) {
      set_corpsrooterid(from.corpsrooterid());
    }
    if (from._has_bit(7)) {
      set_corpsid(from.corpsid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(9)) {
      set_corpsglory(from.corpsglory());
    }
    if (from._has_bit(10)) {
      set_corpsdevelop(from.corpsdevelop());
    }
    if (from._has_bit(11)) {
      set_warrank(from.warrank());
    }
    if (from._has_bit(12)) {
      set_warwinnum(from.warwinnum());
    }
    if (from._has_bit(13)) {
      set_warlostnum(from.warlostnum());
    }
    if (from._has_bit(14)) {
      set_familystarlevel(from.familystarlevel());
    }
    if (from._has_bit(15)) {
      set_warexp(from.warexp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_warmaxexp(from.warmaxexp());
    }
    if (from._has_bit(17)) {
      set_maxfamilynum(from.maxfamilynum());
    }
    if (from._has_bit(18)) {
      set_canlevelup(from.canlevelup());
    }
    if (from._has_bit(19)) {
      set_challengestatus(from.challengestatus());
    }
    if (from._has_bit(20)) {
      set_challengemoney(from.challengemoney());
    }
    if (from._has_bit(21)) {
      set_maxgeneralnum(from.maxgeneralnum());
    }
    if (from._has_bit(22)) {
      set_maxcounsellornum(from.maxcounsellornum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(25)) {
      set_color(from.color());
    }
    if (from._has_bit(26)) {
      set_maincitymap(from.maincitymap());
    }
    if (from._has_bit(27)) {
      set_levelglory(from.levelglory());
    }
    if (from._has_bit(28)) {
      set_levlemoney(from.levlemoney());
    }
    if (from._has_bit(29)) {
      set_bossrefinevalue(from.bossrefinevalue());
    }
    if (from._has_bit(30)) {
      set_refinevalue(from.refinevalue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_bosscdlimit(from.bosscdlimit());
    }
    if (from._has_bit(33)) {
      set_bosscdcool(from.bosscdcool());
    }
    if (from._has_bit(34)) {
      set_bossrepetionopen(from.bossrepetionopen());
    }
    if (from._has_bit(35)) {
      set_corpscurbossid(from.corpscurbossid());
    }
    if (from._has_bit(36)) {
      set_corpsbossscore(from.corpsbossscore());
    }
    if (from._has_bit(37)) {
      set_corpscollectactive(from.corpscollectactive());
    }
    if (from._has_bit(38)) {
      set_corpsreptionopentime(from.corpsreptionopentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorpsProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsProperty::CopyFrom(const CorpsProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsProperty::Swap(CorpsProperty* other) {
  if (other != this) {
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(corpsrootername_, other->corpsrootername_);
    std::swap(corpsfamilynum_, other->corpsfamilynum_);
    std::swap(corpslevel_, other->corpslevel_);
    std::swap(corpsbuttullin_, other->corpsbuttullin_);
    std::swap(corpsmembernum_, other->corpsmembernum_);
    std::swap(corpsrooterid_, other->corpsrooterid_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsglory_, other->corpsglory_);
    std::swap(corpsdevelop_, other->corpsdevelop_);
    std::swap(warrank_, other->warrank_);
    std::swap(warwinnum_, other->warwinnum_);
    std::swap(warlostnum_, other->warlostnum_);
    std::swap(familystarlevel_, other->familystarlevel_);
    std::swap(warexp_, other->warexp_);
    std::swap(warmaxexp_, other->warmaxexp_);
    std::swap(maxfamilynum_, other->maxfamilynum_);
    std::swap(canlevelup_, other->canlevelup_);
    std::swap(challengestatus_, other->challengestatus_);
    std::swap(challengemoney_, other->challengemoney_);
    std::swap(maxgeneralnum_, other->maxgeneralnum_);
    std::swap(maxcounsellornum_, other->maxcounsellornum_);
    battleinfo_.Swap(&other->battleinfo_);
    std::swap(countryid_, other->countryid_);
    std::swap(color_, other->color_);
    std::swap(maincitymap_, other->maincitymap_);
    std::swap(levelglory_, other->levelglory_);
    std::swap(levlemoney_, other->levlemoney_);
    std::swap(bossrefinevalue_, other->bossrefinevalue_);
    std::swap(refinevalue_, other->refinevalue_);
    bosslist_.Swap(&other->bosslist_);
    std::swap(bosscdlimit_, other->bosscdlimit_);
    std::swap(bosscdcool_, other->bosscdcool_);
    std::swap(bossrepetionopen_, other->bossrepetionopen_);
    std::swap(corpscurbossid_, other->corpscurbossid_);
    std::swap(corpsbossscore_, other->corpsbossscore_);
    std::swap(corpscollectactive_, other->corpscollectactive_);
    std::swap(corpsreptionopentime_, other->corpsreptionopentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CorpsProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CorpsProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CorpsProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CorpsProperty_reflection_;
}

// ===================================================================

const ::std::string PBCorpsBattle::_default_descorpsname_;
const ::std::string PBCorpsBattle::_default_corpsname_;
const ::std::string PBCorpsBattle::_default_rootername_;
#ifndef _MSC_VER
const int PBCorpsBattle::kNpcIDFieldNumber;
const int PBCorpsBattle::kNpcStatusFieldNumber;
const int PBCorpsBattle::kWarStatusFieldNumber;
const int PBCorpsBattle::kDesCorpsNameFieldNumber;
const int PBCorpsBattle::kTypeFieldNumber;
const int PBCorpsBattle::kBidMoneyFieldNumber;
const int PBCorpsBattle::kDesCorpsIDFieldNumber;
const int PBCorpsBattle::kMapIDFieldNumber;
const int PBCorpsBattle::kTimeFieldNumber;
const int PBCorpsBattle::kCorpsIDFieldNumber;
const int PBCorpsBattle::kCorpsNameFieldNumber;
const int PBCorpsBattle::kRooterNameFieldNumber;
#endif  // !_MSC_VER

PBCorpsBattle::PBCorpsBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsBattle::InitAsDefaultInstance() {}

PBCorpsBattle::PBCorpsBattle(const PBCorpsBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsBattle::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  npcstatus_ = 0u;
  warstatus_ = 0u;
  descorpsname_ = const_cast< ::std::string*>(&_default_descorpsname_);
  type_ = 0u;
  bidmoney_ = 0u;
  descorpsid_ = 0u;
  mapid_ = 0u;
  time_ = 0u;
  corpsid_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsBattle::~PBCorpsBattle() {
  SharedDtor();
}

void PBCorpsBattle::SharedDtor() {
  if (descorpsname_ != &_default_descorpsname_) {
    delete descorpsname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBattle_descriptor_;
}

const PBCorpsBattle& PBCorpsBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsBattle* PBCorpsBattle::default_instance_ = NULL;

PBCorpsBattle* PBCorpsBattle::New() const {
  return new PBCorpsBattle;
}

void PBCorpsBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    npcstatus_ = 0u;
    warstatus_ = 0u;
    if (_has_bit(3)) {
      if (descorpsname_ != &_default_descorpsname_) {
        descorpsname_->clear();
      }
    }
    type_ = 0u;
    bidmoney_ = 0u;
    descorpsid_ = 0u;
    mapid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0u;
    corpsid_ = 0u;
    if (_has_bit(10)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
    if (_has_bit(11)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_NpcStatus;
        break;
      }
      
      // optional uint32 NpcStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcstatus_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_WarStatus;
        break;
      }
      
      // optional uint32 WarStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_DesCorpsName;
        break;
      }
      
      // optional string DesCorpsName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_descorpsname()));
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BidMoney;
        break;
      }
      
      // optional uint32 BidMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidmoney_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DesCorpsID;
        break;
      }
      
      // optional uint32 DesCorpsID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descorpsid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(98)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsBattle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcid(), output);
  }
  
  // optional uint32 NpcStatus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcstatus(), output);
  }
  
  // optional uint32 WarStatus = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->warstatus(), output);
  }
  
  // optional string DesCorpsName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->descorpsname(), output);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 BidMoney = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->bidmoney(), output);
  }
  
  // optional uint32 DesCorpsID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->descorpsid(), output);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->mapid(), output);
  }
  
  // optional uint32 Time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->time(), output);
  }
  
  // optional uint32 CorpsID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->corpsid(), output);
  }
  
  // optional string CorpsName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->corpsname(), output);
  }
  
  // optional string RooterName = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->rootername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NpcID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcid(), target);
  }
  
  // optional uint32 NpcStatus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcstatus(), target);
  }
  
  // optional uint32 WarStatus = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->warstatus(), target);
  }
  
  // optional string DesCorpsName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->descorpsname(), target);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 BidMoney = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->bidmoney(), target);
  }
  
  // optional uint32 DesCorpsID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->descorpsid(), target);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->mapid(), target);
  }
  
  // optional uint32 Time = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->time(), target);
  }
  
  // optional uint32 CorpsID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->corpsid(), target);
  }
  
  // optional string CorpsName = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->corpsname(), target);
  }
  
  // optional string RooterName = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->rootername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 NpcStatus = 2;
    if (has_npcstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcstatus());
    }
    
    // optional uint32 WarStatus = 3;
    if (has_warstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
    // optional string DesCorpsName = 4;
    if (has_descorpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->descorpsname());
    }
    
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 BidMoney = 6;
    if (has_bidmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidmoney());
    }
    
    // optional uint32 DesCorpsID = 7;
    if (has_descorpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descorpsid());
    }
    
    // optional uint32 MapID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 CorpsID = 10;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional string CorpsName = 11;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
    // optional string RooterName = 12;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsBattle::MergeFrom(const PBCorpsBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(1)) {
      set_npcstatus(from.npcstatus());
    }
    if (from._has_bit(2)) {
      set_warstatus(from.warstatus());
    }
    if (from._has_bit(3)) {
      set_descorpsname(from.descorpsname());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_bidmoney(from.bidmoney());
    }
    if (from._has_bit(6)) {
      set_descorpsid(from.descorpsid());
    }
    if (from._has_bit(7)) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_time(from.time());
    }
    if (from._has_bit(9)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(10)) {
      set_corpsname(from.corpsname());
    }
    if (from._has_bit(11)) {
      set_rootername(from.rootername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBattle::CopyFrom(const PBCorpsBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBattle::Swap(PBCorpsBattle* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(npcstatus_, other->npcstatus_);
    std::swap(warstatus_, other->warstatus_);
    std::swap(descorpsname_, other->descorpsname_);
    std::swap(type_, other->type_);
    std::swap(bidmoney_, other->bidmoney_);
    std::swap(descorpsid_, other->descorpsid_);
    std::swap(mapid_, other->mapid_);
    std::swap(time_, other->time_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(rootername_, other->rootername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsBattle::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsBattle::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsBattle::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBattle_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsBoss::kBossIdFieldNumber;
const int PBCorpsBoss::kCanIntoTimesFieldNumber;
#endif  // !_MSC_VER

PBCorpsBoss::PBCorpsBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsBoss::InitAsDefaultInstance() {}

PBCorpsBoss::PBCorpsBoss(const PBCorpsBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsBoss::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  canintotimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsBoss::~PBCorpsBoss() {
  SharedDtor();
}

void PBCorpsBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBoss_descriptor_;
}

const PBCorpsBoss& PBCorpsBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsBoss* PBCorpsBoss::default_instance_ = NULL;

PBCorpsBoss* PBCorpsBoss::New() const {
  return new PBCorpsBoss;
}

void PBCorpsBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0u;
    canintotimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bossid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CanIntoTimes;
        break;
      }
      
      // optional uint32 CanIntoTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanIntoTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canintotimes_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsBoss::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BossId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->bossid(), output);
  }
  
  // optional uint32 CanIntoTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->canintotimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BossId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->bossid(), target);
  }
  
  // optional uint32 CanIntoTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->canintotimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bossid());
    }
    
    // optional uint32 CanIntoTimes = 2;
    if (has_canintotimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canintotimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsBoss::MergeFrom(const PBCorpsBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bossid(from.bossid());
    }
    if (from._has_bit(1)) {
      set_canintotimes(from.canintotimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBoss::CopyFrom(const PBCorpsBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBoss::Swap(PBCorpsBoss* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(canintotimes_, other->canintotimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsBoss::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsBoss::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsBoss::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBoss_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsBattleList::kBattleListFieldNumber;
#endif  // !_MSC_VER

PBCorpsBattleList::PBCorpsBattleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsBattleList::InitAsDefaultInstance() {}

PBCorpsBattleList::PBCorpsBattleList(const PBCorpsBattleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsBattleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsBattleList::~PBCorpsBattleList() {
  SharedDtor();
}

void PBCorpsBattleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsBattleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBattleList_descriptor_;
}

const PBCorpsBattleList& PBCorpsBattleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsBattleList* PBCorpsBattleList::default_instance_ = NULL;

PBCorpsBattleList* PBCorpsBattleList::New() const {
  return new PBCorpsBattleList;
}

void PBCorpsBattleList::Clear() {
  battlelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsBattleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBCorpsBattle BattleList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BattleList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_battlelist()));
        if (input->ExpectTag(10)) goto parse_BattleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsBattleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsBattleList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBCorpsBattle BattleList = 1;
  for (int i = 0; i < this->battlelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->battlelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsBattleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCorpsBattle BattleList = 1;
  for (int i = 0; i < this->battlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->battlelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsBattleList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCorpsBattle BattleList = 1;
  total_size += 1 * this->battlelist_size();
  for (int i = 0; i < this->battlelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->battlelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsBattleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsBattleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsBattleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsBattleList::MergeFrom(const PBCorpsBattleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlelist_.MergeFrom(from.battlelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsBattleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBattleList::CopyFrom(const PBCorpsBattleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBattleList::Swap(PBCorpsBattleList* other) {
  if (other != this) {
    battlelist_.Swap(&other->battlelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsBattleList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsBattleList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsBattleList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBattleList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsMember::kFamilyMemberListFieldNumber;
const int PBCorpsMember::kFamilyPropertyFieldNumber;
#endif  // !_MSC_VER

PBCorpsMember::PBCorpsMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsMember::InitAsDefaultInstance() {  familymemberlist_ = const_cast< ::PBFamilyMemberList*>(&::PBFamilyMemberList::default_instance());
  familyproperty_ = const_cast< ::FamilyData*>(&::FamilyData::default_instance());
}

PBCorpsMember::PBCorpsMember(const PBCorpsMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsMember::SharedCtor() {
  _cached_size_ = 0;
  familymemberlist_ = NULL;
  familyproperty_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsMember::~PBCorpsMember() {
  SharedDtor();
}

void PBCorpsMember::SharedDtor() {
  if (this != default_instance_) {
    delete familymemberlist_;
    delete familyproperty_;
  }
}

const ::google::protobuf::Descriptor* PBCorpsMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsMember_descriptor_;
}

const PBCorpsMember& PBCorpsMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsMember* PBCorpsMember::default_instance_ = NULL;

PBCorpsMember* PBCorpsMember::New() const {
  return new PBCorpsMember;
}

void PBCorpsMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (familymemberlist_ != NULL) familymemberlist_->::PBFamilyMemberList::Clear();
    }
    if (_has_bit(1)) {
      if (familyproperty_ != NULL) familyproperty_->::FamilyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBFamilyMemberList FamilyMemberList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_familymemberlist()));
        if (input->ExpectTag(18)) goto parse_FamilyProperty;
        break;
      }
      
      // optional .FamilyData FamilyProperty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyProperty:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_familyproperty()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsMember::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBFamilyMemberList FamilyMemberList = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->familymemberlist(), output);
  }
  
  // optional .FamilyData FamilyProperty = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->familyproperty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFamilyMemberList FamilyMemberList = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->familymemberlist(), target);
  }
  
  // optional .FamilyData FamilyProperty = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->familyproperty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFamilyMemberList FamilyMemberList = 1;
    if (has_familymemberlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->familymemberlist());
    }
    
    // optional .FamilyData FamilyProperty = 2;
    if (has_familyproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->familyproperty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsMember::MergeFrom(const PBCorpsMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_familymemberlist()->::PBFamilyMemberList::MergeFrom(from.familymemberlist());
    }
    if (from._has_bit(1)) {
      mutable_familyproperty()->::FamilyData::MergeFrom(from.familyproperty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsMember::CopyFrom(const PBCorpsMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsMember::Swap(PBCorpsMember* other) {
  if (other != this) {
    std::swap(familymemberlist_, other->familymemberlist_);
    std::swap(familyproperty_, other->familyproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsMember::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsMember::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsMember::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsMember_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsMemberList::kCorpsMemberListFieldNumber;
#endif  // !_MSC_VER

PBCorpsMemberList::PBCorpsMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsMemberList::InitAsDefaultInstance() {}

PBCorpsMemberList::PBCorpsMemberList(const PBCorpsMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsMemberList::~PBCorpsMemberList() {
  SharedDtor();
}

void PBCorpsMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsMemberList_descriptor_;
}

const PBCorpsMemberList& PBCorpsMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsMemberList* PBCorpsMemberList::default_instance_ = NULL;

PBCorpsMemberList* PBCorpsMemberList::New() const {
  return new PBCorpsMemberList;
}

void PBCorpsMemberList::Clear() {
  corpsmemberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBCorpsMember CorpsMemberList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsMemberList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpsmemberlist()));
        if (input->ExpectTag(10)) goto parse_CorpsMemberList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsMemberList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBCorpsMember CorpsMemberList = 1;
  for (int i = 0; i < this->corpsmemberlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corpsmemberlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCorpsMember CorpsMemberList = 1;
  for (int i = 0; i < this->corpsmemberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corpsmemberlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsMemberList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCorpsMember CorpsMemberList = 1;
  total_size += 1 * this->corpsmemberlist_size();
  for (int i = 0; i < this->corpsmemberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpsmemberlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsMemberList::MergeFrom(const PBCorpsMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsmemberlist_.MergeFrom(from.corpsmemberlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsMemberList::CopyFrom(const PBCorpsMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsMemberList::Swap(PBCorpsMemberList* other) {
  if (other != this) {
    corpsmemberlist_.Swap(&other->corpsmemberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsMemberList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsMemberList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsMemberList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsMemberList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsApplyList::kApplyListFieldNumber;
#endif  // !_MSC_VER

PBCorpsApplyList::PBCorpsApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsApplyList::InitAsDefaultInstance() {}

PBCorpsApplyList::PBCorpsApplyList(const PBCorpsApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsApplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsApplyList::~PBCorpsApplyList() {
  SharedDtor();
}

void PBCorpsApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsApplyList_descriptor_;
}

const PBCorpsApplyList& PBCorpsApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsApplyList* PBCorpsApplyList::default_instance_ = NULL;

PBCorpsApplyList* PBCorpsApplyList::New() const {
  return new PBCorpsApplyList;
}

void PBCorpsApplyList::Clear() {
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .FamilyData ApplyList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ApplyList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_applylist()));
        if (input->ExpectTag(10)) goto parse_ApplyList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsApplyList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .FamilyData ApplyList = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->applylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FamilyData ApplyList = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->applylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsApplyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .FamilyData ApplyList = 1;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->applylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsApplyList::MergeFrom(const PBCorpsApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  applylist_.MergeFrom(from.applylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsApplyList::CopyFrom(const PBCorpsApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsApplyList::Swap(PBCorpsApplyList* other) {
  if (other != this) {
    applylist_.Swap(&other->applylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsApplyList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsApplyList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsApplyList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsApplyList_reflection_;
}

// ===================================================================

const ::std::string PBCorpsBasicInfo::_default_corpsrootername_;
const ::std::string PBCorpsBasicInfo::_default_corpsname_;
#ifndef _MSC_VER
const int PBCorpsBasicInfo::kCorpsMemberNumFieldNumber;
const int PBCorpsBasicInfo::kCorpsFamilyNumFieldNumber;
const int PBCorpsBasicInfo::kCorpsIDFieldNumber;
const int PBCorpsBasicInfo::kCorpsMoneyFieldNumber;
const int PBCorpsBasicInfo::kCorpsRooterNameFieldNumber;
const int PBCorpsBasicInfo::kCorpsRooterIDFieldNumber;
const int PBCorpsBasicInfo::kCorpsLevelFieldNumber;
const int PBCorpsBasicInfo::kCorpsNameFieldNumber;
const int PBCorpsBasicInfo::kCorpsGloryFieldNumber;
const int PBCorpsBasicInfo::kCorpsDevelopFieldNumber;
const int PBCorpsBasicInfo::kMaxFamilyNumFieldNumber;
const int PBCorpsBasicInfo::kCorpsStarLevelFieldNumber;
const int PBCorpsBasicInfo::kMainCityMapFieldNumber;
#endif  // !_MSC_VER

PBCorpsBasicInfo::PBCorpsBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsBasicInfo::InitAsDefaultInstance() {}

PBCorpsBasicInfo::PBCorpsBasicInfo(const PBCorpsBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  corpsmembernum_ = 0u;
  corpsfamilynum_ = 0u;
  corpsid_ = 0u;
  corpsmoney_ = 0u;
  corpsrootername_ = const_cast< ::std::string*>(&_default_corpsrootername_);
  corpsrooterid_ = 0u;
  corpslevel_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  corpsglory_ = 0u;
  corpsdevelop_ = 0u;
  maxfamilynum_ = 0u;
  corpsstarlevel_ = 0u;
  maincitymap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsBasicInfo::~PBCorpsBasicInfo() {
  SharedDtor();
}

void PBCorpsBasicInfo::SharedDtor() {
  if (corpsrootername_ != &_default_corpsrootername_) {
    delete corpsrootername_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBasicInfo_descriptor_;
}

const PBCorpsBasicInfo& PBCorpsBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsBasicInfo* PBCorpsBasicInfo::default_instance_ = NULL;

PBCorpsBasicInfo* PBCorpsBasicInfo::New() const {
  return new PBCorpsBasicInfo;
}

void PBCorpsBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsmembernum_ = 0u;
    corpsfamilynum_ = 0u;
    corpsid_ = 0u;
    corpsmoney_ = 0u;
    if (_has_bit(4)) {
      if (corpsrootername_ != &_default_corpsrootername_) {
        corpsrootername_->clear();
      }
    }
    corpsrooterid_ = 0u;
    corpslevel_ = 0u;
    if (_has_bit(7)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corpsglory_ = 0u;
    corpsdevelop_ = 0u;
    maxfamilynum_ = 0u;
    corpsstarlevel_ = 0u;
    maincitymap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CorpsMemberNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmembernum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CorpsFamilyNum;
        break;
      }
      
      // optional uint32 CorpsFamilyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsFamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsfamilynum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CorpsID;
        break;
      }
      
      // optional uint32 CorpsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsMoney;
        break;
      }
      
      // optional uint32 CorpsMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsmoney_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_CorpsRooterName;
        break;
      }
      
      // optional string CorpsRooterName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsRooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsrootername()));
        if (input->ExpectTag(48)) goto parse_CorpsRooterID;
        break;
      }
      
      // optional uint32 CorpsRooterID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsRooterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsrooterid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CorpsLevel;
        break;
      }
      
      // optional uint32 CorpsLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpslevel_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectTag(72)) goto parse_CorpsGlory;
        break;
      }
      
      // optional uint32 CorpsGlory = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsglory_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CorpsDevelop;
        break;
      }
      
      // optional uint32 CorpsDevelop = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsDevelop:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsdevelop_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_MaxFamilyNum;
        break;
      }
      
      // optional uint32 MaxFamilyNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxFamilyNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxfamilynum_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_CorpsStarLevel;
        break;
      }
      
      // optional uint32 CorpsStarLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsstarlevel_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MainCityMap;
        break;
      }
      
      // optional uint32 MainCityMap = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MainCityMap:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maincitymap_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsBasicInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CorpsMemberNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->corpsmembernum(), output);
  }
  
  // optional uint32 CorpsFamilyNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->corpsfamilynum(), output);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->corpsid(), output);
  }
  
  // optional uint32 CorpsMoney = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpsmoney(), output);
  }
  
  // optional string CorpsRooterName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->corpsrootername(), output);
  }
  
  // optional uint32 CorpsRooterID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->corpsrooterid(), output);
  }
  
  // optional uint32 CorpsLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->corpslevel(), output);
  }
  
  // optional string CorpsName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->corpsname(), output);
  }
  
  // optional uint32 CorpsGlory = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->corpsglory(), output);
  }
  
  // optional uint32 CorpsDevelop = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->corpsdevelop(), output);
  }
  
  // optional uint32 MaxFamilyNum = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->maxfamilynum(), output);
  }
  
  // optional uint32 CorpsStarLevel = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->corpsstarlevel(), output);
  }
  
  // optional uint32 MainCityMap = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->maincitymap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CorpsMemberNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->corpsmembernum(), target);
  }
  
  // optional uint32 CorpsFamilyNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->corpsfamilynum(), target);
  }
  
  // optional uint32 CorpsID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->corpsid(), target);
  }
  
  // optional uint32 CorpsMoney = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpsmoney(), target);
  }
  
  // optional string CorpsRooterName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->corpsrootername(), target);
  }
  
  // optional uint32 CorpsRooterID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->corpsrooterid(), target);
  }
  
  // optional uint32 CorpsLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->corpslevel(), target);
  }
  
  // optional string CorpsName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->corpsname(), target);
  }
  
  // optional uint32 CorpsGlory = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->corpsglory(), target);
  }
  
  // optional uint32 CorpsDevelop = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->corpsdevelop(), target);
  }
  
  // optional uint32 MaxFamilyNum = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->maxfamilynum(), target);
  }
  
  // optional uint32 CorpsStarLevel = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->corpsstarlevel(), target);
  }
  
  // optional uint32 MainCityMap = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->maincitymap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsBasicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CorpsMemberNum = 1;
    if (has_corpsmembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmembernum());
    }
    
    // optional uint32 CorpsFamilyNum = 2;
    if (has_corpsfamilynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsfamilynum());
    }
    
    // optional uint32 CorpsID = 3;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsid());
    }
    
    // optional uint32 CorpsMoney = 4;
    if (has_corpsmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsmoney());
    }
    
    // optional string CorpsRooterName = 5;
    if (has_corpsrootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsrootername());
    }
    
    // optional uint32 CorpsRooterID = 6;
    if (has_corpsrooterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsrooterid());
    }
    
    // optional uint32 CorpsLevel = 7;
    if (has_corpslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpslevel());
    }
    
    // optional string CorpsName = 8;
    if (has_corpsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CorpsGlory = 9;
    if (has_corpsglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsglory());
    }
    
    // optional uint32 CorpsDevelop = 10;
    if (has_corpsdevelop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsdevelop());
    }
    
    // optional uint32 MaxFamilyNum = 11;
    if (has_maxfamilynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxfamilynum());
    }
    
    // optional uint32 CorpsStarLevel = 12;
    if (has_corpsstarlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsstarlevel());
    }
    
    // optional uint32 MainCityMap = 13;
    if (has_maincitymap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maincitymap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsBasicInfo::MergeFrom(const PBCorpsBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_corpsmembernum(from.corpsmembernum());
    }
    if (from._has_bit(1)) {
      set_corpsfamilynum(from.corpsfamilynum());
    }
    if (from._has_bit(2)) {
      set_corpsid(from.corpsid());
    }
    if (from._has_bit(3)) {
      set_corpsmoney(from.corpsmoney());
    }
    if (from._has_bit(4)) {
      set_corpsrootername(from.corpsrootername());
    }
    if (from._has_bit(5)) {
      set_corpsrooterid(from.corpsrooterid());
    }
    if (from._has_bit(6)) {
      set_corpslevel(from.corpslevel());
    }
    if (from._has_bit(7)) {
      set_corpsname(from.corpsname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_corpsglory(from.corpsglory());
    }
    if (from._has_bit(9)) {
      set_corpsdevelop(from.corpsdevelop());
    }
    if (from._has_bit(10)) {
      set_maxfamilynum(from.maxfamilynum());
    }
    if (from._has_bit(11)) {
      set_corpsstarlevel(from.corpsstarlevel());
    }
    if (from._has_bit(12)) {
      set_maincitymap(from.maincitymap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBasicInfo::CopyFrom(const PBCorpsBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsBasicInfo::Swap(PBCorpsBasicInfo* other) {
  if (other != this) {
    std::swap(corpsmembernum_, other->corpsmembernum_);
    std::swap(corpsfamilynum_, other->corpsfamilynum_);
    std::swap(corpsid_, other->corpsid_);
    std::swap(corpsmoney_, other->corpsmoney_);
    std::swap(corpsrootername_, other->corpsrootername_);
    std::swap(corpsrooterid_, other->corpsrooterid_);
    std::swap(corpslevel_, other->corpslevel_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(corpsglory_, other->corpsglory_);
    std::swap(corpsdevelop_, other->corpsdevelop_);
    std::swap(maxfamilynum_, other->maxfamilynum_);
    std::swap(corpsstarlevel_, other->corpsstarlevel_);
    std::swap(maincitymap_, other->maincitymap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsBasicInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsBasicInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsBasicInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsBasicInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CorpsInfoList::kCorpsListFieldNumber;
#endif  // !_MSC_VER

CorpsInfoList::CorpsInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorpsInfoList::InitAsDefaultInstance() {}

CorpsInfoList::CorpsInfoList(const CorpsInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorpsInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpsInfoList::~CorpsInfoList() {
  SharedDtor();
}

void CorpsInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CorpsInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpsInfoList_descriptor_;
}

const CorpsInfoList& CorpsInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

CorpsInfoList* CorpsInfoList::default_instance_ = NULL;

CorpsInfoList* CorpsInfoList::New() const {
  return new CorpsInfoList;
}

void CorpsInfoList::Clear() {
  corpslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorpsInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBCorpsBasicInfo CorpsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpslist()));
        if (input->ExpectTag(10)) goto parse_CorpsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpsInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CorpsInfoList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBCorpsBasicInfo CorpsList = 1;
  for (int i = 0; i < this->corpslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->corpslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorpsInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCorpsBasicInfo CorpsList = 1;
  for (int i = 0; i < this->corpslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->corpslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorpsInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCorpsBasicInfo CorpsList = 1;
  total_size += 1 * this->corpslist_size();
  for (int i = 0; i < this->corpslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CorpsInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorpsInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorpsInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorpsInfoList::MergeFrom(const CorpsInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpslist_.MergeFrom(from.corpslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorpsInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsInfoList::CopyFrom(const CorpsInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpsInfoList::Swap(CorpsInfoList* other) {
  if (other != this) {
    corpslist_.Swap(&other->corpslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CorpsInfoList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CorpsInfoList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CorpsInfoList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CorpsInfoList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsFamilyInfo::kContributeFieldNumber;
const int PBCorpsFamilyInfo::kFamilyIDFieldNumber;
#endif  // !_MSC_VER

PBCorpsFamilyInfo::PBCorpsFamilyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsFamilyInfo::InitAsDefaultInstance() {}

PBCorpsFamilyInfo::PBCorpsFamilyInfo(const PBCorpsFamilyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsFamilyInfo::SharedCtor() {
  _cached_size_ = 0;
  contribute_ = 0u;
  familyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsFamilyInfo::~PBCorpsFamilyInfo() {
  SharedDtor();
}

void PBCorpsFamilyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsFamilyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsFamilyInfo_descriptor_;
}

const PBCorpsFamilyInfo& PBCorpsFamilyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsFamilyInfo* PBCorpsFamilyInfo::default_instance_ = NULL;

PBCorpsFamilyInfo* PBCorpsFamilyInfo::New() const {
  return new PBCorpsFamilyInfo;
}

void PBCorpsFamilyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contribute_ = 0u;
    familyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsFamilyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Contribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsFamilyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsFamilyInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Contribute = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->contribute(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsFamilyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Contribute = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->contribute(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsFamilyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Contribute = 1;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsFamilyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsFamilyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsFamilyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsFamilyInfo::MergeFrom(const PBCorpsFamilyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsFamilyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsFamilyInfo::CopyFrom(const PBCorpsFamilyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsFamilyInfo::Swap(PBCorpsFamilyInfo* other) {
  if (other != this) {
    std::swap(contribute_, other->contribute_);
    std::swap(familyid_, other->familyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsFamilyInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsFamilyInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsFamilyInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsFamilyInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsFamilyInfoList::kFamilyInfoFieldNumber;
#endif  // !_MSC_VER

PBCorpsFamilyInfoList::PBCorpsFamilyInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsFamilyInfoList::InitAsDefaultInstance() {}

PBCorpsFamilyInfoList::PBCorpsFamilyInfoList(const PBCorpsFamilyInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsFamilyInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsFamilyInfoList::~PBCorpsFamilyInfoList() {
  SharedDtor();
}

void PBCorpsFamilyInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsFamilyInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsFamilyInfoList_descriptor_;
}

const PBCorpsFamilyInfoList& PBCorpsFamilyInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsFamilyInfoList* PBCorpsFamilyInfoList::default_instance_ = NULL;

PBCorpsFamilyInfoList* PBCorpsFamilyInfoList::New() const {
  return new PBCorpsFamilyInfoList;
}

void PBCorpsFamilyInfoList::Clear() {
  familyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsFamilyInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBCorpsFamilyInfo FamilyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_familyinfo()));
        if (input->ExpectTag(10)) goto parse_FamilyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsFamilyInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsFamilyInfoList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBCorpsFamilyInfo FamilyInfo = 1;
  for (int i = 0; i < this->familyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->familyinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsFamilyInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCorpsFamilyInfo FamilyInfo = 1;
  for (int i = 0; i < this->familyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->familyinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsFamilyInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCorpsFamilyInfo FamilyInfo = 1;
  total_size += 1 * this->familyinfo_size();
  for (int i = 0; i < this->familyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->familyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsFamilyInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsFamilyInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsFamilyInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsFamilyInfoList::MergeFrom(const PBCorpsFamilyInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  familyinfo_.MergeFrom(from.familyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsFamilyInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsFamilyInfoList::CopyFrom(const PBCorpsFamilyInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsFamilyInfoList::Swap(PBCorpsFamilyInfoList* other) {
  if (other != this) {
    familyinfo_.Swap(&other->familyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsFamilyInfoList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsFamilyInfoList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsFamilyInfoList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsFamilyInfoList_reflection_;
}

// ===================================================================

const ::std::string PBUnionBasicInfo::_default_unionname_;
const ::std::string PBUnionBasicInfo::_default_corename_;
const ::std::string PBUnionBasicInfo::_default_rootername_;
#ifndef _MSC_VER
const int PBUnionBasicInfo::kUnionIDFieldNumber;
const int PBUnionBasicInfo::kUnionNameFieldNumber;
const int PBUnionBasicInfo::kCoreIDFieldNumber;
const int PBUnionBasicInfo::kCoreNameFieldNumber;
const int PBUnionBasicInfo::kRooterNameFieldNumber;
const int PBUnionBasicInfo::kRooterIDFieldNumber;
const int PBUnionBasicInfo::kCityIDFieldNumber;
const int PBUnionBasicInfo::kCorpsNumFieldNumber;
const int PBUnionBasicInfo::kMemberNumFieldNumber;
const int PBUnionBasicInfo::kMapIDFieldNumber;
const int PBUnionBasicInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBUnionBasicInfo::PBUnionBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUnionBasicInfo::InitAsDefaultInstance() {}

PBUnionBasicInfo::PBUnionBasicInfo(const PBUnionBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUnionBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  unionid_ = 0u;
  unionname_ = const_cast< ::std::string*>(&_default_unionname_);
  coreid_ = 0u;
  corename_ = const_cast< ::std::string*>(&_default_corename_);
  rootername_ = const_cast< ::std::string*>(&_default_rootername_);
  rooterid_ = 0u;
  cityid_ = 0u;
  corpsnum_ = 0u;
  membernum_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUnionBasicInfo::~PBUnionBasicInfo() {
  SharedDtor();
}

void PBUnionBasicInfo::SharedDtor() {
  if (unionname_ != &_default_unionname_) {
    delete unionname_;
  }
  if (corename_ != &_default_corename_) {
    delete corename_;
  }
  if (rootername_ != &_default_rootername_) {
    delete rootername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBUnionBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUnionBasicInfo_descriptor_;
}

const PBUnionBasicInfo& PBUnionBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBUnionBasicInfo* PBUnionBasicInfo::default_instance_ = NULL;

PBUnionBasicInfo* PBUnionBasicInfo::New() const {
  return new PBUnionBasicInfo;
}

void PBUnionBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unionid_ = 0u;
    if (_has_bit(1)) {
      if (unionname_ != &_default_unionname_) {
        unionname_->clear();
      }
    }
    coreid_ = 0u;
    if (_has_bit(3)) {
      if (corename_ != &_default_corename_) {
        corename_->clear();
      }
    }
    if (_has_bit(4)) {
      if (rootername_ != &_default_rootername_) {
        rootername_->clear();
      }
    }
    rooterid_ = 0u;
    cityid_ = 0u;
    corpsnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    membernum_ = 0u;
    money_ = 0u;
  }
  mapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUnionBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 UnionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &unionid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_UnionName;
        break;
      }
      
      // optional string UnionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UnionName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_unionname()));
        if (input->ExpectTag(24)) goto parse_CoreID;
        break;
      }
      
      // optional uint32 CoreID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CoreID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &coreid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_CoreName;
        break;
      }
      
      // optional string CoreName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CoreName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corename()));
        if (input->ExpectTag(42)) goto parse_RooterName;
        break;
      }
      
      // optional string RooterName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RooterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rootername()));
        if (input->ExpectTag(48)) goto parse_RooterID;
        break;
      }
      
      // optional uint32 RooterID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RooterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rooterid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CityID;
        break;
      }
      
      // optional uint32 CityID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cityid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CorpsNum;
        break;
      }
      
      // optional uint32 CorpsNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpsnum_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_MemberNum;
        break;
      }
      
      // optional uint32 MemberNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &membernum_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MapID;
        break;
      }
      
      // repeated uint32 MapID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_mapid(value);
        if (input->ExpectTag(80)) goto parse_MapID;
        if (input->ExpectTag(88)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUnionBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBUnionBasicInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 UnionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->unionid(), output);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->unionname(), output);
  }
  
  // optional uint32 CoreID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->coreid(), output);
  }
  
  // optional string CoreName = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->corename(), output);
  }
  
  // optional string RooterName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->rootername(), output);
  }
  
  // optional uint32 RooterID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->rooterid(), output);
  }
  
  // optional uint32 CityID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->cityid(), output);
  }
  
  // optional uint32 CorpsNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->corpsnum(), output);
  }
  
  // optional uint32 MemberNum = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->membernum(), output);
  }
  
  // repeated uint32 MapID = 10;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->mapid(i), output);
  }
  
  // optional uint32 Money = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUnionBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 UnionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->unionid(), target);
  }
  
  // optional string UnionName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->unionname(), target);
  }
  
  // optional uint32 CoreID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->coreid(), target);
  }
  
  // optional string CoreName = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->corename(), target);
  }
  
  // optional string RooterName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->rootername(), target);
  }
  
  // optional uint32 RooterID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->rooterid(), target);
  }
  
  // optional uint32 CityID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->cityid(), target);
  }
  
  // optional uint32 CorpsNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->corpsnum(), target);
  }
  
  // optional uint32 MemberNum = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->membernum(), target);
  }
  
  // repeated uint32 MapID = 10;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->mapid(i), target);
  }
  
  // optional uint32 Money = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUnionBasicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UnionID = 1;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->unionid());
    }
    
    // optional string UnionName = 2;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->unionname());
    }
    
    // optional uint32 CoreID = 3;
    if (has_coreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->coreid());
    }
    
    // optional string CoreName = 4;
    if (has_corename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corename());
    }
    
    // optional string RooterName = 5;
    if (has_rootername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rootername());
    }
    
    // optional uint32 RooterID = 6;
    if (has_rooterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rooterid());
    }
    
    // optional uint32 CityID = 7;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cityid());
    }
    
    // optional uint32 CorpsNum = 8;
    if (has_corpsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpsnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MemberNum = 9;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->membernum());
    }
    
    // optional uint32 Money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
  }
  // repeated uint32 MapID = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBUnionBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUnionBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUnionBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUnionBasicInfo::MergeFrom(const PBUnionBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_unionid(from.unionid());
    }
    if (from._has_bit(1)) {
      set_unionname(from.unionname());
    }
    if (from._has_bit(2)) {
      set_coreid(from.coreid());
    }
    if (from._has_bit(3)) {
      set_corename(from.corename());
    }
    if (from._has_bit(4)) {
      set_rootername(from.rootername());
    }
    if (from._has_bit(5)) {
      set_rooterid(from.rooterid());
    }
    if (from._has_bit(6)) {
      set_cityid(from.cityid());
    }
    if (from._has_bit(7)) {
      set_corpsnum(from.corpsnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_membernum(from.membernum());
    }
    if (from._has_bit(10)) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUnionBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUnionBasicInfo::CopyFrom(const PBUnionBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUnionBasicInfo::Swap(PBUnionBasicInfo* other) {
  if (other != this) {
    std::swap(unionid_, other->unionid_);
    std::swap(unionname_, other->unionname_);
    std::swap(coreid_, other->coreid_);
    std::swap(corename_, other->corename_);
    std::swap(rootername_, other->rootername_);
    std::swap(rooterid_, other->rooterid_);
    std::swap(cityid_, other->cityid_);
    std::swap(corpsnum_, other->corpsnum_);
    std::swap(membernum_, other->membernum_);
    mapid_.Swap(&other->mapid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBUnionBasicInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBUnionBasicInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBUnionBasicInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBUnionBasicInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTaskListInfo::kTaskIDFieldNumber;
const int PBTaskListInfo::kTaskStateFieldNumber;
const int PBTaskListInfo::kEntityIDFieldNumber;
#endif  // !_MSC_VER

PBTaskListInfo::PBTaskListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskListInfo::InitAsDefaultInstance() {}

PBTaskListInfo::PBTaskListInfo(const PBTaskListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskListInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstate_ = 0u;
  entityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskListInfo::~PBTaskListInfo() {
  SharedDtor();
}

void PBTaskListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTaskListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskListInfo_descriptor_;
}

const PBTaskListInfo& PBTaskListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBTaskListInfo* PBTaskListInfo::default_instance_ = NULL;

PBTaskListInfo* PBTaskListInfo::New() const {
  return new PBTaskListInfo;
}

void PBTaskListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstate_ = 0u;
    entityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_EntityID;
        break;
      }
      
      // optional uint32 EntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTaskListInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskstate(), output);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->entityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskstate(), target);
  }
  
  // optional uint32 EntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->entityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskState = 2;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
    // optional uint32 EntityID = 3;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTaskListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskListInfo::MergeFrom(const PBTaskListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstate(from.taskstate());
    }
    if (from._has_bit(2)) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskListInfo::CopyFrom(const PBTaskListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskListInfo::Swap(PBTaskListInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTaskListInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTaskListInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTaskListInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTaskListInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCorpsPublishInfo::kTodayTimesFieldNumber;
const int PBCorpsPublishInfo::kWeekTimesFieldNumber;
const int PBCorpsPublishInfo::kTaskListFieldNumber;
#endif  // !_MSC_VER

PBCorpsPublishInfo::PBCorpsPublishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsPublishInfo::InitAsDefaultInstance() {}

PBCorpsPublishInfo::PBCorpsPublishInfo(const PBCorpsPublishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsPublishInfo::SharedCtor() {
  _cached_size_ = 0;
  todaytimes_ = 0u;
  weektimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsPublishInfo::~PBCorpsPublishInfo() {
  SharedDtor();
}

void PBCorpsPublishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCorpsPublishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsPublishInfo_descriptor_;
}

const PBCorpsPublishInfo& PBCorpsPublishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_corpsinfo_5fpb_2ehxx();  return *default_instance_;
}

PBCorpsPublishInfo* PBCorpsPublishInfo::default_instance_ = NULL;

PBCorpsPublishInfo* PBCorpsPublishInfo::New() const {
  return new PBCorpsPublishInfo;
}

void PBCorpsPublishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaytimes_ = 0u;
    weektimes_ = 0u;
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsPublishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TodayTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaytimes_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeekTimes;
        break;
      }
      
      // optional uint32 WeekTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weektimes_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_TaskList;
        break;
      }
      
      // repeated .PBTaskListInfo TaskList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TaskList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasklist()));
        if (input->ExpectTag(26)) goto parse_TaskList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsPublishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCorpsPublishInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TodayTimes = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->todaytimes(), output);
  }
  
  // optional uint32 WeekTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weektimes(), output);
  }
  
  // repeated .PBTaskListInfo TaskList = 3;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->tasklist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsPublishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TodayTimes = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->todaytimes(), target);
  }
  
  // optional uint32 WeekTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weektimes(), target);
  }
  
  // repeated .PBTaskListInfo TaskList = 3;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->tasklist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsPublishInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TodayTimes = 1;
    if (has_todaytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaytimes());
    }
    
    // optional uint32 WeekTimes = 2;
    if (has_weektimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weektimes());
    }
    
  }
  // repeated .PBTaskListInfo TaskList = 3;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCorpsPublishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsPublishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsPublishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsPublishInfo::MergeFrom(const PBCorpsPublishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_todaytimes(from.todaytimes());
    }
    if (from._has_bit(1)) {
      set_weektimes(from.weektimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsPublishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsPublishInfo::CopyFrom(const PBCorpsPublishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsPublishInfo::Swap(PBCorpsPublishInfo* other) {
  if (other != this) {
    std::swap(todaytimes_, other->todaytimes_);
    std::swap(weektimes_, other->weektimes_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCorpsPublishInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCorpsPublishInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCorpsPublishInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsPublishInfo_reflection_;
}
