// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "coremessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRouter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageRouter_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageRouter_EMRouterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageRouter_EMRouterReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginErrorNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginErrorNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateErrorNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateErrorNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginServerRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageLoginServerRequest_EType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageWaitForLoginNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageWaitForLoginNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectGateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectGateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginGateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginGateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginGateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginGateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainCharRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainCharRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCharProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCharProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainCharNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainCharNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageObtainCharCompleteNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageObtainCharCompleteNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterGameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginSceneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginSceneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginSceneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginSceneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReturn2GateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReturn2GateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReturn2GateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReturn2GateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateCharRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateCharRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateCharResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateCharResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDeleteCharRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDeleteCharRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDeleteCharResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDeleteCharResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageReconnectSceneNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageReconnectSceneNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectSceneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectSceneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRedirectSceneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRedirectSceneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveGameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickoutNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickoutNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClientPingServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClientPingServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClientPingServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClientPingServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGateKickPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGateKickPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueuePlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueuePlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerCancelLoginQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerCancelLoginQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckRolePwdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckRolePwdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckRolePwdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckRolePwdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendClientInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendClientInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToServerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendAntiBotDataToServerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToClientNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSendAntiBotDataToClientNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageClientAntiBotStartRetNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageClientAntiBotStartRetNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisconnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisconnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserAuthNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserAuthNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserAuthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserAuthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUserAuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUserAuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelDeleteRoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCancelDeleteRoleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuestionRequireRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuestionRequireRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuestionRequireResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuestionRequireResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageQuestionRequireResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuestionAnswerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuestionAnswerRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageQuestionAnswerRequest_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageQuestionAnswerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQuestionAnswerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageQuestionAnswerResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageCertifyResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyQueryResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageCertifyQueryResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCertifyTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCertifyTokenResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageCertifyTokenResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleQueryResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageRoleQueryResponse_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleQueryNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleQueryNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageRoleQueryNotify_EStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageOnlineStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageOnlineStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteCampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteCampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteCampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteCampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeSingleCampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeSingleCampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeSingleCampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeSingleCampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCampSuccesNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCampSuccesNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCamp2GateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCamp2GateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCampConditionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCampConditionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeCampConditionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeCampConditionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMCoreMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_coremessage_5fpb_2ehxx() {
  protobuf_AddDesc_coremessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "coremessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageRouter_descriptor_ = file->message_type(0);
  static const int CMessageRouter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, routerreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, send2player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, sendback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, routertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, srcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, desname_),
  };
  CMessageRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRouter_descriptor_,
      CMessageRouter::default_instance_,
      CMessageRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRouter));
  CMessageRouter_MSGID_descriptor_ = CMessageRouter_descriptor_->enum_type(0);
  CMessageRouter_EMRouterType_descriptor_ = CMessageRouter_descriptor_->enum_type(1);
  CMessageRouter_EMRouterReason_descriptor_ = CMessageRouter_descriptor_->enum_type(2);
  CMessageRedirectErr_descriptor_ = file->message_type(1);
  static const int CMessageRedirectErr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectErr, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectErr, charid_),
  };
  CMessageRedirectErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectErr_descriptor_,
      CMessageRedirectErr::default_instance_,
      CMessageRedirectErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectErr));
  CMessageLoginErrorNotice_descriptor_ = file->message_type(2);
  static const int CMessageLoginErrorNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginErrorNotice, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginErrorNotice, errorcode_),
  };
  CMessageLoginErrorNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginErrorNotice_descriptor_,
      CMessageLoginErrorNotice::default_instance_,
      CMessageLoginErrorNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginErrorNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginErrorNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginErrorNotice));
  CMessageGateErrorNotice_descriptor_ = file->message_type(3);
  static const int CMessageGateErrorNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateErrorNotice, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateErrorNotice, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateErrorNotice, errorcode_),
  };
  CMessageGateErrorNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateErrorNotice_descriptor_,
      CMessageGateErrorNotice::default_instance_,
      CMessageGateErrorNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateErrorNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateErrorNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateErrorNotice));
  CMessageLoginServerRequest_descriptor_ = file->message_type(4);
  static const int CMessageLoginServerRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, md5code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, taskversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, userpsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, matrixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, matrixcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, matrixcoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, cpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, diskid_),
  };
  CMessageLoginServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginServerRequest_descriptor_,
      CMessageLoginServerRequest::default_instance_,
      CMessageLoginServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginServerRequest));
  CMessageLoginServerRequest_EType_descriptor_ = CMessageLoginServerRequest_descriptor_->enum_type(0);
  CMessageWaitForLoginNotice_descriptor_ = file->message_type(5);
  static const int CMessageWaitForLoginNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWaitForLoginNotice, queuenumber_),
  };
  CMessageWaitForLoginNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageWaitForLoginNotice_descriptor_,
      CMessageWaitForLoginNotice::default_instance_,
      CMessageWaitForLoginNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWaitForLoginNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageWaitForLoginNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageWaitForLoginNotice));
  CMessageRedirectGateNotice_descriptor_ = file->message_type(6);
  static const int CMessageRedirectGateNotice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, otherclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, cleancskey_),
  };
  CMessageRedirectGateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectGateNotice_descriptor_,
      CMessageRedirectGateNotice::default_instance_,
      CMessageRedirectGateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectGateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectGateNotice));
  CMessageLoginGateRequest_descriptor_ = file->message_type(7);
  static const int CMessageLoginGateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateRequest, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateRequest, templatever_),
  };
  CMessageLoginGateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginGateRequest_descriptor_,
      CMessageLoginGateRequest::default_instance_,
      CMessageLoginGateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginGateRequest));
  CMessageLoginGateResponse_descriptor_ = file->message_type(8);
  static const int CMessageLoginGateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateResponse, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateResponse, gatewayid_),
  };
  CMessageLoginGateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginGateResponse_descriptor_,
      CMessageLoginGateResponse::default_instance_,
      CMessageLoginGateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginGateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginGateResponse));
  CMessageObtainCharRequest_descriptor_ = file->message_type(9);
  static const int CMessageObtainCharRequest_offsets_[1] = {
  };
  CMessageObtainCharRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainCharRequest_descriptor_,
      CMessageObtainCharRequest::default_instance_,
      CMessageObtainCharRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainCharRequest));
  PBCharProfile_descriptor_ = file->message_type(10);
  static const int PBCharProfile_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, haircolour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, hairtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, facetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, nationality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, roledeletestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, deletestatuslefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, passwordused_),
  };
  PBCharProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCharProfile_descriptor_,
      PBCharProfile::default_instance_,
      PBCharProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCharProfile));
  CMessageObtainCharNotice_descriptor_ = file->message_type(11);
  static const int CMessageObtainCharNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharNotice, charprofile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharNotice, lastloginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharNotice, loginip_),
  };
  CMessageObtainCharNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainCharNotice_descriptor_,
      CMessageObtainCharNotice::default_instance_,
      CMessageObtainCharNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainCharNotice));
  CMessageObtainCharCompleteNotice_descriptor_ = file->message_type(12);
  static const int CMessageObtainCharCompleteNotice_offsets_[1] = {
  };
  CMessageObtainCharCompleteNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageObtainCharCompleteNotice_descriptor_,
      CMessageObtainCharCompleteNotice::default_instance_,
      CMessageObtainCharCompleteNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharCompleteNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageObtainCharCompleteNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageObtainCharCompleteNotice));
  CMessageEnterGameRequest_descriptor_ = file->message_type(13);
  static const int CMessageEnterGameRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, mac_),
  };
  CMessageEnterGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterGameRequest_descriptor_,
      CMessageEnterGameRequest::default_instance_,
      CMessageEnterGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterGameRequest));
  CMessageEnterGameResponse_descriptor_ = file->message_type(14);
  static const int CMessageEnterGameResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameResponse, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameResponse, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameResponse, cleardialog_),
  };
  CMessageEnterGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageEnterGameResponse_descriptor_,
      CMessageEnterGameResponse::default_instance_,
      CMessageEnterGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageEnterGameResponse));
  CMessageLoginSceneRequest_descriptor_ = file->message_type(15);
  static const int CMessageLoginSceneRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneRequest, logintoken_),
  };
  CMessageLoginSceneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginSceneRequest_descriptor_,
      CMessageLoginSceneRequest::default_instance_,
      CMessageLoginSceneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginSceneRequest));
  CMessageLoginSceneResponse_descriptor_ = file->message_type(16);
  static const int CMessageLoginSceneResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneResponse, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneResponse, csdialogid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneResponse, servertime_),
  };
  CMessageLoginSceneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginSceneResponse_descriptor_,
      CMessageLoginSceneResponse::default_instance_,
      CMessageLoginSceneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginSceneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginSceneResponse));
  CMessageReturn2GateRequest_descriptor_ = file->message_type(17);
  static const int CMessageReturn2GateRequest_offsets_[1] = {
  };
  CMessageReturn2GateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReturn2GateRequest_descriptor_,
      CMessageReturn2GateRequest::default_instance_,
      CMessageReturn2GateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReturn2GateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReturn2GateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReturn2GateRequest));
  CMessageReturn2GateResponse_descriptor_ = file->message_type(18);
  static const int CMessageReturn2GateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReturn2GateResponse, returntype_),
  };
  CMessageReturn2GateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReturn2GateResponse_descriptor_,
      CMessageReturn2GateResponse::default_instance_,
      CMessageReturn2GateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReturn2GateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReturn2GateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReturn2GateResponse));
  CMessageCreateCharRequest_descriptor_ = file->message_type(19);
  static const int CMessageCreateCharRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharRequest, profile_),
  };
  CMessageCreateCharRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateCharRequest_descriptor_,
      CMessageCreateCharRequest::default_instance_,
      CMessageCreateCharRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateCharRequest));
  CMessageCreateCharResponse_descriptor_ = file->message_type(20);
  static const int CMessageCreateCharResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharResponse, charid_),
  };
  CMessageCreateCharResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateCharResponse_descriptor_,
      CMessageCreateCharResponse::default_instance_,
      CMessageCreateCharResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateCharResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateCharResponse));
  CMessageDeleteCharRequest_descriptor_ = file->message_type(21);
  static const int CMessageDeleteCharRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharRequest, passwdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharRequest, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharRequest, charid_),
  };
  CMessageDeleteCharRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDeleteCharRequest_descriptor_,
      CMessageDeleteCharRequest::default_instance_,
      CMessageDeleteCharRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDeleteCharRequest));
  CMessageDeleteCharResponse_descriptor_ = file->message_type(22);
  static const int CMessageDeleteCharResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, deletestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, deletestatuslefttime_),
  };
  CMessageDeleteCharResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDeleteCharResponse_descriptor_,
      CMessageDeleteCharResponse::default_instance_,
      CMessageDeleteCharResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDeleteCharResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDeleteCharResponse));
  CMessageReconnectSceneNotice_descriptor_ = file->message_type(23);
  static const int CMessageReconnectSceneNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, countryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, mapname_),
  };
  CMessageReconnectSceneNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageReconnectSceneNotice_descriptor_,
      CMessageReconnectSceneNotice::default_instance_,
      CMessageReconnectSceneNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageReconnectSceneNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageReconnectSceneNotice));
  CMessageRedirectSceneRequest_descriptor_ = file->message_type(24);
  static const int CMessageRedirectSceneRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneRequest, logintoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneRequest, charid_),
  };
  CMessageRedirectSceneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectSceneRequest_descriptor_,
      CMessageRedirectSceneRequest::default_instance_,
      CMessageRedirectSceneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectSceneRequest));
  CMessageRedirectSceneResponse_descriptor_ = file->message_type(25);
  static const int CMessageRedirectSceneResponse_offsets_[1] = {
  };
  CMessageRedirectSceneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRedirectSceneResponse_descriptor_,
      CMessageRedirectSceneResponse::default_instance_,
      CMessageRedirectSceneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRedirectSceneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRedirectSceneResponse));
  CMessageLeaveGameRequest_descriptor_ = file->message_type(26);
  static const int CMessageLeaveGameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGameRequest, leavetype_),
  };
  CMessageLeaveGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveGameRequest_descriptor_,
      CMessageLeaveGameRequest::default_instance_,
      CMessageLeaveGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveGameRequest));
  CMessageLeaveGameResponse_descriptor_ = file->message_type(27);
  static const int CMessageLeaveGameResponse_offsets_[1] = {
  };
  CMessageLeaveGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveGameResponse_descriptor_,
      CMessageLeaveGameResponse::default_instance_,
      CMessageLeaveGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveGameResponse));
  CMessageKickoutNotice_descriptor_ = file->message_type(28);
  static const int CMessageKickoutNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutNotice, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutNotice, param_),
  };
  CMessageKickoutNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickoutNotice_descriptor_,
      CMessageKickoutNotice::default_instance_,
      CMessageKickoutNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickoutNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickoutNotice));
  CMessageClientPingServerRequest_descriptor_ = file->message_type(29);
  static const int CMessageClientPingServerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerRequest, latestpingvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerRequest, clientlocaltime_),
  };
  CMessageClientPingServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClientPingServerRequest_descriptor_,
      CMessageClientPingServerRequest::default_instance_,
      CMessageClientPingServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClientPingServerRequest));
  CMessageClientPingServerResponse_descriptor_ = file->message_type(30);
  static const int CMessageClientPingServerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerResponse, clientlocaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerResponse, servertime_),
  };
  CMessageClientPingServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClientPingServerResponse_descriptor_,
      CMessageClientPingServerResponse::default_instance_,
      CMessageClientPingServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientPingServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClientPingServerResponse));
  CMessageGateKickPlayerNotify_descriptor_ = file->message_type(31);
  static const int CMessageGateKickPlayerNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateKickPlayerNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateKickPlayerNotify, kickreason_),
  };
  CMessageGateKickPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGateKickPlayerNotify_descriptor_,
      CMessageGateKickPlayerNotify::default_instance_,
      CMessageGateKickPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateKickPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGateKickPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGateKickPlayerNotify));
  CMessageQueuePlayerNotify_descriptor_ = file->message_type(32);
  static const int CMessageQueuePlayerNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, countinscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, elapsseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, needseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, yourposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, countinqueue_),
  };
  CMessageQueuePlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueuePlayerNotify_descriptor_,
      CMessageQueuePlayerNotify::default_instance_,
      CMessageQueuePlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueuePlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueuePlayerNotify));
  CMessagePlayerCancelLoginQueue_descriptor_ = file->message_type(33);
  static const int CMessagePlayerCancelLoginQueue_offsets_[1] = {
  };
  CMessagePlayerCancelLoginQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerCancelLoginQueue_descriptor_,
      CMessagePlayerCancelLoginQueue::default_instance_,
      CMessagePlayerCancelLoginQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerCancelLoginQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerCancelLoginQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerCancelLoginQueue));
  CMessageCheckRolePwdRequest_descriptor_ = file->message_type(34);
  static const int CMessageCheckRolePwdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdRequest, password_),
  };
  CMessageCheckRolePwdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckRolePwdRequest_descriptor_,
      CMessageCheckRolePwdRequest::default_instance_,
      CMessageCheckRolePwdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckRolePwdRequest));
  CMessageCheckRolePwdResponse_descriptor_ = file->message_type(35);
  static const int CMessageCheckRolePwdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdResponse, errcode_),
  };
  CMessageCheckRolePwdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckRolePwdResponse_descriptor_,
      CMessageCheckRolePwdResponse::default_instance_,
      CMessageCheckRolePwdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckRolePwdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckRolePwdResponse));
  CMessageSendClientInfoRequest_descriptor_ = file->message_type(36);
  static const int CMessageSendClientInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClientInfoRequest, hostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClientInfoRequest, macaddr_),
  };
  CMessageSendClientInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendClientInfoRequest_descriptor_,
      CMessageSendClientInfoRequest::default_instance_,
      CMessageSendClientInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClientInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendClientInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendClientInfoRequest));
  CMessageSendAntiBotDataToServerNotify_descriptor_ = file->message_type(37);
  static const int CMessageSendAntiBotDataToServerNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToServerNotify, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToServerNotify, clientdata_),
  };
  CMessageSendAntiBotDataToServerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendAntiBotDataToServerNotify_descriptor_,
      CMessageSendAntiBotDataToServerNotify::default_instance_,
      CMessageSendAntiBotDataToServerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToServerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToServerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendAntiBotDataToServerNotify));
  CMessageSendAntiBotDataToClientNotify_descriptor_ = file->message_type(38);
  static const int CMessageSendAntiBotDataToClientNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToClientNotify, serverdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToClientNotify, length_),
  };
  CMessageSendAntiBotDataToClientNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSendAntiBotDataToClientNotify_descriptor_,
      CMessageSendAntiBotDataToClientNotify::default_instance_,
      CMessageSendAntiBotDataToClientNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToClientNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSendAntiBotDataToClientNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSendAntiBotDataToClientNotify));
  CMessageClientAntiBotStartRetNotify_descriptor_ = file->message_type(39);
  static const int CMessageClientAntiBotStartRetNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientAntiBotStartRetNotify, startret_),
  };
  CMessageClientAntiBotStartRetNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageClientAntiBotStartRetNotify_descriptor_,
      CMessageClientAntiBotStartRetNotify::default_instance_,
      CMessageClientAntiBotStartRetNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientAntiBotStartRetNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageClientAntiBotStartRetNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageClientAntiBotStartRetNotify));
  CMessageDisconnectNotify_descriptor_ = file->message_type(40);
  static const int CMessageDisconnectNotify_offsets_[1] = {
  };
  CMessageDisconnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisconnectNotify_descriptor_,
      CMessageDisconnectNotify::default_instance_,
      CMessageDisconnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisconnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisconnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisconnectNotify));
  CMessageUserAuthNotify_descriptor_ = file->message_type(41);
  static const int CMessageUserAuthNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthNotify, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthNotify, authtype_),
  };
  CMessageUserAuthNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserAuthNotify_descriptor_,
      CMessageUserAuthNotify::default_instance_,
      CMessageUserAuthNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserAuthNotify));
  CMessageUserAuthRequest_descriptor_ = file->message_type(42);
  static const int CMessageUserAuthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthRequest, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthRequest, authvalue_),
  };
  CMessageUserAuthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserAuthRequest_descriptor_,
      CMessageUserAuthRequest::default_instance_,
      CMessageUserAuthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserAuthRequest));
  CMessageUserAuthResponse_descriptor_ = file->message_type(43);
  static const int CMessageUserAuthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthResponse, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthResponse, ok_),
  };
  CMessageUserAuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUserAuthResponse_descriptor_,
      CMessageUserAuthResponse::default_instance_,
      CMessageUserAuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUserAuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUserAuthResponse));
  CMessageCancelDeleteRoleRequest_descriptor_ = file->message_type(44);
  static const int CMessageCancelDeleteRoleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleRequest, roleid_),
  };
  CMessageCancelDeleteRoleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelDeleteRoleRequest_descriptor_,
      CMessageCancelDeleteRoleRequest::default_instance_,
      CMessageCancelDeleteRoleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelDeleteRoleRequest));
  CMessageCancelDeleteRoleResponse_descriptor_ = file->message_type(45);
  static const int CMessageCancelDeleteRoleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleResponse, roleid_),
  };
  CMessageCancelDeleteRoleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCancelDeleteRoleResponse_descriptor_,
      CMessageCancelDeleteRoleResponse::default_instance_,
      CMessageCancelDeleteRoleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCancelDeleteRoleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCancelDeleteRoleResponse));
  CMessageQuestionRequireRequest_descriptor_ = file->message_type(46);
  static const int CMessageQuestionRequireRequest_offsets_[1] = {
  };
  CMessageQuestionRequireRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuestionRequireRequest_descriptor_,
      CMessageQuestionRequireRequest::default_instance_,
      CMessageQuestionRequireRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuestionRequireRequest));
  CMessageQuestionRequireResponse_descriptor_ = file->message_type(47);
  static const int CMessageQuestionRequireResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, optiona_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, optionb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, optionc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, optiond_),
  };
  CMessageQuestionRequireResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuestionRequireResponse_descriptor_,
      CMessageQuestionRequireResponse::default_instance_,
      CMessageQuestionRequireResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionRequireResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuestionRequireResponse));
  CMessageQuestionRequireResponse_EStatus_descriptor_ = CMessageQuestionRequireResponse_descriptor_->enum_type(0);
  CMessageQuestionAnswerRequest_descriptor_ = file->message_type(48);
  static const int CMessageQuestionAnswerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerRequest, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerRequest, answer_),
  };
  CMessageQuestionAnswerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuestionAnswerRequest_descriptor_,
      CMessageQuestionAnswerRequest::default_instance_,
      CMessageQuestionAnswerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuestionAnswerRequest));
  CMessageQuestionAnswerRequest_EStatus_descriptor_ = CMessageQuestionAnswerRequest_descriptor_->enum_type(0);
  CMessageQuestionAnswerResponse_descriptor_ = file->message_type(49);
  static const int CMessageQuestionAnswerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerResponse, status_),
  };
  CMessageQuestionAnswerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQuestionAnswerResponse_descriptor_,
      CMessageQuestionAnswerResponse::default_instance_,
      CMessageQuestionAnswerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQuestionAnswerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQuestionAnswerResponse));
  CMessageQuestionAnswerResponse_EStatus_descriptor_ = CMessageQuestionAnswerResponse_descriptor_->enum_type(0);
  CMessageLoginServerInfo_descriptor_ = file->message_type(50);
  static const int CMessageLoginServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, count_),
  };
  CMessageLoginServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginServerInfo_descriptor_,
      CMessageLoginServerInfo::default_instance_,
      CMessageLoginServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginServerInfo));
  CMessageCertifyRequest_descriptor_ = file->message_type(51);
  static const int CMessageCertifyRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, md5code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, taskversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, matrixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, matrixcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, matrixcoord_),
  };
  CMessageCertifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyRequest_descriptor_,
      CMessageCertifyRequest::default_instance_,
      CMessageCertifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyRequest));
  CMessageCertifyResponse_descriptor_ = file->message_type(52);
  static const int CMessageCertifyResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, errorcode_),
  };
  CMessageCertifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyResponse_descriptor_,
      CMessageCertifyResponse::default_instance_,
      CMessageCertifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyResponse));
  CMessageCertifyResponse_EStatus_descriptor_ = CMessageCertifyResponse_descriptor_->enum_type(0);
  CMessageCertifyQueryRequest_descriptor_ = file->message_type(53);
  static const int CMessageCertifyQueryRequest_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, md5code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, playerhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, playerport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, playermac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, taskversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, matrixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, matrixcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, matrixcoord_),
  };
  CMessageCertifyQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyQueryRequest_descriptor_,
      CMessageCertifyQueryRequest::default_instance_,
      CMessageCertifyQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyQueryRequest));
  CMessageCertifyQueryResponse_descriptor_ = file->message_type(54);
  static const int CMessageCertifyQueryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, errorcode_),
  };
  CMessageCertifyQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyQueryResponse_descriptor_,
      CMessageCertifyQueryResponse::default_instance_,
      CMessageCertifyQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyQueryResponse));
  CMessageCertifyQueryResponse_EStatus_descriptor_ = CMessageCertifyQueryResponse_descriptor_->enum_type(0);
  CMessageCertifyTokenRequest_descriptor_ = file->message_type(55);
  static const int CMessageCertifyTokenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, handle_),
  };
  CMessageCertifyTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyTokenRequest_descriptor_,
      CMessageCertifyTokenRequest::default_instance_,
      CMessageCertifyTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyTokenRequest));
  CMessageCertifyTokenResponse_descriptor_ = file->message_type(56);
  static const int CMessageCertifyTokenResponse_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, playerhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, playerport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, playermac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, md5code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, taskversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, templateversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, matrixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, matrixcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, matrixcoord_),
  };
  CMessageCertifyTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCertifyTokenResponse_descriptor_,
      CMessageCertifyTokenResponse::default_instance_,
      CMessageCertifyTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCertifyTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCertifyTokenResponse));
  CMessageCertifyTokenResponse_EStatus_descriptor_ = CMessageCertifyTokenResponse_descriptor_->enum_type(0);
  CMessageRoleQueryRequest_descriptor_ = file->message_type(57);
  static const int CMessageRoleQueryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryRequest, accountid_),
  };
  CMessageRoleQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleQueryRequest_descriptor_,
      CMessageRoleQueryRequest::default_instance_,
      CMessageRoleQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleQueryRequest));
  CMessageRoleQueryResponse_descriptor_ = file->message_type(58);
  static const int CMessageRoleQueryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, rolecount_),
  };
  CMessageRoleQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleQueryResponse_descriptor_,
      CMessageRoleQueryResponse::default_instance_,
      CMessageRoleQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleQueryResponse));
  CMessageRoleQueryResponse_EStatus_descriptor_ = CMessageRoleQueryResponse_descriptor_->enum_type(0);
  CMessageRoleQueryNotify_descriptor_ = file->message_type(59);
  static const int CMessageRoleQueryNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, loginid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, rolecount_),
  };
  CMessageRoleQueryNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleQueryNotify_descriptor_,
      CMessageRoleQueryNotify::default_instance_,
      CMessageRoleQueryNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleQueryNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleQueryNotify));
  CMessageRoleQueryNotify_EStatus_descriptor_ = CMessageRoleQueryNotify_descriptor_->enum_type(0);
  CMessageOnlineStatusNotify_descriptor_ = file->message_type(60);
  static const int CMessageOnlineStatusNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOnlineStatusNotify, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOnlineStatusNotify, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOnlineStatusNotify, current_),
  };
  CMessageOnlineStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageOnlineStatusNotify_descriptor_,
      CMessageOnlineStatusNotify::default_instance_,
      CMessageOnlineStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOnlineStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageOnlineStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageOnlineStatusNotify));
  CMessageInviteCampRequest_descriptor_ = file->message_type(61);
  static const int CMessageInviteCampRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampRequest, currentcampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampRequest, npcid_),
  };
  CMessageInviteCampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteCampRequest_descriptor_,
      CMessageInviteCampRequest::default_instance_,
      CMessageInviteCampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteCampRequest));
  CampLevel_descriptor_ = file->message_type(62);
  static const int CampLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampLevel, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampLevel, weak_level_),
  };
  CampLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampLevel_descriptor_,
      CampLevel::default_instance_,
      CampLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampLevel));
  CMessageInviteCampResponse_descriptor_ = file->message_type(63);
  static const int CMessageInviteCampResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampResponse, camp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampResponse, errorcode_),
  };
  CMessageInviteCampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteCampResponse_descriptor_,
      CMessageInviteCampResponse::default_instance_,
      CMessageInviteCampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteCampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteCampResponse));
  CMessageChangeSingleCampRequest_descriptor_ = file->message_type(64);
  static const int CMessageChangeSingleCampRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, crrentcampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, targetcampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, npcid_),
  };
  CMessageChangeSingleCampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeSingleCampRequest_descriptor_,
      CMessageChangeSingleCampRequest::default_instance_,
      CMessageChangeSingleCampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeSingleCampRequest));
  CMessageChangeSingleCampResponse_descriptor_ = file->message_type(65);
  static const int CMessageChangeSingleCampResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampResponse, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampResponse, playerid_),
  };
  CMessageChangeSingleCampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeSingleCampResponse_descriptor_,
      CMessageChangeSingleCampResponse::default_instance_,
      CMessageChangeSingleCampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSingleCampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeSingleCampResponse));
  CMessageChangeCampSuccesNotify_descriptor_ = file->message_type(66);
  static const int CMessageChangeCampSuccesNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, srccampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, playerid_),
  };
  CMessageChangeCampSuccesNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCampSuccesNotify_descriptor_,
      CMessageChangeCampSuccesNotify::default_instance_,
      CMessageChangeCampSuccesNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampSuccesNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCampSuccesNotify));
  CMessageChangeCamp2GateNotice_descriptor_ = file->message_type(67);
  static const int CMessageChangeCamp2GateNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCamp2GateNotice, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCamp2GateNotice, campid_),
  };
  CMessageChangeCamp2GateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCamp2GateNotice_descriptor_,
      CMessageChangeCamp2GateNotice::default_instance_,
      CMessageChangeCamp2GateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCamp2GateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCamp2GateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCamp2GateNotice));
  CMessageChangeCampConditionRequest_descriptor_ = file->message_type(68);
  static const int CMessageChangeCampConditionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionRequest, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionRequest, npcid_),
  };
  CMessageChangeCampConditionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCampConditionRequest_descriptor_,
      CMessageChangeCampConditionRequest::default_instance_,
      CMessageChangeCampConditionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCampConditionRequest));
  CMessageChangeCampConditionResponse_descriptor_ = file->message_type(69);
  static const int CMessageChangeCampConditionResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishaveteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavefamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavecountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavemaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavemarriage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavepaymail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishaveenoughlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, ishavesworn_),
  };
  CMessageChangeCampConditionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeCampConditionResponse_descriptor_,
      CMessageChangeCampConditionResponse::default_instance_,
      CMessageChangeCampConditionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeCampConditionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeCampConditionResponse));
  EMCoreMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_coremessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRouter_descriptor_, &CMessageRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectErr_descriptor_, &CMessageRedirectErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginErrorNotice_descriptor_, &CMessageLoginErrorNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateErrorNotice_descriptor_, &CMessageGateErrorNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginServerRequest_descriptor_, &CMessageLoginServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageWaitForLoginNotice_descriptor_, &CMessageWaitForLoginNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectGateNotice_descriptor_, &CMessageRedirectGateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginGateRequest_descriptor_, &CMessageLoginGateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginGateResponse_descriptor_, &CMessageLoginGateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainCharRequest_descriptor_, &CMessageObtainCharRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCharProfile_descriptor_, &PBCharProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainCharNotice_descriptor_, &CMessageObtainCharNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageObtainCharCompleteNotice_descriptor_, &CMessageObtainCharCompleteNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterGameRequest_descriptor_, &CMessageEnterGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageEnterGameResponse_descriptor_, &CMessageEnterGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginSceneRequest_descriptor_, &CMessageLoginSceneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginSceneResponse_descriptor_, &CMessageLoginSceneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReturn2GateRequest_descriptor_, &CMessageReturn2GateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReturn2GateResponse_descriptor_, &CMessageReturn2GateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateCharRequest_descriptor_, &CMessageCreateCharRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateCharResponse_descriptor_, &CMessageCreateCharResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDeleteCharRequest_descriptor_, &CMessageDeleteCharRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDeleteCharResponse_descriptor_, &CMessageDeleteCharResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageReconnectSceneNotice_descriptor_, &CMessageReconnectSceneNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectSceneRequest_descriptor_, &CMessageRedirectSceneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRedirectSceneResponse_descriptor_, &CMessageRedirectSceneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveGameRequest_descriptor_, &CMessageLeaveGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveGameResponse_descriptor_, &CMessageLeaveGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickoutNotice_descriptor_, &CMessageKickoutNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClientPingServerRequest_descriptor_, &CMessageClientPingServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClientPingServerResponse_descriptor_, &CMessageClientPingServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGateKickPlayerNotify_descriptor_, &CMessageGateKickPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueuePlayerNotify_descriptor_, &CMessageQueuePlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerCancelLoginQueue_descriptor_, &CMessagePlayerCancelLoginQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckRolePwdRequest_descriptor_, &CMessageCheckRolePwdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckRolePwdResponse_descriptor_, &CMessageCheckRolePwdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendClientInfoRequest_descriptor_, &CMessageSendClientInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendAntiBotDataToServerNotify_descriptor_, &CMessageSendAntiBotDataToServerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSendAntiBotDataToClientNotify_descriptor_, &CMessageSendAntiBotDataToClientNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageClientAntiBotStartRetNotify_descriptor_, &CMessageClientAntiBotStartRetNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisconnectNotify_descriptor_, &CMessageDisconnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserAuthNotify_descriptor_, &CMessageUserAuthNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserAuthRequest_descriptor_, &CMessageUserAuthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUserAuthResponse_descriptor_, &CMessageUserAuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelDeleteRoleRequest_descriptor_, &CMessageCancelDeleteRoleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCancelDeleteRoleResponse_descriptor_, &CMessageCancelDeleteRoleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuestionRequireRequest_descriptor_, &CMessageQuestionRequireRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuestionRequireResponse_descriptor_, &CMessageQuestionRequireResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuestionAnswerRequest_descriptor_, &CMessageQuestionAnswerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQuestionAnswerResponse_descriptor_, &CMessageQuestionAnswerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginServerInfo_descriptor_, &CMessageLoginServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyRequest_descriptor_, &CMessageCertifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyResponse_descriptor_, &CMessageCertifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyQueryRequest_descriptor_, &CMessageCertifyQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyQueryResponse_descriptor_, &CMessageCertifyQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyTokenRequest_descriptor_, &CMessageCertifyTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCertifyTokenResponse_descriptor_, &CMessageCertifyTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleQueryRequest_descriptor_, &CMessageRoleQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleQueryResponse_descriptor_, &CMessageRoleQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleQueryNotify_descriptor_, &CMessageRoleQueryNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageOnlineStatusNotify_descriptor_, &CMessageOnlineStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteCampRequest_descriptor_, &CMessageInviteCampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampLevel_descriptor_, &CampLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteCampResponse_descriptor_, &CMessageInviteCampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeSingleCampRequest_descriptor_, &CMessageChangeSingleCampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeSingleCampResponse_descriptor_, &CMessageChangeSingleCampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCampSuccesNotify_descriptor_, &CMessageChangeCampSuccesNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCamp2GateNotice_descriptor_, &CMessageChangeCamp2GateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCampConditionRequest_descriptor_, &CMessageChangeCampConditionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeCampConditionResponse_descriptor_, &CMessageChangeCampConditionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_coremessage_5fpb_2ehxx() {
  delete CMessageRouter::default_instance_;
  delete CMessageRouter_reflection_;
  delete CMessageRedirectErr::default_instance_;
  delete CMessageRedirectErr_reflection_;
  delete CMessageLoginErrorNotice::default_instance_;
  delete CMessageLoginErrorNotice_reflection_;
  delete CMessageGateErrorNotice::default_instance_;
  delete CMessageGateErrorNotice_reflection_;
  delete CMessageLoginServerRequest::default_instance_;
  delete CMessageLoginServerRequest_reflection_;
  delete CMessageWaitForLoginNotice::default_instance_;
  delete CMessageWaitForLoginNotice_reflection_;
  delete CMessageRedirectGateNotice::default_instance_;
  delete CMessageRedirectGateNotice_reflection_;
  delete CMessageLoginGateRequest::default_instance_;
  delete CMessageLoginGateRequest_reflection_;
  delete CMessageLoginGateResponse::default_instance_;
  delete CMessageLoginGateResponse_reflection_;
  delete CMessageObtainCharRequest::default_instance_;
  delete CMessageObtainCharRequest_reflection_;
  delete PBCharProfile::default_instance_;
  delete PBCharProfile_reflection_;
  delete CMessageObtainCharNotice::default_instance_;
  delete CMessageObtainCharNotice_reflection_;
  delete CMessageObtainCharCompleteNotice::default_instance_;
  delete CMessageObtainCharCompleteNotice_reflection_;
  delete CMessageEnterGameRequest::default_instance_;
  delete CMessageEnterGameRequest_reflection_;
  delete CMessageEnterGameResponse::default_instance_;
  delete CMessageEnterGameResponse_reflection_;
  delete CMessageLoginSceneRequest::default_instance_;
  delete CMessageLoginSceneRequest_reflection_;
  delete CMessageLoginSceneResponse::default_instance_;
  delete CMessageLoginSceneResponse_reflection_;
  delete CMessageReturn2GateRequest::default_instance_;
  delete CMessageReturn2GateRequest_reflection_;
  delete CMessageReturn2GateResponse::default_instance_;
  delete CMessageReturn2GateResponse_reflection_;
  delete CMessageCreateCharRequest::default_instance_;
  delete CMessageCreateCharRequest_reflection_;
  delete CMessageCreateCharResponse::default_instance_;
  delete CMessageCreateCharResponse_reflection_;
  delete CMessageDeleteCharRequest::default_instance_;
  delete CMessageDeleteCharRequest_reflection_;
  delete CMessageDeleteCharResponse::default_instance_;
  delete CMessageDeleteCharResponse_reflection_;
  delete CMessageReconnectSceneNotice::default_instance_;
  delete CMessageReconnectSceneNotice_reflection_;
  delete CMessageRedirectSceneRequest::default_instance_;
  delete CMessageRedirectSceneRequest_reflection_;
  delete CMessageRedirectSceneResponse::default_instance_;
  delete CMessageRedirectSceneResponse_reflection_;
  delete CMessageLeaveGameRequest::default_instance_;
  delete CMessageLeaveGameRequest_reflection_;
  delete CMessageLeaveGameResponse::default_instance_;
  delete CMessageLeaveGameResponse_reflection_;
  delete CMessageKickoutNotice::default_instance_;
  delete CMessageKickoutNotice_reflection_;
  delete CMessageClientPingServerRequest::default_instance_;
  delete CMessageClientPingServerRequest_reflection_;
  delete CMessageClientPingServerResponse::default_instance_;
  delete CMessageClientPingServerResponse_reflection_;
  delete CMessageGateKickPlayerNotify::default_instance_;
  delete CMessageGateKickPlayerNotify_reflection_;
  delete CMessageQueuePlayerNotify::default_instance_;
  delete CMessageQueuePlayerNotify_reflection_;
  delete CMessagePlayerCancelLoginQueue::default_instance_;
  delete CMessagePlayerCancelLoginQueue_reflection_;
  delete CMessageCheckRolePwdRequest::default_instance_;
  delete CMessageCheckRolePwdRequest_reflection_;
  delete CMessageCheckRolePwdResponse::default_instance_;
  delete CMessageCheckRolePwdResponse_reflection_;
  delete CMessageSendClientInfoRequest::default_instance_;
  delete CMessageSendClientInfoRequest_reflection_;
  delete CMessageSendAntiBotDataToServerNotify::default_instance_;
  delete CMessageSendAntiBotDataToServerNotify_reflection_;
  delete CMessageSendAntiBotDataToClientNotify::default_instance_;
  delete CMessageSendAntiBotDataToClientNotify_reflection_;
  delete CMessageClientAntiBotStartRetNotify::default_instance_;
  delete CMessageClientAntiBotStartRetNotify_reflection_;
  delete CMessageDisconnectNotify::default_instance_;
  delete CMessageDisconnectNotify_reflection_;
  delete CMessageUserAuthNotify::default_instance_;
  delete CMessageUserAuthNotify_reflection_;
  delete CMessageUserAuthRequest::default_instance_;
  delete CMessageUserAuthRequest_reflection_;
  delete CMessageUserAuthResponse::default_instance_;
  delete CMessageUserAuthResponse_reflection_;
  delete CMessageCancelDeleteRoleRequest::default_instance_;
  delete CMessageCancelDeleteRoleRequest_reflection_;
  delete CMessageCancelDeleteRoleResponse::default_instance_;
  delete CMessageCancelDeleteRoleResponse_reflection_;
  delete CMessageQuestionRequireRequest::default_instance_;
  delete CMessageQuestionRequireRequest_reflection_;
  delete CMessageQuestionRequireResponse::default_instance_;
  delete CMessageQuestionRequireResponse_reflection_;
  delete CMessageQuestionAnswerRequest::default_instance_;
  delete CMessageQuestionAnswerRequest_reflection_;
  delete CMessageQuestionAnswerResponse::default_instance_;
  delete CMessageQuestionAnswerResponse_reflection_;
  delete CMessageLoginServerInfo::default_instance_;
  delete CMessageLoginServerInfo_reflection_;
  delete CMessageCertifyRequest::default_instance_;
  delete CMessageCertifyRequest_reflection_;
  delete CMessageCertifyResponse::default_instance_;
  delete CMessageCertifyResponse_reflection_;
  delete CMessageCertifyQueryRequest::default_instance_;
  delete CMessageCertifyQueryRequest_reflection_;
  delete CMessageCertifyQueryResponse::default_instance_;
  delete CMessageCertifyQueryResponse_reflection_;
  delete CMessageCertifyTokenRequest::default_instance_;
  delete CMessageCertifyTokenRequest_reflection_;
  delete CMessageCertifyTokenResponse::default_instance_;
  delete CMessageCertifyTokenResponse_reflection_;
  delete CMessageRoleQueryRequest::default_instance_;
  delete CMessageRoleQueryRequest_reflection_;
  delete CMessageRoleQueryResponse::default_instance_;
  delete CMessageRoleQueryResponse_reflection_;
  delete CMessageRoleQueryNotify::default_instance_;
  delete CMessageRoleQueryNotify_reflection_;
  delete CMessageOnlineStatusNotify::default_instance_;
  delete CMessageOnlineStatusNotify_reflection_;
  delete CMessageInviteCampRequest::default_instance_;
  delete CMessageInviteCampRequest_reflection_;
  delete CampLevel::default_instance_;
  delete CampLevel_reflection_;
  delete CMessageInviteCampResponse::default_instance_;
  delete CMessageInviteCampResponse_reflection_;
  delete CMessageChangeSingleCampRequest::default_instance_;
  delete CMessageChangeSingleCampRequest_reflection_;
  delete CMessageChangeSingleCampResponse::default_instance_;
  delete CMessageChangeSingleCampResponse_reflection_;
  delete CMessageChangeCampSuccesNotify::default_instance_;
  delete CMessageChangeCampSuccesNotify_reflection_;
  delete CMessageChangeCamp2GateNotice::default_instance_;
  delete CMessageChangeCamp2GateNotice_reflection_;
  delete CMessageChangeCampConditionRequest::default_instance_;
  delete CMessageChangeCampConditionRequest_reflection_;
  delete CMessageChangeCampConditionResponse::default_instance_;
  delete CMessageChangeCampConditionResponse_reflection_;
}

void protobuf_AddDesc_coremessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022coremessage_pb.hxx\"\303\002\n\016CMessageRouter\022"
    "\024\n\014RouterReason\030\001 \001(\r\022\023\n\013Send2Player\030\002 \001"
    "(\r\022\020\n\010SendBack\030\003 \001(\r\022\022\n\nRouterType\030\004 \001(\r"
    "\022\021\n\tSrcCharID\030\005 \001(\r\022\021\n\tDesCharID\030\006 \001(\r\022\017"
    "\n\007SrcName\030\007 \001(\t\022\017\n\007DesName\030\010 \001(\t\"\027\n\005MSGI"
    "D\022\016\n\tMSGROUTER\020\200\004\"0\n\014EMRouterType\022\017\n\013ROU"
    "TER_NAME\020\000\022\017\n\013ROUTER_CHAR\020\001\"M\n\016EMRouterR"
    "eason\022\022\n\016REASON_SUCCESS\020\000\022\023\n\017REASON_REDI"
    "RECT\020\001\022\022\n\016REASON_OFFLINE\020\002\"8\n\023CMessageRe"
    "directErr\022\021\n\tErrorCode\030\001 \001(\005\022\016\n\006CharID\030\002"
    " \001(\r\"B\n\030CMessageLoginErrorNotice\022\023\n\013Erro"
    "rString\030\001 \001(\t\022\021\n\tErrorCode\030\002 \001(\005\"T\n\027CMes"
    "sageGateErrorNotice\022\021\n\tKeepAlive\030\001 \001(\005\022\023"
    "\n\013ErrorString\030\002 \001(\t\022\021\n\tErrorCode\030\003 \001(\005\"\210"
    "\003\n\032CMessageLoginServerRequest\022\020\n\010UserNam"
    "e\030\001 \001(\t\022\017\n\007Md5Code\030\002 \001(\t\022\023\n\013TaskVersion\030"
    "\003 \001(\r\022\017\n\007UserPsw\030\004 \001(\t\022\017\n\007Version\030\005 \001(\r\022"
    "\020\n\010SourceID\030\006 \001(\005\022\027\n\017TemplateVersion\030\007 \001"
    "(\r\022\022\n\nMatrixType\030\010 \001(\r\022\022\n\nMatrixCode\030\t \001"
    "(\t\022\013\n\003Mac\030\n \001(\t\022\023\n\013MatrixCoord\030\013 \001(\t\022/\n\004"
    "type\030\014 \001(\0162!.CMessageLoginServerRequest."
    "EType\022\021\n\taccountId\030\r \001(\r\022\r\n\005token\030\016 \001(\r\022"
    "\r\n\005cpuid\030\017 \001(\r\022\016\n\006diskid\030\020 \001(\r\")\n\005EType\022"
    "\017\n\013TYPE_CLIENT\020\000\022\017\n\013TYPE_GLOBAL\020\001\"1\n\032CMe"
    "ssageWaitForLoginNotice\022\023\n\013QueueNumber\030\001"
    " \001(\r\"}\n\032CMessageRedirectGateNotice\022\017\n\007Ad"
    "dress\030\001 \001(\t\022\023\n\013OtherClient\030\002 \001(\r\022\022\n\nLogi"
    "nToken\030\003 \001(\r\022\021\n\tAccountID\030\004 \001(\r\022\022\n\nClean"
    "CSkey\030\005 \001(\r\"V\n\030CMessageLoginGateRequest\022"
    "\022\n\nLoginToken\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\023"
    "\n\013TemplateVer\030\003 \001(\r\"V\n\031CMessageLoginGate"
    "Response\022\023\n\013ErrorString\030\001 \001(\t\022\021\n\tErrorCo"
    "de\030\002 \001(\005\022\021\n\tGateWayID\030\003 \001(\005\"\033\n\031CMessageO"
    "btainCharRequest\"\336\002\n\rPBCharProfile\022\016\n\006Ch"
    "arID\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\013\n\003Sex\030\003 \001(\r\022"
    "\022\n\nHairColour\030\004 \001(\r\022\013\n\003Exp\030\005 \001(\r\022\r\n\005Leve"
    "l\030\006 \001(\r\022\021\n\tAccountID\030\007 \001(\r\022\021\n\tLastLogin\030"
    "\010 \001(\r\022\022\n\nOnlineTime\030\t \001(\r\022\016\n\006Metier\030\n \001("
    "\r\022\020\n\010HairType\030\013 \001(\r\022\020\n\010FaceType\030\014 \001(\r\022\r\n"
    "\005MapID\030\r \001(\r\022\020\n\010CharName\030\016 \001(\t\022\023\n\013Nation"
    "ality\030\017 \001(\r\022\030\n\020RoleDeleteStatus\030\020 \001(\r\022\034\n"
    "\024DeleteStatusLeftTime\030\021 \001(\r\022\024\n\014PasswordU"
    "sed\030\022 \001(\r\"e\n\030CMessageObtainCharNotice\022#\n"
    "\013CharProfile\030\001 \003(\0132\016.PBCharProfile\022\023\n\013La"
    "stLoginIP\030\002 \001(\r\022\017\n\007LoginIP\030\003 \001(\r\"\"\n CMes"
    "sageObtainCharCompleteNotice\"i\n\030CMessage"
    "EnterGameRequest\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006L"
    "ineID\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\016\n\006CharID\030\004 \001"
    "(\r\022\013\n\003Mac\030\005 \001(\t\"T\n\031CMessageEnterGameResp"
    "onse\022\021\n\tSceneName\030\001 \001(\t\022\017\n\007Address\030\002 \001(\t"
    "\022\023\n\013ClearDialog\030\003 \001(\r\"R\n\031CMessageLoginSc"
    "eneRequest\022\021\n\tAccountID\030\001 \001(\r\022\016\n\006CharID\030"
    "\002 \001(\r\022\022\n\nLoginToken\030\003 \001(\r\"Q\n\032CMessageLog"
    "inSceneResponse\022\013\n\003Key\030\001 \001(\014\022\022\n\nCSDialog"
    "ID\030\002 \001(\r\022\022\n\nServerTime\030\003 \001(\004\"\034\n\032CMessage"
    "Return2GateRequest\"1\n\033CMessageReturn2Gat"
    "eResponse\022\022\n\nReturnType\030\001 \001(\r\"<\n\031CMessag"
    "eCreateCharRequest\022\037\n\007Profile\030\001 \001(\0132\016.PB"
    "CharProfile\",\n\032CMessageCreateCharRespons"
    "e\022\016\n\006CharID\030\001 \001(\r\"O\n\031CMessageDeleteCharR"
    "equest\022\022\n\nPasswdType\030\001 \001(\r\022\016\n\006Passwd\030\002 \001"
    "(\t\022\016\n\006CharID\030\003 \001(\r\"q\n\032CMessageDeleteChar"
    "Response\022\016\n\006CharID\030\001 \001(\r\022\017\n\007Errcode\030\002 \001("
    "\r\022\024\n\014DeleteStatus\030\003 \001(\r\022\034\n\024DeleteStatusL"
    "eftTime\030\004 \001(\r\"\220\001\n\034CMessageReconnectScene"
    "Notice\022\r\n\005MapID\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\017\n"
    "\007Address\030\003 \001(\t\022\014\n\004PosY\030\004 \001(\r\022\014\n\004PosX\030\005 \001"
    "(\r\022\023\n\013CountryName\030\006 \001(\t\022\017\n\007MapName\030\007 \001(\t"
    "\"U\n\034CMessageRedirectSceneRequest\022\021\n\tAcco"
    "untID\030\001 \001(\r\022\022\n\nLoginToken\030\002 \001(\r\022\016\n\006CharI"
    "D\030\003 \001(\r\"\037\n\035CMessageRedirectSceneResponse"
    "\"-\n\030CMessageLeaveGameRequest\022\021\n\tLeaveTyp"
    "e\030\001 \001(\r\"\033\n\031CMessageLeaveGameResponse\"6\n\025"
    "CMessageKickoutNotice\022\016\n\006reason\030\001 \001(\r\022\r\n"
    "\005param\030\002 \001(\r\"c\n\037CMessageClientPingServer"
    "Request\022\016\n\006CharID\030\001 \001(\r\022\027\n\017LatestPingVal"
    "ue\030\002 \001(\r\022\027\n\017ClientLocalTime\030\003 \001(\004\"_\n CMe"
    "ssageClientPingServerResponse\022\016\n\006CharID\030"
    "\001 \001(\r\022\027\n\017ClientLocalTime\030\002 \001(\004\022\022\n\nServer"
    "Time\030\003 \001(\004\"B\n\034CMessageGateKickPlayerNoti"
    "fy\022\016\n\006CharID\030\001 \001(\r\022\022\n\nKickReason\030\002 \001(\r\"\210"
    "\001\n\031CMessageQueuePlayerNotify\022\024\n\014CountInS"
    "cene\030\001 \001(\r\022\024\n\014ElapsSeconds\030\002 \001(\r\022\023\n\013Need"
    "Seconds\030\003 \001(\r\022\024\n\014YourPosition\030\004 \001(\r\022\024\n\014C"
    "ountInQueue\030\005 \001(\r\" \n\036CMessagePlayerCance"
    "lLoginQueue\"?\n\033CMessageCheckRolePwdReque"
    "st\022\016\n\006CharID\030\001 \001(\r\022\020\n\010Password\030\002 \001(\t\"/\n\034"
    "CMessageCheckRolePwdResponse\022\017\n\007Errcode\030"
    "\001 \001(\r\"B\n\035CMessageSendClientInfoRequest\022\020"
    "\n\010HostInfo\030\001 \001(\t\022\017\n\007MacAddr\030\002 \001(\t\"K\n%CMe"
    "ssageSendAntiBotDataToServerNotify\022\016\n\006Le"
    "ngth\030\001 \001(\r\022\022\n\nClientData\030\002 \001(\014\"K\n%CMessa"
    "geSendAntiBotDataToClientNotify\022\022\n\nServe"
    "rData\030\001 \001(\014\022\016\n\006Length\030\002 \001(\r\"7\n#CMessageC"
    "lientAntiBotStartRetNotify\022\020\n\010StartRet\030\001"
    " \001(\r\"\032\n\030CMessageDisconnectNotify\"<\n\026CMes"
    "sageUserAuthNotify\022\020\n\010ActionID\030\001 \001(\r\022\020\n\010"
    "AuthType\030\002 \001(\r\">\n\027CMessageUserAuthReques"
    "t\022\020\n\010ActionID\030\001 \001(\r\022\021\n\tAuthValue\030\002 \001(\r\"8"
    "\n\030CMessageUserAuthResponse\022\020\n\010ActionID\030\001"
    " \001(\r\022\n\n\002OK\030\002 \001(\r\"1\n\037CMessageCancelDelete"
    "RoleRequest\022\016\n\006RoleID\030\001 \001(\r\"C\n CMessageC"
    "ancelDeleteRoleResponse\022\017\n\007Errcode\030\001 \001(\r"
    "\022\016\n\006RoleID\030\002 \001(\r\" \n\036CMessageQuestionRequ"
    "ireRequest\"\365\001\n\037CMessageQuestionRequireRe"
    "sponse\0228\n\006Status\030\001 \001(\0162(.CMessageQuestio"
    "nRequireResponse.EStatus\022\022\n\nQuestionId\030\002"
    " \001(\r\022\020\n\010Question\030\003 \001(\t\022\017\n\007OptionA\030\004 \001(\014\022"
    "\017\n\007OptionB\030\005 \001(\014\022\017\n\007OptionC\030\006 \001(\014\022\017\n\007Opt"
    "ionD\030\007 \001(\014\".\n\007EStatus\022\022\n\016STATUS_SUCCESS\020"
    "\000\022\017\n\013STATUS_WAIT\020\001\"s\n\035CMessageQuestionAn"
    "swerRequest\022\022\n\nQuestionId\030\001 \001(\r\022\016\n\006Answe"
    "r\030\002 \001(\014\".\n\007EStatus\022\022\n\016STATUS_SUCCESS\020\000\022\017"
    "\n\013STATUS_WAIT\020\001\"\211\001\n\036CMessageQuestionAnsw"
    "erResponse\0227\n\006Status\030\001 \001(\0162\'.CMessageQue"
    "stionAnswerResponse.EStatus\".\n\007EStatus\022\022"
    "\n\016STATUS_SUCCESS\020\000\022\017\n\013STATUS_WAIT\020\001\"R\n\027C"
    "MessageLoginServerInfo\022\n\n\002id\030\001 \001(\r\022\014\n\004fl"
    "ag\030\002 \001(\r\022\016\n\006status\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\""
    "\350\001\n\026CMessageCertifyRequest\022\020\n\010passport\030\001"
    " \001(\t\022\020\n\010password\030\002 \001(\t\022\017\n\007md5Code\030\003 \001(\t\022"
    "\013\n\003mac\030\004 \001(\t\022\020\n\010sourceId\030\005 \001(\005\022\017\n\007versio"
    "n\030\006 \001(\r\022\023\n\013taskVersion\030\007 \001(\r\022\027\n\017template"
    "Version\030\010 \001(\r\022\022\n\nmatrixType\030\t \001(\r\022\022\n\nmat"
    "rixCode\030\n \001(\t\022\023\n\013matrixCoord\030\013 \001(\t\"\204\002\n\027C"
    "MessageCertifyResponse\0220\n\006status\030\001 \001(\0162 "
    ".CMessageCertifyResponse.EStatus\022\020\n\010play"
    "erId\030\002 \001(\r\022\021\n\taccountId\030\003 \001(\r\022\r\n\005token\030\004"
    " \001(\r\022)\n\007servers\030\005 \003(\0132\030.CMessageLoginSer"
    "verInfo\022\021\n\terrorCode\030\006 \001(\r\"E\n\007EStatus\022\022\n"
    "\016STATUS_SUCCESS\020\000\022\022\n\016STATUS_INVALID\020\001\022\022\n"
    "\016STATUS_FAILURE\020\002\"\300\002\n\033CMessageCertifyQue"
    "ryRequest\022\020\n\010playerId\030\001 \001(\r\022\021\n\taccountId"
    "\030\002 \001(\r\022\020\n\010passport\030\003 \001(\t\022\020\n\010password\030\004 \001"
    "(\t\022\017\n\007md5Code\030\005 \001(\t\022\022\n\nplayerHost\030\006 \001(\r\022"
    "\022\n\nplayerPort\030\007 \001(\r\022\021\n\tplayerMac\030\010 \001(\t\022\020"
    "\n\010sourceId\030\t \001(\005\022\017\n\007version\030\n \001(\r\022\023\n\013tas"
    "kVersion\030\013 \001(\r\022\027\n\017templateVersion\030\014 \001(\r\022"
    "\022\n\nmatrixType\030\r \001(\r\022\022\n\nmatrixCode\030\016 \001(\t\022"
    "\023\n\013matrixCoord\030\017 \001(\t\"\300\001\n\034CMessageCertify"
    "QueryResponse\0225\n\006status\030\001 \001(\0162%.CMessage"
    "CertifyQueryResponse.EStatus\022\020\n\010playerId"
    "\030\002 \001(\r\022\021\n\taccountId\030\003 \001(\r\022\021\n\terrorCode\030\004"
    " \001(\r\"1\n\007EStatus\022\022\n\016STATUS_SUCCESS\020\000\022\022\n\016S"
    "TATUS_FAILURE\020\001\"a\n\033CMessageCertifyTokenR"
    "equest\022\020\n\010playerId\030\001 \001(\r\022\021\n\taccountId\030\002 "
    "\001(\r\022\r\n\005token\030\003 \001(\r\022\016\n\006handle\030\004 \001(\r\"\273\003\n\034C"
    "MessageCertifyTokenResponse\0225\n\006status\030\001 "
    "\001(\0162%.CMessageCertifyTokenResponse.EStat"
    "us\022\020\n\010playerId\030\002 \001(\r\022\021\n\taccountId\030\003 \001(\r\022"
    "\016\n\006handle\030\004 \001(\r\022\020\n\010passport\030\005 \001(\t\022\020\n\010pas"
    "sword\030\006 \001(\t\022\022\n\nplayerHost\030\007 \001(\r\022\022\n\nplaye"
    "rPort\030\010 \001(\r\022\021\n\tplayerMac\030\t \001(\t\022\017\n\007md5Cod"
    "e\030\n \001(\t\022\020\n\010sourceId\030\013 \001(\005\022\017\n\007version\030\014 \001"
    "(\r\022\023\n\013taskVersion\030\r \001(\r\022\027\n\017templateVersi"
    "on\030\016 \001(\r\022\022\n\nmatrixType\030\017 \001(\r\022\022\n\nmatrixCo"
    "de\030\020 \001(\t\022\023\n\013matrixCoord\030\021 \001(\t\"1\n\007EStatus"
    "\022\022\n\016STATUS_SUCCESS\020\000\022\022\n\016STATUS_FAILURE\020\001"
    "\"?\n\030CMessageRoleQueryRequest\022\020\n\010playerId"
    "\030\001 \001(\r\022\021\n\taccountId\030\002 \001(\r\"\272\001\n\031CMessageRo"
    "leQueryResponse\0222\n\006status\030\001 \001(\0162\".CMessa"
    "geRoleQueryResponse.EStatus\022\020\n\010playerId\030"
    "\002 \001(\r\022\021\n\taccountId\030\003 \001(\r\022\021\n\troleCount\030\004 "
    "\001(\r\"1\n\007EStatus\022\022\n\016STATUS_SUCCESS\020\000\022\022\n\016ST"
    "ATUS_FAILURE\020\001\"\307\001\n\027CMessageRoleQueryNoti"
    "fy\0220\n\006status\030\001 \001(\0162 .CMessageRoleQueryNo"
    "tify.EStatus\022\020\n\010playerId\030\002 \001(\r\022\021\n\taccoun"
    "tId\030\003 \001(\r\022\017\n\007loginId\030\004 \001(\r\022\021\n\troleCount\030"
    "\005 \001(\r\"1\n\007EStatus\022\022\n\016STATUS_SUCCESS\020\000\022\022\n\016"
    "STATUS_FAILURE\020\001\"N\n\032CMessageOnlineStatus"
    "Notify\022\020\n\010serverId\030\001 \001(\r\022\r\n\005total\030\002 \001(\r\022"
    "\017\n\007current\030\003 \001(\r\"S\n\031CMessageInviteCampRe"
    "quest\022\020\n\010playerId\030\001 \001(\r\022\025\n\rcurrentCampId"
    "\030\002 \001(\r\022\r\n\005npcId\030\003 \001(\r\"0\n\tCampLevel\022\017\n\007ca"
    "mp_id\030\001 \001(\r\022\022\n\nweak_level\030\002 \001(\r\"N\n\032CMess"
    "ageInviteCampResponse\022\035\n\tcamp_list\030\001 \003(\013"
    "2\n.CampLevel\022\021\n\terrorcode\030\002 \001(\r\"n\n\037CMess"
    "ageChangeSingleCampRequest\022\020\n\010playerId\030\001"
    " \001(\r\022\024\n\014crrentCampId\030\002 \001(\r\022\024\n\014targetCamp"
    "Id\030\003 \001(\r\022\r\n\005npcId\030\004 \001(\r\"W\n CMessageChang"
    "eSingleCampResponse\022\016\n\006campId\030\001 \001(\r\022\021\n\te"
    "rrorcode\030\002 \001(\r\022\020\n\010playerId\030\003 \001(\r\"i\n\036CMes"
    "sageChangeCampSuccesNotify\022\022\n\nplayerName"
    "\030\001 \001(\t\022\016\n\006campId\030\002 \001(\r\022\021\n\tsrcCampId\030\003 \001("
    "\r\022\020\n\010playerId\030\004 \001(\r\"A\n\035CMessageChangeCam"
    "p2GateNotice\022\020\n\010playerId\030\001 \001(\r\022\016\n\006campId"
    "\030\002 \001(\r\"E\n\"CMessageChangeCampConditionReq"
    "uest\022\020\n\010playerId\030\001 \001(\r\022\r\n\005npcId\030\002 \001(\r\"\356\001"
    "\n#CMessageChangeCampConditionResponse\022\022\n"
    "\nisHaveTeam\030\001 \001(\r\022\024\n\014isHaveFamily\030\002 \001(\r\022"
    "\025\n\risHaveCountry\030\003 \001(\r\022\024\n\014isHaveMaster\030\004"
    " \001(\r\022\026\n\016isHaveMarriage\030\005 \001(\r\022\025\n\risHavePa"
    "yMail\030\006 \001(\r\022\031\n\021ishaveEnoughLevel\030\007 \001(\r\022\021"
    "\n\terrorcode\030\010 \001(\r\022\023\n\013isHaveSworn\030\t \001(\r*\250"
    "\021\n\017EMCoreMessageID\022\035\n\030ID_L2C_NOTIFY_LOGI"
    "NERROR\020\201\010\022\034\n\027ID_G2C_NOTIFY_GATEERROR\020\202\010\022"
    "\037\n\032ID_C2L_REQUEST_LOGINSERVER\020\203\010\022\037\n\032ID_L"
    "2C_NOTIFY_WAITFORQUEUE\020\204\010\022\037\n\032ID_L2C_NOTI"
    "FY_REDIRECTGATE\020\205\010\022\035\n\030ID_C2G_REQUEST_LOG"
    "INGATE\020\206\010\022\036\n\031ID_G2C_RESPONSE_LOGINGATE\020\207"
    "\010\022\036\n\031ID_C2G_REQUEST_OBTAINCHAR\020\210\010\022\035\n\030ID_"
    "G2C_NOTIFY_OBTAINCHAR\020\211\010\022$\n\037ID_G2C_NOTIF"
    "Y_OBTAINCHARCOMPLTE\020\212\010\022\035\n\030ID_C2G_REQUEST"
    "_ENTERGAME\020\213\010\022\036\n\031ID_G2C_RESPONSE_ENTERGA"
    "ME\020\214\010\022\036\n\031ID_C2S_REQUEST_LOGINSCENE\020\215\010\022\037\n"
    "\032ID_S2C_RESPONSE_LOINGSCENE\020\216\010\022\037\n\032ID_C2S"
    "_REQUEST_RETURN2GATE\020\217\010\022 \n\033ID_S2C_RESPON"
    "SE_RETURN2GATE\020\220\010\022\036\n\031ID_C2G_REQUEST_CREA"
    "TECHAR\020\221\010\022\037\n\032ID_G2C_RESPONSE_CREATECHAR\020"
    "\222\010\022\036\n\031ID_C2G_REQUEST_DELETECHAR\020\223\010\022\037\n\032ID"
    "_G2C_RESPONSE_DELETECHAR\020\224\010\022!\n\034ID_S2C_NO"
    "TIFY_RECONNECTSCENE\020\225\010\022!\n\034ID_C2S_REQUEST"
    "_REDIRECTSCENE\020\226\010\022\"\n\035ID_S2C_RESPONSE_RED"
    "IRECTSCENE\020\227\010\022\035\n\030ID_C2S_REQUEST_LEAVEGAM"
    "E\020\230\010\022\036\n\031ID_S2C_RESPONSE_LEAVEGAME\020\231\010\022\027\n\022"
    "ID_S2C_NOTIFY_KICK\020\232\010\022\030\n\023ID_C2S_REQUEST_"
    "PING\020\233\010\022\031\n\024ID_S2C_RESPONSE_PING\020\234\010\022\035\n\030ID"
    "_G2S_NOTIFY_KICKPLAYER\020\235\010\022\035\n\030ID_S2C_REDI"
    "RECT_ERR_CODE\020\236\010\022\035\n\030ID_G2S_NOTIFY_LOGINQ"
    "UEUE\020\237\010\022 \n\033ID_C2G_REQUEST_CHECKROLEPWD\020\240"
    "\010\022!\n\034ID_G2C_RESPONSE_CHECKROLEPWD\020\241\010\022\036\n\031"
    "ID_C2S_REQUEST_CLIENTINFO\020\242\010\022\035\n\030ID_S2G_C"
    "ANCEL_LOGINQUEUE\020\243\010\022$\n\037ID_C2S_NOTIFY_CLI"
    "ENTANTIBOTDATA\020\244\010\022$\n\037ID_S2C_NOTIFY_SERVE"
    "RANTIBOTDATA\020\245\010\022(\n#ID_C2S_NOTIFY_CLIENTA"
    "NTIBOTSTARTRET\020\246\010\022\035\n\030ID_S2C_NOTIFY_DISCO"
    "NNECT\020\247\010\022\033\n\026ID_S2C_NOTIFY_USERAUTH\020\250\010\022\034\n"
    "\027ID_C2S_REQUEST_USERAUTH\020\251\010\022\035\n\030ID_S2C_RE"
    "SPONSE_USERAUTH\020\260\010\022$\n\037ID_C2G_REQUEST_CAN"
    "CELROLEDELETE\020\261\010\022%\n ID_G2C_RESPONSE_CANC"
    "ELROLEDELETE\020\262\010\022#\n\036ID_C2G_REQUEST_QUESTI"
    "ONREQUIRE\020\263\010\022$\n\037ID_G2C_RESPONSE_QUESTION"
    "REQUIRE\020\264\010\022\"\n\035ID_C2G_REQUEST_QUESTIONANS"
    "WER\020\265\010\022#\n\036ID_G2C_RESPONSE_QUESTIONANSWER"
    "\020\266\010\022\033\n\026ID_C2A_REQUEST_CERTIFY\020\300\010\022\034\n\027ID_A"
    "2C_RESPONSE_CERTIFY\020\301\010\022 \n\033ID_A2L_REQUEST"
    "_CERTIFYQUERY\020\302\010\022!\n\034ID_L2A_RESPONSE_CERT"
    "IFYQUERY\020\303\010\022 \n\033ID_L2A_REQUEST_CERTIFYTOK"
    "EN\020\304\010\022!\n\034ID_A2L_RESPONSE_CERTIFYTOKEN\020\305\010"
    "\022\035\n\030ID_L2G_REQUEST_ROLEQUERY\020\306\010\022\036\n\031ID_G2"
    "L_RESPONSE_ROLEQUERY\020\307\010\022\034\n\027ID_L2A_NOTIFY"
    "_ROLEQUERY\020\310\010\022\037\n\032ID_L2A_NOTIFY_ONLINESTA"
    "TUS\020\311\010\022\037\n\032ID_C2S_REQUEST_INVITE_CAMP\020\320\010\022"
    "\037\n\032ID_S2C_RSPONSE_INVITE_CAMP\020\321\010\022\037\n\032ID_C"
    "2S_REQUEST_CHANGE_CAMP\020\322\010\022\037\n\032ID_S2C_RSPO"
    "NSE_CHANGE_CAMP\020\323\010\022\'\n\"ID_S2C_NOTIFY_CHAN"
    "GE_CAMP_SUCCESED\020\324\010\022\036\n\031ID_S2G_CHANGE_CAM"
    "P_NOTICE\020\325\010\022)\n$ID_C2S_REQUEST_CHANGE_CAM"
    "P_CONDITION\020\326\010\022)\n$ID_S2C_RSPONSE_CHANGE_"
    "CAMP_CONDITION\020\327\010B\002H\001", 9981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "coremessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageRouter::default_instance_ = new CMessageRouter();
  CMessageRedirectErr::default_instance_ = new CMessageRedirectErr();
  CMessageLoginErrorNotice::default_instance_ = new CMessageLoginErrorNotice();
  CMessageGateErrorNotice::default_instance_ = new CMessageGateErrorNotice();
  CMessageLoginServerRequest::default_instance_ = new CMessageLoginServerRequest();
  CMessageWaitForLoginNotice::default_instance_ = new CMessageWaitForLoginNotice();
  CMessageRedirectGateNotice::default_instance_ = new CMessageRedirectGateNotice();
  CMessageLoginGateRequest::default_instance_ = new CMessageLoginGateRequest();
  CMessageLoginGateResponse::default_instance_ = new CMessageLoginGateResponse();
  CMessageObtainCharRequest::default_instance_ = new CMessageObtainCharRequest();
  PBCharProfile::default_instance_ = new PBCharProfile();
  CMessageObtainCharNotice::default_instance_ = new CMessageObtainCharNotice();
  CMessageObtainCharCompleteNotice::default_instance_ = new CMessageObtainCharCompleteNotice();
  CMessageEnterGameRequest::default_instance_ = new CMessageEnterGameRequest();
  CMessageEnterGameResponse::default_instance_ = new CMessageEnterGameResponse();
  CMessageLoginSceneRequest::default_instance_ = new CMessageLoginSceneRequest();
  CMessageLoginSceneResponse::default_instance_ = new CMessageLoginSceneResponse();
  CMessageReturn2GateRequest::default_instance_ = new CMessageReturn2GateRequest();
  CMessageReturn2GateResponse::default_instance_ = new CMessageReturn2GateResponse();
  CMessageCreateCharRequest::default_instance_ = new CMessageCreateCharRequest();
  CMessageCreateCharResponse::default_instance_ = new CMessageCreateCharResponse();
  CMessageDeleteCharRequest::default_instance_ = new CMessageDeleteCharRequest();
  CMessageDeleteCharResponse::default_instance_ = new CMessageDeleteCharResponse();
  CMessageReconnectSceneNotice::default_instance_ = new CMessageReconnectSceneNotice();
  CMessageRedirectSceneRequest::default_instance_ = new CMessageRedirectSceneRequest();
  CMessageRedirectSceneResponse::default_instance_ = new CMessageRedirectSceneResponse();
  CMessageLeaveGameRequest::default_instance_ = new CMessageLeaveGameRequest();
  CMessageLeaveGameResponse::default_instance_ = new CMessageLeaveGameResponse();
  CMessageKickoutNotice::default_instance_ = new CMessageKickoutNotice();
  CMessageClientPingServerRequest::default_instance_ = new CMessageClientPingServerRequest();
  CMessageClientPingServerResponse::default_instance_ = new CMessageClientPingServerResponse();
  CMessageGateKickPlayerNotify::default_instance_ = new CMessageGateKickPlayerNotify();
  CMessageQueuePlayerNotify::default_instance_ = new CMessageQueuePlayerNotify();
  CMessagePlayerCancelLoginQueue::default_instance_ = new CMessagePlayerCancelLoginQueue();
  CMessageCheckRolePwdRequest::default_instance_ = new CMessageCheckRolePwdRequest();
  CMessageCheckRolePwdResponse::default_instance_ = new CMessageCheckRolePwdResponse();
  CMessageSendClientInfoRequest::default_instance_ = new CMessageSendClientInfoRequest();
  CMessageSendAntiBotDataToServerNotify::default_instance_ = new CMessageSendAntiBotDataToServerNotify();
  CMessageSendAntiBotDataToClientNotify::default_instance_ = new CMessageSendAntiBotDataToClientNotify();
  CMessageClientAntiBotStartRetNotify::default_instance_ = new CMessageClientAntiBotStartRetNotify();
  CMessageDisconnectNotify::default_instance_ = new CMessageDisconnectNotify();
  CMessageUserAuthNotify::default_instance_ = new CMessageUserAuthNotify();
  CMessageUserAuthRequest::default_instance_ = new CMessageUserAuthRequest();
  CMessageUserAuthResponse::default_instance_ = new CMessageUserAuthResponse();
  CMessageCancelDeleteRoleRequest::default_instance_ = new CMessageCancelDeleteRoleRequest();
  CMessageCancelDeleteRoleResponse::default_instance_ = new CMessageCancelDeleteRoleResponse();
  CMessageQuestionRequireRequest::default_instance_ = new CMessageQuestionRequireRequest();
  CMessageQuestionRequireResponse::default_instance_ = new CMessageQuestionRequireResponse();
  CMessageQuestionAnswerRequest::default_instance_ = new CMessageQuestionAnswerRequest();
  CMessageQuestionAnswerResponse::default_instance_ = new CMessageQuestionAnswerResponse();
  CMessageLoginServerInfo::default_instance_ = new CMessageLoginServerInfo();
  CMessageCertifyRequest::default_instance_ = new CMessageCertifyRequest();
  CMessageCertifyResponse::default_instance_ = new CMessageCertifyResponse();
  CMessageCertifyQueryRequest::default_instance_ = new CMessageCertifyQueryRequest();
  CMessageCertifyQueryResponse::default_instance_ = new CMessageCertifyQueryResponse();
  CMessageCertifyTokenRequest::default_instance_ = new CMessageCertifyTokenRequest();
  CMessageCertifyTokenResponse::default_instance_ = new CMessageCertifyTokenResponse();
  CMessageRoleQueryRequest::default_instance_ = new CMessageRoleQueryRequest();
  CMessageRoleQueryResponse::default_instance_ = new CMessageRoleQueryResponse();
  CMessageRoleQueryNotify::default_instance_ = new CMessageRoleQueryNotify();
  CMessageOnlineStatusNotify::default_instance_ = new CMessageOnlineStatusNotify();
  CMessageInviteCampRequest::default_instance_ = new CMessageInviteCampRequest();
  CampLevel::default_instance_ = new CampLevel();
  CMessageInviteCampResponse::default_instance_ = new CMessageInviteCampResponse();
  CMessageChangeSingleCampRequest::default_instance_ = new CMessageChangeSingleCampRequest();
  CMessageChangeSingleCampResponse::default_instance_ = new CMessageChangeSingleCampResponse();
  CMessageChangeCampSuccesNotify::default_instance_ = new CMessageChangeCampSuccesNotify();
  CMessageChangeCamp2GateNotice::default_instance_ = new CMessageChangeCamp2GateNotice();
  CMessageChangeCampConditionRequest::default_instance_ = new CMessageChangeCampConditionRequest();
  CMessageChangeCampConditionResponse::default_instance_ = new CMessageChangeCampConditionResponse();
  CMessageRouter::default_instance_->InitAsDefaultInstance();
  CMessageRedirectErr::default_instance_->InitAsDefaultInstance();
  CMessageLoginErrorNotice::default_instance_->InitAsDefaultInstance();
  CMessageGateErrorNotice::default_instance_->InitAsDefaultInstance();
  CMessageLoginServerRequest::default_instance_->InitAsDefaultInstance();
  CMessageWaitForLoginNotice::default_instance_->InitAsDefaultInstance();
  CMessageRedirectGateNotice::default_instance_->InitAsDefaultInstance();
  CMessageLoginGateRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoginGateResponse::default_instance_->InitAsDefaultInstance();
  CMessageObtainCharRequest::default_instance_->InitAsDefaultInstance();
  PBCharProfile::default_instance_->InitAsDefaultInstance();
  CMessageObtainCharNotice::default_instance_->InitAsDefaultInstance();
  CMessageObtainCharCompleteNotice::default_instance_->InitAsDefaultInstance();
  CMessageEnterGameRequest::default_instance_->InitAsDefaultInstance();
  CMessageEnterGameResponse::default_instance_->InitAsDefaultInstance();
  CMessageLoginSceneRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoginSceneResponse::default_instance_->InitAsDefaultInstance();
  CMessageReturn2GateRequest::default_instance_->InitAsDefaultInstance();
  CMessageReturn2GateResponse::default_instance_->InitAsDefaultInstance();
  CMessageCreateCharRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreateCharResponse::default_instance_->InitAsDefaultInstance();
  CMessageDeleteCharRequest::default_instance_->InitAsDefaultInstance();
  CMessageDeleteCharResponse::default_instance_->InitAsDefaultInstance();
  CMessageReconnectSceneNotice::default_instance_->InitAsDefaultInstance();
  CMessageRedirectSceneRequest::default_instance_->InitAsDefaultInstance();
  CMessageRedirectSceneResponse::default_instance_->InitAsDefaultInstance();
  CMessageLeaveGameRequest::default_instance_->InitAsDefaultInstance();
  CMessageLeaveGameResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickoutNotice::default_instance_->InitAsDefaultInstance();
  CMessageClientPingServerRequest::default_instance_->InitAsDefaultInstance();
  CMessageClientPingServerResponse::default_instance_->InitAsDefaultInstance();
  CMessageGateKickPlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessageQueuePlayerNotify::default_instance_->InitAsDefaultInstance();
  CMessagePlayerCancelLoginQueue::default_instance_->InitAsDefaultInstance();
  CMessageCheckRolePwdRequest::default_instance_->InitAsDefaultInstance();
  CMessageCheckRolePwdResponse::default_instance_->InitAsDefaultInstance();
  CMessageSendClientInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageSendAntiBotDataToServerNotify::default_instance_->InitAsDefaultInstance();
  CMessageSendAntiBotDataToClientNotify::default_instance_->InitAsDefaultInstance();
  CMessageClientAntiBotStartRetNotify::default_instance_->InitAsDefaultInstance();
  CMessageDisconnectNotify::default_instance_->InitAsDefaultInstance();
  CMessageUserAuthNotify::default_instance_->InitAsDefaultInstance();
  CMessageUserAuthRequest::default_instance_->InitAsDefaultInstance();
  CMessageUserAuthResponse::default_instance_->InitAsDefaultInstance();
  CMessageCancelDeleteRoleRequest::default_instance_->InitAsDefaultInstance();
  CMessageCancelDeleteRoleResponse::default_instance_->InitAsDefaultInstance();
  CMessageQuestionRequireRequest::default_instance_->InitAsDefaultInstance();
  CMessageQuestionRequireResponse::default_instance_->InitAsDefaultInstance();
  CMessageQuestionAnswerRequest::default_instance_->InitAsDefaultInstance();
  CMessageQuestionAnswerResponse::default_instance_->InitAsDefaultInstance();
  CMessageLoginServerInfo::default_instance_->InitAsDefaultInstance();
  CMessageCertifyRequest::default_instance_->InitAsDefaultInstance();
  CMessageCertifyResponse::default_instance_->InitAsDefaultInstance();
  CMessageCertifyQueryRequest::default_instance_->InitAsDefaultInstance();
  CMessageCertifyQueryResponse::default_instance_->InitAsDefaultInstance();
  CMessageCertifyTokenRequest::default_instance_->InitAsDefaultInstance();
  CMessageCertifyTokenResponse::default_instance_->InitAsDefaultInstance();
  CMessageRoleQueryRequest::default_instance_->InitAsDefaultInstance();
  CMessageRoleQueryResponse::default_instance_->InitAsDefaultInstance();
  CMessageRoleQueryNotify::default_instance_->InitAsDefaultInstance();
  CMessageOnlineStatusNotify::default_instance_->InitAsDefaultInstance();
  CMessageInviteCampRequest::default_instance_->InitAsDefaultInstance();
  CampLevel::default_instance_->InitAsDefaultInstance();
  CMessageInviteCampResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeSingleCampRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeSingleCampResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeCampSuccesNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeCamp2GateNotice::default_instance_->InitAsDefaultInstance();
  CMessageChangeCampConditionRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeCampConditionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_coremessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_coremessage_5fpb_2ehxx {
  StaticDescriptorInitializer_coremessage_5fpb_2ehxx() {
    protobuf_AddDesc_coremessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_coremessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* EMCoreMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMCoreMessageID_descriptor_;
}
bool EMCoreMessageID_IsValid(int value) {
  switch(value) {
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageRouter_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouter_MSGID_descriptor_;
}
bool CMessageRouter_MSGID_IsValid(int value) {
  switch(value) {
    case 512:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageRouter_MSGID CMessageRouter::MSGROUTER;
const CMessageRouter_MSGID CMessageRouter::MSGID_MIN;
const CMessageRouter_MSGID CMessageRouter::MSGID_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMessageRouter_EMRouterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouter_EMRouterType_descriptor_;
}
bool CMessageRouter_EMRouterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageRouter_EMRouterType CMessageRouter::ROUTER_NAME;
const CMessageRouter_EMRouterType CMessageRouter::ROUTER_CHAR;
const CMessageRouter_EMRouterType CMessageRouter::EMRouterType_MIN;
const CMessageRouter_EMRouterType CMessageRouter::EMRouterType_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMessageRouter_EMRouterReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouter_EMRouterReason_descriptor_;
}
bool CMessageRouter_EMRouterReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageRouter_EMRouterReason CMessageRouter::REASON_SUCCESS;
const CMessageRouter_EMRouterReason CMessageRouter::REASON_REDIRECT;
const CMessageRouter_EMRouterReason CMessageRouter::REASON_OFFLINE;
const CMessageRouter_EMRouterReason CMessageRouter::EMRouterReason_MIN;
const CMessageRouter_EMRouterReason CMessageRouter::EMRouterReason_MAX;
#endif  // _MSC_VER
const ::std::string CMessageRouter::_default_srcname_;
const ::std::string CMessageRouter::_default_desname_;
#ifndef _MSC_VER
const int CMessageRouter::kRouterReasonFieldNumber;
const int CMessageRouter::kSend2PlayerFieldNumber;
const int CMessageRouter::kSendBackFieldNumber;
const int CMessageRouter::kRouterTypeFieldNumber;
const int CMessageRouter::kSrcCharIDFieldNumber;
const int CMessageRouter::kDesCharIDFieldNumber;
const int CMessageRouter::kSrcNameFieldNumber;
const int CMessageRouter::kDesNameFieldNumber;
#endif  // !_MSC_VER

CMessageRouter::CMessageRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRouter::InitAsDefaultInstance() {}

CMessageRouter::CMessageRouter(const CMessageRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRouter::SharedCtor() {
  _cached_size_ = 0;
  routerreason_ = 0u;
  send2player_ = 0u;
  sendback_ = 0u;
  routertype_ = 0u;
  srccharid_ = 0u;
  descharid_ = 0u;
  srcname_ = const_cast< ::std::string*>(&_default_srcname_);
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRouter::~CMessageRouter() {
  SharedDtor();
}

void CMessageRouter::SharedDtor() {
  if (srcname_ != &_default_srcname_) {
    delete srcname_;
  }
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouter_descriptor_;
}

const CMessageRouter& CMessageRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRouter* CMessageRouter::default_instance_ = NULL;

CMessageRouter* CMessageRouter::New() const {
  return new CMessageRouter;
}

void CMessageRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routerreason_ = 0u;
    send2player_ = 0u;
    sendback_ = 0u;
    routertype_ = 0u;
    srccharid_ = 0u;
    descharid_ = 0u;
    if (_has_bit(6)) {
      if (srcname_ != &_default_srcname_) {
        srcname_->clear();
      }
    }
    if (_has_bit(7)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RouterReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &routerreason_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Send2Player;
        break;
      }
      
      // optional uint32 Send2Player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Send2Player:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &send2player_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SendBack;
        break;
      }
      
      // optional uint32 SendBack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SendBack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sendback_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_RouterType;
        break;
      }
      
      // optional uint32 RouterType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RouterType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &routertype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_SrcName;
        break;
      }
      
      // optional string SrcName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srcname()));
        if (input->ExpectTag(66)) goto parse_DesName;
        break;
      }
      
      // optional string DesName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_DesName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRouter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RouterReason = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->routerreason(), output);
  }
  
  // optional uint32 Send2Player = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->send2player(), output);
  }
  
  // optional uint32 SendBack = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sendback(), output);
  }
  
  // optional uint32 RouterType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->routertype(), output);
  }
  
  // optional uint32 SrcCharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->srccharid(), output);
  }
  
  // optional uint32 DesCharID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->descharid(), output);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->srcname(), output);
  }
  
  // optional string DesName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->desname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RouterReason = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->routerreason(), target);
  }
  
  // optional uint32 Send2Player = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->send2player(), target);
  }
  
  // optional uint32 SendBack = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sendback(), target);
  }
  
  // optional uint32 RouterType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->routertype(), target);
  }
  
  // optional uint32 SrcCharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->srccharid(), target);
  }
  
  // optional uint32 DesCharID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->descharid(), target);
  }
  
  // optional string SrcName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->srcname(), target);
  }
  
  // optional string DesName = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->desname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRouter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RouterReason = 1;
    if (has_routerreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->routerreason());
    }
    
    // optional uint32 Send2Player = 2;
    if (has_send2player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->send2player());
    }
    
    // optional uint32 SendBack = 3;
    if (has_sendback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sendback());
    }
    
    // optional uint32 RouterType = 4;
    if (has_routertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->routertype());
    }
    
    // optional uint32 SrcCharID = 5;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 DesCharID = 6;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
    // optional string SrcName = 7;
    if (has_srcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srcname());
    }
    
    // optional string DesName = 8;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRouter::MergeFrom(const CMessageRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_routerreason(from.routerreason());
    }
    if (from._has_bit(1)) {
      set_send2player(from.send2player());
    }
    if (from._has_bit(2)) {
      set_sendback(from.sendback());
    }
    if (from._has_bit(3)) {
      set_routertype(from.routertype());
    }
    if (from._has_bit(4)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(5)) {
      set_descharid(from.descharid());
    }
    if (from._has_bit(6)) {
      set_srcname(from.srcname());
    }
    if (from._has_bit(7)) {
      set_desname(from.desname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRouter::CopyFrom(const CMessageRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRouter::Swap(CMessageRouter* other) {
  if (other != this) {
    std::swap(routerreason_, other->routerreason_);
    std::swap(send2player_, other->send2player_);
    std::swap(sendback_, other->sendback_);
    std::swap(routertype_, other->routertype_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(descharid_, other->descharid_);
    std::swap(srcname_, other->srcname_);
    std::swap(desname_, other->desname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRouter::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRouter::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRouter::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouter_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRedirectErr::kErrorCodeFieldNumber;
const int CMessageRedirectErr::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectErr::CMessageRedirectErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectErr::InitAsDefaultInstance() {}

CMessageRedirectErr::CMessageRedirectErr(const CMessageRedirectErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectErr::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectErr::~CMessageRedirectErr() {
  SharedDtor();
}

void CMessageRedirectErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectErr_descriptor_;
}

const CMessageRedirectErr& CMessageRedirectErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectErr* CMessageRedirectErr::default_instance_ = NULL;

CMessageRedirectErr* CMessageRedirectErr::New() const {
  return new CMessageRedirectErr;
}

void CMessageRedirectErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectErr::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->errorcode(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrorCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->errorcode(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectErr::MergeFrom(const CMessageRedirectErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectErr::CopyFrom(const CMessageRedirectErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectErr::Swap(CMessageRedirectErr* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectErr::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectErr::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectErr::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectErr_reflection_;
}

// ===================================================================

const ::std::string CMessageLoginErrorNotice::_default_errorstring_;
#ifndef _MSC_VER
const int CMessageLoginErrorNotice::kErrorStringFieldNumber;
const int CMessageLoginErrorNotice::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLoginErrorNotice::CMessageLoginErrorNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginErrorNotice::InitAsDefaultInstance() {}

CMessageLoginErrorNotice::CMessageLoginErrorNotice(const CMessageLoginErrorNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginErrorNotice::SharedCtor() {
  _cached_size_ = 0;
  errorstring_ = const_cast< ::std::string*>(&_default_errorstring_);
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginErrorNotice::~CMessageLoginErrorNotice() {
  SharedDtor();
}

void CMessageLoginErrorNotice::SharedDtor() {
  if (errorstring_ != &_default_errorstring_) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginErrorNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginErrorNotice_descriptor_;
}

const CMessageLoginErrorNotice& CMessageLoginErrorNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginErrorNotice* CMessageLoginErrorNotice::default_instance_ = NULL;

CMessageLoginErrorNotice* CMessageLoginErrorNotice::New() const {
  return new CMessageLoginErrorNotice;
}

void CMessageLoginErrorNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (errorstring_ != &_default_errorstring_) {
        errorstring_->clear();
      }
    }
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginErrorNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string ErrorString = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_errorstring()));
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginErrorNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginErrorNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ErrorString = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->errorstring(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginErrorNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ErrorString = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->errorstring(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginErrorNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ErrorString = 1;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->errorstring());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginErrorNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginErrorNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginErrorNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginErrorNotice::MergeFrom(const CMessageLoginErrorNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errorstring(from.errorstring());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginErrorNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginErrorNotice::CopyFrom(const CMessageLoginErrorNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginErrorNotice::Swap(CMessageLoginErrorNotice* other) {
  if (other != this) {
    std::swap(errorstring_, other->errorstring_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginErrorNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginErrorNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginErrorNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginErrorNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageGateErrorNotice::_default_errorstring_;
#ifndef _MSC_VER
const int CMessageGateErrorNotice::kKeepAliveFieldNumber;
const int CMessageGateErrorNotice::kErrorStringFieldNumber;
const int CMessageGateErrorNotice::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageGateErrorNotice::CMessageGateErrorNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateErrorNotice::InitAsDefaultInstance() {}

CMessageGateErrorNotice::CMessageGateErrorNotice(const CMessageGateErrorNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateErrorNotice::SharedCtor() {
  _cached_size_ = 0;
  keepalive_ = 0;
  errorstring_ = const_cast< ::std::string*>(&_default_errorstring_);
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateErrorNotice::~CMessageGateErrorNotice() {
  SharedDtor();
}

void CMessageGateErrorNotice::SharedDtor() {
  if (errorstring_ != &_default_errorstring_) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateErrorNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateErrorNotice_descriptor_;
}

const CMessageGateErrorNotice& CMessageGateErrorNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateErrorNotice* CMessageGateErrorNotice::default_instance_ = NULL;

CMessageGateErrorNotice* CMessageGateErrorNotice::New() const {
  return new CMessageGateErrorNotice;
}

void CMessageGateErrorNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keepalive_ = 0;
    if (_has_bit(1)) {
      if (errorstring_ != &_default_errorstring_) {
        errorstring_->clear();
      }
    }
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateErrorNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 KeepAlive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &keepalive_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ErrorString;
        break;
      }
      
      // optional string ErrorString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ErrorString:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_errorstring()));
        if (input->ExpectTag(24)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateErrorNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateErrorNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 KeepAlive = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->keepalive(), output);
  }
  
  // optional string ErrorString = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->errorstring(), output);
  }
  
  // optional int32 ErrorCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateErrorNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 KeepAlive = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->keepalive(), target);
  }
  
  // optional string ErrorString = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->errorstring(), target);
  }
  
  // optional int32 ErrorCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateErrorNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 KeepAlive = 1;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->keepalive());
    }
    
    // optional string ErrorString = 2;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->errorstring());
    }
    
    // optional int32 ErrorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateErrorNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateErrorNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateErrorNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateErrorNotice::MergeFrom(const CMessageGateErrorNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_keepalive(from.keepalive());
    }
    if (from._has_bit(1)) {
      set_errorstring(from.errorstring());
    }
    if (from._has_bit(2)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateErrorNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateErrorNotice::CopyFrom(const CMessageGateErrorNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateErrorNotice::Swap(CMessageGateErrorNotice* other) {
  if (other != this) {
    std::swap(keepalive_, other->keepalive_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateErrorNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateErrorNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateErrorNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateErrorNotice_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageLoginServerRequest_EType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerRequest_EType_descriptor_;
}
bool CMessageLoginServerRequest_EType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageLoginServerRequest_EType CMessageLoginServerRequest::TYPE_CLIENT;
const CMessageLoginServerRequest_EType CMessageLoginServerRequest::TYPE_GLOBAL;
const CMessageLoginServerRequest_EType CMessageLoginServerRequest::EType_MIN;
const CMessageLoginServerRequest_EType CMessageLoginServerRequest::EType_MAX;
#endif  // _MSC_VER
const ::std::string CMessageLoginServerRequest::_default_username_;
const ::std::string CMessageLoginServerRequest::_default_md5code_;
const ::std::string CMessageLoginServerRequest::_default_userpsw_;
const ::std::string CMessageLoginServerRequest::_default_matrixcode_;
const ::std::string CMessageLoginServerRequest::_default_mac_;
const ::std::string CMessageLoginServerRequest::_default_matrixcoord_;
#ifndef _MSC_VER
const int CMessageLoginServerRequest::kUserNameFieldNumber;
const int CMessageLoginServerRequest::kMd5CodeFieldNumber;
const int CMessageLoginServerRequest::kTaskVersionFieldNumber;
const int CMessageLoginServerRequest::kUserPswFieldNumber;
const int CMessageLoginServerRequest::kVersionFieldNumber;
const int CMessageLoginServerRequest::kSourceIDFieldNumber;
const int CMessageLoginServerRequest::kTemplateVersionFieldNumber;
const int CMessageLoginServerRequest::kMatrixTypeFieldNumber;
const int CMessageLoginServerRequest::kMatrixCodeFieldNumber;
const int CMessageLoginServerRequest::kMacFieldNumber;
const int CMessageLoginServerRequest::kMatrixCoordFieldNumber;
const int CMessageLoginServerRequest::kTypeFieldNumber;
const int CMessageLoginServerRequest::kAccountIdFieldNumber;
const int CMessageLoginServerRequest::kTokenFieldNumber;
const int CMessageLoginServerRequest::kCpuidFieldNumber;
const int CMessageLoginServerRequest::kDiskidFieldNumber;
#endif  // !_MSC_VER

CMessageLoginServerRequest::CMessageLoginServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginServerRequest::InitAsDefaultInstance() {}

CMessageLoginServerRequest::CMessageLoginServerRequest(const CMessageLoginServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginServerRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&_default_username_);
  md5code_ = const_cast< ::std::string*>(&_default_md5code_);
  taskversion_ = 0u;
  userpsw_ = const_cast< ::std::string*>(&_default_userpsw_);
  version_ = 0u;
  sourceid_ = 0;
  templateversion_ = 0u;
  matrixtype_ = 0u;
  matrixcode_ = const_cast< ::std::string*>(&_default_matrixcode_);
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  matrixcoord_ = const_cast< ::std::string*>(&_default_matrixcoord_);
  type_ = 0;
  accountid_ = 0u;
  token_ = 0u;
  cpuid_ = 0u;
  diskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginServerRequest::~CMessageLoginServerRequest() {
  SharedDtor();
}

void CMessageLoginServerRequest::SharedDtor() {
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (md5code_ != &_default_md5code_) {
    delete md5code_;
  }
  if (userpsw_ != &_default_userpsw_) {
    delete userpsw_;
  }
  if (matrixcode_ != &_default_matrixcode_) {
    delete matrixcode_;
  }
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (matrixcoord_ != &_default_matrixcoord_) {
    delete matrixcoord_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerRequest_descriptor_;
}

const CMessageLoginServerRequest& CMessageLoginServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginServerRequest* CMessageLoginServerRequest::default_instance_ = NULL;

CMessageLoginServerRequest* CMessageLoginServerRequest::New() const {
  return new CMessageLoginServerRequest;
}

void CMessageLoginServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    if (_has_bit(1)) {
      if (md5code_ != &_default_md5code_) {
        md5code_->clear();
      }
    }
    taskversion_ = 0u;
    if (_has_bit(3)) {
      if (userpsw_ != &_default_userpsw_) {
        userpsw_->clear();
      }
    }
    version_ = 0u;
    sourceid_ = 0;
    templateversion_ = 0u;
    matrixtype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (matrixcode_ != &_default_matrixcode_) {
        matrixcode_->clear();
      }
    }
    if (_has_bit(9)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
    if (_has_bit(10)) {
      if (matrixcoord_ != &_default_matrixcoord_) {
        matrixcoord_->clear();
      }
    }
    type_ = 0;
    accountid_ = 0u;
    token_ = 0u;
    cpuid_ = 0u;
    diskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_username()));
        if (input->ExpectTag(18)) goto parse_Md5Code;
        break;
      }
      
      // optional string Md5Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Md5Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_md5code()));
        if (input->ExpectTag(24)) goto parse_TaskVersion;
        break;
      }
      
      // optional uint32 TaskVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_UserPsw;
        break;
      }
      
      // optional string UserPsw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_UserPsw:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_userpsw()));
        if (input->ExpectTag(40)) goto parse_Version;
        break;
      }
      
      // optional uint32 Version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Version:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &version_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SourceID;
        break;
      }
      
      // optional int32 SourceID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SourceID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sourceid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TemplateVersion;
        break;
      }
      
      // optional uint32 TemplateVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TemplateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MatrixType;
        break;
      }
      
      // optional uint32 MatrixType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MatrixType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &matrixtype_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_MatrixCode;
        break;
      }
      
      // optional string MatrixCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MatrixCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcode()));
        if (input->ExpectTag(82)) goto parse_Mac;
        break;
      }
      
      // optional string Mac = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectTag(90)) goto parse_MatrixCoord;
        break;
      }
      
      // optional string MatrixCoord = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MatrixCoord:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcoord()));
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }
      
      // optional .CMessageLoginServerRequest.EType type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageLoginServerRequest_EType_IsValid(value)) {
          set_type(static_cast< ::CMessageLoginServerRequest_EType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(12, value);
        }
        if (input->ExpectTag(104)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_token;
        break;
      }
      
      // optional uint32 token = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_token:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &token_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_cpuid;
        break;
      }
      
      // optional uint32 cpuid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cpuid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cpuid_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_diskid;
        break;
      }
      
      // optional uint32 diskid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diskid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diskid_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginServerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string UserName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->username(), output);
  }
  
  // optional string Md5Code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->md5code(), output);
  }
  
  // optional uint32 TaskVersion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->taskversion(), output);
  }
  
  // optional string UserPsw = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->userpsw(), output);
  }
  
  // optional uint32 Version = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->version(), output);
  }
  
  // optional int32 SourceID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->sourceid(), output);
  }
  
  // optional uint32 TemplateVersion = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->templateversion(), output);
  }
  
  // optional uint32 MatrixType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->matrixtype(), output);
  }
  
  // optional string MatrixCode = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->matrixcode(), output);
  }
  
  // optional string Mac = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->mac(), output);
  }
  
  // optional string MatrixCoord = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->matrixcoord(), output);
  }
  
  // optional .CMessageLoginServerRequest.EType type = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(12, this->type(), output);
  }
  
  // optional uint32 accountId = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->accountid(), output);
  }
  
  // optional uint32 token = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->token(), output);
  }
  
  // optional uint32 cpuid = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->cpuid(), output);
  }
  
  // optional uint32 diskid = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->diskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->username(), target);
  }
  
  // optional string Md5Code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->md5code(), target);
  }
  
  // optional uint32 TaskVersion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->taskversion(), target);
  }
  
  // optional string UserPsw = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->userpsw(), target);
  }
  
  // optional uint32 Version = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->version(), target);
  }
  
  // optional int32 SourceID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->sourceid(), target);
  }
  
  // optional uint32 TemplateVersion = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->templateversion(), target);
  }
  
  // optional uint32 MatrixType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->matrixtype(), target);
  }
  
  // optional string MatrixCode = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->matrixcode(), target);
  }
  
  // optional string Mac = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->mac(), target);
  }
  
  // optional string MatrixCoord = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->matrixcoord(), target);
  }
  
  // optional .CMessageLoginServerRequest.EType type = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(12, this->type(), target);
  }
  
  // optional uint32 accountId = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->accountid(), target);
  }
  
  // optional uint32 token = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->token(), target);
  }
  
  // optional uint32 cpuid = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->cpuid(), target);
  }
  
  // optional uint32 diskid = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->diskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->username());
    }
    
    // optional string Md5Code = 2;
    if (has_md5code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->md5code());
    }
    
    // optional uint32 TaskVersion = 3;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
    // optional string UserPsw = 4;
    if (has_userpsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->userpsw());
    }
    
    // optional uint32 Version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->version());
    }
    
    // optional int32 SourceID = 6;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sourceid());
    }
    
    // optional uint32 TemplateVersion = 7;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
    // optional uint32 MatrixType = 8;
    if (has_matrixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->matrixtype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string MatrixCode = 9;
    if (has_matrixcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcode());
    }
    
    // optional string Mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
    // optional string MatrixCoord = 11;
    if (has_matrixcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcoord());
    }
    
    // optional .CMessageLoginServerRequest.EType type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->type());
    }
    
    // optional uint32 accountId = 13;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 token = 14;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->token());
    }
    
    // optional uint32 cpuid = 15;
    if (has_cpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cpuid());
    }
    
    // optional uint32 diskid = 16;
    if (has_diskid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginServerRequest::MergeFrom(const CMessageLoginServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_username(from.username());
    }
    if (from._has_bit(1)) {
      set_md5code(from.md5code());
    }
    if (from._has_bit(2)) {
      set_taskversion(from.taskversion());
    }
    if (from._has_bit(3)) {
      set_userpsw(from.userpsw());
    }
    if (from._has_bit(4)) {
      set_version(from.version());
    }
    if (from._has_bit(5)) {
      set_sourceid(from.sourceid());
    }
    if (from._has_bit(6)) {
      set_templateversion(from.templateversion());
    }
    if (from._has_bit(7)) {
      set_matrixtype(from.matrixtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_matrixcode(from.matrixcode());
    }
    if (from._has_bit(9)) {
      set_mac(from.mac());
    }
    if (from._has_bit(10)) {
      set_matrixcoord(from.matrixcoord());
    }
    if (from._has_bit(11)) {
      set_type(from.type());
    }
    if (from._has_bit(12)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(13)) {
      set_token(from.token());
    }
    if (from._has_bit(14)) {
      set_cpuid(from.cpuid());
    }
    if (from._has_bit(15)) {
      set_diskid(from.diskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerRequest::CopyFrom(const CMessageLoginServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerRequest::Swap(CMessageLoginServerRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(md5code_, other->md5code_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(userpsw_, other->userpsw_);
    std::swap(version_, other->version_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(templateversion_, other->templateversion_);
    std::swap(matrixtype_, other->matrixtype_);
    std::swap(matrixcode_, other->matrixcode_);
    std::swap(mac_, other->mac_);
    std::swap(matrixcoord_, other->matrixcoord_);
    std::swap(type_, other->type_);
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    std::swap(cpuid_, other->cpuid_);
    std::swap(diskid_, other->diskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginServerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginServerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginServerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageWaitForLoginNotice::kQueueNumberFieldNumber;
#endif  // !_MSC_VER

CMessageWaitForLoginNotice::CMessageWaitForLoginNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageWaitForLoginNotice::InitAsDefaultInstance() {}

CMessageWaitForLoginNotice::CMessageWaitForLoginNotice(const CMessageWaitForLoginNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageWaitForLoginNotice::SharedCtor() {
  _cached_size_ = 0;
  queuenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageWaitForLoginNotice::~CMessageWaitForLoginNotice() {
  SharedDtor();
}

void CMessageWaitForLoginNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageWaitForLoginNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageWaitForLoginNotice_descriptor_;
}

const CMessageWaitForLoginNotice& CMessageWaitForLoginNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageWaitForLoginNotice* CMessageWaitForLoginNotice::default_instance_ = NULL;

CMessageWaitForLoginNotice* CMessageWaitForLoginNotice::New() const {
  return new CMessageWaitForLoginNotice;
}

void CMessageWaitForLoginNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queuenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageWaitForLoginNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 QueueNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &queuenumber_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageWaitForLoginNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageWaitForLoginNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 QueueNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->queuenumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageWaitForLoginNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 QueueNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->queuenumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageWaitForLoginNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueNumber = 1;
    if (has_queuenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->queuenumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageWaitForLoginNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageWaitForLoginNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageWaitForLoginNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageWaitForLoginNotice::MergeFrom(const CMessageWaitForLoginNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_queuenumber(from.queuenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageWaitForLoginNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWaitForLoginNotice::CopyFrom(const CMessageWaitForLoginNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageWaitForLoginNotice::Swap(CMessageWaitForLoginNotice* other) {
  if (other != this) {
    std::swap(queuenumber_, other->queuenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageWaitForLoginNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageWaitForLoginNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageWaitForLoginNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageWaitForLoginNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageRedirectGateNotice::_default_address_;
#ifndef _MSC_VER
const int CMessageRedirectGateNotice::kAddressFieldNumber;
const int CMessageRedirectGateNotice::kOtherClientFieldNumber;
const int CMessageRedirectGateNotice::kLoginTokenFieldNumber;
const int CMessageRedirectGateNotice::kAccountIDFieldNumber;
const int CMessageRedirectGateNotice::kCleanCSkeyFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectGateNotice::CMessageRedirectGateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectGateNotice::InitAsDefaultInstance() {}

CMessageRedirectGateNotice::CMessageRedirectGateNotice(const CMessageRedirectGateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectGateNotice::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  otherclient_ = 0u;
  logintoken_ = 0u;
  accountid_ = 0u;
  cleancskey_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectGateNotice::~CMessageRedirectGateNotice() {
  SharedDtor();
}

void CMessageRedirectGateNotice::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectGateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectGateNotice_descriptor_;
}

const CMessageRedirectGateNotice& CMessageRedirectGateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectGateNotice* CMessageRedirectGateNotice::default_instance_ = NULL;

CMessageRedirectGateNotice* CMessageRedirectGateNotice::New() const {
  return new CMessageRedirectGateNotice;
}

void CMessageRedirectGateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    otherclient_ = 0u;
    logintoken_ = 0u;
    accountid_ = 0u;
    cleancskey_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectGateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectTag(16)) goto parse_OtherClient;
        break;
      }
      
      // optional uint32 OtherClient = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OtherClient:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &otherclient_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CleanCSkey;
        break;
      }
      
      // optional uint32 CleanCSkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CleanCSkey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleancskey_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectGateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectGateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Address = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->address(), output);
  }
  
  // optional uint32 OtherClient = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->otherclient(), output);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->logintoken(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 CleanCSkey = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->cleancskey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectGateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Address = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->address(), target);
  }
  
  // optional uint32 OtherClient = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->otherclient(), target);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->logintoken(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 CleanCSkey = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->cleancskey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectGateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
    // optional uint32 OtherClient = 2;
    if (has_otherclient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->otherclient());
    }
    
    // optional uint32 LoginToken = 3;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CleanCSkey = 5;
    if (has_cleancskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleancskey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectGateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectGateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectGateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectGateNotice::MergeFrom(const CMessageRedirectGateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_address(from.address());
    }
    if (from._has_bit(1)) {
      set_otherclient(from.otherclient());
    }
    if (from._has_bit(2)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_cleancskey(from.cleancskey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectGateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectGateNotice::CopyFrom(const CMessageRedirectGateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectGateNotice::Swap(CMessageRedirectGateNotice* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(otherclient_, other->otherclient_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(accountid_, other->accountid_);
    std::swap(cleancskey_, other->cleancskey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectGateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectGateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectGateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectGateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginGateRequest::kLoginTokenFieldNumber;
const int CMessageLoginGateRequest::kAccountIDFieldNumber;
const int CMessageLoginGateRequest::kTemplateVerFieldNumber;
#endif  // !_MSC_VER

CMessageLoginGateRequest::CMessageLoginGateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginGateRequest::InitAsDefaultInstance() {}

CMessageLoginGateRequest::CMessageLoginGateRequest(const CMessageLoginGateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginGateRequest::SharedCtor() {
  _cached_size_ = 0;
  logintoken_ = 0u;
  accountid_ = 0u;
  templatever_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginGateRequest::~CMessageLoginGateRequest() {
  SharedDtor();
}

void CMessageLoginGateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginGateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginGateRequest_descriptor_;
}

const CMessageLoginGateRequest& CMessageLoginGateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginGateRequest* CMessageLoginGateRequest::default_instance_ = NULL;

CMessageLoginGateRequest* CMessageLoginGateRequest::New() const {
  return new CMessageLoginGateRequest;
}

void CMessageLoginGateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logintoken_ = 0u;
    accountid_ = 0u;
    templatever_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginGateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LoginToken = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TemplateVer;
        break;
      }
      
      // optional uint32 TemplateVer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TemplateVer:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templatever_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginGateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginGateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LoginToken = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->logintoken(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 TemplateVer = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->templatever(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginGateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LoginToken = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->logintoken(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 TemplateVer = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->templatever(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginGateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LoginToken = 1;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 TemplateVer = 3;
    if (has_templatever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templatever());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginGateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginGateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginGateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginGateRequest::MergeFrom(const CMessageLoginGateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_templatever(from.templatever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginGateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginGateRequest::CopyFrom(const CMessageLoginGateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginGateRequest::Swap(CMessageLoginGateRequest* other) {
  if (other != this) {
    std::swap(logintoken_, other->logintoken_);
    std::swap(accountid_, other->accountid_);
    std::swap(templatever_, other->templatever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginGateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginGateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginGateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginGateRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageLoginGateResponse::_default_errorstring_;
#ifndef _MSC_VER
const int CMessageLoginGateResponse::kErrorStringFieldNumber;
const int CMessageLoginGateResponse::kErrorCodeFieldNumber;
const int CMessageLoginGateResponse::kGateWayIDFieldNumber;
#endif  // !_MSC_VER

CMessageLoginGateResponse::CMessageLoginGateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginGateResponse::InitAsDefaultInstance() {}

CMessageLoginGateResponse::CMessageLoginGateResponse(const CMessageLoginGateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginGateResponse::SharedCtor() {
  _cached_size_ = 0;
  errorstring_ = const_cast< ::std::string*>(&_default_errorstring_);
  errorcode_ = 0;
  gatewayid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginGateResponse::~CMessageLoginGateResponse() {
  SharedDtor();
}

void CMessageLoginGateResponse::SharedDtor() {
  if (errorstring_ != &_default_errorstring_) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginGateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginGateResponse_descriptor_;
}

const CMessageLoginGateResponse& CMessageLoginGateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginGateResponse* CMessageLoginGateResponse::default_instance_ = NULL;

CMessageLoginGateResponse* CMessageLoginGateResponse::New() const {
  return new CMessageLoginGateResponse;
}

void CMessageLoginGateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (errorstring_ != &_default_errorstring_) {
        errorstring_->clear();
      }
    }
    errorcode_ = 0;
    gatewayid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginGateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string ErrorString = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_errorstring()));
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GateWayID;
        break;
      }
      
      // optional int32 GateWayID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GateWayID:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gatewayid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginGateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginGateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string ErrorString = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->errorstring(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  // optional int32 GateWayID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->gatewayid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginGateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ErrorString = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->errorstring(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  // optional int32 GateWayID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->gatewayid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginGateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ErrorString = 1;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->errorstring());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
    // optional int32 GateWayID = 3;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gatewayid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginGateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginGateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginGateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginGateResponse::MergeFrom(const CMessageLoginGateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errorstring(from.errorstring());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(2)) {
      set_gatewayid(from.gatewayid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginGateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginGateResponse::CopyFrom(const CMessageLoginGateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginGateResponse::Swap(CMessageLoginGateResponse* other) {
  if (other != this) {
    std::swap(errorstring_, other->errorstring_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginGateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginGateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginGateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginGateResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageObtainCharRequest::CMessageObtainCharRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainCharRequest::InitAsDefaultInstance() {}

CMessageObtainCharRequest::CMessageObtainCharRequest(const CMessageObtainCharRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainCharRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainCharRequest::~CMessageObtainCharRequest() {
  SharedDtor();
}

void CMessageObtainCharRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainCharRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharRequest_descriptor_;
}

const CMessageObtainCharRequest& CMessageObtainCharRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainCharRequest* CMessageObtainCharRequest::default_instance_ = NULL;

CMessageObtainCharRequest* CMessageObtainCharRequest::New() const {
  return new CMessageObtainCharRequest;
}

void CMessageObtainCharRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainCharRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageObtainCharRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainCharRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainCharRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainCharRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainCharRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainCharRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainCharRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainCharRequest::MergeFrom(const CMessageObtainCharRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainCharRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharRequest::CopyFrom(const CMessageObtainCharRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharRequest::Swap(CMessageObtainCharRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainCharRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainCharRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainCharRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharRequest_reflection_;
}

// ===================================================================

const ::std::string PBCharProfile::_default_charname_;
#ifndef _MSC_VER
const int PBCharProfile::kCharIDFieldNumber;
const int PBCharProfile::kLineIDFieldNumber;
const int PBCharProfile::kSexFieldNumber;
const int PBCharProfile::kHairColourFieldNumber;
const int PBCharProfile::kExpFieldNumber;
const int PBCharProfile::kLevelFieldNumber;
const int PBCharProfile::kAccountIDFieldNumber;
const int PBCharProfile::kLastLoginFieldNumber;
const int PBCharProfile::kOnlineTimeFieldNumber;
const int PBCharProfile::kMetierFieldNumber;
const int PBCharProfile::kHairTypeFieldNumber;
const int PBCharProfile::kFaceTypeFieldNumber;
const int PBCharProfile::kMapIDFieldNumber;
const int PBCharProfile::kCharNameFieldNumber;
const int PBCharProfile::kNationalityFieldNumber;
const int PBCharProfile::kRoleDeleteStatusFieldNumber;
const int PBCharProfile::kDeleteStatusLeftTimeFieldNumber;
const int PBCharProfile::kPasswordUsedFieldNumber;
#endif  // !_MSC_VER

PBCharProfile::PBCharProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCharProfile::InitAsDefaultInstance() {}

PBCharProfile::PBCharProfile(const PBCharProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCharProfile::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lineid_ = 0u;
  sex_ = 0u;
  haircolour_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  accountid_ = 0u;
  lastlogin_ = 0u;
  onlinetime_ = 0u;
  metier_ = 0u;
  hairtype_ = 0u;
  facetype_ = 0u;
  mapid_ = 0u;
  charname_ = const_cast< ::std::string*>(&_default_charname_);
  nationality_ = 0u;
  roledeletestatus_ = 0u;
  deletestatuslefttime_ = 0u;
  passwordused_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCharProfile::~PBCharProfile() {
  SharedDtor();
}

void PBCharProfile::SharedDtor() {
  if (charname_ != &_default_charname_) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCharProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCharProfile_descriptor_;
}

const PBCharProfile& PBCharProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

PBCharProfile* PBCharProfile::default_instance_ = NULL;

PBCharProfile* PBCharProfile::New() const {
  return new PBCharProfile;
}

void PBCharProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lineid_ = 0u;
    sex_ = 0u;
    haircolour_ = 0u;
    exp_ = 0u;
    level_ = 0u;
    accountid_ = 0u;
    lastlogin_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    onlinetime_ = 0u;
    metier_ = 0u;
    hairtype_ = 0u;
    facetype_ = 0u;
    mapid_ = 0u;
    if (_has_bit(13)) {
      if (charname_ != &_default_charname_) {
        charname_->clear();
      }
    }
    nationality_ = 0u;
    roledeletestatus_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    deletestatuslefttime_ = 0u;
    passwordused_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCharProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_HairColour;
        break;
      }
      
      // optional uint32 HairColour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HairColour:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &haircolour_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LastLogin;
        break;
      }
      
      // optional uint32 LastLogin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastLogin:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastlogin_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_OnlineTime;
        break;
      }
      
      // optional uint32 OnlineTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OnlineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &onlinetime_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_HairType;
        break;
      }
      
      // optional uint32 HairType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HairType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hairtype_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_FaceType;
        break;
      }
      
      // optional uint32 FaceType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facetype_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_CharName;
        break;
      }
      
      // optional string CharName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_charname()));
        if (input->ExpectTag(120)) goto parse_Nationality;
        break;
      }
      
      // optional uint32 Nationality = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Nationality:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_RoleDeleteStatus;
        break;
      }
      
      // optional uint32 RoleDeleteStatus = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleDeleteStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roledeletestatus_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_DeleteStatusLeftTime;
        break;
      }
      
      // optional uint32 DeleteStatusLeftTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeleteStatusLeftTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deletestatuslefttime_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_PasswordUsed;
        break;
      }
      
      // optional uint32 PasswordUsed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PasswordUsed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &passwordused_));
        _set_bit(17);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCharProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCharProfile::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 Sex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sex(), output);
  }
  
  // optional uint32 HairColour = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->haircolour(), output);
  }
  
  // optional uint32 Exp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->exp(), output);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->level(), output);
  }
  
  // optional uint32 AccountID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->accountid(), output);
  }
  
  // optional uint32 LastLogin = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->lastlogin(), output);
  }
  
  // optional uint32 OnlineTime = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->onlinetime(), output);
  }
  
  // optional uint32 Metier = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->metier(), output);
  }
  
  // optional uint32 HairType = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->hairtype(), output);
  }
  
  // optional uint32 FaceType = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->facetype(), output);
  }
  
  // optional uint32 MapID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->mapid(), output);
  }
  
  // optional string CharName = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->charname(), output);
  }
  
  // optional uint32 Nationality = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->nationality(), output);
  }
  
  // optional uint32 RoleDeleteStatus = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->roledeletestatus(), output);
  }
  
  // optional uint32 DeleteStatusLeftTime = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->deletestatuslefttime(), output);
  }
  
  // optional uint32 PasswordUsed = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->passwordused(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCharProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 Sex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sex(), target);
  }
  
  // optional uint32 HairColour = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->haircolour(), target);
  }
  
  // optional uint32 Exp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->exp(), target);
  }
  
  // optional uint32 Level = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // optional uint32 AccountID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->accountid(), target);
  }
  
  // optional uint32 LastLogin = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->lastlogin(), target);
  }
  
  // optional uint32 OnlineTime = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->onlinetime(), target);
  }
  
  // optional uint32 Metier = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->metier(), target);
  }
  
  // optional uint32 HairType = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->hairtype(), target);
  }
  
  // optional uint32 FaceType = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->facetype(), target);
  }
  
  // optional uint32 MapID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->mapid(), target);
  }
  
  // optional string CharName = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->charname(), target);
  }
  
  // optional uint32 Nationality = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->nationality(), target);
  }
  
  // optional uint32 RoleDeleteStatus = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->roledeletestatus(), target);
  }
  
  // optional uint32 DeleteStatusLeftTime = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->deletestatuslefttime(), target);
  }
  
  // optional uint32 PasswordUsed = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->passwordused(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCharProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 Sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 HairColour = 4;
    if (has_haircolour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->haircolour());
    }
    
    // optional uint32 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 AccountID = 7;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 LastLogin = 8;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastlogin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 OnlineTime = 9;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->onlinetime());
    }
    
    // optional uint32 Metier = 10;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 HairType = 11;
    if (has_hairtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hairtype());
    }
    
    // optional uint32 FaceType = 12;
    if (has_facetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facetype());
    }
    
    // optional uint32 MapID = 13;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional string CharName = 14;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->charname());
    }
    
    // optional uint32 Nationality = 15;
    if (has_nationality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality());
    }
    
    // optional uint32 RoleDeleteStatus = 16;
    if (has_roledeletestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roledeletestatus());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 DeleteStatusLeftTime = 17;
    if (has_deletestatuslefttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deletestatuslefttime());
    }
    
    // optional uint32 PasswordUsed = 18;
    if (has_passwordused()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->passwordused());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCharProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCharProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCharProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCharProfile::MergeFrom(const PBCharProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_sex(from.sex());
    }
    if (from._has_bit(3)) {
      set_haircolour(from.haircolour());
    }
    if (from._has_bit(4)) {
      set_exp(from.exp());
    }
    if (from._has_bit(5)) {
      set_level(from.level());
    }
    if (from._has_bit(6)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(7)) {
      set_lastlogin(from.lastlogin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_onlinetime(from.onlinetime());
    }
    if (from._has_bit(9)) {
      set_metier(from.metier());
    }
    if (from._has_bit(10)) {
      set_hairtype(from.hairtype());
    }
    if (from._has_bit(11)) {
      set_facetype(from.facetype());
    }
    if (from._has_bit(12)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(13)) {
      set_charname(from.charname());
    }
    if (from._has_bit(14)) {
      set_nationality(from.nationality());
    }
    if (from._has_bit(15)) {
      set_roledeletestatus(from.roledeletestatus());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_deletestatuslefttime(from.deletestatuslefttime());
    }
    if (from._has_bit(17)) {
      set_passwordused(from.passwordused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCharProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCharProfile::CopyFrom(const PBCharProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCharProfile::Swap(PBCharProfile* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lineid_, other->lineid_);
    std::swap(sex_, other->sex_);
    std::swap(haircolour_, other->haircolour_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(accountid_, other->accountid_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(metier_, other->metier_);
    std::swap(hairtype_, other->hairtype_);
    std::swap(facetype_, other->facetype_);
    std::swap(mapid_, other->mapid_);
    std::swap(charname_, other->charname_);
    std::swap(nationality_, other->nationality_);
    std::swap(roledeletestatus_, other->roledeletestatus_);
    std::swap(deletestatuslefttime_, other->deletestatuslefttime_);
    std::swap(passwordused_, other->passwordused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCharProfile::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCharProfile::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCharProfile::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCharProfile_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageObtainCharNotice::kCharProfileFieldNumber;
const int CMessageObtainCharNotice::kLastLoginIPFieldNumber;
const int CMessageObtainCharNotice::kLoginIPFieldNumber;
#endif  // !_MSC_VER

CMessageObtainCharNotice::CMessageObtainCharNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainCharNotice::InitAsDefaultInstance() {}

CMessageObtainCharNotice::CMessageObtainCharNotice(const CMessageObtainCharNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainCharNotice::SharedCtor() {
  _cached_size_ = 0;
  lastloginip_ = 0u;
  loginip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainCharNotice::~CMessageObtainCharNotice() {
  SharedDtor();
}

void CMessageObtainCharNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainCharNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharNotice_descriptor_;
}

const CMessageObtainCharNotice& CMessageObtainCharNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainCharNotice* CMessageObtainCharNotice::default_instance_ = NULL;

CMessageObtainCharNotice* CMessageObtainCharNotice::New() const {
  return new CMessageObtainCharNotice;
}

void CMessageObtainCharNotice::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lastloginip_ = 0u;
    loginip_ = 0u;
  }
  charprofile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainCharNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBCharProfile CharProfile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CharProfile:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_charprofile()));
        if (input->ExpectTag(10)) goto parse_CharProfile;
        if (input->ExpectTag(16)) goto parse_LastLoginIP;
        break;
      }
      
      // optional uint32 LastLoginIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastLoginIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastloginip_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LoginIP;
        break;
      }
      
      // optional uint32 LoginIP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginIP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &loginip_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageObtainCharNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainCharNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBCharProfile CharProfile = 1;
  for (int i = 0; i < this->charprofile_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->charprofile(i), output);
  }
  
  // optional uint32 LastLoginIP = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lastloginip(), output);
  }
  
  // optional uint32 LoginIP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->loginip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainCharNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCharProfile CharProfile = 1;
  for (int i = 0; i < this->charprofile_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->charprofile(i), target);
  }
  
  // optional uint32 LastLoginIP = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lastloginip(), target);
  }
  
  // optional uint32 LoginIP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->loginip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainCharNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 LastLoginIP = 2;
    if (has_lastloginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastloginip());
    }
    
    // optional uint32 LoginIP = 3;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->loginip());
    }
    
  }
  // repeated .PBCharProfile CharProfile = 1;
  total_size += 1 * this->charprofile_size();
  for (int i = 0; i < this->charprofile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->charprofile(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainCharNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainCharNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainCharNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainCharNotice::MergeFrom(const CMessageObtainCharNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  charprofile_.MergeFrom(from.charprofile_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_lastloginip(from.lastloginip());
    }
    if (from._has_bit(2)) {
      set_loginip(from.loginip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainCharNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharNotice::CopyFrom(const CMessageObtainCharNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharNotice::Swap(CMessageObtainCharNotice* other) {
  if (other != this) {
    charprofile_.Swap(&other->charprofile_);
    std::swap(lastloginip_, other->lastloginip_);
    std::swap(loginip_, other->loginip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainCharNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainCharNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainCharNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageObtainCharCompleteNotice::CMessageObtainCharCompleteNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageObtainCharCompleteNotice::InitAsDefaultInstance() {}

CMessageObtainCharCompleteNotice::CMessageObtainCharCompleteNotice(const CMessageObtainCharCompleteNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageObtainCharCompleteNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageObtainCharCompleteNotice::~CMessageObtainCharCompleteNotice() {
  SharedDtor();
}

void CMessageObtainCharCompleteNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageObtainCharCompleteNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharCompleteNotice_descriptor_;
}

const CMessageObtainCharCompleteNotice& CMessageObtainCharCompleteNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageObtainCharCompleteNotice* CMessageObtainCharCompleteNotice::default_instance_ = NULL;

CMessageObtainCharCompleteNotice* CMessageObtainCharCompleteNotice::New() const {
  return new CMessageObtainCharCompleteNotice;
}

void CMessageObtainCharCompleteNotice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageObtainCharCompleteNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageObtainCharCompleteNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageObtainCharCompleteNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageObtainCharCompleteNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageObtainCharCompleteNotice::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageObtainCharCompleteNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageObtainCharCompleteNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageObtainCharCompleteNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageObtainCharCompleteNotice::MergeFrom(const CMessageObtainCharCompleteNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageObtainCharCompleteNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharCompleteNotice::CopyFrom(const CMessageObtainCharCompleteNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageObtainCharCompleteNotice::Swap(CMessageObtainCharCompleteNotice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageObtainCharCompleteNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageObtainCharCompleteNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageObtainCharCompleteNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageObtainCharCompleteNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageEnterGameRequest::_default_mac_;
#ifndef _MSC_VER
const int CMessageEnterGameRequest::kAccountIDFieldNumber;
const int CMessageEnterGameRequest::kLineIDFieldNumber;
const int CMessageEnterGameRequest::kMapIDFieldNumber;
const int CMessageEnterGameRequest::kCharIDFieldNumber;
const int CMessageEnterGameRequest::kMacFieldNumber;
#endif  // !_MSC_VER

CMessageEnterGameRequest::CMessageEnterGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterGameRequest::InitAsDefaultInstance() {}

CMessageEnterGameRequest::CMessageEnterGameRequest(const CMessageEnterGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterGameRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  charid_ = 0u;
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterGameRequest::~CMessageEnterGameRequest() {
  SharedDtor();
}

void CMessageEnterGameRequest::SharedDtor() {
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGameRequest_descriptor_;
}

const CMessageEnterGameRequest& CMessageEnterGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterGameRequest* CMessageEnterGameRequest::default_instance_ = NULL;

CMessageEnterGameRequest* CMessageEnterGameRequest::New() const {
  return new CMessageEnterGameRequest;
}

void CMessageEnterGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    charid_ = 0u;
    if (_has_bit(4)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Mac;
        break;
      }
      
      // optional string Mac = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterGameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mapid(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  // optional string Mac = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 MapID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mapid(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  // optional string Mac = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Mac = 5;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterGameRequest::MergeFrom(const CMessageEnterGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGameRequest::CopyFrom(const CMessageEnterGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGameRequest::Swap(CMessageEnterGameRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterGameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterGameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterGameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGameRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageEnterGameResponse::_default_scenename_;
const ::std::string CMessageEnterGameResponse::_default_address_;
#ifndef _MSC_VER
const int CMessageEnterGameResponse::kSceneNameFieldNumber;
const int CMessageEnterGameResponse::kAddressFieldNumber;
const int CMessageEnterGameResponse::kClearDialogFieldNumber;
#endif  // !_MSC_VER

CMessageEnterGameResponse::CMessageEnterGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageEnterGameResponse::InitAsDefaultInstance() {}

CMessageEnterGameResponse::CMessageEnterGameResponse(const CMessageEnterGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageEnterGameResponse::SharedCtor() {
  _cached_size_ = 0;
  scenename_ = const_cast< ::std::string*>(&_default_scenename_);
  address_ = const_cast< ::std::string*>(&_default_address_);
  cleardialog_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageEnterGameResponse::~CMessageEnterGameResponse() {
  SharedDtor();
}

void CMessageEnterGameResponse::SharedDtor() {
  if (scenename_ != &_default_scenename_) {
    delete scenename_;
  }
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageEnterGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGameResponse_descriptor_;
}

const CMessageEnterGameResponse& CMessageEnterGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageEnterGameResponse* CMessageEnterGameResponse::default_instance_ = NULL;

CMessageEnterGameResponse* CMessageEnterGameResponse::New() const {
  return new CMessageEnterGameResponse;
}

void CMessageEnterGameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (scenename_ != &_default_scenename_) {
        scenename_->clear();
      }
    }
    if (_has_bit(1)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    cleardialog_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageEnterGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SceneName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_scenename()));
        if (input->ExpectTag(18)) goto parse_Address;
        break;
      }
      
      // optional string Address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectTag(24)) goto parse_ClearDialog;
        break;
      }
      
      // optional uint32 ClearDialog = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClearDialog:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cleardialog_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageEnterGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageEnterGameResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SceneName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->scenename(), output);
  }
  
  // optional string Address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->address(), output);
  }
  
  // optional uint32 ClearDialog = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->cleardialog(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageEnterGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SceneName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->scenename(), target);
  }
  
  // optional string Address = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->address(), target);
  }
  
  // optional uint32 ClearDialog = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->cleardialog(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageEnterGameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SceneName = 1;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->scenename());
    }
    
    // optional string Address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
    // optional uint32 ClearDialog = 3;
    if (has_cleardialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cleardialog());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageEnterGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageEnterGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageEnterGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageEnterGameResponse::MergeFrom(const CMessageEnterGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_scenename(from.scenename());
    }
    if (from._has_bit(1)) {
      set_address(from.address());
    }
    if (from._has_bit(2)) {
      set_cleardialog(from.cleardialog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageEnterGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGameResponse::CopyFrom(const CMessageEnterGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterGameResponse::Swap(CMessageEnterGameResponse* other) {
  if (other != this) {
    std::swap(scenename_, other->scenename_);
    std::swap(address_, other->address_);
    std::swap(cleardialog_, other->cleardialog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageEnterGameResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageEnterGameResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageEnterGameResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterGameResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginSceneRequest::kAccountIDFieldNumber;
const int CMessageLoginSceneRequest::kCharIDFieldNumber;
const int CMessageLoginSceneRequest::kLoginTokenFieldNumber;
#endif  // !_MSC_VER

CMessageLoginSceneRequest::CMessageLoginSceneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginSceneRequest::InitAsDefaultInstance() {}

CMessageLoginSceneRequest::CMessageLoginSceneRequest(const CMessageLoginSceneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginSceneRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  logintoken_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginSceneRequest::~CMessageLoginSceneRequest() {
  SharedDtor();
}

void CMessageLoginSceneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginSceneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSceneRequest_descriptor_;
}

const CMessageLoginSceneRequest& CMessageLoginSceneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginSceneRequest* CMessageLoginSceneRequest::default_instance_ = NULL;

CMessageLoginSceneRequest* CMessageLoginSceneRequest::New() const {
  return new CMessageLoginSceneRequest;
}

void CMessageLoginSceneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    logintoken_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginSceneRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->logintoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginSceneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 LoginToken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->logintoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginSceneRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LoginToken = 3;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginSceneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginSceneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginSceneRequest::MergeFrom(const CMessageLoginSceneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_logintoken(from.logintoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSceneRequest::CopyFrom(const CMessageLoginSceneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSceneRequest::Swap(CMessageLoginSceneRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginSceneRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginSceneRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginSceneRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSceneRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageLoginSceneResponse::_default_key_;
#ifndef _MSC_VER
const int CMessageLoginSceneResponse::kKeyFieldNumber;
const int CMessageLoginSceneResponse::kCSDialogIDFieldNumber;
const int CMessageLoginSceneResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

CMessageLoginSceneResponse::CMessageLoginSceneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginSceneResponse::InitAsDefaultInstance() {}

CMessageLoginSceneResponse::CMessageLoginSceneResponse(const CMessageLoginSceneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginSceneResponse::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  csdialogid_ = 0u;
  servertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginSceneResponse::~CMessageLoginSceneResponse() {
  SharedDtor();
}

void CMessageLoginSceneResponse::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginSceneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSceneResponse_descriptor_;
}

const CMessageLoginSceneResponse& CMessageLoginSceneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginSceneResponse* CMessageLoginSceneResponse::default_instance_ = NULL;

CMessageLoginSceneResponse* CMessageLoginSceneResponse::New() const {
  return new CMessageLoginSceneResponse;
}

void CMessageLoginSceneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    csdialogid_ = 0u;
    servertime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginSceneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_key()));
        if (input->ExpectTag(16)) goto parse_CSDialogID;
        break;
      }
      
      // optional uint32 CSDialogID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CSDialogID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &csdialogid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ServerTime;
        break;
      }
      
      // optional uint64 ServerTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &servertime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginSceneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginSceneResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes Key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->key(), output);
  }
  
  // optional uint32 CSDialogID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->csdialogid(), output);
  }
  
  // optional uint64 ServerTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->servertime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginSceneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes Key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->key(), target);
  }
  
  // optional uint32 CSDialogID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->csdialogid(), target);
  }
  
  // optional uint64 ServerTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->servertime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginSceneResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->key());
    }
    
    // optional uint32 CSDialogID = 2;
    if (has_csdialogid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->csdialogid());
    }
    
    // optional uint64 ServerTime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->servertime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginSceneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginSceneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginSceneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginSceneResponse::MergeFrom(const CMessageLoginSceneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_csdialogid(from.csdialogid());
    }
    if (from._has_bit(2)) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginSceneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSceneResponse::CopyFrom(const CMessageLoginSceneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginSceneResponse::Swap(CMessageLoginSceneResponse* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(csdialogid_, other->csdialogid_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginSceneResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginSceneResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginSceneResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginSceneResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageReturn2GateRequest::CMessageReturn2GateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReturn2GateRequest::InitAsDefaultInstance() {}

CMessageReturn2GateRequest::CMessageReturn2GateRequest(const CMessageReturn2GateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReturn2GateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReturn2GateRequest::~CMessageReturn2GateRequest() {
  SharedDtor();
}

void CMessageReturn2GateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReturn2GateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReturn2GateRequest_descriptor_;
}

const CMessageReturn2GateRequest& CMessageReturn2GateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReturn2GateRequest* CMessageReturn2GateRequest::default_instance_ = NULL;

CMessageReturn2GateRequest* CMessageReturn2GateRequest::New() const {
  return new CMessageReturn2GateRequest;
}

void CMessageReturn2GateRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReturn2GateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageReturn2GateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReturn2GateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReturn2GateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReturn2GateRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReturn2GateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReturn2GateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReturn2GateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReturn2GateRequest::MergeFrom(const CMessageReturn2GateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReturn2GateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReturn2GateRequest::CopyFrom(const CMessageReturn2GateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReturn2GateRequest::Swap(CMessageReturn2GateRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReturn2GateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReturn2GateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReturn2GateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReturn2GateRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageReturn2GateResponse::kReturnTypeFieldNumber;
#endif  // !_MSC_VER

CMessageReturn2GateResponse::CMessageReturn2GateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReturn2GateResponse::InitAsDefaultInstance() {}

CMessageReturn2GateResponse::CMessageReturn2GateResponse(const CMessageReturn2GateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReturn2GateResponse::SharedCtor() {
  _cached_size_ = 0;
  returntype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReturn2GateResponse::~CMessageReturn2GateResponse() {
  SharedDtor();
}

void CMessageReturn2GateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReturn2GateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReturn2GateResponse_descriptor_;
}

const CMessageReturn2GateResponse& CMessageReturn2GateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReturn2GateResponse* CMessageReturn2GateResponse::default_instance_ = NULL;

CMessageReturn2GateResponse* CMessageReturn2GateResponse::New() const {
  return new CMessageReturn2GateResponse;
}

void CMessageReturn2GateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returntype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReturn2GateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ReturnType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &returntype_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReturn2GateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReturn2GateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ReturnType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->returntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReturn2GateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ReturnType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->returntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReturn2GateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ReturnType = 1;
    if (has_returntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->returntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReturn2GateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReturn2GateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReturn2GateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReturn2GateResponse::MergeFrom(const CMessageReturn2GateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_returntype(from.returntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReturn2GateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReturn2GateResponse::CopyFrom(const CMessageReturn2GateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReturn2GateResponse::Swap(CMessageReturn2GateResponse* other) {
  if (other != this) {
    std::swap(returntype_, other->returntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReturn2GateResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReturn2GateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReturn2GateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReturn2GateResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateCharRequest::kProfileFieldNumber;
#endif  // !_MSC_VER

CMessageCreateCharRequest::CMessageCreateCharRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateCharRequest::InitAsDefaultInstance() {  profile_ = const_cast< ::PBCharProfile*>(&::PBCharProfile::default_instance());
}

CMessageCreateCharRequest::CMessageCreateCharRequest(const CMessageCreateCharRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateCharRequest::SharedCtor() {
  _cached_size_ = 0;
  profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateCharRequest::~CMessageCreateCharRequest() {
  SharedDtor();
}

void CMessageCreateCharRequest::SharedDtor() {
  if (this != default_instance_) {
    delete profile_;
  }
}

const ::google::protobuf::Descriptor* CMessageCreateCharRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateCharRequest_descriptor_;
}

const CMessageCreateCharRequest& CMessageCreateCharRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateCharRequest* CMessageCreateCharRequest::default_instance_ = NULL;

CMessageCreateCharRequest* CMessageCreateCharRequest::New() const {
  return new CMessageCreateCharRequest;
}

void CMessageCreateCharRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (profile_ != NULL) profile_->::PBCharProfile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateCharRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBCharProfile Profile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_profile()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateCharRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateCharRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBCharProfile Profile = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->profile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateCharRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCharProfile Profile = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->profile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateCharRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCharProfile Profile = 1;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->profile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateCharRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateCharRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateCharRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateCharRequest::MergeFrom(const CMessageCreateCharRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_profile()->::PBCharProfile::MergeFrom(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateCharRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateCharRequest::CopyFrom(const CMessageCreateCharRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateCharRequest::Swap(CMessageCreateCharRequest* other) {
  if (other != this) {
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateCharRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateCharRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateCharRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateCharRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateCharResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateCharResponse::CMessageCreateCharResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateCharResponse::InitAsDefaultInstance() {}

CMessageCreateCharResponse::CMessageCreateCharResponse(const CMessageCreateCharResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateCharResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateCharResponse::~CMessageCreateCharResponse() {
  SharedDtor();
}

void CMessageCreateCharResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateCharResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateCharResponse_descriptor_;
}

const CMessageCreateCharResponse& CMessageCreateCharResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateCharResponse* CMessageCreateCharResponse::default_instance_ = NULL;

CMessageCreateCharResponse* CMessageCreateCharResponse::New() const {
  return new CMessageCreateCharResponse;
}

void CMessageCreateCharResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateCharResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateCharResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateCharResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateCharResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateCharResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateCharResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateCharResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateCharResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateCharResponse::MergeFrom(const CMessageCreateCharResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateCharResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateCharResponse::CopyFrom(const CMessageCreateCharResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateCharResponse::Swap(CMessageCreateCharResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateCharResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateCharResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateCharResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateCharResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageDeleteCharRequest::_default_passwd_;
#ifndef _MSC_VER
const int CMessageDeleteCharRequest::kPasswdTypeFieldNumber;
const int CMessageDeleteCharRequest::kPasswdFieldNumber;
const int CMessageDeleteCharRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageDeleteCharRequest::CMessageDeleteCharRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDeleteCharRequest::InitAsDefaultInstance() {}

CMessageDeleteCharRequest::CMessageDeleteCharRequest(const CMessageDeleteCharRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDeleteCharRequest::SharedCtor() {
  _cached_size_ = 0;
  passwdtype_ = 0u;
  passwd_ = const_cast< ::std::string*>(&_default_passwd_);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDeleteCharRequest::~CMessageDeleteCharRequest() {
  SharedDtor();
}

void CMessageDeleteCharRequest::SharedDtor() {
  if (passwd_ != &_default_passwd_) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDeleteCharRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteCharRequest_descriptor_;
}

const CMessageDeleteCharRequest& CMessageDeleteCharRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDeleteCharRequest* CMessageDeleteCharRequest::default_instance_ = NULL;

CMessageDeleteCharRequest* CMessageDeleteCharRequest::New() const {
  return new CMessageDeleteCharRequest;
}

void CMessageDeleteCharRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    passwdtype_ = 0u;
    if (_has_bit(1)) {
      if (passwd_ != &_default_passwd_) {
        passwd_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDeleteCharRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PasswdType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &passwdtype_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Passwd;
        break;
      }
      
      // optional string Passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Passwd:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_passwd()));
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDeleteCharRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDeleteCharRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PasswdType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->passwdtype(), output);
  }
  
  // optional string Passwd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->passwd(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDeleteCharRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PasswdType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->passwdtype(), target);
  }
  
  // optional string Passwd = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->passwd(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDeleteCharRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PasswdType = 1;
    if (has_passwdtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->passwdtype());
    }
    
    // optional string Passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->passwd());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDeleteCharRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDeleteCharRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDeleteCharRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDeleteCharRequest::MergeFrom(const CMessageDeleteCharRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_passwdtype(from.passwdtype());
    }
    if (from._has_bit(1)) {
      set_passwd(from.passwd());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDeleteCharRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteCharRequest::CopyFrom(const CMessageDeleteCharRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteCharRequest::Swap(CMessageDeleteCharRequest* other) {
  if (other != this) {
    std::swap(passwdtype_, other->passwdtype_);
    std::swap(passwd_, other->passwd_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDeleteCharRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDeleteCharRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDeleteCharRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteCharRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDeleteCharResponse::kCharIDFieldNumber;
const int CMessageDeleteCharResponse::kErrcodeFieldNumber;
const int CMessageDeleteCharResponse::kDeleteStatusFieldNumber;
const int CMessageDeleteCharResponse::kDeleteStatusLeftTimeFieldNumber;
#endif  // !_MSC_VER

CMessageDeleteCharResponse::CMessageDeleteCharResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDeleteCharResponse::InitAsDefaultInstance() {}

CMessageDeleteCharResponse::CMessageDeleteCharResponse(const CMessageDeleteCharResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDeleteCharResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  errcode_ = 0u;
  deletestatus_ = 0u;
  deletestatuslefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDeleteCharResponse::~CMessageDeleteCharResponse() {
  SharedDtor();
}

void CMessageDeleteCharResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDeleteCharResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteCharResponse_descriptor_;
}

const CMessageDeleteCharResponse& CMessageDeleteCharResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDeleteCharResponse* CMessageDeleteCharResponse::default_instance_ = NULL;

CMessageDeleteCharResponse* CMessageDeleteCharResponse::New() const {
  return new CMessageDeleteCharResponse;
}

void CMessageDeleteCharResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    errcode_ = 0u;
    deletestatus_ = 0u;
    deletestatuslefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDeleteCharResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Errcode;
        break;
      }
      
      // optional uint32 Errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Errcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DeleteStatus;
        break;
      }
      
      // optional uint32 DeleteStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeleteStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deletestatus_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DeleteStatusLeftTime;
        break;
      }
      
      // optional uint32 DeleteStatusLeftTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeleteStatusLeftTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deletestatuslefttime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDeleteCharResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDeleteCharResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errcode(), output);
  }
  
  // optional uint32 DeleteStatus = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->deletestatus(), output);
  }
  
  // optional uint32 DeleteStatusLeftTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->deletestatuslefttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDeleteCharResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  // optional uint32 DeleteStatus = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->deletestatus(), target);
  }
  
  // optional uint32 DeleteStatusLeftTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->deletestatuslefttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDeleteCharResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 DeleteStatus = 3;
    if (has_deletestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deletestatus());
    }
    
    // optional uint32 DeleteStatusLeftTime = 4;
    if (has_deletestatuslefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deletestatuslefttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDeleteCharResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDeleteCharResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDeleteCharResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDeleteCharResponse::MergeFrom(const CMessageDeleteCharResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(2)) {
      set_deletestatus(from.deletestatus());
    }
    if (from._has_bit(3)) {
      set_deletestatuslefttime(from.deletestatuslefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDeleteCharResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteCharResponse::CopyFrom(const CMessageDeleteCharResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDeleteCharResponse::Swap(CMessageDeleteCharResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(errcode_, other->errcode_);
    std::swap(deletestatus_, other->deletestatus_);
    std::swap(deletestatuslefttime_, other->deletestatuslefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDeleteCharResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDeleteCharResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDeleteCharResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDeleteCharResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageReconnectSceneNotice::_default_address_;
const ::std::string CMessageReconnectSceneNotice::_default_countryname_;
const ::std::string CMessageReconnectSceneNotice::_default_mapname_;
#ifndef _MSC_VER
const int CMessageReconnectSceneNotice::kMapIDFieldNumber;
const int CMessageReconnectSceneNotice::kLineIDFieldNumber;
const int CMessageReconnectSceneNotice::kAddressFieldNumber;
const int CMessageReconnectSceneNotice::kPosYFieldNumber;
const int CMessageReconnectSceneNotice::kPosXFieldNumber;
const int CMessageReconnectSceneNotice::kCountryNameFieldNumber;
const int CMessageReconnectSceneNotice::kMapNameFieldNumber;
#endif  // !_MSC_VER

CMessageReconnectSceneNotice::CMessageReconnectSceneNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageReconnectSceneNotice::InitAsDefaultInstance() {}

CMessageReconnectSceneNotice::CMessageReconnectSceneNotice(const CMessageReconnectSceneNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageReconnectSceneNotice::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  lineid_ = 0u;
  address_ = const_cast< ::std::string*>(&_default_address_);
  posy_ = 0u;
  posx_ = 0u;
  countryname_ = const_cast< ::std::string*>(&_default_countryname_);
  mapname_ = const_cast< ::std::string*>(&_default_mapname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageReconnectSceneNotice::~CMessageReconnectSceneNotice() {
  SharedDtor();
}

void CMessageReconnectSceneNotice::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (countryname_ != &_default_countryname_) {
    delete countryname_;
  }
  if (mapname_ != &_default_mapname_) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageReconnectSceneNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageReconnectSceneNotice_descriptor_;
}

const CMessageReconnectSceneNotice& CMessageReconnectSceneNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageReconnectSceneNotice* CMessageReconnectSceneNotice::default_instance_ = NULL;

CMessageReconnectSceneNotice* CMessageReconnectSceneNotice::New() const {
  return new CMessageReconnectSceneNotice;
}

void CMessageReconnectSceneNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    lineid_ = 0u;
    if (_has_bit(2)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    posy_ = 0u;
    posx_ = 0u;
    if (_has_bit(5)) {
      if (countryname_ != &_default_countryname_) {
        countryname_->clear();
      }
    }
    if (_has_bit(6)) {
      if (mapname_ != &_default_mapname_) {
        mapname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageReconnectSceneNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Address;
        break;
      }
      
      // optional string Address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Address:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_address()));
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_CountryName;
        break;
      }
      
      // optional string CountryName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CountryName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_countryname()));
        if (input->ExpectTag(58)) goto parse_MapName;
        break;
      }
      
      // optional string MapName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mapname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageReconnectSceneNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageReconnectSceneNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional string Address = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->address(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->posx(), output);
  }
  
  // optional string CountryName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->countryname(), output);
  }
  
  // optional string MapName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->mapname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageReconnectSceneNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional string Address = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->address(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  // optional uint32 PosX = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->posx(), target);
  }
  
  // optional string CountryName = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->countryname(), target);
  }
  
  // optional string MapName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->mapname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageReconnectSceneNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional string Address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->address());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 PosX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional string CountryName = 6;
    if (has_countryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->countryname());
    }
    
    // optional string MapName = 7;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mapname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageReconnectSceneNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageReconnectSceneNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageReconnectSceneNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageReconnectSceneNotice::MergeFrom(const CMessageReconnectSceneNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_address(from.address());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
    if (from._has_bit(4)) {
      set_posx(from.posx());
    }
    if (from._has_bit(5)) {
      set_countryname(from.countryname());
    }
    if (from._has_bit(6)) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageReconnectSceneNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReconnectSceneNotice::CopyFrom(const CMessageReconnectSceneNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageReconnectSceneNotice::Swap(CMessageReconnectSceneNotice* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(lineid_, other->lineid_);
    std::swap(address_, other->address_);
    std::swap(posy_, other->posy_);
    std::swap(posx_, other->posx_);
    std::swap(countryname_, other->countryname_);
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageReconnectSceneNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageReconnectSceneNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageReconnectSceneNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageReconnectSceneNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRedirectSceneRequest::kAccountIDFieldNumber;
const int CMessageRedirectSceneRequest::kLoginTokenFieldNumber;
const int CMessageRedirectSceneRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageRedirectSceneRequest::CMessageRedirectSceneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectSceneRequest::InitAsDefaultInstance() {}

CMessageRedirectSceneRequest::CMessageRedirectSceneRequest(const CMessageRedirectSceneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectSceneRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  logintoken_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectSceneRequest::~CMessageRedirectSceneRequest() {
  SharedDtor();
}

void CMessageRedirectSceneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectSceneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSceneRequest_descriptor_;
}

const CMessageRedirectSceneRequest& CMessageRedirectSceneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectSceneRequest* CMessageRedirectSceneRequest::default_instance_ = NULL;

CMessageRedirectSceneRequest* CMessageRedirectSceneRequest::New() const {
  return new CMessageRedirectSceneRequest;
}

void CMessageRedirectSceneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    logintoken_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LoginToken;
        break;
      }
      
      // optional uint32 LoginToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoginToken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &logintoken_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRedirectSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectSceneRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->logintoken(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectSceneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 LoginToken = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->logintoken(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectSceneRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 LoginToken = 2;
    if (has_logintoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->logintoken());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectSceneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectSceneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectSceneRequest::MergeFrom(const CMessageRedirectSceneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_logintoken(from.logintoken());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSceneRequest::CopyFrom(const CMessageRedirectSceneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSceneRequest::Swap(CMessageRedirectSceneRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(logintoken_, other->logintoken_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectSceneRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectSceneRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectSceneRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSceneRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageRedirectSceneResponse::CMessageRedirectSceneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRedirectSceneResponse::InitAsDefaultInstance() {}

CMessageRedirectSceneResponse::CMessageRedirectSceneResponse(const CMessageRedirectSceneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRedirectSceneResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRedirectSceneResponse::~CMessageRedirectSceneResponse() {
  SharedDtor();
}

void CMessageRedirectSceneResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRedirectSceneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSceneResponse_descriptor_;
}

const CMessageRedirectSceneResponse& CMessageRedirectSceneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRedirectSceneResponse* CMessageRedirectSceneResponse::default_instance_ = NULL;

CMessageRedirectSceneResponse* CMessageRedirectSceneResponse::New() const {
  return new CMessageRedirectSceneResponse;
}

void CMessageRedirectSceneResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRedirectSceneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageRedirectSceneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRedirectSceneResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRedirectSceneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRedirectSceneResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRedirectSceneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRedirectSceneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRedirectSceneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRedirectSceneResponse::MergeFrom(const CMessageRedirectSceneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRedirectSceneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSceneResponse::CopyFrom(const CMessageRedirectSceneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRedirectSceneResponse::Swap(CMessageRedirectSceneResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRedirectSceneResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRedirectSceneResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRedirectSceneResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRedirectSceneResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveGameRequest::kLeaveTypeFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveGameRequest::CMessageLeaveGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveGameRequest::InitAsDefaultInstance() {}

CMessageLeaveGameRequest::CMessageLeaveGameRequest(const CMessageLeaveGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveGameRequest::SharedCtor() {
  _cached_size_ = 0;
  leavetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveGameRequest::~CMessageLeaveGameRequest() {
  SharedDtor();
}

void CMessageLeaveGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGameRequest_descriptor_;
}

const CMessageLeaveGameRequest& CMessageLeaveGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveGameRequest* CMessageLeaveGameRequest::default_instance_ = NULL;

CMessageLeaveGameRequest* CMessageLeaveGameRequest::New() const {
  return new CMessageLeaveGameRequest;
}

void CMessageLeaveGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leavetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LeaveType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leavetype_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveGameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LeaveType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->leavetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LeaveType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->leavetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeaveType = 1;
    if (has_leavetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leavetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveGameRequest::MergeFrom(const CMessageLeaveGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_leavetype(from.leavetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGameRequest::CopyFrom(const CMessageLeaveGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGameRequest::Swap(CMessageLeaveGameRequest* other) {
  if (other != this) {
    std::swap(leavetype_, other->leavetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveGameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveGameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveGameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGameRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageLeaveGameResponse::CMessageLeaveGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveGameResponse::InitAsDefaultInstance() {}

CMessageLeaveGameResponse::CMessageLeaveGameResponse(const CMessageLeaveGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveGameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveGameResponse::~CMessageLeaveGameResponse() {
  SharedDtor();
}

void CMessageLeaveGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGameResponse_descriptor_;
}

const CMessageLeaveGameResponse& CMessageLeaveGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveGameResponse* CMessageLeaveGameResponse::default_instance_ = NULL;

CMessageLeaveGameResponse* CMessageLeaveGameResponse::New() const {
  return new CMessageLeaveGameResponse;
}

void CMessageLeaveGameResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageLeaveGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveGameResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveGameResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveGameResponse::MergeFrom(const CMessageLeaveGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGameResponse::CopyFrom(const CMessageLeaveGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveGameResponse::Swap(CMessageLeaveGameResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveGameResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveGameResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveGameResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveGameResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickoutNotice::kReasonFieldNumber;
const int CMessageKickoutNotice::kParamFieldNumber;
#endif  // !_MSC_VER

CMessageKickoutNotice::CMessageKickoutNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickoutNotice::InitAsDefaultInstance() {}

CMessageKickoutNotice::CMessageKickoutNotice(const CMessageKickoutNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickoutNotice::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickoutNotice::~CMessageKickoutNotice() {
  SharedDtor();
}

void CMessageKickoutNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickoutNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickoutNotice_descriptor_;
}

const CMessageKickoutNotice& CMessageKickoutNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickoutNotice* CMessageKickoutNotice::default_instance_ = NULL;

CMessageKickoutNotice* CMessageKickoutNotice::New() const {
  return new CMessageKickoutNotice;
}

void CMessageKickoutNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickoutNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reason_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }
      
      // optional uint32 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickoutNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickoutNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 reason = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->reason(), output);
  }
  
  // optional uint32 param = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickoutNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->reason(), target);
  }
  
  // optional uint32 param = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickoutNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reason());
    }
    
    // optional uint32 param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickoutNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickoutNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickoutNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickoutNotice::MergeFrom(const CMessageKickoutNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reason(from.reason());
    }
    if (from._has_bit(1)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickoutNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickoutNotice::CopyFrom(const CMessageKickoutNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickoutNotice::Swap(CMessageKickoutNotice* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickoutNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickoutNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickoutNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickoutNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClientPingServerRequest::kCharIDFieldNumber;
const int CMessageClientPingServerRequest::kLatestPingValueFieldNumber;
const int CMessageClientPingServerRequest::kClientLocalTimeFieldNumber;
#endif  // !_MSC_VER

CMessageClientPingServerRequest::CMessageClientPingServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClientPingServerRequest::InitAsDefaultInstance() {}

CMessageClientPingServerRequest::CMessageClientPingServerRequest(const CMessageClientPingServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClientPingServerRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  latestpingvalue_ = 0u;
  clientlocaltime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClientPingServerRequest::~CMessageClientPingServerRequest() {
  SharedDtor();
}

void CMessageClientPingServerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClientPingServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientPingServerRequest_descriptor_;
}

const CMessageClientPingServerRequest& CMessageClientPingServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClientPingServerRequest* CMessageClientPingServerRequest::default_instance_ = NULL;

CMessageClientPingServerRequest* CMessageClientPingServerRequest::New() const {
  return new CMessageClientPingServerRequest;
}

void CMessageClientPingServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    latestpingvalue_ = 0u;
    clientlocaltime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClientPingServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LatestPingValue;
        break;
      }
      
      // optional uint32 LatestPingValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LatestPingValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &latestpingvalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ClientLocalTime;
        break;
      }
      
      // optional uint64 ClientLocalTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClientLocalTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &clientlocaltime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClientPingServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClientPingServerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LatestPingValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->latestpingvalue(), output);
  }
  
  // optional uint64 ClientLocalTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->clientlocaltime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClientPingServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LatestPingValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->latestpingvalue(), target);
  }
  
  // optional uint64 ClientLocalTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->clientlocaltime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClientPingServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LatestPingValue = 2;
    if (has_latestpingvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->latestpingvalue());
    }
    
    // optional uint64 ClientLocalTime = 3;
    if (has_clientlocaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->clientlocaltime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClientPingServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClientPingServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClientPingServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClientPingServerRequest::MergeFrom(const CMessageClientPingServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_latestpingvalue(from.latestpingvalue());
    }
    if (from._has_bit(2)) {
      set_clientlocaltime(from.clientlocaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClientPingServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientPingServerRequest::CopyFrom(const CMessageClientPingServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientPingServerRequest::Swap(CMessageClientPingServerRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(latestpingvalue_, other->latestpingvalue_);
    std::swap(clientlocaltime_, other->clientlocaltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClientPingServerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClientPingServerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClientPingServerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientPingServerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClientPingServerResponse::kCharIDFieldNumber;
const int CMessageClientPingServerResponse::kClientLocalTimeFieldNumber;
const int CMessageClientPingServerResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

CMessageClientPingServerResponse::CMessageClientPingServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClientPingServerResponse::InitAsDefaultInstance() {}

CMessageClientPingServerResponse::CMessageClientPingServerResponse(const CMessageClientPingServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClientPingServerResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  clientlocaltime_ = GOOGLE_ULONGLONG(0);
  servertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClientPingServerResponse::~CMessageClientPingServerResponse() {
  SharedDtor();
}

void CMessageClientPingServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClientPingServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientPingServerResponse_descriptor_;
}

const CMessageClientPingServerResponse& CMessageClientPingServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClientPingServerResponse* CMessageClientPingServerResponse::default_instance_ = NULL;

CMessageClientPingServerResponse* CMessageClientPingServerResponse::New() const {
  return new CMessageClientPingServerResponse;
}

void CMessageClientPingServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    clientlocaltime_ = GOOGLE_ULONGLONG(0);
    servertime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClientPingServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ClientLocalTime;
        break;
      }
      
      // optional uint64 ClientLocalTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClientLocalTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &clientlocaltime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ServerTime;
        break;
      }
      
      // optional uint64 ServerTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &servertime_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClientPingServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClientPingServerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint64 ClientLocalTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->clientlocaltime(), output);
  }
  
  // optional uint64 ServerTime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->servertime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClientPingServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint64 ClientLocalTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->clientlocaltime(), target);
  }
  
  // optional uint64 ServerTime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->servertime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClientPingServerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint64 ClientLocalTime = 2;
    if (has_clientlocaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->clientlocaltime());
    }
    
    // optional uint64 ServerTime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->servertime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClientPingServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClientPingServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClientPingServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClientPingServerResponse::MergeFrom(const CMessageClientPingServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_clientlocaltime(from.clientlocaltime());
    }
    if (from._has_bit(2)) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClientPingServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientPingServerResponse::CopyFrom(const CMessageClientPingServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientPingServerResponse::Swap(CMessageClientPingServerResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(clientlocaltime_, other->clientlocaltime_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClientPingServerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClientPingServerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClientPingServerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientPingServerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGateKickPlayerNotify::kCharIDFieldNumber;
const int CMessageGateKickPlayerNotify::kKickReasonFieldNumber;
#endif  // !_MSC_VER

CMessageGateKickPlayerNotify::CMessageGateKickPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGateKickPlayerNotify::InitAsDefaultInstance() {}

CMessageGateKickPlayerNotify::CMessageGateKickPlayerNotify(const CMessageGateKickPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGateKickPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  kickreason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGateKickPlayerNotify::~CMessageGateKickPlayerNotify() {
  SharedDtor();
}

void CMessageGateKickPlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGateKickPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateKickPlayerNotify_descriptor_;
}

const CMessageGateKickPlayerNotify& CMessageGateKickPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGateKickPlayerNotify* CMessageGateKickPlayerNotify::default_instance_ = NULL;

CMessageGateKickPlayerNotify* CMessageGateKickPlayerNotify::New() const {
  return new CMessageGateKickPlayerNotify;
}

void CMessageGateKickPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    kickreason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGateKickPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_KickReason;
        break;
      }
      
      // optional uint32 KickReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KickReason:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &kickreason_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGateKickPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGateKickPlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 KickReason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->kickreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGateKickPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 KickReason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->kickreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGateKickPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 KickReason = 2;
    if (has_kickreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->kickreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGateKickPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGateKickPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGateKickPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGateKickPlayerNotify::MergeFrom(const CMessageGateKickPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_kickreason(from.kickreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGateKickPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateKickPlayerNotify::CopyFrom(const CMessageGateKickPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGateKickPlayerNotify::Swap(CMessageGateKickPlayerNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(kickreason_, other->kickreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGateKickPlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGateKickPlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGateKickPlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGateKickPlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueuePlayerNotify::kCountInSceneFieldNumber;
const int CMessageQueuePlayerNotify::kElapsSecondsFieldNumber;
const int CMessageQueuePlayerNotify::kNeedSecondsFieldNumber;
const int CMessageQueuePlayerNotify::kYourPositionFieldNumber;
const int CMessageQueuePlayerNotify::kCountInQueueFieldNumber;
#endif  // !_MSC_VER

CMessageQueuePlayerNotify::CMessageQueuePlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueuePlayerNotify::InitAsDefaultInstance() {}

CMessageQueuePlayerNotify::CMessageQueuePlayerNotify(const CMessageQueuePlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueuePlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  countinscene_ = 0u;
  elapsseconds_ = 0u;
  needseconds_ = 0u;
  yourposition_ = 0u;
  countinqueue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueuePlayerNotify::~CMessageQueuePlayerNotify() {
  SharedDtor();
}

void CMessageQueuePlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueuePlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueuePlayerNotify_descriptor_;
}

const CMessageQueuePlayerNotify& CMessageQueuePlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueuePlayerNotify* CMessageQueuePlayerNotify::default_instance_ = NULL;

CMessageQueuePlayerNotify* CMessageQueuePlayerNotify::New() const {
  return new CMessageQueuePlayerNotify;
}

void CMessageQueuePlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countinscene_ = 0u;
    elapsseconds_ = 0u;
    needseconds_ = 0u;
    yourposition_ = 0u;
    countinqueue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueuePlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CountInScene = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countinscene_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ElapsSeconds;
        break;
      }
      
      // optional uint32 ElapsSeconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ElapsSeconds:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &elapsseconds_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NeedSeconds;
        break;
      }
      
      // optional uint32 NeedSeconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NeedSeconds:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &needseconds_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_YourPosition;
        break;
      }
      
      // optional uint32 YourPosition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YourPosition:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yourposition_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CountInQueue;
        break;
      }
      
      // optional uint32 CountInQueue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountInQueue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countinqueue_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueuePlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueuePlayerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CountInScene = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->countinscene(), output);
  }
  
  // optional uint32 ElapsSeconds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->elapsseconds(), output);
  }
  
  // optional uint32 NeedSeconds = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->needseconds(), output);
  }
  
  // optional uint32 YourPosition = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->yourposition(), output);
  }
  
  // optional uint32 CountInQueue = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->countinqueue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueuePlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CountInScene = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->countinscene(), target);
  }
  
  // optional uint32 ElapsSeconds = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->elapsseconds(), target);
  }
  
  // optional uint32 NeedSeconds = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->needseconds(), target);
  }
  
  // optional uint32 YourPosition = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->yourposition(), target);
  }
  
  // optional uint32 CountInQueue = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->countinqueue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueuePlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CountInScene = 1;
    if (has_countinscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countinscene());
    }
    
    // optional uint32 ElapsSeconds = 2;
    if (has_elapsseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->elapsseconds());
    }
    
    // optional uint32 NeedSeconds = 3;
    if (has_needseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->needseconds());
    }
    
    // optional uint32 YourPosition = 4;
    if (has_yourposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yourposition());
    }
    
    // optional uint32 CountInQueue = 5;
    if (has_countinqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countinqueue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueuePlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueuePlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueuePlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueuePlayerNotify::MergeFrom(const CMessageQueuePlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_countinscene(from.countinscene());
    }
    if (from._has_bit(1)) {
      set_elapsseconds(from.elapsseconds());
    }
    if (from._has_bit(2)) {
      set_needseconds(from.needseconds());
    }
    if (from._has_bit(3)) {
      set_yourposition(from.yourposition());
    }
    if (from._has_bit(4)) {
      set_countinqueue(from.countinqueue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueuePlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueuePlayerNotify::CopyFrom(const CMessageQueuePlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueuePlayerNotify::Swap(CMessageQueuePlayerNotify* other) {
  if (other != this) {
    std::swap(countinscene_, other->countinscene_);
    std::swap(elapsseconds_, other->elapsseconds_);
    std::swap(needseconds_, other->needseconds_);
    std::swap(yourposition_, other->yourposition_);
    std::swap(countinqueue_, other->countinqueue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueuePlayerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueuePlayerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueuePlayerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueuePlayerNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessagePlayerCancelLoginQueue::CMessagePlayerCancelLoginQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerCancelLoginQueue::InitAsDefaultInstance() {}

CMessagePlayerCancelLoginQueue::CMessagePlayerCancelLoginQueue(const CMessagePlayerCancelLoginQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerCancelLoginQueue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerCancelLoginQueue::~CMessagePlayerCancelLoginQueue() {
  SharedDtor();
}

void CMessagePlayerCancelLoginQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerCancelLoginQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerCancelLoginQueue_descriptor_;
}

const CMessagePlayerCancelLoginQueue& CMessagePlayerCancelLoginQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerCancelLoginQueue* CMessagePlayerCancelLoginQueue::default_instance_ = NULL;

CMessagePlayerCancelLoginQueue* CMessagePlayerCancelLoginQueue::New() const {
  return new CMessagePlayerCancelLoginQueue;
}

void CMessagePlayerCancelLoginQueue::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerCancelLoginQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessagePlayerCancelLoginQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerCancelLoginQueue::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerCancelLoginQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerCancelLoginQueue::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerCancelLoginQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerCancelLoginQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerCancelLoginQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerCancelLoginQueue::MergeFrom(const CMessagePlayerCancelLoginQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerCancelLoginQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerCancelLoginQueue::CopyFrom(const CMessagePlayerCancelLoginQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerCancelLoginQueue::Swap(CMessagePlayerCancelLoginQueue* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerCancelLoginQueue::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerCancelLoginQueue::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerCancelLoginQueue::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerCancelLoginQueue_reflection_;
}

// ===================================================================

const ::std::string CMessageCheckRolePwdRequest::_default_password_;
#ifndef _MSC_VER
const int CMessageCheckRolePwdRequest::kCharIDFieldNumber;
const int CMessageCheckRolePwdRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

CMessageCheckRolePwdRequest::CMessageCheckRolePwdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckRolePwdRequest::InitAsDefaultInstance() {}

CMessageCheckRolePwdRequest::CMessageCheckRolePwdRequest(const CMessageCheckRolePwdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckRolePwdRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  password_ = const_cast< ::std::string*>(&_default_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckRolePwdRequest::~CMessageCheckRolePwdRequest() {
  SharedDtor();
}

void CMessageCheckRolePwdRequest::SharedDtor() {
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckRolePwdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckRolePwdRequest_descriptor_;
}

const CMessageCheckRolePwdRequest& CMessageCheckRolePwdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckRolePwdRequest* CMessageCheckRolePwdRequest::default_instance_ = NULL;

CMessageCheckRolePwdRequest* CMessageCheckRolePwdRequest::New() const {
  return new CMessageCheckRolePwdRequest;
}

void CMessageCheckRolePwdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckRolePwdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }
      
      // optional string Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckRolePwdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckRolePwdRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional string Password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckRolePwdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional string Password = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckRolePwdRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckRolePwdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckRolePwdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckRolePwdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckRolePwdRequest::MergeFrom(const CMessageCheckRolePwdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckRolePwdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckRolePwdRequest::CopyFrom(const CMessageCheckRolePwdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckRolePwdRequest::Swap(CMessageCheckRolePwdRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckRolePwdRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckRolePwdRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckRolePwdRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckRolePwdRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCheckRolePwdResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCheckRolePwdResponse::CMessageCheckRolePwdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckRolePwdResponse::InitAsDefaultInstance() {}

CMessageCheckRolePwdResponse::CMessageCheckRolePwdResponse(const CMessageCheckRolePwdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckRolePwdResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckRolePwdResponse::~CMessageCheckRolePwdResponse() {
  SharedDtor();
}

void CMessageCheckRolePwdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckRolePwdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckRolePwdResponse_descriptor_;
}

const CMessageCheckRolePwdResponse& CMessageCheckRolePwdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckRolePwdResponse* CMessageCheckRolePwdResponse::default_instance_ = NULL;

CMessageCheckRolePwdResponse* CMessageCheckRolePwdResponse::New() const {
  return new CMessageCheckRolePwdResponse;
}

void CMessageCheckRolePwdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckRolePwdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckRolePwdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckRolePwdResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckRolePwdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckRolePwdResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckRolePwdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckRolePwdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckRolePwdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckRolePwdResponse::MergeFrom(const CMessageCheckRolePwdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckRolePwdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckRolePwdResponse::CopyFrom(const CMessageCheckRolePwdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckRolePwdResponse::Swap(CMessageCheckRolePwdResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckRolePwdResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckRolePwdResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckRolePwdResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckRolePwdResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSendClientInfoRequest::_default_hostinfo_;
const ::std::string CMessageSendClientInfoRequest::_default_macaddr_;
#ifndef _MSC_VER
const int CMessageSendClientInfoRequest::kHostInfoFieldNumber;
const int CMessageSendClientInfoRequest::kMacAddrFieldNumber;
#endif  // !_MSC_VER

CMessageSendClientInfoRequest::CMessageSendClientInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendClientInfoRequest::InitAsDefaultInstance() {}

CMessageSendClientInfoRequest::CMessageSendClientInfoRequest(const CMessageSendClientInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendClientInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  hostinfo_ = const_cast< ::std::string*>(&_default_hostinfo_);
  macaddr_ = const_cast< ::std::string*>(&_default_macaddr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendClientInfoRequest::~CMessageSendClientInfoRequest() {
  SharedDtor();
}

void CMessageSendClientInfoRequest::SharedDtor() {
  if (hostinfo_ != &_default_hostinfo_) {
    delete hostinfo_;
  }
  if (macaddr_ != &_default_macaddr_) {
    delete macaddr_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendClientInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClientInfoRequest_descriptor_;
}

const CMessageSendClientInfoRequest& CMessageSendClientInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendClientInfoRequest* CMessageSendClientInfoRequest::default_instance_ = NULL;

CMessageSendClientInfoRequest* CMessageSendClientInfoRequest::New() const {
  return new CMessageSendClientInfoRequest;
}

void CMessageSendClientInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (hostinfo_ != &_default_hostinfo_) {
        hostinfo_->clear();
      }
    }
    if (_has_bit(1)) {
      if (macaddr_ != &_default_macaddr_) {
        macaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendClientInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string HostInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_hostinfo()));
        if (input->ExpectTag(18)) goto parse_MacAddr;
        break;
      }
      
      // optional string MacAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MacAddr:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_macaddr()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendClientInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendClientInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string HostInfo = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->hostinfo(), output);
  }
  
  // optional string MacAddr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->macaddr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendClientInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string HostInfo = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->hostinfo(), target);
  }
  
  // optional string MacAddr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->macaddr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendClientInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string HostInfo = 1;
    if (has_hostinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->hostinfo());
    }
    
    // optional string MacAddr = 2;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->macaddr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendClientInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendClientInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendClientInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendClientInfoRequest::MergeFrom(const CMessageSendClientInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hostinfo(from.hostinfo());
    }
    if (from._has_bit(1)) {
      set_macaddr(from.macaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendClientInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClientInfoRequest::CopyFrom(const CMessageSendClientInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendClientInfoRequest::Swap(CMessageSendClientInfoRequest* other) {
  if (other != this) {
    std::swap(hostinfo_, other->hostinfo_);
    std::swap(macaddr_, other->macaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendClientInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendClientInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendClientInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendClientInfoRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageSendAntiBotDataToServerNotify::_default_clientdata_;
#ifndef _MSC_VER
const int CMessageSendAntiBotDataToServerNotify::kLengthFieldNumber;
const int CMessageSendAntiBotDataToServerNotify::kClientDataFieldNumber;
#endif  // !_MSC_VER

CMessageSendAntiBotDataToServerNotify::CMessageSendAntiBotDataToServerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendAntiBotDataToServerNotify::InitAsDefaultInstance() {}

CMessageSendAntiBotDataToServerNotify::CMessageSendAntiBotDataToServerNotify(const CMessageSendAntiBotDataToServerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToServerNotify::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  clientdata_ = const_cast< ::std::string*>(&_default_clientdata_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendAntiBotDataToServerNotify::~CMessageSendAntiBotDataToServerNotify() {
  SharedDtor();
}

void CMessageSendAntiBotDataToServerNotify::SharedDtor() {
  if (clientdata_ != &_default_clientdata_) {
    delete clientdata_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToServerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendAntiBotDataToServerNotify_descriptor_;
}

const CMessageSendAntiBotDataToServerNotify& CMessageSendAntiBotDataToServerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendAntiBotDataToServerNotify* CMessageSendAntiBotDataToServerNotify::default_instance_ = NULL;

CMessageSendAntiBotDataToServerNotify* CMessageSendAntiBotDataToServerNotify::New() const {
  return new CMessageSendAntiBotDataToServerNotify;
}

void CMessageSendAntiBotDataToServerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    if (_has_bit(1)) {
      if (clientdata_ != &_default_clientdata_) {
        clientdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendAntiBotDataToServerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &length_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ClientData;
        break;
      }
      
      // optional bytes ClientData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ClientData:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_clientdata()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendAntiBotDataToServerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendAntiBotDataToServerNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->length(), output);
  }
  
  // optional bytes ClientData = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->clientdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendAntiBotDataToServerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Length = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->length(), target);
  }
  
  // optional bytes ClientData = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->clientdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendAntiBotDataToServerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->length());
    }
    
    // optional bytes ClientData = 2;
    if (has_clientdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->clientdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendAntiBotDataToServerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendAntiBotDataToServerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendAntiBotDataToServerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendAntiBotDataToServerNotify::MergeFrom(const CMessageSendAntiBotDataToServerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_length(from.length());
    }
    if (from._has_bit(1)) {
      set_clientdata(from.clientdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendAntiBotDataToServerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToServerNotify::CopyFrom(const CMessageSendAntiBotDataToServerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToServerNotify::Swap(CMessageSendAntiBotDataToServerNotify* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(clientdata_, other->clientdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendAntiBotDataToServerNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToServerNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendAntiBotDataToServerNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendAntiBotDataToServerNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageSendAntiBotDataToClientNotify::_default_serverdata_;
#ifndef _MSC_VER
const int CMessageSendAntiBotDataToClientNotify::kServerDataFieldNumber;
const int CMessageSendAntiBotDataToClientNotify::kLengthFieldNumber;
#endif  // !_MSC_VER

CMessageSendAntiBotDataToClientNotify::CMessageSendAntiBotDataToClientNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSendAntiBotDataToClientNotify::InitAsDefaultInstance() {}

CMessageSendAntiBotDataToClientNotify::CMessageSendAntiBotDataToClientNotify(const CMessageSendAntiBotDataToClientNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToClientNotify::SharedCtor() {
  _cached_size_ = 0;
  serverdata_ = const_cast< ::std::string*>(&_default_serverdata_);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSendAntiBotDataToClientNotify::~CMessageSendAntiBotDataToClientNotify() {
  SharedDtor();
}

void CMessageSendAntiBotDataToClientNotify::SharedDtor() {
  if (serverdata_ != &_default_serverdata_) {
    delete serverdata_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToClientNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendAntiBotDataToClientNotify_descriptor_;
}

const CMessageSendAntiBotDataToClientNotify& CMessageSendAntiBotDataToClientNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSendAntiBotDataToClientNotify* CMessageSendAntiBotDataToClientNotify::default_instance_ = NULL;

CMessageSendAntiBotDataToClientNotify* CMessageSendAntiBotDataToClientNotify::New() const {
  return new CMessageSendAntiBotDataToClientNotify;
}

void CMessageSendAntiBotDataToClientNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (serverdata_ != &_default_serverdata_) {
        serverdata_->clear();
      }
    }
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSendAntiBotDataToClientNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes ServerData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_serverdata()));
        if (input->ExpectTag(16)) goto parse_Length;
        break;
      }
      
      // optional uint32 Length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Length:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &length_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSendAntiBotDataToClientNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSendAntiBotDataToClientNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes ServerData = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->serverdata(), output);
  }
  
  // optional uint32 Length = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSendAntiBotDataToClientNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ServerData = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->serverdata(), target);
  }
  
  // optional uint32 Length = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSendAntiBotDataToClientNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ServerData = 1;
    if (has_serverdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->serverdata());
    }
    
    // optional uint32 Length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSendAntiBotDataToClientNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSendAntiBotDataToClientNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSendAntiBotDataToClientNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSendAntiBotDataToClientNotify::MergeFrom(const CMessageSendAntiBotDataToClientNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serverdata(from.serverdata());
    }
    if (from._has_bit(1)) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSendAntiBotDataToClientNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToClientNotify::CopyFrom(const CMessageSendAntiBotDataToClientNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSendAntiBotDataToClientNotify::Swap(CMessageSendAntiBotDataToClientNotify* other) {
  if (other != this) {
    std::swap(serverdata_, other->serverdata_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSendAntiBotDataToClientNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSendAntiBotDataToClientNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSendAntiBotDataToClientNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSendAntiBotDataToClientNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageClientAntiBotStartRetNotify::kStartRetFieldNumber;
#endif  // !_MSC_VER

CMessageClientAntiBotStartRetNotify::CMessageClientAntiBotStartRetNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageClientAntiBotStartRetNotify::InitAsDefaultInstance() {}

CMessageClientAntiBotStartRetNotify::CMessageClientAntiBotStartRetNotify(const CMessageClientAntiBotStartRetNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageClientAntiBotStartRetNotify::SharedCtor() {
  _cached_size_ = 0;
  startret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageClientAntiBotStartRetNotify::~CMessageClientAntiBotStartRetNotify() {
  SharedDtor();
}

void CMessageClientAntiBotStartRetNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageClientAntiBotStartRetNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientAntiBotStartRetNotify_descriptor_;
}

const CMessageClientAntiBotStartRetNotify& CMessageClientAntiBotStartRetNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageClientAntiBotStartRetNotify* CMessageClientAntiBotStartRetNotify::default_instance_ = NULL;

CMessageClientAntiBotStartRetNotify* CMessageClientAntiBotStartRetNotify::New() const {
  return new CMessageClientAntiBotStartRetNotify;
}

void CMessageClientAntiBotStartRetNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageClientAntiBotStartRetNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StartRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &startret_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageClientAntiBotStartRetNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageClientAntiBotStartRetNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StartRet = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->startret(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageClientAntiBotStartRetNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StartRet = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->startret(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageClientAntiBotStartRetNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StartRet = 1;
    if (has_startret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->startret());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageClientAntiBotStartRetNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageClientAntiBotStartRetNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageClientAntiBotStartRetNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageClientAntiBotStartRetNotify::MergeFrom(const CMessageClientAntiBotStartRetNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_startret(from.startret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageClientAntiBotStartRetNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientAntiBotStartRetNotify::CopyFrom(const CMessageClientAntiBotStartRetNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageClientAntiBotStartRetNotify::Swap(CMessageClientAntiBotStartRetNotify* other) {
  if (other != this) {
    std::swap(startret_, other->startret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageClientAntiBotStartRetNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageClientAntiBotStartRetNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageClientAntiBotStartRetNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageClientAntiBotStartRetNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageDisconnectNotify::CMessageDisconnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisconnectNotify::InitAsDefaultInstance() {}

CMessageDisconnectNotify::CMessageDisconnectNotify(const CMessageDisconnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisconnectNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisconnectNotify::~CMessageDisconnectNotify() {
  SharedDtor();
}

void CMessageDisconnectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDisconnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisconnectNotify_descriptor_;
}

const CMessageDisconnectNotify& CMessageDisconnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisconnectNotify* CMessageDisconnectNotify::default_instance_ = NULL;

CMessageDisconnectNotify* CMessageDisconnectNotify::New() const {
  return new CMessageDisconnectNotify;
}

void CMessageDisconnectNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisconnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageDisconnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisconnectNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisconnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisconnectNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisconnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisconnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisconnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisconnectNotify::MergeFrom(const CMessageDisconnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisconnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisconnectNotify::CopyFrom(const CMessageDisconnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisconnectNotify::Swap(CMessageDisconnectNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisconnectNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisconnectNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisconnectNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisconnectNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserAuthNotify::kActionIDFieldNumber;
const int CMessageUserAuthNotify::kAuthTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUserAuthNotify::CMessageUserAuthNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserAuthNotify::InitAsDefaultInstance() {}

CMessageUserAuthNotify::CMessageUserAuthNotify(const CMessageUserAuthNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserAuthNotify::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = 0u;
  authtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserAuthNotify::~CMessageUserAuthNotify() {
  SharedDtor();
}

void CMessageUserAuthNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserAuthNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthNotify_descriptor_;
}

const CMessageUserAuthNotify& CMessageUserAuthNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserAuthNotify* CMessageUserAuthNotify::default_instance_ = NULL;

CMessageUserAuthNotify* CMessageUserAuthNotify::New() const {
  return new CMessageUserAuthNotify;
}

void CMessageUserAuthNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = 0u;
    authtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserAuthNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AuthType;
        break;
      }
      
      // optional uint32 AuthType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AuthType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &authtype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserAuthNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserAuthNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->actionid(), output);
  }
  
  // optional uint32 AuthType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->authtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserAuthNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->actionid(), target);
  }
  
  // optional uint32 AuthType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->authtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserAuthNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActionID = 1;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionid());
    }
    
    // optional uint32 AuthType = 2;
    if (has_authtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->authtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserAuthNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserAuthNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserAuthNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserAuthNotify::MergeFrom(const CMessageUserAuthNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_actionid(from.actionid());
    }
    if (from._has_bit(1)) {
      set_authtype(from.authtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserAuthNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthNotify::CopyFrom(const CMessageUserAuthNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthNotify::Swap(CMessageUserAuthNotify* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(authtype_, other->authtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserAuthNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserAuthNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserAuthNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserAuthRequest::kActionIDFieldNumber;
const int CMessageUserAuthRequest::kAuthValueFieldNumber;
#endif  // !_MSC_VER

CMessageUserAuthRequest::CMessageUserAuthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserAuthRequest::InitAsDefaultInstance() {}

CMessageUserAuthRequest::CMessageUserAuthRequest(const CMessageUserAuthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserAuthRequest::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = 0u;
  authvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserAuthRequest::~CMessageUserAuthRequest() {
  SharedDtor();
}

void CMessageUserAuthRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserAuthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthRequest_descriptor_;
}

const CMessageUserAuthRequest& CMessageUserAuthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserAuthRequest* CMessageUserAuthRequest::default_instance_ = NULL;

CMessageUserAuthRequest* CMessageUserAuthRequest::New() const {
  return new CMessageUserAuthRequest;
}

void CMessageUserAuthRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = 0u;
    authvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AuthValue;
        break;
      }
      
      // optional uint32 AuthValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AuthValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &authvalue_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserAuthRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->actionid(), output);
  }
  
  // optional uint32 AuthValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->authvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserAuthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->actionid(), target);
  }
  
  // optional uint32 AuthValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->authvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserAuthRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActionID = 1;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionid());
    }
    
    // optional uint32 AuthValue = 2;
    if (has_authvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->authvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserAuthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserAuthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserAuthRequest::MergeFrom(const CMessageUserAuthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_actionid(from.actionid());
    }
    if (from._has_bit(1)) {
      set_authvalue(from.authvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthRequest::CopyFrom(const CMessageUserAuthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthRequest::Swap(CMessageUserAuthRequest* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(authvalue_, other->authvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserAuthRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserAuthRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserAuthRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUserAuthResponse::kActionIDFieldNumber;
const int CMessageUserAuthResponse::kOKFieldNumber;
#endif  // !_MSC_VER

CMessageUserAuthResponse::CMessageUserAuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUserAuthResponse::InitAsDefaultInstance() {}

CMessageUserAuthResponse::CMessageUserAuthResponse(const CMessageUserAuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUserAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = 0u;
  ok_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUserAuthResponse::~CMessageUserAuthResponse() {
  SharedDtor();
}

void CMessageUserAuthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUserAuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthResponse_descriptor_;
}

const CMessageUserAuthResponse& CMessageUserAuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUserAuthResponse* CMessageUserAuthResponse::default_instance_ = NULL;

CMessageUserAuthResponse* CMessageUserAuthResponse::New() const {
  return new CMessageUserAuthResponse;
}

void CMessageUserAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = 0u;
    ok_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUserAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &actionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OK;
        break;
      }
      
      // optional uint32 OK = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OK:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ok_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUserAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUserAuthResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->actionid(), output);
  }
  
  // optional uint32 OK = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUserAuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->actionid(), target);
  }
  
  // optional uint32 OK = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUserAuthResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActionID = 1;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->actionid());
    }
    
    // optional uint32 OK = 2;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ok());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUserAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUserAuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUserAuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUserAuthResponse::MergeFrom(const CMessageUserAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_actionid(from.actionid());
    }
    if (from._has_bit(1)) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUserAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthResponse::CopyFrom(const CMessageUserAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUserAuthResponse::Swap(CMessageUserAuthResponse* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUserAuthResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUserAuthResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUserAuthResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUserAuthResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelDeleteRoleRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageCancelDeleteRoleRequest::CMessageCancelDeleteRoleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelDeleteRoleRequest::InitAsDefaultInstance() {}

CMessageCancelDeleteRoleRequest::CMessageCancelDeleteRoleRequest(const CMessageCancelDeleteRoleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelDeleteRoleRequest::~CMessageCancelDeleteRoleRequest() {
  SharedDtor();
}

void CMessageCancelDeleteRoleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelDeleteRoleRequest_descriptor_;
}

const CMessageCancelDeleteRoleRequest& CMessageCancelDeleteRoleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelDeleteRoleRequest* CMessageCancelDeleteRoleRequest::default_instance_ = NULL;

CMessageCancelDeleteRoleRequest* CMessageCancelDeleteRoleRequest::New() const {
  return new CMessageCancelDeleteRoleRequest;
}

void CMessageCancelDeleteRoleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelDeleteRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelDeleteRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelDeleteRoleRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelDeleteRoleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelDeleteRoleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelDeleteRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelDeleteRoleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelDeleteRoleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelDeleteRoleRequest::MergeFrom(const CMessageCancelDeleteRoleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelDeleteRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleRequest::CopyFrom(const CMessageCancelDeleteRoleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleRequest::Swap(CMessageCancelDeleteRoleRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelDeleteRoleRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelDeleteRoleRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelDeleteRoleRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCancelDeleteRoleResponse::kErrcodeFieldNumber;
const int CMessageCancelDeleteRoleResponse::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageCancelDeleteRoleResponse::CMessageCancelDeleteRoleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCancelDeleteRoleResponse::InitAsDefaultInstance() {}

CMessageCancelDeleteRoleResponse::CMessageCancelDeleteRoleResponse(const CMessageCancelDeleteRoleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCancelDeleteRoleResponse::~CMessageCancelDeleteRoleResponse() {
  SharedDtor();
}

void CMessageCancelDeleteRoleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelDeleteRoleResponse_descriptor_;
}

const CMessageCancelDeleteRoleResponse& CMessageCancelDeleteRoleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCancelDeleteRoleResponse* CMessageCancelDeleteRoleResponse::default_instance_ = NULL;

CMessageCancelDeleteRoleResponse* CMessageCancelDeleteRoleResponse::New() const {
  return new CMessageCancelDeleteRoleResponse;
}

void CMessageCancelDeleteRoleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCancelDeleteRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCancelDeleteRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCancelDeleteRoleResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCancelDeleteRoleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCancelDeleteRoleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCancelDeleteRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCancelDeleteRoleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCancelDeleteRoleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCancelDeleteRoleResponse::MergeFrom(const CMessageCancelDeleteRoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCancelDeleteRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleResponse::CopyFrom(const CMessageCancelDeleteRoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCancelDeleteRoleResponse::Swap(CMessageCancelDeleteRoleResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCancelDeleteRoleResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCancelDeleteRoleResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCancelDeleteRoleResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCancelDeleteRoleResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageQuestionRequireRequest::CMessageQuestionRequireRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuestionRequireRequest::InitAsDefaultInstance() {}

CMessageQuestionRequireRequest::CMessageQuestionRequireRequest(const CMessageQuestionRequireRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuestionRequireRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuestionRequireRequest::~CMessageQuestionRequireRequest() {
  SharedDtor();
}

void CMessageQuestionRequireRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQuestionRequireRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionRequireRequest_descriptor_;
}

const CMessageQuestionRequireRequest& CMessageQuestionRequireRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuestionRequireRequest* CMessageQuestionRequireRequest::default_instance_ = NULL;

CMessageQuestionRequireRequest* CMessageQuestionRequireRequest::New() const {
  return new CMessageQuestionRequireRequest;
}

void CMessageQuestionRequireRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuestionRequireRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageQuestionRequireRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuestionRequireRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuestionRequireRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuestionRequireRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuestionRequireRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuestionRequireRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuestionRequireRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuestionRequireRequest::MergeFrom(const CMessageQuestionRequireRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuestionRequireRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionRequireRequest::CopyFrom(const CMessageQuestionRequireRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionRequireRequest::Swap(CMessageQuestionRequireRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuestionRequireRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuestionRequireRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuestionRequireRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionRequireRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageQuestionRequireResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionRequireResponse_EStatus_descriptor_;
}
bool CMessageQuestionRequireResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageQuestionRequireResponse_EStatus CMessageQuestionRequireResponse::STATUS_SUCCESS;
const CMessageQuestionRequireResponse_EStatus CMessageQuestionRequireResponse::STATUS_WAIT;
const CMessageQuestionRequireResponse_EStatus CMessageQuestionRequireResponse::EStatus_MIN;
const CMessageQuestionRequireResponse_EStatus CMessageQuestionRequireResponse::EStatus_MAX;
#endif  // _MSC_VER
const ::std::string CMessageQuestionRequireResponse::_default_question_;
const ::std::string CMessageQuestionRequireResponse::_default_optiona_;
const ::std::string CMessageQuestionRequireResponse::_default_optionb_;
const ::std::string CMessageQuestionRequireResponse::_default_optionc_;
const ::std::string CMessageQuestionRequireResponse::_default_optiond_;
#ifndef _MSC_VER
const int CMessageQuestionRequireResponse::kStatusFieldNumber;
const int CMessageQuestionRequireResponse::kQuestionIdFieldNumber;
const int CMessageQuestionRequireResponse::kQuestionFieldNumber;
const int CMessageQuestionRequireResponse::kOptionAFieldNumber;
const int CMessageQuestionRequireResponse::kOptionBFieldNumber;
const int CMessageQuestionRequireResponse::kOptionCFieldNumber;
const int CMessageQuestionRequireResponse::kOptionDFieldNumber;
#endif  // !_MSC_VER

CMessageQuestionRequireResponse::CMessageQuestionRequireResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuestionRequireResponse::InitAsDefaultInstance() {}

CMessageQuestionRequireResponse::CMessageQuestionRequireResponse(const CMessageQuestionRequireResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuestionRequireResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  questionid_ = 0u;
  question_ = const_cast< ::std::string*>(&_default_question_);
  optiona_ = const_cast< ::std::string*>(&_default_optiona_);
  optionb_ = const_cast< ::std::string*>(&_default_optionb_);
  optionc_ = const_cast< ::std::string*>(&_default_optionc_);
  optiond_ = const_cast< ::std::string*>(&_default_optiond_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuestionRequireResponse::~CMessageQuestionRequireResponse() {
  SharedDtor();
}

void CMessageQuestionRequireResponse::SharedDtor() {
  if (question_ != &_default_question_) {
    delete question_;
  }
  if (optiona_ != &_default_optiona_) {
    delete optiona_;
  }
  if (optionb_ != &_default_optionb_) {
    delete optionb_;
  }
  if (optionc_ != &_default_optionc_) {
    delete optionc_;
  }
  if (optiond_ != &_default_optiond_) {
    delete optiond_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQuestionRequireResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionRequireResponse_descriptor_;
}

const CMessageQuestionRequireResponse& CMessageQuestionRequireResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuestionRequireResponse* CMessageQuestionRequireResponse::default_instance_ = NULL;

CMessageQuestionRequireResponse* CMessageQuestionRequireResponse::New() const {
  return new CMessageQuestionRequireResponse;
}

void CMessageQuestionRequireResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    questionid_ = 0u;
    if (_has_bit(2)) {
      if (question_ != &_default_question_) {
        question_->clear();
      }
    }
    if (_has_bit(3)) {
      if (optiona_ != &_default_optiona_) {
        optiona_->clear();
      }
    }
    if (_has_bit(4)) {
      if (optionb_ != &_default_optionb_) {
        optionb_->clear();
      }
    }
    if (_has_bit(5)) {
      if (optionc_ != &_default_optionc_) {
        optionc_->clear();
      }
    }
    if (_has_bit(6)) {
      if (optiond_ != &_default_optiond_) {
        optiond_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuestionRequireResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageQuestionRequireResponse.EStatus Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageQuestionRequireResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageQuestionRequireResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_QuestionId;
        break;
      }
      
      // optional uint32 QuestionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QuestionId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &questionid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Question;
        break;
      }
      
      // optional string Question = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Question:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_question()));
        if (input->ExpectTag(34)) goto parse_OptionA;
        break;
      }
      
      // optional bytes OptionA = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OptionA:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_optiona()));
        if (input->ExpectTag(42)) goto parse_OptionB;
        break;
      }
      
      // optional bytes OptionB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OptionB:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_optionb()));
        if (input->ExpectTag(50)) goto parse_OptionC;
        break;
      }
      
      // optional bytes OptionC = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OptionC:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_optionc()));
        if (input->ExpectTag(58)) goto parse_OptionD;
        break;
      }
      
      // optional bytes OptionD = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OptionD:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_optiond()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQuestionRequireResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuestionRequireResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageQuestionRequireResponse.EStatus Status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 QuestionId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->questionid(), output);
  }
  
  // optional string Question = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->question(), output);
  }
  
  // optional bytes OptionA = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->optiona(), output);
  }
  
  // optional bytes OptionB = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->optionb(), output);
  }
  
  // optional bytes OptionC = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->optionc(), output);
  }
  
  // optional bytes OptionD = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->optiond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuestionRequireResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageQuestionRequireResponse.EStatus Status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 QuestionId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->questionid(), target);
  }
  
  // optional string Question = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->question(), target);
  }
  
  // optional bytes OptionA = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->optiona(), target);
  }
  
  // optional bytes OptionB = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->optionb(), target);
  }
  
  // optional bytes OptionC = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->optionc(), target);
  }
  
  // optional bytes OptionD = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->optiond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuestionRequireResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageQuestionRequireResponse.EStatus Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 QuestionId = 2;
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->questionid());
    }
    
    // optional string Question = 3;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->question());
    }
    
    // optional bytes OptionA = 4;
    if (has_optiona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->optiona());
    }
    
    // optional bytes OptionB = 5;
    if (has_optionb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->optionb());
    }
    
    // optional bytes OptionC = 6;
    if (has_optionc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->optionc());
    }
    
    // optional bytes OptionD = 7;
    if (has_optiond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->optiond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuestionRequireResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuestionRequireResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuestionRequireResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuestionRequireResponse::MergeFrom(const CMessageQuestionRequireResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_questionid(from.questionid());
    }
    if (from._has_bit(2)) {
      set_question(from.question());
    }
    if (from._has_bit(3)) {
      set_optiona(from.optiona());
    }
    if (from._has_bit(4)) {
      set_optionb(from.optionb());
    }
    if (from._has_bit(5)) {
      set_optionc(from.optionc());
    }
    if (from._has_bit(6)) {
      set_optiond(from.optiond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuestionRequireResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionRequireResponse::CopyFrom(const CMessageQuestionRequireResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionRequireResponse::Swap(CMessageQuestionRequireResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(questionid_, other->questionid_);
    std::swap(question_, other->question_);
    std::swap(optiona_, other->optiona_);
    std::swap(optionb_, other->optionb_);
    std::swap(optionc_, other->optionc_);
    std::swap(optiond_, other->optiond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuestionRequireResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuestionRequireResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuestionRequireResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionRequireResponse_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageQuestionAnswerRequest_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerRequest_EStatus_descriptor_;
}
bool CMessageQuestionAnswerRequest_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageQuestionAnswerRequest_EStatus CMessageQuestionAnswerRequest::STATUS_SUCCESS;
const CMessageQuestionAnswerRequest_EStatus CMessageQuestionAnswerRequest::STATUS_WAIT;
const CMessageQuestionAnswerRequest_EStatus CMessageQuestionAnswerRequest::EStatus_MIN;
const CMessageQuestionAnswerRequest_EStatus CMessageQuestionAnswerRequest::EStatus_MAX;
#endif  // _MSC_VER
const ::std::string CMessageQuestionAnswerRequest::_default_answer_;
#ifndef _MSC_VER
const int CMessageQuestionAnswerRequest::kQuestionIdFieldNumber;
const int CMessageQuestionAnswerRequest::kAnswerFieldNumber;
#endif  // !_MSC_VER

CMessageQuestionAnswerRequest::CMessageQuestionAnswerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuestionAnswerRequest::InitAsDefaultInstance() {}

CMessageQuestionAnswerRequest::CMessageQuestionAnswerRequest(const CMessageQuestionAnswerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuestionAnswerRequest::SharedCtor() {
  _cached_size_ = 0;
  questionid_ = 0u;
  answer_ = const_cast< ::std::string*>(&_default_answer_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuestionAnswerRequest::~CMessageQuestionAnswerRequest() {
  SharedDtor();
}

void CMessageQuestionAnswerRequest::SharedDtor() {
  if (answer_ != &_default_answer_) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQuestionAnswerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerRequest_descriptor_;
}

const CMessageQuestionAnswerRequest& CMessageQuestionAnswerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuestionAnswerRequest* CMessageQuestionAnswerRequest::default_instance_ = NULL;

CMessageQuestionAnswerRequest* CMessageQuestionAnswerRequest::New() const {
  return new CMessageQuestionAnswerRequest;
}

void CMessageQuestionAnswerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questionid_ = 0u;
    if (_has_bit(1)) {
      if (answer_ != &_default_answer_) {
        answer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuestionAnswerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 QuestionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &questionid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Answer;
        break;
      }
      
      // optional bytes Answer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Answer:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_answer()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQuestionAnswerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuestionAnswerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 QuestionId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->questionid(), output);
  }
  
  // optional bytes Answer = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->answer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuestionAnswerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 QuestionId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->questionid(), target);
  }
  
  // optional bytes Answer = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->answer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuestionAnswerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QuestionId = 1;
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->questionid());
    }
    
    // optional bytes Answer = 2;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->answer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuestionAnswerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuestionAnswerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuestionAnswerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuestionAnswerRequest::MergeFrom(const CMessageQuestionAnswerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_questionid(from.questionid());
    }
    if (from._has_bit(1)) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuestionAnswerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionAnswerRequest::CopyFrom(const CMessageQuestionAnswerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionAnswerRequest::Swap(CMessageQuestionAnswerRequest* other) {
  if (other != this) {
    std::swap(questionid_, other->questionid_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuestionAnswerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuestionAnswerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuestionAnswerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageQuestionAnswerResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerResponse_EStatus_descriptor_;
}
bool CMessageQuestionAnswerResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageQuestionAnswerResponse_EStatus CMessageQuestionAnswerResponse::STATUS_SUCCESS;
const CMessageQuestionAnswerResponse_EStatus CMessageQuestionAnswerResponse::STATUS_WAIT;
const CMessageQuestionAnswerResponse_EStatus CMessageQuestionAnswerResponse::EStatus_MIN;
const CMessageQuestionAnswerResponse_EStatus CMessageQuestionAnswerResponse::EStatus_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageQuestionAnswerResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

CMessageQuestionAnswerResponse::CMessageQuestionAnswerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQuestionAnswerResponse::InitAsDefaultInstance() {}

CMessageQuestionAnswerResponse::CMessageQuestionAnswerResponse(const CMessageQuestionAnswerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQuestionAnswerResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQuestionAnswerResponse::~CMessageQuestionAnswerResponse() {
  SharedDtor();
}

void CMessageQuestionAnswerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQuestionAnswerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerResponse_descriptor_;
}

const CMessageQuestionAnswerResponse& CMessageQuestionAnswerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQuestionAnswerResponse* CMessageQuestionAnswerResponse::default_instance_ = NULL;

CMessageQuestionAnswerResponse* CMessageQuestionAnswerResponse::New() const {
  return new CMessageQuestionAnswerResponse;
}

void CMessageQuestionAnswerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQuestionAnswerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageQuestionAnswerResponse.EStatus Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageQuestionAnswerResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageQuestionAnswerResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQuestionAnswerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQuestionAnswerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageQuestionAnswerResponse.EStatus Status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQuestionAnswerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageQuestionAnswerResponse.EStatus Status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQuestionAnswerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageQuestionAnswerResponse.EStatus Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQuestionAnswerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQuestionAnswerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQuestionAnswerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQuestionAnswerResponse::MergeFrom(const CMessageQuestionAnswerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQuestionAnswerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionAnswerResponse::CopyFrom(const CMessageQuestionAnswerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQuestionAnswerResponse::Swap(CMessageQuestionAnswerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQuestionAnswerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQuestionAnswerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQuestionAnswerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQuestionAnswerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginServerInfo::kIdFieldNumber;
const int CMessageLoginServerInfo::kFlagFieldNumber;
const int CMessageLoginServerInfo::kStatusFieldNumber;
const int CMessageLoginServerInfo::kCountFieldNumber;
#endif  // !_MSC_VER

CMessageLoginServerInfo::CMessageLoginServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoginServerInfo::InitAsDefaultInstance() {}

CMessageLoginServerInfo::CMessageLoginServerInfo(const CMessageLoginServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoginServerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  flag_ = 0u;
  status_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginServerInfo::~CMessageLoginServerInfo() {
  SharedDtor();
}

void CMessageLoginServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoginServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerInfo_descriptor_;
}

const CMessageLoginServerInfo& CMessageLoginServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoginServerInfo* CMessageLoginServerInfo::default_instance_ = NULL;

CMessageLoginServerInfo* CMessageLoginServerInfo::New() const {
  return new CMessageLoginServerInfo;
}

void CMessageLoginServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    flag_ = 0u;
    status_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoginServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoginServerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 flag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->flag(), output);
  }
  
  // optional uint32 status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->status(), output);
  }
  
  // optional uint32 count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoginServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 flag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->flag(), target);
  }
  
  // optional uint32 status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->status(), target);
  }
  
  // optional uint32 count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoginServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoginServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginServerInfo::MergeFrom(const CMessageLoginServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerInfo::CopyFrom(const CMessageLoginServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerInfo::Swap(CMessageLoginServerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoginServerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoginServerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoginServerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerInfo_reflection_;
}

// ===================================================================

const ::std::string CMessageCertifyRequest::_default_passport_;
const ::std::string CMessageCertifyRequest::_default_password_;
const ::std::string CMessageCertifyRequest::_default_md5code_;
const ::std::string CMessageCertifyRequest::_default_mac_;
const ::std::string CMessageCertifyRequest::_default_matrixcode_;
const ::std::string CMessageCertifyRequest::_default_matrixcoord_;
#ifndef _MSC_VER
const int CMessageCertifyRequest::kPassportFieldNumber;
const int CMessageCertifyRequest::kPasswordFieldNumber;
const int CMessageCertifyRequest::kMd5CodeFieldNumber;
const int CMessageCertifyRequest::kMacFieldNumber;
const int CMessageCertifyRequest::kSourceIdFieldNumber;
const int CMessageCertifyRequest::kVersionFieldNumber;
const int CMessageCertifyRequest::kTaskVersionFieldNumber;
const int CMessageCertifyRequest::kTemplateVersionFieldNumber;
const int CMessageCertifyRequest::kMatrixTypeFieldNumber;
const int CMessageCertifyRequest::kMatrixCodeFieldNumber;
const int CMessageCertifyRequest::kMatrixCoordFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyRequest::CMessageCertifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyRequest::InitAsDefaultInstance() {}

CMessageCertifyRequest::CMessageCertifyRequest(const CMessageCertifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyRequest::SharedCtor() {
  _cached_size_ = 0;
  passport_ = const_cast< ::std::string*>(&_default_passport_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  md5code_ = const_cast< ::std::string*>(&_default_md5code_);
  mac_ = const_cast< ::std::string*>(&_default_mac_);
  sourceid_ = 0;
  version_ = 0u;
  taskversion_ = 0u;
  templateversion_ = 0u;
  matrixtype_ = 0u;
  matrixcode_ = const_cast< ::std::string*>(&_default_matrixcode_);
  matrixcoord_ = const_cast< ::std::string*>(&_default_matrixcoord_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyRequest::~CMessageCertifyRequest() {
  SharedDtor();
}

void CMessageCertifyRequest::SharedDtor() {
  if (passport_ != &_default_passport_) {
    delete passport_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (md5code_ != &_default_md5code_) {
    delete md5code_;
  }
  if (mac_ != &_default_mac_) {
    delete mac_;
  }
  if (matrixcode_ != &_default_matrixcode_) {
    delete matrixcode_;
  }
  if (matrixcoord_ != &_default_matrixcoord_) {
    delete matrixcoord_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyRequest_descriptor_;
}

const CMessageCertifyRequest& CMessageCertifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyRequest* CMessageCertifyRequest::default_instance_ = NULL;

CMessageCertifyRequest* CMessageCertifyRequest::New() const {
  return new CMessageCertifyRequest;
}

void CMessageCertifyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (passport_ != &_default_passport_) {
        passport_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(2)) {
      if (md5code_ != &_default_md5code_) {
        md5code_->clear();
      }
    }
    if (_has_bit(3)) {
      if (mac_ != &_default_mac_) {
        mac_->clear();
      }
    }
    sourceid_ = 0;
    version_ = 0u;
    taskversion_ = 0u;
    templateversion_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matrixtype_ = 0u;
    if (_has_bit(9)) {
      if (matrixcode_ != &_default_matrixcode_) {
        matrixcode_->clear();
      }
    }
    if (_has_bit(10)) {
      if (matrixcoord_ != &_default_matrixcoord_) {
        matrixcoord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string passport = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_passport()));
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectTag(26)) goto parse_md5Code;
        break;
      }
      
      // optional string md5Code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_md5Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_md5code()));
        if (input->ExpectTag(34)) goto parse_mac;
        break;
      }
      
      // optional string mac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mac()));
        if (input->ExpectTag(40)) goto parse_sourceId;
        break;
      }
      
      // optional int32 sourceId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sourceId:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sourceid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &version_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_taskVersion;
        break;
      }
      
      // optional uint32 taskVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_templateVersion;
        break;
      }
      
      // optional uint32 templateVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_templateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_matrixType;
        break;
      }
      
      // optional uint32 matrixType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_matrixType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &matrixtype_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_matrixCode;
        break;
      }
      
      // optional string matrixCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcode()));
        if (input->ExpectTag(90)) goto parse_matrixCoord;
        break;
      }
      
      // optional string matrixCoord = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCoord:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcoord()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string passport = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->passport(), output);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->password(), output);
  }
  
  // optional string md5Code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->md5code(), output);
  }
  
  // optional string mac = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->mac(), output);
  }
  
  // optional int32 sourceId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->sourceid(), output);
  }
  
  // optional uint32 version = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->version(), output);
  }
  
  // optional uint32 taskVersion = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->taskversion(), output);
  }
  
  // optional uint32 templateVersion = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->templateversion(), output);
  }
  
  // optional uint32 matrixType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->matrixtype(), output);
  }
  
  // optional string matrixCode = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->matrixcode(), output);
  }
  
  // optional string matrixCoord = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->matrixcoord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string passport = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->passport(), target);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->password(), target);
  }
  
  // optional string md5Code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->md5code(), target);
  }
  
  // optional string mac = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->mac(), target);
  }
  
  // optional int32 sourceId = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->sourceid(), target);
  }
  
  // optional uint32 version = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->version(), target);
  }
  
  // optional uint32 taskVersion = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->taskversion(), target);
  }
  
  // optional uint32 templateVersion = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->templateversion(), target);
  }
  
  // optional uint32 matrixType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->matrixtype(), target);
  }
  
  // optional string matrixCode = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->matrixcode(), target);
  }
  
  // optional string matrixCoord = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->matrixcoord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string passport = 1;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->passport());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
    // optional string md5Code = 3;
    if (has_md5code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->md5code());
    }
    
    // optional string mac = 4;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mac());
    }
    
    // optional int32 sourceId = 5;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sourceid());
    }
    
    // optional uint32 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->version());
    }
    
    // optional uint32 taskVersion = 7;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
    // optional uint32 templateVersion = 8;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 matrixType = 9;
    if (has_matrixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->matrixtype());
    }
    
    // optional string matrixCode = 10;
    if (has_matrixcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcode());
    }
    
    // optional string matrixCoord = 11;
    if (has_matrixcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcoord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyRequest::MergeFrom(const CMessageCertifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_passport(from.passport());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
    if (from._has_bit(2)) {
      set_md5code(from.md5code());
    }
    if (from._has_bit(3)) {
      set_mac(from.mac());
    }
    if (from._has_bit(4)) {
      set_sourceid(from.sourceid());
    }
    if (from._has_bit(5)) {
      set_version(from.version());
    }
    if (from._has_bit(6)) {
      set_taskversion(from.taskversion());
    }
    if (from._has_bit(7)) {
      set_templateversion(from.templateversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_matrixtype(from.matrixtype());
    }
    if (from._has_bit(9)) {
      set_matrixcode(from.matrixcode());
    }
    if (from._has_bit(10)) {
      set_matrixcoord(from.matrixcoord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyRequest::CopyFrom(const CMessageCertifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyRequest::Swap(CMessageCertifyRequest* other) {
  if (other != this) {
    std::swap(passport_, other->passport_);
    std::swap(password_, other->password_);
    std::swap(md5code_, other->md5code_);
    std::swap(mac_, other->mac_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(version_, other->version_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(templateversion_, other->templateversion_);
    std::swap(matrixtype_, other->matrixtype_);
    std::swap(matrixcode_, other->matrixcode_);
    std::swap(matrixcoord_, other->matrixcoord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageCertifyResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyResponse_EStatus_descriptor_;
}
bool CMessageCertifyResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageCertifyResponse_EStatus CMessageCertifyResponse::STATUS_SUCCESS;
const CMessageCertifyResponse_EStatus CMessageCertifyResponse::STATUS_INVALID;
const CMessageCertifyResponse_EStatus CMessageCertifyResponse::STATUS_FAILURE;
const CMessageCertifyResponse_EStatus CMessageCertifyResponse::EStatus_MIN;
const CMessageCertifyResponse_EStatus CMessageCertifyResponse::EStatus_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageCertifyResponse::kStatusFieldNumber;
const int CMessageCertifyResponse::kPlayerIdFieldNumber;
const int CMessageCertifyResponse::kAccountIdFieldNumber;
const int CMessageCertifyResponse::kTokenFieldNumber;
const int CMessageCertifyResponse::kServersFieldNumber;
const int CMessageCertifyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyResponse::CMessageCertifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyResponse::InitAsDefaultInstance() {}

CMessageCertifyResponse::CMessageCertifyResponse(const CMessageCertifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  token_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyResponse::~CMessageCertifyResponse() {
  SharedDtor();
}

void CMessageCertifyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyResponse_descriptor_;
}

const CMessageCertifyResponse& CMessageCertifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyResponse* CMessageCertifyResponse::default_instance_ = NULL;

CMessageCertifyResponse* CMessageCertifyResponse::New() const {
  return new CMessageCertifyResponse;
}

void CMessageCertifyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    playerid_ = 0u;
    accountid_ = 0u;
    token_ = 0u;
    errorcode_ = 0u;
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageCertifyResponse.EStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageCertifyResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageCertifyResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }
      
      // optional uint32 token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_token:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &token_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_servers;
        break;
      }
      
      // repeated .CMessageLoginServerInfo servers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_servers:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_servers()));
        if (input->ExpectTag(42)) goto parse_servers;
        if (input->ExpectTag(48)) goto parse_errorCode;
        break;
      }
      
      // optional uint32 errorCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_errorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageCertifyResponse.EStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 token = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->token(), output);
  }
  
  // repeated .CMessageLoginServerInfo servers = 5;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->servers(i), output);
  }
  
  // optional uint32 errorCode = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageCertifyResponse.EStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 token = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->token(), target);
  }
  
  // repeated .CMessageLoginServerInfo servers = 5;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->servers(i), target);
  }
  
  // optional uint32 errorCode = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageCertifyResponse.EStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->token());
    }
    
    // optional uint32 errorCode = 6;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  // repeated .CMessageLoginServerInfo servers = 5;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyResponse::MergeFrom(const CMessageCertifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_token(from.token());
    }
    if (from._has_bit(5)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyResponse::CopyFrom(const CMessageCertifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyResponse::Swap(CMessageCertifyResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    servers_.Swap(&other->servers_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageCertifyQueryRequest::_default_passport_;
const ::std::string CMessageCertifyQueryRequest::_default_password_;
const ::std::string CMessageCertifyQueryRequest::_default_md5code_;
const ::std::string CMessageCertifyQueryRequest::_default_playermac_;
const ::std::string CMessageCertifyQueryRequest::_default_matrixcode_;
const ::std::string CMessageCertifyQueryRequest::_default_matrixcoord_;
#ifndef _MSC_VER
const int CMessageCertifyQueryRequest::kPlayerIdFieldNumber;
const int CMessageCertifyQueryRequest::kAccountIdFieldNumber;
const int CMessageCertifyQueryRequest::kPassportFieldNumber;
const int CMessageCertifyQueryRequest::kPasswordFieldNumber;
const int CMessageCertifyQueryRequest::kMd5CodeFieldNumber;
const int CMessageCertifyQueryRequest::kPlayerHostFieldNumber;
const int CMessageCertifyQueryRequest::kPlayerPortFieldNumber;
const int CMessageCertifyQueryRequest::kPlayerMacFieldNumber;
const int CMessageCertifyQueryRequest::kSourceIdFieldNumber;
const int CMessageCertifyQueryRequest::kVersionFieldNumber;
const int CMessageCertifyQueryRequest::kTaskVersionFieldNumber;
const int CMessageCertifyQueryRequest::kTemplateVersionFieldNumber;
const int CMessageCertifyQueryRequest::kMatrixTypeFieldNumber;
const int CMessageCertifyQueryRequest::kMatrixCodeFieldNumber;
const int CMessageCertifyQueryRequest::kMatrixCoordFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyQueryRequest::CMessageCertifyQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyQueryRequest::InitAsDefaultInstance() {}

CMessageCertifyQueryRequest::CMessageCertifyQueryRequest(const CMessageCertifyQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  passport_ = const_cast< ::std::string*>(&_default_passport_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  md5code_ = const_cast< ::std::string*>(&_default_md5code_);
  playerhost_ = 0u;
  playerport_ = 0u;
  playermac_ = const_cast< ::std::string*>(&_default_playermac_);
  sourceid_ = 0;
  version_ = 0u;
  taskversion_ = 0u;
  templateversion_ = 0u;
  matrixtype_ = 0u;
  matrixcode_ = const_cast< ::std::string*>(&_default_matrixcode_);
  matrixcoord_ = const_cast< ::std::string*>(&_default_matrixcoord_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyQueryRequest::~CMessageCertifyQueryRequest() {
  SharedDtor();
}

void CMessageCertifyQueryRequest::SharedDtor() {
  if (passport_ != &_default_passport_) {
    delete passport_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (md5code_ != &_default_md5code_) {
    delete md5code_;
  }
  if (playermac_ != &_default_playermac_) {
    delete playermac_;
  }
  if (matrixcode_ != &_default_matrixcode_) {
    delete matrixcode_;
  }
  if (matrixcoord_ != &_default_matrixcoord_) {
    delete matrixcoord_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyQueryRequest_descriptor_;
}

const CMessageCertifyQueryRequest& CMessageCertifyQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyQueryRequest* CMessageCertifyQueryRequest::default_instance_ = NULL;

CMessageCertifyQueryRequest* CMessageCertifyQueryRequest::New() const {
  return new CMessageCertifyQueryRequest;
}

void CMessageCertifyQueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accountid_ = 0u;
    if (_has_bit(2)) {
      if (passport_ != &_default_passport_) {
        passport_->clear();
      }
    }
    if (_has_bit(3)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(4)) {
      if (md5code_ != &_default_md5code_) {
        md5code_->clear();
      }
    }
    playerhost_ = 0u;
    playerport_ = 0u;
    if (_has_bit(7)) {
      if (playermac_ != &_default_playermac_) {
        playermac_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sourceid_ = 0;
    version_ = 0u;
    taskversion_ = 0u;
    templateversion_ = 0u;
    matrixtype_ = 0u;
    if (_has_bit(13)) {
      if (matrixcode_ != &_default_matrixcode_) {
        matrixcode_->clear();
      }
    }
    if (_has_bit(14)) {
      if (matrixcoord_ != &_default_matrixcoord_) {
        matrixcoord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_passport;
        break;
      }
      
      // optional string passport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_passport:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_passport()));
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectTag(42)) goto parse_md5Code;
        break;
      }
      
      // optional string md5Code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_md5Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_md5code()));
        if (input->ExpectTag(48)) goto parse_playerHost;
        break;
      }
      
      // optional uint32 playerHost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerHost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerhost_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_playerPort;
        break;
      }
      
      // optional uint32 playerPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerPort:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerport_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_playerMac;
        break;
      }
      
      // optional string playerMac = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerMac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playermac()));
        if (input->ExpectTag(72)) goto parse_sourceId;
        break;
      }
      
      // optional int32 sourceId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sourceId:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sourceid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &version_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_taskVersion;
        break;
      }
      
      // optional uint32 taskVersion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_templateVersion;
        break;
      }
      
      // optional uint32 templateVersion = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_templateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_matrixType;
        break;
      }
      
      // optional uint32 matrixType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_matrixType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &matrixtype_));
        _set_bit(12);
        if (input->ExpectTag(114)) goto parse_matrixCode;
        break;
      }
      
      // optional string matrixCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcode()));
        if (input->ExpectTag(122)) goto parse_matrixCoord;
        break;
      }
      
      // optional string matrixCoord = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCoord:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcoord()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyQueryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional string passport = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->passport(), output);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->password(), output);
  }
  
  // optional string md5Code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->md5code(), output);
  }
  
  // optional uint32 playerHost = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->playerhost(), output);
  }
  
  // optional uint32 playerPort = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->playerport(), output);
  }
  
  // optional string playerMac = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->playermac(), output);
  }
  
  // optional int32 sourceId = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(9, this->sourceid(), output);
  }
  
  // optional uint32 version = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->version(), output);
  }
  
  // optional uint32 taskVersion = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->taskversion(), output);
  }
  
  // optional uint32 templateVersion = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->templateversion(), output);
  }
  
  // optional uint32 matrixType = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->matrixtype(), output);
  }
  
  // optional string matrixCode = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteString(14, this->matrixcode(), output);
  }
  
  // optional string matrixCoord = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteString(15, this->matrixcoord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional string passport = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->passport(), target);
  }
  
  // optional string password = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->password(), target);
  }
  
  // optional string md5Code = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->md5code(), target);
  }
  
  // optional uint32 playerHost = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->playerhost(), target);
  }
  
  // optional uint32 playerPort = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->playerport(), target);
  }
  
  // optional string playerMac = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->playermac(), target);
  }
  
  // optional int32 sourceId = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(9, this->sourceid(), target);
  }
  
  // optional uint32 version = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->version(), target);
  }
  
  // optional uint32 taskVersion = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->taskversion(), target);
  }
  
  // optional uint32 templateVersion = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->templateversion(), target);
  }
  
  // optional uint32 matrixType = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->matrixtype(), target);
  }
  
  // optional string matrixCode = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(14, this->matrixcode(), target);
  }
  
  // optional string matrixCoord = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(15, this->matrixcoord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyQueryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional string passport = 3;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->passport());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
    // optional string md5Code = 5;
    if (has_md5code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->md5code());
    }
    
    // optional uint32 playerHost = 6;
    if (has_playerhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerhost());
    }
    
    // optional uint32 playerPort = 7;
    if (has_playerport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerport());
    }
    
    // optional string playerMac = 8;
    if (has_playermac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playermac());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sourceId = 9;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sourceid());
    }
    
    // optional uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->version());
    }
    
    // optional uint32 taskVersion = 11;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
    // optional uint32 templateVersion = 12;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
    // optional uint32 matrixType = 13;
    if (has_matrixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->matrixtype());
    }
    
    // optional string matrixCode = 14;
    if (has_matrixcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcode());
    }
    
    // optional string matrixCoord = 15;
    if (has_matrixcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcoord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyQueryRequest::MergeFrom(const CMessageCertifyQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_passport(from.passport());
    }
    if (from._has_bit(3)) {
      set_password(from.password());
    }
    if (from._has_bit(4)) {
      set_md5code(from.md5code());
    }
    if (from._has_bit(5)) {
      set_playerhost(from.playerhost());
    }
    if (from._has_bit(6)) {
      set_playerport(from.playerport());
    }
    if (from._has_bit(7)) {
      set_playermac(from.playermac());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sourceid(from.sourceid());
    }
    if (from._has_bit(9)) {
      set_version(from.version());
    }
    if (from._has_bit(10)) {
      set_taskversion(from.taskversion());
    }
    if (from._has_bit(11)) {
      set_templateversion(from.templateversion());
    }
    if (from._has_bit(12)) {
      set_matrixtype(from.matrixtype());
    }
    if (from._has_bit(13)) {
      set_matrixcode(from.matrixcode());
    }
    if (from._has_bit(14)) {
      set_matrixcoord(from.matrixcoord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyQueryRequest::CopyFrom(const CMessageCertifyQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyQueryRequest::Swap(CMessageCertifyQueryRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(passport_, other->passport_);
    std::swap(password_, other->password_);
    std::swap(md5code_, other->md5code_);
    std::swap(playerhost_, other->playerhost_);
    std::swap(playerport_, other->playerport_);
    std::swap(playermac_, other->playermac_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(version_, other->version_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(templateversion_, other->templateversion_);
    std::swap(matrixtype_, other->matrixtype_);
    std::swap(matrixcode_, other->matrixcode_);
    std::swap(matrixcoord_, other->matrixcoord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyQueryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyQueryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyQueryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyQueryRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageCertifyQueryResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyQueryResponse_EStatus_descriptor_;
}
bool CMessageCertifyQueryResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageCertifyQueryResponse_EStatus CMessageCertifyQueryResponse::STATUS_SUCCESS;
const CMessageCertifyQueryResponse_EStatus CMessageCertifyQueryResponse::STATUS_FAILURE;
const CMessageCertifyQueryResponse_EStatus CMessageCertifyQueryResponse::EStatus_MIN;
const CMessageCertifyQueryResponse_EStatus CMessageCertifyQueryResponse::EStatus_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageCertifyQueryResponse::kStatusFieldNumber;
const int CMessageCertifyQueryResponse::kPlayerIdFieldNumber;
const int CMessageCertifyQueryResponse::kAccountIdFieldNumber;
const int CMessageCertifyQueryResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyQueryResponse::CMessageCertifyQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyQueryResponse::InitAsDefaultInstance() {}

CMessageCertifyQueryResponse::CMessageCertifyQueryResponse(const CMessageCertifyQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyQueryResponse::~CMessageCertifyQueryResponse() {
  SharedDtor();
}

void CMessageCertifyQueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyQueryResponse_descriptor_;
}

const CMessageCertifyQueryResponse& CMessageCertifyQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyQueryResponse* CMessageCertifyQueryResponse::default_instance_ = NULL;

CMessageCertifyQueryResponse* CMessageCertifyQueryResponse::New() const {
  return new CMessageCertifyQueryResponse;
}

void CMessageCertifyQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    playerid_ = 0u;
    accountid_ = 0u;
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageCertifyQueryResponse.EStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageCertifyQueryResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageCertifyQueryResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }
      
      // optional uint32 errorCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_errorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyQueryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageCertifyQueryResponse.EStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 errorCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageCertifyQueryResponse.EStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 errorCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyQueryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageCertifyQueryResponse.EStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 errorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyQueryResponse::MergeFrom(const CMessageCertifyQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyQueryResponse::CopyFrom(const CMessageCertifyQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyQueryResponse::Swap(CMessageCertifyQueryResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyQueryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyQueryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyQueryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyQueryResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCertifyTokenRequest::kPlayerIdFieldNumber;
const int CMessageCertifyTokenRequest::kAccountIdFieldNumber;
const int CMessageCertifyTokenRequest::kTokenFieldNumber;
const int CMessageCertifyTokenRequest::kHandleFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyTokenRequest::CMessageCertifyTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyTokenRequest::InitAsDefaultInstance() {}

CMessageCertifyTokenRequest::CMessageCertifyTokenRequest(const CMessageCertifyTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  token_ = 0u;
  handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyTokenRequest::~CMessageCertifyTokenRequest() {
  SharedDtor();
}

void CMessageCertifyTokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyTokenRequest_descriptor_;
}

const CMessageCertifyTokenRequest& CMessageCertifyTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyTokenRequest* CMessageCertifyTokenRequest::default_instance_ = NULL;

CMessageCertifyTokenRequest* CMessageCertifyTokenRequest::New() const {
  return new CMessageCertifyTokenRequest;
}

void CMessageCertifyTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accountid_ = 0u;
    token_ = 0u;
    handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }
      
      // optional uint32 token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_token:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &token_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_handle;
        break;
      }
      
      // optional uint32 handle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_handle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handle_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyTokenRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->token(), output);
  }
  
  // optional uint32 handle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 token = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->token(), target);
  }
  
  // optional uint32 handle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyTokenRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->token());
    }
    
    // optional uint32 handle = 4;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyTokenRequest::MergeFrom(const CMessageCertifyTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_token(from.token());
    }
    if (from._has_bit(3)) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyTokenRequest::CopyFrom(const CMessageCertifyTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyTokenRequest::Swap(CMessageCertifyTokenRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyTokenRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyTokenRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyTokenRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyTokenRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageCertifyTokenResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyTokenResponse_EStatus_descriptor_;
}
bool CMessageCertifyTokenResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageCertifyTokenResponse_EStatus CMessageCertifyTokenResponse::STATUS_SUCCESS;
const CMessageCertifyTokenResponse_EStatus CMessageCertifyTokenResponse::STATUS_FAILURE;
const CMessageCertifyTokenResponse_EStatus CMessageCertifyTokenResponse::EStatus_MIN;
const CMessageCertifyTokenResponse_EStatus CMessageCertifyTokenResponse::EStatus_MAX;
#endif  // _MSC_VER
const ::std::string CMessageCertifyTokenResponse::_default_passport_;
const ::std::string CMessageCertifyTokenResponse::_default_password_;
const ::std::string CMessageCertifyTokenResponse::_default_playermac_;
const ::std::string CMessageCertifyTokenResponse::_default_md5code_;
const ::std::string CMessageCertifyTokenResponse::_default_matrixcode_;
const ::std::string CMessageCertifyTokenResponse::_default_matrixcoord_;
#ifndef _MSC_VER
const int CMessageCertifyTokenResponse::kStatusFieldNumber;
const int CMessageCertifyTokenResponse::kPlayerIdFieldNumber;
const int CMessageCertifyTokenResponse::kAccountIdFieldNumber;
const int CMessageCertifyTokenResponse::kHandleFieldNumber;
const int CMessageCertifyTokenResponse::kPassportFieldNumber;
const int CMessageCertifyTokenResponse::kPasswordFieldNumber;
const int CMessageCertifyTokenResponse::kPlayerHostFieldNumber;
const int CMessageCertifyTokenResponse::kPlayerPortFieldNumber;
const int CMessageCertifyTokenResponse::kPlayerMacFieldNumber;
const int CMessageCertifyTokenResponse::kMd5CodeFieldNumber;
const int CMessageCertifyTokenResponse::kSourceIdFieldNumber;
const int CMessageCertifyTokenResponse::kVersionFieldNumber;
const int CMessageCertifyTokenResponse::kTaskVersionFieldNumber;
const int CMessageCertifyTokenResponse::kTemplateVersionFieldNumber;
const int CMessageCertifyTokenResponse::kMatrixTypeFieldNumber;
const int CMessageCertifyTokenResponse::kMatrixCodeFieldNumber;
const int CMessageCertifyTokenResponse::kMatrixCoordFieldNumber;
#endif  // !_MSC_VER

CMessageCertifyTokenResponse::CMessageCertifyTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCertifyTokenResponse::InitAsDefaultInstance() {}

CMessageCertifyTokenResponse::CMessageCertifyTokenResponse(const CMessageCertifyTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCertifyTokenResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  handle_ = 0u;
  passport_ = const_cast< ::std::string*>(&_default_passport_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  playerhost_ = 0u;
  playerport_ = 0u;
  playermac_ = const_cast< ::std::string*>(&_default_playermac_);
  md5code_ = const_cast< ::std::string*>(&_default_md5code_);
  sourceid_ = 0;
  version_ = 0u;
  taskversion_ = 0u;
  templateversion_ = 0u;
  matrixtype_ = 0u;
  matrixcode_ = const_cast< ::std::string*>(&_default_matrixcode_);
  matrixcoord_ = const_cast< ::std::string*>(&_default_matrixcoord_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCertifyTokenResponse::~CMessageCertifyTokenResponse() {
  SharedDtor();
}

void CMessageCertifyTokenResponse::SharedDtor() {
  if (passport_ != &_default_passport_) {
    delete passport_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (playermac_ != &_default_playermac_) {
    delete playermac_;
  }
  if (md5code_ != &_default_md5code_) {
    delete md5code_;
  }
  if (matrixcode_ != &_default_matrixcode_) {
    delete matrixcode_;
  }
  if (matrixcoord_ != &_default_matrixcoord_) {
    delete matrixcoord_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCertifyTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyTokenResponse_descriptor_;
}

const CMessageCertifyTokenResponse& CMessageCertifyTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCertifyTokenResponse* CMessageCertifyTokenResponse::default_instance_ = NULL;

CMessageCertifyTokenResponse* CMessageCertifyTokenResponse::New() const {
  return new CMessageCertifyTokenResponse;
}

void CMessageCertifyTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    playerid_ = 0u;
    accountid_ = 0u;
    handle_ = 0u;
    if (_has_bit(4)) {
      if (passport_ != &_default_passport_) {
        passport_->clear();
      }
    }
    if (_has_bit(5)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    playerhost_ = 0u;
    playerport_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (playermac_ != &_default_playermac_) {
        playermac_->clear();
      }
    }
    if (_has_bit(9)) {
      if (md5code_ != &_default_md5code_) {
        md5code_->clear();
      }
    }
    sourceid_ = 0;
    version_ = 0u;
    taskversion_ = 0u;
    templateversion_ = 0u;
    matrixtype_ = 0u;
    if (_has_bit(15)) {
      if (matrixcode_ != &_default_matrixcode_) {
        matrixcode_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (matrixcoord_ != &_default_matrixcoord_) {
        matrixcoord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCertifyTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageCertifyTokenResponse.EStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageCertifyTokenResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageCertifyTokenResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_handle;
        break;
      }
      
      // optional uint32 handle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_handle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &handle_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_passport;
        break;
      }
      
      // optional string passport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_passport:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_passport()));
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }
      
      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_password()));
        if (input->ExpectTag(56)) goto parse_playerHost;
        break;
      }
      
      // optional uint32 playerHost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerHost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerhost_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_playerPort;
        break;
      }
      
      // optional uint32 playerPort = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerPort:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerport_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_playerMac;
        break;
      }
      
      // optional string playerMac = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerMac:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playermac()));
        if (input->ExpectTag(82)) goto parse_md5Code;
        break;
      }
      
      // optional string md5Code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_md5Code:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_md5code()));
        if (input->ExpectTag(88)) goto parse_sourceId;
        break;
      }
      
      // optional int32 sourceId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_sourceId:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &sourceid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &version_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_taskVersion;
        break;
      }
      
      // optional uint32 taskVersion = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_taskVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskversion_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_templateVersion;
        break;
      }
      
      // optional uint32 templateVersion = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_templateVersion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &templateversion_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_matrixType;
        break;
      }
      
      // optional uint32 matrixType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_matrixType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &matrixtype_));
        _set_bit(14);
        if (input->ExpectTag(130)) goto parse_matrixCode;
        break;
      }
      
      // optional string matrixCode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCode:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcode()));
        if (input->ExpectTag(138)) goto parse_matrixCoord;
        break;
      }
      
      // optional string matrixCoord = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_matrixCoord:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_matrixcoord()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCertifyTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCertifyTokenResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageCertifyTokenResponse.EStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 handle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->handle(), output);
  }
  
  // optional string passport = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->passport(), output);
  }
  
  // optional string password = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->password(), output);
  }
  
  // optional uint32 playerHost = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->playerhost(), output);
  }
  
  // optional uint32 playerPort = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->playerport(), output);
  }
  
  // optional string playerMac = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteString(9, this->playermac(), output);
  }
  
  // optional string md5Code = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteString(10, this->md5code(), output);
  }
  
  // optional int32 sourceId = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(11, this->sourceid(), output);
  }
  
  // optional uint32 version = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->version(), output);
  }
  
  // optional uint32 taskVersion = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->taskversion(), output);
  }
  
  // optional uint32 templateVersion = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->templateversion(), output);
  }
  
  // optional uint32 matrixType = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->matrixtype(), output);
  }
  
  // optional string matrixCode = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteString(16, this->matrixcode(), output);
  }
  
  // optional string matrixCoord = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteString(17, this->matrixcoord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCertifyTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageCertifyTokenResponse.EStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 handle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->handle(), target);
  }
  
  // optional string passport = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->passport(), target);
  }
  
  // optional string password = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->password(), target);
  }
  
  // optional uint32 playerHost = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->playerhost(), target);
  }
  
  // optional uint32 playerPort = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->playerport(), target);
  }
  
  // optional string playerMac = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(9, this->playermac(), target);
  }
  
  // optional string md5Code = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(10, this->md5code(), target);
  }
  
  // optional int32 sourceId = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(11, this->sourceid(), target);
  }
  
  // optional uint32 version = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->version(), target);
  }
  
  // optional uint32 taskVersion = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->taskversion(), target);
  }
  
  // optional uint32 templateVersion = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->templateversion(), target);
  }
  
  // optional uint32 matrixType = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->matrixtype(), target);
  }
  
  // optional string matrixCode = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(16, this->matrixcode(), target);
  }
  
  // optional string matrixCoord = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(17, this->matrixcoord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCertifyTokenResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageCertifyTokenResponse.EStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 handle = 4;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->handle());
    }
    
    // optional string passport = 5;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->passport());
    }
    
    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->password());
    }
    
    // optional uint32 playerHost = 7;
    if (has_playerhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerhost());
    }
    
    // optional uint32 playerPort = 8;
    if (has_playerport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerport());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string playerMac = 9;
    if (has_playermac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playermac());
    }
    
    // optional string md5Code = 10;
    if (has_md5code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->md5code());
    }
    
    // optional int32 sourceId = 11;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->sourceid());
    }
    
    // optional uint32 version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->version());
    }
    
    // optional uint32 taskVersion = 13;
    if (has_taskversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskversion());
    }
    
    // optional uint32 templateVersion = 14;
    if (has_templateversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->templateversion());
    }
    
    // optional uint32 matrixType = 15;
    if (has_matrixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->matrixtype());
    }
    
    // optional string matrixCode = 16;
    if (has_matrixcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcode());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string matrixCoord = 17;
    if (has_matrixcoord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->matrixcoord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCertifyTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCertifyTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCertifyTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCertifyTokenResponse::MergeFrom(const CMessageCertifyTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_handle(from.handle());
    }
    if (from._has_bit(4)) {
      set_passport(from.passport());
    }
    if (from._has_bit(5)) {
      set_password(from.password());
    }
    if (from._has_bit(6)) {
      set_playerhost(from.playerhost());
    }
    if (from._has_bit(7)) {
      set_playerport(from.playerport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_playermac(from.playermac());
    }
    if (from._has_bit(9)) {
      set_md5code(from.md5code());
    }
    if (from._has_bit(10)) {
      set_sourceid(from.sourceid());
    }
    if (from._has_bit(11)) {
      set_version(from.version());
    }
    if (from._has_bit(12)) {
      set_taskversion(from.taskversion());
    }
    if (from._has_bit(13)) {
      set_templateversion(from.templateversion());
    }
    if (from._has_bit(14)) {
      set_matrixtype(from.matrixtype());
    }
    if (from._has_bit(15)) {
      set_matrixcode(from.matrixcode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_matrixcoord(from.matrixcoord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCertifyTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyTokenResponse::CopyFrom(const CMessageCertifyTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCertifyTokenResponse::Swap(CMessageCertifyTokenResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(handle_, other->handle_);
    std::swap(passport_, other->passport_);
    std::swap(password_, other->password_);
    std::swap(playerhost_, other->playerhost_);
    std::swap(playerport_, other->playerport_);
    std::swap(playermac_, other->playermac_);
    std::swap(md5code_, other->md5code_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(version_, other->version_);
    std::swap(taskversion_, other->taskversion_);
    std::swap(templateversion_, other->templateversion_);
    std::swap(matrixtype_, other->matrixtype_);
    std::swap(matrixcode_, other->matrixcode_);
    std::swap(matrixcoord_, other->matrixcoord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCertifyTokenResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCertifyTokenResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCertifyTokenResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCertifyTokenResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleQueryRequest::kPlayerIdFieldNumber;
const int CMessageRoleQueryRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMessageRoleQueryRequest::CMessageRoleQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRoleQueryRequest::InitAsDefaultInstance() {}

CMessageRoleQueryRequest::CMessageRoleQueryRequest(const CMessageRoleQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRoleQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleQueryRequest::~CMessageRoleQueryRequest() {
  SharedDtor();
}

void CMessageRoleQueryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRoleQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryRequest_descriptor_;
}

const CMessageRoleQueryRequest& CMessageRoleQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRoleQueryRequest* CMessageRoleQueryRequest::default_instance_ = NULL;

CMessageRoleQueryRequest* CMessageRoleQueryRequest::New() const {
  return new CMessageRoleQueryRequest;
}

void CMessageRoleQueryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRoleQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRoleQueryRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRoleQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 accountId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRoleQueryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRoleQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleQueryRequest::MergeFrom(const CMessageRoleQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryRequest::CopyFrom(const CMessageRoleQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryRequest::Swap(CMessageRoleQueryRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRoleQueryRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRoleQueryRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRoleQueryRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageRoleQueryResponse_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryResponse_EStatus_descriptor_;
}
bool CMessageRoleQueryResponse_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageRoleQueryResponse_EStatus CMessageRoleQueryResponse::STATUS_SUCCESS;
const CMessageRoleQueryResponse_EStatus CMessageRoleQueryResponse::STATUS_FAILURE;
const CMessageRoleQueryResponse_EStatus CMessageRoleQueryResponse::EStatus_MIN;
const CMessageRoleQueryResponse_EStatus CMessageRoleQueryResponse::EStatus_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageRoleQueryResponse::kStatusFieldNumber;
const int CMessageRoleQueryResponse::kPlayerIdFieldNumber;
const int CMessageRoleQueryResponse::kAccountIdFieldNumber;
const int CMessageRoleQueryResponse::kRoleCountFieldNumber;
#endif  // !_MSC_VER

CMessageRoleQueryResponse::CMessageRoleQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRoleQueryResponse::InitAsDefaultInstance() {}

CMessageRoleQueryResponse::CMessageRoleQueryResponse(const CMessageRoleQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRoleQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  rolecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleQueryResponse::~CMessageRoleQueryResponse() {
  SharedDtor();
}

void CMessageRoleQueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRoleQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryResponse_descriptor_;
}

const CMessageRoleQueryResponse& CMessageRoleQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRoleQueryResponse* CMessageRoleQueryResponse::default_instance_ = NULL;

CMessageRoleQueryResponse* CMessageRoleQueryResponse::New() const {
  return new CMessageRoleQueryResponse;
}

void CMessageRoleQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    playerid_ = 0u;
    accountid_ = 0u;
    rolecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRoleQueryResponse.EStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageRoleQueryResponse_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageRoleQueryResponse_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_roleCount;
        break;
      }
      
      // optional uint32 roleCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolecount_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRoleQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRoleQueryResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRoleQueryResponse.EStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 roleCount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->rolecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRoleQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRoleQueryResponse.EStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 roleCount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->rolecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRoleQueryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRoleQueryResponse.EStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 roleCount = 4;
    if (has_rolecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRoleQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleQueryResponse::MergeFrom(const CMessageRoleQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_rolecount(from.rolecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryResponse::CopyFrom(const CMessageRoleQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryResponse::Swap(CMessageRoleQueryResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(rolecount_, other->rolecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRoleQueryResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRoleQueryResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRoleQueryResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryResponse_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageRoleQueryNotify_EStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryNotify_EStatus_descriptor_;
}
bool CMessageRoleQueryNotify_EStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageRoleQueryNotify_EStatus CMessageRoleQueryNotify::STATUS_SUCCESS;
const CMessageRoleQueryNotify_EStatus CMessageRoleQueryNotify::STATUS_FAILURE;
const CMessageRoleQueryNotify_EStatus CMessageRoleQueryNotify::EStatus_MIN;
const CMessageRoleQueryNotify_EStatus CMessageRoleQueryNotify::EStatus_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageRoleQueryNotify::kStatusFieldNumber;
const int CMessageRoleQueryNotify::kPlayerIdFieldNumber;
const int CMessageRoleQueryNotify::kAccountIdFieldNumber;
const int CMessageRoleQueryNotify::kLoginIdFieldNumber;
const int CMessageRoleQueryNotify::kRoleCountFieldNumber;
#endif  // !_MSC_VER

CMessageRoleQueryNotify::CMessageRoleQueryNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRoleQueryNotify::InitAsDefaultInstance() {}

CMessageRoleQueryNotify::CMessageRoleQueryNotify(const CMessageRoleQueryNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRoleQueryNotify::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  loginid_ = 0u;
  rolecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleQueryNotify::~CMessageRoleQueryNotify() {
  SharedDtor();
}

void CMessageRoleQueryNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRoleQueryNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryNotify_descriptor_;
}

const CMessageRoleQueryNotify& CMessageRoleQueryNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRoleQueryNotify* CMessageRoleQueryNotify::default_instance_ = NULL;

CMessageRoleQueryNotify* CMessageRoleQueryNotify::New() const {
  return new CMessageRoleQueryNotify;
}

void CMessageRoleQueryNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    playerid_ = 0u;
    accountid_ = 0u;
    loginid_ = 0u;
    rolecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleQueryNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRoleQueryNotify.EStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::CMessageRoleQueryNotify_EStatus_IsValid(value)) {
          set_status(static_cast< ::CMessageRoleQueryNotify_EStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_accountId;
        break;
      }
      
      // optional uint32 accountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_accountId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_loginId;
        break;
      }
      
      // optional uint32 loginId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_loginId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &loginid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_roleCount;
        break;
      }
      
      // optional uint32 roleCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roleCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolecount_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRoleQueryNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRoleQueryNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRoleQueryNotify.EStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 loginId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->loginid(), output);
  }
  
  // optional uint32 roleCount = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rolecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRoleQueryNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRoleQueryNotify.EStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  // optional uint32 playerId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 accountId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 loginId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->loginid(), target);
  }
  
  // optional uint32 roleCount = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rolecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRoleQueryNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRoleQueryNotify.EStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 accountId = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 loginId = 4;
    if (has_loginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->loginid());
    }
    
    // optional uint32 roleCount = 5;
    if (has_rolecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRoleQueryNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleQueryNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleQueryNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleQueryNotify::MergeFrom(const CMessageRoleQueryNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(3)) {
      set_loginid(from.loginid());
    }
    if (from._has_bit(4)) {
      set_rolecount(from.rolecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleQueryNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryNotify::CopyFrom(const CMessageRoleQueryNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleQueryNotify::Swap(CMessageRoleQueryNotify* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(loginid_, other->loginid_);
    std::swap(rolecount_, other->rolecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRoleQueryNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRoleQueryNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRoleQueryNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleQueryNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageOnlineStatusNotify::kServerIdFieldNumber;
const int CMessageOnlineStatusNotify::kTotalFieldNumber;
const int CMessageOnlineStatusNotify::kCurrentFieldNumber;
#endif  // !_MSC_VER

CMessageOnlineStatusNotify::CMessageOnlineStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageOnlineStatusNotify::InitAsDefaultInstance() {}

CMessageOnlineStatusNotify::CMessageOnlineStatusNotify(const CMessageOnlineStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageOnlineStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  total_ = 0u;
  current_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageOnlineStatusNotify::~CMessageOnlineStatusNotify() {
  SharedDtor();
}

void CMessageOnlineStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageOnlineStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageOnlineStatusNotify_descriptor_;
}

const CMessageOnlineStatusNotify& CMessageOnlineStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageOnlineStatusNotify* CMessageOnlineStatusNotify::default_instance_ = NULL;

CMessageOnlineStatusNotify* CMessageOnlineStatusNotify::New() const {
  return new CMessageOnlineStatusNotify;
}

void CMessageOnlineStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
    total_ = 0u;
    current_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageOnlineStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }
      
      // optional uint32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_total:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &total_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_current;
        break;
      }
      
      // optional uint32 current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_current:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &current_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageOnlineStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageOnlineStatusNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 serverId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->serverid(), output);
  }
  
  // optional uint32 total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->total(), output);
  }
  
  // optional uint32 current = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->current(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageOnlineStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 serverId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->serverid(), target);
  }
  
  // optional uint32 total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->total(), target);
  }
  
  // optional uint32 current = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->current(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageOnlineStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->total());
    }
    
    // optional uint32 current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->current());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageOnlineStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageOnlineStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageOnlineStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageOnlineStatusNotify::MergeFrom(const CMessageOnlineStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(1)) {
      set_total(from.total());
    }
    if (from._has_bit(2)) {
      set_current(from.current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageOnlineStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOnlineStatusNotify::CopyFrom(const CMessageOnlineStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageOnlineStatusNotify::Swap(CMessageOnlineStatusNotify* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(total_, other->total_);
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageOnlineStatusNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageOnlineStatusNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageOnlineStatusNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageOnlineStatusNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteCampRequest::kPlayerIdFieldNumber;
const int CMessageInviteCampRequest::kCurrentCampIdFieldNumber;
const int CMessageInviteCampRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

CMessageInviteCampRequest::CMessageInviteCampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteCampRequest::InitAsDefaultInstance() {}

CMessageInviteCampRequest::CMessageInviteCampRequest(const CMessageInviteCampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteCampRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  currentcampid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteCampRequest::~CMessageInviteCampRequest() {
  SharedDtor();
}

void CMessageInviteCampRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteCampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCampRequest_descriptor_;
}

const CMessageInviteCampRequest& CMessageInviteCampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteCampRequest* CMessageInviteCampRequest::default_instance_ = NULL;

CMessageInviteCampRequest* CMessageInviteCampRequest::New() const {
  return new CMessageInviteCampRequest;
}

void CMessageInviteCampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    currentcampid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteCampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_currentCampId;
        break;
      }
      
      // optional uint32 currentCampId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_currentCampId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currentcampid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_npcId;
        break;
      }
      
      // optional uint32 npcId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteCampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteCampRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 currentCampId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->currentcampid(), output);
  }
  
  // optional uint32 npcId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteCampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 currentCampId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->currentcampid(), target);
  }
  
  // optional uint32 npcId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteCampRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 currentCampId = 2;
    if (has_currentcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currentcampid());
    }
    
    // optional uint32 npcId = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteCampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteCampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteCampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteCampRequest::MergeFrom(const CMessageInviteCampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_currentcampid(from.currentcampid());
    }
    if (from._has_bit(2)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteCampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCampRequest::CopyFrom(const CMessageInviteCampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCampRequest::Swap(CMessageInviteCampRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(currentcampid_, other->currentcampid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteCampRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteCampRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteCampRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCampRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CampLevel::kCampIdFieldNumber;
const int CampLevel::kWeakLevelFieldNumber;
#endif  // !_MSC_VER

CampLevel::CampLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampLevel::InitAsDefaultInstance() {}

CampLevel::CampLevel(const CampLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampLevel::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0u;
  weak_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampLevel::~CampLevel() {
  SharedDtor();
}

void CampLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CampLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampLevel_descriptor_;
}

const CampLevel& CampLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CampLevel* CampLevel::default_instance_ = NULL;

CampLevel* CampLevel::New() const {
  return new CampLevel;
}

void CampLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0u;
    weak_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &camp_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_weak_level;
        break;
      }
      
      // optional uint32 weak_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_weak_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weak_level_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CampLevel::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 camp_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->camp_id(), output);
  }
  
  // optional uint32 weak_level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weak_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 camp_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->camp_id(), target);
  }
  
  // optional uint32 weak_level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weak_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->camp_id());
    }
    
    // optional uint32 weak_level = 2;
    if (has_weak_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weak_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CampLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampLevel::MergeFrom(const CampLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_camp_id(from.camp_id());
    }
    if (from._has_bit(1)) {
      set_weak_level(from.weak_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampLevel::CopyFrom(const CampLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampLevel::Swap(CampLevel* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(weak_level_, other->weak_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CampLevel::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CampLevel::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CampLevel::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CampLevel_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteCampResponse::kCampListFieldNumber;
const int CMessageInviteCampResponse::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

CMessageInviteCampResponse::CMessageInviteCampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteCampResponse::InitAsDefaultInstance() {}

CMessageInviteCampResponse::CMessageInviteCampResponse(const CMessageInviteCampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteCampResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteCampResponse::~CMessageInviteCampResponse() {
  SharedDtor();
}

void CMessageInviteCampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteCampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCampResponse_descriptor_;
}

const CMessageInviteCampResponse& CMessageInviteCampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteCampResponse* CMessageInviteCampResponse::default_instance_ = NULL;

CMessageInviteCampResponse* CMessageInviteCampResponse::New() const {
  return new CMessageInviteCampResponse;
}

void CMessageInviteCampResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    errorcode_ = 0u;
  }
  camp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteCampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CampLevel camp_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_camp_list:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_camp_list()));
        if (input->ExpectTag(10)) goto parse_camp_list;
        if (input->ExpectTag(16)) goto parse_errorcode;
        break;
      }
      
      // optional uint32 errorcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_errorcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteCampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteCampResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CampLevel camp_list = 1;
  for (int i = 0; i < this->camp_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->camp_list(i), output);
  }
  
  // optional uint32 errorcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteCampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CampLevel camp_list = 1;
  for (int i = 0; i < this->camp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->camp_list(i), target);
  }
  
  // optional uint32 errorcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteCampResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 errorcode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  // repeated .CampLevel camp_list = 1;
  total_size += 1 * this->camp_list_size();
  for (int i = 0; i < this->camp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->camp_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteCampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteCampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteCampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteCampResponse::MergeFrom(const CMessageInviteCampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  camp_list_.MergeFrom(from.camp_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteCampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCampResponse::CopyFrom(const CMessageInviteCampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteCampResponse::Swap(CMessageInviteCampResponse* other) {
  if (other != this) {
    camp_list_.Swap(&other->camp_list_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteCampResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteCampResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteCampResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteCampResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeSingleCampRequest::kPlayerIdFieldNumber;
const int CMessageChangeSingleCampRequest::kCrrentCampIdFieldNumber;
const int CMessageChangeSingleCampRequest::kTargetCampIdFieldNumber;
const int CMessageChangeSingleCampRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

CMessageChangeSingleCampRequest::CMessageChangeSingleCampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeSingleCampRequest::InitAsDefaultInstance() {}

CMessageChangeSingleCampRequest::CMessageChangeSingleCampRequest(const CMessageChangeSingleCampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeSingleCampRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  crrentcampid_ = 0u;
  targetcampid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeSingleCampRequest::~CMessageChangeSingleCampRequest() {
  SharedDtor();
}

void CMessageChangeSingleCampRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeSingleCampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSingleCampRequest_descriptor_;
}

const CMessageChangeSingleCampRequest& CMessageChangeSingleCampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeSingleCampRequest* CMessageChangeSingleCampRequest::default_instance_ = NULL;

CMessageChangeSingleCampRequest* CMessageChangeSingleCampRequest::New() const {
  return new CMessageChangeSingleCampRequest;
}

void CMessageChangeSingleCampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    crrentcampid_ = 0u;
    targetcampid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeSingleCampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_crrentCampId;
        break;
      }
      
      // optional uint32 crrentCampId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_crrentCampId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &crrentcampid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_targetCampId;
        break;
      }
      
      // optional uint32 targetCampId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_targetCampId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &targetcampid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_npcId;
        break;
      }
      
      // optional uint32 npcId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeSingleCampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeSingleCampRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 crrentCampId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->crrentcampid(), output);
  }
  
  // optional uint32 targetCampId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->targetcampid(), output);
  }
  
  // optional uint32 npcId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeSingleCampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 crrentCampId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->crrentcampid(), target);
  }
  
  // optional uint32 targetCampId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->targetcampid(), target);
  }
  
  // optional uint32 npcId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeSingleCampRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 crrentCampId = 2;
    if (has_crrentcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->crrentcampid());
    }
    
    // optional uint32 targetCampId = 3;
    if (has_targetcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->targetcampid());
    }
    
    // optional uint32 npcId = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeSingleCampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeSingleCampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeSingleCampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeSingleCampRequest::MergeFrom(const CMessageChangeSingleCampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_crrentcampid(from.crrentcampid());
    }
    if (from._has_bit(2)) {
      set_targetcampid(from.targetcampid());
    }
    if (from._has_bit(3)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeSingleCampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSingleCampRequest::CopyFrom(const CMessageChangeSingleCampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSingleCampRequest::Swap(CMessageChangeSingleCampRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(crrentcampid_, other->crrentcampid_);
    std::swap(targetcampid_, other->targetcampid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeSingleCampRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeSingleCampRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeSingleCampRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSingleCampRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeSingleCampResponse::kCampIdFieldNumber;
const int CMessageChangeSingleCampResponse::kErrorcodeFieldNumber;
const int CMessageChangeSingleCampResponse::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMessageChangeSingleCampResponse::CMessageChangeSingleCampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeSingleCampResponse::InitAsDefaultInstance() {}

CMessageChangeSingleCampResponse::CMessageChangeSingleCampResponse(const CMessageChangeSingleCampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeSingleCampResponse::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  errorcode_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeSingleCampResponse::~CMessageChangeSingleCampResponse() {
  SharedDtor();
}

void CMessageChangeSingleCampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeSingleCampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSingleCampResponse_descriptor_;
}

const CMessageChangeSingleCampResponse& CMessageChangeSingleCampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeSingleCampResponse* CMessageChangeSingleCampResponse::default_instance_ = NULL;

CMessageChangeSingleCampResponse* CMessageChangeSingleCampResponse::New() const {
  return new CMessageChangeSingleCampResponse;
}

void CMessageChangeSingleCampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    campid_ = 0u;
    errorcode_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeSingleCampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 campId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_errorcode;
        break;
      }
      
      // optional uint32 errorcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_errorcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeSingleCampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeSingleCampResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 campId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->campid(), output);
  }
  
  // optional uint32 errorcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->errorcode(), output);
  }
  
  // optional uint32 playerId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeSingleCampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 campId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->campid(), target);
  }
  
  // optional uint32 errorcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->errorcode(), target);
  }
  
  // optional uint32 playerId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeSingleCampResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 campId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 errorcode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
    // optional uint32 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeSingleCampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeSingleCampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeSingleCampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeSingleCampResponse::MergeFrom(const CMessageChangeSingleCampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_campid(from.campid());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
    if (from._has_bit(2)) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeSingleCampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSingleCampResponse::CopyFrom(const CMessageChangeSingleCampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSingleCampResponse::Swap(CMessageChangeSingleCampResponse* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeSingleCampResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeSingleCampResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeSingleCampResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSingleCampResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeCampSuccesNotify::_default_playername_;
#ifndef _MSC_VER
const int CMessageChangeCampSuccesNotify::kPlayerNameFieldNumber;
const int CMessageChangeCampSuccesNotify::kCampIdFieldNumber;
const int CMessageChangeCampSuccesNotify::kSrcCampIdFieldNumber;
const int CMessageChangeCampSuccesNotify::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCampSuccesNotify::CMessageChangeCampSuccesNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCampSuccesNotify::InitAsDefaultInstance() {}

CMessageChangeCampSuccesNotify::CMessageChangeCampSuccesNotify(const CMessageChangeCampSuccesNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCampSuccesNotify::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  campid_ = 0u;
  srccampid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCampSuccesNotify::~CMessageChangeCampSuccesNotify() {
  SharedDtor();
}

void CMessageChangeCampSuccesNotify::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCampSuccesNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampSuccesNotify_descriptor_;
}

const CMessageChangeCampSuccesNotify& CMessageChangeCampSuccesNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCampSuccesNotify* CMessageChangeCampSuccesNotify::default_instance_ = NULL;

CMessageChangeCampSuccesNotify* CMessageChangeCampSuccesNotify::New() const {
  return new CMessageChangeCampSuccesNotify;
}

void CMessageChangeCampSuccesNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    campid_ = 0u;
    srccampid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCampSuccesNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string playerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(16)) goto parse_campId;
        break;
      }
      
      // optional uint32 campId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_srcCampId;
        break;
      }
      
      // optional uint32 srcCampId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srcCampId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccampid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_playerId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCampSuccesNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCampSuccesNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string playerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->playername(), output);
  }
  
  // optional uint32 campId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  // optional uint32 srcCampId = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccampid(), output);
  }
  
  // optional uint32 playerId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCampSuccesNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->playername(), target);
  }
  
  // optional uint32 campId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  // optional uint32 srcCampId = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccampid(), target);
  }
  
  // optional uint32 playerId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCampSuccesNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 campId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
    // optional uint32 srcCampId = 3;
    if (has_srccampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccampid());
    }
    
    // optional uint32 playerId = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCampSuccesNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCampSuccesNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCampSuccesNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCampSuccesNotify::MergeFrom(const CMessageChangeCampSuccesNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playername(from.playername());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
    if (from._has_bit(2)) {
      set_srccampid(from.srccampid());
    }
    if (from._has_bit(3)) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCampSuccesNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampSuccesNotify::CopyFrom(const CMessageChangeCampSuccesNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampSuccesNotify::Swap(CMessageChangeCampSuccesNotify* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(campid_, other->campid_);
    std::swap(srccampid_, other->srccampid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCampSuccesNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCampSuccesNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCampSuccesNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampSuccesNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCamp2GateNotice::kPlayerIdFieldNumber;
const int CMessageChangeCamp2GateNotice::kCampIdFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCamp2GateNotice::CMessageChangeCamp2GateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCamp2GateNotice::InitAsDefaultInstance() {}

CMessageChangeCamp2GateNotice::CMessageChangeCamp2GateNotice(const CMessageChangeCamp2GateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCamp2GateNotice::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCamp2GateNotice::~CMessageChangeCamp2GateNotice() {
  SharedDtor();
}

void CMessageChangeCamp2GateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCamp2GateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCamp2GateNotice_descriptor_;
}

const CMessageChangeCamp2GateNotice& CMessageChangeCamp2GateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCamp2GateNotice* CMessageChangeCamp2GateNotice::default_instance_ = NULL;

CMessageChangeCamp2GateNotice* CMessageChangeCamp2GateNotice::New() const {
  return new CMessageChangeCamp2GateNotice;
}

void CMessageChangeCamp2GateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCamp2GateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_campId;
        break;
      }
      
      // optional uint32 campId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_campId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCamp2GateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCamp2GateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 campId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCamp2GateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 campId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCamp2GateNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 campId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCamp2GateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCamp2GateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCamp2GateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCamp2GateNotice::MergeFrom(const CMessageChangeCamp2GateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCamp2GateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCamp2GateNotice::CopyFrom(const CMessageChangeCamp2GateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCamp2GateNotice::Swap(CMessageChangeCamp2GateNotice* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCamp2GateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCamp2GateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCamp2GateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCamp2GateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCampConditionRequest::kPlayerIdFieldNumber;
const int CMessageChangeCampConditionRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCampConditionRequest::CMessageChangeCampConditionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCampConditionRequest::InitAsDefaultInstance() {}

CMessageChangeCampConditionRequest::CMessageChangeCampConditionRequest(const CMessageChangeCampConditionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCampConditionRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCampConditionRequest::~CMessageChangeCampConditionRequest() {
  SharedDtor();
}

void CMessageChangeCampConditionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCampConditionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampConditionRequest_descriptor_;
}

const CMessageChangeCampConditionRequest& CMessageChangeCampConditionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCampConditionRequest* CMessageChangeCampConditionRequest::default_instance_ = NULL;

CMessageChangeCampConditionRequest* CMessageChangeCampConditionRequest::New() const {
  return new CMessageChangeCampConditionRequest;
}

void CMessageChangeCampConditionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCampConditionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_npcId;
        break;
      }
      
      // optional uint32 npcId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_npcId:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCampConditionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCampConditionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 npcId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCampConditionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 npcId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCampConditionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 npcId = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCampConditionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCampConditionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCampConditionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCampConditionRequest::MergeFrom(const CMessageChangeCampConditionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCampConditionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampConditionRequest::CopyFrom(const CMessageChangeCampConditionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampConditionRequest::Swap(CMessageChangeCampConditionRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCampConditionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCampConditionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCampConditionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampConditionRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeCampConditionResponse::kIsHaveTeamFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHaveFamilyFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHaveCountryFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHaveMasterFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHaveMarriageFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHavePayMailFieldNumber;
const int CMessageChangeCampConditionResponse::kIshaveEnoughLevelFieldNumber;
const int CMessageChangeCampConditionResponse::kErrorcodeFieldNumber;
const int CMessageChangeCampConditionResponse::kIsHaveSwornFieldNumber;
#endif  // !_MSC_VER

CMessageChangeCampConditionResponse::CMessageChangeCampConditionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeCampConditionResponse::InitAsDefaultInstance() {}

CMessageChangeCampConditionResponse::CMessageChangeCampConditionResponse(const CMessageChangeCampConditionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeCampConditionResponse::SharedCtor() {
  _cached_size_ = 0;
  ishaveteam_ = 0u;
  ishavefamily_ = 0u;
  ishavecountry_ = 0u;
  ishavemaster_ = 0u;
  ishavemarriage_ = 0u;
  ishavepaymail_ = 0u;
  ishaveenoughlevel_ = 0u;
  errorcode_ = 0u;
  ishavesworn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeCampConditionResponse::~CMessageChangeCampConditionResponse() {
  SharedDtor();
}

void CMessageChangeCampConditionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeCampConditionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampConditionResponse_descriptor_;
}

const CMessageChangeCampConditionResponse& CMessageChangeCampConditionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_coremessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeCampConditionResponse* CMessageChangeCampConditionResponse::default_instance_ = NULL;

CMessageChangeCampConditionResponse* CMessageChangeCampConditionResponse::New() const {
  return new CMessageChangeCampConditionResponse;
}

void CMessageChangeCampConditionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishaveteam_ = 0u;
    ishavefamily_ = 0u;
    ishavecountry_ = 0u;
    ishavemaster_ = 0u;
    ishavemarriage_ = 0u;
    ishavepaymail_ = 0u;
    ishaveenoughlevel_ = 0u;
    errorcode_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ishavesworn_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeCampConditionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 isHaveTeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishaveteam_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_isHaveFamily;
        break;
      }
      
      // optional uint32 isHaveFamily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHaveFamily:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavefamily_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_isHaveCountry;
        break;
      }
      
      // optional uint32 isHaveCountry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHaveCountry:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavecountry_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_isHaveMaster;
        break;
      }
      
      // optional uint32 isHaveMaster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHaveMaster:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavemaster_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_isHaveMarriage;
        break;
      }
      
      // optional uint32 isHaveMarriage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHaveMarriage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavemarriage_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_isHavePayMail;
        break;
      }
      
      // optional uint32 isHavePayMail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHavePayMail:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavepaymail_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ishaveEnoughLevel;
        break;
      }
      
      // optional uint32 ishaveEnoughLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ishaveEnoughLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishaveenoughlevel_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_errorcode;
        break;
      }
      
      // optional uint32 errorcode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_errorcode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errorcode_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_isHaveSworn;
        break;
      }
      
      // optional uint32 isHaveSworn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_isHaveSworn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ishavesworn_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeCampConditionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeCampConditionResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 isHaveTeam = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->ishaveteam(), output);
  }
  
  // optional uint32 isHaveFamily = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->ishavefamily(), output);
  }
  
  // optional uint32 isHaveCountry = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->ishavecountry(), output);
  }
  
  // optional uint32 isHaveMaster = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->ishavemaster(), output);
  }
  
  // optional uint32 isHaveMarriage = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->ishavemarriage(), output);
  }
  
  // optional uint32 isHavePayMail = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->ishavepaymail(), output);
  }
  
  // optional uint32 ishaveEnoughLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->ishaveenoughlevel(), output);
  }
  
  // optional uint32 errorcode = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->errorcode(), output);
  }
  
  // optional uint32 isHaveSworn = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->ishavesworn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeCampConditionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isHaveTeam = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->ishaveteam(), target);
  }
  
  // optional uint32 isHaveFamily = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->ishavefamily(), target);
  }
  
  // optional uint32 isHaveCountry = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->ishavecountry(), target);
  }
  
  // optional uint32 isHaveMaster = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->ishavemaster(), target);
  }
  
  // optional uint32 isHaveMarriage = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->ishavemarriage(), target);
  }
  
  // optional uint32 isHavePayMail = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->ishavepaymail(), target);
  }
  
  // optional uint32 ishaveEnoughLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->ishaveenoughlevel(), target);
  }
  
  // optional uint32 errorcode = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->errorcode(), target);
  }
  
  // optional uint32 isHaveSworn = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->ishavesworn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeCampConditionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isHaveTeam = 1;
    if (has_ishaveteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishaveteam());
    }
    
    // optional uint32 isHaveFamily = 2;
    if (has_ishavefamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavefamily());
    }
    
    // optional uint32 isHaveCountry = 3;
    if (has_ishavecountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavecountry());
    }
    
    // optional uint32 isHaveMaster = 4;
    if (has_ishavemaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavemaster());
    }
    
    // optional uint32 isHaveMarriage = 5;
    if (has_ishavemarriage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavemarriage());
    }
    
    // optional uint32 isHavePayMail = 6;
    if (has_ishavepaymail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavepaymail());
    }
    
    // optional uint32 ishaveEnoughLevel = 7;
    if (has_ishaveenoughlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishaveenoughlevel());
    }
    
    // optional uint32 errorcode = 8;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errorcode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 isHaveSworn = 9;
    if (has_ishavesworn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ishavesworn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeCampConditionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeCampConditionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeCampConditionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeCampConditionResponse::MergeFrom(const CMessageChangeCampConditionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ishaveteam(from.ishaveteam());
    }
    if (from._has_bit(1)) {
      set_ishavefamily(from.ishavefamily());
    }
    if (from._has_bit(2)) {
      set_ishavecountry(from.ishavecountry());
    }
    if (from._has_bit(3)) {
      set_ishavemaster(from.ishavemaster());
    }
    if (from._has_bit(4)) {
      set_ishavemarriage(from.ishavemarriage());
    }
    if (from._has_bit(5)) {
      set_ishavepaymail(from.ishavepaymail());
    }
    if (from._has_bit(6)) {
      set_ishaveenoughlevel(from.ishaveenoughlevel());
    }
    if (from._has_bit(7)) {
      set_errorcode(from.errorcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_ishavesworn(from.ishavesworn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeCampConditionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampConditionResponse::CopyFrom(const CMessageChangeCampConditionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeCampConditionResponse::Swap(CMessageChangeCampConditionResponse* other) {
  if (other != this) {
    std::swap(ishaveteam_, other->ishaveteam_);
    std::swap(ishavefamily_, other->ishavefamily_);
    std::swap(ishavecountry_, other->ishavecountry_);
    std::swap(ishavemaster_, other->ishavemaster_);
    std::swap(ishavemarriage_, other->ishavemarriage_);
    std::swap(ishavepaymail_, other->ishavepaymail_);
    std::swap(ishaveenoughlevel_, other->ishaveenoughlevel_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(ishavesworn_, other->ishavesworn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeCampConditionResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeCampConditionResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeCampConditionResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeCampConditionResponse_reflection_;
}
