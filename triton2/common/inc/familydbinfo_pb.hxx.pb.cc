// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "familydbinfo_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* ApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FamilyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FamilyMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyOrganInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyOrganInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyOrganList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyOrganList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyPropery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyPropery_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFamilyMemberInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFamilyMemberInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGoodItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGoodItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLeagueShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLeagueShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLeagueShopsListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLeagueShopsListInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_familydbinfo_5fpb_2ehxx() {
  protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "familydbinfo_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  ApplyInfo_descriptor_ = file->message_type(0);
  static const int ApplyInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, facetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playeronline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playermetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, playersex_),
  };
  ApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyInfo_descriptor_,
      ApplyInfo::default_instance_,
      ApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyInfo));
  PBApplyList_descriptor_ = file->message_type(1);
  static const int PBApplyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyList, applydata_),
  };
  PBApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApplyList_descriptor_,
      PBApplyList::default_instance_,
      PBApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApplyList));
  FamilyData_descriptor_ = file->message_type(2);
  static const int FamilyData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, headername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, headerroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familyglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familydevelop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, bidmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, bidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warnpcstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warlostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familystarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warmaxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, enemyfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, warstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, familynpcnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, maxmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, corpsname_),
  };
  FamilyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyData_descriptor_,
      FamilyData::default_instance_,
      FamilyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyData));
  PBFamilyList_descriptor_ = file->message_type(3);
  static const int PBFamilyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyList, familyinfo_),
  };
  PBFamilyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyList_descriptor_,
      PBFamilyList::default_instance_,
      PBFamilyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyList));
  FamilyMemberInfo_descriptor_ = file->message_type(4);
  static const int FamilyMemberInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, playerpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, playercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, rolesex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, familywar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, corpscontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, corpswar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, corpstitle_),
  };
  FamilyMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyMemberInfo_descriptor_,
      FamilyMemberInfo::default_instance_,
      FamilyMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyMemberInfo));
  PBFamilyMemberList_descriptor_ = file->message_type(5);
  static const int PBFamilyMemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberList, members_),
  };
  PBFamilyMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyMemberList_descriptor_,
      PBFamilyMemberList::default_instance_,
      PBFamilyMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyMemberList));
  PBFamilyOrganInfo_descriptor_ = file->message_type(6);
  static const int PBFamilyOrganInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganInfo, rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganInfo, organname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganInfo, id_),
  };
  PBFamilyOrganInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyOrganInfo_descriptor_,
      PBFamilyOrganInfo::default_instance_,
      PBFamilyOrganInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyOrganInfo));
  PBFamilyOrganList_descriptor_ = file->message_type(7);
  static const int PBFamilyOrganList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganList, organes_),
  };
  PBFamilyOrganList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyOrganList_descriptor_,
      PBFamilyOrganList::default_instance_,
      PBFamilyOrganList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyOrganList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyOrganList));
  PBFamilyPropery_descriptor_ = file->message_type(8);
  static const int PBFamilyPropery_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familyheaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familynotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familyheadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, bidmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, bidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warnpcstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warlostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familystarlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warmaxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, enemyfamilyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familyglory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, familydevelop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, warstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, challengestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, challengemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, challengestarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, challengereceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, maxmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, canlevelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, maxpresbyternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, glorylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, levelmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, reducestability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, extraredstonexp_),
  };
  PBFamilyPropery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyPropery_descriptor_,
      PBFamilyPropery::default_instance_,
      PBFamilyPropery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyPropery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyPropery));
  PBFamilyMemberInfo_descriptor_ = file->message_type(9);
  static const int PBFamilyMemberInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, familypost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, familycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, corpscontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, corpspost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, corpstitle_),
  };
  PBFamilyMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyMemberInfo_descriptor_,
      PBFamilyMemberInfo::default_instance_,
      PBFamilyMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyMemberInfo));
  PBFamilyMemberInfoList_descriptor_ = file->message_type(10);
  static const int PBFamilyMemberInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfoList, memberinfo_),
  };
  PBFamilyMemberInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFamilyMemberInfoList_descriptor_,
      PBFamilyMemberInfoList::default_instance_,
      PBFamilyMemberInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFamilyMemberInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFamilyMemberInfoList));
  PBGoodItemInfo_descriptor_ = file->message_type(11);
  static const int PBGoodItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, purcharsetime_),
  };
  PBGoodItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGoodItemInfo_descriptor_,
      PBGoodItemInfo::default_instance_,
      PBGoodItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoodItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGoodItemInfo));
  PBLeagueShopInfo_descriptor_ = file->message_type(12);
  static const int PBLeagueShopInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopInfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopInfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopInfo, iteminfo_),
  };
  PBLeagueShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLeagueShopInfo_descriptor_,
      PBLeagueShopInfo::default_instance_,
      PBLeagueShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLeagueShopInfo));
  PBLeagueShopsListInfo_descriptor_ = file->message_type(13);
  static const int PBLeagueShopsListInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopsListInfo, leagueshopinfo_),
  };
  PBLeagueShopsListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLeagueShopsListInfo_descriptor_,
      PBLeagueShopsListInfo::default_instance_,
      PBLeagueShopsListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopsListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeagueShopsListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLeagueShopsListInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_familydbinfo_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyInfo_descriptor_, &ApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApplyList_descriptor_, &PBApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyData_descriptor_, &FamilyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyList_descriptor_, &PBFamilyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyMemberInfo_descriptor_, &FamilyMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyMemberList_descriptor_, &PBFamilyMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyOrganInfo_descriptor_, &PBFamilyOrganInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyOrganList_descriptor_, &PBFamilyOrganList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyPropery_descriptor_, &PBFamilyPropery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyMemberInfo_descriptor_, &PBFamilyMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFamilyMemberInfoList_descriptor_, &PBFamilyMemberInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGoodItemInfo_descriptor_, &PBGoodItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLeagueShopInfo_descriptor_, &PBLeagueShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLeagueShopsListInfo_descriptor_, &PBLeagueShopsListInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx() {
  delete ApplyInfo::default_instance_;
  delete ApplyInfo_reflection_;
  delete PBApplyList::default_instance_;
  delete PBApplyList_reflection_;
  delete FamilyData::default_instance_;
  delete FamilyData_reflection_;
  delete PBFamilyList::default_instance_;
  delete PBFamilyList_reflection_;
  delete FamilyMemberInfo::default_instance_;
  delete FamilyMemberInfo_reflection_;
  delete PBFamilyMemberList::default_instance_;
  delete PBFamilyMemberList_reflection_;
  delete PBFamilyOrganInfo::default_instance_;
  delete PBFamilyOrganInfo_reflection_;
  delete PBFamilyOrganList::default_instance_;
  delete PBFamilyOrganList_reflection_;
  delete PBFamilyPropery::default_instance_;
  delete PBFamilyPropery_reflection_;
  delete PBFamilyMemberInfo::default_instance_;
  delete PBFamilyMemberInfo_reflection_;
  delete PBFamilyMemberInfoList::default_instance_;
  delete PBFamilyMemberInfoList_reflection_;
  delete PBGoodItemInfo::default_instance_;
  delete PBGoodItemInfo_reflection_;
  delete PBLeagueShopInfo::default_instance_;
  delete PBLeagueShopInfo_reflection_;
  delete PBLeagueShopsListInfo::default_instance_;
  delete PBLeagueShopsListInfo_reflection_;
}

void protobuf_AddDesc_familydbinfo_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023familydbinfo_pb.hxx\"\272\001\n\tApplyInfo\022\022\n\nP"
    "layerName\030\001 \001(\t\022\023\n\013PlayerLevel\030\002 \001(\r\022\020\n\010"
    "FaceType\030\003 \001(\r\022\016\n\006LineID\030\004 \001(\r\022\024\n\014Player"
    "CharID\030\005 \001(\r\022\024\n\014PlayerOnLine\030\006 \001(\r\022\024\n\014Pl"
    "ayerMetier\030\007 \001(\r\022\r\n\005MapID\030\010 \001(\r\022\021\n\tPlaye"
    "rSex\030\t \001(\r\",\n\013PBApplyList\022\035\n\tApplyData\030\001"
    " \003(\0132\n.ApplyInfo\"\327\003\n\nFamilyData\022\022\n\nFamil"
    "yName\030\001 \001(\t\022\020\n\010FamilyID\030\002 \001(\r\022\022\n\nHeaderN"
    "ame\030\003 \001(\t\022\024\n\014HeaderRoleID\030\004 \001(\r\022\021\n\tMembe"
    "rNum\030\005 \001(\r\022\023\n\013FamilyLevel\030\006 \001(\r\022\023\n\013Famil"
    "yGlory\030\007 \001(\r\022\025\n\rFamilyDevelop\030\010 \001(\r\022\r\n\005N"
    "pcID\030\t \001(\r\022\020\n\010BidMoney\030\n \001(\r\022\017\n\007BidTime\030"
    "\013 \001(\r\022\024\n\014WarNpcStatus\030\014 \001(\r\022\017\n\007WarRank\030\r"
    " \001(\r\022\021\n\tWarWinNum\030\016 \001(\r\022\022\n\nWarLostNum\030\017 "
    "\001(\r\022\027\n\017FamilyStarLevel\030\020 \001(\r\022\016\n\006WarExp\030\021"
    " \001(\r\022\021\n\tWarMaxExp\030\022 \001(\r\022\027\n\017EnemyFamilyNa"
    "me\030\023 \001(\t\022\021\n\tWarStatus\030\024 \001(\r\022\024\n\014FamilyNpc"
    "Num\030\025 \001(\r\022\024\n\014MaxMemberNum\030\026 \001(\r\022\021\n\tCorps"
    "Name\030\027 \001(\t\"/\n\014PBFamilyList\022\037\n\nFamilyInfo"
    "\030\001 \003(\0132\013.FamilyData\"\255\002\n\020FamilyMemberInfo"
    "\022\016\n\006FaceID\030\001 \001(\r\022\016\n\006LineID\030\002 \001(\r\022\023\n\013Play"
    "erLevel\030\003 \001(\r\022\022\n\nPlayerPost\030\004 \001(\r\022\024\n\014Pla"
    "yerCharID\030\005 \001(\r\022\017\n\007RoleSex\030\006 \001(\r\022\022\n\nPlay"
    "erName\030\007 \001(\t\022\020\n\010MetierID\030\010 \001(\r\022\016\n\006Online"
    "\030\t \001(\r\022\r\n\005MapID\030\n \001(\r\022\021\n\tFamilyWar\030\013 \001(\r"
    "\022\022\n\nContribute\030\014 \001(\r\022\027\n\017CorpsContribute\030"
    "\r \001(\r\022\020\n\010CorpsWar\030\016 \001(\r\022\022\n\nCorpsTitle\030\017 "
    "\001(\t\"8\n\022PBFamilyMemberList\022\"\n\007Members\030\001 \003"
    "(\0132\021.FamilyMemberInfo\"B\n\021PBFamilyOrganIn"
    "fo\022\016\n\006Rights\030\001 \001(\r\022\021\n\tOrganName\030\002 \001(\t\022\n\n"
    "\002ID\030\003 \001(\r\"8\n\021PBFamilyOrganList\022#\n\007Organe"
    "s\030\001 \003(\0132\022.PBFamilyOrganInfo\"\362\005\n\017PBFamily"
    "Propery\022\026\n\016FamilyHeaderID\030\001 \001(\r\022\023\n\013Famil"
    "yMoney\030\002 \001(\r\022\023\n\013FamilyLevel\030\003 \001(\r\022\024\n\014Fam"
    "ilyNotice\030\004 \001(\t\022\030\n\020FamilyHeaderName\030\005 \001("
    "\t\022\021\n\tMemberNum\030\006 \001(\r\022\020\n\010FamilyID\030\007 \001(\r\022\r"
    "\n\005NpcID\030\010 \001(\r\022\020\n\010BidMoney\030\t \001(\r\022\017\n\007BidTi"
    "me\030\n \001(\r\022\016\n\006WarNpc\030\013 \001(\r\022\024\n\014WarNpcStatus"
    "\030\014 \001(\r\022\017\n\007WarRank\030\r \001(\r\022\021\n\tWarWinNum\030\016 \001"
    "(\r\022\022\n\nWarLostNum\030\017 \001(\r\022\027\n\017FamilyStarLeve"
    "l\030\020 \001(\r\022\016\n\006WarExp\030\021 \001(\r\022\021\n\tWarMaxExp\030\022 \001"
    "(\r\022\027\n\017EnemyFamilyName\030\023 \001(\t\022\016\n\006TaskID\030\024 "
    "\003(\r\022\023\n\013FamilyGlory\030\025 \001(\r\022\025\n\rFamilyDevelo"
    "p\030\026 \001(\r\022\021\n\tWarStatus\030\027 \001(\r\022\027\n\017ChallengeS"
    "tatus\030\030 \001(\r\022\026\n\016ChallengeMoney\030\031 \001(\r\022\030\n\020C"
    "hallengeStarted\030\032 \001(\t\022\031\n\021ChallengeReceiv"
    "ed\030\033 \001(\t\022\024\n\014MaxMemberNum\030\034 \001(\r\022\022\n\nCanLev"
    "elUp\030\035 \001(\r\022\027\n\017MaxPresbyterNum\030\036 \001(\r\022\022\n\nG"
    "loryLimit\030\037 \001(\r\022\022\n\nLevelMoney\030  \001(\r\022\021\n\tS"
    "tability\030! \001(\r\022\027\n\017ReduceStability\030\" \001(\r\022"
    "\027\n\017ExtraRedstonExp\030# \001(\r\"\222\001\n\022PBFamilyMem"
    "berInfo\022\016\n\006RoleID\030\001 \001(\r\022\022\n\nFamilyPost\030\002 "
    "\001(\r\022\030\n\020FamilyContribute\030\003 \001(\r\022\027\n\017CorpsCo"
    "ntribute\030\004 \001(\r\022\021\n\tCorpsPost\030\005 \001(\r\022\022\n\nCor"
    "psTitle\030\006 \001(\t\"A\n\026PBFamilyMemberInfoList\022"
    "\'\n\nMemberInfo\030\001 \003(\0132\023.PBFamilyMemberInfo"
    "\"[\n\016PBGoodItemInfo\022\016\n\006ItemID\030\001 \001(\r\022\017\n\007It"
    "emNum\030\002 \001(\r\022\021\n\tComposeID\030\003 \001(\r\022\025\n\rPurcha"
    "rseTime\030\004 \001(\r\"W\n\020PBLeagueShopInfo\022\016\n\006Sho"
    "pID\030\001 \001(\r\022\020\n\010ShopType\030\002 \001(\r\022!\n\010ItemInfo\030"
    "\003 \003(\0132\017.PBGoodItemInfo\"B\n\025PBLeagueShopsL"
    "istInfo\022)\n\016LeagueShopInfo\030\001 \003(\0132\021.PBLeag"
    "ueShopInfoB\002H\001", 2494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "familydbinfo_pb.hxx", &protobuf_RegisterTypes);
  #endif
  ApplyInfo::default_instance_ = new ApplyInfo();
  PBApplyList::default_instance_ = new PBApplyList();
  FamilyData::default_instance_ = new FamilyData();
  PBFamilyList::default_instance_ = new PBFamilyList();
  FamilyMemberInfo::default_instance_ = new FamilyMemberInfo();
  PBFamilyMemberList::default_instance_ = new PBFamilyMemberList();
  PBFamilyOrganInfo::default_instance_ = new PBFamilyOrganInfo();
  PBFamilyOrganList::default_instance_ = new PBFamilyOrganList();
  PBFamilyPropery::default_instance_ = new PBFamilyPropery();
  PBFamilyMemberInfo::default_instance_ = new PBFamilyMemberInfo();
  PBFamilyMemberInfoList::default_instance_ = new PBFamilyMemberInfoList();
  PBGoodItemInfo::default_instance_ = new PBGoodItemInfo();
  PBLeagueShopInfo::default_instance_ = new PBLeagueShopInfo();
  PBLeagueShopsListInfo::default_instance_ = new PBLeagueShopsListInfo();
  ApplyInfo::default_instance_->InitAsDefaultInstance();
  PBApplyList::default_instance_->InitAsDefaultInstance();
  FamilyData::default_instance_->InitAsDefaultInstance();
  PBFamilyList::default_instance_->InitAsDefaultInstance();
  FamilyMemberInfo::default_instance_->InitAsDefaultInstance();
  PBFamilyMemberList::default_instance_->InitAsDefaultInstance();
  PBFamilyOrganInfo::default_instance_->InitAsDefaultInstance();
  PBFamilyOrganList::default_instance_->InitAsDefaultInstance();
  PBFamilyPropery::default_instance_->InitAsDefaultInstance();
  PBFamilyMemberInfo::default_instance_->InitAsDefaultInstance();
  PBFamilyMemberInfoList::default_instance_->InitAsDefaultInstance();
  PBGoodItemInfo::default_instance_->InitAsDefaultInstance();
  PBLeagueShopInfo::default_instance_->InitAsDefaultInstance();
  PBLeagueShopsListInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_familydbinfo_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_familydbinfo_5fpb_2ehxx {
  StaticDescriptorInitializer_familydbinfo_5fpb_2ehxx() {
    protobuf_AddDesc_familydbinfo_5fpb_2ehxx();
  }
} static_descriptor_initializer_familydbinfo_5fpb_2ehxx_;


// ===================================================================

const ::std::string ApplyInfo::_default_playername_;
#ifndef _MSC_VER
const int ApplyInfo::kPlayerNameFieldNumber;
const int ApplyInfo::kPlayerLevelFieldNumber;
const int ApplyInfo::kFaceTypeFieldNumber;
const int ApplyInfo::kLineIDFieldNumber;
const int ApplyInfo::kPlayerCharIDFieldNumber;
const int ApplyInfo::kPlayerOnLineFieldNumber;
const int ApplyInfo::kPlayerMetierFieldNumber;
const int ApplyInfo::kMapIDFieldNumber;
const int ApplyInfo::kPlayerSexFieldNumber;
#endif  // !_MSC_VER

ApplyInfo::ApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyInfo::InitAsDefaultInstance() {}

ApplyInfo::ApplyInfo(const ApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  playerlevel_ = 0u;
  facetype_ = 0u;
  lineid_ = 0u;
  playercharid_ = 0u;
  playeronline_ = 0u;
  playermetier_ = 0u;
  mapid_ = 0u;
  playersex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyInfo::~ApplyInfo() {
  SharedDtor();
}

void ApplyInfo::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyInfo_descriptor_;
}

const ApplyInfo& ApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

ApplyInfo* ApplyInfo::default_instance_ = NULL;

ApplyInfo* ApplyInfo::New() const {
  return new ApplyInfo;
}

void ApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    playerlevel_ = 0u;
    facetype_ = 0u;
    lineid_ = 0u;
    playercharid_ = 0u;
    playeronline_ = 0u;
    playermetier_ = 0u;
    mapid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playersex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string PlayerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(16)) goto parse_PlayerLevel;
        break;
      }
      
      // optional uint32 PlayerLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerlevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FaceType;
        break;
      }
      
      // optional uint32 FaceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &facetype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_PlayerOnLine;
        break;
      }
      
      // optional uint32 PlayerOnLine = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerOnLine:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playeronline_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_PlayerMetier;
        break;
      }
      
      // optional uint32 PlayerMetier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playermetier_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_PlayerSex;
        break;
      }
      
      // optional uint32 PlayerSex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playersex_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ApplyInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string PlayerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->playername(), output);
  }
  
  // optional uint32 PlayerLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerlevel(), output);
  }
  
  // optional uint32 FaceType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->facetype(), output);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lineid(), output);
  }
  
  // optional uint32 PlayerCharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->playercharid(), output);
  }
  
  // optional uint32 PlayerOnLine = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->playeronline(), output);
  }
  
  // optional uint32 PlayerMetier = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->playermetier(), output);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->mapid(), output);
  }
  
  // optional uint32 PlayerSex = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->playersex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string PlayerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->playername(), target);
  }
  
  // optional uint32 PlayerLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerlevel(), target);
  }
  
  // optional uint32 FaceType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->facetype(), target);
  }
  
  // optional uint32 LineID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lineid(), target);
  }
  
  // optional uint32 PlayerCharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->playercharid(), target);
  }
  
  // optional uint32 PlayerOnLine = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->playeronline(), target);
  }
  
  // optional uint32 PlayerMetier = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->playermetier(), target);
  }
  
  // optional uint32 MapID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->mapid(), target);
  }
  
  // optional uint32 PlayerSex = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->playersex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PlayerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 PlayerLevel = 2;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerlevel());
    }
    
    // optional uint32 FaceType = 3;
    if (has_facetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->facetype());
    }
    
    // optional uint32 LineID = 4;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 PlayerCharID = 5;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional uint32 PlayerOnLine = 6;
    if (has_playeronline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playeronline());
    }
    
    // optional uint32 PlayerMetier = 7;
    if (has_playermetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playermetier());
    }
    
    // optional uint32 MapID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PlayerSex = 9;
    if (has_playersex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playersex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyInfo::MergeFrom(const ApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playername(from.playername());
    }
    if (from._has_bit(1)) {
      set_playerlevel(from.playerlevel());
    }
    if (from._has_bit(2)) {
      set_facetype(from.facetype());
    }
    if (from._has_bit(3)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(4)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(5)) {
      set_playeronline(from.playeronline());
    }
    if (from._has_bit(6)) {
      set_playermetier(from.playermetier());
    }
    if (from._has_bit(7)) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_playersex(from.playersex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyInfo::CopyFrom(const ApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyInfo::Swap(ApplyInfo* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(facetype_, other->facetype_);
    std::swap(lineid_, other->lineid_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(playeronline_, other->playeronline_);
    std::swap(playermetier_, other->playermetier_);
    std::swap(mapid_, other->mapid_);
    std::swap(playersex_, other->playersex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ApplyInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* ApplyInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ApplyInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ApplyInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBApplyList::kApplyDataFieldNumber;
#endif  // !_MSC_VER

PBApplyList::PBApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApplyList::InitAsDefaultInstance() {}

PBApplyList::PBApplyList(const PBApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApplyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApplyList::~PBApplyList() {
  SharedDtor();
}

void PBApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApplyList_descriptor_;
}

const PBApplyList& PBApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBApplyList* PBApplyList::default_instance_ = NULL;

PBApplyList* PBApplyList::New() const {
  return new PBApplyList;
}

void PBApplyList::Clear() {
  applydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .ApplyInfo ApplyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ApplyData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_applydata()));
        if (input->ExpectTag(10)) goto parse_ApplyData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBApplyList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .ApplyInfo ApplyData = 1;
  for (int i = 0; i < this->applydata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->applydata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ApplyInfo ApplyData = 1;
  for (int i = 0; i < this->applydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->applydata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApplyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ApplyInfo ApplyData = 1;
  total_size += 1 * this->applydata_size();
  for (int i = 0; i < this->applydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->applydata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApplyList::MergeFrom(const PBApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  applydata_.MergeFrom(from.applydata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplyList::CopyFrom(const PBApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplyList::Swap(PBApplyList* other) {
  if (other != this) {
    applydata_.Swap(&other->applydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBApplyList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBApplyList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBApplyList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBApplyList_reflection_;
}

// ===================================================================

const ::std::string FamilyData::_default_familyname_;
const ::std::string FamilyData::_default_headername_;
const ::std::string FamilyData::_default_enemyfamilyname_;
const ::std::string FamilyData::_default_corpsname_;
#ifndef _MSC_VER
const int FamilyData::kFamilyNameFieldNumber;
const int FamilyData::kFamilyIDFieldNumber;
const int FamilyData::kHeaderNameFieldNumber;
const int FamilyData::kHeaderRoleIDFieldNumber;
const int FamilyData::kMemberNumFieldNumber;
const int FamilyData::kFamilyLevelFieldNumber;
const int FamilyData::kFamilyGloryFieldNumber;
const int FamilyData::kFamilyDevelopFieldNumber;
const int FamilyData::kNpcIDFieldNumber;
const int FamilyData::kBidMoneyFieldNumber;
const int FamilyData::kBidTimeFieldNumber;
const int FamilyData::kWarNpcStatusFieldNumber;
const int FamilyData::kWarRankFieldNumber;
const int FamilyData::kWarWinNumFieldNumber;
const int FamilyData::kWarLostNumFieldNumber;
const int FamilyData::kFamilyStarLevelFieldNumber;
const int FamilyData::kWarExpFieldNumber;
const int FamilyData::kWarMaxExpFieldNumber;
const int FamilyData::kEnemyFamilyNameFieldNumber;
const int FamilyData::kWarStatusFieldNumber;
const int FamilyData::kFamilyNpcNumFieldNumber;
const int FamilyData::kMaxMemberNumFieldNumber;
const int FamilyData::kCorpsNameFieldNumber;
#endif  // !_MSC_VER

FamilyData::FamilyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyData::InitAsDefaultInstance() {}

FamilyData::FamilyData(const FamilyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyData::SharedCtor() {
  _cached_size_ = 0;
  familyname_ = const_cast< ::std::string*>(&_default_familyname_);
  familyid_ = 0u;
  headername_ = const_cast< ::std::string*>(&_default_headername_);
  headerroleid_ = 0u;
  membernum_ = 0u;
  familylevel_ = 0u;
  familyglory_ = 0u;
  familydevelop_ = 0u;
  npcid_ = 0u;
  bidmoney_ = 0u;
  bidtime_ = 0u;
  warnpcstatus_ = 0u;
  warrank_ = 0u;
  warwinnum_ = 0u;
  warlostnum_ = 0u;
  familystarlevel_ = 0u;
  warexp_ = 0u;
  warmaxexp_ = 0u;
  enemyfamilyname_ = const_cast< ::std::string*>(&_default_enemyfamilyname_);
  warstatus_ = 0u;
  familynpcnum_ = 0u;
  maxmembernum_ = 0u;
  corpsname_ = const_cast< ::std::string*>(&_default_corpsname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyData::~FamilyData() {
  SharedDtor();
}

void FamilyData::SharedDtor() {
  if (familyname_ != &_default_familyname_) {
    delete familyname_;
  }
  if (headername_ != &_default_headername_) {
    delete headername_;
  }
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    delete enemyfamilyname_;
  }
  if (corpsname_ != &_default_corpsname_) {
    delete corpsname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FamilyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyData_descriptor_;
}

const FamilyData& FamilyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

FamilyData* FamilyData::default_instance_ = NULL;

FamilyData* FamilyData::New() const {
  return new FamilyData;
}

void FamilyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (familyname_ != &_default_familyname_) {
        familyname_->clear();
      }
    }
    familyid_ = 0u;
    if (_has_bit(2)) {
      if (headername_ != &_default_headername_) {
        headername_->clear();
      }
    }
    headerroleid_ = 0u;
    membernum_ = 0u;
    familylevel_ = 0u;
    familyglory_ = 0u;
    familydevelop_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    npcid_ = 0u;
    bidmoney_ = 0u;
    bidtime_ = 0u;
    warnpcstatus_ = 0u;
    warrank_ = 0u;
    warwinnum_ = 0u;
    warlostnum_ = 0u;
    familystarlevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    warexp_ = 0u;
    warmaxexp_ = 0u;
    if (_has_bit(18)) {
      if (enemyfamilyname_ != &_default_enemyfamilyname_) {
        enemyfamilyname_->clear();
      }
    }
    warstatus_ = 0u;
    familynpcnum_ = 0u;
    maxmembernum_ = 0u;
    if (_has_bit(22)) {
      if (corpsname_ != &_default_corpsname_) {
        corpsname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string FamilyName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyname()));
        if (input->ExpectTag(16)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_HeaderName;
        break;
      }
      
      // optional string HeaderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_HeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_headername()));
        if (input->ExpectTag(32)) goto parse_HeaderRoleID;
        break;
      }
      
      // optional uint32 HeaderRoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HeaderRoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &headerroleid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MemberNum;
        break;
      }
      
      // optional uint32 MemberNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &membernum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_FamilyLevel;
        break;
      }
      
      // optional uint32 FamilyLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familylevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_FamilyGlory;
        break;
      }
      
      // optional uint32 FamilyGlory = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyglory_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_FamilyDevelop;
        break;
      }
      
      // optional uint32 FamilyDevelop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyDevelop:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familydevelop_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_BidMoney;
        break;
      }
      
      // optional uint32 BidMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidmoney_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_BidTime;
        break;
      }
      
      // optional uint32 BidTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidtime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_WarNpcStatus;
        break;
      }
      
      // optional uint32 WarNpcStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarNpcStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warnpcstatus_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_WarRank;
        break;
      }
      
      // optional uint32 WarRank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warrank_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_WarWinNum;
        break;
      }
      
      // optional uint32 WarWinNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarWinNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warwinnum_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_WarLostNum;
        break;
      }
      
      // optional uint32 WarLostNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarLostNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warlostnum_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_FamilyStarLevel;
        break;
      }
      
      // optional uint32 FamilyStarLevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familystarlevel_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_WarExp;
        break;
      }
      
      // optional uint32 WarExp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warexp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_WarMaxExp;
        break;
      }
      
      // optional uint32 WarMaxExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarMaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warmaxexp_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_EnemyFamilyName;
        break;
      }
      
      // optional string EnemyFamilyName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EnemyFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_enemyfamilyname()));
        if (input->ExpectTag(160)) goto parse_WarStatus;
        break;
      }
      
      // optional uint32 WarStatus = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_FamilyNpcNum;
        break;
      }
      
      // optional uint32 FamilyNpcNum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyNpcNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familynpcnum_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_MaxMemberNum;
        break;
      }
      
      // optional uint32 MaxMemberNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmembernum_));
        _set_bit(21);
        if (input->ExpectTag(186)) goto parse_CorpsName;
        break;
      }
      
      // optional string CorpsName = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpsname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FamilyData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string FamilyName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->familyname(), output);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familyid(), output);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->headername(), output);
  }
  
  // optional uint32 HeaderRoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->headerroleid(), output);
  }
  
  // optional uint32 MemberNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->membernum(), output);
  }
  
  // optional uint32 FamilyLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->familylevel(), output);
  }
  
  // optional uint32 FamilyGlory = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->familyglory(), output);
  }
  
  // optional uint32 FamilyDevelop = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->familydevelop(), output);
  }
  
  // optional uint32 NpcID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->npcid(), output);
  }
  
  // optional uint32 BidMoney = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->bidmoney(), output);
  }
  
  // optional uint32 BidTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->bidtime(), output);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->warnpcstatus(), output);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->warrank(), output);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->warwinnum(), output);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->warlostnum(), output);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->familystarlevel(), output);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->warexp(), output);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->warmaxexp(), output);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->enemyfamilyname(), output);
  }
  
  // optional uint32 WarStatus = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->warstatus(), output);
  }
  
  // optional uint32 FamilyNpcNum = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->familynpcnum(), output);
  }
  
  // optional uint32 MaxMemberNum = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->maxmembernum(), output);
  }
  
  // optional string CorpsName = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteString(23, this->corpsname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FamilyName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->familyname(), target);
  }
  
  // optional uint32 FamilyID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familyid(), target);
  }
  
  // optional string HeaderName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->headername(), target);
  }
  
  // optional uint32 HeaderRoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->headerroleid(), target);
  }
  
  // optional uint32 MemberNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->membernum(), target);
  }
  
  // optional uint32 FamilyLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->familylevel(), target);
  }
  
  // optional uint32 FamilyGlory = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->familyglory(), target);
  }
  
  // optional uint32 FamilyDevelop = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->familydevelop(), target);
  }
  
  // optional uint32 NpcID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->npcid(), target);
  }
  
  // optional uint32 BidMoney = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->bidmoney(), target);
  }
  
  // optional uint32 BidTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->bidtime(), target);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->warnpcstatus(), target);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->warrank(), target);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->warwinnum(), target);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->warlostnum(), target);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->familystarlevel(), target);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->warexp(), target);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->warmaxexp(), target);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->enemyfamilyname(), target);
  }
  
  // optional uint32 WarStatus = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->warstatus(), target);
  }
  
  // optional uint32 FamilyNpcNum = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->familynpcnum(), target);
  }
  
  // optional uint32 MaxMemberNum = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->maxmembernum(), target);
  }
  
  // optional string CorpsName = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(23, this->corpsname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FamilyName = 1;
    if (has_familyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyname());
    }
    
    // optional uint32 FamilyID = 2;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional string HeaderName = 3;
    if (has_headername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->headername());
    }
    
    // optional uint32 HeaderRoleID = 4;
    if (has_headerroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->headerroleid());
    }
    
    // optional uint32 MemberNum = 5;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->membernum());
    }
    
    // optional uint32 FamilyLevel = 6;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familylevel());
    }
    
    // optional uint32 FamilyGlory = 7;
    if (has_familyglory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyglory());
    }
    
    // optional uint32 FamilyDevelop = 8;
    if (has_familydevelop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familydevelop());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 NpcID = 9;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 BidMoney = 10;
    if (has_bidmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidmoney());
    }
    
    // optional uint32 BidTime = 11;
    if (has_bidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidtime());
    }
    
    // optional uint32 WarNpcStatus = 12;
    if (has_warnpcstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warnpcstatus());
    }
    
    // optional uint32 WarRank = 13;
    if (has_warrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warrank());
    }
    
    // optional uint32 WarWinNum = 14;
    if (has_warwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warwinnum());
    }
    
    // optional uint32 WarLostNum = 15;
    if (has_warlostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warlostnum());
    }
    
    // optional uint32 FamilyStarLevel = 16;
    if (has_familystarlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familystarlevel());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 WarExp = 17;
    if (has_warexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warexp());
    }
    
    // optional uint32 WarMaxExp = 18;
    if (has_warmaxexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warmaxexp());
    }
    
    // optional string EnemyFamilyName = 19;
    if (has_enemyfamilyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->enemyfamilyname());
    }
    
    // optional uint32 WarStatus = 20;
    if (has_warstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
    // optional uint32 FamilyNpcNum = 21;
    if (has_familynpcnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familynpcnum());
    }
    
    // optional uint32 MaxMemberNum = 22;
    if (has_maxmembernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmembernum());
    }
    
    // optional string CorpsName = 23;
    if (has_corpsname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpsname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FamilyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyData::MergeFrom(const FamilyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyname(from.familyname());
    }
    if (from._has_bit(1)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(2)) {
      set_headername(from.headername());
    }
    if (from._has_bit(3)) {
      set_headerroleid(from.headerroleid());
    }
    if (from._has_bit(4)) {
      set_membernum(from.membernum());
    }
    if (from._has_bit(5)) {
      set_familylevel(from.familylevel());
    }
    if (from._has_bit(6)) {
      set_familyglory(from.familyglory());
    }
    if (from._has_bit(7)) {
      set_familydevelop(from.familydevelop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_npcid(from.npcid());
    }
    if (from._has_bit(9)) {
      set_bidmoney(from.bidmoney());
    }
    if (from._has_bit(10)) {
      set_bidtime(from.bidtime());
    }
    if (from._has_bit(11)) {
      set_warnpcstatus(from.warnpcstatus());
    }
    if (from._has_bit(12)) {
      set_warrank(from.warrank());
    }
    if (from._has_bit(13)) {
      set_warwinnum(from.warwinnum());
    }
    if (from._has_bit(14)) {
      set_warlostnum(from.warlostnum());
    }
    if (from._has_bit(15)) {
      set_familystarlevel(from.familystarlevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_warexp(from.warexp());
    }
    if (from._has_bit(17)) {
      set_warmaxexp(from.warmaxexp());
    }
    if (from._has_bit(18)) {
      set_enemyfamilyname(from.enemyfamilyname());
    }
    if (from._has_bit(19)) {
      set_warstatus(from.warstatus());
    }
    if (from._has_bit(20)) {
      set_familynpcnum(from.familynpcnum());
    }
    if (from._has_bit(21)) {
      set_maxmembernum(from.maxmembernum());
    }
    if (from._has_bit(22)) {
      set_corpsname(from.corpsname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyData::CopyFrom(const FamilyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyData::Swap(FamilyData* other) {
  if (other != this) {
    std::swap(familyname_, other->familyname_);
    std::swap(familyid_, other->familyid_);
    std::swap(headername_, other->headername_);
    std::swap(headerroleid_, other->headerroleid_);
    std::swap(membernum_, other->membernum_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(familyglory_, other->familyglory_);
    std::swap(familydevelop_, other->familydevelop_);
    std::swap(npcid_, other->npcid_);
    std::swap(bidmoney_, other->bidmoney_);
    std::swap(bidtime_, other->bidtime_);
    std::swap(warnpcstatus_, other->warnpcstatus_);
    std::swap(warrank_, other->warrank_);
    std::swap(warwinnum_, other->warwinnum_);
    std::swap(warlostnum_, other->warlostnum_);
    std::swap(familystarlevel_, other->familystarlevel_);
    std::swap(warexp_, other->warexp_);
    std::swap(warmaxexp_, other->warmaxexp_);
    std::swap(enemyfamilyname_, other->enemyfamilyname_);
    std::swap(warstatus_, other->warstatus_);
    std::swap(familynpcnum_, other->familynpcnum_);
    std::swap(maxmembernum_, other->maxmembernum_);
    std::swap(corpsname_, other->corpsname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FamilyData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FamilyData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FamilyData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FamilyData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFamilyList::kFamilyInfoFieldNumber;
#endif  // !_MSC_VER

PBFamilyList::PBFamilyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyList::InitAsDefaultInstance() {}

PBFamilyList::PBFamilyList(const PBFamilyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyList::~PBFamilyList() {
  SharedDtor();
}

void PBFamilyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyList_descriptor_;
}

const PBFamilyList& PBFamilyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyList* PBFamilyList::default_instance_ = NULL;

PBFamilyList* PBFamilyList::New() const {
  return new PBFamilyList;
}

void PBFamilyList::Clear() {
  familyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .FamilyData FamilyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_familyinfo()));
        if (input->ExpectTag(10)) goto parse_FamilyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .FamilyData FamilyInfo = 1;
  for (int i = 0; i < this->familyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->familyinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FamilyData FamilyInfo = 1;
  for (int i = 0; i < this->familyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->familyinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .FamilyData FamilyInfo = 1;
  total_size += 1 * this->familyinfo_size();
  for (int i = 0; i < this->familyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->familyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyList::MergeFrom(const PBFamilyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  familyinfo_.MergeFrom(from.familyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyList::CopyFrom(const PBFamilyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyList::Swap(PBFamilyList* other) {
  if (other != this) {
    familyinfo_.Swap(&other->familyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyList_reflection_;
}

// ===================================================================

const ::std::string FamilyMemberInfo::_default_playername_;
const ::std::string FamilyMemberInfo::_default_corpstitle_;
#ifndef _MSC_VER
const int FamilyMemberInfo::kFaceIDFieldNumber;
const int FamilyMemberInfo::kLineIDFieldNumber;
const int FamilyMemberInfo::kPlayerLevelFieldNumber;
const int FamilyMemberInfo::kPlayerPostFieldNumber;
const int FamilyMemberInfo::kPlayerCharIDFieldNumber;
const int FamilyMemberInfo::kRoleSexFieldNumber;
const int FamilyMemberInfo::kPlayerNameFieldNumber;
const int FamilyMemberInfo::kMetierIDFieldNumber;
const int FamilyMemberInfo::kOnlineFieldNumber;
const int FamilyMemberInfo::kMapIDFieldNumber;
const int FamilyMemberInfo::kFamilyWarFieldNumber;
const int FamilyMemberInfo::kContributeFieldNumber;
const int FamilyMemberInfo::kCorpsContributeFieldNumber;
const int FamilyMemberInfo::kCorpsWarFieldNumber;
const int FamilyMemberInfo::kCorpsTitleFieldNumber;
#endif  // !_MSC_VER

FamilyMemberInfo::FamilyMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyMemberInfo::InitAsDefaultInstance() {}

FamilyMemberInfo::FamilyMemberInfo(const FamilyMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  faceid_ = 0u;
  lineid_ = 0u;
  playerlevel_ = 0u;
  playerpost_ = 0u;
  playercharid_ = 0u;
  rolesex_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  metierid_ = 0u;
  online_ = 0u;
  mapid_ = 0u;
  familywar_ = 0u;
  contribute_ = 0u;
  corpscontribute_ = 0u;
  corpswar_ = 0u;
  corpstitle_ = const_cast< ::std::string*>(&_default_corpstitle_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyMemberInfo::~FamilyMemberInfo() {
  SharedDtor();
}

void FamilyMemberInfo::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (corpstitle_ != &_default_corpstitle_) {
    delete corpstitle_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FamilyMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyMemberInfo_descriptor_;
}

const FamilyMemberInfo& FamilyMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

FamilyMemberInfo* FamilyMemberInfo::default_instance_ = NULL;

FamilyMemberInfo* FamilyMemberInfo::New() const {
  return new FamilyMemberInfo;
}

void FamilyMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faceid_ = 0u;
    lineid_ = 0u;
    playerlevel_ = 0u;
    playerpost_ = 0u;
    playercharid_ = 0u;
    rolesex_ = 0u;
    if (_has_bit(6)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    metierid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = 0u;
    mapid_ = 0u;
    familywar_ = 0u;
    contribute_ = 0u;
    corpscontribute_ = 0u;
    corpswar_ = 0u;
    if (_has_bit(14)) {
      if (corpstitle_ != &_default_corpstitle_) {
        corpstitle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FaceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &faceid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PlayerLevel;
        break;
      }
      
      // optional uint32 PlayerLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerlevel_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PlayerPost;
        break;
      }
      
      // optional uint32 PlayerPost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerpost_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PlayerCharID;
        break;
      }
      
      // optional uint32 PlayerCharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playercharid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleSex;
        break;
      }
      
      // optional uint32 RoleSex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolesex_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(64)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Online;
        break;
      }
      
      // optional uint32 Online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Online:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &online_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_FamilyWar;
        break;
      }
      
      // optional uint32 FamilyWar = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familywar_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Contribute;
        break;
      }
      
      // optional uint32 Contribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Contribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contribute_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_CorpsContribute;
        break;
      }
      
      // optional uint32 CorpsContribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscontribute_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_CorpsWar;
        break;
      }
      
      // optional uint32 CorpsWar = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpswar_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_CorpsTitle;
        break;
      }
      
      // optional string CorpsTitle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpstitle()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FamilyMemberInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FaceID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->faceid(), output);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lineid(), output);
  }
  
  // optional uint32 PlayerLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->playerlevel(), output);
  }
  
  // optional uint32 PlayerPost = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->playerpost(), output);
  }
  
  // optional uint32 PlayerCharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->playercharid(), output);
  }
  
  // optional uint32 RoleSex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->rolesex(), output);
  }
  
  // optional string PlayerName = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->playername(), output);
  }
  
  // optional uint32 MetierID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->metierid(), output);
  }
  
  // optional uint32 Online = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->online(), output);
  }
  
  // optional uint32 MapID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->mapid(), output);
  }
  
  // optional uint32 FamilyWar = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->familywar(), output);
  }
  
  // optional uint32 Contribute = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->contribute(), output);
  }
  
  // optional uint32 CorpsContribute = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->corpscontribute(), output);
  }
  
  // optional uint32 CorpsWar = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->corpswar(), output);
  }
  
  // optional string CorpsTitle = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteString(15, this->corpstitle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FaceID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->faceid(), target);
  }
  
  // optional uint32 LineID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lineid(), target);
  }
  
  // optional uint32 PlayerLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->playerlevel(), target);
  }
  
  // optional uint32 PlayerPost = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->playerpost(), target);
  }
  
  // optional uint32 PlayerCharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->playercharid(), target);
  }
  
  // optional uint32 RoleSex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->rolesex(), target);
  }
  
  // optional string PlayerName = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->playername(), target);
  }
  
  // optional uint32 MetierID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->metierid(), target);
  }
  
  // optional uint32 Online = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->online(), target);
  }
  
  // optional uint32 MapID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->mapid(), target);
  }
  
  // optional uint32 FamilyWar = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->familywar(), target);
  }
  
  // optional uint32 Contribute = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->contribute(), target);
  }
  
  // optional uint32 CorpsContribute = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->corpscontribute(), target);
  }
  
  // optional uint32 CorpsWar = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->corpswar(), target);
  }
  
  // optional string CorpsTitle = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(15, this->corpstitle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FaceID = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->faceid());
    }
    
    // optional uint32 LineID = 2;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 PlayerLevel = 3;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerlevel());
    }
    
    // optional uint32 PlayerPost = 4;
    if (has_playerpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerpost());
    }
    
    // optional uint32 PlayerCharID = 5;
    if (has_playercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playercharid());
    }
    
    // optional uint32 RoleSex = 6;
    if (has_rolesex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolesex());
    }
    
    // optional string PlayerName = 7;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 MetierID = 8;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Online = 9;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->online());
    }
    
    // optional uint32 MapID = 10;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 FamilyWar = 11;
    if (has_familywar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familywar());
    }
    
    // optional uint32 Contribute = 12;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contribute());
    }
    
    // optional uint32 CorpsContribute = 13;
    if (has_corpscontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscontribute());
    }
    
    // optional uint32 CorpsWar = 14;
    if (has_corpswar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpswar());
    }
    
    // optional string CorpsTitle = 15;
    if (has_corpstitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpstitle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FamilyMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyMemberInfo::MergeFrom(const FamilyMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_faceid(from.faceid());
    }
    if (from._has_bit(1)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(2)) {
      set_playerlevel(from.playerlevel());
    }
    if (from._has_bit(3)) {
      set_playerpost(from.playerpost());
    }
    if (from._has_bit(4)) {
      set_playercharid(from.playercharid());
    }
    if (from._has_bit(5)) {
      set_rolesex(from.rolesex());
    }
    if (from._has_bit(6)) {
      set_playername(from.playername());
    }
    if (from._has_bit(7)) {
      set_metierid(from.metierid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_online(from.online());
    }
    if (from._has_bit(9)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(10)) {
      set_familywar(from.familywar());
    }
    if (from._has_bit(11)) {
      set_contribute(from.contribute());
    }
    if (from._has_bit(12)) {
      set_corpscontribute(from.corpscontribute());
    }
    if (from._has_bit(13)) {
      set_corpswar(from.corpswar());
    }
    if (from._has_bit(14)) {
      set_corpstitle(from.corpstitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyMemberInfo::CopyFrom(const FamilyMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyMemberInfo::Swap(FamilyMemberInfo* other) {
  if (other != this) {
    std::swap(faceid_, other->faceid_);
    std::swap(lineid_, other->lineid_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(playerpost_, other->playerpost_);
    std::swap(playercharid_, other->playercharid_);
    std::swap(rolesex_, other->rolesex_);
    std::swap(playername_, other->playername_);
    std::swap(metierid_, other->metierid_);
    std::swap(online_, other->online_);
    std::swap(mapid_, other->mapid_);
    std::swap(familywar_, other->familywar_);
    std::swap(contribute_, other->contribute_);
    std::swap(corpscontribute_, other->corpscontribute_);
    std::swap(corpswar_, other->corpswar_);
    std::swap(corpstitle_, other->corpstitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FamilyMemberInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* FamilyMemberInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FamilyMemberInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FamilyMemberInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFamilyMemberList::kMembersFieldNumber;
#endif  // !_MSC_VER

PBFamilyMemberList::PBFamilyMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyMemberList::InitAsDefaultInstance() {}

PBFamilyMemberList::PBFamilyMemberList(const PBFamilyMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyMemberList::~PBFamilyMemberList() {
  SharedDtor();
}

void PBFamilyMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberList_descriptor_;
}

const PBFamilyMemberList& PBFamilyMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyMemberList* PBFamilyMemberList::default_instance_ = NULL;

PBFamilyMemberList* PBFamilyMemberList::New() const {
  return new PBFamilyMemberList;
}

void PBFamilyMemberList::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .FamilyMemberInfo Members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Members:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_members()));
        if (input->ExpectTag(10)) goto parse_Members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyMemberList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .FamilyMemberInfo Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FamilyMemberInfo Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyMemberList::ByteSize() const {
  int total_size = 0;
  
  // repeated .FamilyMemberInfo Members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyMemberList::MergeFrom(const PBFamilyMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberList::CopyFrom(const PBFamilyMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberList::Swap(PBFamilyMemberList* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyMemberList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyMemberList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyMemberList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberList_reflection_;
}

// ===================================================================

const ::std::string PBFamilyOrganInfo::_default_organname_;
#ifndef _MSC_VER
const int PBFamilyOrganInfo::kRightsFieldNumber;
const int PBFamilyOrganInfo::kOrganNameFieldNumber;
const int PBFamilyOrganInfo::kIDFieldNumber;
#endif  // !_MSC_VER

PBFamilyOrganInfo::PBFamilyOrganInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyOrganInfo::InitAsDefaultInstance() {}

PBFamilyOrganInfo::PBFamilyOrganInfo(const PBFamilyOrganInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyOrganInfo::SharedCtor() {
  _cached_size_ = 0;
  rights_ = 0u;
  organname_ = const_cast< ::std::string*>(&_default_organname_);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyOrganInfo::~PBFamilyOrganInfo() {
  SharedDtor();
}

void PBFamilyOrganInfo::SharedDtor() {
  if (organname_ != &_default_organname_) {
    delete organname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyOrganInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyOrganInfo_descriptor_;
}

const PBFamilyOrganInfo& PBFamilyOrganInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyOrganInfo* PBFamilyOrganInfo::default_instance_ = NULL;

PBFamilyOrganInfo* PBFamilyOrganInfo::New() const {
  return new PBFamilyOrganInfo;
}

void PBFamilyOrganInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rights_ = 0u;
    if (_has_bit(1)) {
      if (organname_ != &_default_organname_) {
        organname_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyOrganInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Rights = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rights_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_OrganName;
        break;
      }
      
      // optional string OrganName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_OrganName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_organname()));
        if (input->ExpectTag(24)) goto parse_ID;
        break;
      }
      
      // optional uint32 ID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &id_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyOrganInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyOrganInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Rights = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->rights(), output);
  }
  
  // optional string OrganName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->organname(), output);
  }
  
  // optional uint32 ID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyOrganInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Rights = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->rights(), target);
  }
  
  // optional string OrganName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->organname(), target);
  }
  
  // optional uint32 ID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyOrganInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rights = 1;
    if (has_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rights());
    }
    
    // optional string OrganName = 2;
    if (has_organname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->organname());
    }
    
    // optional uint32 ID = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyOrganInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyOrganInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyOrganInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyOrganInfo::MergeFrom(const PBFamilyOrganInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rights(from.rights());
    }
    if (from._has_bit(1)) {
      set_organname(from.organname());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyOrganInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyOrganInfo::CopyFrom(const PBFamilyOrganInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyOrganInfo::Swap(PBFamilyOrganInfo* other) {
  if (other != this) {
    std::swap(rights_, other->rights_);
    std::swap(organname_, other->organname_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyOrganInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyOrganInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyOrganInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyOrganInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFamilyOrganList::kOrganesFieldNumber;
#endif  // !_MSC_VER

PBFamilyOrganList::PBFamilyOrganList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyOrganList::InitAsDefaultInstance() {}

PBFamilyOrganList::PBFamilyOrganList(const PBFamilyOrganList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyOrganList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyOrganList::~PBFamilyOrganList() {
  SharedDtor();
}

void PBFamilyOrganList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyOrganList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyOrganList_descriptor_;
}

const PBFamilyOrganList& PBFamilyOrganList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyOrganList* PBFamilyOrganList::default_instance_ = NULL;

PBFamilyOrganList* PBFamilyOrganList::New() const {
  return new PBFamilyOrganList;
}

void PBFamilyOrganList::Clear() {
  organes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyOrganList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBFamilyOrganInfo Organes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Organes:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_organes()));
        if (input->ExpectTag(10)) goto parse_Organes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyOrganList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyOrganList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBFamilyOrganInfo Organes = 1;
  for (int i = 0; i < this->organes_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->organes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyOrganList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFamilyOrganInfo Organes = 1;
  for (int i = 0; i < this->organes_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->organes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyOrganList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFamilyOrganInfo Organes = 1;
  total_size += 1 * this->organes_size();
  for (int i = 0; i < this->organes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->organes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyOrganList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyOrganList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyOrganList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyOrganList::MergeFrom(const PBFamilyOrganList& from) {
  GOOGLE_CHECK_NE(&from, this);
  organes_.MergeFrom(from.organes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyOrganList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyOrganList::CopyFrom(const PBFamilyOrganList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyOrganList::Swap(PBFamilyOrganList* other) {
  if (other != this) {
    organes_.Swap(&other->organes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyOrganList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyOrganList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyOrganList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyOrganList_reflection_;
}

// ===================================================================

const ::std::string PBFamilyPropery::_default_familynotice_;
const ::std::string PBFamilyPropery::_default_familyheadername_;
const ::std::string PBFamilyPropery::_default_enemyfamilyname_;
const ::std::string PBFamilyPropery::_default_challengestarted_;
const ::std::string PBFamilyPropery::_default_challengereceived_;
#ifndef _MSC_VER
const int PBFamilyPropery::kFamilyHeaderIDFieldNumber;
const int PBFamilyPropery::kFamilyMoneyFieldNumber;
const int PBFamilyPropery::kFamilyLevelFieldNumber;
const int PBFamilyPropery::kFamilyNoticeFieldNumber;
const int PBFamilyPropery::kFamilyHeaderNameFieldNumber;
const int PBFamilyPropery::kMemberNumFieldNumber;
const int PBFamilyPropery::kFamilyIDFieldNumber;
const int PBFamilyPropery::kNpcIDFieldNumber;
const int PBFamilyPropery::kBidMoneyFieldNumber;
const int PBFamilyPropery::kBidTimeFieldNumber;
const int PBFamilyPropery::kWarNpcFieldNumber;
const int PBFamilyPropery::kWarNpcStatusFieldNumber;
const int PBFamilyPropery::kWarRankFieldNumber;
const int PBFamilyPropery::kWarWinNumFieldNumber;
const int PBFamilyPropery::kWarLostNumFieldNumber;
const int PBFamilyPropery::kFamilyStarLevelFieldNumber;
const int PBFamilyPropery::kWarExpFieldNumber;
const int PBFamilyPropery::kWarMaxExpFieldNumber;
const int PBFamilyPropery::kEnemyFamilyNameFieldNumber;
const int PBFamilyPropery::kTaskIDFieldNumber;
const int PBFamilyPropery::kFamilyGloryFieldNumber;
const int PBFamilyPropery::kFamilyDevelopFieldNumber;
const int PBFamilyPropery::kWarStatusFieldNumber;
const int PBFamilyPropery::kChallengeStatusFieldNumber;
const int PBFamilyPropery::kChallengeMoneyFieldNumber;
const int PBFamilyPropery::kChallengeStartedFieldNumber;
const int PBFamilyPropery::kChallengeReceivedFieldNumber;
const int PBFamilyPropery::kMaxMemberNumFieldNumber;
const int PBFamilyPropery::kCanLevelUpFieldNumber;
const int PBFamilyPropery::kMaxPresbyterNumFieldNumber;
const int PBFamilyPropery::kGloryLimitFieldNumber;
const int PBFamilyPropery::kLevelMoneyFieldNumber;
const int PBFamilyPropery::kStabilityFieldNumber;
const int PBFamilyPropery::kReduceStabilityFieldNumber;
const int PBFamilyPropery::kExtraRedstonExpFieldNumber;
#endif  // !_MSC_VER

PBFamilyPropery::PBFamilyPropery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyPropery::InitAsDefaultInstance() {}

PBFamilyPropery::PBFamilyPropery(const PBFamilyPropery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyPropery::SharedCtor() {
  _cached_size_ = 0;
  familyheaderid_ = 0u;
  familymoney_ = 0u;
  familylevel_ = 0u;
  familynotice_ = const_cast< ::std::string*>(&_default_familynotice_);
  familyheadername_ = const_cast< ::std::string*>(&_default_familyheadername_);
  membernum_ = 0u;
  familyid_ = 0u;
  npcid_ = 0u;
  bidmoney_ = 0u;
  bidtime_ = 0u;
  warnpc_ = 0u;
  warnpcstatus_ = 0u;
  warrank_ = 0u;
  warwinnum_ = 0u;
  warlostnum_ = 0u;
  familystarlevel_ = 0u;
  warexp_ = 0u;
  warmaxexp_ = 0u;
  enemyfamilyname_ = const_cast< ::std::string*>(&_default_enemyfamilyname_);
  familyglory_ = 0u;
  familydevelop_ = 0u;
  warstatus_ = 0u;
  challengestatus_ = 0u;
  challengemoney_ = 0u;
  challengestarted_ = const_cast< ::std::string*>(&_default_challengestarted_);
  challengereceived_ = const_cast< ::std::string*>(&_default_challengereceived_);
  maxmembernum_ = 0u;
  canlevelup_ = 0u;
  maxpresbyternum_ = 0u;
  glorylimit_ = 0u;
  levelmoney_ = 0u;
  stability_ = 0u;
  reducestability_ = 0u;
  extraredstonexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyPropery::~PBFamilyPropery() {
  SharedDtor();
}

void PBFamilyPropery::SharedDtor() {
  if (familynotice_ != &_default_familynotice_) {
    delete familynotice_;
  }
  if (familyheadername_ != &_default_familyheadername_) {
    delete familyheadername_;
  }
  if (enemyfamilyname_ != &_default_enemyfamilyname_) {
    delete enemyfamilyname_;
  }
  if (challengestarted_ != &_default_challengestarted_) {
    delete challengestarted_;
  }
  if (challengereceived_ != &_default_challengereceived_) {
    delete challengereceived_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyPropery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyPropery_descriptor_;
}

const PBFamilyPropery& PBFamilyPropery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyPropery* PBFamilyPropery::default_instance_ = NULL;

PBFamilyPropery* PBFamilyPropery::New() const {
  return new PBFamilyPropery;
}

void PBFamilyPropery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    familyheaderid_ = 0u;
    familymoney_ = 0u;
    familylevel_ = 0u;
    if (_has_bit(3)) {
      if (familynotice_ != &_default_familynotice_) {
        familynotice_->clear();
      }
    }
    if (_has_bit(4)) {
      if (familyheadername_ != &_default_familyheadername_) {
        familyheadername_->clear();
      }
    }
    membernum_ = 0u;
    familyid_ = 0u;
    npcid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bidmoney_ = 0u;
    bidtime_ = 0u;
    warnpc_ = 0u;
    warnpcstatus_ = 0u;
    warrank_ = 0u;
    warwinnum_ = 0u;
    warlostnum_ = 0u;
    familystarlevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    warexp_ = 0u;
    warmaxexp_ = 0u;
    if (_has_bit(18)) {
      if (enemyfamilyname_ != &_default_enemyfamilyname_) {
        enemyfamilyname_->clear();
      }
    }
    familyglory_ = 0u;
    familydevelop_ = 0u;
    warstatus_ = 0u;
    challengestatus_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    challengemoney_ = 0u;
    if (_has_bit(25)) {
      if (challengestarted_ != &_default_challengestarted_) {
        challengestarted_->clear();
      }
    }
    if (_has_bit(26)) {
      if (challengereceived_ != &_default_challengereceived_) {
        challengereceived_->clear();
      }
    }
    maxmembernum_ = 0u;
    canlevelup_ = 0u;
    maxpresbyternum_ = 0u;
    glorylimit_ = 0u;
    levelmoney_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    stability_ = 0u;
    reducestability_ = 0u;
    extraredstonexp_ = 0u;
  }
  taskid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyPropery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 FamilyHeaderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyheaderid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyMoney;
        break;
      }
      
      // optional uint32 FamilyMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familymoney_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyLevel;
        break;
      }
      
      // optional uint32 FamilyLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familylevel_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_FamilyNotice;
        break;
      }
      
      // optional string FamilyNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyNotice:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familynotice()));
        if (input->ExpectTag(42)) goto parse_FamilyHeaderName;
        break;
      }
      
      // optional string FamilyHeaderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FamilyHeaderName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_familyheadername()));
        if (input->ExpectTag(48)) goto parse_MemberNum;
        break;
      }
      
      // optional uint32 MemberNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &membernum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_FamilyID;
        break;
      }
      
      // optional uint32 FamilyID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_BidMoney;
        break;
      }
      
      // optional uint32 BidMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidmoney_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_BidTime;
        break;
      }
      
      // optional uint32 BidTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bidtime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_WarNpc;
        break;
      }
      
      // optional uint32 WarNpc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarNpc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warnpc_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_WarNpcStatus;
        break;
      }
      
      // optional uint32 WarNpcStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarNpcStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warnpcstatus_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_WarRank;
        break;
      }
      
      // optional uint32 WarRank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarRank:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warrank_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_WarWinNum;
        break;
      }
      
      // optional uint32 WarWinNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarWinNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warwinnum_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_WarLostNum;
        break;
      }
      
      // optional uint32 WarLostNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarLostNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warlostnum_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_FamilyStarLevel;
        break;
      }
      
      // optional uint32 FamilyStarLevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyStarLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familystarlevel_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_WarExp;
        break;
      }
      
      // optional uint32 WarExp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warexp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_WarMaxExp;
        break;
      }
      
      // optional uint32 WarMaxExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarMaxExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warmaxexp_));
        _set_bit(17);
        if (input->ExpectTag(154)) goto parse_EnemyFamilyName;
        break;
      }
      
      // optional string EnemyFamilyName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_EnemyFamilyName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_enemyfamilyname()));
        if (input->ExpectTag(160)) goto parse_TaskID;
        break;
      }
      
      // repeated uint32 TaskID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_taskid(value);
        if (input->ExpectTag(160)) goto parse_TaskID;
        if (input->ExpectTag(168)) goto parse_FamilyGlory;
        break;
      }
      
      // optional uint32 FamilyGlory = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyGlory:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familyglory_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_FamilyDevelop;
        break;
      }
      
      // optional uint32 FamilyDevelop = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyDevelop:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familydevelop_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_WarStatus;
        break;
      }
      
      // optional uint32 WarStatus = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warstatus_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_ChallengeStatus;
        break;
      }
      
      // optional uint32 ChallengeStatus = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengestatus_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_ChallengeMoney;
        break;
      }
      
      // optional uint32 ChallengeMoney = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChallengeMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &challengemoney_));
        _set_bit(24);
        if (input->ExpectTag(210)) goto parse_ChallengeStarted;
        break;
      }
      
      // optional string ChallengeStarted = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChallengeStarted:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_challengestarted()));
        if (input->ExpectTag(218)) goto parse_ChallengeReceived;
        break;
      }
      
      // optional string ChallengeReceived = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChallengeReceived:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_challengereceived()));
        if (input->ExpectTag(224)) goto parse_MaxMemberNum;
        break;
      }
      
      // optional uint32 MaxMemberNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMemberNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmembernum_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_CanLevelUp;
        break;
      }
      
      // optional uint32 CanLevelUp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CanLevelUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &canlevelup_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_MaxPresbyterNum;
        break;
      }
      
      // optional uint32 MaxPresbyterNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxPresbyterNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxpresbyternum_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_GloryLimit;
        break;
      }
      
      // optional uint32 GloryLimit = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GloryLimit:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &glorylimit_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_LevelMoney;
        break;
      }
      
      // optional uint32 LevelMoney = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LevelMoney:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelmoney_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_Stability;
        break;
      }
      
      // optional uint32 Stability = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Stability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stability_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_ReduceStability;
        break;
      }
      
      // optional uint32 ReduceStability = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReduceStability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reducestability_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_ExtraRedstonExp;
        break;
      }
      
      // optional uint32 ExtraRedstonExp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraRedstonExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extraredstonexp_));
        _set_bit(34);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyPropery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyPropery::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 FamilyHeaderID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->familyheaderid(), output);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familymoney(), output);
  }
  
  // optional uint32 FamilyLevel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familylevel(), output);
  }
  
  // optional string FamilyNotice = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->familynotice(), output);
  }
  
  // optional string FamilyHeaderName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->familyheadername(), output);
  }
  
  // optional uint32 MemberNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->membernum(), output);
  }
  
  // optional uint32 FamilyID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->familyid(), output);
  }
  
  // optional uint32 NpcID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->npcid(), output);
  }
  
  // optional uint32 BidMoney = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->bidmoney(), output);
  }
  
  // optional uint32 BidTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->bidtime(), output);
  }
  
  // optional uint32 WarNpc = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->warnpc(), output);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->warnpcstatus(), output);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->warrank(), output);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->warwinnum(), output);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->warlostnum(), output);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->familystarlevel(), output);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->warexp(), output);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->warmaxexp(), output);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteString(19, this->enemyfamilyname(), output);
  }
  
  // repeated uint32 TaskID = 20;
  for (int i = 0; i < this->taskid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->taskid(i), output);
  }
  
  // optional uint32 FamilyGlory = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->familyglory(), output);
  }
  
  // optional uint32 FamilyDevelop = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->familydevelop(), output);
  }
  
  // optional uint32 WarStatus = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->warstatus(), output);
  }
  
  // optional uint32 ChallengeStatus = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->challengestatus(), output);
  }
  
  // optional uint32 ChallengeMoney = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->challengemoney(), output);
  }
  
  // optional string ChallengeStarted = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteString(26, this->challengestarted(), output);
  }
  
  // optional string ChallengeReceived = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteString(27, this->challengereceived(), output);
  }
  
  // optional uint32 MaxMemberNum = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->maxmembernum(), output);
  }
  
  // optional uint32 CanLevelUp = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->canlevelup(), output);
  }
  
  // optional uint32 MaxPresbyterNum = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->maxpresbyternum(), output);
  }
  
  // optional uint32 GloryLimit = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->glorylimit(), output);
  }
  
  // optional uint32 LevelMoney = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->levelmoney(), output);
  }
  
  // optional uint32 Stability = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->stability(), output);
  }
  
  // optional uint32 ReduceStability = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->reducestability(), output);
  }
  
  // optional uint32 ExtraRedstonExp = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->extraredstonexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyPropery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FamilyHeaderID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->familyheaderid(), target);
  }
  
  // optional uint32 FamilyMoney = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familymoney(), target);
  }
  
  // optional uint32 FamilyLevel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familylevel(), target);
  }
  
  // optional string FamilyNotice = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->familynotice(), target);
  }
  
  // optional string FamilyHeaderName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->familyheadername(), target);
  }
  
  // optional uint32 MemberNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->membernum(), target);
  }
  
  // optional uint32 FamilyID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->familyid(), target);
  }
  
  // optional uint32 NpcID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->npcid(), target);
  }
  
  // optional uint32 BidMoney = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->bidmoney(), target);
  }
  
  // optional uint32 BidTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->bidtime(), target);
  }
  
  // optional uint32 WarNpc = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->warnpc(), target);
  }
  
  // optional uint32 WarNpcStatus = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->warnpcstatus(), target);
  }
  
  // optional uint32 WarRank = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->warrank(), target);
  }
  
  // optional uint32 WarWinNum = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->warwinnum(), target);
  }
  
  // optional uint32 WarLostNum = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->warlostnum(), target);
  }
  
  // optional uint32 FamilyStarLevel = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->familystarlevel(), target);
  }
  
  // optional uint32 WarExp = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->warexp(), target);
  }
  
  // optional uint32 WarMaxExp = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->warmaxexp(), target);
  }
  
  // optional string EnemyFamilyName = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(19, this->enemyfamilyname(), target);
  }
  
  // repeated uint32 TaskID = 20;
  for (int i = 0; i < this->taskid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->taskid(i), target);
  }
  
  // optional uint32 FamilyGlory = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->familyglory(), target);
  }
  
  // optional uint32 FamilyDevelop = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->familydevelop(), target);
  }
  
  // optional uint32 WarStatus = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->warstatus(), target);
  }
  
  // optional uint32 ChallengeStatus = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->challengestatus(), target);
  }
  
  // optional uint32 ChallengeMoney = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->challengemoney(), target);
  }
  
  // optional string ChallengeStarted = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(26, this->challengestarted(), target);
  }
  
  // optional string ChallengeReceived = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(27, this->challengereceived(), target);
  }
  
  // optional uint32 MaxMemberNum = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->maxmembernum(), target);
  }
  
  // optional uint32 CanLevelUp = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->canlevelup(), target);
  }
  
  // optional uint32 MaxPresbyterNum = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->maxpresbyternum(), target);
  }
  
  // optional uint32 GloryLimit = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->glorylimit(), target);
  }
  
  // optional uint32 LevelMoney = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->levelmoney(), target);
  }
  
  // optional uint32 Stability = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->stability(), target);
  }
  
  // optional uint32 ReduceStability = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->reducestability(), target);
  }
  
  // optional uint32 ExtraRedstonExp = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->extraredstonexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyPropery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FamilyHeaderID = 1;
    if (has_familyheaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyheaderid());
    }
    
    // optional uint32 FamilyMoney = 2;
    if (has_familymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familymoney());
    }
    
    // optional uint32 FamilyLevel = 3;
    if (has_familylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familylevel());
    }
    
    // optional string FamilyNotice = 4;
    if (has_familynotice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familynotice());
    }
    
    // optional string FamilyHeaderName = 5;
    if (has_familyheadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->familyheadername());
    }
    
    // optional uint32 MemberNum = 6;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->membernum());
    }
    
    // optional uint32 FamilyID = 7;
    if (has_familyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyid());
    }
    
    // optional uint32 NpcID = 8;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 BidMoney = 9;
    if (has_bidmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidmoney());
    }
    
    // optional uint32 BidTime = 10;
    if (has_bidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bidtime());
    }
    
    // optional uint32 WarNpc = 11;
    if (has_warnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warnpc());
    }
    
    // optional uint32 WarNpcStatus = 12;
    if (has_warnpcstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warnpcstatus());
    }
    
    // optional uint32 WarRank = 13;
    if (has_warrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warrank());
    }
    
    // optional uint32 WarWinNum = 14;
    if (has_warwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warwinnum());
    }
    
    // optional uint32 WarLostNum = 15;
    if (has_warlostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warlostnum());
    }
    
    // optional uint32 FamilyStarLevel = 16;
    if (has_familystarlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familystarlevel());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 WarExp = 17;
    if (has_warexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warexp());
    }
    
    // optional uint32 WarMaxExp = 18;
    if (has_warmaxexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warmaxexp());
    }
    
    // optional string EnemyFamilyName = 19;
    if (has_enemyfamilyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->enemyfamilyname());
    }
    
    // optional uint32 FamilyGlory = 21;
    if (has_familyglory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familyglory());
    }
    
    // optional uint32 FamilyDevelop = 22;
    if (has_familydevelop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familydevelop());
    }
    
    // optional uint32 WarStatus = 23;
    if (has_warstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warstatus());
    }
    
    // optional uint32 ChallengeStatus = 24;
    if (has_challengestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengestatus());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 ChallengeMoney = 25;
    if (has_challengemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->challengemoney());
    }
    
    // optional string ChallengeStarted = 26;
    if (has_challengestarted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->challengestarted());
    }
    
    // optional string ChallengeReceived = 27;
    if (has_challengereceived()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->challengereceived());
    }
    
    // optional uint32 MaxMemberNum = 28;
    if (has_maxmembernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmembernum());
    }
    
    // optional uint32 CanLevelUp = 29;
    if (has_canlevelup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->canlevelup());
    }
    
    // optional uint32 MaxPresbyterNum = 30;
    if (has_maxpresbyternum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxpresbyternum());
    }
    
    // optional uint32 GloryLimit = 31;
    if (has_glorylimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->glorylimit());
    }
    
    // optional uint32 LevelMoney = 32;
    if (has_levelmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelmoney());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 Stability = 33;
    if (has_stability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stability());
    }
    
    // optional uint32 ReduceStability = 34;
    if (has_reducestability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reducestability());
    }
    
    // optional uint32 ExtraRedstonExp = 35;
    if (has_extraredstonexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extraredstonexp());
    }
    
  }
  // repeated uint32 TaskID = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->taskid(i));
    }
    total_size += 2 * this->taskid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyPropery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyPropery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyPropery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyPropery::MergeFrom(const PBFamilyPropery& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskid_.MergeFrom(from.taskid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_familyheaderid(from.familyheaderid());
    }
    if (from._has_bit(1)) {
      set_familymoney(from.familymoney());
    }
    if (from._has_bit(2)) {
      set_familylevel(from.familylevel());
    }
    if (from._has_bit(3)) {
      set_familynotice(from.familynotice());
    }
    if (from._has_bit(4)) {
      set_familyheadername(from.familyheadername());
    }
    if (from._has_bit(5)) {
      set_membernum(from.membernum());
    }
    if (from._has_bit(6)) {
      set_familyid(from.familyid());
    }
    if (from._has_bit(7)) {
      set_npcid(from.npcid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_bidmoney(from.bidmoney());
    }
    if (from._has_bit(9)) {
      set_bidtime(from.bidtime());
    }
    if (from._has_bit(10)) {
      set_warnpc(from.warnpc());
    }
    if (from._has_bit(11)) {
      set_warnpcstatus(from.warnpcstatus());
    }
    if (from._has_bit(12)) {
      set_warrank(from.warrank());
    }
    if (from._has_bit(13)) {
      set_warwinnum(from.warwinnum());
    }
    if (from._has_bit(14)) {
      set_warlostnum(from.warlostnum());
    }
    if (from._has_bit(15)) {
      set_familystarlevel(from.familystarlevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_warexp(from.warexp());
    }
    if (from._has_bit(17)) {
      set_warmaxexp(from.warmaxexp());
    }
    if (from._has_bit(18)) {
      set_enemyfamilyname(from.enemyfamilyname());
    }
    if (from._has_bit(20)) {
      set_familyglory(from.familyglory());
    }
    if (from._has_bit(21)) {
      set_familydevelop(from.familydevelop());
    }
    if (from._has_bit(22)) {
      set_warstatus(from.warstatus());
    }
    if (from._has_bit(23)) {
      set_challengestatus(from.challengestatus());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_challengemoney(from.challengemoney());
    }
    if (from._has_bit(25)) {
      set_challengestarted(from.challengestarted());
    }
    if (from._has_bit(26)) {
      set_challengereceived(from.challengereceived());
    }
    if (from._has_bit(27)) {
      set_maxmembernum(from.maxmembernum());
    }
    if (from._has_bit(28)) {
      set_canlevelup(from.canlevelup());
    }
    if (from._has_bit(29)) {
      set_maxpresbyternum(from.maxpresbyternum());
    }
    if (from._has_bit(30)) {
      set_glorylimit(from.glorylimit());
    }
    if (from._has_bit(31)) {
      set_levelmoney(from.levelmoney());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_stability(from.stability());
    }
    if (from._has_bit(33)) {
      set_reducestability(from.reducestability());
    }
    if (from._has_bit(34)) {
      set_extraredstonexp(from.extraredstonexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyPropery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyPropery::CopyFrom(const PBFamilyPropery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyPropery::Swap(PBFamilyPropery* other) {
  if (other != this) {
    std::swap(familyheaderid_, other->familyheaderid_);
    std::swap(familymoney_, other->familymoney_);
    std::swap(familylevel_, other->familylevel_);
    std::swap(familynotice_, other->familynotice_);
    std::swap(familyheadername_, other->familyheadername_);
    std::swap(membernum_, other->membernum_);
    std::swap(familyid_, other->familyid_);
    std::swap(npcid_, other->npcid_);
    std::swap(bidmoney_, other->bidmoney_);
    std::swap(bidtime_, other->bidtime_);
    std::swap(warnpc_, other->warnpc_);
    std::swap(warnpcstatus_, other->warnpcstatus_);
    std::swap(warrank_, other->warrank_);
    std::swap(warwinnum_, other->warwinnum_);
    std::swap(warlostnum_, other->warlostnum_);
    std::swap(familystarlevel_, other->familystarlevel_);
    std::swap(warexp_, other->warexp_);
    std::swap(warmaxexp_, other->warmaxexp_);
    std::swap(enemyfamilyname_, other->enemyfamilyname_);
    taskid_.Swap(&other->taskid_);
    std::swap(familyglory_, other->familyglory_);
    std::swap(familydevelop_, other->familydevelop_);
    std::swap(warstatus_, other->warstatus_);
    std::swap(challengestatus_, other->challengestatus_);
    std::swap(challengemoney_, other->challengemoney_);
    std::swap(challengestarted_, other->challengestarted_);
    std::swap(challengereceived_, other->challengereceived_);
    std::swap(maxmembernum_, other->maxmembernum_);
    std::swap(canlevelup_, other->canlevelup_);
    std::swap(maxpresbyternum_, other->maxpresbyternum_);
    std::swap(glorylimit_, other->glorylimit_);
    std::swap(levelmoney_, other->levelmoney_);
    std::swap(stability_, other->stability_);
    std::swap(reducestability_, other->reducestability_);
    std::swap(extraredstonexp_, other->extraredstonexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyPropery::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyPropery::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyPropery::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyPropery_reflection_;
}

// ===================================================================

const ::std::string PBFamilyMemberInfo::_default_corpstitle_;
#ifndef _MSC_VER
const int PBFamilyMemberInfo::kRoleIDFieldNumber;
const int PBFamilyMemberInfo::kFamilyPostFieldNumber;
const int PBFamilyMemberInfo::kFamilyContributeFieldNumber;
const int PBFamilyMemberInfo::kCorpsContributeFieldNumber;
const int PBFamilyMemberInfo::kCorpsPostFieldNumber;
const int PBFamilyMemberInfo::kCorpsTitleFieldNumber;
#endif  // !_MSC_VER

PBFamilyMemberInfo::PBFamilyMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyMemberInfo::InitAsDefaultInstance() {}

PBFamilyMemberInfo::PBFamilyMemberInfo(const PBFamilyMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  familypost_ = 0u;
  familycontribute_ = 0u;
  corpscontribute_ = 0u;
  corpspost_ = 0u;
  corpstitle_ = const_cast< ::std::string*>(&_default_corpstitle_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyMemberInfo::~PBFamilyMemberInfo() {
  SharedDtor();
}

void PBFamilyMemberInfo::SharedDtor() {
  if (corpstitle_ != &_default_corpstitle_) {
    delete corpstitle_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberInfo_descriptor_;
}

const PBFamilyMemberInfo& PBFamilyMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyMemberInfo* PBFamilyMemberInfo::default_instance_ = NULL;

PBFamilyMemberInfo* PBFamilyMemberInfo::New() const {
  return new PBFamilyMemberInfo;
}

void PBFamilyMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    familypost_ = 0u;
    familycontribute_ = 0u;
    corpscontribute_ = 0u;
    corpspost_ = 0u;
    if (_has_bit(5)) {
      if (corpstitle_ != &_default_corpstitle_) {
        corpstitle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_FamilyPost;
        break;
      }
      
      // optional uint32 FamilyPost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familypost_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FamilyContribute;
        break;
      }
      
      // optional uint32 FamilyContribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FamilyContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &familycontribute_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CorpsContribute;
        break;
      }
      
      // optional uint32 CorpsContribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsContribute:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpscontribute_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CorpsPost;
        break;
      }
      
      // optional uint32 CorpsPost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CorpsPost:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &corpspost_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_CorpsTitle;
        break;
      }
      
      // optional string CorpsTitle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsTitle:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_corpstitle()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyMemberInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 FamilyPost = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->familypost(), output);
  }
  
  // optional uint32 FamilyContribute = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->familycontribute(), output);
  }
  
  // optional uint32 CorpsContribute = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->corpscontribute(), output);
  }
  
  // optional uint32 CorpsPost = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->corpspost(), output);
  }
  
  // optional string CorpsTitle = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->corpstitle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 FamilyPost = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->familypost(), target);
  }
  
  // optional uint32 FamilyContribute = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->familycontribute(), target);
  }
  
  // optional uint32 CorpsContribute = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->corpscontribute(), target);
  }
  
  // optional uint32 CorpsPost = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->corpspost(), target);
  }
  
  // optional string CorpsTitle = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->corpstitle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 FamilyPost = 2;
    if (has_familypost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familypost());
    }
    
    // optional uint32 FamilyContribute = 3;
    if (has_familycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->familycontribute());
    }
    
    // optional uint32 CorpsContribute = 4;
    if (has_corpscontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpscontribute());
    }
    
    // optional uint32 CorpsPost = 5;
    if (has_corpspost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->corpspost());
    }
    
    // optional string CorpsTitle = 6;
    if (has_corpstitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->corpstitle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyMemberInfo::MergeFrom(const PBFamilyMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_familypost(from.familypost());
    }
    if (from._has_bit(2)) {
      set_familycontribute(from.familycontribute());
    }
    if (from._has_bit(3)) {
      set_corpscontribute(from.corpscontribute());
    }
    if (from._has_bit(4)) {
      set_corpspost(from.corpspost());
    }
    if (from._has_bit(5)) {
      set_corpstitle(from.corpstitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberInfo::CopyFrom(const PBFamilyMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberInfo::Swap(PBFamilyMemberInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(familypost_, other->familypost_);
    std::swap(familycontribute_, other->familycontribute_);
    std::swap(corpscontribute_, other->corpscontribute_);
    std::swap(corpspost_, other->corpspost_);
    std::swap(corpstitle_, other->corpstitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyMemberInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyMemberInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyMemberInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFamilyMemberInfoList::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

PBFamilyMemberInfoList::PBFamilyMemberInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFamilyMemberInfoList::InitAsDefaultInstance() {}

PBFamilyMemberInfoList::PBFamilyMemberInfoList(const PBFamilyMemberInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFamilyMemberInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFamilyMemberInfoList::~PBFamilyMemberInfoList() {
  SharedDtor();
}

void PBFamilyMemberInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFamilyMemberInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberInfoList_descriptor_;
}

const PBFamilyMemberInfoList& PBFamilyMemberInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBFamilyMemberInfoList* PBFamilyMemberInfoList::default_instance_ = NULL;

PBFamilyMemberInfoList* PBFamilyMemberInfoList::New() const {
  return new PBFamilyMemberInfoList;
}

void PBFamilyMemberInfoList::Clear() {
  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFamilyMemberInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBFamilyMemberInfo MemberInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MemberInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_memberinfo()));
        if (input->ExpectTag(10)) goto parse_MemberInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFamilyMemberInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFamilyMemberInfoList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBFamilyMemberInfo MemberInfo = 1;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->memberinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFamilyMemberInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFamilyMemberInfo MemberInfo = 1;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->memberinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFamilyMemberInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFamilyMemberInfo MemberInfo = 1;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->memberinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFamilyMemberInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFamilyMemberInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFamilyMemberInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFamilyMemberInfoList::MergeFrom(const PBFamilyMemberInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFamilyMemberInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberInfoList::CopyFrom(const PBFamilyMemberInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFamilyMemberInfoList::Swap(PBFamilyMemberInfoList* other) {
  if (other != this) {
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFamilyMemberInfoList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFamilyMemberInfoList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFamilyMemberInfoList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFamilyMemberInfoList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBGoodItemInfo::kItemIDFieldNumber;
const int PBGoodItemInfo::kItemNumFieldNumber;
const int PBGoodItemInfo::kComposeIDFieldNumber;
const int PBGoodItemInfo::kPurcharseTimeFieldNumber;
#endif  // !_MSC_VER

PBGoodItemInfo::PBGoodItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGoodItemInfo::InitAsDefaultInstance() {}

PBGoodItemInfo::PBGoodItemInfo(const PBGoodItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGoodItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  composeid_ = 0u;
  purcharsetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGoodItemInfo::~PBGoodItemInfo() {
  SharedDtor();
}

void PBGoodItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGoodItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGoodItemInfo_descriptor_;
}

const PBGoodItemInfo& PBGoodItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBGoodItemInfo* PBGoodItemInfo::default_instance_ = NULL;

PBGoodItemInfo* PBGoodItemInfo::New() const {
  return new PBGoodItemInfo;
}

void PBGoodItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
    composeid_ = 0u;
    purcharsetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGoodItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }
      
      // optional uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ComposeID;
        break;
      }
      
      // optional uint32 ComposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &composeid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PurcharseTime;
        break;
      }
      
      // optional uint32 PurcharseTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PurcharseTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &purcharsetime_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGoodItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGoodItemInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->composeid(), output);
  }
  
  // optional uint32 PurcharseTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->purcharsetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGoodItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 ItemNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 ComposeID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->composeid(), target);
  }
  
  // optional uint32 PurcharseTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->purcharsetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGoodItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 ComposeID = 3;
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->composeid());
    }
    
    // optional uint32 PurcharseTime = 4;
    if (has_purcharsetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->purcharsetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGoodItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGoodItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGoodItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGoodItemInfo::MergeFrom(const PBGoodItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_itemnum(from.itemnum());
    }
    if (from._has_bit(2)) {
      set_composeid(from.composeid());
    }
    if (from._has_bit(3)) {
      set_purcharsetime(from.purcharsetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGoodItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGoodItemInfo::CopyFrom(const PBGoodItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGoodItemInfo::Swap(PBGoodItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(composeid_, other->composeid_);
    std::swap(purcharsetime_, other->purcharsetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGoodItemInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGoodItemInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGoodItemInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGoodItemInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLeagueShopInfo::kShopIDFieldNumber;
const int PBLeagueShopInfo::kShopTypeFieldNumber;
const int PBLeagueShopInfo::kItemInfoFieldNumber;
#endif  // !_MSC_VER

PBLeagueShopInfo::PBLeagueShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLeagueShopInfo::InitAsDefaultInstance() {}

PBLeagueShopInfo::PBLeagueShopInfo(const PBLeagueShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLeagueShopInfo::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  shoptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLeagueShopInfo::~PBLeagueShopInfo() {
  SharedDtor();
}

void PBLeagueShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLeagueShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueShopInfo_descriptor_;
}

const PBLeagueShopInfo& PBLeagueShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBLeagueShopInfo* PBLeagueShopInfo::default_instance_ = NULL;

PBLeagueShopInfo* PBLeagueShopInfo::New() const {
  return new PBLeagueShopInfo;
}

void PBLeagueShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0u;
    shoptype_ = 0u;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLeagueShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ShopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shopid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ShopType;
        break;
      }
      
      // optional uint32 ShopType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShopType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shoptype_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_ItemInfo;
        break;
      }
      
      // repeated .PBGoodItemInfo ItemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_iteminfo()));
        if (input->ExpectTag(26)) goto parse_ItemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLeagueShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLeagueShopInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ShopID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->shopid(), output);
  }
  
  // optional uint32 ShopType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->shoptype(), output);
  }
  
  // repeated .PBGoodItemInfo ItemInfo = 3;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->iteminfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLeagueShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ShopID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->shopid(), target);
  }
  
  // optional uint32 ShopType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->shoptype(), target);
  }
  
  // repeated .PBGoodItemInfo ItemInfo = 3;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->iteminfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLeagueShopInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ShopID = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shopid());
    }
    
    // optional uint32 ShopType = 2;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shoptype());
    }
    
  }
  // repeated .PBGoodItemInfo ItemInfo = 3;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->iteminfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLeagueShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLeagueShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLeagueShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLeagueShopInfo::MergeFrom(const PBLeagueShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_shopid(from.shopid());
    }
    if (from._has_bit(1)) {
      set_shoptype(from.shoptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLeagueShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueShopInfo::CopyFrom(const PBLeagueShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueShopInfo::Swap(PBLeagueShopInfo* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(shoptype_, other->shoptype_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLeagueShopInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLeagueShopInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLeagueShopInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueShopInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLeagueShopsListInfo::kLeagueShopInfoFieldNumber;
#endif  // !_MSC_VER

PBLeagueShopsListInfo::PBLeagueShopsListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLeagueShopsListInfo::InitAsDefaultInstance() {}

PBLeagueShopsListInfo::PBLeagueShopsListInfo(const PBLeagueShopsListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLeagueShopsListInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLeagueShopsListInfo::~PBLeagueShopsListInfo() {
  SharedDtor();
}

void PBLeagueShopsListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLeagueShopsListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueShopsListInfo_descriptor_;
}

const PBLeagueShopsListInfo& PBLeagueShopsListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_familydbinfo_5fpb_2ehxx();  return *default_instance_;
}

PBLeagueShopsListInfo* PBLeagueShopsListInfo::default_instance_ = NULL;

PBLeagueShopsListInfo* PBLeagueShopsListInfo::New() const {
  return new PBLeagueShopsListInfo;
}

void PBLeagueShopsListInfo::Clear() {
  leagueshopinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLeagueShopsListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBLeagueShopInfo LeagueShopInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LeagueShopInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_leagueshopinfo()));
        if (input->ExpectTag(10)) goto parse_LeagueShopInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLeagueShopsListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLeagueShopsListInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBLeagueShopInfo LeagueShopInfo = 1;
  for (int i = 0; i < this->leagueshopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->leagueshopinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLeagueShopsListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBLeagueShopInfo LeagueShopInfo = 1;
  for (int i = 0; i < this->leagueshopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->leagueshopinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLeagueShopsListInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBLeagueShopInfo LeagueShopInfo = 1;
  total_size += 1 * this->leagueshopinfo_size();
  for (int i = 0; i < this->leagueshopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->leagueshopinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLeagueShopsListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLeagueShopsListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLeagueShopsListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLeagueShopsListInfo::MergeFrom(const PBLeagueShopsListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  leagueshopinfo_.MergeFrom(from.leagueshopinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLeagueShopsListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueShopsListInfo::CopyFrom(const PBLeagueShopsListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeagueShopsListInfo::Swap(PBLeagueShopsListInfo* other) {
  if (other != this) {
    leagueshopinfo_.Swap(&other->leagueshopinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLeagueShopsListInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLeagueShopsListInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLeagueShopsListInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLeagueShopsListInfo_reflection_;
}
