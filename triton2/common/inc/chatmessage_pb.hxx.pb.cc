// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "chatmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageChatSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChatSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChatSendCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChatSendCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRouterChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRouterChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChatResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChatResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAutoChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAutoChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CStopAutoChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CStopAutoChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMesssageClickBugleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMesssageClickBugleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCheckDirtyWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCheckDirtyWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageHasDirtyWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageHasDirtyWord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatMessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatmessage_5fpb_2ehxx() {
  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageChatSend_descriptor_ = file->message_type(0);
  static const int CMessageChatSend_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, pkgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, itemsequence_),
  };
  CMessageChatSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChatSend_descriptor_,
      CMessageChatSend::default_instance_,
      CMessageChatSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChatSend));
  CMessageChatSendCallBack_descriptor_ = file->message_type(1);
  static const int CMessageChatSendCallBack_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, repeatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, showintable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, npcshoutflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, flagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, desusertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, useflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, campid_),
  };
  CMessageChatSendCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChatSendCallBack_descriptor_,
      CMessageChatSendCallBack::default_instance_,
      CMessageChatSendCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatSendCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChatSendCallBack));
  CMessageRouterChatMsg_descriptor_ = file->message_type(2);
  static const int CMessageRouterChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouterChatMsg, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouterChatMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouterChatMsg, channel_),
  };
  CMessageRouterChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRouterChatMsg_descriptor_,
      CMessageRouterChatMsg::default_instance_,
      CMessageRouterChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouterChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRouterChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRouterChatMsg));
  CMessageChatResult_descriptor_ = file->message_type(3);
  static const int CMessageChatResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, chatres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, lefttime_),
  };
  CMessageChatResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChatResult_descriptor_,
      CMessageChatResult::default_instance_,
      CMessageChatResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChatResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChatResult));
  CAutoChatMessage_descriptor_ = file->message_type(4);
  static const int CAutoChatMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, time_),
  };
  CAutoChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAutoChatMessage_descriptor_,
      CAutoChatMessage::default_instance_,
      CAutoChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAutoChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAutoChatMessage));
  CStopAutoChatMessage_descriptor_ = file->message_type(5);
  static const int CStopAutoChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CStopAutoChatMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CStopAutoChatMessage, channel_),
  };
  CStopAutoChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CStopAutoChatMessage_descriptor_,
      CStopAutoChatMessage::default_instance_,
      CStopAutoChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CStopAutoChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CStopAutoChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CStopAutoChatMessage));
  CMessageUseItem_descriptor_ = file->message_type(6);
  static const int CMessageUseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseItem, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseItem, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseItem, itemindex_),
  };
  CMessageUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUseItem_descriptor_,
      CMessageUseItem::default_instance_,
      CMessageUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUseItem));
  CMesssageClickBugleItem_descriptor_ = file->message_type(7);
  static const int CMesssageClickBugleItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageClickBugleItem, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageClickBugleItem, locktype_),
  };
  CMesssageClickBugleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMesssageClickBugleItem_descriptor_,
      CMesssageClickBugleItem::default_instance_,
      CMesssageClickBugleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageClickBugleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMesssageClickBugleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMesssageClickBugleItem));
  CMessageCheckDirtyWord_descriptor_ = file->message_type(8);
  static const int CMessageCheckDirtyWord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckDirtyWord, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckDirtyWord, flag_),
  };
  CMessageCheckDirtyWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCheckDirtyWord_descriptor_,
      CMessageCheckDirtyWord::default_instance_,
      CMessageCheckDirtyWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckDirtyWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCheckDirtyWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCheckDirtyWord));
  CMessageHasDirtyWord_descriptor_ = file->message_type(9);
  static const int CMessageHasDirtyWord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHasDirtyWord, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHasDirtyWord, hasdirtyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHasDirtyWord, flag_),
  };
  CMessageHasDirtyWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageHasDirtyWord_descriptor_,
      CMessageHasDirtyWord::default_instance_,
      CMessageHasDirtyWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHasDirtyWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageHasDirtyWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageHasDirtyWord));
  ChatMessageID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChatSend_descriptor_, &CMessageChatSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChatSendCallBack_descriptor_, &CMessageChatSendCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRouterChatMsg_descriptor_, &CMessageRouterChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChatResult_descriptor_, &CMessageChatResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAutoChatMessage_descriptor_, &CAutoChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CStopAutoChatMessage_descriptor_, &CStopAutoChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUseItem_descriptor_, &CMessageUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMesssageClickBugleItem_descriptor_, &CMesssageClickBugleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCheckDirtyWord_descriptor_, &CMessageCheckDirtyWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageHasDirtyWord_descriptor_, &CMessageHasDirtyWord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx() {
  delete CMessageChatSend::default_instance_;
  delete CMessageChatSend_reflection_;
  delete CMessageChatSendCallBack::default_instance_;
  delete CMessageChatSendCallBack_reflection_;
  delete CMessageRouterChatMsg::default_instance_;
  delete CMessageRouterChatMsg_reflection_;
  delete CMessageChatResult::default_instance_;
  delete CMessageChatResult_reflection_;
  delete CAutoChatMessage::default_instance_;
  delete CAutoChatMessage_reflection_;
  delete CStopAutoChatMessage::default_instance_;
  delete CStopAutoChatMessage_reflection_;
  delete CMessageUseItem::default_instance_;
  delete CMessageUseItem_reflection_;
  delete CMesssageClickBugleItem::default_instance_;
  delete CMesssageClickBugleItem_reflection_;
  delete CMessageCheckDirtyWord::default_instance_;
  delete CMessageCheckDirtyWord_reflection_;
  delete CMessageHasDirtyWord::default_instance_;
  delete CMessageHasDirtyWord_reflection_;
}

void protobuf_AddDesc_chatmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  ::protobuf_AddDesc_property_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022chatmessage_pb.hxx\032\022coremessage_pb.hxx"
    "\032\017property_pb.hxx\"\221\001\n\020CMessageChatSend\022\013"
    "\n\003Msg\030\001 \001(\t\022\020\n\010PlayerID\030\002 \001(\t\022\022\n\nPlayerN"
    "ame\030\003 \001(\t\022\017\n\007Channel\030\004 \001(\r\022\020\n\010PkgIndex\030\005"
    " \003(\r\022\021\n\tItemIndex\030\006 \003(\r\022\024\n\014ItemSequence\030"
    "\007 \003(\r\"\245\002\n\030CMessageChatSendCallBack\022\037\n\006Ro"
    "uter\030\001 \001(\0132\017.CMessageRouter\022\023\n\013RepeatedN"
    "um\030\002 \001(\r\022\023\n\013ShowInTable\030\003 \001(\r\022\013\n\003Msg\030\004 \001"
    "(\t\022\017\n\007Channel\030\005 \001(\r\022\037\n\010ItemInfo\030\006 \003(\0132\r."
    "PBItemObject\022\021\n\tCountryID\030\007 \001(\r\022\024\n\014NpcSh"
    "outFlag\030\010 \001(\r\022\016\n\006FlagID\030\t \001(\r\022\020\n\010UserTyp"
    "e\030\n \001(\r\022\023\n\013DesUserType\030\013 \001(\r\022\017\n\007UseFlag\030"
    "\014 \001(\r\022\016\n\006CampID\030\r \001(\r\"V\n\025CMessageRouterC"
    "hatMsg\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022"
    "\013\n\003Msg\030\002 \001(\t\022\017\n\007Channel\030\003 \001(\r\"c\n\022CMessag"
    "eChatResult\022\017\n\007ChatRes\030\001 \001(\r\022\017\n\007Channel\030"
    "\002 \001(\r\022\013\n\003Msg\030\003 \001(\t\022\014\n\004Name\030\004 \001(\t\022\020\n\010Left"
    "Time\030\005 \001(\r\"[\n\020CAutoChatMessage\022\013\n\003Msg\030\001 "
    "\001(\t\022\017\n\007Channel\030\002 \001(\r\022\r\n\005Count\030\003 \001(\r\022\014\n\004N"
    "ame\030\004 \001(\t\022\014\n\004Time\030\005 \001(\r\"5\n\024CStopAutoChat"
    "Message\022\014\n\004Name\030\001 \001(\t\022\017\n\007Channel\030\002 \001(\r\"C"
    "\n\017CMessageUseItem\022\013\n\003Msg\030\001 \001(\t\022\020\n\010ItemIn"
    "fo\030\002 \001(\014\022\021\n\tItemIndex\030\003 \001(\r\">\n\027CMesssage"
    "ClickBugleItem\022\021\n\tItemIndex\030\001 \001(\r\022\020\n\010Loc"
    "kType\030\002 \001(\r\"3\n\026CMessageCheckDirtyWord\022\013\n"
    "\003Msg\030\001 \001(\t\022\014\n\004Flag\030\002 \001(\r\"G\n\024CMessageHasD"
    "irtyWord\022\013\n\003Msg\030\001 \001(\t\022\024\n\014HasDirtyWord\030\002 "
    "\001(\r\022\014\n\004Flag\030\003 \001(\r*\336\002\n\rChatMessageID\022\014\n\007C"
    "HATMSG\020\200(\022\031\n\024ID_C2S_CMESSCHATSEND\020\201(\022\034\n\027"
    "ID_S2C_CHATSENDCALLBACK\020\202(\022\035\n\030ID_S2C_ROU"
    "TERCHATMESSAGE\020\203(\022\032\n\025ID_S2C_CHATRES2CLIE"
    "NT\020\204(\022\"\n\035ID_C2S_NOTIFY_AUTOCHATMESSAGE\020\205"
    "(\022\037\n\032ID_C2S_NOTIFY_STOPAUTOCHAT\020\206(\022\036\n\031ID"
    "_C2S_NOTIFY_USECHATITEM\020\207(\022!\n\034ID_C2S_NOT"
    "IFY_CLICKBUGLEITEM\020\210(\022\"\n\035ID_C2S_REQUEST_"
    "CHECKDIRTYWORD\020\211(\022\037\n\032ID_S2C_NOTIFY_HASDI"
    "RTYWORD\020\212(B\002H\001", 1454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageChatSend::default_instance_ = new CMessageChatSend();
  CMessageChatSendCallBack::default_instance_ = new CMessageChatSendCallBack();
  CMessageRouterChatMsg::default_instance_ = new CMessageRouterChatMsg();
  CMessageChatResult::default_instance_ = new CMessageChatResult();
  CAutoChatMessage::default_instance_ = new CAutoChatMessage();
  CStopAutoChatMessage::default_instance_ = new CStopAutoChatMessage();
  CMessageUseItem::default_instance_ = new CMessageUseItem();
  CMesssageClickBugleItem::default_instance_ = new CMesssageClickBugleItem();
  CMessageCheckDirtyWord::default_instance_ = new CMessageCheckDirtyWord();
  CMessageHasDirtyWord::default_instance_ = new CMessageHasDirtyWord();
  CMessageChatSend::default_instance_->InitAsDefaultInstance();
  CMessageChatSendCallBack::default_instance_->InitAsDefaultInstance();
  CMessageRouterChatMsg::default_instance_->InitAsDefaultInstance();
  CMessageChatResult::default_instance_->InitAsDefaultInstance();
  CAutoChatMessage::default_instance_->InitAsDefaultInstance();
  CStopAutoChatMessage::default_instance_->InitAsDefaultInstance();
  CMessageUseItem::default_instance_->InitAsDefaultInstance();
  CMesssageClickBugleItem::default_instance_->InitAsDefaultInstance();
  CMessageCheckDirtyWord::default_instance_->InitAsDefaultInstance();
  CMessageHasDirtyWord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_chatmessage_5fpb_2ehxx() {
    protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_chatmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* ChatMessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessageID_descriptor_;
}
bool ChatMessageID_IsValid(int value) {
  switch(value) {
    case 5120:
    case 5121:
    case 5122:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5127:
    case 5128:
    case 5129:
    case 5130:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CMessageChatSend::_default_msg_;
const ::std::string CMessageChatSend::_default_playerid_;
const ::std::string CMessageChatSend::_default_playername_;
#ifndef _MSC_VER
const int CMessageChatSend::kMsgFieldNumber;
const int CMessageChatSend::kPlayerIDFieldNumber;
const int CMessageChatSend::kPlayerNameFieldNumber;
const int CMessageChatSend::kChannelFieldNumber;
const int CMessageChatSend::kPkgIndexFieldNumber;
const int CMessageChatSend::kItemIndexFieldNumber;
const int CMessageChatSend::kItemSequenceFieldNumber;
#endif  // !_MSC_VER

CMessageChatSend::CMessageChatSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChatSend::InitAsDefaultInstance() {}

CMessageChatSend::CMessageChatSend(const CMessageChatSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChatSend::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  playerid_ = const_cast< ::std::string*>(&_default_playerid_);
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChatSend::~CMessageChatSend() {
  SharedDtor();
}

void CMessageChatSend::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (playerid_ != &_default_playerid_) {
    delete playerid_;
  }
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChatSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatSend_descriptor_;
}

const CMessageChatSend& CMessageChatSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChatSend* CMessageChatSend::default_instance_ = NULL;

CMessageChatSend* CMessageChatSend::New() const {
  return new CMessageChatSend;
}

void CMessageChatSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    if (_has_bit(1)) {
      if (playerid_ != &_default_playerid_) {
        playerid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
    channel_ = 0u;
  }
  pkgindex_.Clear();
  itemindex_.Clear();
  itemsequence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChatSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(18)) goto parse_PlayerID;
        break;
      }
      
      // optional string PlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerID:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playerid()));
        if (input->ExpectTag(26)) goto parse_PlayerName;
        break;
      }
      
      // optional string PlayerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_playername()));
        if (input->ExpectTag(32)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PkgIndex;
        break;
      }
      
      // repeated uint32 PkgIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PkgIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_pkgindex(value);
        if (input->ExpectTag(40)) goto parse_PkgIndex;
        if (input->ExpectTag(48)) goto parse_ItemIndex;
        break;
      }
      
      // repeated uint32 ItemIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemindex(value);
        if (input->ExpectTag(48)) goto parse_ItemIndex;
        if (input->ExpectTag(56)) goto parse_ItemSequence;
        break;
      }
      
      // repeated uint32 ItemSequence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemSequence:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_itemsequence(value);
        if (input->ExpectTag(56)) goto parse_ItemSequence;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChatSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChatSend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional string PlayerID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->playerid(), output);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->playername(), output);
  }
  
  // optional uint32 Channel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->channel(), output);
  }
  
  // repeated uint32 PkgIndex = 5;
  for (int i = 0; i < this->pkgindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->pkgindex(i), output);
  }
  
  // repeated uint32 ItemIndex = 6;
  for (int i = 0; i < this->itemindex_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->itemindex(i), output);
  }
  
  // repeated uint32 ItemSequence = 7;
  for (int i = 0; i < this->itemsequence_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->itemsequence(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChatSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional string PlayerID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->playerid(), target);
  }
  
  // optional string PlayerName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->playername(), target);
  }
  
  // optional uint32 Channel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->channel(), target);
  }
  
  // repeated uint32 PkgIndex = 5;
  for (int i = 0; i < this->pkgindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->pkgindex(i), target);
  }
  
  // repeated uint32 ItemIndex = 6;
  for (int i = 0; i < this->itemindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->itemindex(i), target);
  }
  
  // repeated uint32 ItemSequence = 7;
  for (int i = 0; i < this->itemsequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->itemsequence(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChatSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional string PlayerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playerid());
    }
    
    // optional string PlayerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->playername());
    }
    
    // optional uint32 Channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
  }
  // repeated uint32 PkgIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pkgindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->pkgindex(i));
    }
    total_size += 1 * this->pkgindex_size() + data_size;
  }
  
  // repeated uint32 ItemIndex = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemindex(i));
    }
    total_size += 1 * this->itemindex_size() + data_size;
  }
  
  // repeated uint32 ItemSequence = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemsequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->itemsequence(i));
    }
    total_size += 1 * this->itemsequence_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChatSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChatSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChatSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChatSend::MergeFrom(const CMessageChatSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  pkgindex_.MergeFrom(from.pkgindex_);
  itemindex_.MergeFrom(from.itemindex_);
  itemsequence_.MergeFrom(from.itemsequence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(2)) {
      set_playername(from.playername());
    }
    if (from._has_bit(3)) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChatSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatSend::CopyFrom(const CMessageChatSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatSend::Swap(CMessageChatSend* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(channel_, other->channel_);
    pkgindex_.Swap(&other->pkgindex_);
    itemindex_.Swap(&other->itemindex_);
    itemsequence_.Swap(&other->itemsequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChatSend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChatSend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChatSend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatSend_reflection_;
}

// ===================================================================

const ::std::string CMessageChatSendCallBack::_default_msg_;
#ifndef _MSC_VER
const int CMessageChatSendCallBack::kRouterFieldNumber;
const int CMessageChatSendCallBack::kRepeatedNumFieldNumber;
const int CMessageChatSendCallBack::kShowInTableFieldNumber;
const int CMessageChatSendCallBack::kMsgFieldNumber;
const int CMessageChatSendCallBack::kChannelFieldNumber;
const int CMessageChatSendCallBack::kItemInfoFieldNumber;
const int CMessageChatSendCallBack::kCountryIDFieldNumber;
const int CMessageChatSendCallBack::kNpcShoutFlagFieldNumber;
const int CMessageChatSendCallBack::kFlagIDFieldNumber;
const int CMessageChatSendCallBack::kUserTypeFieldNumber;
const int CMessageChatSendCallBack::kDesUserTypeFieldNumber;
const int CMessageChatSendCallBack::kUseFlagFieldNumber;
const int CMessageChatSendCallBack::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageChatSendCallBack::CMessageChatSendCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChatSendCallBack::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageChatSendCallBack::CMessageChatSendCallBack(const CMessageChatSendCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChatSendCallBack::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  repeatednum_ = 0u;
  showintable_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  channel_ = 0u;
  countryid_ = 0u;
  npcshoutflag_ = 0u;
  flagid_ = 0u;
  usertype_ = 0u;
  desusertype_ = 0u;
  useflag_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChatSendCallBack::~CMessageChatSendCallBack() {
  SharedDtor();
}

void CMessageChatSendCallBack::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageChatSendCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatSendCallBack_descriptor_;
}

const CMessageChatSendCallBack& CMessageChatSendCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChatSendCallBack* CMessageChatSendCallBack::default_instance_ = NULL;

CMessageChatSendCallBack* CMessageChatSendCallBack::New() const {
  return new CMessageChatSendCallBack;
}

void CMessageChatSendCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    repeatednum_ = 0u;
    showintable_ = 0u;
    if (_has_bit(3)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    channel_ = 0u;
    countryid_ = 0u;
    npcshoutflag_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flagid_ = 0u;
    usertype_ = 0u;
    desusertype_ = 0u;
    useflag_ = 0u;
    campid_ = 0u;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChatSendCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_RepeatedNum;
        break;
      }
      
      // optional uint32 RepeatedNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeatedNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeatednum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ShowInTable;
        break;
      }
      
      // optional uint32 ShowInTable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowInTable:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showintable_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(40)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_ItemInfo;
        break;
      }
      
      // repeated .PBItemObject ItemInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_iteminfo()));
        if (input->ExpectTag(50)) goto parse_ItemInfo;
        if (input->ExpectTag(56)) goto parse_CountryID;
        break;
      }
      
      // optional uint32 CountryID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CountryID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &countryid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_NpcShoutFlag;
        break;
      }
      
      // optional uint32 NpcShoutFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcShoutFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcshoutflag_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_FlagID;
        break;
      }
      
      // optional uint32 FlagID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FlagID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flagid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_UserType;
        break;
      }
      
      // optional uint32 UserType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UserType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usertype_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_DesUserType;
        break;
      }
      
      // optional uint32 DesUserType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesUserType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desusertype_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_UseFlag;
        break;
      }
      
      // optional uint32 UseFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UseFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &useflag_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChatSendCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChatSendCallBack::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 RepeatedNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->repeatednum(), output);
  }
  
  // optional uint32 ShowInTable = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->showintable(), output);
  }
  
  // optional string Msg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->msg(), output);
  }
  
  // optional uint32 Channel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->channel(), output);
  }
  
  // repeated .PBItemObject ItemInfo = 6;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->iteminfo(i), output);
  }
  
  // optional uint32 CountryID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->countryid(), output);
  }
  
  // optional uint32 NpcShoutFlag = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->npcshoutflag(), output);
  }
  
  // optional uint32 FlagID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->flagid(), output);
  }
  
  // optional uint32 UserType = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->usertype(), output);
  }
  
  // optional uint32 DesUserType = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->desusertype(), output);
  }
  
  // optional uint32 UseFlag = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->useflag(), output);
  }
  
  // optional uint32 CampID = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChatSendCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 RepeatedNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->repeatednum(), target);
  }
  
  // optional uint32 ShowInTable = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->showintable(), target);
  }
  
  // optional string Msg = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->msg(), target);
  }
  
  // optional uint32 Channel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->channel(), target);
  }
  
  // repeated .PBItemObject ItemInfo = 6;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->iteminfo(i), target);
  }
  
  // optional uint32 CountryID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->countryid(), target);
  }
  
  // optional uint32 NpcShoutFlag = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->npcshoutflag(), target);
  }
  
  // optional uint32 FlagID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->flagid(), target);
  }
  
  // optional uint32 UserType = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->usertype(), target);
  }
  
  // optional uint32 DesUserType = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->desusertype(), target);
  }
  
  // optional uint32 UseFlag = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->useflag(), target);
  }
  
  // optional uint32 CampID = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChatSendCallBack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 RepeatedNum = 2;
    if (has_repeatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeatednum());
    }
    
    // optional uint32 ShowInTable = 3;
    if (has_showintable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showintable());
    }
    
    // optional string Msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 Channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
    // optional uint32 CountryID = 7;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->countryid());
    }
    
    // optional uint32 NpcShoutFlag = 8;
    if (has_npcshoutflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcshoutflag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 FlagID = 9;
    if (has_flagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flagid());
    }
    
    // optional uint32 UserType = 10;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usertype());
    }
    
    // optional uint32 DesUserType = 11;
    if (has_desusertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desusertype());
    }
    
    // optional uint32 UseFlag = 12;
    if (has_useflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->useflag());
    }
    
    // optional uint32 CampID = 13;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  // repeated .PBItemObject ItemInfo = 6;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->iteminfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChatSendCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChatSendCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChatSendCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChatSendCallBack::MergeFrom(const CMessageChatSendCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_repeatednum(from.repeatednum());
    }
    if (from._has_bit(2)) {
      set_showintable(from.showintable());
    }
    if (from._has_bit(3)) {
      set_msg(from.msg());
    }
    if (from._has_bit(4)) {
      set_channel(from.channel());
    }
    if (from._has_bit(6)) {
      set_countryid(from.countryid());
    }
    if (from._has_bit(7)) {
      set_npcshoutflag(from.npcshoutflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_flagid(from.flagid());
    }
    if (from._has_bit(9)) {
      set_usertype(from.usertype());
    }
    if (from._has_bit(10)) {
      set_desusertype(from.desusertype());
    }
    if (from._has_bit(11)) {
      set_useflag(from.useflag());
    }
    if (from._has_bit(12)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChatSendCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatSendCallBack::CopyFrom(const CMessageChatSendCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatSendCallBack::Swap(CMessageChatSendCallBack* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(repeatednum_, other->repeatednum_);
    std::swap(showintable_, other->showintable_);
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(countryid_, other->countryid_);
    std::swap(npcshoutflag_, other->npcshoutflag_);
    std::swap(flagid_, other->flagid_);
    std::swap(usertype_, other->usertype_);
    std::swap(desusertype_, other->desusertype_);
    std::swap(useflag_, other->useflag_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChatSendCallBack::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChatSendCallBack::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChatSendCallBack::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatSendCallBack_reflection_;
}

// ===================================================================

const ::std::string CMessageRouterChatMsg::_default_msg_;
#ifndef _MSC_VER
const int CMessageRouterChatMsg::kRouterFieldNumber;
const int CMessageRouterChatMsg::kMsgFieldNumber;
const int CMessageRouterChatMsg::kChannelFieldNumber;
#endif  // !_MSC_VER

CMessageRouterChatMsg::CMessageRouterChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRouterChatMsg::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageRouterChatMsg::CMessageRouterChatMsg(const CMessageRouterChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRouterChatMsg::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRouterChatMsg::~CMessageRouterChatMsg() {
  SharedDtor();
}

void CMessageRouterChatMsg::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageRouterChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouterChatMsg_descriptor_;
}

const CMessageRouterChatMsg& CMessageRouterChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRouterChatMsg* CMessageRouterChatMsg::default_instance_ = NULL;

CMessageRouterChatMsg* CMessageRouterChatMsg::New() const {
  return new CMessageRouterChatMsg;
}

void CMessageRouterChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRouterChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(24)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRouterChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRouterChatMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string Msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->msg(), output);
  }
  
  // optional uint32 Channel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRouterChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string Msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->msg(), target);
  }
  
  // optional uint32 Channel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRouterChatMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 Channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRouterChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRouterChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRouterChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRouterChatMsg::MergeFrom(const CMessageRouterChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
    if (from._has_bit(2)) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRouterChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRouterChatMsg::CopyFrom(const CMessageRouterChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRouterChatMsg::Swap(CMessageRouterChatMsg* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRouterChatMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRouterChatMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRouterChatMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRouterChatMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageChatResult::_default_msg_;
const ::std::string CMessageChatResult::_default_name_;
#ifndef _MSC_VER
const int CMessageChatResult::kChatResFieldNumber;
const int CMessageChatResult::kChannelFieldNumber;
const int CMessageChatResult::kMsgFieldNumber;
const int CMessageChatResult::kNameFieldNumber;
const int CMessageChatResult::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

CMessageChatResult::CMessageChatResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChatResult::InitAsDefaultInstance() {}

CMessageChatResult::CMessageChatResult(const CMessageChatResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChatResult::SharedCtor() {
  _cached_size_ = 0;
  chatres_ = 0u;
  channel_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  lefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChatResult::~CMessageChatResult() {
  SharedDtor();
}

void CMessageChatResult::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChatResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatResult_descriptor_;
}

const CMessageChatResult& CMessageChatResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChatResult* CMessageChatResult::default_instance_ = NULL;

CMessageChatResult* CMessageChatResult::New() const {
  return new CMessageChatResult;
}

void CMessageChatResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatres_ = 0u;
    channel_ = 0u;
    if (_has_bit(2)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    lefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChatResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ChatRes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chatres_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(40)) goto parse_LeftTime;
        break;
      }
      
      // optional uint32 LeftTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lefttime_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChatResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChatResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ChatRes = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->chatres(), output);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->channel(), output);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->msg(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  // optional uint32 LeftTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lefttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChatResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ChatRes = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->chatres(), target);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->channel(), target);
  }
  
  // optional string Msg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->msg(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  // optional uint32 LeftTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lefttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChatResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChatRes = 1;
    if (has_chatres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chatres());
    }
    
    // optional uint32 Channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
    // optional string Msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 LeftTime = 5;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lefttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChatResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChatResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChatResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChatResult::MergeFrom(const CMessageChatResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chatres(from.chatres());
    }
    if (from._has_bit(1)) {
      set_channel(from.channel());
    }
    if (from._has_bit(2)) {
      set_msg(from.msg());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChatResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatResult::CopyFrom(const CMessageChatResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChatResult::Swap(CMessageChatResult* other) {
  if (other != this) {
    std::swap(chatres_, other->chatres_);
    std::swap(channel_, other->channel_);
    std::swap(msg_, other->msg_);
    std::swap(name_, other->name_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChatResult::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChatResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChatResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChatResult_reflection_;
}

// ===================================================================

const ::std::string CAutoChatMessage::_default_msg_;
const ::std::string CAutoChatMessage::_default_name_;
#ifndef _MSC_VER
const int CAutoChatMessage::kMsgFieldNumber;
const int CAutoChatMessage::kChannelFieldNumber;
const int CAutoChatMessage::kCountFieldNumber;
const int CAutoChatMessage::kNameFieldNumber;
const int CAutoChatMessage::kTimeFieldNumber;
#endif  // !_MSC_VER

CAutoChatMessage::CAutoChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAutoChatMessage::InitAsDefaultInstance() {}

CAutoChatMessage::CAutoChatMessage(const CAutoChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAutoChatMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  channel_ = 0u;
  count_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAutoChatMessage::~CAutoChatMessage() {
  SharedDtor();
}

void CAutoChatMessage::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CAutoChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAutoChatMessage_descriptor_;
}

const CAutoChatMessage& CAutoChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CAutoChatMessage* CAutoChatMessage::default_instance_ = NULL;

CAutoChatMessage* CAutoChatMessage::New() const {
  return new CAutoChatMessage;
}

void CAutoChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    channel_ = 0u;
    count_ = 0u;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAutoChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(16)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }
      
      // optional string Name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAutoChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CAutoChatMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->channel(), output);
  }
  
  // optional uint32 Count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->count(), output);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->name(), output);
  }
  
  // optional uint32 Time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAutoChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->channel(), target);
  }
  
  // optional uint32 Count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional string Name = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->name(), target);
  }
  
  // optional uint32 Time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAutoChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 Channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
    // optional uint32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CAutoChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAutoChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAutoChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAutoChatMessage::MergeFrom(const CAutoChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_channel(from.channel());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAutoChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAutoChatMessage::CopyFrom(const CAutoChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAutoChatMessage::Swap(CAutoChatMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(count_, other->count_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CAutoChatMessage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CAutoChatMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CAutoChatMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CAutoChatMessage_reflection_;
}

// ===================================================================

const ::std::string CStopAutoChatMessage::_default_name_;
#ifndef _MSC_VER
const int CStopAutoChatMessage::kNameFieldNumber;
const int CStopAutoChatMessage::kChannelFieldNumber;
#endif  // !_MSC_VER

CStopAutoChatMessage::CStopAutoChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CStopAutoChatMessage::InitAsDefaultInstance() {}

CStopAutoChatMessage::CStopAutoChatMessage(const CStopAutoChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CStopAutoChatMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CStopAutoChatMessage::~CStopAutoChatMessage() {
  SharedDtor();
}

void CStopAutoChatMessage::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CStopAutoChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CStopAutoChatMessage_descriptor_;
}

const CStopAutoChatMessage& CStopAutoChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CStopAutoChatMessage* CStopAutoChatMessage::default_instance_ = NULL;

CStopAutoChatMessage* CStopAutoChatMessage::New() const {
  return new CStopAutoChatMessage;
}

void CStopAutoChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CStopAutoChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(16)) goto parse_Channel;
        break;
      }
      
      // optional uint32 Channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Channel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &channel_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CStopAutoChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CStopAutoChatMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->name(), output);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CStopAutoChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->name(), target);
  }
  
  // optional uint32 Channel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CStopAutoChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CStopAutoChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CStopAutoChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CStopAutoChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CStopAutoChatMessage::MergeFrom(const CStopAutoChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CStopAutoChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStopAutoChatMessage::CopyFrom(const CStopAutoChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStopAutoChatMessage::Swap(CStopAutoChatMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CStopAutoChatMessage::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CStopAutoChatMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CStopAutoChatMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CStopAutoChatMessage_reflection_;
}

// ===================================================================

const ::std::string CMessageUseItem::_default_msg_;
const ::std::string CMessageUseItem::_default_iteminfo_;
#ifndef _MSC_VER
const int CMessageUseItem::kMsgFieldNumber;
const int CMessageUseItem::kItemInfoFieldNumber;
const int CMessageUseItem::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CMessageUseItem::CMessageUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUseItem::InitAsDefaultInstance() {}

CMessageUseItem::CMessageUseItem(const CMessageUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUseItem::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  iteminfo_ = const_cast< ::std::string*>(&_default_iteminfo_);
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUseItem::~CMessageUseItem() {
  SharedDtor();
}

void CMessageUseItem::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (iteminfo_ != &_default_iteminfo_) {
    delete iteminfo_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseItem_descriptor_;
}

const CMessageUseItem& CMessageUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUseItem* CMessageUseItem::default_instance_ = NULL;

CMessageUseItem* CMessageUseItem::New() const {
  return new CMessageUseItem;
}

void CMessageUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    if (_has_bit(1)) {
      if (iteminfo_ != &_default_iteminfo_) {
        iteminfo_->clear();
      }
    }
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(18)) goto parse_ItemInfo;
        break;
      }
      
      // optional bytes ItemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_iteminfo()));
        if (input->ExpectTag(24)) goto parse_ItemIndex;
        break;
      }
      
      // optional uint32 ItemIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUseItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional bytes ItemInfo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->iteminfo(), output);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional bytes ItemInfo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->iteminfo(), target);
  }
  
  // optional uint32 ItemIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional bytes ItemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->iteminfo());
    }
    
    // optional uint32 ItemIndex = 3;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUseItem::MergeFrom(const CMessageUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_iteminfo(from.iteminfo());
    }
    if (from._has_bit(2)) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseItem::CopyFrom(const CMessageUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUseItem::Swap(CMessageUseItem* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUseItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUseItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUseItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUseItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMesssageClickBugleItem::kItemIndexFieldNumber;
const int CMesssageClickBugleItem::kLockTypeFieldNumber;
#endif  // !_MSC_VER

CMesssageClickBugleItem::CMesssageClickBugleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMesssageClickBugleItem::InitAsDefaultInstance() {}

CMesssageClickBugleItem::CMesssageClickBugleItem(const CMesssageClickBugleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMesssageClickBugleItem::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0u;
  locktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMesssageClickBugleItem::~CMesssageClickBugleItem() {
  SharedDtor();
}

void CMesssageClickBugleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMesssageClickBugleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMesssageClickBugleItem_descriptor_;
}

const CMesssageClickBugleItem& CMesssageClickBugleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMesssageClickBugleItem* CMesssageClickBugleItem::default_instance_ = NULL;

CMesssageClickBugleItem* CMesssageClickBugleItem::New() const {
  return new CMesssageClickBugleItem;
}

void CMesssageClickBugleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0u;
    locktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMesssageClickBugleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LockType;
        break;
      }
      
      // optional uint32 LockType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LockType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &locktype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMesssageClickBugleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMesssageClickBugleItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemindex(), output);
  }
  
  // optional uint32 LockType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->locktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMesssageClickBugleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemindex(), target);
  }
  
  // optional uint32 LockType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->locktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMesssageClickBugleItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 LockType = 2;
    if (has_locktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->locktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMesssageClickBugleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMesssageClickBugleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMesssageClickBugleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMesssageClickBugleItem::MergeFrom(const CMesssageClickBugleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemindex(from.itemindex());
    }
    if (from._has_bit(1)) {
      set_locktype(from.locktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMesssageClickBugleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageClickBugleItem::CopyFrom(const CMesssageClickBugleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMesssageClickBugleItem::Swap(CMesssageClickBugleItem* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(locktype_, other->locktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMesssageClickBugleItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMesssageClickBugleItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMesssageClickBugleItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMesssageClickBugleItem_reflection_;
}

// ===================================================================

const ::std::string CMessageCheckDirtyWord::_default_msg_;
#ifndef _MSC_VER
const int CMessageCheckDirtyWord::kMsgFieldNumber;
const int CMessageCheckDirtyWord::kFlagFieldNumber;
#endif  // !_MSC_VER

CMessageCheckDirtyWord::CMessageCheckDirtyWord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCheckDirtyWord::InitAsDefaultInstance() {}

CMessageCheckDirtyWord::CMessageCheckDirtyWord(const CMessageCheckDirtyWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCheckDirtyWord::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCheckDirtyWord::~CMessageCheckDirtyWord() {
  SharedDtor();
}

void CMessageCheckDirtyWord::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCheckDirtyWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckDirtyWord_descriptor_;
}

const CMessageCheckDirtyWord& CMessageCheckDirtyWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCheckDirtyWord* CMessageCheckDirtyWord::default_instance_ = NULL;

CMessageCheckDirtyWord* CMessageCheckDirtyWord::New() const {
  return new CMessageCheckDirtyWord;
}

void CMessageCheckDirtyWord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCheckDirtyWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(16)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCheckDirtyWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCheckDirtyWord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional uint32 Flag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCheckDirtyWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional uint32 Flag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCheckDirtyWord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 Flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCheckDirtyWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCheckDirtyWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCheckDirtyWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCheckDirtyWord::MergeFrom(const CMessageCheckDirtyWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCheckDirtyWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckDirtyWord::CopyFrom(const CMessageCheckDirtyWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCheckDirtyWord::Swap(CMessageCheckDirtyWord* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCheckDirtyWord::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCheckDirtyWord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCheckDirtyWord::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCheckDirtyWord_reflection_;
}

// ===================================================================

const ::std::string CMessageHasDirtyWord::_default_msg_;
#ifndef _MSC_VER
const int CMessageHasDirtyWord::kMsgFieldNumber;
const int CMessageHasDirtyWord::kHasDirtyWordFieldNumber;
const int CMessageHasDirtyWord::kFlagFieldNumber;
#endif  // !_MSC_VER

CMessageHasDirtyWord::CMessageHasDirtyWord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageHasDirtyWord::InitAsDefaultInstance() {}

CMessageHasDirtyWord::CMessageHasDirtyWord(const CMessageHasDirtyWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageHasDirtyWord::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  hasdirtyword_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageHasDirtyWord::~CMessageHasDirtyWord() {
  SharedDtor();
}

void CMessageHasDirtyWord::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageHasDirtyWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageHasDirtyWord_descriptor_;
}

const CMessageHasDirtyWord& CMessageHasDirtyWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageHasDirtyWord* CMessageHasDirtyWord::default_instance_ = NULL;

CMessageHasDirtyWord* CMessageHasDirtyWord::New() const {
  return new CMessageHasDirtyWord;
}

void CMessageHasDirtyWord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    hasdirtyword_ = 0u;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageHasDirtyWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(16)) goto parse_HasDirtyWord;
        break;
      }
      
      // optional uint32 HasDirtyWord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HasDirtyWord:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hasdirtyword_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Flag;
        break;
      }
      
      // optional uint32 Flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &flag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageHasDirtyWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageHasDirtyWord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional uint32 HasDirtyWord = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->hasdirtyword(), output);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageHasDirtyWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional uint32 HasDirtyWord = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->hasdirtyword(), target);
  }
  
  // optional uint32 Flag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageHasDirtyWord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 HasDirtyWord = 2;
    if (has_hasdirtyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hasdirtyword());
    }
    
    // optional uint32 Flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageHasDirtyWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageHasDirtyWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageHasDirtyWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageHasDirtyWord::MergeFrom(const CMessageHasDirtyWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_hasdirtyword(from.hasdirtyword());
    }
    if (from._has_bit(2)) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageHasDirtyWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHasDirtyWord::CopyFrom(const CMessageHasDirtyWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageHasDirtyWord::Swap(CMessageHasDirtyWord* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(hasdirtyword_, other->hasdirtyword_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageHasDirtyWord::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageHasDirtyWord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageHasDirtyWord::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageHasDirtyWord_reflection_;
}
