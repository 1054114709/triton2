// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_chatmessage_5fpb_2ehxx__INCLUDED
#define PROTOBUF_chatmessage_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "coremessage_pb.hxx.pb.h"
#include "property_pb.hxx.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();

class CMessageChatSend;
class CMessageChatSendCallBack;
class CMessageRouterChatMsg;
class CMessageChatResult;
class CAutoChatMessage;
class CStopAutoChatMessage;
class CMessageUseItem;
class CMesssageClickBugleItem;
class CMessageCheckDirtyWord;
class CMessageHasDirtyWord;

enum ChatMessageID {
  CHATMSG = 5120,
  ID_C2S_CMESSCHATSEND = 5121,
  ID_S2C_CHATSENDCALLBACK = 5122,
  ID_S2C_ROUTERCHATMESSAGE = 5123,
  ID_S2C_CHATRES2CLIENT = 5124,
  ID_C2S_NOTIFY_AUTOCHATMESSAGE = 5125,
  ID_C2S_NOTIFY_STOPAUTOCHAT = 5126,
  ID_C2S_NOTIFY_USECHATITEM = 5127,
  ID_C2S_NOTIFY_CLICKBUGLEITEM = 5128,
  ID_C2S_REQUEST_CHECKDIRTYWORD = 5129,
  ID_S2C_NOTIFY_HASDIRTYWORD = 5130
};
const ::google::protobuf::EnumDescriptor* ChatMessageID_descriptor();
bool ChatMessageID_IsValid(int value);
const ChatMessageID ChatMessageID_MIN = CHATMSG;
const ChatMessageID ChatMessageID_MAX = ID_S2C_NOTIFY_HASDIRTYWORD;

inline const ::std::string& ChatMessageID_Name(ChatMessageID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessageID_descriptor(), value);
}
inline bool ChatMessageID_Parse(
    const ::std::string& name, ChatMessageID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessageID>(
    ChatMessageID_descriptor(), name, value);
}
// ===================================================================

class CMessageChatSend : public ::google::protobuf::Message {
 public:
  CMessageChatSend();
  virtual ~CMessageChatSend();
  
  CMessageChatSend(const CMessageChatSend& from);
  
  inline CMessageChatSend& operator=(const CMessageChatSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChatSend& default_instance();
  void Swap(CMessageChatSend* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChatSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChatSend& from);
  void MergeFrom(const CMessageChatSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional string PlayerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  
  // optional string PlayerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  
  // optional uint32 Channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // repeated uint32 PkgIndex = 5;
  inline int pkgindex_size() const;
  inline void clear_pkgindex();
  static const int kPkgIndexFieldNumber = 5;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& pkgindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_pkgindex();
  inline ::google::protobuf::uint32 pkgindex(int index) const;
  inline void set_pkgindex(int index, ::google::protobuf::uint32 value);
  inline void add_pkgindex(::google::protobuf::uint32 value);
  
  // repeated uint32 ItemIndex = 6;
  inline int itemindex_size() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 6;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& itemindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_itemindex();
  inline ::google::protobuf::uint32 itemindex(int index) const;
  inline void set_itemindex(int index, ::google::protobuf::uint32 value);
  inline void add_itemindex(::google::protobuf::uint32 value);
  
  // repeated uint32 ItemSequence = 7;
  inline int itemsequence_size() const;
  inline void clear_itemsequence();
  static const int kItemSequenceFieldNumber = 7;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& itemsequence() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_itemsequence();
  inline ::google::protobuf::uint32 itemsequence(int index) const;
  inline void set_itemsequence(int index, ::google::protobuf::uint32 value);
  inline void add_itemsequence(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* playerid_;
  static const ::std::string _default_playerid_;
  ::std::string* playername_;
  static const ::std::string _default_playername_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pkgindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemsequence_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChatSend* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChatSendCallBack : public ::google::protobuf::Message {
 public:
  CMessageChatSendCallBack();
  virtual ~CMessageChatSendCallBack();
  
  CMessageChatSendCallBack(const CMessageChatSendCallBack& from);
  
  inline CMessageChatSendCallBack& operator=(const CMessageChatSendCallBack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChatSendCallBack& default_instance();
  void Swap(CMessageChatSendCallBack* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChatSendCallBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChatSendCallBack& from);
  void MergeFrom(const CMessageChatSendCallBack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMessageRouter Router = 1;
  inline bool has_router() const;
  inline void clear_router();
  static const int kRouterFieldNumber = 1;
  inline const ::CMessageRouter& router() const;
  inline ::CMessageRouter* mutable_router();
  
  // optional uint32 RepeatedNum = 2;
  inline bool has_repeatednum() const;
  inline void clear_repeatednum();
  static const int kRepeatedNumFieldNumber = 2;
  inline ::google::protobuf::uint32 repeatednum() const;
  inline void set_repeatednum(::google::protobuf::uint32 value);
  
  // optional uint32 ShowInTable = 3;
  inline bool has_showintable() const;
  inline void clear_showintable();
  static const int kShowInTableFieldNumber = 3;
  inline ::google::protobuf::uint32 showintable() const;
  inline void set_showintable(::google::protobuf::uint32 value);
  
  // optional string Msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional uint32 Channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // repeated .PBItemObject ItemInfo = 6;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 6;
  inline const ::google::protobuf::RepeatedPtrField< ::PBItemObject >& iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBItemObject >* mutable_iteminfo();
  inline const ::PBItemObject& iteminfo(int index) const;
  inline ::PBItemObject* mutable_iteminfo(int index);
  inline ::PBItemObject* add_iteminfo();
  
  // optional uint32 CountryID = 7;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 7;
  inline ::google::protobuf::uint32 countryid() const;
  inline void set_countryid(::google::protobuf::uint32 value);
  
  // optional uint32 NpcShoutFlag = 8;
  inline bool has_npcshoutflag() const;
  inline void clear_npcshoutflag();
  static const int kNpcShoutFlagFieldNumber = 8;
  inline ::google::protobuf::uint32 npcshoutflag() const;
  inline void set_npcshoutflag(::google::protobuf::uint32 value);
  
  // optional uint32 FlagID = 9;
  inline bool has_flagid() const;
  inline void clear_flagid();
  static const int kFlagIDFieldNumber = 9;
  inline ::google::protobuf::uint32 flagid() const;
  inline void set_flagid(::google::protobuf::uint32 value);
  
  // optional uint32 UserType = 10;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 usertype() const;
  inline void set_usertype(::google::protobuf::uint32 value);
  
  // optional uint32 DesUserType = 11;
  inline bool has_desusertype() const;
  inline void clear_desusertype();
  static const int kDesUserTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 desusertype() const;
  inline void set_desusertype(::google::protobuf::uint32 value);
  
  // optional uint32 UseFlag = 12;
  inline bool has_useflag() const;
  inline void clear_useflag();
  static const int kUseFlagFieldNumber = 12;
  inline ::google::protobuf::uint32 useflag() const;
  inline void set_useflag(::google::protobuf::uint32 value);
  
  // optional uint32 CampID = 13;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 13;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::CMessageRouter* router_;
  ::google::protobuf::uint32 repeatednum_;
  ::google::protobuf::uint32 showintable_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::RepeatedPtrField< ::PBItemObject > iteminfo_;
  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 npcshoutflag_;
  ::google::protobuf::uint32 flagid_;
  ::google::protobuf::uint32 usertype_;
  ::google::protobuf::uint32 desusertype_;
  ::google::protobuf::uint32 useflag_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChatSendCallBack* default_instance_;
};
// -------------------------------------------------------------------

class CMessageRouterChatMsg : public ::google::protobuf::Message {
 public:
  CMessageRouterChatMsg();
  virtual ~CMessageRouterChatMsg();
  
  CMessageRouterChatMsg(const CMessageRouterChatMsg& from);
  
  inline CMessageRouterChatMsg& operator=(const CMessageRouterChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageRouterChatMsg& default_instance();
  void Swap(CMessageRouterChatMsg* other);
  
  // implements Message ----------------------------------------------
  
  CMessageRouterChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageRouterChatMsg& from);
  void MergeFrom(const CMessageRouterChatMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CMessageRouter Router = 1;
  inline bool has_router() const;
  inline void clear_router();
  static const int kRouterFieldNumber = 1;
  inline const ::CMessageRouter& router() const;
  inline ::CMessageRouter* mutable_router();
  
  // optional string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional uint32 Channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::CMessageRouter* router_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageRouterChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMessageChatResult : public ::google::protobuf::Message {
 public:
  CMessageChatResult();
  virtual ~CMessageChatResult();
  
  CMessageChatResult(const CMessageChatResult& from);
  
  inline CMessageChatResult& operator=(const CMessageChatResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageChatResult& default_instance();
  void Swap(CMessageChatResult* other);
  
  // implements Message ----------------------------------------------
  
  CMessageChatResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageChatResult& from);
  void MergeFrom(const CMessageChatResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ChatRes = 1;
  inline bool has_chatres() const;
  inline void clear_chatres();
  static const int kChatResFieldNumber = 1;
  inline ::google::protobuf::uint32 chatres() const;
  inline void set_chatres(::google::protobuf::uint32 value);
  
  // optional uint32 Channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // optional string Msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional string Name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional uint32 LeftTime = 5;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 lefttime() const;
  inline void set_lefttime(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 chatres_;
  ::google::protobuf::uint32 channel_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 lefttime_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageChatResult* default_instance_;
};
// -------------------------------------------------------------------

class CAutoChatMessage : public ::google::protobuf::Message {
 public:
  CAutoChatMessage();
  virtual ~CAutoChatMessage();
  
  CAutoChatMessage(const CAutoChatMessage& from);
  
  inline CAutoChatMessage& operator=(const CAutoChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CAutoChatMessage& default_instance();
  void Swap(CAutoChatMessage* other);
  
  // implements Message ----------------------------------------------
  
  CAutoChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAutoChatMessage& from);
  void MergeFrom(const CAutoChatMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional uint32 Channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // optional uint32 Count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional string Name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional uint32 Time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 count_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CAutoChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class CStopAutoChatMessage : public ::google::protobuf::Message {
 public:
  CStopAutoChatMessage();
  virtual ~CStopAutoChatMessage();
  
  CStopAutoChatMessage(const CStopAutoChatMessage& from);
  
  inline CStopAutoChatMessage& operator=(const CStopAutoChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CStopAutoChatMessage& default_instance();
  void Swap(CStopAutoChatMessage* other);
  
  // implements Message ----------------------------------------------
  
  CStopAutoChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CStopAutoChatMessage& from);
  void MergeFrom(const CStopAutoChatMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional uint32 Channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CStopAutoChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUseItem : public ::google::protobuf::Message {
 public:
  CMessageUseItem();
  virtual ~CMessageUseItem();
  
  CMessageUseItem(const CMessageUseItem& from);
  
  inline CMessageUseItem& operator=(const CMessageUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUseItem& default_instance();
  void Swap(CMessageUseItem* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUseItem& from);
  void MergeFrom(const CMessageUseItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional bytes ItemInfo = 2;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 2;
  inline const ::std::string& iteminfo() const;
  inline void set_iteminfo(const ::std::string& value);
  inline void set_iteminfo(const char* value);
  inline void set_iteminfo(const void* value, size_t size);
  inline ::std::string* mutable_iteminfo();
  
  // optional uint32 ItemIndex = 3;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* iteminfo_;
  static const ::std::string _default_iteminfo_;
  ::google::protobuf::uint32 itemindex_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUseItem* default_instance_;
};
// -------------------------------------------------------------------

class CMesssageClickBugleItem : public ::google::protobuf::Message {
 public:
  CMesssageClickBugleItem();
  virtual ~CMesssageClickBugleItem();
  
  CMesssageClickBugleItem(const CMesssageClickBugleItem& from);
  
  inline CMesssageClickBugleItem& operator=(const CMesssageClickBugleItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMesssageClickBugleItem& default_instance();
  void Swap(CMesssageClickBugleItem* other);
  
  // implements Message ----------------------------------------------
  
  CMesssageClickBugleItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMesssageClickBugleItem& from);
  void MergeFrom(const CMesssageClickBugleItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ItemIndex = 1;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
  // optional uint32 LockType = 2;
  inline bool has_locktype() const;
  inline void clear_locktype();
  static const int kLockTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 locktype() const;
  inline void set_locktype(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 itemindex_;
  ::google::protobuf::uint32 locktype_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMesssageClickBugleItem* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCheckDirtyWord : public ::google::protobuf::Message {
 public:
  CMessageCheckDirtyWord();
  virtual ~CMessageCheckDirtyWord();
  
  CMessageCheckDirtyWord(const CMessageCheckDirtyWord& from);
  
  inline CMessageCheckDirtyWord& operator=(const CMessageCheckDirtyWord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCheckDirtyWord& default_instance();
  void Swap(CMessageCheckDirtyWord* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCheckDirtyWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCheckDirtyWord& from);
  void MergeFrom(const CMessageCheckDirtyWord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional uint32 Flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCheckDirtyWord* default_instance_;
};
// -------------------------------------------------------------------

class CMessageHasDirtyWord : public ::google::protobuf::Message {
 public:
  CMessageHasDirtyWord();
  virtual ~CMessageHasDirtyWord();
  
  CMessageHasDirtyWord(const CMessageHasDirtyWord& from);
  
  inline CMessageHasDirtyWord& operator=(const CMessageHasDirtyWord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageHasDirtyWord& default_instance();
  void Swap(CMessageHasDirtyWord* other);
  
  // implements Message ----------------------------------------------
  
  CMessageHasDirtyWord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageHasDirtyWord& from);
  void MergeFrom(const CMessageHasDirtyWord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional uint32 HasDirtyWord = 2;
  inline bool has_hasdirtyword() const;
  inline void clear_hasdirtyword();
  static const int kHasDirtyWordFieldNumber = 2;
  inline ::google::protobuf::uint32 hasdirtyword() const;
  inline void set_hasdirtyword(::google::protobuf::uint32 value);
  
  // optional uint32 Flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::google::protobuf::uint32 hasdirtyword_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_chatmessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_chatmessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageHasDirtyWord* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CMessageChatSend

// optional string Msg = 1;
inline bool CMessageChatSend::has_msg() const {
  return _has_bit(0);
}
inline void CMessageChatSend::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageChatSend::msg() const {
  return *msg_;
}
inline void CMessageChatSend::set_msg(const ::std::string& value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatSend::set_msg(const char* value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatSend::set_msg(const char* value, size_t size) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatSend::mutable_msg() {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional string PlayerID = 2;
inline bool CMessageChatSend::has_playerid() const {
  return _has_bit(1);
}
inline void CMessageChatSend::clear_playerid() {
  if (playerid_ != &_default_playerid_) {
    playerid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageChatSend::playerid() const {
  return *playerid_;
}
inline void CMessageChatSend::set_playerid(const ::std::string& value) {
  _set_bit(1);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void CMessageChatSend::set_playerid(const char* value) {
  _set_bit(1);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void CMessageChatSend::set_playerid(const char* value, size_t size) {
  _set_bit(1);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatSend::mutable_playerid() {
  _set_bit(1);
  if (playerid_ == &_default_playerid_) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}

// optional string PlayerName = 3;
inline bool CMessageChatSend::has_playername() const {
  return _has_bit(2);
}
inline void CMessageChatSend::clear_playername() {
  if (playername_ != &_default_playername_) {
    playername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageChatSend::playername() const {
  return *playername_;
}
inline void CMessageChatSend::set_playername(const ::std::string& value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageChatSend::set_playername(const char* value) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CMessageChatSend::set_playername(const char* value, size_t size) {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatSend::mutable_playername() {
  _set_bit(2);
  if (playername_ == &_default_playername_) {
    playername_ = new ::std::string;
  }
  return playername_;
}

// optional uint32 Channel = 4;
inline bool CMessageChatSend::has_channel() const {
  return _has_bit(3);
}
inline void CMessageChatSend::clear_channel() {
  channel_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageChatSend::channel() const {
  return channel_;
}
inline void CMessageChatSend::set_channel(::google::protobuf::uint32 value) {
  _set_bit(3);
  channel_ = value;
}

// repeated uint32 PkgIndex = 5;
inline int CMessageChatSend::pkgindex_size() const {
  return pkgindex_.size();
}
inline void CMessageChatSend::clear_pkgindex() {
  pkgindex_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageChatSend::pkgindex() const {
  return pkgindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageChatSend::mutable_pkgindex() {
  return &pkgindex_;
}
inline ::google::protobuf::uint32 CMessageChatSend::pkgindex(int index) const {
  return pkgindex_.Get(index);
}
inline void CMessageChatSend::set_pkgindex(int index, ::google::protobuf::uint32 value) {
  pkgindex_.Set(index, value);
}
inline void CMessageChatSend::add_pkgindex(::google::protobuf::uint32 value) {
  pkgindex_.Add(value);
}

// repeated uint32 ItemIndex = 6;
inline int CMessageChatSend::itemindex_size() const {
  return itemindex_.size();
}
inline void CMessageChatSend::clear_itemindex() {
  itemindex_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageChatSend::itemindex() const {
  return itemindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageChatSend::mutable_itemindex() {
  return &itemindex_;
}
inline ::google::protobuf::uint32 CMessageChatSend::itemindex(int index) const {
  return itemindex_.Get(index);
}
inline void CMessageChatSend::set_itemindex(int index, ::google::protobuf::uint32 value) {
  itemindex_.Set(index, value);
}
inline void CMessageChatSend::add_itemindex(::google::protobuf::uint32 value) {
  itemindex_.Add(value);
}

// repeated uint32 ItemSequence = 7;
inline int CMessageChatSend::itemsequence_size() const {
  return itemsequence_.size();
}
inline void CMessageChatSend::clear_itemsequence() {
  itemsequence_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageChatSend::itemsequence() const {
  return itemsequence_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageChatSend::mutable_itemsequence() {
  return &itemsequence_;
}
inline ::google::protobuf::uint32 CMessageChatSend::itemsequence(int index) const {
  return itemsequence_.Get(index);
}
inline void CMessageChatSend::set_itemsequence(int index, ::google::protobuf::uint32 value) {
  itemsequence_.Set(index, value);
}
inline void CMessageChatSend::add_itemsequence(::google::protobuf::uint32 value) {
  itemsequence_.Add(value);
}

// -------------------------------------------------------------------

// CMessageChatSendCallBack

// optional .CMessageRouter Router = 1;
inline bool CMessageChatSendCallBack::has_router() const {
  return _has_bit(0);
}
inline void CMessageChatSendCallBack::clear_router() {
  if (router_ != NULL) router_->::CMessageRouter::Clear();
  _clear_bit(0);
}
inline const ::CMessageRouter& CMessageChatSendCallBack::router() const {
  return router_ != NULL ? *router_ : *default_instance_->router_;
}
inline ::CMessageRouter* CMessageChatSendCallBack::mutable_router() {
  _set_bit(0);
  if (router_ == NULL) router_ = new ::CMessageRouter;
  return router_;
}

// optional uint32 RepeatedNum = 2;
inline bool CMessageChatSendCallBack::has_repeatednum() const {
  return _has_bit(1);
}
inline void CMessageChatSendCallBack::clear_repeatednum() {
  repeatednum_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::repeatednum() const {
  return repeatednum_;
}
inline void CMessageChatSendCallBack::set_repeatednum(::google::protobuf::uint32 value) {
  _set_bit(1);
  repeatednum_ = value;
}

// optional uint32 ShowInTable = 3;
inline bool CMessageChatSendCallBack::has_showintable() const {
  return _has_bit(2);
}
inline void CMessageChatSendCallBack::clear_showintable() {
  showintable_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::showintable() const {
  return showintable_;
}
inline void CMessageChatSendCallBack::set_showintable(::google::protobuf::uint32 value) {
  _set_bit(2);
  showintable_ = value;
}

// optional string Msg = 4;
inline bool CMessageChatSendCallBack::has_msg() const {
  return _has_bit(3);
}
inline void CMessageChatSendCallBack::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageChatSendCallBack::msg() const {
  return *msg_;
}
inline void CMessageChatSendCallBack::set_msg(const ::std::string& value) {
  _set_bit(3);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatSendCallBack::set_msg(const char* value) {
  _set_bit(3);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatSendCallBack::set_msg(const char* value, size_t size) {
  _set_bit(3);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatSendCallBack::mutable_msg() {
  _set_bit(3);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional uint32 Channel = 5;
inline bool CMessageChatSendCallBack::has_channel() const {
  return _has_bit(4);
}
inline void CMessageChatSendCallBack::clear_channel() {
  channel_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::channel() const {
  return channel_;
}
inline void CMessageChatSendCallBack::set_channel(::google::protobuf::uint32 value) {
  _set_bit(4);
  channel_ = value;
}

// repeated .PBItemObject ItemInfo = 6;
inline int CMessageChatSendCallBack::iteminfo_size() const {
  return iteminfo_.size();
}
inline void CMessageChatSendCallBack::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBItemObject >&
CMessageChatSendCallBack::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBItemObject >*
CMessageChatSendCallBack::mutable_iteminfo() {
  return &iteminfo_;
}
inline const ::PBItemObject& CMessageChatSendCallBack::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::PBItemObject* CMessageChatSendCallBack::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::PBItemObject* CMessageChatSendCallBack::add_iteminfo() {
  return iteminfo_.Add();
}

// optional uint32 CountryID = 7;
inline bool CMessageChatSendCallBack::has_countryid() const {
  return _has_bit(6);
}
inline void CMessageChatSendCallBack::clear_countryid() {
  countryid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::countryid() const {
  return countryid_;
}
inline void CMessageChatSendCallBack::set_countryid(::google::protobuf::uint32 value) {
  _set_bit(6);
  countryid_ = value;
}

// optional uint32 NpcShoutFlag = 8;
inline bool CMessageChatSendCallBack::has_npcshoutflag() const {
  return _has_bit(7);
}
inline void CMessageChatSendCallBack::clear_npcshoutflag() {
  npcshoutflag_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::npcshoutflag() const {
  return npcshoutflag_;
}
inline void CMessageChatSendCallBack::set_npcshoutflag(::google::protobuf::uint32 value) {
  _set_bit(7);
  npcshoutflag_ = value;
}

// optional uint32 FlagID = 9;
inline bool CMessageChatSendCallBack::has_flagid() const {
  return _has_bit(8);
}
inline void CMessageChatSendCallBack::clear_flagid() {
  flagid_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::flagid() const {
  return flagid_;
}
inline void CMessageChatSendCallBack::set_flagid(::google::protobuf::uint32 value) {
  _set_bit(8);
  flagid_ = value;
}

// optional uint32 UserType = 10;
inline bool CMessageChatSendCallBack::has_usertype() const {
  return _has_bit(9);
}
inline void CMessageChatSendCallBack::clear_usertype() {
  usertype_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::usertype() const {
  return usertype_;
}
inline void CMessageChatSendCallBack::set_usertype(::google::protobuf::uint32 value) {
  _set_bit(9);
  usertype_ = value;
}

// optional uint32 DesUserType = 11;
inline bool CMessageChatSendCallBack::has_desusertype() const {
  return _has_bit(10);
}
inline void CMessageChatSendCallBack::clear_desusertype() {
  desusertype_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::desusertype() const {
  return desusertype_;
}
inline void CMessageChatSendCallBack::set_desusertype(::google::protobuf::uint32 value) {
  _set_bit(10);
  desusertype_ = value;
}

// optional uint32 UseFlag = 12;
inline bool CMessageChatSendCallBack::has_useflag() const {
  return _has_bit(11);
}
inline void CMessageChatSendCallBack::clear_useflag() {
  useflag_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::useflag() const {
  return useflag_;
}
inline void CMessageChatSendCallBack::set_useflag(::google::protobuf::uint32 value) {
  _set_bit(11);
  useflag_ = value;
}

// optional uint32 CampID = 13;
inline bool CMessageChatSendCallBack::has_campid() const {
  return _has_bit(12);
}
inline void CMessageChatSendCallBack::clear_campid() {
  campid_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 CMessageChatSendCallBack::campid() const {
  return campid_;
}
inline void CMessageChatSendCallBack::set_campid(::google::protobuf::uint32 value) {
  _set_bit(12);
  campid_ = value;
}

// -------------------------------------------------------------------

// CMessageRouterChatMsg

// optional .CMessageRouter Router = 1;
inline bool CMessageRouterChatMsg::has_router() const {
  return _has_bit(0);
}
inline void CMessageRouterChatMsg::clear_router() {
  if (router_ != NULL) router_->::CMessageRouter::Clear();
  _clear_bit(0);
}
inline const ::CMessageRouter& CMessageRouterChatMsg::router() const {
  return router_ != NULL ? *router_ : *default_instance_->router_;
}
inline ::CMessageRouter* CMessageRouterChatMsg::mutable_router() {
  _set_bit(0);
  if (router_ == NULL) router_ = new ::CMessageRouter;
  return router_;
}

// optional string Msg = 2;
inline bool CMessageRouterChatMsg::has_msg() const {
  return _has_bit(1);
}
inline void CMessageRouterChatMsg::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageRouterChatMsg::msg() const {
  return *msg_;
}
inline void CMessageRouterChatMsg::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageRouterChatMsg::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageRouterChatMsg::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageRouterChatMsg::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional uint32 Channel = 3;
inline bool CMessageRouterChatMsg::has_channel() const {
  return _has_bit(2);
}
inline void CMessageRouterChatMsg::clear_channel() {
  channel_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageRouterChatMsg::channel() const {
  return channel_;
}
inline void CMessageRouterChatMsg::set_channel(::google::protobuf::uint32 value) {
  _set_bit(2);
  channel_ = value;
}

// -------------------------------------------------------------------

// CMessageChatResult

// optional uint32 ChatRes = 1;
inline bool CMessageChatResult::has_chatres() const {
  return _has_bit(0);
}
inline void CMessageChatResult::clear_chatres() {
  chatres_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageChatResult::chatres() const {
  return chatres_;
}
inline void CMessageChatResult::set_chatres(::google::protobuf::uint32 value) {
  _set_bit(0);
  chatres_ = value;
}

// optional uint32 Channel = 2;
inline bool CMessageChatResult::has_channel() const {
  return _has_bit(1);
}
inline void CMessageChatResult::clear_channel() {
  channel_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageChatResult::channel() const {
  return channel_;
}
inline void CMessageChatResult::set_channel(::google::protobuf::uint32 value) {
  _set_bit(1);
  channel_ = value;
}

// optional string Msg = 3;
inline bool CMessageChatResult::has_msg() const {
  return _has_bit(2);
}
inline void CMessageChatResult::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMessageChatResult::msg() const {
  return *msg_;
}
inline void CMessageChatResult::set_msg(const ::std::string& value) {
  _set_bit(2);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatResult::set_msg(const char* value) {
  _set_bit(2);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageChatResult::set_msg(const char* value, size_t size) {
  _set_bit(2);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatResult::mutable_msg() {
  _set_bit(2);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional string Name = 4;
inline bool CMessageChatResult::has_name() const {
  return _has_bit(3);
}
inline void CMessageChatResult::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageChatResult::name() const {
  return *name_;
}
inline void CMessageChatResult::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageChatResult::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMessageChatResult::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageChatResult::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional uint32 LeftTime = 5;
inline bool CMessageChatResult::has_lefttime() const {
  return _has_bit(4);
}
inline void CMessageChatResult::clear_lefttime() {
  lefttime_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageChatResult::lefttime() const {
  return lefttime_;
}
inline void CMessageChatResult::set_lefttime(::google::protobuf::uint32 value) {
  _set_bit(4);
  lefttime_ = value;
}

// -------------------------------------------------------------------

// CAutoChatMessage

// optional string Msg = 1;
inline bool CAutoChatMessage::has_msg() const {
  return _has_bit(0);
}
inline void CAutoChatMessage::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CAutoChatMessage::msg() const {
  return *msg_;
}
inline void CAutoChatMessage::set_msg(const ::std::string& value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CAutoChatMessage::set_msg(const char* value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CAutoChatMessage::set_msg(const char* value, size_t size) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAutoChatMessage::mutable_msg() {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional uint32 Channel = 2;
inline bool CAutoChatMessage::has_channel() const {
  return _has_bit(1);
}
inline void CAutoChatMessage::clear_channel() {
  channel_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CAutoChatMessage::channel() const {
  return channel_;
}
inline void CAutoChatMessage::set_channel(::google::protobuf::uint32 value) {
  _set_bit(1);
  channel_ = value;
}

// optional uint32 Count = 3;
inline bool CAutoChatMessage::has_count() const {
  return _has_bit(2);
}
inline void CAutoChatMessage::clear_count() {
  count_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CAutoChatMessage::count() const {
  return count_;
}
inline void CAutoChatMessage::set_count(::google::protobuf::uint32 value) {
  _set_bit(2);
  count_ = value;
}

// optional string Name = 4;
inline bool CAutoChatMessage::has_name() const {
  return _has_bit(3);
}
inline void CAutoChatMessage::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CAutoChatMessage::name() const {
  return *name_;
}
inline void CAutoChatMessage::set_name(const ::std::string& value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CAutoChatMessage::set_name(const char* value) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CAutoChatMessage::set_name(const char* value, size_t size) {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAutoChatMessage::mutable_name() {
  _set_bit(3);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional uint32 Time = 5;
inline bool CAutoChatMessage::has_time() const {
  return _has_bit(4);
}
inline void CAutoChatMessage::clear_time() {
  time_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CAutoChatMessage::time() const {
  return time_;
}
inline void CAutoChatMessage::set_time(::google::protobuf::uint32 value) {
  _set_bit(4);
  time_ = value;
}

// -------------------------------------------------------------------

// CStopAutoChatMessage

// optional string Name = 1;
inline bool CStopAutoChatMessage::has_name() const {
  return _has_bit(0);
}
inline void CStopAutoChatMessage::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CStopAutoChatMessage::name() const {
  return *name_;
}
inline void CStopAutoChatMessage::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CStopAutoChatMessage::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CStopAutoChatMessage::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CStopAutoChatMessage::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional uint32 Channel = 2;
inline bool CStopAutoChatMessage::has_channel() const {
  return _has_bit(1);
}
inline void CStopAutoChatMessage::clear_channel() {
  channel_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CStopAutoChatMessage::channel() const {
  return channel_;
}
inline void CStopAutoChatMessage::set_channel(::google::protobuf::uint32 value) {
  _set_bit(1);
  channel_ = value;
}

// -------------------------------------------------------------------

// CMessageUseItem

// optional string Msg = 1;
inline bool CMessageUseItem::has_msg() const {
  return _has_bit(0);
}
inline void CMessageUseItem::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageUseItem::msg() const {
  return *msg_;
}
inline void CMessageUseItem::set_msg(const ::std::string& value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageUseItem::set_msg(const char* value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageUseItem::set_msg(const char* value, size_t size) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageUseItem::mutable_msg() {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional bytes ItemInfo = 2;
inline bool CMessageUseItem::has_iteminfo() const {
  return _has_bit(1);
}
inline void CMessageUseItem::clear_iteminfo() {
  if (iteminfo_ != &_default_iteminfo_) {
    iteminfo_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMessageUseItem::iteminfo() const {
  return *iteminfo_;
}
inline void CMessageUseItem::set_iteminfo(const ::std::string& value) {
  _set_bit(1);
  if (iteminfo_ == &_default_iteminfo_) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
}
inline void CMessageUseItem::set_iteminfo(const char* value) {
  _set_bit(1);
  if (iteminfo_ == &_default_iteminfo_) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
}
inline void CMessageUseItem::set_iteminfo(const void* value, size_t size) {
  _set_bit(1);
  if (iteminfo_ == &_default_iteminfo_) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageUseItem::mutable_iteminfo() {
  _set_bit(1);
  if (iteminfo_ == &_default_iteminfo_) {
    iteminfo_ = new ::std::string;
  }
  return iteminfo_;
}

// optional uint32 ItemIndex = 3;
inline bool CMessageUseItem::has_itemindex() const {
  return _has_bit(2);
}
inline void CMessageUseItem::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageUseItem::itemindex() const {
  return itemindex_;
}
inline void CMessageUseItem::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(2);
  itemindex_ = value;
}

// -------------------------------------------------------------------

// CMesssageClickBugleItem

// optional uint32 ItemIndex = 1;
inline bool CMesssageClickBugleItem::has_itemindex() const {
  return _has_bit(0);
}
inline void CMesssageClickBugleItem::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMesssageClickBugleItem::itemindex() const {
  return itemindex_;
}
inline void CMesssageClickBugleItem::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(0);
  itemindex_ = value;
}

// optional uint32 LockType = 2;
inline bool CMesssageClickBugleItem::has_locktype() const {
  return _has_bit(1);
}
inline void CMesssageClickBugleItem::clear_locktype() {
  locktype_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMesssageClickBugleItem::locktype() const {
  return locktype_;
}
inline void CMesssageClickBugleItem::set_locktype(::google::protobuf::uint32 value) {
  _set_bit(1);
  locktype_ = value;
}

// -------------------------------------------------------------------

// CMessageCheckDirtyWord

// optional string Msg = 1;
inline bool CMessageCheckDirtyWord::has_msg() const {
  return _has_bit(0);
}
inline void CMessageCheckDirtyWord::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageCheckDirtyWord::msg() const {
  return *msg_;
}
inline void CMessageCheckDirtyWord::set_msg(const ::std::string& value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageCheckDirtyWord::set_msg(const char* value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageCheckDirtyWord::set_msg(const char* value, size_t size) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageCheckDirtyWord::mutable_msg() {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional uint32 Flag = 2;
inline bool CMessageCheckDirtyWord::has_flag() const {
  return _has_bit(1);
}
inline void CMessageCheckDirtyWord::clear_flag() {
  flag_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageCheckDirtyWord::flag() const {
  return flag_;
}
inline void CMessageCheckDirtyWord::set_flag(::google::protobuf::uint32 value) {
  _set_bit(1);
  flag_ = value;
}

// -------------------------------------------------------------------

// CMessageHasDirtyWord

// optional string Msg = 1;
inline bool CMessageHasDirtyWord::has_msg() const {
  return _has_bit(0);
}
inline void CMessageHasDirtyWord::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageHasDirtyWord::msg() const {
  return *msg_;
}
inline void CMessageHasDirtyWord::set_msg(const ::std::string& value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageHasDirtyWord::set_msg(const char* value) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMessageHasDirtyWord::set_msg(const char* value, size_t size) {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageHasDirtyWord::mutable_msg() {
  _set_bit(0);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional uint32 HasDirtyWord = 2;
inline bool CMessageHasDirtyWord::has_hasdirtyword() const {
  return _has_bit(1);
}
inline void CMessageHasDirtyWord::clear_hasdirtyword() {
  hasdirtyword_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageHasDirtyWord::hasdirtyword() const {
  return hasdirtyword_;
}
inline void CMessageHasDirtyWord::set_hasdirtyword(::google::protobuf::uint32 value) {
  _set_bit(1);
  hasdirtyword_ = value;
}

// optional uint32 Flag = 3;
inline bool CMessageHasDirtyWord::has_flag() const {
  return _has_bit(2);
}
inline void CMessageHasDirtyWord::clear_flag() {
  flag_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageHasDirtyWord::flag() const {
  return flag_;
}
inline void CMessageHasDirtyWord::set_flag(::google::protobuf::uint32 value) {
  _set_bit(2);
  flag_ = value;
}

#endif  // PROTOBUF_chatmessage_5fpb_2ehxx__INCLUDED
