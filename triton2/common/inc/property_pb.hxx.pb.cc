// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "property_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* PBPropertyValue1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPropertyValue1_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemObjEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemObjEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemObjMW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemObjMW_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTransform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTransform_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuffObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuffObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuffList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuffList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStateParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStateParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBShortcutList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBShortcutList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBKillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBKillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWizard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWizard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTelePostion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTelePostion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonsterRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonsterRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerMWInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerMWInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleCDGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleCDGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerCDGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerCDGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTelePosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTelePosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerPVPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerPVPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerStatisticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerStatisticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerTalentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerTalentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivityStateInf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivityStateInf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSpiritTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSpiritTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSpiritPositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSpiritPositionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSpiritInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSpiritInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoopTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoopTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStorageTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStorageTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TragedyStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TragedyStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleChairManTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleChairManTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleCompletedInf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleCompletedInf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBChairManTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBChairManTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRefreshTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRefreshTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPublishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPublishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendGlobalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendGlobalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEnemyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEnemyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetionMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetionMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetionRepe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetionRepe_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLifeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLifeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLifeSkillBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLifeSkillBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBExpTimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBExpTimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSinglePublishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSinglePublishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskPublishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskPublishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAwardRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAwardRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMatrixInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMatrixInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCharm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCharm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGuideData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGuideData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSingleTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSingleTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTreasureBowlItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTreasureBowlItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTreasureBowl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTreasureBowl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetDataToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetDataToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRepetDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRepetDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSwornMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSwornMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSwornTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSwornTeam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_property_5fpb_2ehxx() {
  protobuf_AddDesc_property_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "property_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  PBPropertyValue1_descriptor_ = file->message_type(0);
  static const int PBPropertyValue1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyValue1, initvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyValue1, deltavalue_),
  };
  PBPropertyValue1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPropertyValue1_descriptor_,
      PBPropertyValue1::default_instance_,
      PBPropertyValue1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyValue1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPropertyValue1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPropertyValue1));
  PBSkillBox_descriptor_ = file->message_type(1);
  static const int PBSkillBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, skillactnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, skillbookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, addedskillpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, skillinitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, activestate_),
  };
  PBSkillBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillBox_descriptor_,
      PBSkillBox::default_instance_,
      PBSkillBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillBox));
  PBItemObject_descriptor_ = file->message_type(2);
  static const int PBItemObject_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, invalidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, bindstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, objguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, usedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, itemcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, purchaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, groomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, bridename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, weddingtimelength_),
  };
  PBItemObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemObject_descriptor_,
      PBItemObject::default_instance_,
      PBItemObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemObject));
  PBItemContent_descriptor_ = file->message_type(3);
  static const int PBItemContent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, remainhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, remainmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, remainap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, telepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, itemmw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, itemequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, leftofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, exp_),
  };
  PBItemContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemContent_descriptor_,
      PBItemContent::default_instance_,
      PBItemContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemContent));
  PBItemObjEquip_descriptor_ = file->message_type(4);
  static const int PBItemObjEquip_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, slotproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, slotvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, slotnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, namelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, slotspell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, maxslotnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, judge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, resdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, resatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, deflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, attlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, magicstoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, magicstonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, bindfreetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, spouseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, spousename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, extratype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, bindtime_),
  };
  PBItemObjEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemObjEquip_descriptor_,
      PBItemObjEquip::default_instance_,
      PBItemObjEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemObjEquip));
  PBItemObjMW_descriptor_ = file->message_type(5);
  static const int PBItemObjMW_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, mwlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, curkeenpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, curcalmpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, curmagicpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, curbierpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, curimmortalpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, leftpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, probase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, proup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, proeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, prospir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, processval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, leftskillpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, incmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, inchp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, skillbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, addkeenpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, addcalmpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, addmagicpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, addbierpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, addimmortalpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, judgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, extrakeenpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, extracalmpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, extramagicpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, extrabierpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, extraimmortalpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, playeraddpointlastlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, leftpointslastlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, newaddpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, newaddskillpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, stepclearstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, lastaddedskillboxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, lastlevelprocessval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, nextactboxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, lastlevelnextactbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, qltempid_),
  };
  PBItemObjMW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemObjMW_descriptor_,
      PBItemObjMW::default_instance_,
      PBItemObjMW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemObjMW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemObjMW));
  PBItemBox_descriptor_ = file->message_type(6);
  static const int PBItemBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, releaseindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, itemobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, kitbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, kitlocked_),
  };
  PBItemBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemBox_descriptor_,
      PBItemBox::default_instance_,
      PBItemBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemBox));
  PBTransform_descriptor_ = file->message_type(7);
  static const int PBTransform_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, hastransform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, clothid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, npcid_),
  };
  PBTransform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTransform_descriptor_,
      PBTransform::default_instance_,
      PBTransform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTransform));
  PBBuffObject_descriptor_ = file->message_type(8);
  static const int PBBuffObject_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, persisttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, srcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, timertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, lastinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, parames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, parames2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, backdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, supercount_),
  };
  PBBuffObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuffObject_descriptor_,
      PBBuffObject::default_instance_,
      PBBuffObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuffObject));
  PBBuffList_descriptor_ = file->message_type(9);
  static const int PBBuffList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffList, buffnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffList, buffobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffList, transform_),
  };
  PBBuffList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuffList_descriptor_,
      PBBuffList::default_instance_,
      PBBuffList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuffList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuffList));
  PBStateParam_descriptor_ = file->message_type(10);
  static const int PBStateParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, statetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, parames1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, parames2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, instate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, buffadd_),
  };
  PBStateParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStateParam_descriptor_,
      PBStateParam::default_instance_,
      PBStateParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStateParam));
  PBStateList_descriptor_ = file->message_type(11);
  static const int PBStateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateList, stateparamobj_),
  };
  PBStateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStateList_descriptor_,
      PBStateList::default_instance_,
      PBStateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStateList));
  PBSkillObject_descriptor_ = file->message_type(12);
  static const int PBSkillObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, inclevel_),
  };
  PBSkillObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillObject_descriptor_,
      PBSkillObject::default_instance_,
      PBSkillObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillObject));
  PBSkillList_descriptor_ = file->message_type(13);
  static const int PBSkillList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillList, skillnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillList, skillobjects_),
  };
  PBSkillList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillList_descriptor_,
      PBSkillList::default_instance_,
      PBSkillList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillList));
  PBShortcut_descriptor_ = file->message_type(14);
  static const int PBShortcut_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, mindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, mlabeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, mlabelindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, param1_),
  };
  PBShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBShortcut_descriptor_,
      PBShortcut::default_instance_,
      PBShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBShortcut));
  PBShortcutList_descriptor_ = file->message_type(15);
  static const int PBShortcutList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcutList, shortcutnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcutList, shortcuts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcutList, helpstatus_),
  };
  PBShortcutList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBShortcutList_descriptor_,
      PBShortcutList::default_instance_,
      PBShortcutList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcutList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShortcutList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBShortcutList));
  PBKillData_descriptor_ = file->message_type(16);
  static const int PBKillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKillData, killid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKillData, killtime_),
  };
  PBKillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBKillData_descriptor_,
      PBKillData::default_instance_,
      PBKillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBKillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBKillData));
  PBWizard_descriptor_ = file->message_type(17);
  static const int PBWizard_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, wizardpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, wizardvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, wizardsubmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, wizardincrease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, trend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, combatfame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, repefame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, commonfame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, combattoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, repetoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, commontoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, combatall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, repeall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, commonall_),
  };
  PBWizard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWizard_descriptor_,
      PBWizard::default_instance_,
      PBWizard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWizard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWizard));
  PBTelePostion_descriptor_ = file->message_type(18);
  static const int PBTelePostion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, posy_),
  };
  PBTelePostion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTelePostion_descriptor_,
      PBTelePostion::default_instance_,
      PBTelePostion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePostion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTelePostion));
  PBPlayerBasicInfo_descriptor_ = file->message_type(19);
  static const int PBPlayerBasicInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, sta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, spr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, wis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, remainpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, prolevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, proexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, showfashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, showequip_),
  };
  PBPlayerBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerBasicInfo_descriptor_,
      PBPlayerBasicInfo::default_instance_,
      PBPlayerBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerBasicInfo));
  PBMonsterRecordInfo_descriptor_ = file->message_type(20);
  static const int PBMonsterRecordInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRecordInfo, activecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRecordInfo, owncard_),
  };
  PBMonsterRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMonsterRecordInfo_descriptor_,
      PBMonsterRecordInfo::default_instance_,
      PBMonsterRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMonsterRecordInfo));
  PBPlayerMWInfo_descriptor_ = file->message_type(21);
  static const int PBPlayerMWInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMWInfo, assignexpscl_),
  };
  PBPlayerMWInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerMWInfo_descriptor_,
      PBPlayerMWInfo::default_instance_,
      PBPlayerMWInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMWInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMWInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerMWInfo));
  PBSingleCDGroup_descriptor_ = file->message_type(22);
  static const int PBSingleCDGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleCDGroup, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleCDGroup, cdtime_),
  };
  PBSingleCDGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleCDGroup_descriptor_,
      PBSingleCDGroup::default_instance_,
      PBSingleCDGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleCDGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleCDGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleCDGroup));
  PBPlayerCDGroupInfo_descriptor_ = file->message_type(23);
  static const int PBPlayerCDGroupInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCDGroupInfo, cdgroup_),
  };
  PBPlayerCDGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerCDGroupInfo_descriptor_,
      PBPlayerCDGroupInfo::default_instance_,
      PBPlayerCDGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCDGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCDGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerCDGroupInfo));
  PBTelePosInfo_descriptor_ = file->message_type(24);
  static const int PBTelePosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePosInfo, townpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePosInfo, telelist_),
  };
  PBTelePosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTelePosInfo_descriptor_,
      PBTelePosInfo::default_instance_,
      PBTelePosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTelePosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTelePosInfo));
  PBPlayerPVPInfo_descriptor_ = file->message_type(25);
  static const int PBPlayerPVPInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, pkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, pkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, inhonperday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, outhonperday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, killnumin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, yellowstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, prisontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, totalprisontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, todayhonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, totalwar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, todaywar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, todayother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, freewar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, warserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, warkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, exphonor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, itemhonor_),
  };
  PBPlayerPVPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerPVPInfo_descriptor_,
      PBPlayerPVPInfo::default_instance_,
      PBPlayerPVPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPVPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerPVPInfo));
  PBPlayerStatisticInfo_descriptor_ = file->message_type(26);
  static const int PBPlayerStatisticInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, completedtasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, originrelivetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, killsamenationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, killogrenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, upfailnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, todaykillenemyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, todaykillenemyout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, dienum_),
  };
  PBPlayerStatisticInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerStatisticInfo_descriptor_,
      PBPlayerStatisticInfo::default_instance_,
      PBPlayerStatisticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStatisticInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerStatisticInfo));
  PBPlayerTalentInfo_descriptor_ = file->message_type(27);
  static const int PBPlayerTalentInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentstudy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, talentlevel_),
  };
  PBPlayerTalentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerTalentInfo_descriptor_,
      PBPlayerTalentInfo::default_instance_,
      PBPlayerTalentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTalentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerTalentInfo));
  PBPlayerTitleInfo_descriptor_ = file->message_type(28);
  static const int PBPlayerTitleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, currenttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, titlelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, titleskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, time_),
  };
  PBPlayerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerTitleInfo_descriptor_,
      PBPlayerTitleInfo::default_instance_,
      PBPlayerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerTitleInfo));
  PBActivityStateInf_descriptor_ = file->message_type(29);
  static const int PBActivityStateInf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, stateparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, chgtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, reallastedtime_),
  };
  PBActivityStateInf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivityStateInf_descriptor_,
      PBActivityStateInf::default_instance_,
      PBActivityStateInf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityStateInf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivityStateInf));
  PBPlayerActivityInfo_descriptor_ = file->message_type(30);
  static const int PBPlayerActivityInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, diploidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lastrefreshtimeofdiploid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, diploidstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, dailywelfaresta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lastdaylydispostime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lastweeklydispostime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lastfamilyapplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lasttimeleavefamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, lastjudgetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, savedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, vipflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, viptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, awardrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, investstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, weeklyawardrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, activitystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, hasvoted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, savetm_),
  };
  PBPlayerActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerActivityInfo_descriptor_,
      PBPlayerActivityInfo::default_instance_,
      PBPlayerActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerActivityInfo));
  PBPlayerClientInfo_descriptor_ = file->message_type(31);
  static const int PBPlayerClientInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClientInfo, shortcut_),
  };
  PBPlayerClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerClientInfo_descriptor_,
      PBPlayerClientInfo::default_instance_,
      PBPlayerClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerClientInfo));
  PBSpiritTypeInfo_descriptor_ = file->message_type(32);
  static const int PBSpiritTypeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritTypeInfo, slotopenstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritTypeInfo, castingitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritTypeInfo, bindstatus_),
  };
  PBSpiritTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSpiritTypeInfo_descriptor_,
      PBSpiritTypeInfo::default_instance_,
      PBSpiritTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSpiritTypeInfo));
  PBSpiritPositionInfo_descriptor_ = file->message_type(33);
  static const int PBSpiritPositionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritPositionInfo, spirittypeinfo_),
  };
  PBSpiritPositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSpiritPositionInfo_descriptor_,
      PBSpiritPositionInfo::default_instance_,
      PBSpiritPositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritPositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritPositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSpiritPositionInfo));
  PBSpiritInfo_descriptor_ = file->message_type(34);
  static const int PBSpiritInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritInfo, positioninfo_),
  };
  PBSpiritInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSpiritInfo_descriptor_,
      PBSpiritInfo::default_instance_,
      PBSpiritInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSpiritInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSpiritInfo));
  PBProperty_descriptor_ = file->message_type(35);
  static const int PBProperty_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, curmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, curap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, basicinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, baggage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, taskbaggage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, cdgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, monsterrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, telepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, pvpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, titleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, talentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, mwinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, lifeskillbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, statisticinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, clientinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, exptimeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, treasurebowl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, spiritinfo_),
  };
  PBProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBProperty_descriptor_,
      PBProperty::default_instance_,
      PBProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBProperty));
  PBTask_descriptor_ = file->message_type(36);
  static const int PBTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, taskprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, gametimeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, talkednpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, exflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, begintime_),
  };
  PBTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTask_descriptor_,
      PBTask::default_instance_,
      PBTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTask));
  PBLoopTaskData_descriptor_ = file->message_type(37);
  static const int PBLoopTaskData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, todaycompletedcircles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, lastcompletedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, looptasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, completedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, lastaborttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, cursubindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, weekloops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, daycompletedloopflag_),
  };
  PBLoopTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoopTaskData_descriptor_,
      PBLoopTaskData::default_instance_,
      PBLoopTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoopTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoopTaskData));
  PBStorageTaskData_descriptor_ = file->message_type(38);
  static const int PBStorageTaskData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, lastclicknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, curtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, gottasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, gotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, todaycompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, todayrmbrefresh_),
  };
  PBStorageTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStorageTaskData_descriptor_,
      PBStorageTaskData::default_instance_,
      PBStorageTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStorageTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStorageTaskData));
  TragedyStruct_descriptor_ = file->message_type(39);
  static const int TragedyStruct_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TragedyStruct, tragedyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TragedyStruct, nexttragedytask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TragedyStruct, tragedystate_),
  };
  TragedyStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TragedyStruct_descriptor_,
      TragedyStruct::default_instance_,
      TragedyStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TragedyStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TragedyStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TragedyStruct));
  PBTaskGroupData_descriptor_ = file->message_type(40);
  static const int PBTaskGroupData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, todaycompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, todayaccepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, weekcompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, weekaccepted_),
  };
  PBTaskGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskGroupData_descriptor_,
      PBTaskGroupData::default_instance_,
      PBTaskGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskGroupData));
  SingleChairManTask_descriptor_ = file->message_type(41);
  static const int SingleChairManTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChairManTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChairManTask, taskstate_),
  };
  SingleChairManTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleChairManTask_descriptor_,
      SingleChairManTask::default_instance_,
      SingleChairManTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChairManTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleChairManTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleChairManTask));
  SingleCompletedInf_descriptor_ = file->message_type(42);
  static const int SingleCompletedInf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCompletedInf, chairmanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCompletedInf, completednum_),
  };
  SingleCompletedInf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleCompletedInf_descriptor_,
      SingleCompletedInf::default_instance_,
      SingleCompletedInf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCompletedInf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCompletedInf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleCompletedInf));
  PBChairManTaskData_descriptor_ = file->message_type(43);
  static const int PBChairManTaskData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, chairmanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, completednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, acceptednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, completed_),
  };
  PBChairManTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBChairManTaskData_descriptor_,
      PBChairManTaskData::default_instance_,
      PBChairManTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBChairManTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBChairManTaskData));
  PBRefreshTaskData_descriptor_ = file->message_type(44);
  static const int PBRefreshTaskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRefreshTaskData, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRefreshTaskData, taskcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRefreshTaskData, resultflag_),
  };
  PBRefreshTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRefreshTaskData_descriptor_,
      PBRefreshTaskData::default_instance_,
      PBRefreshTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRefreshTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRefreshTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRefreshTaskData));
  GroupPublishData_descriptor_ = file->message_type(45);
  static const int GroupPublishData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPublishData, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPublishData, taskstate_),
  };
  GroupPublishData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPublishData_descriptor_,
      GroupPublishData::default_instance_,
      GroupPublishData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPublishData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPublishData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPublishData));
  PBTaskList_descriptor_ = file->message_type(46);
  static const int PBTaskList_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, tasknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, tasklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, looptaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, eventparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, eventtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, storagetaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, tragedytaskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, completedtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, failedtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, taskgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, completedtragedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, lastlogoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, redirectfailtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, chairmantask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, todayteamloopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, refreshdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, repeatetask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, corpspublish_),
  };
  PBTaskList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskList_descriptor_,
      PBTaskList::default_instance_,
      PBTaskList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskList));
  PBMapData_descriptor_ = file->message_type(47);
  static const int PBMapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, alivestatus_),
  };
  PBMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMapData_descriptor_,
      PBMapData::default_instance_,
      PBMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMapData));
  PBFriendGlobalData_descriptor_ = file->message_type(48);
  static const int PBFriendGlobalData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGlobalData, groupnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGlobalData, isrefuseall_),
  };
  PBFriendGlobalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendGlobalData_descriptor_,
      PBFriendGlobalData::default_instance_,
      PBFriendGlobalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGlobalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGlobalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendGlobalData));
  PBFriendData_descriptor_ = file->message_type(49);
  static const int PBFriendData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, rel2me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, blesstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, intimacydegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, lasttimeallonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, dailyintimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, lastupdatetime_),
  };
  PBFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendData_descriptor_,
      PBFriendData::default_instance_,
      PBFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendData));
  PBEnemyData_descriptor_ = file->message_type(50);
  static const int PBEnemyData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, bekilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, killtime_),
  };
  PBEnemyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEnemyData_descriptor_,
      PBEnemyData::default_instance_,
      PBEnemyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnemyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEnemyData));
  PBFriend_descriptor_ = file->message_type(51);
  static const int PBFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, latestcontact_),
  };
  PBFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriend_descriptor_,
      PBFriend::default_instance_,
      PBFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriend));
  PBRepetionData_descriptor_ = file->message_type(52);
  static const int PBRepetionData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionData, data_),
  };
  PBRepetionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetionData_descriptor_,
      PBRepetionData::default_instance_,
      PBRepetionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetionData));
  PBRepetionMap_descriptor_ = file->message_type(53);
  static const int PBRepetionMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, weekcount_),
  };
  PBRepetionMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetionMap_descriptor_,
      PBRepetionMap::default_instance_,
      PBRepetionMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetionMap));
  PBRepetionRepe_descriptor_ = file->message_type(54);
  static const int PBRepetionRepe_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, repetiondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, repeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, weekcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, signup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, intotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, diecount_),
  };
  PBRepetionRepe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetionRepe_descriptor_,
      PBRepetionRepe::default_instance_,
      PBRepetionRepe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetionRepe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetionRepe));
  PBRepetion_descriptor_ = file->message_type(55);
  static const int PBRepetion_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, backlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, backmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, backposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, backposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, mapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, repeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, inrepetion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, repetionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, checkresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, answercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, globalscenestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, globalwarofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, repetionkey_),
  };
  PBRepetion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetion_descriptor_,
      PBRepetion::default_instance_,
      PBRepetion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetion));
  PBMember_descriptor_ = file->message_type(56);
  static const int PBMember_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, lineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, commstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, repetionmapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, order_),
  };
  PBMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMember_descriptor_,
      PBMember::default_instance_,
      PBMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMember));
  PBTeamMsg_descriptor_ = file->message_type(57);
  static const int PBTeamMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, rootstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, substyle_),
  };
  PBTeamMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamMsg_descriptor_,
      PBTeamMsg::default_instance_,
      PBTeamMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamMsg));
  PBStallInfo_descriptor_ = file->message_type(58);
  static const int PBStallInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, stallname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, adcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, hasflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, stalltype_),
  };
  PBStallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStallInfo_descriptor_,
      PBStallInfo::default_instance_,
      PBStallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStallInfo));
  PBLifeSkill_descriptor_ = file->message_type(59);
  static const int PBLifeSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, lifeskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, lifeskilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, specializeddegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, lifeskillstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, lifeskillkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, composeid_),
  };
  PBLifeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLifeSkill_descriptor_,
      PBLifeSkill::default_instance_,
      PBLifeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLifeSkill));
  PBLifeSkillBox_descriptor_ = file->message_type(60);
  static const int PBLifeSkillBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillBox, lifeskill_),
  };
  PBLifeSkillBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLifeSkillBox_descriptor_,
      PBLifeSkillBox::default_instance_,
      PBLifeSkillBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLifeSkillBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLifeSkillBox));
  PBExpTimeInfo_descriptor_ = file->message_type(61);
  static const int PBExpTimeInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, offlinetimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, effectiveofftimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, lasteffectivetimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, lastcalculatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, blackpillstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, blackpillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, expfromoffline_),
  };
  PBExpTimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBExpTimeInfo_descriptor_,
      PBExpTimeInfo::default_instance_,
      PBExpTimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpTimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBExpTimeInfo));
  PBSinglePublishInfo_descriptor_ = file->message_type(62);
  static const int PBSinglePublishInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePublishInfo, pubnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePublishInfo, recvawards_),
  };
  PBSinglePublishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSinglePublishInfo_descriptor_,
      PBSinglePublishInfo::default_instance_,
      PBSinglePublishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePublishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePublishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSinglePublishInfo));
  PBTaskPublishInfo_descriptor_ = file->message_type(63);
  static const int PBTaskPublishInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, singledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, todaypublishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, oncepublishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, totalfinishnum_),
  };
  PBTaskPublishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskPublishInfo_descriptor_,
      PBTaskPublishInfo::default_instance_,
      PBTaskPublishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskPublishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskPublishInfo));
  CMessagePlayerInfo_descriptor_ = file->message_type(64);
  static const int CMessagePlayerInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, metier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, nationality_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, face_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, is_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, online_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, save_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, save_bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, bounded_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, check_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, silver_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, storage_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, storage_bounded_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_status_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_familyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, charged_silver_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, consumed_silver_yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_protecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_vip_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_vip_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_marriageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_changecamp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, role_swornid_),
  };
  CMessagePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerInfo_descriptor_,
      CMessagePlayerInfo::default_instance_,
      CMessagePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerInfo));
  PBAwardRecord_descriptor_ = file->message_type(65);
  static const int PBAwardRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardRecord, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardRecord, times_),
  };
  PBAwardRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAwardRecord_descriptor_,
      PBAwardRecord::default_instance_,
      PBAwardRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAwardRecord));
  PBMatrixInfo_descriptor_ = file->message_type(66);
  static const int PBMatrixInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, slavevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, slavepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, masterpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, slavetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, mastertotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, masterpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, mastertimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, slavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, mastergive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, beginnernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, formalnum_),
  };
  PBMatrixInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMatrixInfo_descriptor_,
      PBMatrixInfo::default_instance_,
      PBMatrixInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatrixInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMatrixInfo));
  PBCharm_descriptor_ = file->message_type(67);
  static const int PBCharm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharm, charmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharm, weekinccharm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharm, lastweekinccharm_),
  };
  PBCharm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCharm_descriptor_,
      PBCharm::default_instance_,
      PBCharm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCharm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCharm));
  PBGuideData_descriptor_ = file->message_type(68);
  static const int PBGuideData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, levelbak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, expbak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, honorbak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, achivebak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, killbak_),
  };
  PBGuideData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGuideData_descriptor_,
      PBGuideData::default_instance_,
      PBGuideData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuideData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGuideData));
  PBSingleTimes_descriptor_ = file->message_type(69);
  static const int PBSingleTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleTimes, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleTimes, value_),
  };
  PBSingleTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSingleTimes_descriptor_,
      PBSingleTimes::default_instance_,
      PBSingleTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSingleTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSingleTimes));
  PBTimes_descriptor_ = file->message_type(70);
  static const int PBTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTimes, timesinfo_),
  };
  PBTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTimes_descriptor_,
      PBTimes::default_instance_,
      PBTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTimes));
  PBTreasureBowlItem_descriptor_ = file->message_type(71);
  static const int PBTreasureBowlItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowlItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowlItem, usedtimes_),
  };
  PBTreasureBowlItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTreasureBowlItem_descriptor_,
      PBTreasureBowlItem::default_instance_,
      PBTreasureBowlItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowlItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowlItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTreasureBowlItem));
  PBTreasureBowl_descriptor_ = file->message_type(72);
  static const int PBTreasureBowl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowl, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowl, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowl, treasurebowlitem_),
  };
  PBTreasureBowl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTreasureBowl_descriptor_,
      PBTreasureBowl::default_instance_,
      PBTreasureBowl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureBowl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTreasureBowl));
  PBRepetDataToClient_descriptor_ = file->message_type(73);
  static const int PBRepetDataToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataToClient, repetindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataToClient, repetdata_),
  };
  PBRepetDataToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetDataToClient_descriptor_,
      PBRepetDataToClient::default_instance_,
      PBRepetDataToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetDataToClient));
  PBRepetDataList_descriptor_ = file->message_type(74);
  static const int PBRepetDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataList, repetdatatoclient_),
  };
  PBRepetDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRepetDataList_descriptor_,
      PBRepetDataList::default_instance_,
      PBRepetDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRepetDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRepetDataList));
  PBSwornMember_descriptor_ = file->message_type(75);
  static const int PBSwornMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornMember, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornMember, teampos_),
  };
  PBSwornMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSwornMember_descriptor_,
      PBSwornMember::default_instance_,
      PBSwornMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSwornMember));
  PBSwornTeam_descriptor_ = file->message_type(76);
  static const int PBSwornTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornTeam, swornmember_),
  };
  PBSwornTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSwornTeam_descriptor_,
      PBSwornTeam::default_instance_,
      PBSwornTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSwornTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSwornTeam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_property_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPropertyValue1_descriptor_, &PBPropertyValue1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillBox_descriptor_, &PBSkillBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemObject_descriptor_, &PBItemObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemContent_descriptor_, &PBItemContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemObjEquip_descriptor_, &PBItemObjEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemObjMW_descriptor_, &PBItemObjMW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemBox_descriptor_, &PBItemBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTransform_descriptor_, &PBTransform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuffObject_descriptor_, &PBBuffObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuffList_descriptor_, &PBBuffList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStateParam_descriptor_, &PBStateParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStateList_descriptor_, &PBStateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillObject_descriptor_, &PBSkillObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillList_descriptor_, &PBSkillList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBShortcut_descriptor_, &PBShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBShortcutList_descriptor_, &PBShortcutList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBKillData_descriptor_, &PBKillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWizard_descriptor_, &PBWizard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTelePostion_descriptor_, &PBTelePostion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerBasicInfo_descriptor_, &PBPlayerBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMonsterRecordInfo_descriptor_, &PBMonsterRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerMWInfo_descriptor_, &PBPlayerMWInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleCDGroup_descriptor_, &PBSingleCDGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerCDGroupInfo_descriptor_, &PBPlayerCDGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTelePosInfo_descriptor_, &PBTelePosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerPVPInfo_descriptor_, &PBPlayerPVPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerStatisticInfo_descriptor_, &PBPlayerStatisticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerTalentInfo_descriptor_, &PBPlayerTalentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerTitleInfo_descriptor_, &PBPlayerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivityStateInf_descriptor_, &PBActivityStateInf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerActivityInfo_descriptor_, &PBPlayerActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerClientInfo_descriptor_, &PBPlayerClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSpiritTypeInfo_descriptor_, &PBSpiritTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSpiritPositionInfo_descriptor_, &PBSpiritPositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSpiritInfo_descriptor_, &PBSpiritInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBProperty_descriptor_, &PBProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTask_descriptor_, &PBTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoopTaskData_descriptor_, &PBLoopTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStorageTaskData_descriptor_, &PBStorageTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TragedyStruct_descriptor_, &TragedyStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskGroupData_descriptor_, &PBTaskGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleChairManTask_descriptor_, &SingleChairManTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleCompletedInf_descriptor_, &SingleCompletedInf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBChairManTaskData_descriptor_, &PBChairManTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRefreshTaskData_descriptor_, &PBRefreshTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPublishData_descriptor_, &GroupPublishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskList_descriptor_, &PBTaskList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMapData_descriptor_, &PBMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendGlobalData_descriptor_, &PBFriendGlobalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendData_descriptor_, &PBFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEnemyData_descriptor_, &PBEnemyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriend_descriptor_, &PBFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetionData_descriptor_, &PBRepetionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetionMap_descriptor_, &PBRepetionMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetionRepe_descriptor_, &PBRepetionRepe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetion_descriptor_, &PBRepetion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMember_descriptor_, &PBMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamMsg_descriptor_, &PBTeamMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStallInfo_descriptor_, &PBStallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLifeSkill_descriptor_, &PBLifeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLifeSkillBox_descriptor_, &PBLifeSkillBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBExpTimeInfo_descriptor_, &PBExpTimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSinglePublishInfo_descriptor_, &PBSinglePublishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskPublishInfo_descriptor_, &PBTaskPublishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerInfo_descriptor_, &CMessagePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAwardRecord_descriptor_, &PBAwardRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMatrixInfo_descriptor_, &PBMatrixInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCharm_descriptor_, &PBCharm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGuideData_descriptor_, &PBGuideData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSingleTimes_descriptor_, &PBSingleTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTimes_descriptor_, &PBTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTreasureBowlItem_descriptor_, &PBTreasureBowlItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTreasureBowl_descriptor_, &PBTreasureBowl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetDataToClient_descriptor_, &PBRepetDataToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRepetDataList_descriptor_, &PBRepetDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSwornMember_descriptor_, &PBSwornMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSwornTeam_descriptor_, &PBSwornTeam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_property_5fpb_2ehxx() {
  delete PBPropertyValue1::default_instance_;
  delete PBPropertyValue1_reflection_;
  delete PBSkillBox::default_instance_;
  delete PBSkillBox_reflection_;
  delete PBItemObject::default_instance_;
  delete PBItemObject_reflection_;
  delete PBItemContent::default_instance_;
  delete PBItemContent_reflection_;
  delete PBItemObjEquip::default_instance_;
  delete PBItemObjEquip_reflection_;
  delete PBItemObjMW::default_instance_;
  delete PBItemObjMW_reflection_;
  delete PBItemBox::default_instance_;
  delete PBItemBox_reflection_;
  delete PBTransform::default_instance_;
  delete PBTransform_reflection_;
  delete PBBuffObject::default_instance_;
  delete PBBuffObject_reflection_;
  delete PBBuffList::default_instance_;
  delete PBBuffList_reflection_;
  delete PBStateParam::default_instance_;
  delete PBStateParam_reflection_;
  delete PBStateList::default_instance_;
  delete PBStateList_reflection_;
  delete PBSkillObject::default_instance_;
  delete PBSkillObject_reflection_;
  delete PBSkillList::default_instance_;
  delete PBSkillList_reflection_;
  delete PBShortcut::default_instance_;
  delete PBShortcut_reflection_;
  delete PBShortcutList::default_instance_;
  delete PBShortcutList_reflection_;
  delete PBKillData::default_instance_;
  delete PBKillData_reflection_;
  delete PBWizard::default_instance_;
  delete PBWizard_reflection_;
  delete PBTelePostion::default_instance_;
  delete PBTelePostion_reflection_;
  delete PBPlayerBasicInfo::default_instance_;
  delete PBPlayerBasicInfo_reflection_;
  delete PBMonsterRecordInfo::default_instance_;
  delete PBMonsterRecordInfo_reflection_;
  delete PBPlayerMWInfo::default_instance_;
  delete PBPlayerMWInfo_reflection_;
  delete PBSingleCDGroup::default_instance_;
  delete PBSingleCDGroup_reflection_;
  delete PBPlayerCDGroupInfo::default_instance_;
  delete PBPlayerCDGroupInfo_reflection_;
  delete PBTelePosInfo::default_instance_;
  delete PBTelePosInfo_reflection_;
  delete PBPlayerPVPInfo::default_instance_;
  delete PBPlayerPVPInfo_reflection_;
  delete PBPlayerStatisticInfo::default_instance_;
  delete PBPlayerStatisticInfo_reflection_;
  delete PBPlayerTalentInfo::default_instance_;
  delete PBPlayerTalentInfo_reflection_;
  delete PBPlayerTitleInfo::default_instance_;
  delete PBPlayerTitleInfo_reflection_;
  delete PBActivityStateInf::default_instance_;
  delete PBActivityStateInf_reflection_;
  delete PBPlayerActivityInfo::default_instance_;
  delete PBPlayerActivityInfo_reflection_;
  delete PBPlayerClientInfo::default_instance_;
  delete PBPlayerClientInfo_reflection_;
  delete PBSpiritTypeInfo::default_instance_;
  delete PBSpiritTypeInfo_reflection_;
  delete PBSpiritPositionInfo::default_instance_;
  delete PBSpiritPositionInfo_reflection_;
  delete PBSpiritInfo::default_instance_;
  delete PBSpiritInfo_reflection_;
  delete PBProperty::default_instance_;
  delete PBProperty_reflection_;
  delete PBTask::default_instance_;
  delete PBTask_reflection_;
  delete PBLoopTaskData::default_instance_;
  delete PBLoopTaskData_reflection_;
  delete PBStorageTaskData::default_instance_;
  delete PBStorageTaskData_reflection_;
  delete TragedyStruct::default_instance_;
  delete TragedyStruct_reflection_;
  delete PBTaskGroupData::default_instance_;
  delete PBTaskGroupData_reflection_;
  delete SingleChairManTask::default_instance_;
  delete SingleChairManTask_reflection_;
  delete SingleCompletedInf::default_instance_;
  delete SingleCompletedInf_reflection_;
  delete PBChairManTaskData::default_instance_;
  delete PBChairManTaskData_reflection_;
  delete PBRefreshTaskData::default_instance_;
  delete PBRefreshTaskData_reflection_;
  delete GroupPublishData::default_instance_;
  delete GroupPublishData_reflection_;
  delete PBTaskList::default_instance_;
  delete PBTaskList_reflection_;
  delete PBMapData::default_instance_;
  delete PBMapData_reflection_;
  delete PBFriendGlobalData::default_instance_;
  delete PBFriendGlobalData_reflection_;
  delete PBFriendData::default_instance_;
  delete PBFriendData_reflection_;
  delete PBEnemyData::default_instance_;
  delete PBEnemyData_reflection_;
  delete PBFriend::default_instance_;
  delete PBFriend_reflection_;
  delete PBRepetionData::default_instance_;
  delete PBRepetionData_reflection_;
  delete PBRepetionMap::default_instance_;
  delete PBRepetionMap_reflection_;
  delete PBRepetionRepe::default_instance_;
  delete PBRepetionRepe_reflection_;
  delete PBRepetion::default_instance_;
  delete PBRepetion_reflection_;
  delete PBMember::default_instance_;
  delete PBMember_reflection_;
  delete PBTeamMsg::default_instance_;
  delete PBTeamMsg_reflection_;
  delete PBStallInfo::default_instance_;
  delete PBStallInfo_reflection_;
  delete PBLifeSkill::default_instance_;
  delete PBLifeSkill_reflection_;
  delete PBLifeSkillBox::default_instance_;
  delete PBLifeSkillBox_reflection_;
  delete PBExpTimeInfo::default_instance_;
  delete PBExpTimeInfo_reflection_;
  delete PBSinglePublishInfo::default_instance_;
  delete PBSinglePublishInfo_reflection_;
  delete PBTaskPublishInfo::default_instance_;
  delete PBTaskPublishInfo_reflection_;
  delete CMessagePlayerInfo::default_instance_;
  delete CMessagePlayerInfo_reflection_;
  delete PBAwardRecord::default_instance_;
  delete PBAwardRecord_reflection_;
  delete PBMatrixInfo::default_instance_;
  delete PBMatrixInfo_reflection_;
  delete PBCharm::default_instance_;
  delete PBCharm_reflection_;
  delete PBGuideData::default_instance_;
  delete PBGuideData_reflection_;
  delete PBSingleTimes::default_instance_;
  delete PBSingleTimes_reflection_;
  delete PBTimes::default_instance_;
  delete PBTimes_reflection_;
  delete PBTreasureBowlItem::default_instance_;
  delete PBTreasureBowlItem_reflection_;
  delete PBTreasureBowl::default_instance_;
  delete PBTreasureBowl_reflection_;
  delete PBRepetDataToClient::default_instance_;
  delete PBRepetDataToClient_reflection_;
  delete PBRepetDataList::default_instance_;
  delete PBRepetDataList_reflection_;
  delete PBSwornMember::default_instance_;
  delete PBSwornMember_reflection_;
  delete PBSwornTeam::default_instance_;
  delete PBSwornTeam_reflection_;
}

void protobuf_AddDesc_property_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017property_pb.hxx\"9\n\020PBPropertyValue1\022\021\n"
    "\tInitValue\030\001 \001(\r\022\022\n\nDeltaValue\030\002 \001(\r\"\215\001\n"
    "\nPBSkillBox\022\016\n\006Skills\030\001 \001(\r\022\023\n\013SkillActN"
    "um\030\002 \001(\r\022\023\n\013SkillBookID\030\003 \001(\r\022\030\n\020AddedSk"
    "illPoints\030\004 \001(\r\022\026\n\016SkillInitLevel\030\005 \001(\r\022"
    "\023\n\013ActiveState\030\006 \001(\r\"\253\002\n\014PBItemObject\022\016\n"
    "\006ItemID\030\001 \001(\r\022\016\n\006Number\030\002 \001(\r\022\r\n\005Index\030\003"
    " \001(\r\022\023\n\013InvalidTime\030\004 \001(\r\022\020\n\010Cooldown\030\005 "
    "\001(\r\022\022\n\nBindStatus\030\006 \001(\r\022\017\n\007ObjGuID\030\007 \001(\004"
    "\022\021\n\tUsedTimes\030\010 \001(\r\022#\n\013ItemContent\030\t \001(\013"
    "2\016.PBItemContent\022\022\n\nPurchaseID\030\n \001(\004\022\021\n\t"
    "GroomName\030\013 \001(\t\022\021\n\tBrideName\030\014 \001(\t\022\023\n\013We"
    "ddingTime\030\r \001(\r\022\031\n\021WeddingTimeLength\030\016 \001"
    "(\r\"\337\001\n\rPBItemContent\022\020\n\010RemainHP\030\001 \001(\r\022\020"
    "\n\010RemainMP\030\002 \001(\r\022\020\n\010RemainAP\030\003 \001(\r\022\017\n\007Cu"
    "rrent\030\004 \001(\r\022\037\n\007TelePos\030\005 \003(\0132\016.PBTelePos"
    "tion\022\034\n\006ItemMW\030\006 \001(\0132\014.PBItemObjMW\022\"\n\tIt"
    "emEquip\030\007 \001(\0132\017.PBItemObjEquip\022\027\n\017LeftOf"
    "fLineTime\030\010 \001(\r\022\013\n\003Exp\030\t \001(\r\"\302\003\n\016PBItemO"
    "bjEquip\022\024\n\014SlotProperty\030\001 \003(\r\022\020\n\010Propert"
    "y\030\002 \003(\r\022\021\n\tSlotValue\030\003 \003(\r\022\r\n\005Level\030\004 \001("
    "\r\022\022\n\nSlotNumber\030\005 \001(\r\022\022\n\nNameLength\030\006 \001("
    "\r\022\014\n\004Name\030\007 \001(\t\022\021\n\tSlotSpell\030\010 \001(\r\022\022\n\nDu"
    "rability\030\t \001(\r\022(\n\rMaxSlotNumber\030\n \001(\0132\021."
    "PBPropertyValue1\022\r\n\005Judge\030\013 \003(\r\022\016\n\006ResDe"
    "f\030\014 \001(\r\022\016\n\006ResAtt\030\r \001(\r\022\020\n\010DefLevel\030\016 \001("
    "\r\022\020\n\010AttLevel\030\017 \001(\r\022\024\n\014MagicStoneID\030\020 \001("
    "\r\022\025\n\rMagicStoneNum\030\021 \001(\r\022\024\n\014BindFreeTime"
    "\030\022 \001(\r\022\020\n\010SpouseID\030\023 \001(\r\022\022\n\nSpouseName\030\024"
    " \001(\t\022\021\n\tExtraType\030\025 \001(\r\022\020\n\010BindTime\030\026 \001("
    "\r\"\322\007\n\013PBItemObjMW\022\017\n\007MWLevel\030\001 \001(\r\022\013\n\003Ex"
    "p\030\002 \001(\004\022\n\n\002Mp\030\003 \001(\r\022\n\n\002Hp\030\004 \001(\r\022\025\n\rCurKe"
    "enpoints\030\005 \001(\r\022\025\n\rCurCalmpoints\030\006 \001(\r\022\026\n"
    "\016CurMagicpoints\030\007 \001(\r\022\025\n\rCurBierpoints\030\010"
    " \001(\r\022\031\n\021CurImmortalpoints\030\t \001(\r\022\022\n\nLeftP"
    "oints\030\n \001(\r\022\017\n\007ProBase\030\013 \001(\r\022\r\n\005ProUp\030\014 "
    "\001(\r\022\016\n\006ProEff\030\r \001(\r\022\017\n\007ProSpir\030\016 \001(\r\022\022\n\n"
    "ProcessVal\030\017 \001(\r\022\027\n\017LeftSkillPoints\030\020 \001("
    "\r\022\r\n\005MaxMp\030\021 \001(\r\022\r\n\005MaxHp\030\022 \001(\r\022\r\n\005IncMp"
    "\030\023 \001(\r\022\r\n\005IncHp\030\024 \001(\r\022\035\n\010SkillBox\030\025 \003(\0132"
    "\013.PBSkillBox\022\025\n\rAddKeenpoints\030\026 \001(\r\022\025\n\rA"
    "ddCalmpoints\030\027 \001(\r\022\026\n\016AddMagicpoints\030\030 \001"
    "(\r\022\025\n\rAddBierpoints\030\031 \001(\r\022\031\n\021AddImmortal"
    "points\030\032 \001(\r\022\037\n\tSkillList\030\033 \001(\0132\014.PBSkil"
    "lList\022\021\n\tJudgeFlag\030\034 \001(\r\022\027\n\017ExtraKeenpoi"
    "nts\030\035 \001(\r\022\027\n\017ExtraCalmpoints\030\036 \001(\r\022\030\n\020Ex"
    "traMagicpoints\030\037 \001(\r\022\027\n\017ExtraBierpoints\030"
    "  \001(\r\022\033\n\023ExtraImmortalpoints\030! \001(\r\022\037\n\027Pl"
    "ayerAddPointLastLevel\030\" \003(\r\022\033\n\023LeftPoint"
    "sLastLevel\030# \001(\r\022\024\n\014NewAddPoints\030$ \001(\r\022\031"
    "\n\021NewAddSkillPoints\030% \001(\r\022\026\n\016StepClearSt"
    "ate\030& \001(\r\022\036\n\026LastAddedSkillBoxIndex\030\' \001("
    "\r\022\033\n\023LastLevelProcessVal\030( \001(\r\022\027\n\017NextAc"
    "tBoxIndex\030) \001(\r\022\033\n\023LastLevelNextActBox\030*"
    " \001(\r\022\020\n\010QLTempID\030+ \001(\r\"w\n\tPBItemBox\022\024\n\014R"
    "eleaseIndex\030\001 \001(\r\022\"\n\013ItemObjects\030\002 \003(\0132\r"
    ".PBItemObject\022\035\n\006KitBag\030\003 \003(\0132\r.PBItemOb"
    "ject\022\021\n\tKitLocked\030\004 \003(\r\"\206\001\n\013PBTransform\022"
    "\024\n\014HasTransform\030\001 \001(\r\022\013\n\003Sex\030\002 \001(\r\022\017\n\007St"
    "ateID\030\003 \001(\r\022\020\n\010WeaponID\030\004 \001(\r\022\017\n\007ClothID"
    "\030\005 \001(\r\022\021\n\tFashionID\030\006 \001(\r\022\r\n\005NpcID\030\007 \001(\r"
    "\"\314\001\n\014PBBuffObject\022\016\n\006BuffID\030\001 \001(\r\022\023\n\013Per"
    "sistTime\030\002 \001(\004\022\023\n\013SrcEntityID\030\003 \001(\r\022\021\n\tT"
    "imerType\030\004 \001(\r\022\024\n\014LastInterval\030\005 \001(\r\022\017\n\007"
    "Parames\030\006 \003(\r\022\020\n\010Parames2\030\007 \003(\r\022\022\n\nBackD"
    "amage\030\010 \001(\r\022\016\n\006ListID\030\t \001(\r\022\022\n\nSuperCoun"
    "t\030\n \001(\r\"e\n\nPBBuffList\022\022\n\nBuffNumber\030\001 \001("
    "\r\022\"\n\013BuffObjects\030\002 \003(\0132\r.PBBuffObject\022\037\n"
    "\tTransform\030\003 \001(\0132\014.PBTransform\"\204\001\n\014PBSta"
    "teParam\022\021\n\tStateType\030\001 \001(\r\022\014\n\004From\030\002 \001(\r"
    "\022\r\n\005Index\030\003 \001(\r\022\020\n\010Parames1\030\004 \001(\r\022\020\n\010Par"
    "ames2\030\005 \001(\r\022\017\n\007InState\030\006 \001(\r\022\017\n\007BuffAdd\030"
    "\007 \001(\007\"3\n\013PBStateList\022$\n\rStateParamObj\030\001 "
    "\003(\0132\r.PBStateParam\"X\n\rPBSkillObject\022\017\n\007S"
    "killID\030\001 \001(\r\022\022\n\nSkillLevel\030\002 \001(\r\022\020\n\010Cool"
    "down\030\003 \001(\r\022\020\n\010IncLevel\030\004 \001(\r\"H\n\013PBSkillL"
    "ist\022\023\n\013SkillNumber\030\001 \001(\r\022$\n\014SkillObjects"
    "\030\002 \003(\0132\016.PBSkillObject\"v\n\nPBShortcut\022\020\n\010"
    "Shortcut\030\001 \001(\r\022\r\n\005mType\030\002 \001(\r\022\016\n\006mIndex\030"
    "\003 \001(\r\022\022\n\nmLabelType\030\004 \001(\r\022\023\n\013mLabelIndex"
    "\030\005 \001(\r\022\016\n\006Param1\030\006 \001(\r\"\\\n\016PBShortcutList"
    "\022\026\n\016ShortcutNumber\030\001 \001(\r\022\036\n\tShortcuts\030\002 "
    "\003(\0132\013.PBShortcut\022\022\n\nHelpStatus\030\003 \003(\r\".\n\n"
    "PBKillData\022\016\n\006KillID\030\001 \001(\r\022\020\n\010KillTime\030\002"
    " \001(\r\"\237\002\n\010PBWizard\022\023\n\013WizardPoint\030\001 \003(\r\022\023"
    "\n\013WizardValue\030\002 \003(\r\022\024\n\014WizardSubmit\030\003 \003("
    "\r\022\026\n\016WizardIncrease\030\004 \003(\r\022\r\n\005Trend\030\005 \001(\r"
    "\022\022\n\nCombatFame\030\006 \001(\r\022\020\n\010RepeFame\030\007 \001(\r\022\022"
    "\n\nCommonFame\030\010 \001(\r\022\023\n\013CombatToday\030\t \001(\r\022"
    "\021\n\tRepeToday\030\n \001(\r\022\023\n\013CommonToday\030\013 \001(\r\022"
    "\021\n\tCombatAll\030\014 \001(\r\022\017\n\007RepeAll\030\r \001(\r\022\021\n\tC"
    "ommonAll\030\016 \001(\r\"F\n\rPBTelePostion\022\014\n\004Line\030"
    "\001 \001(\r\022\013\n\003Map\030\002 \001(\r\022\014\n\004PosX\030\003 \001(\r\022\014\n\004PosY"
    "\030\004 \001(\r\"\307\001\n\021PBPlayerBasicInfo\022\013\n\003Str\030\001 \001("
    "\r\022\013\n\003Sta\030\002 \001(\r\022\013\n\003Spr\030\003 \001(\r\022\013\n\003Con\030\004 \001(\r"
    "\022\013\n\003Wis\030\005 \001(\r\022\023\n\013RemainPoint\030\006 \001(\r\022\022\n\nSk"
    "illPoint\030\007 \001(\r\022\020\n\010ProLevel\030\010 \001(\r\022\016\n\006ProE"
    "xp\030\t \001(\r\022\023\n\013ShowFashion\030\n \001(\r\022\021\n\tShowEqu"
    "ip\030\013 \001(\r\":\n\023PBMonsterRecordInfo\022\022\n\nActiv"
    "eCard\030\001 \003(\r\022\017\n\007OwnCard\030\002 \003(\r\"&\n\016PBPlayer"
    "MWInfo\022\024\n\014AssignExpScl\030\001 \001(\r\"0\n\017PBSingle"
    "CDGroup\022\r\n\005Index\030\001 \001(\r\022\016\n\006CDTime\030\002 \001(\r\"8"
    "\n\023PBPlayerCDGroupInfo\022!\n\007CDGroup\030\001 \003(\0132\020"
    ".PBSingleCDGroup\"R\n\rPBTelePosInfo\022\037\n\007Tow"
    "nPos\030\001 \001(\0132\016.PBTelePostion\022 \n\010TeleList\030\002"
    " \003(\0132\016.PBTelePostion\"\224\003\n\017PBPlayerPVPInfo"
    "\022\016\n\006PKMode\030\001 \001(\r\022\017\n\007PKValue\030\002 \001(\r\022\017\n\007Kil"
    "lNum\030\003 \001(\r\022\r\n\005Honor\030\004 \001(\r\022\023\n\013InHonPerDay"
    "\030\005 \001(\r\022\024\n\014OutHonPerDay\030\006 \001(\r\022\031\n\004Kill\030\007 \003"
    "(\0132\013.PBKillData\022\021\n\tKillNumIn\030\010 \001(\r\022\024\n\014Ye"
    "llowStatus\030\t \001(\r\022\022\n\nPrisonTime\030\n \001(\r\022\027\n\017"
    "TotalPrisonTime\030\013 \001(\r\022\022\n\nTodayHonor\030\014 \001("
    "\r\022\020\n\010TotalWar\030\r \001(\r\022\020\n\010TodayWar\030\016 \001(\r\022\022\n"
    "\nTodayOther\030\017 \001(\r\022\017\n\007FreeWar\030\020 \001(\r\022\021\n\tWa"
    "rSerial\030\021 \001(\r\022\017\n\007WarKill\030\022 \001(\r\022\020\n\010ExpHon"
    "or\030\023 \001(\r\022\021\n\tItemHonor\030\024 \001(\r\"\322\001\n\025PBPlayer"
    "StatisticInfo\022\026\n\016CompletedTasks\030\001 \001(\r\022\031\n"
    "\021OriginReliveTimes\030\002 \001(\r\022\031\n\021KillSameNati"
    "onNum\030\003 \001(\r\022\023\n\013KillOgreNum\030\004 \001(\r\022\021\n\tUpFa"
    "ilNum\030\005 \001(\r\022\030\n\020TodayKillEnemyIn\030\006 \001(\r\022\031\n"
    "\021TodayKillEnemyOut\030\007 \001(\r\022\016\n\006DieNum\030\010 \001(\r"
    "\"\235\001\n\022PBPlayerTalentInfo\022\023\n\013TalentPoint\030\001"
    " \001(\r\022\022\n\nTalentStep\030\002 \001(\r\022\023\n\013TalentStudy\030"
    "\003 \001(\r\022!\n\013TalentSkill\030\004 \001(\0132\014.PBSkillList"
    "\022\021\n\tTalentExp\030\005 \001(\r\022\023\n\013TalentLevel\030\006 \001(\r"
    "\"l\n\021PBPlayerTitleInfo\022\024\n\014CurrentTitle\030\001 "
    "\001(\r\022\021\n\tTitleList\030\002 \003(\r\022 \n\nTitleSkill\030\003 \001"
    "(\0132\014.PBSkillList\022\014\n\004Time\030\004 \003(\r\"u\n\022PBActi"
    "vityStateInf\022\022\n\nActivityID\030\001 \001(\r\022\020\n\010CurS"
    "tate\030\002 \001(\r\022\022\n\nStateParam\030\003 \003(\r\022\r\n\005ChgTm\030"
    "\004 \001(\r\022\026\n\016RealLastedTime\030\005 \001(\r\"\360\003\n\024PBPlay"
    "erActivityInfo\022\023\n\013DiploidTime\030\001 \001(\r\022 \n\030L"
    "astRefreshTimeOfDipLoid\030\002 \001(\r\022\024\n\014Diploid"
    "State\030\003 \003(\r\022\027\n\017DailyWelfareSta\030\004 \001(\r\022\033\n\023"
    "LastDaylyDisposTime\030\005 \001(\r\022\034\n\024LastWeeklyD"
    "isposTime\030\006 \001(\r\022\033\n\023LastFamilyApplyTime\030\007"
    " \001(\r\022\033\n\023LastTimeLeaveFamily\030\010 \001(\r\022\025\n\rLas"
    "tJudgeTime\030\t \001(\r\022\020\n\010SaveDate\030\n \001(\r\022\017\n\007Vi"
    "pFlag\030\013 \001(\r\022\017\n\007VipTime\030\014 \001(\r\022#\n\013AwardRec"
    "ord\030\r \001(\0132\016.PBAwardRecord\022\024\n\014InvestStatu"
    "s\030\016 \001(\r\022)\n\021WeeklyAwardRecord\030\017 \001(\0132\016.PBA"
    "wardRecord\022*\n\rActivityState\030\020 \003(\0132\023.PBAc"
    "tivityStateInf\022\020\n\010HasVoted\030\021 \001(\r\022\016\n\006Save"
    "Tm\030\022 \001(\r\"7\n\022PBPlayerClientInfo\022!\n\010Shortc"
    "ut\030\001 \001(\0132\017.PBShortcutList\"U\n\020PBSpiritTyp"
    "eInfo\022\026\n\016SlotOpenStatus\030\001 \003(\r\022\025\n\rCasting"
    "ItemID\030\002 \003(\r\022\022\n\nBindStatus\030\003 \003(\r\"A\n\024PBSp"
    "iritPositionInfo\022)\n\016SpiritTypeInfo\030\001 \003(\013"
    "2\021.PBSpiritTypeInfo\";\n\014PBSpiritInfo\022+\n\014P"
    "ositionInfo\030\001 \003(\0132\025.PBSpiritPositionInfo"
    "\"\213\007\n\nPBProperty\022\r\n\005CurHP\030\001 \001(\r\022\r\n\005CurMP\030"
    "\002 \001(\r\022\r\n\005CurAP\030\003 \001(\r\022%\n\tBasicInfo\030\004 \001(\0132"
    "\022.PBPlayerBasicInfo\022\033\n\007Baggage\030\005 \001(\0132\n.P"
    "BItemBox\022\037\n\013TaskBaggage\030\006 \001(\0132\n.PBItemBo"
    "x\022\035\n\tEquipment\030\007 \001(\0132\n.PBItemBox\022\033\n\007Stor"
    "age\030\010 \001(\0132\n.PBItemBox\022\033\n\005Skill\030\t \001(\0132\014.P"
    "BSkillList\022\031\n\004Buff\030\n \001(\0132\013.PBBuffList\022%\n"
    "\007CDGroup\030\013 \001(\0132\024.PBPlayerCDGroupInfo\022+\n\r"
    "MonsterRecord\030\014 \001(\0132\024.PBMonsterRecordInf"
    "o\022\037\n\007TelePos\030\r \001(\0132\016.PBTelePosInfo\022!\n\007Pv"
    "PInfo\030\016 \001(\0132\020.PBPlayerPVPInfo\022%\n\tTitleIn"
    "fo\030\017 \001(\0132\022.PBPlayerTitleInfo\022\'\n\nTalentIn"
    "fo\030\020 \001(\0132\023.PBPlayerTalentInfo\022\037\n\006MWInfo\030"
    "\021 \001(\0132\017.PBPlayerMWInfo\022%\n\014LifeSkillBox\030\022"
    " \001(\0132\017.PBLifeSkillBox\022-\n\rStatisticInfo\030\023"
    " \001(\0132\026.PBPlayerStatisticInfo\022\'\n\nClientIn"
    "fo\030\024 \001(\0132\023.PBPlayerClientInfo\022\031\n\006Wizard\030"
    "\025 \001(\0132\t.PBWizard\022\'\n\010Activity\030\026 \001(\0132\025.PBP"
    "layerActivityInfo\022\035\n\005Award\030\027 \001(\0132\016.PBAwa"
    "rdRecord\022\035\n\006Matrix\030\030 \001(\0132\r.PBMatrixInfo\022"
    "#\n\013ExpTimeInfo\030\031 \001(\0132\016.PBExpTimeInfo\022%\n\014"
    "TreasureBowl\030\032 \001(\0132\017.PBTreasureBowl\022!\n\nS"
    "piritInfo\030\033 \001(\0132\r.PBSpiritInfo\"\216\001\n\006PBTas"
    "k\022\016\n\006TaskID\030\001 \002(\r\022\024\n\014TaskProgress\030\002 \001(\r\022"
    "\024\n\014GameTimeLeft\030\003 \001(\005\022\020\n\010TaskData\030\004 \003(\r\022"
    "\022\n\nTalkedNpcs\030\005 \003(\r\022\017\n\007ExFlags\030\006 \001(\r\022\021\n\t"
    "BeginTime\030\007 \001(\r\"\322\001\n\016PBLoopTaskData\022\035\n\025To"
    "dayCompletedCircles\030\001 \001(\r\022\031\n\021LastComplet"
    "edTime\030\002 \001(\004\022\021\n\tLoopTasks\030\003 \003(\r\022\026\n\016Compl"
    "etedTimes\030\004 \001(\r\022\025\n\rLastAbortTime\030\005 \001(\004\022\023"
    "\n\013CurSubIndex\030\006 \001(\005\022\021\n\tWeekLoops\030\007 \001(\r\022\034"
    "\n\024DayCompletedLoopFlag\030\010 \001(\r\"\257\001\n\021PBStora"
    "geTaskData\022\r\n\005Tasks\030\001 \003(\r\022\017\n\007TaskNum\030\002 \001"
    "(\r\022\024\n\014LastClickNpc\030\003 \001(\004\022\021\n\tCurTaskID\030\004 "
    "\001(\r\022\020\n\010GotTasks\030\005 \003(\r\022\016\n\006GotNum\030\006 \001(\r\022\026\n"
    "\016TodayCompleted\030\007 \001(\r\022\027\n\017TodayRMBRefresh"
    "\030\010 \001(\r\"T\n\rTragedyStruct\022\024\n\014TragedyIndex\030"
    "\001 \001(\r\022\027\n\017NextTragedyTask\030\002 \001(\007\022\024\n\014Traged"
    "yState\030\003 \001(\r\"~\n\017PBTaskGroupData\022\017\n\007Group"
    "ID\030\001 \001(\r\022\026\n\016TodayCompleted\030\002 \001(\r\022\025\n\rToda"
    "yAccepted\030\003 \001(\r\022\025\n\rWeekCompleted\030\004 \001(\r\022\024"
    "\n\014WeekAccepted\030\005 \001(\r\"7\n\022SingleChairManTa"
    "sk\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTaskState\030\002 \001(\r\">\n"
    "\022SingleCompletedInf\022\022\n\nChairmanID\030\001 \001(\r\022"
    "\024\n\014CompletedNum\030\002 \001(\r\"\237\001\n\022PBChairManTask"
    "Data\022\"\n\005Tasks\030\001 \003(\0132\023.SingleChairManTask"
    "\022\022\n\nChairManID\030\002 \001(\r\022\024\n\014CompletedNum\030\003 \001"
    "(\r\022\023\n\013AcceptedNum\030\004 \001(\r\022&\n\tCompleted\030\005 \003"
    "(\0132\023.SingleCompletedInf\"J\n\021PBRefreshTask"
    "Data\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tTaskColor\030\002 \001(\r\022"
    "\022\n\nResultFlag\030\003 \001(\r\"5\n\020GroupPublishData\022"
    "\016\n\006TaskID\030\001 \001(\r\022\021\n\tTaskState\030\002 \001(\r\"\306\004\n\nP"
    "BTaskList\022\022\n\nTaskNumber\030\001 \001(\r\022\031\n\010TaskLis"
    "t\030\002 \003(\0132\007.PBTask\022%\n\014LoopTaskData\030\003 \001(\0132\017"
    ".PBLoopTaskData\022\017\n\007EventID\030\004 \003(\r\022\022\n\nEven"
    "tParam\030\005 \003(\r\022\021\n\tEventTick\030\006 \003(\r\022+\n\017Stora"
    "geTaskData\030\007 \001(\0132\022.PBStorageTaskData\022\'\n\017"
    "TragedyTaskData\030\010 \003(\0132\016.TragedyStruct\022\025\n"
    "\rCompletedTask\030\t \003(\r\022\022\n\nFailedTask\030\n \003(\r"
    "\022$\n\nTaskGroups\030\013 \003(\0132\020.PBTaskGroupData\022\030"
    "\n\020CompletedTragedy\030\014 \001(\r\022\022\n\nLastLogOff\030\r"
    " \001(\007\022\030\n\020RedirectFailTask\030\016 \001(\r\022)\n\014ChairM"
    "anTask\030\017 \001(\0132\023.PBChairManTaskData\022\030\n\020Tod"
    "ayTeamLoopNum\030\020 \001(\r\022\'\n\013RefreshData\030\021 \003(\013"
    "2\022.PBRefreshTaskData\022\023\n\013RepeateTask\030\022 \003("
    "\r\022\017\n\007EndTime\030\023 \003(\r\022\'\n\014CorpsPublish\030\024 \003(\013"
    "2\021.GroupPublishData\"O\n\tPBMapData\022\021\n\tDire"
    "ction\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\r\022\014\n\004PosY\030\003 \001(\r\022"
    "\023\n\013AliveStatus\030\004 \001(\r\"=\n\022PBFriendGlobalDa"
    "ta\022\022\n\nGroupNames\030\001 \003(\t\022\023\n\013IsRefuseAll\030\002 "
    "\001(\r\"\267\001\n\014PBFriendData\022\020\n\010PlayerId\030\001 \003(\r\022\017"
    "\n\007GroupID\030\002 \003(\r\022\016\n\006Rel2Me\030\003 \003(\r\022\022\n\nBless"
    "Times\030\004 \001(\r\022\026\n\016IntimacyDegree\030\005 \003(\r\022\031\n\021L"
    "astTimeAllOnline\030\006 \003(\r\022\025\n\rDailyIntimacy\030"
    "\007 \003(\r\022\026\n\016LastUpdateTime\030\010 \003(\r\"e\n\013PBEnemy"
    "Data\022\020\n\010PlayerId\030\001 \003(\r\022\016\n\006Killed\030\002 \003(\r\022\020"
    "\n\010BeKilled\030\003 \003(\r\022\020\n\010IsLocked\030\004 \003(\r\022\020\n\010Ki"
    "llTime\030\005 \003(\r\"\225\001\n\010PBFriend\022#\n\006Global\030\001 \001("
    "\0132\023.PBFriendGlobalData\022\035\n\006Friend\030\002 \001(\0132\r"
    ".PBFriendData\022\033\n\005Enemy\030\003 \001(\0132\014.PBEnemyDa"
    "ta\022\021\n\tBlackList\030\004 \003(\r\022\025\n\rLatestContact\030\005"
    " \003(\r\"-\n\016PBRepetionData\022\r\n\005Index\030\001 \001(\r\022\014\n"
    "\004Data\030\002 \001(\r\"_\n\rPBRepetionMap\022\r\n\005MapID\030\001 "
    "\001(\r\022\r\n\005Count\030\002 \001(\r\022\035\n\004Data\030\003 \003(\0132\017.PBRep"
    "etionData\022\021\n\tWeekCount\030\004 \001(\r\"\240\001\n\016PBRepet"
    "ionRepe\022%\n\014RepetionData\030\001 \003(\0132\017.PBRepeti"
    "onData\022\021\n\tRepeIndex\030\002 \001(\r\022\r\n\005Count\030\003 \001(\r"
    "\022\021\n\tWeekCount\030\004 \001(\r\022\016\n\006SignUp\030\005 \001(\r\022\020\n\010I"
    "ntoTime\030\006 \001(\r\022\020\n\010DieCount\030\007 \001(\r\"\333\002\n\nPBRe"
    "petion\022\022\n\nBackLineID\030\001 \001(\r\022\021\n\tBackMapID\030"
    "\002 \001(\r\022\020\n\010BackPosX\030\003 \001(\r\022\020\n\010BackPosY\030\004 \001("
    "\r\022\037\n\007MapInfo\030\005 \003(\0132\016.PBRepetionMap\022\013\n\003Ke"
    "y\030\006 \001(\004\022\016\n\006CampID\030\007 \001(\r\022!\n\010RepeInfo\030\010 \003("
    "\0132\017.PBRepetionRepe\022\022\n\nInRepetion\030\t \001(\r\022\025"
    "\n\rRepetionIndex\030\n \001(\r\022\023\n\013CheckResult\030\013 \001"
    "(\r\022\023\n\013AnswerCount\030\014 \001(\r\022\031\n\021GlobalSceneSt"
    "atus\030\r \001(\r\022\034\n\024GlobalWarOffLineTime\030\016 \001(\r"
    "\022\023\n\013RepetionKey\030\017 \001(\004\"\317\002\n\010PBMember\022\020\n\010En"
    "tityID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\014\n\004Name\030\003 \001"
    "(\t\022\021\n\tAccountID\030\004 \001(\r\022\014\n\004Type\030\005 \001(\r\022\014\n\004F"
    "ace\030\006 \001(\r\022\016\n\006Metier\030\007 \001(\r\022\r\n\005Level\030\010 \001(\r"
    "\022\013\n\003Sex\030\t \001(\r\022\016\n\006LineID\030\n \001(\r\022\r\n\005MapID\030\013"
    " \001(\r\022\n\n\002HP\030\014 \001(\r\022\n\n\002MP\030\r \001(\r\022\n\n\002AP\030\016 \001(\r"
    "\022\014\n\004XPos\030\017 \001(\r\022\014\n\004YPos\030\020 \001(\r\022\021\n\tCommStat"
    "e\030\021 \001(\r\022\035\n\010BuffList\030\022 \001(\0132\013.PBBuffList\022\030"
    "\n\020RepetionMapIndex\030\023 \001(\r\022\r\n\005Order\030\024 \001(\r\""
    "\277\001\n\tPBTeamMsg\022\014\n\004Type\030\001 \001(\r\022\016\n\006CharID\030\002 "
    "\001(\r\022\014\n\004Name\030\003 \001(\t\022\016\n\006Metier\030\004 \001(\r\022\r\n\005Lev"
    "el\030\005 \001(\r\022\020\n\010MaxLevel\030\006 \001(\r\022\020\n\010MinLevel\030\007"
    " \001(\r\022\017\n\007Content\030\010 \001(\t\022\r\n\005Count\030\t \001(\r\022\021\n\t"
    "RootStyle\030\n \001(\r\022\020\n\010SubStyle\030\013 \001(\r\"W\n\013PBS"
    "tallInfo\022\021\n\tStallName\030\001 \001(\t\022\021\n\tAdContent"
    "\030\002 \001(\t\022\017\n\007HasFlag\030\003 \001(\r\022\021\n\tStallType\030\004 \001"
    "(\005\"\232\001\n\013PBLifeSkill\022\025\n\rLifeSkillType\030\001 \001("
    "\r\022\026\n\016LifeSkillLevel\030\002 \001(\r\022\031\n\021Specialized"
    "Degree\030\003 \001(\r\022\027\n\017LifeSkillStatus\030\004 \001(\r\022\025\n"
    "\rLifeSkillKind\030\005 \001(\r\022\021\n\tComposeID\030\006 \003(\r\""
    "1\n\016PBLifeSkillBox\022\037\n\tLifeSkill\030\001 \003(\0132\014.P"
    "BLifeSkill\"\313\001\n\rPBExpTimeInfo\022\031\n\021OffLineT"
    "imeLength\030\001 \001(\r\022\036\n\026EffectiveOffTimeLengt"
    "h\030\002 \001(\r\022\037\n\027LastEffectiveTimeLength\030\003 \001(\r"
    "\022\031\n\021LastCalculateTime\030\004 \001(\r\022\026\n\016BlackPill"
    "sTime\030\005 \001(\r\022\023\n\013BlackPillID\030\006 \001(\r\022\026\n\016ExpF"
    "romOffLine\030\007 \001(\r\"9\n\023PBSinglePublishInfo\022"
    "\016\n\006PubNum\030\001 \001(\r\022\022\n\nRecvAwards\030\002 \001(\r\"\206\001\n\021"
    "PBTaskPublishInfo\022(\n\nSingleData\030\001 \003(\0132\024."
    "PBSinglePublishInfo\022\027\n\017TodayPublishNum\030\002"
    " \001(\r\022\026\n\016OncePublishNum\030\003 \001(\r\022\026\n\016TotalFin"
    "ishNum\030\004 \001(\r\"\310\006\n\022CMessagePlayerInfo\022\017\n\007r"
    "ole_id\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\021\n\trole"
    "_name\030\003 \001(\t\022\021\n\tgender_id\030\004 \001(\r\022\021\n\tmetier"
    "_id\030\005 \001(\r\022\026\n\016nationality_id\030\006 \001(\r\022\021\n\tfac"
    "e_type\030\007 \001(\r\022\017\n\007line_id\030\010 \001(\r\022\016\n\006map_id\030"
    "\t \001(\r\022\022\n\nrole_level\030\n \001(\r\022\021\n\trole_expr\030\013"
    " \001(\004\022\022\n\nrole_money\030\014 \001(\r\022\r\n\005pos_x\030\r \001(\005\022"
    "\r\n\005pos_y\030\016 \001(\005\022\020\n\010is_alive\030\017 \001(\r\022\022\n\nlogi"
    "n_time\030\020 \001(\r\022\027\n\017online_duration\030\021 \001(\r\022\023\n"
    "\013save_status\030\022 \001(\r\022\024\n\014save_bitflag\030\023 \001(\r"
    "\022\025\n\rbounded_money\030\024 \001(\r\022\021\n\tcheck_sum\030\025 \001"
    "(\r\022\021\n\tsilver_yb\030\026 \001(\r\022\025\n\rstorage_money\030\027"
    " \001(\r\022\035\n\025storage_bounded_money\030\030 \001(\r\022\031\n\021r"
    "ole_status_param\030\031 \001(\r\022\022\n\ncountry_id\030\032 \001"
    "(\005\022\025\n\rrole_familyid\030\033 \001(\r\022\024\n\014role_corpsi"
    "d\030\034 \001(\r\022\031\n\021charged_silver_yb\030\035 \001(\r\022\032\n\022co"
    "nsumed_silver_yb\030\036 \001(\r\022\030\n\020role_protectti"
    "me\030\037 \001(\r\022\025\n\rrole_password\030  \001(\t\022\025\n\rrole_"
    "vip_flag\030! \001(\r\022\025\n\rrole_vip_time\030\" \001(\r\022\027\n"
    "\017role_marriageid\030# \001(\r\022\034\n\024role_changecam"
    "p_time\030$ \001(\r\022\023\n\013role_status\030% \001(\r\022\024\n\014rol"
    "e_swornid\030& \001(\r\"/\n\rPBAwardRecord\022\017\n\007Awar"
    "dID\030\001 \003(\r\022\r\n\005Times\030\002 \003(\r\"\221\002\n\014PBMatrixInf"
    "o\022\020\n\010MasterID\030\001 \003(\r\022\017\n\007SlaveID\030\002 \003(\r\022\022\n\n"
    "SlaveValue\030\003 \003(\r\022\022\n\nSlavePoint\030\004 \001(\r\022\023\n\013"
    "MasterPoint\030\005 \001(\r\022\022\n\nSlaveTotal\030\006 \001(\r\022\023\n"
    "\013MasterTotal\030\007 \001(\r\022\025\n\rMasterPercent\030\010 \003("
    "\r\022\023\n\013MasterTimes\030\t \001(\r\022\020\n\010SlaveNum\030\n \001(\r"
    "\022\022\n\nMasterGive\030\013 \001(\r\022\023\n\013BeginnerNum\030\014 \001("
    "\r\022\021\n\tFormalNum\030\r \001(\r\"M\n\007PBCharm\022\022\n\nCharm"
    "Value\030\001 \001(\r\022\024\n\014WeekIncCharm\030\002 \001(\r\022\030\n\020Las"
    "tWeekIncCharm\030\003 \001(\r\"e\n\013PBGuideData\022\020\n\010Le"
    "velBak\030\001 \001(\r\022\016\n\006ExpBak\030\002 \001(\r\022\020\n\010HonorBak"
    "\030\003 \001(\r\022\021\n\tAchiveBak\030\004 \001(\r\022\017\n\007KillBak\030\005 \001"
    "(\r\"+\n\rPBSingleTimes\022\013\n\003Key\030\001 \001(\r\022\r\n\005Valu"
    "e\030\002 \001(\r\",\n\007PBTimes\022!\n\ttimesinfo\030\001 \003(\0132\016."
    "PBSingleTimes\"7\n\022PBTreasureBowlItem\022\016\n\006I"
    "temID\030\001 \001(\r\022\021\n\tUsedTimes\030\002 \001(\r\"g\n\016PBTrea"
    "sureBowl\022\020\n\010TotalNum\030\001 \001(\r\022\024\n\014ExchangeTi"
    "me\030\002 \001(\r\022-\n\020TreasureBowlItem\030\003 \003(\0132\023.PBT"
    "reasureBowlItem\"<\n\023PBRepetDataToClient\022\022"
    "\n\nRepetIndex\030\001 \001(\r\022\021\n\tRepetData\030\002 \001(\r\"B\n"
    "\017PBRepetDataList\022/\n\021RepetDataToClient\030\001 "
    "\003(\0132\024.PBRepetDataToClient\"0\n\rPBSwornMemb"
    "er\022\016\n\006RoleID\030\001 \001(\r\022\017\n\007TeamPos\030\002 \001(\r\"2\n\013P"
    "BSwornTeam\022#\n\013SwornMember\030\001 \003(\0132\016.PBSwor"
    "nMemberB\002H\001", 12971);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "property_pb.hxx", &protobuf_RegisterTypes);
  #endif
  PBPropertyValue1::default_instance_ = new PBPropertyValue1();
  PBSkillBox::default_instance_ = new PBSkillBox();
  PBItemObject::default_instance_ = new PBItemObject();
  PBItemContent::default_instance_ = new PBItemContent();
  PBItemObjEquip::default_instance_ = new PBItemObjEquip();
  PBItemObjMW::default_instance_ = new PBItemObjMW();
  PBItemBox::default_instance_ = new PBItemBox();
  PBTransform::default_instance_ = new PBTransform();
  PBBuffObject::default_instance_ = new PBBuffObject();
  PBBuffList::default_instance_ = new PBBuffList();
  PBStateParam::default_instance_ = new PBStateParam();
  PBStateList::default_instance_ = new PBStateList();
  PBSkillObject::default_instance_ = new PBSkillObject();
  PBSkillList::default_instance_ = new PBSkillList();
  PBShortcut::default_instance_ = new PBShortcut();
  PBShortcutList::default_instance_ = new PBShortcutList();
  PBKillData::default_instance_ = new PBKillData();
  PBWizard::default_instance_ = new PBWizard();
  PBTelePostion::default_instance_ = new PBTelePostion();
  PBPlayerBasicInfo::default_instance_ = new PBPlayerBasicInfo();
  PBMonsterRecordInfo::default_instance_ = new PBMonsterRecordInfo();
  PBPlayerMWInfo::default_instance_ = new PBPlayerMWInfo();
  PBSingleCDGroup::default_instance_ = new PBSingleCDGroup();
  PBPlayerCDGroupInfo::default_instance_ = new PBPlayerCDGroupInfo();
  PBTelePosInfo::default_instance_ = new PBTelePosInfo();
  PBPlayerPVPInfo::default_instance_ = new PBPlayerPVPInfo();
  PBPlayerStatisticInfo::default_instance_ = new PBPlayerStatisticInfo();
  PBPlayerTalentInfo::default_instance_ = new PBPlayerTalentInfo();
  PBPlayerTitleInfo::default_instance_ = new PBPlayerTitleInfo();
  PBActivityStateInf::default_instance_ = new PBActivityStateInf();
  PBPlayerActivityInfo::default_instance_ = new PBPlayerActivityInfo();
  PBPlayerClientInfo::default_instance_ = new PBPlayerClientInfo();
  PBSpiritTypeInfo::default_instance_ = new PBSpiritTypeInfo();
  PBSpiritPositionInfo::default_instance_ = new PBSpiritPositionInfo();
  PBSpiritInfo::default_instance_ = new PBSpiritInfo();
  PBProperty::default_instance_ = new PBProperty();
  PBTask::default_instance_ = new PBTask();
  PBLoopTaskData::default_instance_ = new PBLoopTaskData();
  PBStorageTaskData::default_instance_ = new PBStorageTaskData();
  TragedyStruct::default_instance_ = new TragedyStruct();
  PBTaskGroupData::default_instance_ = new PBTaskGroupData();
  SingleChairManTask::default_instance_ = new SingleChairManTask();
  SingleCompletedInf::default_instance_ = new SingleCompletedInf();
  PBChairManTaskData::default_instance_ = new PBChairManTaskData();
  PBRefreshTaskData::default_instance_ = new PBRefreshTaskData();
  GroupPublishData::default_instance_ = new GroupPublishData();
  PBTaskList::default_instance_ = new PBTaskList();
  PBMapData::default_instance_ = new PBMapData();
  PBFriendGlobalData::default_instance_ = new PBFriendGlobalData();
  PBFriendData::default_instance_ = new PBFriendData();
  PBEnemyData::default_instance_ = new PBEnemyData();
  PBFriend::default_instance_ = new PBFriend();
  PBRepetionData::default_instance_ = new PBRepetionData();
  PBRepetionMap::default_instance_ = new PBRepetionMap();
  PBRepetionRepe::default_instance_ = new PBRepetionRepe();
  PBRepetion::default_instance_ = new PBRepetion();
  PBMember::default_instance_ = new PBMember();
  PBTeamMsg::default_instance_ = new PBTeamMsg();
  PBStallInfo::default_instance_ = new PBStallInfo();
  PBLifeSkill::default_instance_ = new PBLifeSkill();
  PBLifeSkillBox::default_instance_ = new PBLifeSkillBox();
  PBExpTimeInfo::default_instance_ = new PBExpTimeInfo();
  PBSinglePublishInfo::default_instance_ = new PBSinglePublishInfo();
  PBTaskPublishInfo::default_instance_ = new PBTaskPublishInfo();
  CMessagePlayerInfo::default_instance_ = new CMessagePlayerInfo();
  PBAwardRecord::default_instance_ = new PBAwardRecord();
  PBMatrixInfo::default_instance_ = new PBMatrixInfo();
  PBCharm::default_instance_ = new PBCharm();
  PBGuideData::default_instance_ = new PBGuideData();
  PBSingleTimes::default_instance_ = new PBSingleTimes();
  PBTimes::default_instance_ = new PBTimes();
  PBTreasureBowlItem::default_instance_ = new PBTreasureBowlItem();
  PBTreasureBowl::default_instance_ = new PBTreasureBowl();
  PBRepetDataToClient::default_instance_ = new PBRepetDataToClient();
  PBRepetDataList::default_instance_ = new PBRepetDataList();
  PBSwornMember::default_instance_ = new PBSwornMember();
  PBSwornTeam::default_instance_ = new PBSwornTeam();
  PBPropertyValue1::default_instance_->InitAsDefaultInstance();
  PBSkillBox::default_instance_->InitAsDefaultInstance();
  PBItemObject::default_instance_->InitAsDefaultInstance();
  PBItemContent::default_instance_->InitAsDefaultInstance();
  PBItemObjEquip::default_instance_->InitAsDefaultInstance();
  PBItemObjMW::default_instance_->InitAsDefaultInstance();
  PBItemBox::default_instance_->InitAsDefaultInstance();
  PBTransform::default_instance_->InitAsDefaultInstance();
  PBBuffObject::default_instance_->InitAsDefaultInstance();
  PBBuffList::default_instance_->InitAsDefaultInstance();
  PBStateParam::default_instance_->InitAsDefaultInstance();
  PBStateList::default_instance_->InitAsDefaultInstance();
  PBSkillObject::default_instance_->InitAsDefaultInstance();
  PBSkillList::default_instance_->InitAsDefaultInstance();
  PBShortcut::default_instance_->InitAsDefaultInstance();
  PBShortcutList::default_instance_->InitAsDefaultInstance();
  PBKillData::default_instance_->InitAsDefaultInstance();
  PBWizard::default_instance_->InitAsDefaultInstance();
  PBTelePostion::default_instance_->InitAsDefaultInstance();
  PBPlayerBasicInfo::default_instance_->InitAsDefaultInstance();
  PBMonsterRecordInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerMWInfo::default_instance_->InitAsDefaultInstance();
  PBSingleCDGroup::default_instance_->InitAsDefaultInstance();
  PBPlayerCDGroupInfo::default_instance_->InitAsDefaultInstance();
  PBTelePosInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerPVPInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerStatisticInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerTalentInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerTitleInfo::default_instance_->InitAsDefaultInstance();
  PBActivityStateInf::default_instance_->InitAsDefaultInstance();
  PBPlayerActivityInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerClientInfo::default_instance_->InitAsDefaultInstance();
  PBSpiritTypeInfo::default_instance_->InitAsDefaultInstance();
  PBSpiritPositionInfo::default_instance_->InitAsDefaultInstance();
  PBSpiritInfo::default_instance_->InitAsDefaultInstance();
  PBProperty::default_instance_->InitAsDefaultInstance();
  PBTask::default_instance_->InitAsDefaultInstance();
  PBLoopTaskData::default_instance_->InitAsDefaultInstance();
  PBStorageTaskData::default_instance_->InitAsDefaultInstance();
  TragedyStruct::default_instance_->InitAsDefaultInstance();
  PBTaskGroupData::default_instance_->InitAsDefaultInstance();
  SingleChairManTask::default_instance_->InitAsDefaultInstance();
  SingleCompletedInf::default_instance_->InitAsDefaultInstance();
  PBChairManTaskData::default_instance_->InitAsDefaultInstance();
  PBRefreshTaskData::default_instance_->InitAsDefaultInstance();
  GroupPublishData::default_instance_->InitAsDefaultInstance();
  PBTaskList::default_instance_->InitAsDefaultInstance();
  PBMapData::default_instance_->InitAsDefaultInstance();
  PBFriendGlobalData::default_instance_->InitAsDefaultInstance();
  PBFriendData::default_instance_->InitAsDefaultInstance();
  PBEnemyData::default_instance_->InitAsDefaultInstance();
  PBFriend::default_instance_->InitAsDefaultInstance();
  PBRepetionData::default_instance_->InitAsDefaultInstance();
  PBRepetionMap::default_instance_->InitAsDefaultInstance();
  PBRepetionRepe::default_instance_->InitAsDefaultInstance();
  PBRepetion::default_instance_->InitAsDefaultInstance();
  PBMember::default_instance_->InitAsDefaultInstance();
  PBTeamMsg::default_instance_->InitAsDefaultInstance();
  PBStallInfo::default_instance_->InitAsDefaultInstance();
  PBLifeSkill::default_instance_->InitAsDefaultInstance();
  PBLifeSkillBox::default_instance_->InitAsDefaultInstance();
  PBExpTimeInfo::default_instance_->InitAsDefaultInstance();
  PBSinglePublishInfo::default_instance_->InitAsDefaultInstance();
  PBTaskPublishInfo::default_instance_->InitAsDefaultInstance();
  CMessagePlayerInfo::default_instance_->InitAsDefaultInstance();
  PBAwardRecord::default_instance_->InitAsDefaultInstance();
  PBMatrixInfo::default_instance_->InitAsDefaultInstance();
  PBCharm::default_instance_->InitAsDefaultInstance();
  PBGuideData::default_instance_->InitAsDefaultInstance();
  PBSingleTimes::default_instance_->InitAsDefaultInstance();
  PBTimes::default_instance_->InitAsDefaultInstance();
  PBTreasureBowlItem::default_instance_->InitAsDefaultInstance();
  PBTreasureBowl::default_instance_->InitAsDefaultInstance();
  PBRepetDataToClient::default_instance_->InitAsDefaultInstance();
  PBRepetDataList::default_instance_->InitAsDefaultInstance();
  PBSwornMember::default_instance_->InitAsDefaultInstance();
  PBSwornTeam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_property_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_property_5fpb_2ehxx {
  StaticDescriptorInitializer_property_5fpb_2ehxx() {
    protobuf_AddDesc_property_5fpb_2ehxx();
  }
} static_descriptor_initializer_property_5fpb_2ehxx_;


// ===================================================================

#ifndef _MSC_VER
const int PBPropertyValue1::kInitValueFieldNumber;
const int PBPropertyValue1::kDeltaValueFieldNumber;
#endif  // !_MSC_VER

PBPropertyValue1::PBPropertyValue1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPropertyValue1::InitAsDefaultInstance() {}

PBPropertyValue1::PBPropertyValue1(const PBPropertyValue1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPropertyValue1::SharedCtor() {
  _cached_size_ = 0;
  initvalue_ = 0u;
  deltavalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPropertyValue1::~PBPropertyValue1() {
  SharedDtor();
}

void PBPropertyValue1::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPropertyValue1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPropertyValue1_descriptor_;
}

const PBPropertyValue1& PBPropertyValue1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPropertyValue1* PBPropertyValue1::default_instance_ = NULL;

PBPropertyValue1* PBPropertyValue1::New() const {
  return new PBPropertyValue1;
}

void PBPropertyValue1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initvalue_ = 0u;
    deltavalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPropertyValue1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 InitValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &initvalue_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DeltaValue;
        break;
      }
      
      // optional uint32 DeltaValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DeltaValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deltavalue_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPropertyValue1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPropertyValue1::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 InitValue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->initvalue(), output);
  }
  
  // optional uint32 DeltaValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->deltavalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPropertyValue1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 InitValue = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->initvalue(), target);
  }
  
  // optional uint32 DeltaValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->deltavalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPropertyValue1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InitValue = 1;
    if (has_initvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->initvalue());
    }
    
    // optional uint32 DeltaValue = 2;
    if (has_deltavalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deltavalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPropertyValue1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPropertyValue1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPropertyValue1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPropertyValue1::MergeFrom(const PBPropertyValue1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_initvalue(from.initvalue());
    }
    if (from._has_bit(1)) {
      set_deltavalue(from.deltavalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPropertyValue1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPropertyValue1::CopyFrom(const PBPropertyValue1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPropertyValue1::Swap(PBPropertyValue1* other) {
  if (other != this) {
    std::swap(initvalue_, other->initvalue_);
    std::swap(deltavalue_, other->deltavalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPropertyValue1::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPropertyValue1::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPropertyValue1::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPropertyValue1_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillBox::kSkillsFieldNumber;
const int PBSkillBox::kSkillActNumFieldNumber;
const int PBSkillBox::kSkillBookIDFieldNumber;
const int PBSkillBox::kAddedSkillPointsFieldNumber;
const int PBSkillBox::kSkillInitLevelFieldNumber;
const int PBSkillBox::kActiveStateFieldNumber;
#endif  // !_MSC_VER

PBSkillBox::PBSkillBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillBox::InitAsDefaultInstance() {}

PBSkillBox::PBSkillBox(const PBSkillBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillBox::SharedCtor() {
  _cached_size_ = 0;
  skills_ = 0u;
  skillactnum_ = 0u;
  skillbookid_ = 0u;
  addedskillpoints_ = 0u;
  skillinitlevel_ = 0u;
  activestate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillBox::~PBSkillBox() {
  SharedDtor();
}

void PBSkillBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillBox_descriptor_;
}

const PBSkillBox& PBSkillBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSkillBox* PBSkillBox::default_instance_ = NULL;

PBSkillBox* PBSkillBox::New() const {
  return new PBSkillBox;
}

void PBSkillBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skills_ = 0u;
    skillactnum_ = 0u;
    skillbookid_ = 0u;
    addedskillpoints_ = 0u;
    skillinitlevel_ = 0u;
    activestate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skills_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SkillActNum;
        break;
      }
      
      // optional uint32 SkillActNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillActNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillactnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SkillBookID;
        break;
      }
      
      // optional uint32 SkillBookID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillBookID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillbookid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AddedSkillPoints;
        break;
      }
      
      // optional uint32 AddedSkillPoints = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddedSkillPoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addedskillpoints_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SkillInitLevel;
        break;
      }
      
      // optional uint32 SkillInitLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillInitLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillinitlevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ActiveState;
        break;
      }
      
      // optional uint32 ActiveState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActiveState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activestate_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Skills = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skills(), output);
  }
  
  // optional uint32 SkillActNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->skillactnum(), output);
  }
  
  // optional uint32 SkillBookID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->skillbookid(), output);
  }
  
  // optional uint32 AddedSkillPoints = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->addedskillpoints(), output);
  }
  
  // optional uint32 SkillInitLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->skillinitlevel(), output);
  }
  
  // optional uint32 ActiveState = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->activestate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Skills = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skills(), target);
  }
  
  // optional uint32 SkillActNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->skillactnum(), target);
  }
  
  // optional uint32 SkillBookID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->skillbookid(), target);
  }
  
  // optional uint32 AddedSkillPoints = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->addedskillpoints(), target);
  }
  
  // optional uint32 SkillInitLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->skillinitlevel(), target);
  }
  
  // optional uint32 ActiveState = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->activestate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Skills = 1;
    if (has_skills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skills());
    }
    
    // optional uint32 SkillActNum = 2;
    if (has_skillactnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillactnum());
    }
    
    // optional uint32 SkillBookID = 3;
    if (has_skillbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillbookid());
    }
    
    // optional uint32 AddedSkillPoints = 4;
    if (has_addedskillpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addedskillpoints());
    }
    
    // optional uint32 SkillInitLevel = 5;
    if (has_skillinitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillinitlevel());
    }
    
    // optional uint32 ActiveState = 6;
    if (has_activestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activestate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillBox::MergeFrom(const PBSkillBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skills(from.skills());
    }
    if (from._has_bit(1)) {
      set_skillactnum(from.skillactnum());
    }
    if (from._has_bit(2)) {
      set_skillbookid(from.skillbookid());
    }
    if (from._has_bit(3)) {
      set_addedskillpoints(from.addedskillpoints());
    }
    if (from._has_bit(4)) {
      set_skillinitlevel(from.skillinitlevel());
    }
    if (from._has_bit(5)) {
      set_activestate(from.activestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillBox::CopyFrom(const PBSkillBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillBox::Swap(PBSkillBox* other) {
  if (other != this) {
    std::swap(skills_, other->skills_);
    std::swap(skillactnum_, other->skillactnum_);
    std::swap(skillbookid_, other->skillbookid_);
    std::swap(addedskillpoints_, other->addedskillpoints_);
    std::swap(skillinitlevel_, other->skillinitlevel_);
    std::swap(activestate_, other->activestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillBox_reflection_;
}

// ===================================================================

const ::std::string PBItemObject::_default_groomname_;
const ::std::string PBItemObject::_default_bridename_;
#ifndef _MSC_VER
const int PBItemObject::kItemIDFieldNumber;
const int PBItemObject::kNumberFieldNumber;
const int PBItemObject::kIndexFieldNumber;
const int PBItemObject::kInvalidTimeFieldNumber;
const int PBItemObject::kCooldownFieldNumber;
const int PBItemObject::kBindStatusFieldNumber;
const int PBItemObject::kObjGuIDFieldNumber;
const int PBItemObject::kUsedTimesFieldNumber;
const int PBItemObject::kItemContentFieldNumber;
const int PBItemObject::kPurchaseIDFieldNumber;
const int PBItemObject::kGroomNameFieldNumber;
const int PBItemObject::kBrideNameFieldNumber;
const int PBItemObject::kWeddingTimeFieldNumber;
const int PBItemObject::kWeddingTimeLengthFieldNumber;
#endif  // !_MSC_VER

PBItemObject::PBItemObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemObject::InitAsDefaultInstance() {  itemcontent_ = const_cast< ::PBItemContent*>(&::PBItemContent::default_instance());
}

PBItemObject::PBItemObject(const PBItemObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemObject::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  number_ = 0u;
  index_ = 0u;
  invalidtime_ = 0u;
  cooldown_ = 0u;
  bindstatus_ = 0u;
  objguid_ = GOOGLE_ULONGLONG(0);
  usedtimes_ = 0u;
  itemcontent_ = NULL;
  purchaseid_ = GOOGLE_ULONGLONG(0);
  groomname_ = const_cast< ::std::string*>(&_default_groomname_);
  bridename_ = const_cast< ::std::string*>(&_default_bridename_);
  weddingtime_ = 0u;
  weddingtimelength_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemObject::~PBItemObject() {
  SharedDtor();
}

void PBItemObject::SharedDtor() {
  if (groomname_ != &_default_groomname_) {
    delete groomname_;
  }
  if (bridename_ != &_default_bridename_) {
    delete bridename_;
  }
  if (this != default_instance_) {
    delete itemcontent_;
  }
}

const ::google::protobuf::Descriptor* PBItemObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemObject_descriptor_;
}

const PBItemObject& PBItemObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBItemObject* PBItemObject::default_instance_ = NULL;

PBItemObject* PBItemObject::New() const {
  return new PBItemObject;
}

void PBItemObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    number_ = 0u;
    index_ = 0u;
    invalidtime_ = 0u;
    cooldown_ = 0u;
    bindstatus_ = 0u;
    objguid_ = GOOGLE_ULONGLONG(0);
    usedtimes_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (itemcontent_ != NULL) itemcontent_->::PBItemContent::Clear();
    }
    purchaseid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(10)) {
      if (groomname_ != &_default_groomname_) {
        groomname_->clear();
      }
    }
    if (_has_bit(11)) {
      if (bridename_ != &_default_bridename_) {
        bridename_->clear();
      }
    }
    weddingtime_ = 0u;
    weddingtimelength_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }
      
      // optional uint32 Number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Number:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &number_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }
      
      // optional uint32 Index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Index:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_InvalidTime;
        break;
      }
      
      // optional uint32 InvalidTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvalidTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invalidtime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Cooldown;
        break;
      }
      
      // optional uint32 Cooldown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Cooldown:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooldown_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BindStatus;
        break;
      }
      
      // optional uint32 BindStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindstatus_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ObjGuID;
        break;
      }
      
      // optional uint64 ObjGuID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ObjGuID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &objguid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_UsedTimes;
        break;
      }
      
      // optional uint32 UsedTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UsedTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usedtimes_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_ItemContent;
        break;
      }
      
      // optional .PBItemContent ItemContent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemContent:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itemcontent()));
        if (input->ExpectTag(80)) goto parse_PurchaseID;
        break;
      }
      
      // optional uint64 PurchaseID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PurchaseID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &purchaseid_));
        _set_bit(9);
        if (input->ExpectTag(90)) goto parse_GroomName;
        break;
      }
      
      // optional string GroomName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroomName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_groomname()));
        if (input->ExpectTag(98)) goto parse_BrideName;
        break;
      }
      
      // optional string BrideName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BrideName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_bridename()));
        if (input->ExpectTag(104)) goto parse_WeddingTime;
        break;
      }
      
      // optional uint32 WeddingTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtime_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_WeddingTimeLength;
        break;
      }
      
      // optional uint32 WeddingTimeLength = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeddingTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weddingtimelength_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemObject::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->number(), output);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->index(), output);
  }
  
  // optional uint32 InvalidTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->invalidtime(), output);
  }
  
  // optional uint32 Cooldown = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->cooldown(), output);
  }
  
  // optional uint32 BindStatus = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->bindstatus(), output);
  }
  
  // optional uint64 ObjGuID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(7, this->objguid(), output);
  }
  
  // optional uint32 UsedTimes = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->usedtimes(), output);
  }
  
  // optional .PBItemContent ItemContent = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->itemcontent(), output);
  }
  
  // optional uint64 PurchaseID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(10, this->purchaseid(), output);
  }
  
  // optional string GroomName = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteString(11, this->groomname(), output);
  }
  
  // optional string BrideName = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteString(12, this->bridename(), output);
  }
  
  // optional uint32 WeddingTime = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->weddingtime(), output);
  }
  
  // optional uint32 WeddingTimeLength = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->weddingtimelength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 Number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->number(), target);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->index(), target);
  }
  
  // optional uint32 InvalidTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->invalidtime(), target);
  }
  
  // optional uint32 Cooldown = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->cooldown(), target);
  }
  
  // optional uint32 BindStatus = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->bindstatus(), target);
  }
  
  // optional uint64 ObjGuID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(7, this->objguid(), target);
  }
  
  // optional uint32 UsedTimes = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->usedtimes(), target);
  }
  
  // optional .PBItemContent ItemContent = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->itemcontent(), target);
  }
  
  // optional uint64 PurchaseID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(10, this->purchaseid(), target);
  }
  
  // optional string GroomName = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(11, this->groomname(), target);
  }
  
  // optional string BrideName = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(12, this->bridename(), target);
  }
  
  // optional uint32 WeddingTime = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->weddingtime(), target);
  }
  
  // optional uint32 WeddingTimeLength = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->weddingtimelength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->number());
    }
    
    // optional uint32 Index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 InvalidTime = 4;
    if (has_invalidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invalidtime());
    }
    
    // optional uint32 Cooldown = 5;
    if (has_cooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooldown());
    }
    
    // optional uint32 BindStatus = 6;
    if (has_bindstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindstatus());
    }
    
    // optional uint64 ObjGuID = 7;
    if (has_objguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->objguid());
    }
    
    // optional uint32 UsedTimes = 8;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usedtimes());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBItemContent ItemContent = 9;
    if (has_itemcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itemcontent());
    }
    
    // optional uint64 PurchaseID = 10;
    if (has_purchaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->purchaseid());
    }
    
    // optional string GroomName = 11;
    if (has_groomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->groomname());
    }
    
    // optional string BrideName = 12;
    if (has_bridename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->bridename());
    }
    
    // optional uint32 WeddingTime = 13;
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtime());
    }
    
    // optional uint32 WeddingTimeLength = 14;
    if (has_weddingtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weddingtimelength());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemObject::MergeFrom(const PBItemObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_invalidtime(from.invalidtime());
    }
    if (from._has_bit(4)) {
      set_cooldown(from.cooldown());
    }
    if (from._has_bit(5)) {
      set_bindstatus(from.bindstatus());
    }
    if (from._has_bit(6)) {
      set_objguid(from.objguid());
    }
    if (from._has_bit(7)) {
      set_usedtimes(from.usedtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_itemcontent()->::PBItemContent::MergeFrom(from.itemcontent());
    }
    if (from._has_bit(9)) {
      set_purchaseid(from.purchaseid());
    }
    if (from._has_bit(10)) {
      set_groomname(from.groomname());
    }
    if (from._has_bit(11)) {
      set_bridename(from.bridename());
    }
    if (from._has_bit(12)) {
      set_weddingtime(from.weddingtime());
    }
    if (from._has_bit(13)) {
      set_weddingtimelength(from.weddingtimelength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObject::CopyFrom(const PBItemObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObject::Swap(PBItemObject* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(number_, other->number_);
    std::swap(index_, other->index_);
    std::swap(invalidtime_, other->invalidtime_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(bindstatus_, other->bindstatus_);
    std::swap(objguid_, other->objguid_);
    std::swap(usedtimes_, other->usedtimes_);
    std::swap(itemcontent_, other->itemcontent_);
    std::swap(purchaseid_, other->purchaseid_);
    std::swap(groomname_, other->groomname_);
    std::swap(bridename_, other->bridename_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(weddingtimelength_, other->weddingtimelength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemObject::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemObject::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemObject::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemObject_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemContent::kRemainHPFieldNumber;
const int PBItemContent::kRemainMPFieldNumber;
const int PBItemContent::kRemainAPFieldNumber;
const int PBItemContent::kCurrentFieldNumber;
const int PBItemContent::kTelePosFieldNumber;
const int PBItemContent::kItemMWFieldNumber;
const int PBItemContent::kItemEquipFieldNumber;
const int PBItemContent::kLeftOffLineTimeFieldNumber;
const int PBItemContent::kExpFieldNumber;
#endif  // !_MSC_VER

PBItemContent::PBItemContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemContent::InitAsDefaultInstance() {  itemmw_ = const_cast< ::PBItemObjMW*>(&::PBItemObjMW::default_instance());
  itemequip_ = const_cast< ::PBItemObjEquip*>(&::PBItemObjEquip::default_instance());
}

PBItemContent::PBItemContent(const PBItemContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemContent::SharedCtor() {
  _cached_size_ = 0;
  remainhp_ = 0u;
  remainmp_ = 0u;
  remainap_ = 0u;
  current_ = 0u;
  itemmw_ = NULL;
  itemequip_ = NULL;
  leftofflinetime_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemContent::~PBItemContent() {
  SharedDtor();
}

void PBItemContent::SharedDtor() {
  if (this != default_instance_) {
    delete itemmw_;
    delete itemequip_;
  }
}

const ::google::protobuf::Descriptor* PBItemContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemContent_descriptor_;
}

const PBItemContent& PBItemContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBItemContent* PBItemContent::default_instance_ = NULL;

PBItemContent* PBItemContent::New() const {
  return new PBItemContent;
}

void PBItemContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remainhp_ = 0u;
    remainmp_ = 0u;
    remainap_ = 0u;
    current_ = 0u;
    if (_has_bit(5)) {
      if (itemmw_ != NULL) itemmw_->::PBItemObjMW::Clear();
    }
    if (_has_bit(6)) {
      if (itemequip_ != NULL) itemequip_->::PBItemObjEquip::Clear();
    }
    leftofflinetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
  }
  telepos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RemainHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &remainhp_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RemainMP;
        break;
      }
      
      // optional uint32 RemainMP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemainMP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &remainmp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RemainAP;
        break;
      }
      
      // optional uint32 RemainAP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemainAP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &remainap_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Current;
        break;
      }
      
      // optional uint32 Current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Current:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &current_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_TelePos;
        break;
      }
      
      // repeated .PBTelePostion TelePos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TelePos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_telepos()));
        if (input->ExpectTag(42)) goto parse_TelePos;
        if (input->ExpectTag(50)) goto parse_ItemMW;
        break;
      }
      
      // optional .PBItemObjMW ItemMW = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemMW:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itemmw()));
        if (input->ExpectTag(58)) goto parse_ItemEquip;
        break;
      }
      
      // optional .PBItemObjEquip ItemEquip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemEquip:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_itemequip()));
        if (input->ExpectTag(64)) goto parse_LeftOffLineTime;
        break;
      }
      
      // optional uint32 LeftOffLineTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftOffLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leftofflinetime_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemContent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RemainHP = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->remainhp(), output);
  }
  
  // optional uint32 RemainMP = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->remainmp(), output);
  }
  
  // optional uint32 RemainAP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->remainap(), output);
  }
  
  // optional uint32 Current = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->current(), output);
  }
  
  // repeated .PBTelePostion TelePos = 5;
  for (int i = 0; i < this->telepos_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->telepos(i), output);
  }
  
  // optional .PBItemObjMW ItemMW = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->itemmw(), output);
  }
  
  // optional .PBItemObjEquip ItemEquip = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->itemequip(), output);
  }
  
  // optional uint32 LeftOffLineTime = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->leftofflinetime(), output);
  }
  
  // optional uint32 Exp = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RemainHP = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->remainhp(), target);
  }
  
  // optional uint32 RemainMP = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->remainmp(), target);
  }
  
  // optional uint32 RemainAP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->remainap(), target);
  }
  
  // optional uint32 Current = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->current(), target);
  }
  
  // repeated .PBTelePostion TelePos = 5;
  for (int i = 0; i < this->telepos_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->telepos(i), target);
  }
  
  // optional .PBItemObjMW ItemMW = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->itemmw(), target);
  }
  
  // optional .PBItemObjEquip ItemEquip = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->itemequip(), target);
  }
  
  // optional uint32 LeftOffLineTime = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->leftofflinetime(), target);
  }
  
  // optional uint32 Exp = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RemainHP = 1;
    if (has_remainhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->remainhp());
    }
    
    // optional uint32 RemainMP = 2;
    if (has_remainmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->remainmp());
    }
    
    // optional uint32 RemainAP = 3;
    if (has_remainap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->remainap());
    }
    
    // optional uint32 Current = 4;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->current());
    }
    
    // optional .PBItemObjMW ItemMW = 6;
    if (has_itemmw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itemmw());
    }
    
    // optional .PBItemObjEquip ItemEquip = 7;
    if (has_itemequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->itemequip());
    }
    
    // optional uint32 LeftOffLineTime = 8;
    if (has_leftofflinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leftofflinetime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  // repeated .PBTelePostion TelePos = 5;
  total_size += 1 * this->telepos_size();
  for (int i = 0; i < this->telepos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->telepos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemContent::MergeFrom(const PBItemContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  telepos_.MergeFrom(from.telepos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_remainhp(from.remainhp());
    }
    if (from._has_bit(1)) {
      set_remainmp(from.remainmp());
    }
    if (from._has_bit(2)) {
      set_remainap(from.remainap());
    }
    if (from._has_bit(3)) {
      set_current(from.current());
    }
    if (from._has_bit(5)) {
      mutable_itemmw()->::PBItemObjMW::MergeFrom(from.itemmw());
    }
    if (from._has_bit(6)) {
      mutable_itemequip()->::PBItemObjEquip::MergeFrom(from.itemequip());
    }
    if (from._has_bit(7)) {
      set_leftofflinetime(from.leftofflinetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemContent::CopyFrom(const PBItemContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemContent::Swap(PBItemContent* other) {
  if (other != this) {
    std::swap(remainhp_, other->remainhp_);
    std::swap(remainmp_, other->remainmp_);
    std::swap(remainap_, other->remainap_);
    std::swap(current_, other->current_);
    telepos_.Swap(&other->telepos_);
    std::swap(itemmw_, other->itemmw_);
    std::swap(itemequip_, other->itemequip_);
    std::swap(leftofflinetime_, other->leftofflinetime_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemContent::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemContent::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemContent::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemContent_reflection_;
}

// ===================================================================

const ::std::string PBItemObjEquip::_default_name_;
const ::std::string PBItemObjEquip::_default_spousename_;
#ifndef _MSC_VER
const int PBItemObjEquip::kSlotPropertyFieldNumber;
const int PBItemObjEquip::kPropertyFieldNumber;
const int PBItemObjEquip::kSlotValueFieldNumber;
const int PBItemObjEquip::kLevelFieldNumber;
const int PBItemObjEquip::kSlotNumberFieldNumber;
const int PBItemObjEquip::kNameLengthFieldNumber;
const int PBItemObjEquip::kNameFieldNumber;
const int PBItemObjEquip::kSlotSpellFieldNumber;
const int PBItemObjEquip::kDurabilityFieldNumber;
const int PBItemObjEquip::kMaxSlotNumberFieldNumber;
const int PBItemObjEquip::kJudgeFieldNumber;
const int PBItemObjEquip::kResDefFieldNumber;
const int PBItemObjEquip::kResAttFieldNumber;
const int PBItemObjEquip::kDefLevelFieldNumber;
const int PBItemObjEquip::kAttLevelFieldNumber;
const int PBItemObjEquip::kMagicStoneIDFieldNumber;
const int PBItemObjEquip::kMagicStoneNumFieldNumber;
const int PBItemObjEquip::kBindFreeTimeFieldNumber;
const int PBItemObjEquip::kSpouseIDFieldNumber;
const int PBItemObjEquip::kSpouseNameFieldNumber;
const int PBItemObjEquip::kExtraTypeFieldNumber;
const int PBItemObjEquip::kBindTimeFieldNumber;
#endif  // !_MSC_VER

PBItemObjEquip::PBItemObjEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemObjEquip::InitAsDefaultInstance() {  maxslotnumber_ = const_cast< ::PBPropertyValue1*>(&::PBPropertyValue1::default_instance());
}

PBItemObjEquip::PBItemObjEquip(const PBItemObjEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemObjEquip::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  slotnumber_ = 0u;
  namelength_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  slotspell_ = 0u;
  durability_ = 0u;
  maxslotnumber_ = NULL;
  resdef_ = 0u;
  resatt_ = 0u;
  deflevel_ = 0u;
  attlevel_ = 0u;
  magicstoneid_ = 0u;
  magicstonenum_ = 0u;
  bindfreetime_ = 0u;
  spouseid_ = 0u;
  spousename_ = const_cast< ::std::string*>(&_default_spousename_);
  extratype_ = 0u;
  bindtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemObjEquip::~PBItemObjEquip() {
  SharedDtor();
}

void PBItemObjEquip::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (spousename_ != &_default_spousename_) {
    delete spousename_;
  }
  if (this != default_instance_) {
    delete maxslotnumber_;
  }
}

const ::google::protobuf::Descriptor* PBItemObjEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemObjEquip_descriptor_;
}

const PBItemObjEquip& PBItemObjEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBItemObjEquip* PBItemObjEquip::default_instance_ = NULL;

PBItemObjEquip* PBItemObjEquip::New() const {
  return new PBItemObjEquip;
}

void PBItemObjEquip::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    level_ = 0u;
    slotnumber_ = 0u;
    namelength_ = 0u;
    if (_has_bit(6)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    slotspell_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    durability_ = 0u;
    if (_has_bit(9)) {
      if (maxslotnumber_ != NULL) maxslotnumber_->::PBPropertyValue1::Clear();
    }
    resdef_ = 0u;
    resatt_ = 0u;
    deflevel_ = 0u;
    attlevel_ = 0u;
    magicstoneid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    magicstonenum_ = 0u;
    bindfreetime_ = 0u;
    spouseid_ = 0u;
    if (_has_bit(19)) {
      if (spousename_ != &_default_spousename_) {
        spousename_->clear();
      }
    }
    extratype_ = 0u;
    bindtime_ = 0u;
  }
  slotproperty_.Clear();
  property_.Clear();
  slotvalue_.Clear();
  judge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemObjEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 SlotProperty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotProperty:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slotproperty(value);
        if (input->ExpectTag(8)) goto parse_SlotProperty;
        if (input->ExpectTag(16)) goto parse_Property;
        break;
      }
      
      // repeated uint32 Property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Property:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_property(value);
        if (input->ExpectTag(16)) goto parse_Property;
        if (input->ExpectTag(24)) goto parse_SlotValue;
        break;
      }
      
      // repeated uint32 SlotValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slotvalue(value);
        if (input->ExpectTag(24)) goto parse_SlotValue;
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SlotNumber;
        break;
      }
      
      // optional uint32 SlotNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slotnumber_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_NameLength;
        break;
      }
      
      // optional uint32 NameLength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NameLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &namelength_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Name;
        break;
      }
      
      // optional string Name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(64)) goto parse_SlotSpell;
        break;
      }
      
      // optional uint32 SlotSpell = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotSpell:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slotspell_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Durability;
        break;
      }
      
      // optional uint32 Durability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Durability:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &durability_));
        _set_bit(8);
        if (input->ExpectTag(82)) goto parse_MaxSlotNumber;
        break;
      }
      
      // optional .PBPropertyValue1 MaxSlotNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MaxSlotNumber:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_maxslotnumber()));
        if (input->ExpectTag(88)) goto parse_Judge;
        break;
      }
      
      // repeated uint32 Judge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Judge:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_judge(value);
        if (input->ExpectTag(88)) goto parse_Judge;
        if (input->ExpectTag(96)) goto parse_ResDef;
        break;
      }
      
      // optional uint32 ResDef = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResDef:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resdef_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ResAtt;
        break;
      }
      
      // optional uint32 ResAtt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResAtt:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resatt_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_DefLevel;
        break;
      }
      
      // optional uint32 DefLevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DefLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &deflevel_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_AttLevel;
        break;
      }
      
      // optional uint32 AttLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AttLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &attlevel_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_MagicStoneID;
        break;
      }
      
      // optional uint32 MagicStoneID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MagicStoneID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &magicstoneid_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MagicStoneNum;
        break;
      }
      
      // optional uint32 MagicStoneNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MagicStoneNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &magicstonenum_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_BindFreeTime;
        break;
      }
      
      // optional uint32 BindFreeTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindFreeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindfreetime_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_SpouseID;
        break;
      }
      
      // optional uint32 SpouseID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpouseID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &spouseid_));
        _set_bit(18);
        if (input->ExpectTag(162)) goto parse_SpouseName;
        break;
      }
      
      // optional string SpouseName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpouseName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_spousename()));
        if (input->ExpectTag(168)) goto parse_ExtraType;
        break;
      }
      
      // optional uint32 ExtraType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extratype_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_BindTime;
        break;
      }
      
      // optional uint32 BindTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bindtime_));
        _set_bit(21);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemObjEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemObjEquip::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 SlotProperty = 1;
  for (int i = 0; i < this->slotproperty_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slotproperty(i), output);
  }
  
  // repeated uint32 Property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->property(i), output);
  }
  
  // repeated uint32 SlotValue = 3;
  for (int i = 0; i < this->slotvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->slotvalue(i), output);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint32 SlotNumber = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->slotnumber(), output);
  }
  
  // optional uint32 NameLength = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->namelength(), output);
  }
  
  // optional string Name = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->name(), output);
  }
  
  // optional uint32 SlotSpell = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->slotspell(), output);
  }
  
  // optional uint32 Durability = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->durability(), output);
  }
  
  // optional .PBPropertyValue1 MaxSlotNumber = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->maxslotnumber(), output);
  }
  
  // repeated uint32 Judge = 11;
  for (int i = 0; i < this->judge_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->judge(i), output);
  }
  
  // optional uint32 ResDef = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->resdef(), output);
  }
  
  // optional uint32 ResAtt = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->resatt(), output);
  }
  
  // optional uint32 DefLevel = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->deflevel(), output);
  }
  
  // optional uint32 AttLevel = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->attlevel(), output);
  }
  
  // optional uint32 MagicStoneID = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->magicstoneid(), output);
  }
  
  // optional uint32 MagicStoneNum = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->magicstonenum(), output);
  }
  
  // optional uint32 BindFreeTime = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->bindfreetime(), output);
  }
  
  // optional uint32 SpouseID = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->spouseid(), output);
  }
  
  // optional string SpouseName = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteString(20, this->spousename(), output);
  }
  
  // optional uint32 ExtraType = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->extratype(), output);
  }
  
  // optional uint32 BindTime = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->bindtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemObjEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 SlotProperty = 1;
  for (int i = 0; i < this->slotproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slotproperty(i), target);
  }
  
  // repeated uint32 Property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->property(i), target);
  }
  
  // repeated uint32 SlotValue = 3;
  for (int i = 0; i < this->slotvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->slotvalue(i), target);
  }
  
  // optional uint32 Level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 SlotNumber = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->slotnumber(), target);
  }
  
  // optional uint32 NameLength = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->namelength(), target);
  }
  
  // optional string Name = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->name(), target);
  }
  
  // optional uint32 SlotSpell = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->slotspell(), target);
  }
  
  // optional uint32 Durability = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->durability(), target);
  }
  
  // optional .PBPropertyValue1 MaxSlotNumber = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->maxslotnumber(), target);
  }
  
  // repeated uint32 Judge = 11;
  for (int i = 0; i < this->judge_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->judge(i), target);
  }
  
  // optional uint32 ResDef = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->resdef(), target);
  }
  
  // optional uint32 ResAtt = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->resatt(), target);
  }
  
  // optional uint32 DefLevel = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->deflevel(), target);
  }
  
  // optional uint32 AttLevel = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->attlevel(), target);
  }
  
  // optional uint32 MagicStoneID = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->magicstoneid(), target);
  }
  
  // optional uint32 MagicStoneNum = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->magicstonenum(), target);
  }
  
  // optional uint32 BindFreeTime = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->bindfreetime(), target);
  }
  
  // optional uint32 SpouseID = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->spouseid(), target);
  }
  
  // optional string SpouseName = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(20, this->spousename(), target);
  }
  
  // optional uint32 ExtraType = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->extratype(), target);
  }
  
  // optional uint32 BindTime = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->bindtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemObjEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 SlotNumber = 5;
    if (has_slotnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slotnumber());
    }
    
    // optional uint32 NameLength = 6;
    if (has_namelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->namelength());
    }
    
    // optional string Name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 SlotSpell = 8;
    if (has_slotspell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slotspell());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Durability = 9;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->durability());
    }
    
    // optional .PBPropertyValue1 MaxSlotNumber = 10;
    if (has_maxslotnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->maxslotnumber());
    }
    
    // optional uint32 ResDef = 12;
    if (has_resdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resdef());
    }
    
    // optional uint32 ResAtt = 13;
    if (has_resatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resatt());
    }
    
    // optional uint32 DefLevel = 14;
    if (has_deflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->deflevel());
    }
    
    // optional uint32 AttLevel = 15;
    if (has_attlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->attlevel());
    }
    
    // optional uint32 MagicStoneID = 16;
    if (has_magicstoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->magicstoneid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MagicStoneNum = 17;
    if (has_magicstonenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->magicstonenum());
    }
    
    // optional uint32 BindFreeTime = 18;
    if (has_bindfreetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindfreetime());
    }
    
    // optional uint32 SpouseID = 19;
    if (has_spouseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->spouseid());
    }
    
    // optional string SpouseName = 20;
    if (has_spousename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->spousename());
    }
    
    // optional uint32 ExtraType = 21;
    if (has_extratype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extratype());
    }
    
    // optional uint32 BindTime = 22;
    if (has_bindtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bindtime());
    }
    
  }
  // repeated uint32 SlotProperty = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotproperty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slotproperty(i));
    }
    total_size += 1 * this->slotproperty_size() + data_size;
  }
  
  // repeated uint32 Property = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->property_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->property(i));
    }
    total_size += 1 * this->property_size() + data_size;
  }
  
  // repeated uint32 SlotValue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slotvalue(i));
    }
    total_size += 1 * this->slotvalue_size() + data_size;
  }
  
  // repeated uint32 Judge = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->judge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->judge(i));
    }
    total_size += 1 * this->judge_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemObjEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemObjEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemObjEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemObjEquip::MergeFrom(const PBItemObjEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotproperty_.MergeFrom(from.slotproperty_);
  property_.MergeFrom(from.property_);
  slotvalue_.MergeFrom(from.slotvalue_);
  judge_.MergeFrom(from.judge_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from._has_bit(3)) {
      set_level(from.level());
    }
    if (from._has_bit(4)) {
      set_slotnumber(from.slotnumber());
    }
    if (from._has_bit(5)) {
      set_namelength(from.namelength());
    }
    if (from._has_bit(6)) {
      set_name(from.name());
    }
    if (from._has_bit(7)) {
      set_slotspell(from.slotspell());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_durability(from.durability());
    }
    if (from._has_bit(9)) {
      mutable_maxslotnumber()->::PBPropertyValue1::MergeFrom(from.maxslotnumber());
    }
    if (from._has_bit(11)) {
      set_resdef(from.resdef());
    }
    if (from._has_bit(12)) {
      set_resatt(from.resatt());
    }
    if (from._has_bit(13)) {
      set_deflevel(from.deflevel());
    }
    if (from._has_bit(14)) {
      set_attlevel(from.attlevel());
    }
    if (from._has_bit(15)) {
      set_magicstoneid(from.magicstoneid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_magicstonenum(from.magicstonenum());
    }
    if (from._has_bit(17)) {
      set_bindfreetime(from.bindfreetime());
    }
    if (from._has_bit(18)) {
      set_spouseid(from.spouseid());
    }
    if (from._has_bit(19)) {
      set_spousename(from.spousename());
    }
    if (from._has_bit(20)) {
      set_extratype(from.extratype());
    }
    if (from._has_bit(21)) {
      set_bindtime(from.bindtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemObjEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObjEquip::CopyFrom(const PBItemObjEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObjEquip::Swap(PBItemObjEquip* other) {
  if (other != this) {
    slotproperty_.Swap(&other->slotproperty_);
    property_.Swap(&other->property_);
    slotvalue_.Swap(&other->slotvalue_);
    std::swap(level_, other->level_);
    std::swap(slotnumber_, other->slotnumber_);
    std::swap(namelength_, other->namelength_);
    std::swap(name_, other->name_);
    std::swap(slotspell_, other->slotspell_);
    std::swap(durability_, other->durability_);
    std::swap(maxslotnumber_, other->maxslotnumber_);
    judge_.Swap(&other->judge_);
    std::swap(resdef_, other->resdef_);
    std::swap(resatt_, other->resatt_);
    std::swap(deflevel_, other->deflevel_);
    std::swap(attlevel_, other->attlevel_);
    std::swap(magicstoneid_, other->magicstoneid_);
    std::swap(magicstonenum_, other->magicstonenum_);
    std::swap(bindfreetime_, other->bindfreetime_);
    std::swap(spouseid_, other->spouseid_);
    std::swap(spousename_, other->spousename_);
    std::swap(extratype_, other->extratype_);
    std::swap(bindtime_, other->bindtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemObjEquip::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemObjEquip::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemObjEquip::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemObjEquip_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemObjMW::kMWLevelFieldNumber;
const int PBItemObjMW::kExpFieldNumber;
const int PBItemObjMW::kMpFieldNumber;
const int PBItemObjMW::kHpFieldNumber;
const int PBItemObjMW::kCurKeenpointsFieldNumber;
const int PBItemObjMW::kCurCalmpointsFieldNumber;
const int PBItemObjMW::kCurMagicpointsFieldNumber;
const int PBItemObjMW::kCurBierpointsFieldNumber;
const int PBItemObjMW::kCurImmortalpointsFieldNumber;
const int PBItemObjMW::kLeftPointsFieldNumber;
const int PBItemObjMW::kProBaseFieldNumber;
const int PBItemObjMW::kProUpFieldNumber;
const int PBItemObjMW::kProEffFieldNumber;
const int PBItemObjMW::kProSpirFieldNumber;
const int PBItemObjMW::kProcessValFieldNumber;
const int PBItemObjMW::kLeftSkillPointsFieldNumber;
const int PBItemObjMW::kMaxMpFieldNumber;
const int PBItemObjMW::kMaxHpFieldNumber;
const int PBItemObjMW::kIncMpFieldNumber;
const int PBItemObjMW::kIncHpFieldNumber;
const int PBItemObjMW::kSkillBoxFieldNumber;
const int PBItemObjMW::kAddKeenpointsFieldNumber;
const int PBItemObjMW::kAddCalmpointsFieldNumber;
const int PBItemObjMW::kAddMagicpointsFieldNumber;
const int PBItemObjMW::kAddBierpointsFieldNumber;
const int PBItemObjMW::kAddImmortalpointsFieldNumber;
const int PBItemObjMW::kSkillListFieldNumber;
const int PBItemObjMW::kJudgeFlagFieldNumber;
const int PBItemObjMW::kExtraKeenpointsFieldNumber;
const int PBItemObjMW::kExtraCalmpointsFieldNumber;
const int PBItemObjMW::kExtraMagicpointsFieldNumber;
const int PBItemObjMW::kExtraBierpointsFieldNumber;
const int PBItemObjMW::kExtraImmortalpointsFieldNumber;
const int PBItemObjMW::kPlayerAddPointLastLevelFieldNumber;
const int PBItemObjMW::kLeftPointsLastLevelFieldNumber;
const int PBItemObjMW::kNewAddPointsFieldNumber;
const int PBItemObjMW::kNewAddSkillPointsFieldNumber;
const int PBItemObjMW::kStepClearStateFieldNumber;
const int PBItemObjMW::kLastAddedSkillBoxIndexFieldNumber;
const int PBItemObjMW::kLastLevelProcessValFieldNumber;
const int PBItemObjMW::kNextActBoxIndexFieldNumber;
const int PBItemObjMW::kLastLevelNextActBoxFieldNumber;
const int PBItemObjMW::kQLTempIDFieldNumber;
#endif  // !_MSC_VER

PBItemObjMW::PBItemObjMW()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemObjMW::InitAsDefaultInstance() {  skilllist_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
}

PBItemObjMW::PBItemObjMW(const PBItemObjMW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemObjMW::SharedCtor() {
  _cached_size_ = 0;
  mwlevel_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  mp_ = 0u;
  hp_ = 0u;
  curkeenpoints_ = 0u;
  curcalmpoints_ = 0u;
  curmagicpoints_ = 0u;
  curbierpoints_ = 0u;
  curimmortalpoints_ = 0u;
  leftpoints_ = 0u;
  probase_ = 0u;
  proup_ = 0u;
  proeff_ = 0u;
  prospir_ = 0u;
  processval_ = 0u;
  leftskillpoints_ = 0u;
  maxmp_ = 0u;
  maxhp_ = 0u;
  incmp_ = 0u;
  inchp_ = 0u;
  addkeenpoints_ = 0u;
  addcalmpoints_ = 0u;
  addmagicpoints_ = 0u;
  addbierpoints_ = 0u;
  addimmortalpoints_ = 0u;
  skilllist_ = NULL;
  judgeflag_ = 0u;
  extrakeenpoints_ = 0u;
  extracalmpoints_ = 0u;
  extramagicpoints_ = 0u;
  extrabierpoints_ = 0u;
  extraimmortalpoints_ = 0u;
  leftpointslastlevel_ = 0u;
  newaddpoints_ = 0u;
  newaddskillpoints_ = 0u;
  stepclearstate_ = 0u;
  lastaddedskillboxindex_ = 0u;
  lastlevelprocessval_ = 0u;
  nextactboxindex_ = 0u;
  lastlevelnextactbox_ = 0u;
  qltempid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemObjMW::~PBItemObjMW() {
  SharedDtor();
}

void PBItemObjMW::SharedDtor() {
  if (this != default_instance_) {
    delete skilllist_;
  }
}

const ::google::protobuf::Descriptor* PBItemObjMW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemObjMW_descriptor_;
}

const PBItemObjMW& PBItemObjMW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBItemObjMW* PBItemObjMW::default_instance_ = NULL;

PBItemObjMW* PBItemObjMW::New() const {
  return new PBItemObjMW;
}

void PBItemObjMW::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mwlevel_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    mp_ = 0u;
    hp_ = 0u;
    curkeenpoints_ = 0u;
    curcalmpoints_ = 0u;
    curmagicpoints_ = 0u;
    curbierpoints_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curimmortalpoints_ = 0u;
    leftpoints_ = 0u;
    probase_ = 0u;
    proup_ = 0u;
    proeff_ = 0u;
    prospir_ = 0u;
    processval_ = 0u;
    leftskillpoints_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maxmp_ = 0u;
    maxhp_ = 0u;
    incmp_ = 0u;
    inchp_ = 0u;
    addkeenpoints_ = 0u;
    addcalmpoints_ = 0u;
    addmagicpoints_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    addbierpoints_ = 0u;
    addimmortalpoints_ = 0u;
    if (_has_bit(26)) {
      if (skilllist_ != NULL) skilllist_->::PBSkillList::Clear();
    }
    judgeflag_ = 0u;
    extrakeenpoints_ = 0u;
    extracalmpoints_ = 0u;
    extramagicpoints_ = 0u;
    extrabierpoints_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    extraimmortalpoints_ = 0u;
    leftpointslastlevel_ = 0u;
    newaddpoints_ = 0u;
    newaddskillpoints_ = 0u;
    stepclearstate_ = 0u;
    lastaddedskillboxindex_ = 0u;
    lastlevelprocessval_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    nextactboxindex_ = 0u;
    lastlevelnextactbox_ = 0u;
    qltempid_ = 0u;
  }
  skillbox_.Clear();
  playeraddpointlastlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemObjMW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MWLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mwlevel_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }
      
      // optional uint64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &exp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Mp;
        break;
      }
      
      // optional uint32 Mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Mp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Hp;
        break;
      }
      
      // optional uint32 Hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Hp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hp_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CurKeenpoints;
        break;
      }
      
      // optional uint32 CurKeenpoints = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurKeenpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curkeenpoints_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CurCalmpoints;
        break;
      }
      
      // optional uint32 CurCalmpoints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurCalmpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curcalmpoints_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CurMagicpoints;
        break;
      }
      
      // optional uint32 CurMagicpoints = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurMagicpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curmagicpoints_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CurBierpoints;
        break;
      }
      
      // optional uint32 CurBierpoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurBierpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curbierpoints_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_CurImmortalpoints;
        break;
      }
      
      // optional uint32 CurImmortalpoints = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurImmortalpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curimmortalpoints_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LeftPoints;
        break;
      }
      
      // optional uint32 LeftPoints = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftPoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leftpoints_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ProBase;
        break;
      }
      
      // optional uint32 ProBase = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProBase:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &probase_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_ProUp;
        break;
      }
      
      // optional uint32 ProUp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &proup_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_ProEff;
        break;
      }
      
      // optional uint32 ProEff = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProEff:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &proeff_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_ProSpir;
        break;
      }
      
      // optional uint32 ProSpir = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProSpir:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prospir_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_ProcessVal;
        break;
      }
      
      // optional uint32 ProcessVal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProcessVal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &processval_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_LeftSkillPoints;
        break;
      }
      
      // optional uint32 LeftSkillPoints = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftSkillPoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leftskillpoints_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_MaxMp;
        break;
      }
      
      // optional uint32 MaxMp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxMp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxmp_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_MaxHp;
        break;
      }
      
      // optional uint32 MaxHp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxhp_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_IncMp;
        break;
      }
      
      // optional uint32 IncMp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncMp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &incmp_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_IncHp;
        break;
      }
      
      // optional uint32 IncHp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncHp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inchp_));
        _set_bit(19);
        if (input->ExpectTag(170)) goto parse_SkillBox;
        break;
      }
      
      // repeated .PBSkillBox SkillBox = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillBox:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skillbox()));
        if (input->ExpectTag(170)) goto parse_SkillBox;
        if (input->ExpectTag(176)) goto parse_AddKeenpoints;
        break;
      }
      
      // optional uint32 AddKeenpoints = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddKeenpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addkeenpoints_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_AddCalmpoints;
        break;
      }
      
      // optional uint32 AddCalmpoints = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddCalmpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addcalmpoints_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_AddMagicpoints;
        break;
      }
      
      // optional uint32 AddMagicpoints = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddMagicpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addmagicpoints_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_AddBierpoints;
        break;
      }
      
      // optional uint32 AddBierpoints = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddBierpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addbierpoints_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_AddImmortalpoints;
        break;
      }
      
      // optional uint32 AddImmortalpoints = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AddImmortalpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &addimmortalpoints_));
        _set_bit(25);
        if (input->ExpectTag(218)) goto parse_SkillList;
        break;
      }
      
      // optional .PBSkillList SkillList = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skilllist()));
        if (input->ExpectTag(224)) goto parse_JudgeFlag;
        break;
      }
      
      // optional uint32 JudgeFlag = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_JudgeFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &judgeflag_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_ExtraKeenpoints;
        break;
      }
      
      // optional uint32 ExtraKeenpoints = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraKeenpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extrakeenpoints_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_ExtraCalmpoints;
        break;
      }
      
      // optional uint32 ExtraCalmpoints = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraCalmpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extracalmpoints_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_ExtraMagicpoints;
        break;
      }
      
      // optional uint32 ExtraMagicpoints = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraMagicpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extramagicpoints_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_ExtraBierpoints;
        break;
      }
      
      // optional uint32 ExtraBierpoints = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraBierpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extrabierpoints_));
        _set_bit(31);
        if (input->ExpectTag(264)) goto parse_ExtraImmortalpoints;
        break;
      }
      
      // optional uint32 ExtraImmortalpoints = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExtraImmortalpoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &extraimmortalpoints_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_PlayerAddPointLastLevel;
        break;
      }
      
      // repeated uint32 PlayerAddPointLastLevel = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerAddPointLastLevel:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_playeraddpointlastlevel(value);
        if (input->ExpectTag(272)) goto parse_PlayerAddPointLastLevel;
        if (input->ExpectTag(280)) goto parse_LeftPointsLastLevel;
        break;
      }
      
      // optional uint32 LeftPointsLastLevel = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LeftPointsLastLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &leftpointslastlevel_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_NewAddPoints;
        break;
      }
      
      // optional uint32 NewAddPoints = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewAddPoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newaddpoints_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_NewAddSkillPoints;
        break;
      }
      
      // optional uint32 NewAddSkillPoints = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewAddSkillPoints:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &newaddskillpoints_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_StepClearState;
        break;
      }
      
      // optional uint32 StepClearState = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StepClearState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stepclearstate_));
        _set_bit(37);
        if (input->ExpectTag(312)) goto parse_LastAddedSkillBoxIndex;
        break;
      }
      
      // optional uint32 LastAddedSkillBoxIndex = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastAddedSkillBoxIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastaddedskillboxindex_));
        _set_bit(38);
        if (input->ExpectTag(320)) goto parse_LastLevelProcessVal;
        break;
      }
      
      // optional uint32 LastLevelProcessVal = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastLevelProcessVal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastlevelprocessval_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_NextActBoxIndex;
        break;
      }
      
      // optional uint32 NextActBoxIndex = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NextActBoxIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nextactboxindex_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_LastLevelNextActBox;
        break;
      }
      
      // optional uint32 LastLevelNextActBox = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastLevelNextActBox:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastlevelnextactbox_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_QLTempID;
        break;
      }
      
      // optional uint32 QLTempID = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QLTempID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &qltempid_));
        _set_bit(42);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemObjMW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemObjMW::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MWLevel = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mwlevel(), output);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->exp(), output);
  }
  
  // optional uint32 Mp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mp(), output);
  }
  
  // optional uint32 Hp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->hp(), output);
  }
  
  // optional uint32 CurKeenpoints = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->curkeenpoints(), output);
  }
  
  // optional uint32 CurCalmpoints = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->curcalmpoints(), output);
  }
  
  // optional uint32 CurMagicpoints = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->curmagicpoints(), output);
  }
  
  // optional uint32 CurBierpoints = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->curbierpoints(), output);
  }
  
  // optional uint32 CurImmortalpoints = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->curimmortalpoints(), output);
  }
  
  // optional uint32 LeftPoints = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->leftpoints(), output);
  }
  
  // optional uint32 ProBase = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->probase(), output);
  }
  
  // optional uint32 ProUp = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->proup(), output);
  }
  
  // optional uint32 ProEff = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->proeff(), output);
  }
  
  // optional uint32 ProSpir = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->prospir(), output);
  }
  
  // optional uint32 ProcessVal = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->processval(), output);
  }
  
  // optional uint32 LeftSkillPoints = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->leftskillpoints(), output);
  }
  
  // optional uint32 MaxMp = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->maxmp(), output);
  }
  
  // optional uint32 MaxHp = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->maxhp(), output);
  }
  
  // optional uint32 IncMp = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->incmp(), output);
  }
  
  // optional uint32 IncHp = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->inchp(), output);
  }
  
  // repeated .PBSkillBox SkillBox = 21;
  for (int i = 0; i < this->skillbox_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->skillbox(i), output);
  }
  
  // optional uint32 AddKeenpoints = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->addkeenpoints(), output);
  }
  
  // optional uint32 AddCalmpoints = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->addcalmpoints(), output);
  }
  
  // optional uint32 AddMagicpoints = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->addmagicpoints(), output);
  }
  
  // optional uint32 AddBierpoints = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->addbierpoints(), output);
  }
  
  // optional uint32 AddImmortalpoints = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(26, this->addimmortalpoints(), output);
  }
  
  // optional .PBSkillList SkillList = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->skilllist(), output);
  }
  
  // optional uint32 JudgeFlag = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->judgeflag(), output);
  }
  
  // optional uint32 ExtraKeenpoints = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->extrakeenpoints(), output);
  }
  
  // optional uint32 ExtraCalmpoints = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->extracalmpoints(), output);
  }
  
  // optional uint32 ExtraMagicpoints = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->extramagicpoints(), output);
  }
  
  // optional uint32 ExtraBierpoints = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(32, this->extrabierpoints(), output);
  }
  
  // optional uint32 ExtraImmortalpoints = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->extraimmortalpoints(), output);
  }
  
  // repeated uint32 PlayerAddPointLastLevel = 34;
  for (int i = 0; i < this->playeraddpointlastlevel_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->playeraddpointlastlevel(i), output);
  }
  
  // optional uint32 LeftPointsLastLevel = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->leftpointslastlevel(), output);
  }
  
  // optional uint32 NewAddPoints = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->newaddpoints(), output);
  }
  
  // optional uint32 NewAddSkillPoints = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->newaddskillpoints(), output);
  }
  
  // optional uint32 StepClearState = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->stepclearstate(), output);
  }
  
  // optional uint32 LastAddedSkillBoxIndex = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(39, this->lastaddedskillboxindex(), output);
  }
  
  // optional uint32 LastLevelProcessVal = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(40, this->lastlevelprocessval(), output);
  }
  
  // optional uint32 NextActBoxIndex = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(41, this->nextactboxindex(), output);
  }
  
  // optional uint32 LastLevelNextActBox = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(42, this->lastlevelnextactbox(), output);
  }
  
  // optional uint32 QLTempID = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(43, this->qltempid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemObjMW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MWLevel = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mwlevel(), target);
  }
  
  // optional uint64 Exp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->exp(), target);
  }
  
  // optional uint32 Mp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mp(), target);
  }
  
  // optional uint32 Hp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->hp(), target);
  }
  
  // optional uint32 CurKeenpoints = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->curkeenpoints(), target);
  }
  
  // optional uint32 CurCalmpoints = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->curcalmpoints(), target);
  }
  
  // optional uint32 CurMagicpoints = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->curmagicpoints(), target);
  }
  
  // optional uint32 CurBierpoints = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->curbierpoints(), target);
  }
  
  // optional uint32 CurImmortalpoints = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->curimmortalpoints(), target);
  }
  
  // optional uint32 LeftPoints = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->leftpoints(), target);
  }
  
  // optional uint32 ProBase = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->probase(), target);
  }
  
  // optional uint32 ProUp = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->proup(), target);
  }
  
  // optional uint32 ProEff = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->proeff(), target);
  }
  
  // optional uint32 ProSpir = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->prospir(), target);
  }
  
  // optional uint32 ProcessVal = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->processval(), target);
  }
  
  // optional uint32 LeftSkillPoints = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->leftskillpoints(), target);
  }
  
  // optional uint32 MaxMp = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->maxmp(), target);
  }
  
  // optional uint32 MaxHp = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->maxhp(), target);
  }
  
  // optional uint32 IncMp = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->incmp(), target);
  }
  
  // optional uint32 IncHp = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->inchp(), target);
  }
  
  // repeated .PBSkillBox SkillBox = 21;
  for (int i = 0; i < this->skillbox_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->skillbox(i), target);
  }
  
  // optional uint32 AddKeenpoints = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->addkeenpoints(), target);
  }
  
  // optional uint32 AddCalmpoints = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->addcalmpoints(), target);
  }
  
  // optional uint32 AddMagicpoints = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->addmagicpoints(), target);
  }
  
  // optional uint32 AddBierpoints = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->addbierpoints(), target);
  }
  
  // optional uint32 AddImmortalpoints = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(26, this->addimmortalpoints(), target);
  }
  
  // optional .PBSkillList SkillList = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->skilllist(), target);
  }
  
  // optional uint32 JudgeFlag = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->judgeflag(), target);
  }
  
  // optional uint32 ExtraKeenpoints = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->extrakeenpoints(), target);
  }
  
  // optional uint32 ExtraCalmpoints = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->extracalmpoints(), target);
  }
  
  // optional uint32 ExtraMagicpoints = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->extramagicpoints(), target);
  }
  
  // optional uint32 ExtraBierpoints = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(32, this->extrabierpoints(), target);
  }
  
  // optional uint32 ExtraImmortalpoints = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->extraimmortalpoints(), target);
  }
  
  // repeated uint32 PlayerAddPointLastLevel = 34;
  for (int i = 0; i < this->playeraddpointlastlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->playeraddpointlastlevel(i), target);
  }
  
  // optional uint32 LeftPointsLastLevel = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->leftpointslastlevel(), target);
  }
  
  // optional uint32 NewAddPoints = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->newaddpoints(), target);
  }
  
  // optional uint32 NewAddSkillPoints = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->newaddskillpoints(), target);
  }
  
  // optional uint32 StepClearState = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->stepclearstate(), target);
  }
  
  // optional uint32 LastAddedSkillBoxIndex = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(39, this->lastaddedskillboxindex(), target);
  }
  
  // optional uint32 LastLevelProcessVal = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(40, this->lastlevelprocessval(), target);
  }
  
  // optional uint32 NextActBoxIndex = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(41, this->nextactboxindex(), target);
  }
  
  // optional uint32 LastLevelNextActBox = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(42, this->lastlevelnextactbox(), target);
  }
  
  // optional uint32 QLTempID = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(43, this->qltempid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemObjMW::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MWLevel = 1;
    if (has_mwlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mwlevel());
    }
    
    // optional uint64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->exp());
    }
    
    // optional uint32 Mp = 3;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mp());
    }
    
    // optional uint32 Hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hp());
    }
    
    // optional uint32 CurKeenpoints = 5;
    if (has_curkeenpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curkeenpoints());
    }
    
    // optional uint32 CurCalmpoints = 6;
    if (has_curcalmpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curcalmpoints());
    }
    
    // optional uint32 CurMagicpoints = 7;
    if (has_curmagicpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curmagicpoints());
    }
    
    // optional uint32 CurBierpoints = 8;
    if (has_curbierpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curbierpoints());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CurImmortalpoints = 9;
    if (has_curimmortalpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curimmortalpoints());
    }
    
    // optional uint32 LeftPoints = 10;
    if (has_leftpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leftpoints());
    }
    
    // optional uint32 ProBase = 11;
    if (has_probase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->probase());
    }
    
    // optional uint32 ProUp = 12;
    if (has_proup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->proup());
    }
    
    // optional uint32 ProEff = 13;
    if (has_proeff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->proeff());
    }
    
    // optional uint32 ProSpir = 14;
    if (has_prospir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prospir());
    }
    
    // optional uint32 ProcessVal = 15;
    if (has_processval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->processval());
    }
    
    // optional uint32 LeftSkillPoints = 16;
    if (has_leftskillpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leftskillpoints());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 MaxMp = 17;
    if (has_maxmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxmp());
    }
    
    // optional uint32 MaxHp = 18;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxhp());
    }
    
    // optional uint32 IncMp = 19;
    if (has_incmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->incmp());
    }
    
    // optional uint32 IncHp = 20;
    if (has_inchp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inchp());
    }
    
    // optional uint32 AddKeenpoints = 22;
    if (has_addkeenpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addkeenpoints());
    }
    
    // optional uint32 AddCalmpoints = 23;
    if (has_addcalmpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addcalmpoints());
    }
    
    // optional uint32 AddMagicpoints = 24;
    if (has_addmagicpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addmagicpoints());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 AddBierpoints = 25;
    if (has_addbierpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addbierpoints());
    }
    
    // optional uint32 AddImmortalpoints = 26;
    if (has_addimmortalpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->addimmortalpoints());
    }
    
    // optional .PBSkillList SkillList = 27;
    if (has_skilllist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skilllist());
    }
    
    // optional uint32 JudgeFlag = 28;
    if (has_judgeflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->judgeflag());
    }
    
    // optional uint32 ExtraKeenpoints = 29;
    if (has_extrakeenpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extrakeenpoints());
    }
    
    // optional uint32 ExtraCalmpoints = 30;
    if (has_extracalmpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extracalmpoints());
    }
    
    // optional uint32 ExtraMagicpoints = 31;
    if (has_extramagicpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extramagicpoints());
    }
    
    // optional uint32 ExtraBierpoints = 32;
    if (has_extrabierpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extrabierpoints());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 ExtraImmortalpoints = 33;
    if (has_extraimmortalpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->extraimmortalpoints());
    }
    
    // optional uint32 LeftPointsLastLevel = 35;
    if (has_leftpointslastlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->leftpointslastlevel());
    }
    
    // optional uint32 NewAddPoints = 36;
    if (has_newaddpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newaddpoints());
    }
    
    // optional uint32 NewAddSkillPoints = 37;
    if (has_newaddskillpoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->newaddskillpoints());
    }
    
    // optional uint32 StepClearState = 38;
    if (has_stepclearstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stepclearstate());
    }
    
    // optional uint32 LastAddedSkillBoxIndex = 39;
    if (has_lastaddedskillboxindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastaddedskillboxindex());
    }
    
    // optional uint32 LastLevelProcessVal = 40;
    if (has_lastlevelprocessval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastlevelprocessval());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 NextActBoxIndex = 41;
    if (has_nextactboxindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nextactboxindex());
    }
    
    // optional uint32 LastLevelNextActBox = 42;
    if (has_lastlevelnextactbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastlevelnextactbox());
    }
    
    // optional uint32 QLTempID = 43;
    if (has_qltempid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->qltempid());
    }
    
  }
  // repeated .PBSkillBox SkillBox = 21;
  total_size += 2 * this->skillbox_size();
  for (int i = 0; i < this->skillbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skillbox(i));
  }
  
  // repeated uint32 PlayerAddPointLastLevel = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeraddpointlastlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->playeraddpointlastlevel(i));
    }
    total_size += 2 * this->playeraddpointlastlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemObjMW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemObjMW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemObjMW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemObjMW::MergeFrom(const PBItemObjMW& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillbox_.MergeFrom(from.skillbox_);
  playeraddpointlastlevel_.MergeFrom(from.playeraddpointlastlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mwlevel(from.mwlevel());
    }
    if (from._has_bit(1)) {
      set_exp(from.exp());
    }
    if (from._has_bit(2)) {
      set_mp(from.mp());
    }
    if (from._has_bit(3)) {
      set_hp(from.hp());
    }
    if (from._has_bit(4)) {
      set_curkeenpoints(from.curkeenpoints());
    }
    if (from._has_bit(5)) {
      set_curcalmpoints(from.curcalmpoints());
    }
    if (from._has_bit(6)) {
      set_curmagicpoints(from.curmagicpoints());
    }
    if (from._has_bit(7)) {
      set_curbierpoints(from.curbierpoints());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_curimmortalpoints(from.curimmortalpoints());
    }
    if (from._has_bit(9)) {
      set_leftpoints(from.leftpoints());
    }
    if (from._has_bit(10)) {
      set_probase(from.probase());
    }
    if (from._has_bit(11)) {
      set_proup(from.proup());
    }
    if (from._has_bit(12)) {
      set_proeff(from.proeff());
    }
    if (from._has_bit(13)) {
      set_prospir(from.prospir());
    }
    if (from._has_bit(14)) {
      set_processval(from.processval());
    }
    if (from._has_bit(15)) {
      set_leftskillpoints(from.leftskillpoints());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_maxmp(from.maxmp());
    }
    if (from._has_bit(17)) {
      set_maxhp(from.maxhp());
    }
    if (from._has_bit(18)) {
      set_incmp(from.incmp());
    }
    if (from._has_bit(19)) {
      set_inchp(from.inchp());
    }
    if (from._has_bit(21)) {
      set_addkeenpoints(from.addkeenpoints());
    }
    if (from._has_bit(22)) {
      set_addcalmpoints(from.addcalmpoints());
    }
    if (from._has_bit(23)) {
      set_addmagicpoints(from.addmagicpoints());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_addbierpoints(from.addbierpoints());
    }
    if (from._has_bit(25)) {
      set_addimmortalpoints(from.addimmortalpoints());
    }
    if (from._has_bit(26)) {
      mutable_skilllist()->::PBSkillList::MergeFrom(from.skilllist());
    }
    if (from._has_bit(27)) {
      set_judgeflag(from.judgeflag());
    }
    if (from._has_bit(28)) {
      set_extrakeenpoints(from.extrakeenpoints());
    }
    if (from._has_bit(29)) {
      set_extracalmpoints(from.extracalmpoints());
    }
    if (from._has_bit(30)) {
      set_extramagicpoints(from.extramagicpoints());
    }
    if (from._has_bit(31)) {
      set_extrabierpoints(from.extrabierpoints());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_extraimmortalpoints(from.extraimmortalpoints());
    }
    if (from._has_bit(34)) {
      set_leftpointslastlevel(from.leftpointslastlevel());
    }
    if (from._has_bit(35)) {
      set_newaddpoints(from.newaddpoints());
    }
    if (from._has_bit(36)) {
      set_newaddskillpoints(from.newaddskillpoints());
    }
    if (from._has_bit(37)) {
      set_stepclearstate(from.stepclearstate());
    }
    if (from._has_bit(38)) {
      set_lastaddedskillboxindex(from.lastaddedskillboxindex());
    }
    if (from._has_bit(39)) {
      set_lastlevelprocessval(from.lastlevelprocessval());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_nextactboxindex(from.nextactboxindex());
    }
    if (from._has_bit(41)) {
      set_lastlevelnextactbox(from.lastlevelnextactbox());
    }
    if (from._has_bit(42)) {
      set_qltempid(from.qltempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemObjMW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObjMW::CopyFrom(const PBItemObjMW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemObjMW::Swap(PBItemObjMW* other) {
  if (other != this) {
    std::swap(mwlevel_, other->mwlevel_);
    std::swap(exp_, other->exp_);
    std::swap(mp_, other->mp_);
    std::swap(hp_, other->hp_);
    std::swap(curkeenpoints_, other->curkeenpoints_);
    std::swap(curcalmpoints_, other->curcalmpoints_);
    std::swap(curmagicpoints_, other->curmagicpoints_);
    std::swap(curbierpoints_, other->curbierpoints_);
    std::swap(curimmortalpoints_, other->curimmortalpoints_);
    std::swap(leftpoints_, other->leftpoints_);
    std::swap(probase_, other->probase_);
    std::swap(proup_, other->proup_);
    std::swap(proeff_, other->proeff_);
    std::swap(prospir_, other->prospir_);
    std::swap(processval_, other->processval_);
    std::swap(leftskillpoints_, other->leftskillpoints_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(incmp_, other->incmp_);
    std::swap(inchp_, other->inchp_);
    skillbox_.Swap(&other->skillbox_);
    std::swap(addkeenpoints_, other->addkeenpoints_);
    std::swap(addcalmpoints_, other->addcalmpoints_);
    std::swap(addmagicpoints_, other->addmagicpoints_);
    std::swap(addbierpoints_, other->addbierpoints_);
    std::swap(addimmortalpoints_, other->addimmortalpoints_);
    std::swap(skilllist_, other->skilllist_);
    std::swap(judgeflag_, other->judgeflag_);
    std::swap(extrakeenpoints_, other->extrakeenpoints_);
    std::swap(extracalmpoints_, other->extracalmpoints_);
    std::swap(extramagicpoints_, other->extramagicpoints_);
    std::swap(extrabierpoints_, other->extrabierpoints_);
    std::swap(extraimmortalpoints_, other->extraimmortalpoints_);
    playeraddpointlastlevel_.Swap(&other->playeraddpointlastlevel_);
    std::swap(leftpointslastlevel_, other->leftpointslastlevel_);
    std::swap(newaddpoints_, other->newaddpoints_);
    std::swap(newaddskillpoints_, other->newaddskillpoints_);
    std::swap(stepclearstate_, other->stepclearstate_);
    std::swap(lastaddedskillboxindex_, other->lastaddedskillboxindex_);
    std::swap(lastlevelprocessval_, other->lastlevelprocessval_);
    std::swap(nextactboxindex_, other->nextactboxindex_);
    std::swap(lastlevelnextactbox_, other->lastlevelnextactbox_);
    std::swap(qltempid_, other->qltempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemObjMW::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemObjMW::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemObjMW::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemObjMW_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBItemBox::kReleaseIndexFieldNumber;
const int PBItemBox::kItemObjectsFieldNumber;
const int PBItemBox::kKitBagFieldNumber;
const int PBItemBox::kKitLockedFieldNumber;
#endif  // !_MSC_VER

PBItemBox::PBItemBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemBox::InitAsDefaultInstance() {}

PBItemBox::PBItemBox(const PBItemBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemBox::SharedCtor() {
  _cached_size_ = 0;
  releaseindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemBox::~PBItemBox() {
  SharedDtor();
}

void PBItemBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBItemBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemBox_descriptor_;
}

const PBItemBox& PBItemBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBItemBox* PBItemBox::default_instance_ = NULL;

PBItemBox* PBItemBox::New() const {
  return new PBItemBox;
}

void PBItemBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    releaseindex_ = 0u;
  }
  itemobjects_.Clear();
  kitbag_.Clear();
  kitlocked_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ReleaseIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &releaseindex_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_ItemObjects;
        break;
      }
      
      // repeated .PBItemObject ItemObjects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemObjects:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itemobjects()));
        if (input->ExpectTag(18)) goto parse_ItemObjects;
        if (input->ExpectTag(26)) goto parse_KitBag;
        break;
      }
      
      // repeated .PBItemObject KitBag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_KitBag:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_kitbag()));
        if (input->ExpectTag(26)) goto parse_KitBag;
        if (input->ExpectTag(32)) goto parse_KitLocked;
        break;
      }
      
      // repeated uint32 KitLocked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KitLocked:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_kitlocked(value);
        if (input->ExpectTag(32)) goto parse_KitLocked;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBItemBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ReleaseIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->releaseindex(), output);
  }
  
  // repeated .PBItemObject ItemObjects = 2;
  for (int i = 0; i < this->itemobjects_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->itemobjects(i), output);
  }
  
  // repeated .PBItemObject KitBag = 3;
  for (int i = 0; i < this->kitbag_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->kitbag(i), output);
  }
  
  // repeated uint32 KitLocked = 4;
  for (int i = 0; i < this->kitlocked_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->kitlocked(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ReleaseIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->releaseindex(), target);
  }
  
  // repeated .PBItemObject ItemObjects = 2;
  for (int i = 0; i < this->itemobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->itemobjects(i), target);
  }
  
  // repeated .PBItemObject KitBag = 3;
  for (int i = 0; i < this->kitbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->kitbag(i), target);
  }
  
  // repeated uint32 KitLocked = 4;
  for (int i = 0; i < this->kitlocked_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->kitlocked(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ReleaseIndex = 1;
    if (has_releaseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->releaseindex());
    }
    
  }
  // repeated .PBItemObject ItemObjects = 2;
  total_size += 1 * this->itemobjects_size();
  for (int i = 0; i < this->itemobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itemobjects(i));
  }
  
  // repeated .PBItemObject KitBag = 3;
  total_size += 1 * this->kitbag_size();
  for (int i = 0; i < this->kitbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->kitbag(i));
  }
  
  // repeated uint32 KitLocked = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kitlocked_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->kitlocked(i));
    }
    total_size += 1 * this->kitlocked_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBItemBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemBox::MergeFrom(const PBItemBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemobjects_.MergeFrom(from.itemobjects_);
  kitbag_.MergeFrom(from.kitbag_);
  kitlocked_.MergeFrom(from.kitlocked_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_releaseindex(from.releaseindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBox::CopyFrom(const PBItemBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemBox::Swap(PBItemBox* other) {
  if (other != this) {
    std::swap(releaseindex_, other->releaseindex_);
    itemobjects_.Swap(&other->itemobjects_);
    kitbag_.Swap(&other->kitbag_);
    kitlocked_.Swap(&other->kitlocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBItemBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBItemBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBItemBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBItemBox_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTransform::kHasTransformFieldNumber;
const int PBTransform::kSexFieldNumber;
const int PBTransform::kStateIDFieldNumber;
const int PBTransform::kWeaponIDFieldNumber;
const int PBTransform::kClothIDFieldNumber;
const int PBTransform::kFashionIDFieldNumber;
const int PBTransform::kNpcIDFieldNumber;
#endif  // !_MSC_VER

PBTransform::PBTransform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTransform::InitAsDefaultInstance() {}

PBTransform::PBTransform(const PBTransform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTransform::SharedCtor() {
  _cached_size_ = 0;
  hastransform_ = 0u;
  sex_ = 0u;
  stateid_ = 0u;
  weaponid_ = 0u;
  clothid_ = 0u;
  fashionid_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTransform::~PBTransform() {
  SharedDtor();
}

void PBTransform::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTransform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTransform_descriptor_;
}

const PBTransform& PBTransform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTransform* PBTransform::default_instance_ = NULL;

PBTransform* PBTransform::New() const {
  return new PBTransform;
}

void PBTransform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hastransform_ = 0u;
    sex_ = 0u;
    stateid_ = 0u;
    weaponid_ = 0u;
    clothid_ = 0u;
    fashionid_ = 0u;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 HasTransform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hastransform_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_StateID;
        break;
      }
      
      // optional uint32 StateID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StateID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &stateid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeaponID;
        break;
      }
      
      // optional uint32 WeaponID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeaponID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weaponid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ClothID;
        break;
      }
      
      // optional uint32 ClothID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ClothID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &clothid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_FashionID;
        break;
      }
      
      // optional uint32 FashionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FashionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &fashionid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_NpcID;
        break;
      }
      
      // optional uint32 NpcID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NpcID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTransform::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 HasTransform = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->hastransform(), output);
  }
  
  // optional uint32 Sex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sex(), output);
  }
  
  // optional uint32 StateID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stateid(), output);
  }
  
  // optional uint32 WeaponID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weaponid(), output);
  }
  
  // optional uint32 ClothID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->clothid(), output);
  }
  
  // optional uint32 FashionID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->fashionid(), output);
  }
  
  // optional uint32 NpcID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->npcid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTransform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 HasTransform = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->hastransform(), target);
  }
  
  // optional uint32 Sex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sex(), target);
  }
  
  // optional uint32 StateID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stateid(), target);
  }
  
  // optional uint32 WeaponID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weaponid(), target);
  }
  
  // optional uint32 ClothID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->clothid(), target);
  }
  
  // optional uint32 FashionID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->fashionid(), target);
  }
  
  // optional uint32 NpcID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->npcid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTransform::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HasTransform = 1;
    if (has_hastransform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hastransform());
    }
    
    // optional uint32 Sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 StateID = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->stateid());
    }
    
    // optional uint32 WeaponID = 4;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weaponid());
    }
    
    // optional uint32 ClothID = 5;
    if (has_clothid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->clothid());
    }
    
    // optional uint32 FashionID = 6;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->fashionid());
    }
    
    // optional uint32 NpcID = 7;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTransform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTransform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTransform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTransform::MergeFrom(const PBTransform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hastransform(from.hastransform());
    }
    if (from._has_bit(1)) {
      set_sex(from.sex());
    }
    if (from._has_bit(2)) {
      set_stateid(from.stateid());
    }
    if (from._has_bit(3)) {
      set_weaponid(from.weaponid());
    }
    if (from._has_bit(4)) {
      set_clothid(from.clothid());
    }
    if (from._has_bit(5)) {
      set_fashionid(from.fashionid());
    }
    if (from._has_bit(6)) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTransform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransform::CopyFrom(const PBTransform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransform::Swap(PBTransform* other) {
  if (other != this) {
    std::swap(hastransform_, other->hastransform_);
    std::swap(sex_, other->sex_);
    std::swap(stateid_, other->stateid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(clothid_, other->clothid_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTransform::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTransform::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTransform::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTransform_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBuffObject::kBuffIDFieldNumber;
const int PBBuffObject::kPersistTimeFieldNumber;
const int PBBuffObject::kSrcEntityIDFieldNumber;
const int PBBuffObject::kTimerTypeFieldNumber;
const int PBBuffObject::kLastIntervalFieldNumber;
const int PBBuffObject::kParamesFieldNumber;
const int PBBuffObject::kParames2FieldNumber;
const int PBBuffObject::kBackDamageFieldNumber;
const int PBBuffObject::kListIDFieldNumber;
const int PBBuffObject::kSuperCountFieldNumber;
#endif  // !_MSC_VER

PBBuffObject::PBBuffObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuffObject::InitAsDefaultInstance() {}

PBBuffObject::PBBuffObject(const PBBuffObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuffObject::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  persisttime_ = GOOGLE_ULONGLONG(0);
  srcentityid_ = 0u;
  timertype_ = 0u;
  lastinterval_ = 0u;
  backdamage_ = 0u;
  listid_ = 0u;
  supercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuffObject::~PBBuffObject() {
  SharedDtor();
}

void PBBuffObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBBuffObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuffObject_descriptor_;
}

const PBBuffObject& PBBuffObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBBuffObject* PBBuffObject::default_instance_ = NULL;

PBBuffObject* PBBuffObject::New() const {
  return new PBBuffObject;
}

void PBBuffObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
    persisttime_ = GOOGLE_ULONGLONG(0);
    srcentityid_ = 0u;
    timertype_ = 0u;
    lastinterval_ = 0u;
    backdamage_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    listid_ = 0u;
    supercount_ = 0u;
  }
  parames_.Clear();
  parames2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuffObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PersistTime;
        break;
      }
      
      // optional uint64 PersistTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PersistTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &persisttime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcEntityID;
        break;
      }
      
      // optional uint32 SrcEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TimerType;
        break;
      }
      
      // optional uint32 TimerType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimerType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timertype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LastInterval;
        break;
      }
      
      // optional uint32 LastInterval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastInterval:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastinterval_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Parames;
        break;
      }
      
      // repeated uint32 Parames = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parames:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parames(value);
        if (input->ExpectTag(48)) goto parse_Parames;
        if (input->ExpectTag(56)) goto parse_Parames2;
        break;
      }
      
      // repeated uint32 Parames2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parames2:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_parames2(value);
        if (input->ExpectTag(56)) goto parse_Parames2;
        if (input->ExpectTag(64)) goto parse_BackDamage;
        break;
      }
      
      // optional uint32 BackDamage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackDamage:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backdamage_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ListID;
        break;
      }
      
      // optional uint32 ListID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ListID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &listid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SuperCount;
        break;
      }
      
      // optional uint32 SuperCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SuperCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &supercount_));
        _set_bit(9);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuffObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBuffObject::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BuffID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->buffid(), output);
  }
  
  // optional uint64 PersistTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->persisttime(), output);
  }
  
  // optional uint32 SrcEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srcentityid(), output);
  }
  
  // optional uint32 TimerType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->timertype(), output);
  }
  
  // optional uint32 LastInterval = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lastinterval(), output);
  }
  
  // repeated uint32 Parames = 6;
  for (int i = 0; i < this->parames_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->parames(i), output);
  }
  
  // repeated uint32 Parames2 = 7;
  for (int i = 0; i < this->parames2_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->parames2(i), output);
  }
  
  // optional uint32 BackDamage = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->backdamage(), output);
  }
  
  // optional uint32 ListID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->listid(), output);
  }
  
  // optional uint32 SuperCount = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->supercount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuffObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BuffID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->buffid(), target);
  }
  
  // optional uint64 PersistTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->persisttime(), target);
  }
  
  // optional uint32 SrcEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srcentityid(), target);
  }
  
  // optional uint32 TimerType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->timertype(), target);
  }
  
  // optional uint32 LastInterval = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lastinterval(), target);
  }
  
  // repeated uint32 Parames = 6;
  for (int i = 0; i < this->parames_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->parames(i), target);
  }
  
  // repeated uint32 Parames2 = 7;
  for (int i = 0; i < this->parames2_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->parames2(i), target);
  }
  
  // optional uint32 BackDamage = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->backdamage(), target);
  }
  
  // optional uint32 ListID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->listid(), target);
  }
  
  // optional uint32 SuperCount = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->supercount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuffObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffID = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffid());
    }
    
    // optional uint64 PersistTime = 2;
    if (has_persisttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->persisttime());
    }
    
    // optional uint32 SrcEntityID = 3;
    if (has_srcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcentityid());
    }
    
    // optional uint32 TimerType = 4;
    if (has_timertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timertype());
    }
    
    // optional uint32 LastInterval = 5;
    if (has_lastinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastinterval());
    }
    
    // optional uint32 BackDamage = 8;
    if (has_backdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backdamage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ListID = 9;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->listid());
    }
    
    // optional uint32 SuperCount = 10;
    if (has_supercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->supercount());
    }
    
  }
  // repeated uint32 Parames = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->parames_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parames(i));
    }
    total_size += 1 * this->parames_size() + data_size;
  }
  
  // repeated uint32 Parames2 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->parames2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->parames2(i));
    }
    total_size += 1 * this->parames2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBuffObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuffObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuffObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuffObject::MergeFrom(const PBBuffObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  parames_.MergeFrom(from.parames_);
  parames2_.MergeFrom(from.parames2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_buffid(from.buffid());
    }
    if (from._has_bit(1)) {
      set_persisttime(from.persisttime());
    }
    if (from._has_bit(2)) {
      set_srcentityid(from.srcentityid());
    }
    if (from._has_bit(3)) {
      set_timertype(from.timertype());
    }
    if (from._has_bit(4)) {
      set_lastinterval(from.lastinterval());
    }
    if (from._has_bit(7)) {
      set_backdamage(from.backdamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_listid(from.listid());
    }
    if (from._has_bit(9)) {
      set_supercount(from.supercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuffObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffObject::CopyFrom(const PBBuffObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffObject::Swap(PBBuffObject* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(persisttime_, other->persisttime_);
    std::swap(srcentityid_, other->srcentityid_);
    std::swap(timertype_, other->timertype_);
    std::swap(lastinterval_, other->lastinterval_);
    parames_.Swap(&other->parames_);
    parames2_.Swap(&other->parames2_);
    std::swap(backdamage_, other->backdamage_);
    std::swap(listid_, other->listid_);
    std::swap(supercount_, other->supercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBuffObject::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBuffObject::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBuffObject::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBuffObject_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBBuffList::kBuffNumberFieldNumber;
const int PBBuffList::kBuffObjectsFieldNumber;
const int PBBuffList::kTransformFieldNumber;
#endif  // !_MSC_VER

PBBuffList::PBBuffList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuffList::InitAsDefaultInstance() {  transform_ = const_cast< ::PBTransform*>(&::PBTransform::default_instance());
}

PBBuffList::PBBuffList(const PBBuffList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuffList::SharedCtor() {
  _cached_size_ = 0;
  buffnumber_ = 0u;
  transform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuffList::~PBBuffList() {
  SharedDtor();
}

void PBBuffList::SharedDtor() {
  if (this != default_instance_) {
    delete transform_;
  }
}

const ::google::protobuf::Descriptor* PBBuffList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuffList_descriptor_;
}

const PBBuffList& PBBuffList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBBuffList* PBBuffList::default_instance_ = NULL;

PBBuffList* PBBuffList::New() const {
  return new PBBuffList;
}

void PBBuffList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffnumber_ = 0u;
    if (_has_bit(2)) {
      if (transform_ != NULL) transform_->::PBTransform::Clear();
    }
  }
  buffobjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuffList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BuffNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buffnumber_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuffObjects;
        break;
      }
      
      // repeated .PBBuffObject BuffObjects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffObjects:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_buffobjects()));
        if (input->ExpectTag(18)) goto parse_BuffObjects;
        if (input->ExpectTag(26)) goto parse_Transform;
        break;
      }
      
      // optional .PBTransform Transform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Transform:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_transform()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuffList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBBuffList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BuffNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->buffnumber(), output);
  }
  
  // repeated .PBBuffObject BuffObjects = 2;
  for (int i = 0; i < this->buffobjects_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buffobjects(i), output);
  }
  
  // optional .PBTransform Transform = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->transform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuffList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BuffNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->buffnumber(), target);
  }
  
  // repeated .PBBuffObject BuffObjects = 2;
  for (int i = 0; i < this->buffobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buffobjects(i), target);
  }
  
  // optional .PBTransform Transform = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->transform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuffList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffNumber = 1;
    if (has_buffnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buffnumber());
    }
    
    // optional .PBTransform Transform = 3;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->transform());
    }
    
  }
  // repeated .PBBuffObject BuffObjects = 2;
  total_size += 1 * this->buffobjects_size();
  for (int i = 0; i < this->buffobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->buffobjects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBBuffList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuffList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuffList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuffList::MergeFrom(const PBBuffList& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffobjects_.MergeFrom(from.buffobjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_buffnumber(from.buffnumber());
    }
    if (from._has_bit(2)) {
      mutable_transform()->::PBTransform::MergeFrom(from.transform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuffList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffList::CopyFrom(const PBBuffList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuffList::Swap(PBBuffList* other) {
  if (other != this) {
    std::swap(buffnumber_, other->buffnumber_);
    buffobjects_.Swap(&other->buffobjects_);
    std::swap(transform_, other->transform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBBuffList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBBuffList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBBuffList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBBuffList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBStateParam::kStateTypeFieldNumber;
const int PBStateParam::kFromFieldNumber;
const int PBStateParam::kIndexFieldNumber;
const int PBStateParam::kParames1FieldNumber;
const int PBStateParam::kParames2FieldNumber;
const int PBStateParam::kInStateFieldNumber;
const int PBStateParam::kBuffAddFieldNumber;
#endif  // !_MSC_VER

PBStateParam::PBStateParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStateParam::InitAsDefaultInstance() {}

PBStateParam::PBStateParam(const PBStateParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStateParam::SharedCtor() {
  _cached_size_ = 0;
  statetype_ = 0u;
  from_ = 0u;
  index_ = 0u;
  parames1_ = 0u;
  parames2_ = 0u;
  instate_ = 0u;
  buffadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStateParam::~PBStateParam() {
  SharedDtor();
}

void PBStateParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStateParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStateParam_descriptor_;
}

const PBStateParam& PBStateParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBStateParam* PBStateParam::default_instance_ = NULL;

PBStateParam* PBStateParam::New() const {
  return new PBStateParam;
}

void PBStateParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statetype_ = 0u;
    from_ = 0u;
    index_ = 0u;
    parames1_ = 0u;
    parames2_ = 0u;
    instate_ = 0u;
    buffadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 StateType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &statetype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_From;
        break;
      }
      
      // optional uint32 From = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_From:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &from_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }
      
      // optional uint32 Index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Index:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Parames1;
        break;
      }
      
      // optional uint32 Parames1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parames1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parames1_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Parames2;
        break;
      }
      
      // optional uint32 Parames2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parames2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parames2_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_InState;
        break;
      }
      
      // optional uint32 InState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &instate_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_BuffAdd;
        break;
      }
      
      // optional fixed32 BuffAdd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_BuffAdd:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &buffadd_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStateParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 StateType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->statetype(), output);
  }
  
  // optional uint32 From = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->from(), output);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->index(), output);
  }
  
  // optional uint32 Parames1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->parames1(), output);
  }
  
  // optional uint32 Parames2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->parames2(), output);
  }
  
  // optional uint32 InState = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->instate(), output);
  }
  
  // optional fixed32 BuffAdd = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(7, this->buffadd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStateParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 StateType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->statetype(), target);
  }
  
  // optional uint32 From = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->from(), target);
  }
  
  // optional uint32 Index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->index(), target);
  }
  
  // optional uint32 Parames1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->parames1(), target);
  }
  
  // optional uint32 Parames2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->parames2(), target);
  }
  
  // optional uint32 InState = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->instate(), target);
  }
  
  // optional fixed32 BuffAdd = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(7, this->buffadd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStateParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StateType = 1;
    if (has_statetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->statetype());
    }
    
    // optional uint32 From = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->from());
    }
    
    // optional uint32 Index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 Parames1 = 4;
    if (has_parames1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parames1());
    }
    
    // optional uint32 Parames2 = 5;
    if (has_parames2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parames2());
    }
    
    // optional uint32 InState = 6;
    if (has_instate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->instate());
    }
    
    // optional fixed32 BuffAdd = 7;
    if (has_buffadd()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStateParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStateParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStateParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStateParam::MergeFrom(const PBStateParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_statetype(from.statetype());
    }
    if (from._has_bit(1)) {
      set_from(from.from());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_parames1(from.parames1());
    }
    if (from._has_bit(4)) {
      set_parames2(from.parames2());
    }
    if (from._has_bit(5)) {
      set_instate(from.instate());
    }
    if (from._has_bit(6)) {
      set_buffadd(from.buffadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStateParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStateParam::CopyFrom(const PBStateParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStateParam::Swap(PBStateParam* other) {
  if (other != this) {
    std::swap(statetype_, other->statetype_);
    std::swap(from_, other->from_);
    std::swap(index_, other->index_);
    std::swap(parames1_, other->parames1_);
    std::swap(parames2_, other->parames2_);
    std::swap(instate_, other->instate_);
    std::swap(buffadd_, other->buffadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStateParam::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStateParam::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStateParam::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStateParam_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBStateList::kStateParamObjFieldNumber;
#endif  // !_MSC_VER

PBStateList::PBStateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStateList::InitAsDefaultInstance() {}

PBStateList::PBStateList(const PBStateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStateList::~PBStateList() {
  SharedDtor();
}

void PBStateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStateList_descriptor_;
}

const PBStateList& PBStateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBStateList* PBStateList::default_instance_ = NULL;

PBStateList* PBStateList::New() const {
  return new PBStateList;
}

void PBStateList::Clear() {
  stateparamobj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBStateParam StateParamObj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StateParamObj:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_stateparamobj()));
        if (input->ExpectTag(10)) goto parse_StateParamObj;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStateList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBStateParam StateParamObj = 1;
  for (int i = 0; i < this->stateparamobj_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->stateparamobj(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBStateParam StateParamObj = 1;
  for (int i = 0; i < this->stateparamobj_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->stateparamobj(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStateList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBStateParam StateParamObj = 1;
  total_size += 1 * this->stateparamobj_size();
  for (int i = 0; i < this->stateparamobj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->stateparamobj(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStateList::MergeFrom(const PBStateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateparamobj_.MergeFrom(from.stateparamobj_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStateList::CopyFrom(const PBStateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStateList::Swap(PBStateList* other) {
  if (other != this) {
    stateparamobj_.Swap(&other->stateparamobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStateList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStateList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStateList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStateList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillObject::kSkillIDFieldNumber;
const int PBSkillObject::kSkillLevelFieldNumber;
const int PBSkillObject::kCooldownFieldNumber;
const int PBSkillObject::kIncLevelFieldNumber;
#endif  // !_MSC_VER

PBSkillObject::PBSkillObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillObject::InitAsDefaultInstance() {}

PBSkillObject::PBSkillObject(const PBSkillObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillObject::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllevel_ = 0u;
  cooldown_ = 0u;
  inclevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillObject::~PBSkillObject() {
  SharedDtor();
}

void PBSkillObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillObject_descriptor_;
}

const PBSkillObject& PBSkillObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSkillObject* PBSkillObject::default_instance_ = NULL;

PBSkillObject* PBSkillObject::New() const {
  return new PBSkillObject;
}

void PBSkillObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllevel_ = 0u;
    cooldown_ = 0u;
    inclevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SkillLevel;
        break;
      }
      
      // optional uint32 SkillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skilllevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Cooldown;
        break;
      }
      
      // optional uint32 Cooldown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Cooldown:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cooldown_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_IncLevel;
        break;
      }
      
      // optional uint32 IncLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IncLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inclevel_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillObject::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 SkillLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->skilllevel(), output);
  }
  
  // optional uint32 Cooldown = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->cooldown(), output);
  }
  
  // optional uint32 IncLevel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->inclevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 SkillLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->skilllevel(), target);
  }
  
  // optional uint32 Cooldown = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->cooldown(), target);
  }
  
  // optional uint32 IncLevel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->inclevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 SkillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skilllevel());
    }
    
    // optional uint32 Cooldown = 3;
    if (has_cooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cooldown());
    }
    
    // optional uint32 IncLevel = 4;
    if (has_inclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inclevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillObject::MergeFrom(const PBSkillObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillid(from.skillid());
    }
    if (from._has_bit(1)) {
      set_skilllevel(from.skilllevel());
    }
    if (from._has_bit(2)) {
      set_cooldown(from.cooldown());
    }
    if (from._has_bit(3)) {
      set_inclevel(from.inclevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillObject::CopyFrom(const PBSkillObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillObject::Swap(PBSkillObject* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(inclevel_, other->inclevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillObject::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillObject::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillObject::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillObject_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSkillList::kSkillNumberFieldNumber;
const int PBSkillList::kSkillObjectsFieldNumber;
#endif  // !_MSC_VER

PBSkillList::PBSkillList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillList::InitAsDefaultInstance() {}

PBSkillList::PBSkillList(const PBSkillList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillList::SharedCtor() {
  _cached_size_ = 0;
  skillnumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillList::~PBSkillList() {
  SharedDtor();
}

void PBSkillList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSkillList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillList_descriptor_;
}

const PBSkillList& PBSkillList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSkillList* PBSkillList::default_instance_ = NULL;

PBSkillList* PBSkillList::New() const {
  return new PBSkillList;
}

void PBSkillList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillnumber_ = 0u;
  }
  skillobjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SkillNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillnumber_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SkillObjects;
        break;
      }
      
      // repeated .PBSkillObject SkillObjects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SkillObjects:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_skillobjects()));
        if (input->ExpectTag(18)) goto parse_SkillObjects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSkillList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SkillNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->skillnumber(), output);
  }
  
  // repeated .PBSkillObject SkillObjects = 2;
  for (int i = 0; i < this->skillobjects_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->skillobjects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SkillNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->skillnumber(), target);
  }
  
  // repeated .PBSkillObject SkillObjects = 2;
  for (int i = 0; i < this->skillobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->skillobjects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillNumber = 1;
    if (has_skillnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillnumber());
    }
    
  }
  // repeated .PBSkillObject SkillObjects = 2;
  total_size += 1 * this->skillobjects_size();
  for (int i = 0; i < this->skillobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->skillobjects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSkillList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillList::MergeFrom(const PBSkillList& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillobjects_.MergeFrom(from.skillobjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_skillnumber(from.skillnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillList::CopyFrom(const PBSkillList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillList::Swap(PBSkillList* other) {
  if (other != this) {
    std::swap(skillnumber_, other->skillnumber_);
    skillobjects_.Swap(&other->skillobjects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSkillList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSkillList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSkillList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSkillList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBShortcut::kShortcutFieldNumber;
const int PBShortcut::kMTypeFieldNumber;
const int PBShortcut::kMIndexFieldNumber;
const int PBShortcut::kMLabelTypeFieldNumber;
const int PBShortcut::kMLabelIndexFieldNumber;
const int PBShortcut::kParam1FieldNumber;
#endif  // !_MSC_VER

PBShortcut::PBShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBShortcut::InitAsDefaultInstance() {}

PBShortcut::PBShortcut(const PBShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBShortcut::SharedCtor() {
  _cached_size_ = 0;
  shortcut_ = 0u;
  mtype_ = 0u;
  mindex_ = 0u;
  mlabeltype_ = 0u;
  mlabelindex_ = 0u;
  param1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBShortcut::~PBShortcut() {
  SharedDtor();
}

void PBShortcut::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBShortcut_descriptor_;
}

const PBShortcut& PBShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBShortcut* PBShortcut::default_instance_ = NULL;

PBShortcut* PBShortcut::New() const {
  return new PBShortcut;
}

void PBShortcut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shortcut_ = 0u;
    mtype_ = 0u;
    mindex_ = 0u;
    mlabeltype_ = 0u;
    mlabelindex_ = 0u;
    param1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Shortcut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shortcut_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mType;
        break;
      }
      
      // optional uint32 mType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mtype_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_mIndex;
        break;
      }
      
      // optional uint32 mIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mindex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_mLabelType;
        break;
      }
      
      // optional uint32 mLabelType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mLabelType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mlabeltype_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_mLabelIndex;
        break;
      }
      
      // optional uint32 mLabelIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mLabelIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mlabelindex_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBShortcut::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Shortcut = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->shortcut(), output);
  }
  
  // optional uint32 mType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->mtype(), output);
  }
  
  // optional uint32 mIndex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->mindex(), output);
  }
  
  // optional uint32 mLabelType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->mlabeltype(), output);
  }
  
  // optional uint32 mLabelIndex = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mlabelindex(), output);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->param1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Shortcut = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->shortcut(), target);
  }
  
  // optional uint32 mType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->mtype(), target);
  }
  
  // optional uint32 mIndex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->mindex(), target);
  }
  
  // optional uint32 mLabelType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->mlabeltype(), target);
  }
  
  // optional uint32 mLabelIndex = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mlabelindex(), target);
  }
  
  // optional uint32 Param1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->param1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBShortcut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Shortcut = 1;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shortcut());
    }
    
    // optional uint32 mType = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mtype());
    }
    
    // optional uint32 mIndex = 3;
    if (has_mindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mindex());
    }
    
    // optional uint32 mLabelType = 4;
    if (has_mlabeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mlabeltype());
    }
    
    // optional uint32 mLabelIndex = 5;
    if (has_mlabelindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mlabelindex());
    }
    
    // optional uint32 Param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBShortcut::MergeFrom(const PBShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_shortcut(from.shortcut());
    }
    if (from._has_bit(1)) {
      set_mtype(from.mtype());
    }
    if (from._has_bit(2)) {
      set_mindex(from.mindex());
    }
    if (from._has_bit(3)) {
      set_mlabeltype(from.mlabeltype());
    }
    if (from._has_bit(4)) {
      set_mlabelindex(from.mlabelindex());
    }
    if (from._has_bit(5)) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShortcut::CopyFrom(const PBShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShortcut::Swap(PBShortcut* other) {
  if (other != this) {
    std::swap(shortcut_, other->shortcut_);
    std::swap(mtype_, other->mtype_);
    std::swap(mindex_, other->mindex_);
    std::swap(mlabeltype_, other->mlabeltype_);
    std::swap(mlabelindex_, other->mlabelindex_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBShortcut::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBShortcut::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBShortcut::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBShortcut_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBShortcutList::kShortcutNumberFieldNumber;
const int PBShortcutList::kShortcutsFieldNumber;
const int PBShortcutList::kHelpStatusFieldNumber;
#endif  // !_MSC_VER

PBShortcutList::PBShortcutList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBShortcutList::InitAsDefaultInstance() {}

PBShortcutList::PBShortcutList(const PBShortcutList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBShortcutList::SharedCtor() {
  _cached_size_ = 0;
  shortcutnumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBShortcutList::~PBShortcutList() {
  SharedDtor();
}

void PBShortcutList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBShortcutList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBShortcutList_descriptor_;
}

const PBShortcutList& PBShortcutList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBShortcutList* PBShortcutList::default_instance_ = NULL;

PBShortcutList* PBShortcutList::New() const {
  return new PBShortcutList;
}

void PBShortcutList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shortcutnumber_ = 0u;
  }
  shortcuts_.Clear();
  helpstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBShortcutList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ShortcutNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &shortcutnumber_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Shortcuts;
        break;
      }
      
      // repeated .PBShortcut Shortcuts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Shortcuts:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_shortcuts()));
        if (input->ExpectTag(18)) goto parse_Shortcuts;
        if (input->ExpectTag(24)) goto parse_HelpStatus;
        break;
      }
      
      // repeated uint32 HelpStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HelpStatus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_helpstatus(value);
        if (input->ExpectTag(24)) goto parse_HelpStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBShortcutList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBShortcutList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ShortcutNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->shortcutnumber(), output);
  }
  
  // repeated .PBShortcut Shortcuts = 2;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->shortcuts(i), output);
  }
  
  // repeated uint32 HelpStatus = 3;
  for (int i = 0; i < this->helpstatus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->helpstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBShortcutList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ShortcutNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->shortcutnumber(), target);
  }
  
  // repeated .PBShortcut Shortcuts = 2;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->shortcuts(i), target);
  }
  
  // repeated uint32 HelpStatus = 3;
  for (int i = 0; i < this->helpstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->helpstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBShortcutList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ShortcutNumber = 1;
    if (has_shortcutnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->shortcutnumber());
    }
    
  }
  // repeated .PBShortcut Shortcuts = 2;
  total_size += 1 * this->shortcuts_size();
  for (int i = 0; i < this->shortcuts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->shortcuts(i));
  }
  
  // repeated uint32 HelpStatus = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->helpstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->helpstatus(i));
    }
    total_size += 1 * this->helpstatus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBShortcutList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBShortcutList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBShortcutList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBShortcutList::MergeFrom(const PBShortcutList& from) {
  GOOGLE_CHECK_NE(&from, this);
  shortcuts_.MergeFrom(from.shortcuts_);
  helpstatus_.MergeFrom(from.helpstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_shortcutnumber(from.shortcutnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBShortcutList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShortcutList::CopyFrom(const PBShortcutList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShortcutList::Swap(PBShortcutList* other) {
  if (other != this) {
    std::swap(shortcutnumber_, other->shortcutnumber_);
    shortcuts_.Swap(&other->shortcuts_);
    helpstatus_.Swap(&other->helpstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBShortcutList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBShortcutList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBShortcutList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBShortcutList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBKillData::kKillIDFieldNumber;
const int PBKillData::kKillTimeFieldNumber;
#endif  // !_MSC_VER

PBKillData::PBKillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBKillData::InitAsDefaultInstance() {}

PBKillData::PBKillData(const PBKillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBKillData::SharedCtor() {
  _cached_size_ = 0;
  killid_ = 0u;
  killtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBKillData::~PBKillData() {
  SharedDtor();
}

void PBKillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBKillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBKillData_descriptor_;
}

const PBKillData& PBKillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBKillData* PBKillData::default_instance_ = NULL;

PBKillData* PBKillData::New() const {
  return new PBKillData;
}

void PBKillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killid_ = 0u;
    killtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBKillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 KillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_KillTime;
        break;
      }
      
      // optional uint32 KillTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBKillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBKillData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 KillID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->killid(), output);
  }
  
  // optional uint32 KillTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->killtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBKillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 KillID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->killid(), target);
  }
  
  // optional uint32 KillTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->killtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBKillData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 KillID = 1;
    if (has_killid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killid());
    }
    
    // optional uint32 KillTime = 2;
    if (has_killtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBKillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBKillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBKillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBKillData::MergeFrom(const PBKillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_killid(from.killid());
    }
    if (from._has_bit(1)) {
      set_killtime(from.killtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBKillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBKillData::CopyFrom(const PBKillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBKillData::Swap(PBKillData* other) {
  if (other != this) {
    std::swap(killid_, other->killid_);
    std::swap(killtime_, other->killtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBKillData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBKillData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBKillData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBKillData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBWizard::kWizardPointFieldNumber;
const int PBWizard::kWizardValueFieldNumber;
const int PBWizard::kWizardSubmitFieldNumber;
const int PBWizard::kWizardIncreaseFieldNumber;
const int PBWizard::kTrendFieldNumber;
const int PBWizard::kCombatFameFieldNumber;
const int PBWizard::kRepeFameFieldNumber;
const int PBWizard::kCommonFameFieldNumber;
const int PBWizard::kCombatTodayFieldNumber;
const int PBWizard::kRepeTodayFieldNumber;
const int PBWizard::kCommonTodayFieldNumber;
const int PBWizard::kCombatAllFieldNumber;
const int PBWizard::kRepeAllFieldNumber;
const int PBWizard::kCommonAllFieldNumber;
#endif  // !_MSC_VER

PBWizard::PBWizard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWizard::InitAsDefaultInstance() {}

PBWizard::PBWizard(const PBWizard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWizard::SharedCtor() {
  _cached_size_ = 0;
  trend_ = 0u;
  combatfame_ = 0u;
  repefame_ = 0u;
  commonfame_ = 0u;
  combattoday_ = 0u;
  repetoday_ = 0u;
  commontoday_ = 0u;
  combatall_ = 0u;
  repeall_ = 0u;
  commonall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWizard::~PBWizard() {
  SharedDtor();
}

void PBWizard::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBWizard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWizard_descriptor_;
}

const PBWizard& PBWizard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBWizard* PBWizard::default_instance_ = NULL;

PBWizard* PBWizard::New() const {
  return new PBWizard;
}

void PBWizard::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    trend_ = 0u;
    combatfame_ = 0u;
    repefame_ = 0u;
    commonfame_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combattoday_ = 0u;
    repetoday_ = 0u;
    commontoday_ = 0u;
    combatall_ = 0u;
    repeall_ = 0u;
    commonall_ = 0u;
  }
  wizardpoint_.Clear();
  wizardvalue_.Clear();
  wizardsubmit_.Clear();
  wizardincrease_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWizard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 WizardPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WizardPoint:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizardpoint(value);
        if (input->ExpectTag(8)) goto parse_WizardPoint;
        if (input->ExpectTag(16)) goto parse_WizardValue;
        break;
      }
      
      // repeated uint32 WizardValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WizardValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizardvalue(value);
        if (input->ExpectTag(16)) goto parse_WizardValue;
        if (input->ExpectTag(24)) goto parse_WizardSubmit;
        break;
      }
      
      // repeated uint32 WizardSubmit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WizardSubmit:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizardsubmit(value);
        if (input->ExpectTag(24)) goto parse_WizardSubmit;
        if (input->ExpectTag(32)) goto parse_WizardIncrease;
        break;
      }
      
      // repeated uint32 WizardIncrease = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WizardIncrease:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_wizardincrease(value);
        if (input->ExpectTag(32)) goto parse_WizardIncrease;
        if (input->ExpectTag(40)) goto parse_Trend;
        break;
      }
      
      // optional uint32 Trend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Trend:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &trend_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CombatFame;
        break;
      }
      
      // optional uint32 CombatFame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CombatFame:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &combatfame_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_RepeFame;
        break;
      }
      
      // optional uint32 RepeFame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeFame:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repefame_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_CommonFame;
        break;
      }
      
      // optional uint32 CommonFame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonFame:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commonfame_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_CombatToday;
        break;
      }
      
      // optional uint32 CombatToday = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CombatToday:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &combattoday_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RepeToday;
        break;
      }
      
      // optional uint32 RepeToday = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeToday:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetoday_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CommonToday;
        break;
      }
      
      // optional uint32 CommonToday = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonToday:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commontoday_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_CombatAll;
        break;
      }
      
      // optional uint32 CombatAll = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CombatAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &combatall_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_RepeAll;
        break;
      }
      
      // optional uint32 RepeAll = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeall_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_CommonAll;
        break;
      }
      
      // optional uint32 CommonAll = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommonAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commonall_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWizard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBWizard::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 WizardPoint = 1;
  for (int i = 0; i < this->wizardpoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->wizardpoint(i), output);
  }
  
  // repeated uint32 WizardValue = 2;
  for (int i = 0; i < this->wizardvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->wizardvalue(i), output);
  }
  
  // repeated uint32 WizardSubmit = 3;
  for (int i = 0; i < this->wizardsubmit_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->wizardsubmit(i), output);
  }
  
  // repeated uint32 WizardIncrease = 4;
  for (int i = 0; i < this->wizardincrease_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->wizardincrease(i), output);
  }
  
  // optional uint32 Trend = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->trend(), output);
  }
  
  // optional uint32 CombatFame = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->combatfame(), output);
  }
  
  // optional uint32 RepeFame = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->repefame(), output);
  }
  
  // optional uint32 CommonFame = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->commonfame(), output);
  }
  
  // optional uint32 CombatToday = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->combattoday(), output);
  }
  
  // optional uint32 RepeToday = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->repetoday(), output);
  }
  
  // optional uint32 CommonToday = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->commontoday(), output);
  }
  
  // optional uint32 CombatAll = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->combatall(), output);
  }
  
  // optional uint32 RepeAll = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->repeall(), output);
  }
  
  // optional uint32 CommonAll = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->commonall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWizard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 WizardPoint = 1;
  for (int i = 0; i < this->wizardpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->wizardpoint(i), target);
  }
  
  // repeated uint32 WizardValue = 2;
  for (int i = 0; i < this->wizardvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->wizardvalue(i), target);
  }
  
  // repeated uint32 WizardSubmit = 3;
  for (int i = 0; i < this->wizardsubmit_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->wizardsubmit(i), target);
  }
  
  // repeated uint32 WizardIncrease = 4;
  for (int i = 0; i < this->wizardincrease_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->wizardincrease(i), target);
  }
  
  // optional uint32 Trend = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->trend(), target);
  }
  
  // optional uint32 CombatFame = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->combatfame(), target);
  }
  
  // optional uint32 RepeFame = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->repefame(), target);
  }
  
  // optional uint32 CommonFame = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->commonfame(), target);
  }
  
  // optional uint32 CombatToday = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->combattoday(), target);
  }
  
  // optional uint32 RepeToday = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->repetoday(), target);
  }
  
  // optional uint32 CommonToday = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->commontoday(), target);
  }
  
  // optional uint32 CombatAll = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->combatall(), target);
  }
  
  // optional uint32 RepeAll = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->repeall(), target);
  }
  
  // optional uint32 CommonAll = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->commonall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWizard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 Trend = 5;
    if (has_trend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->trend());
    }
    
    // optional uint32 CombatFame = 6;
    if (has_combatfame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->combatfame());
    }
    
    // optional uint32 RepeFame = 7;
    if (has_repefame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repefame());
    }
    
    // optional uint32 CommonFame = 8;
    if (has_commonfame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commonfame());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CombatToday = 9;
    if (has_combattoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->combattoday());
    }
    
    // optional uint32 RepeToday = 10;
    if (has_repetoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetoday());
    }
    
    // optional uint32 CommonToday = 11;
    if (has_commontoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commontoday());
    }
    
    // optional uint32 CombatAll = 12;
    if (has_combatall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->combatall());
    }
    
    // optional uint32 RepeAll = 13;
    if (has_repeall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeall());
    }
    
    // optional uint32 CommonAll = 14;
    if (has_commonall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commonall());
    }
    
  }
  // repeated uint32 WizardPoint = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizardpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizardpoint(i));
    }
    total_size += 1 * this->wizardpoint_size() + data_size;
  }
  
  // repeated uint32 WizardValue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizardvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizardvalue(i));
    }
    total_size += 1 * this->wizardvalue_size() + data_size;
  }
  
  // repeated uint32 WizardSubmit = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizardsubmit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizardsubmit(i));
    }
    total_size += 1 * this->wizardsubmit_size() + data_size;
  }
  
  // repeated uint32 WizardIncrease = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->wizardincrease_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->wizardincrease(i));
    }
    total_size += 1 * this->wizardincrease_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBWizard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWizard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWizard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWizard::MergeFrom(const PBWizard& from) {
  GOOGLE_CHECK_NE(&from, this);
  wizardpoint_.MergeFrom(from.wizardpoint_);
  wizardvalue_.MergeFrom(from.wizardvalue_);
  wizardsubmit_.MergeFrom(from.wizardsubmit_);
  wizardincrease_.MergeFrom(from.wizardincrease_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from._has_bit(4)) {
      set_trend(from.trend());
    }
    if (from._has_bit(5)) {
      set_combatfame(from.combatfame());
    }
    if (from._has_bit(6)) {
      set_repefame(from.repefame());
    }
    if (from._has_bit(7)) {
      set_commonfame(from.commonfame());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_combattoday(from.combattoday());
    }
    if (from._has_bit(9)) {
      set_repetoday(from.repetoday());
    }
    if (from._has_bit(10)) {
      set_commontoday(from.commontoday());
    }
    if (from._has_bit(11)) {
      set_combatall(from.combatall());
    }
    if (from._has_bit(12)) {
      set_repeall(from.repeall());
    }
    if (from._has_bit(13)) {
      set_commonall(from.commonall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWizard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWizard::CopyFrom(const PBWizard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWizard::Swap(PBWizard* other) {
  if (other != this) {
    wizardpoint_.Swap(&other->wizardpoint_);
    wizardvalue_.Swap(&other->wizardvalue_);
    wizardsubmit_.Swap(&other->wizardsubmit_);
    wizardincrease_.Swap(&other->wizardincrease_);
    std::swap(trend_, other->trend_);
    std::swap(combatfame_, other->combatfame_);
    std::swap(repefame_, other->repefame_);
    std::swap(commonfame_, other->commonfame_);
    std::swap(combattoday_, other->combattoday_);
    std::swap(repetoday_, other->repetoday_);
    std::swap(commontoday_, other->commontoday_);
    std::swap(combatall_, other->combatall_);
    std::swap(repeall_, other->repeall_);
    std::swap(commonall_, other->commonall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBWizard::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBWizard::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBWizard::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBWizard_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTelePostion::kLineFieldNumber;
const int PBTelePostion::kMapFieldNumber;
const int PBTelePostion::kPosXFieldNumber;
const int PBTelePostion::kPosYFieldNumber;
#endif  // !_MSC_VER

PBTelePostion::PBTelePostion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTelePostion::InitAsDefaultInstance() {}

PBTelePostion::PBTelePostion(const PBTelePostion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTelePostion::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0u;
  map_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTelePostion::~PBTelePostion() {
  SharedDtor();
}

void PBTelePostion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTelePostion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTelePostion_descriptor_;
}

const PBTelePostion& PBTelePostion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTelePostion* PBTelePostion::default_instance_ = NULL;

PBTelePostion* PBTelePostion::New() const {
  return new PBTelePostion;
}

void PBTelePostion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_ = 0u;
    map_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTelePostion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &line_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Map;
        break;
      }
      
      // optional uint32 Map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Map:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &map_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTelePostion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTelePostion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Line = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->line(), output);
  }
  
  // optional uint32 Map = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->map(), output);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posx(), output);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTelePostion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Line = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->line(), target);
  }
  
  // optional uint32 Map = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->map(), target);
  }
  
  // optional uint32 PosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posx(), target);
  }
  
  // optional uint32 PosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTelePostion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->line());
    }
    
    // optional uint32 Map = 2;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->map());
    }
    
    // optional uint32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTelePostion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTelePostion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTelePostion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTelePostion::MergeFrom(const PBTelePostion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_line(from.line());
    }
    if (from._has_bit(1)) {
      set_map(from.map());
    }
    if (from._has_bit(2)) {
      set_posx(from.posx());
    }
    if (from._has_bit(3)) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTelePostion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTelePostion::CopyFrom(const PBTelePostion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTelePostion::Swap(PBTelePostion* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(map_, other->map_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTelePostion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTelePostion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTelePostion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTelePostion_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerBasicInfo::kStrFieldNumber;
const int PBPlayerBasicInfo::kStaFieldNumber;
const int PBPlayerBasicInfo::kSprFieldNumber;
const int PBPlayerBasicInfo::kConFieldNumber;
const int PBPlayerBasicInfo::kWisFieldNumber;
const int PBPlayerBasicInfo::kRemainPointFieldNumber;
const int PBPlayerBasicInfo::kSkillPointFieldNumber;
const int PBPlayerBasicInfo::kProLevelFieldNumber;
const int PBPlayerBasicInfo::kProExpFieldNumber;
const int PBPlayerBasicInfo::kShowFashionFieldNumber;
const int PBPlayerBasicInfo::kShowEquipFieldNumber;
#endif  // !_MSC_VER

PBPlayerBasicInfo::PBPlayerBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerBasicInfo::InitAsDefaultInstance() {}

PBPlayerBasicInfo::PBPlayerBasicInfo(const PBPlayerBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  str_ = 0u;
  sta_ = 0u;
  spr_ = 0u;
  con_ = 0u;
  wis_ = 0u;
  remainpoint_ = 0u;
  skillpoint_ = 0u;
  prolevel_ = 0u;
  proexp_ = 0u;
  showfashion_ = 0u;
  showequip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerBasicInfo::~PBPlayerBasicInfo() {
  SharedDtor();
}

void PBPlayerBasicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPlayerBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerBasicInfo_descriptor_;
}

const PBPlayerBasicInfo& PBPlayerBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerBasicInfo* PBPlayerBasicInfo::default_instance_ = NULL;

PBPlayerBasicInfo* PBPlayerBasicInfo::New() const {
  return new PBPlayerBasicInfo;
}

void PBPlayerBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    str_ = 0u;
    sta_ = 0u;
    spr_ = 0u;
    con_ = 0u;
    wis_ = 0u;
    remainpoint_ = 0u;
    skillpoint_ = 0u;
    prolevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    proexp_ = 0u;
    showfashion_ = 0u;
    showequip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &str_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Sta;
        break;
      }
      
      // optional uint32 Sta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sta_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Spr;
        break;
      }
      
      // optional uint32 Spr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Spr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &spr_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Con;
        break;
      }
      
      // optional uint32 Con = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Con:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &con_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Wis;
        break;
      }
      
      // optional uint32 Wis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Wis:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &wis_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RemainPoint;
        break;
      }
      
      // optional uint32 RemainPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RemainPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &remainpoint_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SkillPoint;
        break;
      }
      
      // optional uint32 SkillPoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SkillPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &skillpoint_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_ProLevel;
        break;
      }
      
      // optional uint32 ProLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prolevel_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ProExp;
        break;
      }
      
      // optional uint32 ProExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ProExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &proexp_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_ShowFashion;
        break;
      }
      
      // optional uint32 ShowFashion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowFashion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showfashion_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_ShowEquip;
        break;
      }
      
      // optional uint32 ShowEquip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ShowEquip:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &showequip_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerBasicInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Str = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->str(), output);
  }
  
  // optional uint32 Sta = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sta(), output);
  }
  
  // optional uint32 Spr = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->spr(), output);
  }
  
  // optional uint32 Con = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->con(), output);
  }
  
  // optional uint32 Wis = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->wis(), output);
  }
  
  // optional uint32 RemainPoint = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->remainpoint(), output);
  }
  
  // optional uint32 SkillPoint = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->skillpoint(), output);
  }
  
  // optional uint32 ProLevel = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->prolevel(), output);
  }
  
  // optional uint32 ProExp = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->proexp(), output);
  }
  
  // optional uint32 ShowFashion = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->showfashion(), output);
  }
  
  // optional uint32 ShowEquip = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->showequip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Str = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->str(), target);
  }
  
  // optional uint32 Sta = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sta(), target);
  }
  
  // optional uint32 Spr = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->spr(), target);
  }
  
  // optional uint32 Con = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->con(), target);
  }
  
  // optional uint32 Wis = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->wis(), target);
  }
  
  // optional uint32 RemainPoint = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->remainpoint(), target);
  }
  
  // optional uint32 SkillPoint = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->skillpoint(), target);
  }
  
  // optional uint32 ProLevel = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->prolevel(), target);
  }
  
  // optional uint32 ProExp = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->proexp(), target);
  }
  
  // optional uint32 ShowFashion = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->showfashion(), target);
  }
  
  // optional uint32 ShowEquip = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->showequip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerBasicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->str());
    }
    
    // optional uint32 Sta = 2;
    if (has_sta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sta());
    }
    
    // optional uint32 Spr = 3;
    if (has_spr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->spr());
    }
    
    // optional uint32 Con = 4;
    if (has_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->con());
    }
    
    // optional uint32 Wis = 5;
    if (has_wis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->wis());
    }
    
    // optional uint32 RemainPoint = 6;
    if (has_remainpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->remainpoint());
    }
    
    // optional uint32 SkillPoint = 7;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->skillpoint());
    }
    
    // optional uint32 ProLevel = 8;
    if (has_prolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prolevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ProExp = 9;
    if (has_proexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->proexp());
    }
    
    // optional uint32 ShowFashion = 10;
    if (has_showfashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showfashion());
    }
    
    // optional uint32 ShowEquip = 11;
    if (has_showequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->showequip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerBasicInfo::MergeFrom(const PBPlayerBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_str(from.str());
    }
    if (from._has_bit(1)) {
      set_sta(from.sta());
    }
    if (from._has_bit(2)) {
      set_spr(from.spr());
    }
    if (from._has_bit(3)) {
      set_con(from.con());
    }
    if (from._has_bit(4)) {
      set_wis(from.wis());
    }
    if (from._has_bit(5)) {
      set_remainpoint(from.remainpoint());
    }
    if (from._has_bit(6)) {
      set_skillpoint(from.skillpoint());
    }
    if (from._has_bit(7)) {
      set_prolevel(from.prolevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_proexp(from.proexp());
    }
    if (from._has_bit(9)) {
      set_showfashion(from.showfashion());
    }
    if (from._has_bit(10)) {
      set_showequip(from.showequip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerBasicInfo::CopyFrom(const PBPlayerBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerBasicInfo::Swap(PBPlayerBasicInfo* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(sta_, other->sta_);
    std::swap(spr_, other->spr_);
    std::swap(con_, other->con_);
    std::swap(wis_, other->wis_);
    std::swap(remainpoint_, other->remainpoint_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(prolevel_, other->prolevel_);
    std::swap(proexp_, other->proexp_);
    std::swap(showfashion_, other->showfashion_);
    std::swap(showequip_, other->showequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerBasicInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerBasicInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerBasicInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerBasicInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMonsterRecordInfo::kActiveCardFieldNumber;
const int PBMonsterRecordInfo::kOwnCardFieldNumber;
#endif  // !_MSC_VER

PBMonsterRecordInfo::PBMonsterRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMonsterRecordInfo::InitAsDefaultInstance() {}

PBMonsterRecordInfo::PBMonsterRecordInfo(const PBMonsterRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMonsterRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMonsterRecordInfo::~PBMonsterRecordInfo() {
  SharedDtor();
}

void PBMonsterRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMonsterRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonsterRecordInfo_descriptor_;
}

const PBMonsterRecordInfo& PBMonsterRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBMonsterRecordInfo* PBMonsterRecordInfo::default_instance_ = NULL;

PBMonsterRecordInfo* PBMonsterRecordInfo::New() const {
  return new PBMonsterRecordInfo;
}

void PBMonsterRecordInfo::Clear() {
  activecard_.Clear();
  owncard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMonsterRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 ActiveCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ActiveCard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_activecard(value);
        if (input->ExpectTag(8)) goto parse_ActiveCard;
        if (input->ExpectTag(16)) goto parse_OwnCard;
        break;
      }
      
      // repeated uint32 OwnCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OwnCard:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_owncard(value);
        if (input->ExpectTag(16)) goto parse_OwnCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMonsterRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMonsterRecordInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 ActiveCard = 1;
  for (int i = 0; i < this->activecard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activecard(i), output);
  }
  
  // repeated uint32 OwnCard = 2;
  for (int i = 0; i < this->owncard_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->owncard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMonsterRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ActiveCard = 1;
  for (int i = 0; i < this->activecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activecard(i), target);
  }
  
  // repeated uint32 OwnCard = 2;
  for (int i = 0; i < this->owncard_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->owncard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMonsterRecordInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 ActiveCard = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->activecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->activecard(i));
    }
    total_size += 1 * this->activecard_size() + data_size;
  }
  
  // repeated uint32 OwnCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->owncard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->owncard(i));
    }
    total_size += 1 * this->owncard_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMonsterRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMonsterRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMonsterRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMonsterRecordInfo::MergeFrom(const PBMonsterRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activecard_.MergeFrom(from.activecard_);
  owncard_.MergeFrom(from.owncard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMonsterRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonsterRecordInfo::CopyFrom(const PBMonsterRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonsterRecordInfo::Swap(PBMonsterRecordInfo* other) {
  if (other != this) {
    activecard_.Swap(&other->activecard_);
    owncard_.Swap(&other->owncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMonsterRecordInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMonsterRecordInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMonsterRecordInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMonsterRecordInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerMWInfo::kAssignExpSclFieldNumber;
#endif  // !_MSC_VER

PBPlayerMWInfo::PBPlayerMWInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerMWInfo::InitAsDefaultInstance() {}

PBPlayerMWInfo::PBPlayerMWInfo(const PBPlayerMWInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerMWInfo::SharedCtor() {
  _cached_size_ = 0;
  assignexpscl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerMWInfo::~PBPlayerMWInfo() {
  SharedDtor();
}

void PBPlayerMWInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPlayerMWInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerMWInfo_descriptor_;
}

const PBPlayerMWInfo& PBPlayerMWInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerMWInfo* PBPlayerMWInfo::default_instance_ = NULL;

PBPlayerMWInfo* PBPlayerMWInfo::New() const {
  return new PBPlayerMWInfo;
}

void PBPlayerMWInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assignexpscl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerMWInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AssignExpScl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &assignexpscl_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerMWInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerMWInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AssignExpScl = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->assignexpscl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerMWInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AssignExpScl = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->assignexpscl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerMWInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AssignExpScl = 1;
    if (has_assignexpscl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->assignexpscl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerMWInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerMWInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerMWInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerMWInfo::MergeFrom(const PBPlayerMWInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_assignexpscl(from.assignexpscl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerMWInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerMWInfo::CopyFrom(const PBPlayerMWInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerMWInfo::Swap(PBPlayerMWInfo* other) {
  if (other != this) {
    std::swap(assignexpscl_, other->assignexpscl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerMWInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerMWInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerMWInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerMWInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSingleCDGroup::kIndexFieldNumber;
const int PBSingleCDGroup::kCDTimeFieldNumber;
#endif  // !_MSC_VER

PBSingleCDGroup::PBSingleCDGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleCDGroup::InitAsDefaultInstance() {}

PBSingleCDGroup::PBSingleCDGroup(const PBSingleCDGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleCDGroup::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleCDGroup::~PBSingleCDGroup() {
  SharedDtor();
}

void PBSingleCDGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleCDGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleCDGroup_descriptor_;
}

const PBSingleCDGroup& PBSingleCDGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSingleCDGroup* PBSingleCDGroup::default_instance_ = NULL;

PBSingleCDGroup* PBSingleCDGroup::New() const {
  return new PBSingleCDGroup;
}

void PBSingleCDGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    cdtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleCDGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CDTime;
        break;
      }
      
      // optional uint32 CDTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CDTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &cdtime_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleCDGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleCDGroup::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 CDTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->cdtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleCDGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 CDTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->cdtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleCDGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 CDTime = 2;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->cdtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleCDGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleCDGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleCDGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleCDGroup::MergeFrom(const PBSingleCDGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleCDGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleCDGroup::CopyFrom(const PBSingleCDGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleCDGroup::Swap(PBSingleCDGroup* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleCDGroup::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleCDGroup::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleCDGroup::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleCDGroup_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerCDGroupInfo::kCDGroupFieldNumber;
#endif  // !_MSC_VER

PBPlayerCDGroupInfo::PBPlayerCDGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerCDGroupInfo::InitAsDefaultInstance() {}

PBPlayerCDGroupInfo::PBPlayerCDGroupInfo(const PBPlayerCDGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerCDGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerCDGroupInfo::~PBPlayerCDGroupInfo() {
  SharedDtor();
}

void PBPlayerCDGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPlayerCDGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerCDGroupInfo_descriptor_;
}

const PBPlayerCDGroupInfo& PBPlayerCDGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerCDGroupInfo* PBPlayerCDGroupInfo::default_instance_ = NULL;

PBPlayerCDGroupInfo* PBPlayerCDGroupInfo::New() const {
  return new PBPlayerCDGroupInfo;
}

void PBPlayerCDGroupInfo::Clear() {
  cdgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerCDGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSingleCDGroup CDGroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CDGroup:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_cdgroup()));
        if (input->ExpectTag(10)) goto parse_CDGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerCDGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerCDGroupInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSingleCDGroup CDGroup = 1;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->cdgroup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerCDGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSingleCDGroup CDGroup = 1;
  for (int i = 0; i < this->cdgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->cdgroup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerCDGroupInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSingleCDGroup CDGroup = 1;
  total_size += 1 * this->cdgroup_size();
  for (int i = 0; i < this->cdgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->cdgroup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerCDGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerCDGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerCDGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerCDGroupInfo::MergeFrom(const PBPlayerCDGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdgroup_.MergeFrom(from.cdgroup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerCDGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerCDGroupInfo::CopyFrom(const PBPlayerCDGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerCDGroupInfo::Swap(PBPlayerCDGroupInfo* other) {
  if (other != this) {
    cdgroup_.Swap(&other->cdgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerCDGroupInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerCDGroupInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerCDGroupInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerCDGroupInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTelePosInfo::kTownPosFieldNumber;
const int PBTelePosInfo::kTeleListFieldNumber;
#endif  // !_MSC_VER

PBTelePosInfo::PBTelePosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTelePosInfo::InitAsDefaultInstance() {  townpos_ = const_cast< ::PBTelePostion*>(&::PBTelePostion::default_instance());
}

PBTelePosInfo::PBTelePosInfo(const PBTelePosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTelePosInfo::SharedCtor() {
  _cached_size_ = 0;
  townpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTelePosInfo::~PBTelePosInfo() {
  SharedDtor();
}

void PBTelePosInfo::SharedDtor() {
  if (this != default_instance_) {
    delete townpos_;
  }
}

const ::google::protobuf::Descriptor* PBTelePosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTelePosInfo_descriptor_;
}

const PBTelePosInfo& PBTelePosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTelePosInfo* PBTelePosInfo::default_instance_ = NULL;

PBTelePosInfo* PBTelePosInfo::New() const {
  return new PBTelePosInfo;
}

void PBTelePosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (townpos_ != NULL) townpos_->::PBTelePostion::Clear();
    }
  }
  telelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTelePosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBTelePostion TownPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_townpos()));
        if (input->ExpectTag(18)) goto parse_TeleList;
        break;
      }
      
      // repeated .PBTelePostion TeleList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TeleList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_telelist()));
        if (input->ExpectTag(18)) goto parse_TeleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTelePosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTelePosInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBTelePostion TownPos = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->townpos(), output);
  }
  
  // repeated .PBTelePostion TeleList = 2;
  for (int i = 0; i < this->telelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->telelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTelePosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTelePostion TownPos = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->townpos(), target);
  }
  
  // repeated .PBTelePostion TeleList = 2;
  for (int i = 0; i < this->telelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->telelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTelePosInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTelePostion TownPos = 1;
    if (has_townpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->townpos());
    }
    
  }
  // repeated .PBTelePostion TeleList = 2;
  total_size += 1 * this->telelist_size();
  for (int i = 0; i < this->telelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->telelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTelePosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTelePosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTelePosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTelePosInfo::MergeFrom(const PBTelePosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  telelist_.MergeFrom(from.telelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_townpos()->::PBTelePostion::MergeFrom(from.townpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTelePosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTelePosInfo::CopyFrom(const PBTelePosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTelePosInfo::Swap(PBTelePosInfo* other) {
  if (other != this) {
    std::swap(townpos_, other->townpos_);
    telelist_.Swap(&other->telelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTelePosInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTelePosInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTelePosInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTelePosInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerPVPInfo::kPKModeFieldNumber;
const int PBPlayerPVPInfo::kPKValueFieldNumber;
const int PBPlayerPVPInfo::kKillNumFieldNumber;
const int PBPlayerPVPInfo::kHonorFieldNumber;
const int PBPlayerPVPInfo::kInHonPerDayFieldNumber;
const int PBPlayerPVPInfo::kOutHonPerDayFieldNumber;
const int PBPlayerPVPInfo::kKillFieldNumber;
const int PBPlayerPVPInfo::kKillNumInFieldNumber;
const int PBPlayerPVPInfo::kYellowStatusFieldNumber;
const int PBPlayerPVPInfo::kPrisonTimeFieldNumber;
const int PBPlayerPVPInfo::kTotalPrisonTimeFieldNumber;
const int PBPlayerPVPInfo::kTodayHonorFieldNumber;
const int PBPlayerPVPInfo::kTotalWarFieldNumber;
const int PBPlayerPVPInfo::kTodayWarFieldNumber;
const int PBPlayerPVPInfo::kTodayOtherFieldNumber;
const int PBPlayerPVPInfo::kFreeWarFieldNumber;
const int PBPlayerPVPInfo::kWarSerialFieldNumber;
const int PBPlayerPVPInfo::kWarKillFieldNumber;
const int PBPlayerPVPInfo::kExpHonorFieldNumber;
const int PBPlayerPVPInfo::kItemHonorFieldNumber;
#endif  // !_MSC_VER

PBPlayerPVPInfo::PBPlayerPVPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerPVPInfo::InitAsDefaultInstance() {}

PBPlayerPVPInfo::PBPlayerPVPInfo(const PBPlayerPVPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerPVPInfo::SharedCtor() {
  _cached_size_ = 0;
  pkmode_ = 0u;
  pkvalue_ = 0u;
  killnum_ = 0u;
  honor_ = 0u;
  inhonperday_ = 0u;
  outhonperday_ = 0u;
  killnumin_ = 0u;
  yellowstatus_ = 0u;
  prisontime_ = 0u;
  totalprisontime_ = 0u;
  todayhonor_ = 0u;
  totalwar_ = 0u;
  todaywar_ = 0u;
  todayother_ = 0u;
  freewar_ = 0u;
  warserial_ = 0u;
  warkill_ = 0u;
  exphonor_ = 0u;
  itemhonor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerPVPInfo::~PBPlayerPVPInfo() {
  SharedDtor();
}

void PBPlayerPVPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPlayerPVPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerPVPInfo_descriptor_;
}

const PBPlayerPVPInfo& PBPlayerPVPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerPVPInfo* PBPlayerPVPInfo::default_instance_ = NULL;

PBPlayerPVPInfo* PBPlayerPVPInfo::New() const {
  return new PBPlayerPVPInfo;
}

void PBPlayerPVPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkmode_ = 0u;
    pkvalue_ = 0u;
    killnum_ = 0u;
    honor_ = 0u;
    inhonperday_ = 0u;
    outhonperday_ = 0u;
    killnumin_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yellowstatus_ = 0u;
    prisontime_ = 0u;
    totalprisontime_ = 0u;
    todayhonor_ = 0u;
    totalwar_ = 0u;
    todaywar_ = 0u;
    todayother_ = 0u;
    freewar_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    warserial_ = 0u;
    warkill_ = 0u;
    exphonor_ = 0u;
    itemhonor_ = 0u;
  }
  kill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerPVPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PKMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pkmode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PKValue;
        break;
      }
      
      // optional uint32 PKValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PKValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pkvalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KillNum;
        break;
      }
      
      // optional uint32 KillNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Honor;
        break;
      }
      
      // optional uint32 Honor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Honor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honor_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_InHonPerDay;
        break;
      }
      
      // optional uint32 InHonPerDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InHonPerDay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inhonperday_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OutHonPerDay;
        break;
      }
      
      // optional uint32 OutHonPerDay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OutHonPerDay:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &outhonperday_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Kill;
        break;
      }
      
      // repeated .PBKillData Kill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Kill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_kill()));
        if (input->ExpectTag(58)) goto parse_Kill;
        if (input->ExpectTag(64)) goto parse_KillNumIn;
        break;
      }
      
      // optional uint32 KillNumIn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillNumIn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killnumin_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_YellowStatus;
        break;
      }
      
      // optional uint32 YellowStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YellowStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yellowstatus_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_PrisonTime;
        break;
      }
      
      // optional uint32 PrisonTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PrisonTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &prisontime_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_TotalPrisonTime;
        break;
      }
      
      // optional uint32 TotalPrisonTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalPrisonTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalprisontime_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_TodayHonor;
        break;
      }
      
      // optional uint32 TodayHonor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayhonor_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_TotalWar;
        break;
      }
      
      // optional uint32 TotalWar = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalwar_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_TodayWar;
        break;
      }
      
      // optional uint32 TodayWar = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaywar_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_TodayOther;
        break;
      }
      
      // optional uint32 TodayOther = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayOther:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayother_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_FreeWar;
        break;
      }
      
      // optional uint32 FreeWar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FreeWar:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &freewar_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_WarSerial;
        break;
      }
      
      // optional uint32 WarSerial = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarSerial:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warserial_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_WarKill;
        break;
      }
      
      // optional uint32 WarKill = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WarKill:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &warkill_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_ExpHonor;
        break;
      }
      
      // optional uint32 ExpHonor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exphonor_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_ItemHonor;
        break;
      }
      
      // optional uint32 ItemHonor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ItemHonor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemhonor_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerPVPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerPVPInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PKMode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->pkmode(), output);
  }
  
  // optional uint32 PKValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->pkvalue(), output);
  }
  
  // optional uint32 KillNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->killnum(), output);
  }
  
  // optional uint32 Honor = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->honor(), output);
  }
  
  // optional uint32 InHonPerDay = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->inhonperday(), output);
  }
  
  // optional uint32 OutHonPerDay = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->outhonperday(), output);
  }
  
  // repeated .PBKillData Kill = 7;
  for (int i = 0; i < this->kill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->kill(i), output);
  }
  
  // optional uint32 KillNumIn = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->killnumin(), output);
  }
  
  // optional uint32 YellowStatus = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->yellowstatus(), output);
  }
  
  // optional uint32 PrisonTime = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->prisontime(), output);
  }
  
  // optional uint32 TotalPrisonTime = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->totalprisontime(), output);
  }
  
  // optional uint32 TodayHonor = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->todayhonor(), output);
  }
  
  // optional uint32 TotalWar = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->totalwar(), output);
  }
  
  // optional uint32 TodayWar = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->todaywar(), output);
  }
  
  // optional uint32 TodayOther = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->todayother(), output);
  }
  
  // optional uint32 FreeWar = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->freewar(), output);
  }
  
  // optional uint32 WarSerial = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->warserial(), output);
  }
  
  // optional uint32 WarKill = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->warkill(), output);
  }
  
  // optional uint32 ExpHonor = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->exphonor(), output);
  }
  
  // optional uint32 ItemHonor = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->itemhonor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerPVPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PKMode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->pkmode(), target);
  }
  
  // optional uint32 PKValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->pkvalue(), target);
  }
  
  // optional uint32 KillNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->killnum(), target);
  }
  
  // optional uint32 Honor = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->honor(), target);
  }
  
  // optional uint32 InHonPerDay = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->inhonperday(), target);
  }
  
  // optional uint32 OutHonPerDay = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->outhonperday(), target);
  }
  
  // repeated .PBKillData Kill = 7;
  for (int i = 0; i < this->kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->kill(i), target);
  }
  
  // optional uint32 KillNumIn = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->killnumin(), target);
  }
  
  // optional uint32 YellowStatus = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->yellowstatus(), target);
  }
  
  // optional uint32 PrisonTime = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->prisontime(), target);
  }
  
  // optional uint32 TotalPrisonTime = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->totalprisontime(), target);
  }
  
  // optional uint32 TodayHonor = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->todayhonor(), target);
  }
  
  // optional uint32 TotalWar = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->totalwar(), target);
  }
  
  // optional uint32 TodayWar = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->todaywar(), target);
  }
  
  // optional uint32 TodayOther = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->todayother(), target);
  }
  
  // optional uint32 FreeWar = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->freewar(), target);
  }
  
  // optional uint32 WarSerial = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->warserial(), target);
  }
  
  // optional uint32 WarKill = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->warkill(), target);
  }
  
  // optional uint32 ExpHonor = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->exphonor(), target);
  }
  
  // optional uint32 ItemHonor = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->itemhonor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerPVPInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PKMode = 1;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pkmode());
    }
    
    // optional uint32 PKValue = 2;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pkvalue());
    }
    
    // optional uint32 KillNum = 3;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killnum());
    }
    
    // optional uint32 Honor = 4;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honor());
    }
    
    // optional uint32 InHonPerDay = 5;
    if (has_inhonperday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inhonperday());
    }
    
    // optional uint32 OutHonPerDay = 6;
    if (has_outhonperday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->outhonperday());
    }
    
    // optional uint32 KillNumIn = 8;
    if (has_killnumin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killnumin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 YellowStatus = 9;
    if (has_yellowstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yellowstatus());
    }
    
    // optional uint32 PrisonTime = 10;
    if (has_prisontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->prisontime());
    }
    
    // optional uint32 TotalPrisonTime = 11;
    if (has_totalprisontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalprisontime());
    }
    
    // optional uint32 TodayHonor = 12;
    if (has_todayhonor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayhonor());
    }
    
    // optional uint32 TotalWar = 13;
    if (has_totalwar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalwar());
    }
    
    // optional uint32 TodayWar = 14;
    if (has_todaywar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaywar());
    }
    
    // optional uint32 TodayOther = 15;
    if (has_todayother()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayother());
    }
    
    // optional uint32 FreeWar = 16;
    if (has_freewar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->freewar());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 WarSerial = 17;
    if (has_warserial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warserial());
    }
    
    // optional uint32 WarKill = 18;
    if (has_warkill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->warkill());
    }
    
    // optional uint32 ExpHonor = 19;
    if (has_exphonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exphonor());
    }
    
    // optional uint32 ItemHonor = 20;
    if (has_itemhonor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemhonor());
    }
    
  }
  // repeated .PBKillData Kill = 7;
  total_size += 1 * this->kill_size();
  for (int i = 0; i < this->kill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->kill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerPVPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerPVPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerPVPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerPVPInfo::MergeFrom(const PBPlayerPVPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  kill_.MergeFrom(from.kill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pkmode(from.pkmode());
    }
    if (from._has_bit(1)) {
      set_pkvalue(from.pkvalue());
    }
    if (from._has_bit(2)) {
      set_killnum(from.killnum());
    }
    if (from._has_bit(3)) {
      set_honor(from.honor());
    }
    if (from._has_bit(4)) {
      set_inhonperday(from.inhonperday());
    }
    if (from._has_bit(5)) {
      set_outhonperday(from.outhonperday());
    }
    if (from._has_bit(7)) {
      set_killnumin(from.killnumin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_yellowstatus(from.yellowstatus());
    }
    if (from._has_bit(9)) {
      set_prisontime(from.prisontime());
    }
    if (from._has_bit(10)) {
      set_totalprisontime(from.totalprisontime());
    }
    if (from._has_bit(11)) {
      set_todayhonor(from.todayhonor());
    }
    if (from._has_bit(12)) {
      set_totalwar(from.totalwar());
    }
    if (from._has_bit(13)) {
      set_todaywar(from.todaywar());
    }
    if (from._has_bit(14)) {
      set_todayother(from.todayother());
    }
    if (from._has_bit(15)) {
      set_freewar(from.freewar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_warserial(from.warserial());
    }
    if (from._has_bit(17)) {
      set_warkill(from.warkill());
    }
    if (from._has_bit(18)) {
      set_exphonor(from.exphonor());
    }
    if (from._has_bit(19)) {
      set_itemhonor(from.itemhonor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerPVPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerPVPInfo::CopyFrom(const PBPlayerPVPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerPVPInfo::Swap(PBPlayerPVPInfo* other) {
  if (other != this) {
    std::swap(pkmode_, other->pkmode_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(killnum_, other->killnum_);
    std::swap(honor_, other->honor_);
    std::swap(inhonperday_, other->inhonperday_);
    std::swap(outhonperday_, other->outhonperday_);
    kill_.Swap(&other->kill_);
    std::swap(killnumin_, other->killnumin_);
    std::swap(yellowstatus_, other->yellowstatus_);
    std::swap(prisontime_, other->prisontime_);
    std::swap(totalprisontime_, other->totalprisontime_);
    std::swap(todayhonor_, other->todayhonor_);
    std::swap(totalwar_, other->totalwar_);
    std::swap(todaywar_, other->todaywar_);
    std::swap(todayother_, other->todayother_);
    std::swap(freewar_, other->freewar_);
    std::swap(warserial_, other->warserial_);
    std::swap(warkill_, other->warkill_);
    std::swap(exphonor_, other->exphonor_);
    std::swap(itemhonor_, other->itemhonor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerPVPInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerPVPInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerPVPInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerPVPInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerStatisticInfo::kCompletedTasksFieldNumber;
const int PBPlayerStatisticInfo::kOriginReliveTimesFieldNumber;
const int PBPlayerStatisticInfo::kKillSameNationNumFieldNumber;
const int PBPlayerStatisticInfo::kKillOgreNumFieldNumber;
const int PBPlayerStatisticInfo::kUpFailNumFieldNumber;
const int PBPlayerStatisticInfo::kTodayKillEnemyInFieldNumber;
const int PBPlayerStatisticInfo::kTodayKillEnemyOutFieldNumber;
const int PBPlayerStatisticInfo::kDieNumFieldNumber;
#endif  // !_MSC_VER

PBPlayerStatisticInfo::PBPlayerStatisticInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerStatisticInfo::InitAsDefaultInstance() {}

PBPlayerStatisticInfo::PBPlayerStatisticInfo(const PBPlayerStatisticInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerStatisticInfo::SharedCtor() {
  _cached_size_ = 0;
  completedtasks_ = 0u;
  originrelivetimes_ = 0u;
  killsamenationnum_ = 0u;
  killogrenum_ = 0u;
  upfailnum_ = 0u;
  todaykillenemyin_ = 0u;
  todaykillenemyout_ = 0u;
  dienum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerStatisticInfo::~PBPlayerStatisticInfo() {
  SharedDtor();
}

void PBPlayerStatisticInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBPlayerStatisticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerStatisticInfo_descriptor_;
}

const PBPlayerStatisticInfo& PBPlayerStatisticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerStatisticInfo* PBPlayerStatisticInfo::default_instance_ = NULL;

PBPlayerStatisticInfo* PBPlayerStatisticInfo::New() const {
  return new PBPlayerStatisticInfo;
}

void PBPlayerStatisticInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    completedtasks_ = 0u;
    originrelivetimes_ = 0u;
    killsamenationnum_ = 0u;
    killogrenum_ = 0u;
    upfailnum_ = 0u;
    todaykillenemyin_ = 0u;
    todaykillenemyout_ = 0u;
    dienum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerStatisticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CompletedTasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completedtasks_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_OriginReliveTimes;
        break;
      }
      
      // optional uint32 OriginReliveTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OriginReliveTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &originrelivetimes_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_KillSameNationNum;
        break;
      }
      
      // optional uint32 KillSameNationNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillSameNationNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killsamenationnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_KillOgreNum;
        break;
      }
      
      // optional uint32 KillOgreNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillOgreNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killogrenum_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_UpFailNum;
        break;
      }
      
      // optional uint32 UpFailNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpFailNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &upfailnum_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TodayKillEnemyIn;
        break;
      }
      
      // optional uint32 TodayKillEnemyIn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayKillEnemyIn:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaykillenemyin_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TodayKillEnemyOut;
        break;
      }
      
      // optional uint32 TodayKillEnemyOut = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayKillEnemyOut:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaykillenemyout_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_DieNum;
        break;
      }
      
      // optional uint32 DieNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DieNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dienum_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerStatisticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerStatisticInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CompletedTasks = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->completedtasks(), output);
  }
  
  // optional uint32 OriginReliveTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->originrelivetimes(), output);
  }
  
  // optional uint32 KillSameNationNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->killsamenationnum(), output);
  }
  
  // optional uint32 KillOgreNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->killogrenum(), output);
  }
  
  // optional uint32 UpFailNum = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->upfailnum(), output);
  }
  
  // optional uint32 TodayKillEnemyIn = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->todaykillenemyin(), output);
  }
  
  // optional uint32 TodayKillEnemyOut = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->todaykillenemyout(), output);
  }
  
  // optional uint32 DieNum = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->dienum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerStatisticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CompletedTasks = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->completedtasks(), target);
  }
  
  // optional uint32 OriginReliveTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->originrelivetimes(), target);
  }
  
  // optional uint32 KillSameNationNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->killsamenationnum(), target);
  }
  
  // optional uint32 KillOgreNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->killogrenum(), target);
  }
  
  // optional uint32 UpFailNum = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->upfailnum(), target);
  }
  
  // optional uint32 TodayKillEnemyIn = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->todaykillenemyin(), target);
  }
  
  // optional uint32 TodayKillEnemyOut = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->todaykillenemyout(), target);
  }
  
  // optional uint32 DieNum = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->dienum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerStatisticInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CompletedTasks = 1;
    if (has_completedtasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completedtasks());
    }
    
    // optional uint32 OriginReliveTimes = 2;
    if (has_originrelivetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->originrelivetimes());
    }
    
    // optional uint32 KillSameNationNum = 3;
    if (has_killsamenationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killsamenationnum());
    }
    
    // optional uint32 KillOgreNum = 4;
    if (has_killogrenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killogrenum());
    }
    
    // optional uint32 UpFailNum = 5;
    if (has_upfailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->upfailnum());
    }
    
    // optional uint32 TodayKillEnemyIn = 6;
    if (has_todaykillenemyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaykillenemyin());
    }
    
    // optional uint32 TodayKillEnemyOut = 7;
    if (has_todaykillenemyout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaykillenemyout());
    }
    
    // optional uint32 DieNum = 8;
    if (has_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dienum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerStatisticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerStatisticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerStatisticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerStatisticInfo::MergeFrom(const PBPlayerStatisticInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_completedtasks(from.completedtasks());
    }
    if (from._has_bit(1)) {
      set_originrelivetimes(from.originrelivetimes());
    }
    if (from._has_bit(2)) {
      set_killsamenationnum(from.killsamenationnum());
    }
    if (from._has_bit(3)) {
      set_killogrenum(from.killogrenum());
    }
    if (from._has_bit(4)) {
      set_upfailnum(from.upfailnum());
    }
    if (from._has_bit(5)) {
      set_todaykillenemyin(from.todaykillenemyin());
    }
    if (from._has_bit(6)) {
      set_todaykillenemyout(from.todaykillenemyout());
    }
    if (from._has_bit(7)) {
      set_dienum(from.dienum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerStatisticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerStatisticInfo::CopyFrom(const PBPlayerStatisticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerStatisticInfo::Swap(PBPlayerStatisticInfo* other) {
  if (other != this) {
    std::swap(completedtasks_, other->completedtasks_);
    std::swap(originrelivetimes_, other->originrelivetimes_);
    std::swap(killsamenationnum_, other->killsamenationnum_);
    std::swap(killogrenum_, other->killogrenum_);
    std::swap(upfailnum_, other->upfailnum_);
    std::swap(todaykillenemyin_, other->todaykillenemyin_);
    std::swap(todaykillenemyout_, other->todaykillenemyout_);
    std::swap(dienum_, other->dienum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerStatisticInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerStatisticInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerStatisticInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerStatisticInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerTalentInfo::kTalentPointFieldNumber;
const int PBPlayerTalentInfo::kTalentStepFieldNumber;
const int PBPlayerTalentInfo::kTalentStudyFieldNumber;
const int PBPlayerTalentInfo::kTalentSkillFieldNumber;
const int PBPlayerTalentInfo::kTalentExpFieldNumber;
const int PBPlayerTalentInfo::kTalentLevelFieldNumber;
#endif  // !_MSC_VER

PBPlayerTalentInfo::PBPlayerTalentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerTalentInfo::InitAsDefaultInstance() {  talentskill_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
}

PBPlayerTalentInfo::PBPlayerTalentInfo(const PBPlayerTalentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerTalentInfo::SharedCtor() {
  _cached_size_ = 0;
  talentpoint_ = 0u;
  talentstep_ = 0u;
  talentstudy_ = 0u;
  talentskill_ = NULL;
  talentexp_ = 0u;
  talentlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerTalentInfo::~PBPlayerTalentInfo() {
  SharedDtor();
}

void PBPlayerTalentInfo::SharedDtor() {
  if (this != default_instance_) {
    delete talentskill_;
  }
}

const ::google::protobuf::Descriptor* PBPlayerTalentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTalentInfo_descriptor_;
}

const PBPlayerTalentInfo& PBPlayerTalentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerTalentInfo* PBPlayerTalentInfo::default_instance_ = NULL;

PBPlayerTalentInfo* PBPlayerTalentInfo::New() const {
  return new PBPlayerTalentInfo;
}

void PBPlayerTalentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentpoint_ = 0u;
    talentstep_ = 0u;
    talentstudy_ = 0u;
    if (_has_bit(3)) {
      if (talentskill_ != NULL) talentskill_->::PBSkillList::Clear();
    }
    talentexp_ = 0u;
    talentlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerTalentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TalentPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talentpoint_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TalentStep;
        break;
      }
      
      // optional uint32 TalentStep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalentStep:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talentstep_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TalentStudy;
        break;
      }
      
      // optional uint32 TalentStudy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalentStudy:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talentstudy_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_TalentSkill;
        break;
      }
      
      // optional .PBSkillList TalentSkill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TalentSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_talentskill()));
        if (input->ExpectTag(40)) goto parse_TalentExp;
        break;
      }
      
      // optional uint32 TalentExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalentExp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talentexp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_TalentLevel;
        break;
      }
      
      // optional uint32 TalentLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalentLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &talentlevel_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerTalentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerTalentInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TalentPoint = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->talentpoint(), output);
  }
  
  // optional uint32 TalentStep = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->talentstep(), output);
  }
  
  // optional uint32 TalentStudy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->talentstudy(), output);
  }
  
  // optional .PBSkillList TalentSkill = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->talentskill(), output);
  }
  
  // optional uint32 TalentExp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->talentexp(), output);
  }
  
  // optional uint32 TalentLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->talentlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerTalentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TalentPoint = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->talentpoint(), target);
  }
  
  // optional uint32 TalentStep = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->talentstep(), target);
  }
  
  // optional uint32 TalentStudy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->talentstudy(), target);
  }
  
  // optional .PBSkillList TalentSkill = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->talentskill(), target);
  }
  
  // optional uint32 TalentExp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->talentexp(), target);
  }
  
  // optional uint32 TalentLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->talentlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerTalentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TalentPoint = 1;
    if (has_talentpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talentpoint());
    }
    
    // optional uint32 TalentStep = 2;
    if (has_talentstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talentstep());
    }
    
    // optional uint32 TalentStudy = 3;
    if (has_talentstudy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talentstudy());
    }
    
    // optional .PBSkillList TalentSkill = 4;
    if (has_talentskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->talentskill());
    }
    
    // optional uint32 TalentExp = 5;
    if (has_talentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talentexp());
    }
    
    // optional uint32 TalentLevel = 6;
    if (has_talentlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->talentlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerTalentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerTalentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerTalentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerTalentInfo::MergeFrom(const PBPlayerTalentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_talentpoint(from.talentpoint());
    }
    if (from._has_bit(1)) {
      set_talentstep(from.talentstep());
    }
    if (from._has_bit(2)) {
      set_talentstudy(from.talentstudy());
    }
    if (from._has_bit(3)) {
      mutable_talentskill()->::PBSkillList::MergeFrom(from.talentskill());
    }
    if (from._has_bit(4)) {
      set_talentexp(from.talentexp());
    }
    if (from._has_bit(5)) {
      set_talentlevel(from.talentlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerTalentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTalentInfo::CopyFrom(const PBPlayerTalentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTalentInfo::Swap(PBPlayerTalentInfo* other) {
  if (other != this) {
    std::swap(talentpoint_, other->talentpoint_);
    std::swap(talentstep_, other->talentstep_);
    std::swap(talentstudy_, other->talentstudy_);
    std::swap(talentskill_, other->talentskill_);
    std::swap(talentexp_, other->talentexp_);
    std::swap(talentlevel_, other->talentlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerTalentInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerTalentInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerTalentInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTalentInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerTitleInfo::kCurrentTitleFieldNumber;
const int PBPlayerTitleInfo::kTitleListFieldNumber;
const int PBPlayerTitleInfo::kTitleSkillFieldNumber;
const int PBPlayerTitleInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerTitleInfo::PBPlayerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerTitleInfo::InitAsDefaultInstance() {  titleskill_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
}

PBPlayerTitleInfo::PBPlayerTitleInfo(const PBPlayerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  currenttitle_ = 0u;
  titleskill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerTitleInfo::~PBPlayerTitleInfo() {
  SharedDtor();
}

void PBPlayerTitleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete titleskill_;
  }
}

const ::google::protobuf::Descriptor* PBPlayerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTitleInfo_descriptor_;
}

const PBPlayerTitleInfo& PBPlayerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerTitleInfo* PBPlayerTitleInfo::default_instance_ = NULL;

PBPlayerTitleInfo* PBPlayerTitleInfo::New() const {
  return new PBPlayerTitleInfo;
}

void PBPlayerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currenttitle_ = 0u;
    if (_has_bit(2)) {
      if (titleskill_ != NULL) titleskill_->::PBSkillList::Clear();
    }
  }
  titlelist_.Clear();
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CurrentTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &currenttitle_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TitleList;
        break;
      }
      
      // repeated uint32 TitleList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TitleList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_titlelist(value);
        if (input->ExpectTag(16)) goto parse_TitleList;
        if (input->ExpectTag(26)) goto parse_TitleSkill;
        break;
      }
      
      // optional .PBSkillList TitleSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TitleSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_titleskill()));
        if (input->ExpectTag(32)) goto parse_Time;
        break;
      }
      
      // repeated uint32 Time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_time(value);
        if (input->ExpectTag(32)) goto parse_Time;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerTitleInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CurrentTitle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->currenttitle(), output);
  }
  
  // repeated uint32 TitleList = 2;
  for (int i = 0; i < this->titlelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->titlelist(i), output);
  }
  
  // optional .PBSkillList TitleSkill = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->titleskill(), output);
  }
  
  // repeated uint32 Time = 4;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->time(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CurrentTitle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->currenttitle(), target);
  }
  
  // repeated uint32 TitleList = 2;
  for (int i = 0; i < this->titlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->titlelist(i), target);
  }
  
  // optional .PBSkillList TitleSkill = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->titleskill(), target);
  }
  
  // repeated uint32 Time = 4;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->time(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerTitleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurrentTitle = 1;
    if (has_currenttitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->currenttitle());
    }
    
    // optional .PBSkillList TitleSkill = 3;
    if (has_titleskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->titleskill());
    }
    
  }
  // repeated uint32 TitleList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->titlelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->titlelist(i));
    }
    total_size += 1 * this->titlelist_size() + data_size;
  }
  
  // repeated uint32 Time = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerTitleInfo::MergeFrom(const PBPlayerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  titlelist_.MergeFrom(from.titlelist_);
  time_.MergeFrom(from.time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_currenttitle(from.currenttitle());
    }
    if (from._has_bit(2)) {
      mutable_titleskill()->::PBSkillList::MergeFrom(from.titleskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTitleInfo::CopyFrom(const PBPlayerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTitleInfo::Swap(PBPlayerTitleInfo* other) {
  if (other != this) {
    std::swap(currenttitle_, other->currenttitle_);
    titlelist_.Swap(&other->titlelist_);
    std::swap(titleskill_, other->titleskill_);
    time_.Swap(&other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerTitleInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerTitleInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerTitleInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTitleInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBActivityStateInf::kActivityIDFieldNumber;
const int PBActivityStateInf::kCurStateFieldNumber;
const int PBActivityStateInf::kStateParamFieldNumber;
const int PBActivityStateInf::kChgTmFieldNumber;
const int PBActivityStateInf::kRealLastedTimeFieldNumber;
#endif  // !_MSC_VER

PBActivityStateInf::PBActivityStateInf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivityStateInf::InitAsDefaultInstance() {}

PBActivityStateInf::PBActivityStateInf(const PBActivityStateInf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivityStateInf::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  curstate_ = 0u;
  chgtm_ = 0u;
  reallastedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivityStateInf::~PBActivityStateInf() {
  SharedDtor();
}

void PBActivityStateInf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBActivityStateInf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivityStateInf_descriptor_;
}

const PBActivityStateInf& PBActivityStateInf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBActivityStateInf* PBActivityStateInf::default_instance_ = NULL;

PBActivityStateInf* PBActivityStateInf::New() const {
  return new PBActivityStateInf;
}

void PBActivityStateInf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    curstate_ = 0u;
    chgtm_ = 0u;
    reallastedtime_ = 0u;
  }
  stateparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivityStateInf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ActivityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &activityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CurState;
        break;
      }
      
      // optional uint32 CurState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curstate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_StateParam;
        break;
      }
      
      // repeated uint32 StateParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StateParam:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_stateparam(value);
        if (input->ExpectTag(24)) goto parse_StateParam;
        if (input->ExpectTag(32)) goto parse_ChgTm;
        break;
      }
      
      // optional uint32 ChgTm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChgTm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chgtm_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RealLastedTime;
        break;
      }
      
      // optional uint32 RealLastedTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RealLastedTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reallastedtime_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivityStateInf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBActivityStateInf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->activityid(), output);
  }
  
  // optional uint32 CurState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->curstate(), output);
  }
  
  // repeated uint32 StateParam = 3;
  for (int i = 0; i < this->stateparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->stateparam(i), output);
  }
  
  // optional uint32 ChgTm = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->chgtm(), output);
  }
  
  // optional uint32 RealLastedTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reallastedtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivityStateInf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ActivityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->activityid(), target);
  }
  
  // optional uint32 CurState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->curstate(), target);
  }
  
  // repeated uint32 StateParam = 3;
  for (int i = 0; i < this->stateparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->stateparam(i), target);
  }
  
  // optional uint32 ChgTm = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->chgtm(), target);
  }
  
  // optional uint32 RealLastedTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reallastedtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivityStateInf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActivityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->activityid());
    }
    
    // optional uint32 CurState = 2;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curstate());
    }
    
    // optional uint32 ChgTm = 4;
    if (has_chgtm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chgtm());
    }
    
    // optional uint32 RealLastedTime = 5;
    if (has_reallastedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reallastedtime());
    }
    
  }
  // repeated uint32 StateParam = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stateparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->stateparam(i));
    }
    total_size += 1 * this->stateparam_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBActivityStateInf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivityStateInf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivityStateInf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivityStateInf::MergeFrom(const PBActivityStateInf& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateparam_.MergeFrom(from.stateparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_activityid(from.activityid());
    }
    if (from._has_bit(1)) {
      set_curstate(from.curstate());
    }
    if (from._has_bit(3)) {
      set_chgtm(from.chgtm());
    }
    if (from._has_bit(4)) {
      set_reallastedtime(from.reallastedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivityStateInf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityStateInf::CopyFrom(const PBActivityStateInf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityStateInf::Swap(PBActivityStateInf* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(curstate_, other->curstate_);
    stateparam_.Swap(&other->stateparam_);
    std::swap(chgtm_, other->chgtm_);
    std::swap(reallastedtime_, other->reallastedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBActivityStateInf::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBActivityStateInf::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBActivityStateInf::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBActivityStateInf_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerActivityInfo::kDiploidTimeFieldNumber;
const int PBPlayerActivityInfo::kLastRefreshTimeOfDipLoidFieldNumber;
const int PBPlayerActivityInfo::kDiploidStateFieldNumber;
const int PBPlayerActivityInfo::kDailyWelfareStaFieldNumber;
const int PBPlayerActivityInfo::kLastDaylyDisposTimeFieldNumber;
const int PBPlayerActivityInfo::kLastWeeklyDisposTimeFieldNumber;
const int PBPlayerActivityInfo::kLastFamilyApplyTimeFieldNumber;
const int PBPlayerActivityInfo::kLastTimeLeaveFamilyFieldNumber;
const int PBPlayerActivityInfo::kLastJudgeTimeFieldNumber;
const int PBPlayerActivityInfo::kSaveDateFieldNumber;
const int PBPlayerActivityInfo::kVipFlagFieldNumber;
const int PBPlayerActivityInfo::kVipTimeFieldNumber;
const int PBPlayerActivityInfo::kAwardRecordFieldNumber;
const int PBPlayerActivityInfo::kInvestStatusFieldNumber;
const int PBPlayerActivityInfo::kWeeklyAwardRecordFieldNumber;
const int PBPlayerActivityInfo::kActivityStateFieldNumber;
const int PBPlayerActivityInfo::kHasVotedFieldNumber;
const int PBPlayerActivityInfo::kSaveTmFieldNumber;
#endif  // !_MSC_VER

PBPlayerActivityInfo::PBPlayerActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerActivityInfo::InitAsDefaultInstance() {  awardrecord_ = const_cast< ::PBAwardRecord*>(&::PBAwardRecord::default_instance());
  weeklyawardrecord_ = const_cast< ::PBAwardRecord*>(&::PBAwardRecord::default_instance());
}

PBPlayerActivityInfo::PBPlayerActivityInfo(const PBPlayerActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  diploidtime_ = 0u;
  lastrefreshtimeofdiploid_ = 0u;
  dailywelfaresta_ = 0u;
  lastdaylydispostime_ = 0u;
  lastweeklydispostime_ = 0u;
  lastfamilyapplytime_ = 0u;
  lasttimeleavefamily_ = 0u;
  lastjudgetime_ = 0u;
  savedate_ = 0u;
  vipflag_ = 0u;
  viptime_ = 0u;
  awardrecord_ = NULL;
  investstatus_ = 0u;
  weeklyawardrecord_ = NULL;
  hasvoted_ = 0u;
  savetm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerActivityInfo::~PBPlayerActivityInfo() {
  SharedDtor();
}

void PBPlayerActivityInfo::SharedDtor() {
  if (this != default_instance_) {
    delete awardrecord_;
    delete weeklyawardrecord_;
  }
}

const ::google::protobuf::Descriptor* PBPlayerActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerActivityInfo_descriptor_;
}

const PBPlayerActivityInfo& PBPlayerActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerActivityInfo* PBPlayerActivityInfo::default_instance_ = NULL;

PBPlayerActivityInfo* PBPlayerActivityInfo::New() const {
  return new PBPlayerActivityInfo;
}

void PBPlayerActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diploidtime_ = 0u;
    lastrefreshtimeofdiploid_ = 0u;
    dailywelfaresta_ = 0u;
    lastdaylydispostime_ = 0u;
    lastweeklydispostime_ = 0u;
    lastfamilyapplytime_ = 0u;
    lasttimeleavefamily_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastjudgetime_ = 0u;
    savedate_ = 0u;
    vipflag_ = 0u;
    viptime_ = 0u;
    if (_has_bit(12)) {
      if (awardrecord_ != NULL) awardrecord_->::PBAwardRecord::Clear();
    }
    investstatus_ = 0u;
    if (_has_bit(14)) {
      if (weeklyawardrecord_ != NULL) weeklyawardrecord_->::PBAwardRecord::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hasvoted_ = 0u;
    savetm_ = 0u;
  }
  diploidstate_.Clear();
  activitystate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 DiploidTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diploidtime_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LastRefreshTimeOfDipLoid;
        break;
      }
      
      // optional uint32 LastRefreshTimeOfDipLoid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastRefreshTimeOfDipLoid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastrefreshtimeofdiploid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_DiploidState;
        break;
      }
      
      // repeated uint32 DiploidState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DiploidState:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_diploidstate(value);
        if (input->ExpectTag(24)) goto parse_DiploidState;
        if (input->ExpectTag(32)) goto parse_DailyWelfareSta;
        break;
      }
      
      // optional uint32 DailyWelfareSta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DailyWelfareSta:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dailywelfaresta_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LastDaylyDisposTime;
        break;
      }
      
      // optional uint32 LastDaylyDisposTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastDaylyDisposTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastdaylydispostime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_LastWeeklyDisposTime;
        break;
      }
      
      // optional uint32 LastWeeklyDisposTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastWeeklyDisposTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastweeklydispostime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_LastFamilyApplyTime;
        break;
      }
      
      // optional uint32 LastFamilyApplyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastFamilyApplyTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastfamilyapplytime_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_LastTimeLeaveFamily;
        break;
      }
      
      // optional uint32 LastTimeLeaveFamily = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastTimeLeaveFamily:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lasttimeleavefamily_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_LastJudgeTime;
        break;
      }
      
      // optional uint32 LastJudgeTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastJudgeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastjudgetime_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SaveDate;
        break;
      }
      
      // optional uint32 SaveDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaveDate:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &savedate_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_VipTime;
        break;
      }
      
      // optional uint32 VipTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &viptime_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_AwardRecord;
        break;
      }
      
      // optional .PBAwardRecord AwardRecord = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AwardRecord:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_awardrecord()));
        if (input->ExpectTag(112)) goto parse_InvestStatus;
        break;
      }
      
      // optional uint32 InvestStatus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InvestStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &investstatus_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_WeeklyAwardRecord;
        break;
      }
      
      // optional .PBAwardRecord WeeklyAwardRecord = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_WeeklyAwardRecord:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_weeklyawardrecord()));
        if (input->ExpectTag(130)) goto parse_ActivityState;
        break;
      }
      
      // repeated .PBActivityStateInf ActivityState = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ActivityState:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_activitystate()));
        if (input->ExpectTag(130)) goto parse_ActivityState;
        if (input->ExpectTag(136)) goto parse_HasVoted;
        break;
      }
      
      // optional uint32 HasVoted = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HasVoted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hasvoted_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_SaveTm;
        break;
      }
      
      // optional uint32 SaveTm = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SaveTm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &savetm_));
        _set_bit(17);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerActivityInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 DiploidTime = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->diploidtime(), output);
  }
  
  // optional uint32 LastRefreshTimeOfDipLoid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lastrefreshtimeofdiploid(), output);
  }
  
  // repeated uint32 DiploidState = 3;
  for (int i = 0; i < this->diploidstate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->diploidstate(i), output);
  }
  
  // optional uint32 DailyWelfareSta = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->dailywelfaresta(), output);
  }
  
  // optional uint32 LastDaylyDisposTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lastdaylydispostime(), output);
  }
  
  // optional uint32 LastWeeklyDisposTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->lastweeklydispostime(), output);
  }
  
  // optional uint32 LastFamilyApplyTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->lastfamilyapplytime(), output);
  }
  
  // optional uint32 LastTimeLeaveFamily = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->lasttimeleavefamily(), output);
  }
  
  // optional uint32 LastJudgeTime = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->lastjudgetime(), output);
  }
  
  // optional uint32 SaveDate = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->savedate(), output);
  }
  
  // optional uint32 VipFlag = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->vipflag(), output);
  }
  
  // optional uint32 VipTime = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->viptime(), output);
  }
  
  // optional .PBAwardRecord AwardRecord = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->awardrecord(), output);
  }
  
  // optional uint32 InvestStatus = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->investstatus(), output);
  }
  
  // optional .PBAwardRecord WeeklyAwardRecord = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->weeklyawardrecord(), output);
  }
  
  // repeated .PBActivityStateInf ActivityState = 16;
  for (int i = 0; i < this->activitystate_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->activitystate(i), output);
  }
  
  // optional uint32 HasVoted = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->hasvoted(), output);
  }
  
  // optional uint32 SaveTm = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->savetm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DiploidTime = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->diploidtime(), target);
  }
  
  // optional uint32 LastRefreshTimeOfDipLoid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lastrefreshtimeofdiploid(), target);
  }
  
  // repeated uint32 DiploidState = 3;
  for (int i = 0; i < this->diploidstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->diploidstate(i), target);
  }
  
  // optional uint32 DailyWelfareSta = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->dailywelfaresta(), target);
  }
  
  // optional uint32 LastDaylyDisposTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lastdaylydispostime(), target);
  }
  
  // optional uint32 LastWeeklyDisposTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->lastweeklydispostime(), target);
  }
  
  // optional uint32 LastFamilyApplyTime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->lastfamilyapplytime(), target);
  }
  
  // optional uint32 LastTimeLeaveFamily = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->lasttimeleavefamily(), target);
  }
  
  // optional uint32 LastJudgeTime = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->lastjudgetime(), target);
  }
  
  // optional uint32 SaveDate = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->savedate(), target);
  }
  
  // optional uint32 VipFlag = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->vipflag(), target);
  }
  
  // optional uint32 VipTime = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->viptime(), target);
  }
  
  // optional .PBAwardRecord AwardRecord = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->awardrecord(), target);
  }
  
  // optional uint32 InvestStatus = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->investstatus(), target);
  }
  
  // optional .PBAwardRecord WeeklyAwardRecord = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->weeklyawardrecord(), target);
  }
  
  // repeated .PBActivityStateInf ActivityState = 16;
  for (int i = 0; i < this->activitystate_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->activitystate(i), target);
  }
  
  // optional uint32 HasVoted = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->hasvoted(), target);
  }
  
  // optional uint32 SaveTm = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->savetm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerActivityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DiploidTime = 1;
    if (has_diploidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diploidtime());
    }
    
    // optional uint32 LastRefreshTimeOfDipLoid = 2;
    if (has_lastrefreshtimeofdiploid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastrefreshtimeofdiploid());
    }
    
    // optional uint32 DailyWelfareSta = 4;
    if (has_dailywelfaresta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dailywelfaresta());
    }
    
    // optional uint32 LastDaylyDisposTime = 5;
    if (has_lastdaylydispostime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastdaylydispostime());
    }
    
    // optional uint32 LastWeeklyDisposTime = 6;
    if (has_lastweeklydispostime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastweeklydispostime());
    }
    
    // optional uint32 LastFamilyApplyTime = 7;
    if (has_lastfamilyapplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastfamilyapplytime());
    }
    
    // optional uint32 LastTimeLeaveFamily = 8;
    if (has_lasttimeleavefamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lasttimeleavefamily());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LastJudgeTime = 9;
    if (has_lastjudgetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastjudgetime());
    }
    
    // optional uint32 SaveDate = 10;
    if (has_savedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->savedate());
    }
    
    // optional uint32 VipFlag = 11;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
    // optional uint32 VipTime = 12;
    if (has_viptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->viptime());
    }
    
    // optional .PBAwardRecord AwardRecord = 13;
    if (has_awardrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->awardrecord());
    }
    
    // optional uint32 InvestStatus = 14;
    if (has_investstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->investstatus());
    }
    
    // optional .PBAwardRecord WeeklyAwardRecord = 15;
    if (has_weeklyawardrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->weeklyawardrecord());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 HasVoted = 17;
    if (has_hasvoted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hasvoted());
    }
    
    // optional uint32 SaveTm = 18;
    if (has_savetm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->savetm());
    }
    
  }
  // repeated uint32 DiploidState = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->diploidstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->diploidstate(i));
    }
    total_size += 1 * this->diploidstate_size() + data_size;
  }
  
  // repeated .PBActivityStateInf ActivityState = 16;
  total_size += 2 * this->activitystate_size();
  for (int i = 0; i < this->activitystate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->activitystate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerActivityInfo::MergeFrom(const PBPlayerActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  diploidstate_.MergeFrom(from.diploidstate_);
  activitystate_.MergeFrom(from.activitystate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_diploidtime(from.diploidtime());
    }
    if (from._has_bit(1)) {
      set_lastrefreshtimeofdiploid(from.lastrefreshtimeofdiploid());
    }
    if (from._has_bit(3)) {
      set_dailywelfaresta(from.dailywelfaresta());
    }
    if (from._has_bit(4)) {
      set_lastdaylydispostime(from.lastdaylydispostime());
    }
    if (from._has_bit(5)) {
      set_lastweeklydispostime(from.lastweeklydispostime());
    }
    if (from._has_bit(6)) {
      set_lastfamilyapplytime(from.lastfamilyapplytime());
    }
    if (from._has_bit(7)) {
      set_lasttimeleavefamily(from.lasttimeleavefamily());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_lastjudgetime(from.lastjudgetime());
    }
    if (from._has_bit(9)) {
      set_savedate(from.savedate());
    }
    if (from._has_bit(10)) {
      set_vipflag(from.vipflag());
    }
    if (from._has_bit(11)) {
      set_viptime(from.viptime());
    }
    if (from._has_bit(12)) {
      mutable_awardrecord()->::PBAwardRecord::MergeFrom(from.awardrecord());
    }
    if (from._has_bit(13)) {
      set_investstatus(from.investstatus());
    }
    if (from._has_bit(14)) {
      mutable_weeklyawardrecord()->::PBAwardRecord::MergeFrom(from.weeklyawardrecord());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_hasvoted(from.hasvoted());
    }
    if (from._has_bit(17)) {
      set_savetm(from.savetm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerActivityInfo::CopyFrom(const PBPlayerActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerActivityInfo::Swap(PBPlayerActivityInfo* other) {
  if (other != this) {
    std::swap(diploidtime_, other->diploidtime_);
    std::swap(lastrefreshtimeofdiploid_, other->lastrefreshtimeofdiploid_);
    diploidstate_.Swap(&other->diploidstate_);
    std::swap(dailywelfaresta_, other->dailywelfaresta_);
    std::swap(lastdaylydispostime_, other->lastdaylydispostime_);
    std::swap(lastweeklydispostime_, other->lastweeklydispostime_);
    std::swap(lastfamilyapplytime_, other->lastfamilyapplytime_);
    std::swap(lasttimeleavefamily_, other->lasttimeleavefamily_);
    std::swap(lastjudgetime_, other->lastjudgetime_);
    std::swap(savedate_, other->savedate_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(viptime_, other->viptime_);
    std::swap(awardrecord_, other->awardrecord_);
    std::swap(investstatus_, other->investstatus_);
    std::swap(weeklyawardrecord_, other->weeklyawardrecord_);
    activitystate_.Swap(&other->activitystate_);
    std::swap(hasvoted_, other->hasvoted_);
    std::swap(savetm_, other->savetm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerActivityInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerActivityInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerActivityInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerActivityInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBPlayerClientInfo::kShortcutFieldNumber;
#endif  // !_MSC_VER

PBPlayerClientInfo::PBPlayerClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerClientInfo::InitAsDefaultInstance() {  shortcut_ = const_cast< ::PBShortcutList*>(&::PBShortcutList::default_instance());
}

PBPlayerClientInfo::PBPlayerClientInfo(const PBPlayerClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerClientInfo::SharedCtor() {
  _cached_size_ = 0;
  shortcut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerClientInfo::~PBPlayerClientInfo() {
  SharedDtor();
}

void PBPlayerClientInfo::SharedDtor() {
  if (this != default_instance_) {
    delete shortcut_;
  }
}

const ::google::protobuf::Descriptor* PBPlayerClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerClientInfo_descriptor_;
}

const PBPlayerClientInfo& PBPlayerClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBPlayerClientInfo* PBPlayerClientInfo::default_instance_ = NULL;

PBPlayerClientInfo* PBPlayerClientInfo::New() const {
  return new PBPlayerClientInfo;
}

void PBPlayerClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (shortcut_ != NULL) shortcut_->::PBShortcutList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBShortcutList Shortcut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_shortcut()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBPlayerClientInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBShortcutList Shortcut = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->shortcut(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBShortcutList Shortcut = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->shortcut(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerClientInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBShortcutList Shortcut = 1;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->shortcut());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBPlayerClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerClientInfo::MergeFrom(const PBPlayerClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_shortcut()->::PBShortcutList::MergeFrom(from.shortcut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerClientInfo::CopyFrom(const PBPlayerClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerClientInfo::Swap(PBPlayerClientInfo* other) {
  if (other != this) {
    std::swap(shortcut_, other->shortcut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBPlayerClientInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBPlayerClientInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBPlayerClientInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerClientInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSpiritTypeInfo::kSlotOpenStatusFieldNumber;
const int PBSpiritTypeInfo::kCastingItemIDFieldNumber;
const int PBSpiritTypeInfo::kBindStatusFieldNumber;
#endif  // !_MSC_VER

PBSpiritTypeInfo::PBSpiritTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSpiritTypeInfo::InitAsDefaultInstance() {}

PBSpiritTypeInfo::PBSpiritTypeInfo(const PBSpiritTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSpiritTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSpiritTypeInfo::~PBSpiritTypeInfo() {
  SharedDtor();
}

void PBSpiritTypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSpiritTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritTypeInfo_descriptor_;
}

const PBSpiritTypeInfo& PBSpiritTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSpiritTypeInfo* PBSpiritTypeInfo::default_instance_ = NULL;

PBSpiritTypeInfo* PBSpiritTypeInfo::New() const {
  return new PBSpiritTypeInfo;
}

void PBSpiritTypeInfo::Clear() {
  slotopenstatus_.Clear();
  castingitemid_.Clear();
  bindstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSpiritTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 SlotOpenStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlotOpenStatus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slotopenstatus(value);
        if (input->ExpectTag(8)) goto parse_SlotOpenStatus;
        if (input->ExpectTag(16)) goto parse_CastingItemID;
        break;
      }
      
      // repeated uint32 CastingItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CastingItemID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_castingitemid(value);
        if (input->ExpectTag(16)) goto parse_CastingItemID;
        if (input->ExpectTag(24)) goto parse_BindStatus;
        break;
      }
      
      // repeated uint32 BindStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BindStatus:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bindstatus(value);
        if (input->ExpectTag(24)) goto parse_BindStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSpiritTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSpiritTypeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 SlotOpenStatus = 1;
  for (int i = 0; i < this->slotopenstatus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slotopenstatus(i), output);
  }
  
  // repeated uint32 CastingItemID = 2;
  for (int i = 0; i < this->castingitemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->castingitemid(i), output);
  }
  
  // repeated uint32 BindStatus = 3;
  for (int i = 0; i < this->bindstatus_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bindstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSpiritTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 SlotOpenStatus = 1;
  for (int i = 0; i < this->slotopenstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slotopenstatus(i), target);
  }
  
  // repeated uint32 CastingItemID = 2;
  for (int i = 0; i < this->castingitemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->castingitemid(i), target);
  }
  
  // repeated uint32 BindStatus = 3;
  for (int i = 0; i < this->bindstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bindstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSpiritTypeInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 SlotOpenStatus = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotopenstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slotopenstatus(i));
    }
    total_size += 1 * this->slotopenstatus_size() + data_size;
  }
  
  // repeated uint32 CastingItemID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->castingitemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->castingitemid(i));
    }
    total_size += 1 * this->castingitemid_size() + data_size;
  }
  
  // repeated uint32 BindStatus = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bindstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bindstatus(i));
    }
    total_size += 1 * this->bindstatus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSpiritTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSpiritTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSpiritTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSpiritTypeInfo::MergeFrom(const PBSpiritTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotopenstatus_.MergeFrom(from.slotopenstatus_);
  castingitemid_.MergeFrom(from.castingitemid_);
  bindstatus_.MergeFrom(from.bindstatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSpiritTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritTypeInfo::CopyFrom(const PBSpiritTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritTypeInfo::Swap(PBSpiritTypeInfo* other) {
  if (other != this) {
    slotopenstatus_.Swap(&other->slotopenstatus_);
    castingitemid_.Swap(&other->castingitemid_);
    bindstatus_.Swap(&other->bindstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSpiritTypeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSpiritTypeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSpiritTypeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritTypeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSpiritPositionInfo::kSpiritTypeInfoFieldNumber;
#endif  // !_MSC_VER

PBSpiritPositionInfo::PBSpiritPositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSpiritPositionInfo::InitAsDefaultInstance() {}

PBSpiritPositionInfo::PBSpiritPositionInfo(const PBSpiritPositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSpiritPositionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSpiritPositionInfo::~PBSpiritPositionInfo() {
  SharedDtor();
}

void PBSpiritPositionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSpiritPositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritPositionInfo_descriptor_;
}

const PBSpiritPositionInfo& PBSpiritPositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSpiritPositionInfo* PBSpiritPositionInfo::default_instance_ = NULL;

PBSpiritPositionInfo* PBSpiritPositionInfo::New() const {
  return new PBSpiritPositionInfo;
}

void PBSpiritPositionInfo::Clear() {
  spirittypeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSpiritPositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSpiritTypeInfo SpiritTypeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpiritTypeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_spirittypeinfo()));
        if (input->ExpectTag(10)) goto parse_SpiritTypeInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSpiritPositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSpiritPositionInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSpiritTypeInfo SpiritTypeInfo = 1;
  for (int i = 0; i < this->spirittypeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->spirittypeinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSpiritPositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSpiritTypeInfo SpiritTypeInfo = 1;
  for (int i = 0; i < this->spirittypeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->spirittypeinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSpiritPositionInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSpiritTypeInfo SpiritTypeInfo = 1;
  total_size += 1 * this->spirittypeinfo_size();
  for (int i = 0; i < this->spirittypeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->spirittypeinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSpiritPositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSpiritPositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSpiritPositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSpiritPositionInfo::MergeFrom(const PBSpiritPositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirittypeinfo_.MergeFrom(from.spirittypeinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSpiritPositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritPositionInfo::CopyFrom(const PBSpiritPositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritPositionInfo::Swap(PBSpiritPositionInfo* other) {
  if (other != this) {
    spirittypeinfo_.Swap(&other->spirittypeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSpiritPositionInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSpiritPositionInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSpiritPositionInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritPositionInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSpiritInfo::kPositionInfoFieldNumber;
#endif  // !_MSC_VER

PBSpiritInfo::PBSpiritInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSpiritInfo::InitAsDefaultInstance() {}

PBSpiritInfo::PBSpiritInfo(const PBSpiritInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSpiritInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSpiritInfo::~PBSpiritInfo() {
  SharedDtor();
}

void PBSpiritInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSpiritInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritInfo_descriptor_;
}

const PBSpiritInfo& PBSpiritInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSpiritInfo* PBSpiritInfo::default_instance_ = NULL;

PBSpiritInfo* PBSpiritInfo::New() const {
  return new PBSpiritInfo;
}

void PBSpiritInfo::Clear() {
  positioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSpiritInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSpiritPositionInfo PositionInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PositionInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_positioninfo()));
        if (input->ExpectTag(10)) goto parse_PositionInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSpiritInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSpiritInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSpiritPositionInfo PositionInfo = 1;
  for (int i = 0; i < this->positioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->positioninfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSpiritInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSpiritPositionInfo PositionInfo = 1;
  for (int i = 0; i < this->positioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->positioninfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSpiritInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSpiritPositionInfo PositionInfo = 1;
  total_size += 1 * this->positioninfo_size();
  for (int i = 0; i < this->positioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->positioninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSpiritInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSpiritInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSpiritInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSpiritInfo::MergeFrom(const PBSpiritInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  positioninfo_.MergeFrom(from.positioninfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSpiritInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritInfo::CopyFrom(const PBSpiritInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSpiritInfo::Swap(PBSpiritInfo* other) {
  if (other != this) {
    positioninfo_.Swap(&other->positioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSpiritInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSpiritInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSpiritInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSpiritInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBProperty::kCurHPFieldNumber;
const int PBProperty::kCurMPFieldNumber;
const int PBProperty::kCurAPFieldNumber;
const int PBProperty::kBasicInfoFieldNumber;
const int PBProperty::kBaggageFieldNumber;
const int PBProperty::kTaskBaggageFieldNumber;
const int PBProperty::kEquipmentFieldNumber;
const int PBProperty::kStorageFieldNumber;
const int PBProperty::kSkillFieldNumber;
const int PBProperty::kBuffFieldNumber;
const int PBProperty::kCDGroupFieldNumber;
const int PBProperty::kMonsterRecordFieldNumber;
const int PBProperty::kTelePosFieldNumber;
const int PBProperty::kPvPInfoFieldNumber;
const int PBProperty::kTitleInfoFieldNumber;
const int PBProperty::kTalentInfoFieldNumber;
const int PBProperty::kMWInfoFieldNumber;
const int PBProperty::kLifeSkillBoxFieldNumber;
const int PBProperty::kStatisticInfoFieldNumber;
const int PBProperty::kClientInfoFieldNumber;
const int PBProperty::kWizardFieldNumber;
const int PBProperty::kActivityFieldNumber;
const int PBProperty::kAwardFieldNumber;
const int PBProperty::kMatrixFieldNumber;
const int PBProperty::kExpTimeInfoFieldNumber;
const int PBProperty::kTreasureBowlFieldNumber;
const int PBProperty::kSpiritInfoFieldNumber;
#endif  // !_MSC_VER

PBProperty::PBProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBProperty::InitAsDefaultInstance() {  basicinfo_ = const_cast< ::PBPlayerBasicInfo*>(&::PBPlayerBasicInfo::default_instance());
  baggage_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
  taskbaggage_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
  equipment_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
  storage_ = const_cast< ::PBItemBox*>(&::PBItemBox::default_instance());
  skill_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
  buff_ = const_cast< ::PBBuffList*>(&::PBBuffList::default_instance());
  cdgroup_ = const_cast< ::PBPlayerCDGroupInfo*>(&::PBPlayerCDGroupInfo::default_instance());
  monsterrecord_ = const_cast< ::PBMonsterRecordInfo*>(&::PBMonsterRecordInfo::default_instance());
  telepos_ = const_cast< ::PBTelePosInfo*>(&::PBTelePosInfo::default_instance());
  pvpinfo_ = const_cast< ::PBPlayerPVPInfo*>(&::PBPlayerPVPInfo::default_instance());
  titleinfo_ = const_cast< ::PBPlayerTitleInfo*>(&::PBPlayerTitleInfo::default_instance());
  talentinfo_ = const_cast< ::PBPlayerTalentInfo*>(&::PBPlayerTalentInfo::default_instance());
  mwinfo_ = const_cast< ::PBPlayerMWInfo*>(&::PBPlayerMWInfo::default_instance());
  lifeskillbox_ = const_cast< ::PBLifeSkillBox*>(&::PBLifeSkillBox::default_instance());
  statisticinfo_ = const_cast< ::PBPlayerStatisticInfo*>(&::PBPlayerStatisticInfo::default_instance());
  clientinfo_ = const_cast< ::PBPlayerClientInfo*>(&::PBPlayerClientInfo::default_instance());
  wizard_ = const_cast< ::PBWizard*>(&::PBWizard::default_instance());
  activity_ = const_cast< ::PBPlayerActivityInfo*>(&::PBPlayerActivityInfo::default_instance());
  award_ = const_cast< ::PBAwardRecord*>(&::PBAwardRecord::default_instance());
  matrix_ = const_cast< ::PBMatrixInfo*>(&::PBMatrixInfo::default_instance());
  exptimeinfo_ = const_cast< ::PBExpTimeInfo*>(&::PBExpTimeInfo::default_instance());
  treasurebowl_ = const_cast< ::PBTreasureBowl*>(&::PBTreasureBowl::default_instance());
  spiritinfo_ = const_cast< ::PBSpiritInfo*>(&::PBSpiritInfo::default_instance());
}

PBProperty::PBProperty(const PBProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBProperty::SharedCtor() {
  _cached_size_ = 0;
  curhp_ = 0u;
  curmp_ = 0u;
  curap_ = 0u;
  basicinfo_ = NULL;
  baggage_ = NULL;
  taskbaggage_ = NULL;
  equipment_ = NULL;
  storage_ = NULL;
  skill_ = NULL;
  buff_ = NULL;
  cdgroup_ = NULL;
  monsterrecord_ = NULL;
  telepos_ = NULL;
  pvpinfo_ = NULL;
  titleinfo_ = NULL;
  talentinfo_ = NULL;
  mwinfo_ = NULL;
  lifeskillbox_ = NULL;
  statisticinfo_ = NULL;
  clientinfo_ = NULL;
  wizard_ = NULL;
  activity_ = NULL;
  award_ = NULL;
  matrix_ = NULL;
  exptimeinfo_ = NULL;
  treasurebowl_ = NULL;
  spiritinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBProperty::~PBProperty() {
  SharedDtor();
}

void PBProperty::SharedDtor() {
  if (this != default_instance_) {
    delete basicinfo_;
    delete baggage_;
    delete taskbaggage_;
    delete equipment_;
    delete storage_;
    delete skill_;
    delete buff_;
    delete cdgroup_;
    delete monsterrecord_;
    delete telepos_;
    delete pvpinfo_;
    delete titleinfo_;
    delete talentinfo_;
    delete mwinfo_;
    delete lifeskillbox_;
    delete statisticinfo_;
    delete clientinfo_;
    delete wizard_;
    delete activity_;
    delete award_;
    delete matrix_;
    delete exptimeinfo_;
    delete treasurebowl_;
    delete spiritinfo_;
  }
}

const ::google::protobuf::Descriptor* PBProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBProperty_descriptor_;
}

const PBProperty& PBProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBProperty* PBProperty::default_instance_ = NULL;

PBProperty* PBProperty::New() const {
  return new PBProperty;
}

void PBProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curhp_ = 0u;
    curmp_ = 0u;
    curap_ = 0u;
    if (_has_bit(3)) {
      if (basicinfo_ != NULL) basicinfo_->::PBPlayerBasicInfo::Clear();
    }
    if (_has_bit(4)) {
      if (baggage_ != NULL) baggage_->::PBItemBox::Clear();
    }
    if (_has_bit(5)) {
      if (taskbaggage_ != NULL) taskbaggage_->::PBItemBox::Clear();
    }
    if (_has_bit(6)) {
      if (equipment_ != NULL) equipment_->::PBItemBox::Clear();
    }
    if (_has_bit(7)) {
      if (storage_ != NULL) storage_->::PBItemBox::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (skill_ != NULL) skill_->::PBSkillList::Clear();
    }
    if (_has_bit(9)) {
      if (buff_ != NULL) buff_->::PBBuffList::Clear();
    }
    if (_has_bit(10)) {
      if (cdgroup_ != NULL) cdgroup_->::PBPlayerCDGroupInfo::Clear();
    }
    if (_has_bit(11)) {
      if (monsterrecord_ != NULL) monsterrecord_->::PBMonsterRecordInfo::Clear();
    }
    if (_has_bit(12)) {
      if (telepos_ != NULL) telepos_->::PBTelePosInfo::Clear();
    }
    if (_has_bit(13)) {
      if (pvpinfo_ != NULL) pvpinfo_->::PBPlayerPVPInfo::Clear();
    }
    if (_has_bit(14)) {
      if (titleinfo_ != NULL) titleinfo_->::PBPlayerTitleInfo::Clear();
    }
    if (_has_bit(15)) {
      if (talentinfo_ != NULL) talentinfo_->::PBPlayerTalentInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (mwinfo_ != NULL) mwinfo_->::PBPlayerMWInfo::Clear();
    }
    if (_has_bit(17)) {
      if (lifeskillbox_ != NULL) lifeskillbox_->::PBLifeSkillBox::Clear();
    }
    if (_has_bit(18)) {
      if (statisticinfo_ != NULL) statisticinfo_->::PBPlayerStatisticInfo::Clear();
    }
    if (_has_bit(19)) {
      if (clientinfo_ != NULL) clientinfo_->::PBPlayerClientInfo::Clear();
    }
    if (_has_bit(20)) {
      if (wizard_ != NULL) wizard_->::PBWizard::Clear();
    }
    if (_has_bit(21)) {
      if (activity_ != NULL) activity_->::PBPlayerActivityInfo::Clear();
    }
    if (_has_bit(22)) {
      if (award_ != NULL) award_->::PBAwardRecord::Clear();
    }
    if (_has_bit(23)) {
      if (matrix_ != NULL) matrix_->::PBMatrixInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (exptimeinfo_ != NULL) exptimeinfo_->::PBExpTimeInfo::Clear();
    }
    if (_has_bit(25)) {
      if (treasurebowl_ != NULL) treasurebowl_->::PBTreasureBowl::Clear();
    }
    if (_has_bit(26)) {
      if (spiritinfo_ != NULL) spiritinfo_->::PBSpiritInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CurHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curhp_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CurMP;
        break;
      }
      
      // optional uint32 CurMP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurMP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curmp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CurAP;
        break;
      }
      
      // optional uint32 CurAP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurAP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curap_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_BasicInfo;
        break;
      }
      
      // optional .PBPlayerBasicInfo BasicInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BasicInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_basicinfo()));
        if (input->ExpectTag(42)) goto parse_Baggage;
        break;
      }
      
      // optional .PBItemBox Baggage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Baggage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_baggage()));
        if (input->ExpectTag(50)) goto parse_TaskBaggage;
        break;
      }
      
      // optional .PBItemBox TaskBaggage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TaskBaggage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_taskbaggage()));
        if (input->ExpectTag(58)) goto parse_Equipment;
        break;
      }
      
      // optional .PBItemBox Equipment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Equipment:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_equipment()));
        if (input->ExpectTag(66)) goto parse_Storage;
        break;
      }
      
      // optional .PBItemBox Storage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Storage:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_storage()));
        if (input->ExpectTag(74)) goto parse_Skill;
        break;
      }
      
      // optional .PBSkillList Skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Skill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_skill()));
        if (input->ExpectTag(82)) goto parse_Buff;
        break;
      }
      
      // optional .PBBuffList Buff = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Buff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buff()));
        if (input->ExpectTag(90)) goto parse_CDGroup;
        break;
      }
      
      // optional .PBPlayerCDGroupInfo CDGroup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CDGroup:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_cdgroup()));
        if (input->ExpectTag(98)) goto parse_MonsterRecord;
        break;
      }
      
      // optional .PBMonsterRecordInfo MonsterRecord = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MonsterRecord:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_monsterrecord()));
        if (input->ExpectTag(106)) goto parse_TelePos;
        break;
      }
      
      // optional .PBTelePosInfo TelePos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TelePos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_telepos()));
        if (input->ExpectTag(114)) goto parse_PvPInfo;
        break;
      }
      
      // optional .PBPlayerPVPInfo PvPInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_PvPInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_pvpinfo()));
        if (input->ExpectTag(122)) goto parse_TitleInfo;
        break;
      }
      
      // optional .PBPlayerTitleInfo TitleInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TitleInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_titleinfo()));
        if (input->ExpectTag(130)) goto parse_TalentInfo;
        break;
      }
      
      // optional .PBPlayerTalentInfo TalentInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TalentInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_talentinfo()));
        if (input->ExpectTag(138)) goto parse_MWInfo;
        break;
      }
      
      // optional .PBPlayerMWInfo MWInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MWInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_mwinfo()));
        if (input->ExpectTag(146)) goto parse_LifeSkillBox;
        break;
      }
      
      // optional .PBLifeSkillBox LifeSkillBox = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillBox:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_lifeskillbox()));
        if (input->ExpectTag(154)) goto parse_StatisticInfo;
        break;
      }
      
      // optional .PBPlayerStatisticInfo StatisticInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StatisticInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_statisticinfo()));
        if (input->ExpectTag(162)) goto parse_ClientInfo;
        break;
      }
      
      // optional .PBPlayerClientInfo ClientInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ClientInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_clientinfo()));
        if (input->ExpectTag(170)) goto parse_Wizard;
        break;
      }
      
      // optional .PBWizard Wizard = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Wizard:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_wizard()));
        if (input->ExpectTag(178)) goto parse_Activity;
        break;
      }
      
      // optional .PBPlayerActivityInfo Activity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Activity:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_activity()));
        if (input->ExpectTag(186)) goto parse_Award;
        break;
      }
      
      // optional .PBAwardRecord Award = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Award:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_award()));
        if (input->ExpectTag(194)) goto parse_Matrix;
        break;
      }
      
      // optional .PBMatrixInfo Matrix = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Matrix:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_matrix()));
        if (input->ExpectTag(202)) goto parse_ExpTimeInfo;
        break;
      }
      
      // optional .PBExpTimeInfo ExpTimeInfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ExpTimeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_exptimeinfo()));
        if (input->ExpectTag(210)) goto parse_TreasureBowl;
        break;
      }
      
      // optional .PBTreasureBowl TreasureBowl = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TreasureBowl:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_treasurebowl()));
        if (input->ExpectTag(218)) goto parse_SpiritInfo;
        break;
      }
      
      // optional .PBSpiritInfo SpiritInfo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SpiritInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_spiritinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CurHP = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->curhp(), output);
  }
  
  // optional uint32 CurMP = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->curmp(), output);
  }
  
  // optional uint32 CurAP = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->curap(), output);
  }
  
  // optional .PBPlayerBasicInfo BasicInfo = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->basicinfo(), output);
  }
  
  // optional .PBItemBox Baggage = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->baggage(), output);
  }
  
  // optional .PBItemBox TaskBaggage = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->taskbaggage(), output);
  }
  
  // optional .PBItemBox Equipment = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->equipment(), output);
  }
  
  // optional .PBItemBox Storage = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->storage(), output);
  }
  
  // optional .PBSkillList Skill = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->skill(), output);
  }
  
  // optional .PBBuffList Buff = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->buff(), output);
  }
  
  // optional .PBPlayerCDGroupInfo CDGroup = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->cdgroup(), output);
  }
  
  // optional .PBMonsterRecordInfo MonsterRecord = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->monsterrecord(), output);
  }
  
  // optional .PBTelePosInfo TelePos = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->telepos(), output);
  }
  
  // optional .PBPlayerPVPInfo PvPInfo = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(14, this->pvpinfo(), output);
  }
  
  // optional .PBPlayerTitleInfo TitleInfo = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->titleinfo(), output);
  }
  
  // optional .PBPlayerTalentInfo TalentInfo = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->talentinfo(), output);
  }
  
  // optional .PBPlayerMWInfo MWInfo = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->mwinfo(), output);
  }
  
  // optional .PBLifeSkillBox LifeSkillBox = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->lifeskillbox(), output);
  }
  
  // optional .PBPlayerStatisticInfo StatisticInfo = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(19, this->statisticinfo(), output);
  }
  
  // optional .PBPlayerClientInfo ClientInfo = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->clientinfo(), output);
  }
  
  // optional .PBWizard Wizard = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->wizard(), output);
  }
  
  // optional .PBPlayerActivityInfo Activity = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->activity(), output);
  }
  
  // optional .PBAwardRecord Award = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->award(), output);
  }
  
  // optional .PBMatrixInfo Matrix = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->matrix(), output);
  }
  
  // optional .PBExpTimeInfo ExpTimeInfo = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->exptimeinfo(), output);
  }
  
  // optional .PBTreasureBowl TreasureBowl = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->treasurebowl(), output);
  }
  
  // optional .PBSpiritInfo SpiritInfo = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->spiritinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CurHP = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->curhp(), target);
  }
  
  // optional uint32 CurMP = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->curmp(), target);
  }
  
  // optional uint32 CurAP = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->curap(), target);
  }
  
  // optional .PBPlayerBasicInfo BasicInfo = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->basicinfo(), target);
  }
  
  // optional .PBItemBox Baggage = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->baggage(), target);
  }
  
  // optional .PBItemBox TaskBaggage = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->taskbaggage(), target);
  }
  
  // optional .PBItemBox Equipment = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->equipment(), target);
  }
  
  // optional .PBItemBox Storage = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->storage(), target);
  }
  
  // optional .PBSkillList Skill = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->skill(), target);
  }
  
  // optional .PBBuffList Buff = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->buff(), target);
  }
  
  // optional .PBPlayerCDGroupInfo CDGroup = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->cdgroup(), target);
  }
  
  // optional .PBMonsterRecordInfo MonsterRecord = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->monsterrecord(), target);
  }
  
  // optional .PBTelePosInfo TelePos = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->telepos(), target);
  }
  
  // optional .PBPlayerPVPInfo PvPInfo = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(14, this->pvpinfo(), target);
  }
  
  // optional .PBPlayerTitleInfo TitleInfo = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->titleinfo(), target);
  }
  
  // optional .PBPlayerTalentInfo TalentInfo = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->talentinfo(), target);
  }
  
  // optional .PBPlayerMWInfo MWInfo = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->mwinfo(), target);
  }
  
  // optional .PBLifeSkillBox LifeSkillBox = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->lifeskillbox(), target);
  }
  
  // optional .PBPlayerStatisticInfo StatisticInfo = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(19, this->statisticinfo(), target);
  }
  
  // optional .PBPlayerClientInfo ClientInfo = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->clientinfo(), target);
  }
  
  // optional .PBWizard Wizard = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->wizard(), target);
  }
  
  // optional .PBPlayerActivityInfo Activity = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->activity(), target);
  }
  
  // optional .PBAwardRecord Award = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->award(), target);
  }
  
  // optional .PBMatrixInfo Matrix = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->matrix(), target);
  }
  
  // optional .PBExpTimeInfo ExpTimeInfo = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->exptimeinfo(), target);
  }
  
  // optional .PBTreasureBowl TreasureBowl = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->treasurebowl(), target);
  }
  
  // optional .PBSpiritInfo SpiritInfo = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->spiritinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurHP = 1;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curhp());
    }
    
    // optional uint32 CurMP = 2;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curmp());
    }
    
    // optional uint32 CurAP = 3;
    if (has_curap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curap());
    }
    
    // optional .PBPlayerBasicInfo BasicInfo = 4;
    if (has_basicinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->basicinfo());
    }
    
    // optional .PBItemBox Baggage = 5;
    if (has_baggage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->baggage());
    }
    
    // optional .PBItemBox TaskBaggage = 6;
    if (has_taskbaggage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->taskbaggage());
    }
    
    // optional .PBItemBox Equipment = 7;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->equipment());
    }
    
    // optional .PBItemBox Storage = 8;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->storage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBSkillList Skill = 9;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional .PBBuffList Buff = 10;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buff());
    }
    
    // optional .PBPlayerCDGroupInfo CDGroup = 11;
    if (has_cdgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->cdgroup());
    }
    
    // optional .PBMonsterRecordInfo MonsterRecord = 12;
    if (has_monsterrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->monsterrecord());
    }
    
    // optional .PBTelePosInfo TelePos = 13;
    if (has_telepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->telepos());
    }
    
    // optional .PBPlayerPVPInfo PvPInfo = 14;
    if (has_pvpinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->pvpinfo());
    }
    
    // optional .PBPlayerTitleInfo TitleInfo = 15;
    if (has_titleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->titleinfo());
    }
    
    // optional .PBPlayerTalentInfo TalentInfo = 16;
    if (has_talentinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->talentinfo());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBPlayerMWInfo MWInfo = 17;
    if (has_mwinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->mwinfo());
    }
    
    // optional .PBLifeSkillBox LifeSkillBox = 18;
    if (has_lifeskillbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->lifeskillbox());
    }
    
    // optional .PBPlayerStatisticInfo StatisticInfo = 19;
    if (has_statisticinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->statisticinfo());
    }
    
    // optional .PBPlayerClientInfo ClientInfo = 20;
    if (has_clientinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->clientinfo());
    }
    
    // optional .PBWizard Wizard = 21;
    if (has_wizard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->wizard());
    }
    
    // optional .PBPlayerActivityInfo Activity = 22;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->activity());
    }
    
    // optional .PBAwardRecord Award = 23;
    if (has_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->award());
    }
    
    // optional .PBMatrixInfo Matrix = 24;
    if (has_matrix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->matrix());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PBExpTimeInfo ExpTimeInfo = 25;
    if (has_exptimeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->exptimeinfo());
    }
    
    // optional .PBTreasureBowl TreasureBowl = 26;
    if (has_treasurebowl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->treasurebowl());
    }
    
    // optional .PBSpiritInfo SpiritInfo = 27;
    if (has_spiritinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->spiritinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBProperty::MergeFrom(const PBProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_curhp(from.curhp());
    }
    if (from._has_bit(1)) {
      set_curmp(from.curmp());
    }
    if (from._has_bit(2)) {
      set_curap(from.curap());
    }
    if (from._has_bit(3)) {
      mutable_basicinfo()->::PBPlayerBasicInfo::MergeFrom(from.basicinfo());
    }
    if (from._has_bit(4)) {
      mutable_baggage()->::PBItemBox::MergeFrom(from.baggage());
    }
    if (from._has_bit(5)) {
      mutable_taskbaggage()->::PBItemBox::MergeFrom(from.taskbaggage());
    }
    if (from._has_bit(6)) {
      mutable_equipment()->::PBItemBox::MergeFrom(from.equipment());
    }
    if (from._has_bit(7)) {
      mutable_storage()->::PBItemBox::MergeFrom(from.storage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_skill()->::PBSkillList::MergeFrom(from.skill());
    }
    if (from._has_bit(9)) {
      mutable_buff()->::PBBuffList::MergeFrom(from.buff());
    }
    if (from._has_bit(10)) {
      mutable_cdgroup()->::PBPlayerCDGroupInfo::MergeFrom(from.cdgroup());
    }
    if (from._has_bit(11)) {
      mutable_monsterrecord()->::PBMonsterRecordInfo::MergeFrom(from.monsterrecord());
    }
    if (from._has_bit(12)) {
      mutable_telepos()->::PBTelePosInfo::MergeFrom(from.telepos());
    }
    if (from._has_bit(13)) {
      mutable_pvpinfo()->::PBPlayerPVPInfo::MergeFrom(from.pvpinfo());
    }
    if (from._has_bit(14)) {
      mutable_titleinfo()->::PBPlayerTitleInfo::MergeFrom(from.titleinfo());
    }
    if (from._has_bit(15)) {
      mutable_talentinfo()->::PBPlayerTalentInfo::MergeFrom(from.talentinfo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_mwinfo()->::PBPlayerMWInfo::MergeFrom(from.mwinfo());
    }
    if (from._has_bit(17)) {
      mutable_lifeskillbox()->::PBLifeSkillBox::MergeFrom(from.lifeskillbox());
    }
    if (from._has_bit(18)) {
      mutable_statisticinfo()->::PBPlayerStatisticInfo::MergeFrom(from.statisticinfo());
    }
    if (from._has_bit(19)) {
      mutable_clientinfo()->::PBPlayerClientInfo::MergeFrom(from.clientinfo());
    }
    if (from._has_bit(20)) {
      mutable_wizard()->::PBWizard::MergeFrom(from.wizard());
    }
    if (from._has_bit(21)) {
      mutable_activity()->::PBPlayerActivityInfo::MergeFrom(from.activity());
    }
    if (from._has_bit(22)) {
      mutable_award()->::PBAwardRecord::MergeFrom(from.award());
    }
    if (from._has_bit(23)) {
      mutable_matrix()->::PBMatrixInfo::MergeFrom(from.matrix());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_exptimeinfo()->::PBExpTimeInfo::MergeFrom(from.exptimeinfo());
    }
    if (from._has_bit(25)) {
      mutable_treasurebowl()->::PBTreasureBowl::MergeFrom(from.treasurebowl());
    }
    if (from._has_bit(26)) {
      mutable_spiritinfo()->::PBSpiritInfo::MergeFrom(from.spiritinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProperty::CopyFrom(const PBProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBProperty::Swap(PBProperty* other) {
  if (other != this) {
    std::swap(curhp_, other->curhp_);
    std::swap(curmp_, other->curmp_);
    std::swap(curap_, other->curap_);
    std::swap(basicinfo_, other->basicinfo_);
    std::swap(baggage_, other->baggage_);
    std::swap(taskbaggage_, other->taskbaggage_);
    std::swap(equipment_, other->equipment_);
    std::swap(storage_, other->storage_);
    std::swap(skill_, other->skill_);
    std::swap(buff_, other->buff_);
    std::swap(cdgroup_, other->cdgroup_);
    std::swap(monsterrecord_, other->monsterrecord_);
    std::swap(telepos_, other->telepos_);
    std::swap(pvpinfo_, other->pvpinfo_);
    std::swap(titleinfo_, other->titleinfo_);
    std::swap(talentinfo_, other->talentinfo_);
    std::swap(mwinfo_, other->mwinfo_);
    std::swap(lifeskillbox_, other->lifeskillbox_);
    std::swap(statisticinfo_, other->statisticinfo_);
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(wizard_, other->wizard_);
    std::swap(activity_, other->activity_);
    std::swap(award_, other->award_);
    std::swap(matrix_, other->matrix_);
    std::swap(exptimeinfo_, other->exptimeinfo_);
    std::swap(treasurebowl_, other->treasurebowl_);
    std::swap(spiritinfo_, other->spiritinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBProperty::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTask::kTaskIDFieldNumber;
const int PBTask::kTaskProgressFieldNumber;
const int PBTask::kGameTimeLeftFieldNumber;
const int PBTask::kTaskDataFieldNumber;
const int PBTask::kTalkedNpcsFieldNumber;
const int PBTask::kExFlagsFieldNumber;
const int PBTask::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

PBTask::PBTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTask::InitAsDefaultInstance() {}

PBTask::PBTask(const PBTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskprogress_ = 0u;
  gametimeleft_ = 0;
  exflags_ = 0u;
  begintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTask::~PBTask() {
  SharedDtor();
}

void PBTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTask_descriptor_;
}

const PBTask& PBTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTask* PBTask::default_instance_ = NULL;

PBTask* PBTask::New() const {
  return new PBTask;
}

void PBTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskprogress_ = 0u;
    gametimeleft_ = 0;
    exflags_ = 0u;
    begintime_ = 0u;
  }
  taskdata_.Clear();
  talkednpcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskProgress;
        break;
      }
      
      // optional uint32 TaskProgress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskProgress:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskprogress_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_GameTimeLeft;
        break;
      }
      
      // optional int32 GameTimeLeft = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameTimeLeft:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &gametimeleft_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TaskData;
        break;
      }
      
      // repeated uint32 TaskData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskData:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_taskdata(value);
        if (input->ExpectTag(32)) goto parse_TaskData;
        if (input->ExpectTag(40)) goto parse_TalkedNpcs;
        break;
      }
      
      // repeated uint32 TalkedNpcs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TalkedNpcs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_talkednpcs(value);
        if (input->ExpectTag(40)) goto parse_TalkedNpcs;
        if (input->ExpectTag(48)) goto parse_ExFlags;
        break;
      }
      
      // optional uint32 ExFlags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExFlags:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exflags_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_BeginTime;
        break;
      }
      
      // optional uint32 BeginTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &begintime_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskProgress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskprogress(), output);
  }
  
  // optional int32 GameTimeLeft = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->gametimeleft(), output);
  }
  
  // repeated uint32 TaskData = 4;
  for (int i = 0; i < this->taskdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->taskdata(i), output);
  }
  
  // repeated uint32 TalkedNpcs = 5;
  for (int i = 0; i < this->talkednpcs_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->talkednpcs(i), output);
  }
  
  // optional uint32 ExFlags = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->exflags(), output);
  }
  
  // optional uint32 BeginTime = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->begintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskProgress = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskprogress(), target);
  }
  
  // optional int32 GameTimeLeft = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->gametimeleft(), target);
  }
  
  // repeated uint32 TaskData = 4;
  for (int i = 0; i < this->taskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->taskdata(i), target);
  }
  
  // repeated uint32 TalkedNpcs = 5;
  for (int i = 0; i < this->talkednpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->talkednpcs(i), target);
  }
  
  // optional uint32 ExFlags = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->exflags(), target);
  }
  
  // optional uint32 BeginTime = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->begintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskProgress = 2;
    if (has_taskprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskprogress());
    }
    
    // optional int32 GameTimeLeft = 3;
    if (has_gametimeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->gametimeleft());
    }
    
    // optional uint32 ExFlags = 6;
    if (has_exflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exflags());
    }
    
    // optional uint32 BeginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->begintime());
    }
    
  }
  // repeated uint32 TaskData = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->taskdata(i));
    }
    total_size += 1 * this->taskdata_size() + data_size;
  }
  
  // repeated uint32 TalkedNpcs = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->talkednpcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->talkednpcs(i));
    }
    total_size += 1 * this->talkednpcs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTask::MergeFrom(const PBTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdata_.MergeFrom(from.taskdata_);
  talkednpcs_.MergeFrom(from.talkednpcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskprogress(from.taskprogress());
    }
    if (from._has_bit(2)) {
      set_gametimeleft(from.gametimeleft());
    }
    if (from._has_bit(5)) {
      set_exflags(from.exflags());
    }
    if (from._has_bit(6)) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTask::CopyFrom(const PBTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTask::Swap(PBTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskprogress_, other->taskprogress_);
    std::swap(gametimeleft_, other->gametimeleft_);
    taskdata_.Swap(&other->taskdata_);
    talkednpcs_.Swap(&other->talkednpcs_);
    std::swap(exflags_, other->exflags_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PBTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLoopTaskData::kTodayCompletedCirclesFieldNumber;
const int PBLoopTaskData::kLastCompletedTimeFieldNumber;
const int PBLoopTaskData::kLoopTasksFieldNumber;
const int PBLoopTaskData::kCompletedTimesFieldNumber;
const int PBLoopTaskData::kLastAbortTimeFieldNumber;
const int PBLoopTaskData::kCurSubIndexFieldNumber;
const int PBLoopTaskData::kWeekLoopsFieldNumber;
const int PBLoopTaskData::kDayCompletedLoopFlagFieldNumber;
#endif  // !_MSC_VER

PBLoopTaskData::PBLoopTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoopTaskData::InitAsDefaultInstance() {}

PBLoopTaskData::PBLoopTaskData(const PBLoopTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoopTaskData::SharedCtor() {
  _cached_size_ = 0;
  todaycompletedcircles_ = 0u;
  lastcompletedtime_ = GOOGLE_ULONGLONG(0);
  completedtimes_ = 0u;
  lastaborttime_ = GOOGLE_ULONGLONG(0);
  cursubindex_ = 0;
  weekloops_ = 0u;
  daycompletedloopflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoopTaskData::~PBLoopTaskData() {
  SharedDtor();
}

void PBLoopTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLoopTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoopTaskData_descriptor_;
}

const PBLoopTaskData& PBLoopTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBLoopTaskData* PBLoopTaskData::default_instance_ = NULL;

PBLoopTaskData* PBLoopTaskData::New() const {
  return new PBLoopTaskData;
}

void PBLoopTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaycompletedcircles_ = 0u;
    lastcompletedtime_ = GOOGLE_ULONGLONG(0);
    completedtimes_ = 0u;
    lastaborttime_ = GOOGLE_ULONGLONG(0);
    cursubindex_ = 0;
    weekloops_ = 0u;
    daycompletedloopflag_ = 0u;
  }
  looptasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoopTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TodayCompletedCircles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaycompletedcircles_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LastCompletedTime;
        break;
      }
      
      // optional uint64 LastCompletedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastCompletedTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &lastcompletedtime_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LoopTasks;
        break;
      }
      
      // repeated uint32 LoopTasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LoopTasks:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_looptasks(value);
        if (input->ExpectTag(24)) goto parse_LoopTasks;
        if (input->ExpectTag(32)) goto parse_CompletedTimes;
        break;
      }
      
      // optional uint32 CompletedTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completedtimes_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LastAbortTime;
        break;
      }
      
      // optional uint64 LastAbortTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastAbortTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &lastaborttime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CurSubIndex;
        break;
      }
      
      // optional int32 CurSubIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurSubIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &cursubindex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_WeekLoops;
        break;
      }
      
      // optional uint32 WeekLoops = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekLoops:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekloops_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_DayCompletedLoopFlag;
        break;
      }
      
      // optional uint32 DayCompletedLoopFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DayCompletedLoopFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &daycompletedloopflag_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoopTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLoopTaskData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TodayCompletedCircles = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->todaycompletedcircles(), output);
  }
  
  // optional uint64 LastCompletedTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->lastcompletedtime(), output);
  }
  
  // repeated uint32 LoopTasks = 3;
  for (int i = 0; i < this->looptasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->looptasks(i), output);
  }
  
  // optional uint32 CompletedTimes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->completedtimes(), output);
  }
  
  // optional uint64 LastAbortTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(5, this->lastaborttime(), output);
  }
  
  // optional int32 CurSubIndex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->cursubindex(), output);
  }
  
  // optional uint32 WeekLoops = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->weekloops(), output);
  }
  
  // optional uint32 DayCompletedLoopFlag = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->daycompletedloopflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoopTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TodayCompletedCircles = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->todaycompletedcircles(), target);
  }
  
  // optional uint64 LastCompletedTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->lastcompletedtime(), target);
  }
  
  // repeated uint32 LoopTasks = 3;
  for (int i = 0; i < this->looptasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->looptasks(i), target);
  }
  
  // optional uint32 CompletedTimes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->completedtimes(), target);
  }
  
  // optional uint64 LastAbortTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(5, this->lastaborttime(), target);
  }
  
  // optional int32 CurSubIndex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->cursubindex(), target);
  }
  
  // optional uint32 WeekLoops = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->weekloops(), target);
  }
  
  // optional uint32 DayCompletedLoopFlag = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->daycompletedloopflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoopTaskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TodayCompletedCircles = 1;
    if (has_todaycompletedcircles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaycompletedcircles());
    }
    
    // optional uint64 LastCompletedTime = 2;
    if (has_lastcompletedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->lastcompletedtime());
    }
    
    // optional uint32 CompletedTimes = 4;
    if (has_completedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completedtimes());
    }
    
    // optional uint64 LastAbortTime = 5;
    if (has_lastaborttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->lastaborttime());
    }
    
    // optional int32 CurSubIndex = 6;
    if (has_cursubindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->cursubindex());
    }
    
    // optional uint32 WeekLoops = 7;
    if (has_weekloops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekloops());
    }
    
    // optional uint32 DayCompletedLoopFlag = 8;
    if (has_daycompletedloopflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->daycompletedloopflag());
    }
    
  }
  // repeated uint32 LoopTasks = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->looptasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->looptasks(i));
    }
    total_size += 1 * this->looptasks_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLoopTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoopTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoopTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoopTaskData::MergeFrom(const PBLoopTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  looptasks_.MergeFrom(from.looptasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_todaycompletedcircles(from.todaycompletedcircles());
    }
    if (from._has_bit(1)) {
      set_lastcompletedtime(from.lastcompletedtime());
    }
    if (from._has_bit(3)) {
      set_completedtimes(from.completedtimes());
    }
    if (from._has_bit(4)) {
      set_lastaborttime(from.lastaborttime());
    }
    if (from._has_bit(5)) {
      set_cursubindex(from.cursubindex());
    }
    if (from._has_bit(6)) {
      set_weekloops(from.weekloops());
    }
    if (from._has_bit(7)) {
      set_daycompletedloopflag(from.daycompletedloopflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoopTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoopTaskData::CopyFrom(const PBLoopTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoopTaskData::Swap(PBLoopTaskData* other) {
  if (other != this) {
    std::swap(todaycompletedcircles_, other->todaycompletedcircles_);
    std::swap(lastcompletedtime_, other->lastcompletedtime_);
    looptasks_.Swap(&other->looptasks_);
    std::swap(completedtimes_, other->completedtimes_);
    std::swap(lastaborttime_, other->lastaborttime_);
    std::swap(cursubindex_, other->cursubindex_);
    std::swap(weekloops_, other->weekloops_);
    std::swap(daycompletedloopflag_, other->daycompletedloopflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLoopTaskData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLoopTaskData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLoopTaskData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLoopTaskData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBStorageTaskData::kTasksFieldNumber;
const int PBStorageTaskData::kTaskNumFieldNumber;
const int PBStorageTaskData::kLastClickNpcFieldNumber;
const int PBStorageTaskData::kCurTaskIDFieldNumber;
const int PBStorageTaskData::kGotTasksFieldNumber;
const int PBStorageTaskData::kGotNumFieldNumber;
const int PBStorageTaskData::kTodayCompletedFieldNumber;
const int PBStorageTaskData::kTodayRMBRefreshFieldNumber;
#endif  // !_MSC_VER

PBStorageTaskData::PBStorageTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStorageTaskData::InitAsDefaultInstance() {}

PBStorageTaskData::PBStorageTaskData(const PBStorageTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStorageTaskData::SharedCtor() {
  _cached_size_ = 0;
  tasknum_ = 0u;
  lastclicknpc_ = GOOGLE_ULONGLONG(0);
  curtaskid_ = 0u;
  gotnum_ = 0u;
  todaycompleted_ = 0u;
  todayrmbrefresh_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStorageTaskData::~PBStorageTaskData() {
  SharedDtor();
}

void PBStorageTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStorageTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStorageTaskData_descriptor_;
}

const PBStorageTaskData& PBStorageTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBStorageTaskData* PBStorageTaskData::default_instance_ = NULL;

PBStorageTaskData* PBStorageTaskData::New() const {
  return new PBStorageTaskData;
}

void PBStorageTaskData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    tasknum_ = 0u;
    lastclicknpc_ = GOOGLE_ULONGLONG(0);
    curtaskid_ = 0u;
    gotnum_ = 0u;
    todaycompleted_ = 0u;
    todayrmbrefresh_ = 0u;
  }
  tasks_.Clear();
  gottasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStorageTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_tasks(value);
        if (input->ExpectTag(8)) goto parse_Tasks;
        if (input->ExpectTag(16)) goto parse_TaskNum;
        break;
      }
      
      // optional uint32 TaskNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tasknum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LastClickNpc;
        break;
      }
      
      // optional uint64 LastClickNpc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastClickNpc:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &lastclicknpc_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_CurTaskID;
        break;
      }
      
      // optional uint32 CurTaskID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CurTaskID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &curtaskid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_GotTasks;
        break;
      }
      
      // repeated uint32 GotTasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GotTasks:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_gottasks(value);
        if (input->ExpectTag(40)) goto parse_GotTasks;
        if (input->ExpectTag(48)) goto parse_GotNum;
        break;
      }
      
      // optional uint32 GotNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GotNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gotnum_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TodayCompleted;
        break;
      }
      
      // optional uint32 TodayCompleted = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayCompleted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaycompleted_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_TodayRMBRefresh;
        break;
      }
      
      // optional uint32 TodayRMBRefresh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayRMBRefresh:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayrmbrefresh_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStorageTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStorageTaskData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tasks(i), output);
  }
  
  // optional uint32 TaskNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->tasknum(), output);
  }
  
  // optional uint64 LastClickNpc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->lastclicknpc(), output);
  }
  
  // optional uint32 CurTaskID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->curtaskid(), output);
  }
  
  // repeated uint32 GotTasks = 5;
  for (int i = 0; i < this->gottasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->gottasks(i), output);
  }
  
  // optional uint32 GotNum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->gotnum(), output);
  }
  
  // optional uint32 TodayCompleted = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->todaycompleted(), output);
  }
  
  // optional uint32 TodayRMBRefresh = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->todayrmbrefresh(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStorageTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tasks(i), target);
  }
  
  // optional uint32 TaskNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->tasknum(), target);
  }
  
  // optional uint64 LastClickNpc = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->lastclicknpc(), target);
  }
  
  // optional uint32 CurTaskID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->curtaskid(), target);
  }
  
  // repeated uint32 GotTasks = 5;
  for (int i = 0; i < this->gottasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->gottasks(i), target);
  }
  
  // optional uint32 GotNum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->gotnum(), target);
  }
  
  // optional uint32 TodayCompleted = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->todaycompleted(), target);
  }
  
  // optional uint32 TodayRMBRefresh = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->todayrmbrefresh(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStorageTaskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 TaskNum = 2;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tasknum());
    }
    
    // optional uint64 LastClickNpc = 3;
    if (has_lastclicknpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->lastclicknpc());
    }
    
    // optional uint32 CurTaskID = 4;
    if (has_curtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->curtaskid());
    }
    
    // optional uint32 GotNum = 6;
    if (has_gotnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gotnum());
    }
    
    // optional uint32 TodayCompleted = 7;
    if (has_todaycompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaycompleted());
    }
    
    // optional uint32 TodayRMBRefresh = 8;
    if (has_todayrmbrefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayrmbrefresh());
    }
    
  }
  // repeated uint32 Tasks = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->tasks(i));
    }
    total_size += 1 * this->tasks_size() + data_size;
  }
  
  // repeated uint32 GotTasks = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->gottasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->gottasks(i));
    }
    total_size += 1 * this->gottasks_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStorageTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStorageTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStorageTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStorageTaskData::MergeFrom(const PBStorageTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  gottasks_.MergeFrom(from.gottasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_tasknum(from.tasknum());
    }
    if (from._has_bit(2)) {
      set_lastclicknpc(from.lastclicknpc());
    }
    if (from._has_bit(3)) {
      set_curtaskid(from.curtaskid());
    }
    if (from._has_bit(5)) {
      set_gotnum(from.gotnum());
    }
    if (from._has_bit(6)) {
      set_todaycompleted(from.todaycompleted());
    }
    if (from._has_bit(7)) {
      set_todayrmbrefresh(from.todayrmbrefresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStorageTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStorageTaskData::CopyFrom(const PBStorageTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStorageTaskData::Swap(PBStorageTaskData* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(lastclicknpc_, other->lastclicknpc_);
    std::swap(curtaskid_, other->curtaskid_);
    gottasks_.Swap(&other->gottasks_);
    std::swap(gotnum_, other->gotnum_);
    std::swap(todaycompleted_, other->todaycompleted_);
    std::swap(todayrmbrefresh_, other->todayrmbrefresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStorageTaskData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStorageTaskData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStorageTaskData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStorageTaskData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int TragedyStruct::kTragedyIndexFieldNumber;
const int TragedyStruct::kNextTragedyTaskFieldNumber;
const int TragedyStruct::kTragedyStateFieldNumber;
#endif  // !_MSC_VER

TragedyStruct::TragedyStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TragedyStruct::InitAsDefaultInstance() {}

TragedyStruct::TragedyStruct(const TragedyStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TragedyStruct::SharedCtor() {
  _cached_size_ = 0;
  tragedyindex_ = 0u;
  nexttragedytask_ = 0u;
  tragedystate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TragedyStruct::~TragedyStruct() {
  SharedDtor();
}

void TragedyStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TragedyStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TragedyStruct_descriptor_;
}

const TragedyStruct& TragedyStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

TragedyStruct* TragedyStruct::default_instance_ = NULL;

TragedyStruct* TragedyStruct::New() const {
  return new TragedyStruct;
}

void TragedyStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tragedyindex_ = 0u;
    nexttragedytask_ = 0u;
    tragedystate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TragedyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TragedyIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tragedyindex_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_NextTragedyTask;
        break;
      }
      
      // optional fixed32 NextTragedyTask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_NextTragedyTask:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &nexttragedytask_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TragedyState;
        break;
      }
      
      // optional uint32 TragedyState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TragedyState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tragedystate_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TragedyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TragedyStruct::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TragedyIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tragedyindex(), output);
  }
  
  // optional fixed32 NextTragedyTask = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(2, this->nexttragedytask(), output);
  }
  
  // optional uint32 TragedyState = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->tragedystate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TragedyStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TragedyIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tragedyindex(), target);
  }
  
  // optional fixed32 NextTragedyTask = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(2, this->nexttragedytask(), target);
  }
  
  // optional uint32 TragedyState = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->tragedystate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TragedyStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TragedyIndex = 1;
    if (has_tragedyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tragedyindex());
    }
    
    // optional fixed32 NextTragedyTask = 2;
    if (has_nexttragedytask()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 TragedyState = 3;
    if (has_tragedystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tragedystate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TragedyStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TragedyStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TragedyStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TragedyStruct::MergeFrom(const TragedyStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tragedyindex(from.tragedyindex());
    }
    if (from._has_bit(1)) {
      set_nexttragedytask(from.nexttragedytask());
    }
    if (from._has_bit(2)) {
      set_tragedystate(from.tragedystate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TragedyStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TragedyStruct::CopyFrom(const TragedyStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TragedyStruct::Swap(TragedyStruct* other) {
  if (other != this) {
    std::swap(tragedyindex_, other->tragedyindex_);
    std::swap(nexttragedytask_, other->nexttragedytask_);
    std::swap(tragedystate_, other->tragedystate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool TragedyStruct::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* TragedyStruct::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* TragedyStruct::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return TragedyStruct_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTaskGroupData::kGroupIDFieldNumber;
const int PBTaskGroupData::kTodayCompletedFieldNumber;
const int PBTaskGroupData::kTodayAcceptedFieldNumber;
const int PBTaskGroupData::kWeekCompletedFieldNumber;
const int PBTaskGroupData::kWeekAcceptedFieldNumber;
#endif  // !_MSC_VER

PBTaskGroupData::PBTaskGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskGroupData::InitAsDefaultInstance() {}

PBTaskGroupData::PBTaskGroupData(const PBTaskGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskGroupData::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  todaycompleted_ = 0u;
  todayaccepted_ = 0u;
  weekcompleted_ = 0u;
  weekaccepted_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskGroupData::~PBTaskGroupData() {
  SharedDtor();
}

void PBTaskGroupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTaskGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskGroupData_descriptor_;
}

const PBTaskGroupData& PBTaskGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTaskGroupData* PBTaskGroupData::default_instance_ = NULL;

PBTaskGroupData* PBTaskGroupData::New() const {
  return new PBTaskGroupData;
}

void PBTaskGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    todaycompleted_ = 0u;
    todayaccepted_ = 0u;
    weekcompleted_ = 0u;
    weekaccepted_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TodayCompleted;
        break;
      }
      
      // optional uint32 TodayCompleted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayCompleted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaycompleted_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_TodayAccepted;
        break;
      }
      
      // optional uint32 TodayAccepted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayAccepted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayaccepted_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeekCompleted;
        break;
      }
      
      // optional uint32 WeekCompleted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekCompleted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekcompleted_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_WeekAccepted;
        break;
      }
      
      // optional uint32 WeekAccepted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekAccepted:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekaccepted_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTaskGroupData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 GroupID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->groupid(), output);
  }
  
  // optional uint32 TodayCompleted = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->todaycompleted(), output);
  }
  
  // optional uint32 TodayAccepted = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->todayaccepted(), output);
  }
  
  // optional uint32 WeekCompleted = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weekcompleted(), output);
  }
  
  // optional uint32 WeekAccepted = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->weekaccepted(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 GroupID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->groupid(), target);
  }
  
  // optional uint32 TodayCompleted = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->todaycompleted(), target);
  }
  
  // optional uint32 TodayAccepted = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->todayaccepted(), target);
  }
  
  // optional uint32 WeekCompleted = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weekcompleted(), target);
  }
  
  // optional uint32 WeekAccepted = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->weekaccepted(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskGroupData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 TodayCompleted = 2;
    if (has_todaycompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaycompleted());
    }
    
    // optional uint32 TodayAccepted = 3;
    if (has_todayaccepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayaccepted());
    }
    
    // optional uint32 WeekCompleted = 4;
    if (has_weekcompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekcompleted());
    }
    
    // optional uint32 WeekAccepted = 5;
    if (has_weekaccepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekaccepted());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTaskGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskGroupData::MergeFrom(const PBTaskGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(1)) {
      set_todaycompleted(from.todaycompleted());
    }
    if (from._has_bit(2)) {
      set_todayaccepted(from.todayaccepted());
    }
    if (from._has_bit(3)) {
      set_weekcompleted(from.weekcompleted());
    }
    if (from._has_bit(4)) {
      set_weekaccepted(from.weekaccepted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskGroupData::CopyFrom(const PBTaskGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskGroupData::Swap(PBTaskGroupData* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(todaycompleted_, other->todaycompleted_);
    std::swap(todayaccepted_, other->todayaccepted_);
    std::swap(weekcompleted_, other->weekcompleted_);
    std::swap(weekaccepted_, other->weekaccepted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTaskGroupData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTaskGroupData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTaskGroupData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTaskGroupData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleChairManTask::kTaskIDFieldNumber;
const int SingleChairManTask::kTaskStateFieldNumber;
#endif  // !_MSC_VER

SingleChairManTask::SingleChairManTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleChairManTask::InitAsDefaultInstance() {}

SingleChairManTask::SingleChairManTask(const SingleChairManTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleChairManTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleChairManTask::~SingleChairManTask() {
  SharedDtor();
}

void SingleChairManTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleChairManTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleChairManTask_descriptor_;
}

const SingleChairManTask& SingleChairManTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

SingleChairManTask* SingleChairManTask::default_instance_ = NULL;

SingleChairManTask* SingleChairManTask::New() const {
  return new SingleChairManTask;
}

void SingleChairManTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleChairManTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleChairManTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleChairManTask::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleChairManTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleChairManTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskState = 2;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleChairManTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleChairManTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleChairManTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleChairManTask::MergeFrom(const SingleChairManTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstate(from.taskstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleChairManTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChairManTask::CopyFrom(const SingleChairManTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleChairManTask::Swap(SingleChairManTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleChairManTask::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleChairManTask::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleChairManTask::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleChairManTask_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int SingleCompletedInf::kChairmanIDFieldNumber;
const int SingleCompletedInf::kCompletedNumFieldNumber;
#endif  // !_MSC_VER

SingleCompletedInf::SingleCompletedInf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleCompletedInf::InitAsDefaultInstance() {}

SingleCompletedInf::SingleCompletedInf(const SingleCompletedInf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleCompletedInf::SharedCtor() {
  _cached_size_ = 0;
  chairmanid_ = 0u;
  completednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleCompletedInf::~SingleCompletedInf() {
  SharedDtor();
}

void SingleCompletedInf::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleCompletedInf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleCompletedInf_descriptor_;
}

const SingleCompletedInf& SingleCompletedInf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

SingleCompletedInf* SingleCompletedInf::default_instance_ = NULL;

SingleCompletedInf* SingleCompletedInf::New() const {
  return new SingleCompletedInf;
}

void SingleCompletedInf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairmanid_ = 0u;
    completednum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleCompletedInf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ChairmanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chairmanid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CompletedNum;
        break;
      }
      
      // optional uint32 CompletedNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completednum_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleCompletedInf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleCompletedInf::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ChairmanID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->chairmanid(), output);
  }
  
  // optional uint32 CompletedNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->completednum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleCompletedInf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ChairmanID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->chairmanid(), target);
  }
  
  // optional uint32 CompletedNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->completednum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleCompletedInf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChairmanID = 1;
    if (has_chairmanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chairmanid());
    }
    
    // optional uint32 CompletedNum = 2;
    if (has_completednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completednum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleCompletedInf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleCompletedInf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleCompletedInf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleCompletedInf::MergeFrom(const SingleCompletedInf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chairmanid(from.chairmanid());
    }
    if (from._has_bit(1)) {
      set_completednum(from.completednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleCompletedInf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCompletedInf::CopyFrom(const SingleCompletedInf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCompletedInf::Swap(SingleCompletedInf* other) {
  if (other != this) {
    std::swap(chairmanid_, other->chairmanid_);
    std::swap(completednum_, other->completednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleCompletedInf::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleCompletedInf::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleCompletedInf::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleCompletedInf_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBChairManTaskData::kTasksFieldNumber;
const int PBChairManTaskData::kChairManIDFieldNumber;
const int PBChairManTaskData::kCompletedNumFieldNumber;
const int PBChairManTaskData::kAcceptedNumFieldNumber;
const int PBChairManTaskData::kCompletedFieldNumber;
#endif  // !_MSC_VER

PBChairManTaskData::PBChairManTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBChairManTaskData::InitAsDefaultInstance() {}

PBChairManTaskData::PBChairManTaskData(const PBChairManTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBChairManTaskData::SharedCtor() {
  _cached_size_ = 0;
  chairmanid_ = 0u;
  completednum_ = 0u;
  acceptednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBChairManTaskData::~PBChairManTaskData() {
  SharedDtor();
}

void PBChairManTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBChairManTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBChairManTaskData_descriptor_;
}

const PBChairManTaskData& PBChairManTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBChairManTaskData* PBChairManTaskData::default_instance_ = NULL;

PBChairManTaskData* PBChairManTaskData::New() const {
  return new PBChairManTaskData;
}

void PBChairManTaskData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chairmanid_ = 0u;
    completednum_ = 0u;
    acceptednum_ = 0u;
  }
  tasks_.Clear();
  completed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBChairManTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleChairManTask Tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Tasks:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasks()));
        if (input->ExpectTag(10)) goto parse_Tasks;
        if (input->ExpectTag(16)) goto parse_ChairManID;
        break;
      }
      
      // optional uint32 ChairManID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChairManID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chairmanid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CompletedNum;
        break;
      }
      
      // optional uint32 CompletedNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completednum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AcceptedNum;
        break;
      }
      
      // optional uint32 AcceptedNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AcceptedNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &acceptednum_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Completed;
        break;
      }
      
      // repeated .SingleCompletedInf Completed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Completed:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_completed()));
        if (input->ExpectTag(42)) goto parse_Completed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBChairManTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBChairManTaskData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleChairManTask Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->tasks(i), output);
  }
  
  // optional uint32 ChairManID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->chairmanid(), output);
  }
  
  // optional uint32 CompletedNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->completednum(), output);
  }
  
  // optional uint32 AcceptedNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->acceptednum(), output);
  }
  
  // repeated .SingleCompletedInf Completed = 5;
  for (int i = 0; i < this->completed_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->completed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBChairManTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleChairManTask Tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->tasks(i), target);
  }
  
  // optional uint32 ChairManID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->chairmanid(), target);
  }
  
  // optional uint32 CompletedNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->completednum(), target);
  }
  
  // optional uint32 AcceptedNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->acceptednum(), target);
  }
  
  // repeated .SingleCompletedInf Completed = 5;
  for (int i = 0; i < this->completed_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->completed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBChairManTaskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ChairManID = 2;
    if (has_chairmanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chairmanid());
    }
    
    // optional uint32 CompletedNum = 3;
    if (has_completednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completednum());
    }
    
    // optional uint32 AcceptedNum = 4;
    if (has_acceptednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->acceptednum());
    }
    
  }
  // repeated .SingleChairManTask Tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  // repeated .SingleCompletedInf Completed = 5;
  total_size += 1 * this->completed_size();
  for (int i = 0; i < this->completed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->completed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBChairManTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBChairManTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBChairManTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBChairManTaskData::MergeFrom(const PBChairManTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  completed_.MergeFrom(from.completed_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_chairmanid(from.chairmanid());
    }
    if (from._has_bit(2)) {
      set_completednum(from.completednum());
    }
    if (from._has_bit(3)) {
      set_acceptednum(from.acceptednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBChairManTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBChairManTaskData::CopyFrom(const PBChairManTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBChairManTaskData::Swap(PBChairManTaskData* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(chairmanid_, other->chairmanid_);
    std::swap(completednum_, other->completednum_);
    std::swap(acceptednum_, other->acceptednum_);
    completed_.Swap(&other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBChairManTaskData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBChairManTaskData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBChairManTaskData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBChairManTaskData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRefreshTaskData::kTaskIDFieldNumber;
const int PBRefreshTaskData::kTaskColorFieldNumber;
const int PBRefreshTaskData::kResultFlagFieldNumber;
#endif  // !_MSC_VER

PBRefreshTaskData::PBRefreshTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRefreshTaskData::InitAsDefaultInstance() {}

PBRefreshTaskData::PBRefreshTaskData(const PBRefreshTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRefreshTaskData::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskcolor_ = 0u;
  resultflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRefreshTaskData::~PBRefreshTaskData() {
  SharedDtor();
}

void PBRefreshTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRefreshTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRefreshTaskData_descriptor_;
}

const PBRefreshTaskData& PBRefreshTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRefreshTaskData* PBRefreshTaskData::default_instance_ = NULL;

PBRefreshTaskData* PBRefreshTaskData::New() const {
  return new PBRefreshTaskData;
}

void PBRefreshTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskcolor_ = 0u;
    resultflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRefreshTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskColor;
        break;
      }
      
      // optional uint32 TaskColor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskColor:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskcolor_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ResultFlag;
        break;
      }
      
      // optional uint32 ResultFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultflag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRefreshTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRefreshTaskData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskcolor(), output);
  }
  
  // optional uint32 ResultFlag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->resultflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRefreshTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskColor = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskcolor(), target);
  }
  
  // optional uint32 ResultFlag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->resultflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRefreshTaskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskColor = 2;
    if (has_taskcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskcolor());
    }
    
    // optional uint32 ResultFlag = 3;
    if (has_resultflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRefreshTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRefreshTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRefreshTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRefreshTaskData::MergeFrom(const PBRefreshTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskcolor(from.taskcolor());
    }
    if (from._has_bit(2)) {
      set_resultflag(from.resultflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRefreshTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRefreshTaskData::CopyFrom(const PBRefreshTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRefreshTaskData::Swap(PBRefreshTaskData* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskcolor_, other->taskcolor_);
    std::swap(resultflag_, other->resultflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRefreshTaskData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRefreshTaskData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRefreshTaskData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRefreshTaskData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int GroupPublishData::kTaskIDFieldNumber;
const int GroupPublishData::kTaskStateFieldNumber;
#endif  // !_MSC_VER

GroupPublishData::GroupPublishData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPublishData::InitAsDefaultInstance() {}

GroupPublishData::GroupPublishData(const GroupPublishData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPublishData::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPublishData::~GroupPublishData() {
  SharedDtor();
}

void GroupPublishData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GroupPublishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPublishData_descriptor_;
}

const GroupPublishData& GroupPublishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

GroupPublishData* GroupPublishData::default_instance_ = NULL;

GroupPublishData* GroupPublishData::New() const {
  return new GroupPublishData;
}

void GroupPublishData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPublishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TaskState;
        break;
      }
      
      // optional uint32 TaskState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaskState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taskstate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPublishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GroupPublishData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->taskstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPublishData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 TaskState = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->taskstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPublishData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 TaskState = 2;
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taskstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GroupPublishData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPublishData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPublishData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPublishData::MergeFrom(const GroupPublishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_taskid(from.taskid());
    }
    if (from._has_bit(1)) {
      set_taskstate(from.taskstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPublishData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPublishData::CopyFrom(const GroupPublishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPublishData::Swap(GroupPublishData* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstate_, other->taskstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GroupPublishData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* GroupPublishData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GroupPublishData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GroupPublishData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTaskList::kTaskNumberFieldNumber;
const int PBTaskList::kTaskListFieldNumber;
const int PBTaskList::kLoopTaskDataFieldNumber;
const int PBTaskList::kEventIDFieldNumber;
const int PBTaskList::kEventParamFieldNumber;
const int PBTaskList::kEventTickFieldNumber;
const int PBTaskList::kStorageTaskDataFieldNumber;
const int PBTaskList::kTragedyTaskDataFieldNumber;
const int PBTaskList::kCompletedTaskFieldNumber;
const int PBTaskList::kFailedTaskFieldNumber;
const int PBTaskList::kTaskGroupsFieldNumber;
const int PBTaskList::kCompletedTragedyFieldNumber;
const int PBTaskList::kLastLogOffFieldNumber;
const int PBTaskList::kRedirectFailTaskFieldNumber;
const int PBTaskList::kChairManTaskFieldNumber;
const int PBTaskList::kTodayTeamLoopNumFieldNumber;
const int PBTaskList::kRefreshDataFieldNumber;
const int PBTaskList::kRepeateTaskFieldNumber;
const int PBTaskList::kEndTimeFieldNumber;
const int PBTaskList::kCorpsPublishFieldNumber;
#endif  // !_MSC_VER

PBTaskList::PBTaskList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskList::InitAsDefaultInstance() {  looptaskdata_ = const_cast< ::PBLoopTaskData*>(&::PBLoopTaskData::default_instance());
  storagetaskdata_ = const_cast< ::PBStorageTaskData*>(&::PBStorageTaskData::default_instance());
  chairmantask_ = const_cast< ::PBChairManTaskData*>(&::PBChairManTaskData::default_instance());
}

PBTaskList::PBTaskList(const PBTaskList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskList::SharedCtor() {
  _cached_size_ = 0;
  tasknumber_ = 0u;
  looptaskdata_ = NULL;
  storagetaskdata_ = NULL;
  completedtragedy_ = 0u;
  lastlogoff_ = 0u;
  redirectfailtask_ = 0u;
  chairmantask_ = NULL;
  todayteamloopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskList::~PBTaskList() {
  SharedDtor();
}

void PBTaskList::SharedDtor() {
  if (this != default_instance_) {
    delete looptaskdata_;
    delete storagetaskdata_;
    delete chairmantask_;
  }
}

const ::google::protobuf::Descriptor* PBTaskList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskList_descriptor_;
}

const PBTaskList& PBTaskList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTaskList* PBTaskList::default_instance_ = NULL;

PBTaskList* PBTaskList::New() const {
  return new PBTaskList;
}

void PBTaskList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tasknumber_ = 0u;
    if (_has_bit(2)) {
      if (looptaskdata_ != NULL) looptaskdata_->::PBLoopTaskData::Clear();
    }
    if (_has_bit(6)) {
      if (storagetaskdata_ != NULL) storagetaskdata_->::PBStorageTaskData::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    completedtragedy_ = 0u;
    lastlogoff_ = 0u;
    redirectfailtask_ = 0u;
    if (_has_bit(14)) {
      if (chairmantask_ != NULL) chairmantask_->::PBChairManTaskData::Clear();
    }
    todayteamloopnum_ = 0u;
  }
  tasklist_.Clear();
  eventid_.Clear();
  eventparam_.Clear();
  eventtick_.Clear();
  tragedytaskdata_.Clear();
  completedtask_.Clear();
  failedtask_.Clear();
  taskgroups_.Clear();
  refreshdata_.Clear();
  repeatetask_.Clear();
  endtime_.Clear();
  corpspublish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TaskNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tasknumber_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_TaskList;
        break;
      }
      
      // repeated .PBTask TaskList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TaskList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tasklist()));
        if (input->ExpectTag(18)) goto parse_TaskList;
        if (input->ExpectTag(26)) goto parse_LoopTaskData;
        break;
      }
      
      // optional .PBLoopTaskData LoopTaskData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LoopTaskData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_looptaskdata()));
        if (input->ExpectTag(32)) goto parse_EventID;
        break;
      }
      
      // repeated uint32 EventID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EventID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_eventid(value);
        if (input->ExpectTag(32)) goto parse_EventID;
        if (input->ExpectTag(40)) goto parse_EventParam;
        break;
      }
      
      // repeated uint32 EventParam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EventParam:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_eventparam(value);
        if (input->ExpectTag(40)) goto parse_EventParam;
        if (input->ExpectTag(48)) goto parse_EventTick;
        break;
      }
      
      // repeated uint32 EventTick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EventTick:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_eventtick(value);
        if (input->ExpectTag(48)) goto parse_EventTick;
        if (input->ExpectTag(58)) goto parse_StorageTaskData;
        break;
      }
      
      // optional .PBStorageTaskData StorageTaskData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_StorageTaskData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_storagetaskdata()));
        if (input->ExpectTag(66)) goto parse_TragedyTaskData;
        break;
      }
      
      // repeated .TragedyStruct TragedyTaskData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TragedyTaskData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_tragedytaskdata()));
        if (input->ExpectTag(66)) goto parse_TragedyTaskData;
        if (input->ExpectTag(72)) goto parse_CompletedTask;
        break;
      }
      
      // repeated uint32 CompletedTask = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedTask:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_completedtask(value);
        if (input->ExpectTag(72)) goto parse_CompletedTask;
        if (input->ExpectTag(80)) goto parse_FailedTask;
        break;
      }
      
      // repeated uint32 FailedTask = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FailedTask:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_failedtask(value);
        if (input->ExpectTag(80)) goto parse_FailedTask;
        if (input->ExpectTag(90)) goto parse_TaskGroups;
        break;
      }
      
      // repeated .PBTaskGroupData TaskGroups = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TaskGroups:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_taskgroups()));
        if (input->ExpectTag(90)) goto parse_TaskGroups;
        if (input->ExpectTag(96)) goto parse_CompletedTragedy;
        break;
      }
      
      // optional uint32 CompletedTragedy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CompletedTragedy:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &completedtragedy_));
        _set_bit(11);
        if (input->ExpectTag(109)) goto parse_LastLogOff;
        break;
      }
      
      // optional fixed32 LastLogOff = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_LastLogOff:
        DO_(::google::protobuf::internal::WireFormat::ReadFixed32(
              input, &lastlogoff_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_RedirectFailTask;
        break;
      }
      
      // optional uint32 RedirectFailTask = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RedirectFailTask:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &redirectfailtask_));
        _set_bit(13);
        if (input->ExpectTag(122)) goto parse_ChairManTask;
        break;
      }
      
      // optional .PBChairManTaskData ChairManTask = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ChairManTask:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_chairmantask()));
        if (input->ExpectTag(128)) goto parse_TodayTeamLoopNum;
        break;
      }
      
      // optional uint32 TodayTeamLoopNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayTeamLoopNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todayteamloopnum_));
        _set_bit(15);
        if (input->ExpectTag(138)) goto parse_RefreshData;
        break;
      }
      
      // repeated .PBRefreshTaskData RefreshData = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RefreshData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_refreshdata()));
        if (input->ExpectTag(138)) goto parse_RefreshData;
        if (input->ExpectTag(144)) goto parse_RepeateTask;
        break;
      }
      
      // repeated uint32 RepeateTask = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeateTask:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_repeatetask(value);
        if (input->ExpectTag(144)) goto parse_RepeateTask;
        if (input->ExpectTag(152)) goto parse_EndTime;
        break;
      }
      
      // repeated uint32 EndTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EndTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_endtime(value);
        if (input->ExpectTag(152)) goto parse_EndTime;
        if (input->ExpectTag(162)) goto parse_CorpsPublish;
        break;
      }
      
      // repeated .GroupPublishData CorpsPublish = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_CorpsPublish:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_corpspublish()));
        if (input->ExpectTag(162)) goto parse_CorpsPublish;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTaskList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TaskNumber = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->tasknumber(), output);
  }
  
  // repeated .PBTask TaskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->tasklist(i), output);
  }
  
  // optional .PBLoopTaskData LoopTaskData = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->looptaskdata(), output);
  }
  
  // repeated uint32 EventID = 4;
  for (int i = 0; i < this->eventid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->eventid(i), output);
  }
  
  // repeated uint32 EventParam = 5;
  for (int i = 0; i < this->eventparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->eventparam(i), output);
  }
  
  // repeated uint32 EventTick = 6;
  for (int i = 0; i < this->eventtick_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->eventtick(i), output);
  }
  
  // optional .PBStorageTaskData StorageTaskData = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->storagetaskdata(), output);
  }
  
  // repeated .TragedyStruct TragedyTaskData = 8;
  for (int i = 0; i < this->tragedytaskdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->tragedytaskdata(i), output);
  }
  
  // repeated uint32 CompletedTask = 9;
  for (int i = 0; i < this->completedtask_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->completedtask(i), output);
  }
  
  // repeated uint32 FailedTask = 10;
  for (int i = 0; i < this->failedtask_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->failedtask(i), output);
  }
  
  // repeated .PBTaskGroupData TaskGroups = 11;
  for (int i = 0; i < this->taskgroups_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->taskgroups(i), output);
  }
  
  // optional uint32 CompletedTragedy = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->completedtragedy(), output);
  }
  
  // optional fixed32 LastLogOff = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteFixed32(13, this->lastlogoff(), output);
  }
  
  // optional uint32 RedirectFailTask = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->redirectfailtask(), output);
  }
  
  // optional .PBChairManTaskData ChairManTask = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->chairmantask(), output);
  }
  
  // optional uint32 TodayTeamLoopNum = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->todayteamloopnum(), output);
  }
  
  // repeated .PBRefreshTaskData RefreshData = 17;
  for (int i = 0; i < this->refreshdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->refreshdata(i), output);
  }
  
  // repeated uint32 RepeateTask = 18;
  for (int i = 0; i < this->repeatetask_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->repeatetask(i), output);
  }
  
  // repeated uint32 EndTime = 19;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->endtime(i), output);
  }
  
  // repeated .GroupPublishData CorpsPublish = 20;
  for (int i = 0; i < this->corpspublish_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->corpspublish(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TaskNumber = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->tasknumber(), target);
  }
  
  // repeated .PBTask TaskList = 2;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->tasklist(i), target);
  }
  
  // optional .PBLoopTaskData LoopTaskData = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->looptaskdata(), target);
  }
  
  // repeated uint32 EventID = 4;
  for (int i = 0; i < this->eventid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->eventid(i), target);
  }
  
  // repeated uint32 EventParam = 5;
  for (int i = 0; i < this->eventparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->eventparam(i), target);
  }
  
  // repeated uint32 EventTick = 6;
  for (int i = 0; i < this->eventtick_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->eventtick(i), target);
  }
  
  // optional .PBStorageTaskData StorageTaskData = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->storagetaskdata(), target);
  }
  
  // repeated .TragedyStruct TragedyTaskData = 8;
  for (int i = 0; i < this->tragedytaskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->tragedytaskdata(i), target);
  }
  
  // repeated uint32 CompletedTask = 9;
  for (int i = 0; i < this->completedtask_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->completedtask(i), target);
  }
  
  // repeated uint32 FailedTask = 10;
  for (int i = 0; i < this->failedtask_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->failedtask(i), target);
  }
  
  // repeated .PBTaskGroupData TaskGroups = 11;
  for (int i = 0; i < this->taskgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->taskgroups(i), target);
  }
  
  // optional uint32 CompletedTragedy = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->completedtragedy(), target);
  }
  
  // optional fixed32 LastLogOff = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteFixed32ToArray(13, this->lastlogoff(), target);
  }
  
  // optional uint32 RedirectFailTask = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->redirectfailtask(), target);
  }
  
  // optional .PBChairManTaskData ChairManTask = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->chairmantask(), target);
  }
  
  // optional uint32 TodayTeamLoopNum = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->todayteamloopnum(), target);
  }
  
  // repeated .PBRefreshTaskData RefreshData = 17;
  for (int i = 0; i < this->refreshdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->refreshdata(i), target);
  }
  
  // repeated uint32 RepeateTask = 18;
  for (int i = 0; i < this->repeatetask_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->repeatetask(i), target);
  }
  
  // repeated uint32 EndTime = 19;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->endtime(i), target);
  }
  
  // repeated .GroupPublishData CorpsPublish = 20;
  for (int i = 0; i < this->corpspublish_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->corpspublish(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskNumber = 1;
    if (has_tasknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tasknumber());
    }
    
    // optional .PBLoopTaskData LoopTaskData = 3;
    if (has_looptaskdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->looptaskdata());
    }
    
    // optional .PBStorageTaskData StorageTaskData = 7;
    if (has_storagetaskdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->storagetaskdata());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 CompletedTragedy = 12;
    if (has_completedtragedy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->completedtragedy());
    }
    
    // optional fixed32 LastLogOff = 13;
    if (has_lastlogoff()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 RedirectFailTask = 14;
    if (has_redirectfailtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->redirectfailtask());
    }
    
    // optional .PBChairManTaskData ChairManTask = 15;
    if (has_chairmantask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->chairmantask());
    }
    
    // optional uint32 TodayTeamLoopNum = 16;
    if (has_todayteamloopnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todayteamloopnum());
    }
    
  }
  // repeated .PBTask TaskList = 2;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tasklist(i));
  }
  
  // repeated uint32 EventID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->eventid(i));
    }
    total_size += 1 * this->eventid_size() + data_size;
  }
  
  // repeated uint32 EventParam = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->eventparam(i));
    }
    total_size += 1 * this->eventparam_size() + data_size;
  }
  
  // repeated uint32 EventTick = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventtick_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->eventtick(i));
    }
    total_size += 1 * this->eventtick_size() + data_size;
  }
  
  // repeated .TragedyStruct TragedyTaskData = 8;
  total_size += 1 * this->tragedytaskdata_size();
  for (int i = 0; i < this->tragedytaskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->tragedytaskdata(i));
  }
  
  // repeated uint32 CompletedTask = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->completedtask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->completedtask(i));
    }
    total_size += 1 * this->completedtask_size() + data_size;
  }
  
  // repeated uint32 FailedTask = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->failedtask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->failedtask(i));
    }
    total_size += 1 * this->failedtask_size() + data_size;
  }
  
  // repeated .PBTaskGroupData TaskGroups = 11;
  total_size += 1 * this->taskgroups_size();
  for (int i = 0; i < this->taskgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->taskgroups(i));
  }
  
  // repeated .PBRefreshTaskData RefreshData = 17;
  total_size += 2 * this->refreshdata_size();
  for (int i = 0; i < this->refreshdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->refreshdata(i));
  }
  
  // repeated uint32 RepeateTask = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeatetask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->repeatetask(i));
    }
    total_size += 2 * this->repeatetask_size() + data_size;
  }
  
  // repeated uint32 EndTime = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->endtime(i));
    }
    total_size += 2 * this->endtime_size() + data_size;
  }
  
  // repeated .GroupPublishData CorpsPublish = 20;
  total_size += 2 * this->corpspublish_size();
  for (int i = 0; i < this->corpspublish_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->corpspublish(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTaskList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskList::MergeFrom(const PBTaskList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  eventid_.MergeFrom(from.eventid_);
  eventparam_.MergeFrom(from.eventparam_);
  eventtick_.MergeFrom(from.eventtick_);
  tragedytaskdata_.MergeFrom(from.tragedytaskdata_);
  completedtask_.MergeFrom(from.completedtask_);
  failedtask_.MergeFrom(from.failedtask_);
  taskgroups_.MergeFrom(from.taskgroups_);
  refreshdata_.MergeFrom(from.refreshdata_);
  repeatetask_.MergeFrom(from.repeatetask_);
  endtime_.MergeFrom(from.endtime_);
  corpspublish_.MergeFrom(from.corpspublish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tasknumber(from.tasknumber());
    }
    if (from._has_bit(2)) {
      mutable_looptaskdata()->::PBLoopTaskData::MergeFrom(from.looptaskdata());
    }
    if (from._has_bit(6)) {
      mutable_storagetaskdata()->::PBStorageTaskData::MergeFrom(from.storagetaskdata());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from._has_bit(11)) {
      set_completedtragedy(from.completedtragedy());
    }
    if (from._has_bit(12)) {
      set_lastlogoff(from.lastlogoff());
    }
    if (from._has_bit(13)) {
      set_redirectfailtask(from.redirectfailtask());
    }
    if (from._has_bit(14)) {
      mutable_chairmantask()->::PBChairManTaskData::MergeFrom(from.chairmantask());
    }
    if (from._has_bit(15)) {
      set_todayteamloopnum(from.todayteamloopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskList::CopyFrom(const PBTaskList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskList::Swap(PBTaskList* other) {
  if (other != this) {
    std::swap(tasknumber_, other->tasknumber_);
    tasklist_.Swap(&other->tasklist_);
    std::swap(looptaskdata_, other->looptaskdata_);
    eventid_.Swap(&other->eventid_);
    eventparam_.Swap(&other->eventparam_);
    eventtick_.Swap(&other->eventtick_);
    std::swap(storagetaskdata_, other->storagetaskdata_);
    tragedytaskdata_.Swap(&other->tragedytaskdata_);
    completedtask_.Swap(&other->completedtask_);
    failedtask_.Swap(&other->failedtask_);
    taskgroups_.Swap(&other->taskgroups_);
    std::swap(completedtragedy_, other->completedtragedy_);
    std::swap(lastlogoff_, other->lastlogoff_);
    std::swap(redirectfailtask_, other->redirectfailtask_);
    std::swap(chairmantask_, other->chairmantask_);
    std::swap(todayteamloopnum_, other->todayteamloopnum_);
    refreshdata_.Swap(&other->refreshdata_);
    repeatetask_.Swap(&other->repeatetask_);
    endtime_.Swap(&other->endtime_);
    corpspublish_.Swap(&other->corpspublish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTaskList::IsInitialized() const {
  
  for (int i = 0; i < tasklist_size(); i++) {
    if (!this->tasklist(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* PBTaskList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTaskList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTaskList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMapData::kDirectionFieldNumber;
const int PBMapData::kPosXFieldNumber;
const int PBMapData::kPosYFieldNumber;
const int PBMapData::kAliveStatusFieldNumber;
#endif  // !_MSC_VER

PBMapData::PBMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMapData::InitAsDefaultInstance() {}

PBMapData::PBMapData(const PBMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMapData::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0u;
  posx_ = 0u;
  posy_ = 0u;
  alivestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMapData::~PBMapData() {
  SharedDtor();
}

void PBMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMapData_descriptor_;
}

const PBMapData& PBMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBMapData* PBMapData::default_instance_ = NULL;

PBMapData* PBMapData::New() const {
  return new PBMapData;
}

void PBMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0u;
    posx_ = 0u;
    posy_ = 0u;
    alivestatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &direction_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }
      
      // optional uint32 PosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posx_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }
      
      // optional uint32 PosY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &posy_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AliveStatus;
        break;
      }
      
      // optional uint32 AliveStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AliveStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &alivestatus_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMapData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Direction = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->direction(), output);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->posx(), output);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->posy(), output);
  }
  
  // optional uint32 AliveStatus = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->alivestatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Direction = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->direction(), target);
  }
  
  // optional uint32 PosX = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->posx(), target);
  }
  
  // optional uint32 PosY = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->posy(), target);
  }
  
  // optional uint32 AliveStatus = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->alivestatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->direction());
    }
    
    // optional uint32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posx());
    }
    
    // optional uint32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->posy());
    }
    
    // optional uint32 AliveStatus = 4;
    if (has_alivestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->alivestatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMapData::MergeFrom(const PBMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_direction(from.direction());
    }
    if (from._has_bit(1)) {
      set_posx(from.posx());
    }
    if (from._has_bit(2)) {
      set_posy(from.posy());
    }
    if (from._has_bit(3)) {
      set_alivestatus(from.alivestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapData::CopyFrom(const PBMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMapData::Swap(PBMapData* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(alivestatus_, other->alivestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMapData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMapData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMapData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMapData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFriendGlobalData::kGroupNamesFieldNumber;
const int PBFriendGlobalData::kIsRefuseAllFieldNumber;
#endif  // !_MSC_VER

PBFriendGlobalData::PBFriendGlobalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendGlobalData::InitAsDefaultInstance() {}

PBFriendGlobalData::PBFriendGlobalData(const PBFriendGlobalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendGlobalData::SharedCtor() {
  _cached_size_ = 0;
  isrefuseall_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendGlobalData::~PBFriendGlobalData() {
  SharedDtor();
}

void PBFriendGlobalData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFriendGlobalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendGlobalData_descriptor_;
}

const PBFriendGlobalData& PBFriendGlobalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBFriendGlobalData* PBFriendGlobalData::default_instance_ = NULL;

PBFriendGlobalData* PBFriendGlobalData::New() const {
  return new PBFriendGlobalData;
}

void PBFriendGlobalData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isrefuseall_ = 0u;
  }
  groupnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendGlobalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated string GroupNames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroupNames:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_groupnames()));
        if (input->ExpectTag(10)) goto parse_GroupNames;
        if (input->ExpectTag(16)) goto parse_IsRefuseAll;
        break;
      }
      
      // optional uint32 IsRefuseAll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsRefuseAll:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isrefuseall_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendGlobalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFriendGlobalData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string GroupNames = 1;
  for (int i = 0; i < this->groupnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->groupnames(i), output);
  }
  
  // optional uint32 IsRefuseAll = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->isrefuseall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendGlobalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string GroupNames = 1;
  for (int i = 0; i < this->groupnames_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->groupnames(i), target);
  }
  
  // optional uint32 IsRefuseAll = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->isrefuseall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendGlobalData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 IsRefuseAll = 2;
    if (has_isrefuseall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isrefuseall());
    }
    
  }
  // repeated string GroupNames = 1;
  total_size += 1 * this->groupnames_size();
  for (int i = 0; i < this->groupnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->groupnames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFriendGlobalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendGlobalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendGlobalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendGlobalData::MergeFrom(const PBFriendGlobalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupnames_.MergeFrom(from.groupnames_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_isrefuseall(from.isrefuseall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendGlobalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendGlobalData::CopyFrom(const PBFriendGlobalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendGlobalData::Swap(PBFriendGlobalData* other) {
  if (other != this) {
    groupnames_.Swap(&other->groupnames_);
    std::swap(isrefuseall_, other->isrefuseall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFriendGlobalData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFriendGlobalData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFriendGlobalData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFriendGlobalData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFriendData::kPlayerIdFieldNumber;
const int PBFriendData::kGroupIDFieldNumber;
const int PBFriendData::kRel2MeFieldNumber;
const int PBFriendData::kBlessTimesFieldNumber;
const int PBFriendData::kIntimacyDegreeFieldNumber;
const int PBFriendData::kLastTimeAllOnlineFieldNumber;
const int PBFriendData::kDailyIntimacyFieldNumber;
const int PBFriendData::kLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

PBFriendData::PBFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendData::InitAsDefaultInstance() {}

PBFriendData::PBFriendData(const PBFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendData::SharedCtor() {
  _cached_size_ = 0;
  blesstimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendData::~PBFriendData() {
  SharedDtor();
}

void PBFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendData_descriptor_;
}

const PBFriendData& PBFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBFriendData* PBFriendData::default_instance_ = NULL;

PBFriendData* PBFriendData::New() const {
  return new PBFriendData;
}

void PBFriendData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    blesstimes_ = 0u;
  }
  playerid_.Clear();
  groupid_.Clear();
  rel2me_.Clear();
  intimacydegree_.Clear();
  lasttimeallonline_.Clear();
  dailyintimacy_.Clear();
  lastupdatetime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerId:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_playerid(value);
        if (input->ExpectTag(8)) goto parse_PlayerId;
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }
      
      // repeated uint32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_groupid(value);
        if (input->ExpectTag(16)) goto parse_GroupID;
        if (input->ExpectTag(24)) goto parse_Rel2Me;
        break;
      }
      
      // repeated uint32 Rel2Me = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rel2Me:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_rel2me(value);
        if (input->ExpectTag(24)) goto parse_Rel2Me;
        if (input->ExpectTag(32)) goto parse_BlessTimes;
        break;
      }
      
      // optional uint32 BlessTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BlessTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &blesstimes_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_IntimacyDegree;
        break;
      }
      
      // repeated uint32 IntimacyDegree = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntimacyDegree:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_intimacydegree(value);
        if (input->ExpectTag(40)) goto parse_IntimacyDegree;
        if (input->ExpectTag(48)) goto parse_LastTimeAllOnline;
        break;
      }
      
      // repeated uint32 LastTimeAllOnline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastTimeAllOnline:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lasttimeallonline(value);
        if (input->ExpectTag(48)) goto parse_LastTimeAllOnline;
        if (input->ExpectTag(56)) goto parse_DailyIntimacy;
        break;
      }
      
      // repeated uint32 DailyIntimacy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DailyIntimacy:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_dailyintimacy(value);
        if (input->ExpectTag(56)) goto parse_DailyIntimacy;
        if (input->ExpectTag(64)) goto parse_LastUpdateTime;
        break;
      }
      
      // repeated uint32 LastUpdateTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastUpdateTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_lastupdatetime(value);
        if (input->ExpectTag(64)) goto parse_LastUpdateTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFriendData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 PlayerId = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(i), output);
  }
  
  // repeated uint32 GroupID = 2;
  for (int i = 0; i < this->groupid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->groupid(i), output);
  }
  
  // repeated uint32 Rel2Me = 3;
  for (int i = 0; i < this->rel2me_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rel2me(i), output);
  }
  
  // optional uint32 BlessTimes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->blesstimes(), output);
  }
  
  // repeated uint32 IntimacyDegree = 5;
  for (int i = 0; i < this->intimacydegree_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->intimacydegree(i), output);
  }
  
  // repeated uint32 LastTimeAllOnline = 6;
  for (int i = 0; i < this->lasttimeallonline_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->lasttimeallonline(i), output);
  }
  
  // repeated uint32 DailyIntimacy = 7;
  for (int i = 0; i < this->dailyintimacy_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->dailyintimacy(i), output);
  }
  
  // repeated uint32 LastUpdateTime = 8;
  for (int i = 0; i < this->lastupdatetime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->lastupdatetime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 PlayerId = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(i), target);
  }
  
  // repeated uint32 GroupID = 2;
  for (int i = 0; i < this->groupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->groupid(i), target);
  }
  
  // repeated uint32 Rel2Me = 3;
  for (int i = 0; i < this->rel2me_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rel2me(i), target);
  }
  
  // optional uint32 BlessTimes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->blesstimes(), target);
  }
  
  // repeated uint32 IntimacyDegree = 5;
  for (int i = 0; i < this->intimacydegree_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->intimacydegree(i), target);
  }
  
  // repeated uint32 LastTimeAllOnline = 6;
  for (int i = 0; i < this->lasttimeallonline_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->lasttimeallonline(i), target);
  }
  
  // repeated uint32 DailyIntimacy = 7;
  for (int i = 0; i < this->dailyintimacy_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->dailyintimacy(i), target);
  }
  
  // repeated uint32 LastUpdateTime = 8;
  for (int i = 0; i < this->lastupdatetime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->lastupdatetime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 BlessTimes = 4;
    if (has_blesstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->blesstimes());
    }
    
  }
  // repeated uint32 PlayerId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }
  
  // repeated uint32 GroupID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->groupid(i));
    }
    total_size += 1 * this->groupid_size() + data_size;
  }
  
  // repeated uint32 Rel2Me = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rel2me_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->rel2me(i));
    }
    total_size += 1 * this->rel2me_size() + data_size;
  }
  
  // repeated uint32 IntimacyDegree = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->intimacydegree_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->intimacydegree(i));
    }
    total_size += 1 * this->intimacydegree_size() + data_size;
  }
  
  // repeated uint32 LastTimeAllOnline = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->lasttimeallonline_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lasttimeallonline(i));
    }
    total_size += 1 * this->lasttimeallonline_size() + data_size;
  }
  
  // repeated uint32 DailyIntimacy = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dailyintimacy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->dailyintimacy(i));
    }
    total_size += 1 * this->dailyintimacy_size() + data_size;
  }
  
  // repeated uint32 LastUpdateTime = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastupdatetime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->lastupdatetime(i));
    }
    total_size += 1 * this->lastupdatetime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendData::MergeFrom(const PBFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  groupid_.MergeFrom(from.groupid_);
  rel2me_.MergeFrom(from.rel2me_);
  intimacydegree_.MergeFrom(from.intimacydegree_);
  lasttimeallonline_.MergeFrom(from.lasttimeallonline_);
  dailyintimacy_.MergeFrom(from.dailyintimacy_);
  lastupdatetime_.MergeFrom(from.lastupdatetime_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from._has_bit(3)) {
      set_blesstimes(from.blesstimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendData::CopyFrom(const PBFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendData::Swap(PBFriendData* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    groupid_.Swap(&other->groupid_);
    rel2me_.Swap(&other->rel2me_);
    std::swap(blesstimes_, other->blesstimes_);
    intimacydegree_.Swap(&other->intimacydegree_);
    lasttimeallonline_.Swap(&other->lasttimeallonline_);
    dailyintimacy_.Swap(&other->dailyintimacy_);
    lastupdatetime_.Swap(&other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFriendData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFriendData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFriendData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFriendData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBEnemyData::kPlayerIdFieldNumber;
const int PBEnemyData::kKilledFieldNumber;
const int PBEnemyData::kBeKilledFieldNumber;
const int PBEnemyData::kIsLockedFieldNumber;
const int PBEnemyData::kKillTimeFieldNumber;
#endif  // !_MSC_VER

PBEnemyData::PBEnemyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEnemyData::InitAsDefaultInstance() {}

PBEnemyData::PBEnemyData(const PBEnemyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEnemyData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEnemyData::~PBEnemyData() {
  SharedDtor();
}

void PBEnemyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBEnemyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEnemyData_descriptor_;
}

const PBEnemyData& PBEnemyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBEnemyData* PBEnemyData::default_instance_ = NULL;

PBEnemyData* PBEnemyData::New() const {
  return new PBEnemyData;
}

void PBEnemyData::Clear() {
  playerid_.Clear();
  killed_.Clear();
  bekilled_.Clear();
  islocked_.Clear();
  killtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEnemyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 PlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerId:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_playerid(value);
        if (input->ExpectTag(8)) goto parse_PlayerId;
        if (input->ExpectTag(16)) goto parse_Killed;
        break;
      }
      
      // repeated uint32 Killed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Killed:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_killed(value);
        if (input->ExpectTag(16)) goto parse_Killed;
        if (input->ExpectTag(24)) goto parse_BeKilled;
        break;
      }
      
      // repeated uint32 BeKilled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeKilled:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_bekilled(value);
        if (input->ExpectTag(24)) goto parse_BeKilled;
        if (input->ExpectTag(32)) goto parse_IsLocked;
        break;
      }
      
      // repeated uint32 IsLocked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsLocked:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_islocked(value);
        if (input->ExpectTag(32)) goto parse_IsLocked;
        if (input->ExpectTag(40)) goto parse_KillTime;
        break;
      }
      
      // repeated uint32 KillTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillTime:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_killtime(value);
        if (input->ExpectTag(40)) goto parse_KillTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEnemyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBEnemyData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 PlayerId = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(i), output);
  }
  
  // repeated uint32 Killed = 2;
  for (int i = 0; i < this->killed_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->killed(i), output);
  }
  
  // repeated uint32 BeKilled = 3;
  for (int i = 0; i < this->bekilled_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bekilled(i), output);
  }
  
  // repeated uint32 IsLocked = 4;
  for (int i = 0; i < this->islocked_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->islocked(i), output);
  }
  
  // repeated uint32 KillTime = 5;
  for (int i = 0; i < this->killtime_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->killtime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEnemyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 PlayerId = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(i), target);
  }
  
  // repeated uint32 Killed = 2;
  for (int i = 0; i < this->killed_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->killed(i), target);
  }
  
  // repeated uint32 BeKilled = 3;
  for (int i = 0; i < this->bekilled_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bekilled(i), target);
  }
  
  // repeated uint32 IsLocked = 4;
  for (int i = 0; i < this->islocked_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->islocked(i), target);
  }
  
  // repeated uint32 KillTime = 5;
  for (int i = 0; i < this->killtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->killtime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEnemyData::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 PlayerId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }
  
  // repeated uint32 Killed = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->killed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->killed(i));
    }
    total_size += 1 * this->killed_size() + data_size;
  }
  
  // repeated uint32 BeKilled = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bekilled_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->bekilled(i));
    }
    total_size += 1 * this->bekilled_size() + data_size;
  }
  
  // repeated uint32 IsLocked = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->islocked_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->islocked(i));
    }
    total_size += 1 * this->islocked_size() + data_size;
  }
  
  // repeated uint32 KillTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->killtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->killtime(i));
    }
    total_size += 1 * this->killtime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBEnemyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEnemyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEnemyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEnemyData::MergeFrom(const PBEnemyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  killed_.MergeFrom(from.killed_);
  bekilled_.MergeFrom(from.bekilled_);
  islocked_.MergeFrom(from.islocked_);
  killtime_.MergeFrom(from.killtime_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEnemyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEnemyData::CopyFrom(const PBEnemyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEnemyData::Swap(PBEnemyData* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    killed_.Swap(&other->killed_);
    bekilled_.Swap(&other->bekilled_);
    islocked_.Swap(&other->islocked_);
    killtime_.Swap(&other->killtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBEnemyData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBEnemyData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBEnemyData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBEnemyData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBFriend::kGlobalFieldNumber;
const int PBFriend::kFriendFieldNumber;
const int PBFriend::kEnemyFieldNumber;
const int PBFriend::kBlackListFieldNumber;
const int PBFriend::kLatestContactFieldNumber;
#endif  // !_MSC_VER

PBFriend::PBFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriend::InitAsDefaultInstance() {  global_ = const_cast< ::PBFriendGlobalData*>(&::PBFriendGlobalData::default_instance());
  friend__ = const_cast< ::PBFriendData*>(&::PBFriendData::default_instance());
  enemy_ = const_cast< ::PBEnemyData*>(&::PBEnemyData::default_instance());
}

PBFriend::PBFriend(const PBFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriend::SharedCtor() {
  _cached_size_ = 0;
  global_ = NULL;
  friend__ = NULL;
  enemy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriend::~PBFriend() {
  SharedDtor();
}

void PBFriend::SharedDtor() {
  if (this != default_instance_) {
    delete global_;
    delete friend__;
    delete enemy_;
  }
}

const ::google::protobuf::Descriptor* PBFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriend_descriptor_;
}

const PBFriend& PBFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBFriend* PBFriend::default_instance_ = NULL;

PBFriend* PBFriend::New() const {
  return new PBFriend;
}

void PBFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (global_ != NULL) global_->::PBFriendGlobalData::Clear();
    }
    if (_has_bit(1)) {
      if (friend__ != NULL) friend__->::PBFriendData::Clear();
    }
    if (_has_bit(2)) {
      if (enemy_ != NULL) enemy_->::PBEnemyData::Clear();
    }
  }
  blacklist_.Clear();
  latestcontact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .PBFriendGlobalData Global = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_global()));
        if (input->ExpectTag(18)) goto parse_Friend;
        break;
      }
      
      // optional .PBFriendData Friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Friend:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_friend_()));
        if (input->ExpectTag(26)) goto parse_Enemy;
        break;
      }
      
      // optional .PBEnemyData Enemy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Enemy:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_enemy()));
        if (input->ExpectTag(32)) goto parse_BlackList;
        break;
      }
      
      // repeated uint32 BlackList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BlackList:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_blacklist(value);
        if (input->ExpectTag(32)) goto parse_BlackList;
        if (input->ExpectTag(40)) goto parse_LatestContact;
        break;
      }
      
      // repeated uint32 LatestContact = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LatestContact:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_latestcontact(value);
        if (input->ExpectTag(40)) goto parse_LatestContact;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBFriend::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .PBFriendGlobalData Global = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->global(), output);
  }
  
  // optional .PBFriendData Friend = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->friend_(), output);
  }
  
  // optional .PBEnemyData Enemy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->enemy(), output);
  }
  
  // repeated uint32 BlackList = 4;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->blacklist(i), output);
  }
  
  // repeated uint32 LatestContact = 5;
  for (int i = 0; i < this->latestcontact_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->latestcontact(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFriendGlobalData Global = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->global(), target);
  }
  
  // optional .PBFriendData Friend = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->friend_(), target);
  }
  
  // optional .PBEnemyData Enemy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->enemy(), target);
  }
  
  // repeated uint32 BlackList = 4;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->blacklist(i), target);
  }
  
  // repeated uint32 LatestContact = 5;
  for (int i = 0; i < this->latestcontact_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->latestcontact(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFriendGlobalData Global = 1;
    if (has_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->global());
    }
    
    // optional .PBFriendData Friend = 2;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->friend_());
    }
    
    // optional .PBEnemyData Enemy = 3;
    if (has_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->enemy());
    }
    
  }
  // repeated uint32 BlackList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->blacklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->blacklist(i));
    }
    total_size += 1 * this->blacklist_size() + data_size;
  }
  
  // repeated uint32 LatestContact = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->latestcontact_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->latestcontact(i));
    }
    total_size += 1 * this->latestcontact_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriend::MergeFrom(const PBFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  blacklist_.MergeFrom(from.blacklist_);
  latestcontact_.MergeFrom(from.latestcontact_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_global()->::PBFriendGlobalData::MergeFrom(from.global());
    }
    if (from._has_bit(1)) {
      mutable_friend_()->::PBFriendData::MergeFrom(from.friend_());
    }
    if (from._has_bit(2)) {
      mutable_enemy()->::PBEnemyData::MergeFrom(from.enemy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriend::CopyFrom(const PBFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriend::Swap(PBFriend* other) {
  if (other != this) {
    std::swap(global_, other->global_);
    std::swap(friend__, other->friend__);
    std::swap(enemy_, other->enemy_);
    blacklist_.Swap(&other->blacklist_);
    latestcontact_.Swap(&other->latestcontact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBFriend::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBFriend::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBFriend::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBFriend_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetionData::kIndexFieldNumber;
const int PBRepetionData::kDataFieldNumber;
#endif  // !_MSC_VER

PBRepetionData::PBRepetionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetionData::InitAsDefaultInstance() {}

PBRepetionData::PBRepetionData(const PBRepetionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetionData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetionData::~PBRepetionData() {
  SharedDtor();
}

void PBRepetionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionData_descriptor_;
}

const PBRepetionData& PBRepetionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetionData* PBRepetionData::default_instance_ = NULL;

PBRepetionData* PBRepetionData::New() const {
  return new PBRepetionData;
}

void PBRepetionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Data;
        break;
      }
      
      // optional uint32 Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &data_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetionData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 Data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 Data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->index());
    }
    
    // optional uint32 Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetionData::MergeFrom(const PBRepetionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionData::CopyFrom(const PBRepetionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionData::Swap(PBRepetionData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetionData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetionData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetionData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetionMap::kMapIDFieldNumber;
const int PBRepetionMap::kCountFieldNumber;
const int PBRepetionMap::kDataFieldNumber;
const int PBRepetionMap::kWeekCountFieldNumber;
#endif  // !_MSC_VER

PBRepetionMap::PBRepetionMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetionMap::InitAsDefaultInstance() {}

PBRepetionMap::PBRepetionMap(const PBRepetionMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetionMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  count_ = 0u;
  weekcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetionMap::~PBRepetionMap() {
  SharedDtor();
}

void PBRepetionMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetionMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionMap_descriptor_;
}

const PBRepetionMap& PBRepetionMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetionMap* PBRepetionMap::default_instance_ = NULL;

PBRepetionMap* PBRepetionMap::New() const {
  return new PBRepetionMap;
}

void PBRepetionMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    count_ = 0u;
    weekcount_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetionMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }
      
      // repeated .PBRepetionData Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Data:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_data()));
        if (input->ExpectTag(26)) goto parse_Data;
        if (input->ExpectTag(32)) goto parse_WeekCount;
        break;
      }
      
      // optional uint32 WeekCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekcount_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetionMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetionMap::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->mapid(), output);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->count(), output);
  }
  
  // repeated .PBRepetionData Data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->data(i), output);
  }
  
  // optional uint32 WeekCount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weekcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetionMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MapID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // optional uint32 Count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated .PBRepetionData Data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->data(i), target);
  }
  
  // optional uint32 WeekCount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weekcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetionMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 WeekCount = 4;
    if (has_weekcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekcount());
    }
    
  }
  // repeated .PBRepetionData Data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetionMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetionMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetionMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetionMap::MergeFrom(const PBRepetionMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_weekcount(from.weekcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetionMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionMap::CopyFrom(const PBRepetionMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionMap::Swap(PBRepetionMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(weekcount_, other->weekcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetionMap::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetionMap::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetionMap::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionMap_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetionRepe::kRepetionDataFieldNumber;
const int PBRepetionRepe::kRepeIndexFieldNumber;
const int PBRepetionRepe::kCountFieldNumber;
const int PBRepetionRepe::kWeekCountFieldNumber;
const int PBRepetionRepe::kSignUpFieldNumber;
const int PBRepetionRepe::kIntoTimeFieldNumber;
const int PBRepetionRepe::kDieCountFieldNumber;
#endif  // !_MSC_VER

PBRepetionRepe::PBRepetionRepe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetionRepe::InitAsDefaultInstance() {}

PBRepetionRepe::PBRepetionRepe(const PBRepetionRepe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetionRepe::SharedCtor() {
  _cached_size_ = 0;
  repeindex_ = 0u;
  count_ = 0u;
  weekcount_ = 0u;
  signup_ = 0u;
  intotime_ = 0u;
  diecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetionRepe::~PBRepetionRepe() {
  SharedDtor();
}

void PBRepetionRepe::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetionRepe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionRepe_descriptor_;
}

const PBRepetionRepe& PBRepetionRepe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetionRepe* PBRepetionRepe::default_instance_ = NULL;

PBRepetionRepe* PBRepetionRepe::New() const {
  return new PBRepetionRepe;
}

void PBRepetionRepe::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    repeindex_ = 0u;
    count_ = 0u;
    weekcount_ = 0u;
    signup_ = 0u;
    intotime_ = 0u;
    diecount_ = 0u;
  }
  repetiondata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetionRepe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBRepetionData RepetionData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RepetionData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_repetiondata()));
        if (input->ExpectTag(10)) goto parse_RepetionData;
        if (input->ExpectTag(16)) goto parse_RepeIndex;
        break;
      }
      
      // optional uint32 RepeIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepeIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repeindex_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_WeekCount;
        break;
      }
      
      // optional uint32 WeekCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekcount_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SignUp;
        break;
      }
      
      // optional uint32 SignUp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SignUp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &signup_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_IntoTime;
        break;
      }
      
      // optional uint32 IntoTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntoTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intotime_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DieCount;
        break;
      }
      
      // optional uint32 DieCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DieCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &diecount_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetionRepe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetionRepe::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBRepetionData RepetionData = 1;
  for (int i = 0; i < this->repetiondata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->repetiondata(i), output);
  }
  
  // optional uint32 RepeIndex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->repeindex(), output);
  }
  
  // optional uint32 Count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 WeekCount = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->weekcount(), output);
  }
  
  // optional uint32 SignUp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->signup(), output);
  }
  
  // optional uint32 IntoTime = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->intotime(), output);
  }
  
  // optional uint32 DieCount = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->diecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetionRepe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRepetionData RepetionData = 1;
  for (int i = 0; i < this->repetiondata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->repetiondata(i), target);
  }
  
  // optional uint32 RepeIndex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->repeindex(), target);
  }
  
  // optional uint32 Count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 WeekCount = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->weekcount(), target);
  }
  
  // optional uint32 SignUp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->signup(), target);
  }
  
  // optional uint32 IntoTime = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->intotime(), target);
  }
  
  // optional uint32 DieCount = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->diecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetionRepe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RepeIndex = 2;
    if (has_repeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repeindex());
    }
    
    // optional uint32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 WeekCount = 4;
    if (has_weekcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekcount());
    }
    
    // optional uint32 SignUp = 5;
    if (has_signup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->signup());
    }
    
    // optional uint32 IntoTime = 6;
    if (has_intotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intotime());
    }
    
    // optional uint32 DieCount = 7;
    if (has_diecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->diecount());
    }
    
  }
  // repeated .PBRepetionData RepetionData = 1;
  total_size += 1 * this->repetiondata_size();
  for (int i = 0; i < this->repetiondata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->repetiondata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetionRepe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetionRepe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetionRepe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetionRepe::MergeFrom(const PBRepetionRepe& from) {
  GOOGLE_CHECK_NE(&from, this);
  repetiondata_.MergeFrom(from.repetiondata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_repeindex(from.repeindex());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
    if (from._has_bit(3)) {
      set_weekcount(from.weekcount());
    }
    if (from._has_bit(4)) {
      set_signup(from.signup());
    }
    if (from._has_bit(5)) {
      set_intotime(from.intotime());
    }
    if (from._has_bit(6)) {
      set_diecount(from.diecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetionRepe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionRepe::CopyFrom(const PBRepetionRepe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetionRepe::Swap(PBRepetionRepe* other) {
  if (other != this) {
    repetiondata_.Swap(&other->repetiondata_);
    std::swap(repeindex_, other->repeindex_);
    std::swap(count_, other->count_);
    std::swap(weekcount_, other->weekcount_);
    std::swap(signup_, other->signup_);
    std::swap(intotime_, other->intotime_);
    std::swap(diecount_, other->diecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetionRepe::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetionRepe::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetionRepe::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetionRepe_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetion::kBackLineIDFieldNumber;
const int PBRepetion::kBackMapIDFieldNumber;
const int PBRepetion::kBackPosXFieldNumber;
const int PBRepetion::kBackPosYFieldNumber;
const int PBRepetion::kMapInfoFieldNumber;
const int PBRepetion::kKeyFieldNumber;
const int PBRepetion::kCampIDFieldNumber;
const int PBRepetion::kRepeInfoFieldNumber;
const int PBRepetion::kInRepetionFieldNumber;
const int PBRepetion::kRepetionIndexFieldNumber;
const int PBRepetion::kCheckResultFieldNumber;
const int PBRepetion::kAnswerCountFieldNumber;
const int PBRepetion::kGlobalSceneStatusFieldNumber;
const int PBRepetion::kGlobalWarOffLineTimeFieldNumber;
const int PBRepetion::kRepetionKeyFieldNumber;
#endif  // !_MSC_VER

PBRepetion::PBRepetion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetion::InitAsDefaultInstance() {}

PBRepetion::PBRepetion(const PBRepetion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetion::SharedCtor() {
  _cached_size_ = 0;
  backlineid_ = 0u;
  backmapid_ = 0u;
  backposx_ = 0u;
  backposy_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  inrepetion_ = 0u;
  repetionindex_ = 0u;
  checkresult_ = 0u;
  answercount_ = 0u;
  globalscenestatus_ = 0u;
  globalwarofflinetime_ = 0u;
  repetionkey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetion::~PBRepetion() {
  SharedDtor();
}

void PBRepetion::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetion_descriptor_;
}

const PBRepetion& PBRepetion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetion* PBRepetion::default_instance_ = NULL;

PBRepetion* PBRepetion::New() const {
  return new PBRepetion;
}

void PBRepetion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    backlineid_ = 0u;
    backmapid_ = 0u;
    backposx_ = 0u;
    backposy_ = 0u;
    key_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inrepetion_ = 0u;
    repetionindex_ = 0u;
    checkresult_ = 0u;
    answercount_ = 0u;
    globalscenestatus_ = 0u;
    globalwarofflinetime_ = 0u;
    repetionkey_ = GOOGLE_ULONGLONG(0);
  }
  mapinfo_.Clear();
  repeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BackLineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backlineid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_BackMapID;
        break;
      }
      
      // optional uint32 BackMapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackMapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backmapid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BackPosX;
        break;
      }
      
      // optional uint32 BackPosX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackPosX:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backposx_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BackPosY;
        break;
      }
      
      // optional uint32 BackPosY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BackPosY:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &backposy_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_MapInfo;
        break;
      }
      
      // repeated .PBRepetionMap MapInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MapInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_mapinfo()));
        if (input->ExpectTag(42)) goto parse_MapInfo;
        if (input->ExpectTag(48)) goto parse_Key;
        break;
      }
      
      // optional uint64 Key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Key:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &key_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_RepeInfo;
        break;
      }
      
      // repeated .PBRepetionRepe RepeInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RepeInfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_repeinfo()));
        if (input->ExpectTag(66)) goto parse_RepeInfo;
        if (input->ExpectTag(72)) goto parse_InRepetion;
        break;
      }
      
      // optional uint32 InRepetion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_InRepetion:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &inrepetion_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RepetionIndex;
        break;
      }
      
      // optional uint32 RepetionIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionindex_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_CheckResult;
        break;
      }
      
      // optional uint32 CheckResult = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CheckResult:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &checkresult_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_AnswerCount;
        break;
      }
      
      // optional uint32 AnswerCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AnswerCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &answercount_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_GlobalSceneStatus;
        break;
      }
      
      // optional uint32 GlobalSceneStatus = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GlobalSceneStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &globalscenestatus_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_GlobalWarOffLineTime;
        break;
      }
      
      // optional uint32 GlobalWarOffLineTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GlobalWarOffLineTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &globalwarofflinetime_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_RepetionKey;
        break;
      }
      
      // optional uint64 RepetionKey = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionKey:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &repetionkey_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BackLineID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->backlineid(), output);
  }
  
  // optional uint32 BackMapID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->backmapid(), output);
  }
  
  // optional uint32 BackPosX = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->backposx(), output);
  }
  
  // optional uint32 BackPosY = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->backposy(), output);
  }
  
  // repeated .PBRepetionMap MapInfo = 5;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->mapinfo(i), output);
  }
  
  // optional uint64 Key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->key(), output);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->campid(), output);
  }
  
  // repeated .PBRepetionRepe RepeInfo = 8;
  for (int i = 0; i < this->repeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->repeinfo(i), output);
  }
  
  // optional uint32 InRepetion = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->inrepetion(), output);
  }
  
  // optional uint32 RepetionIndex = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->repetionindex(), output);
  }
  
  // optional uint32 CheckResult = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->checkresult(), output);
  }
  
  // optional uint32 AnswerCount = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->answercount(), output);
  }
  
  // optional uint32 GlobalSceneStatus = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->globalscenestatus(), output);
  }
  
  // optional uint32 GlobalWarOffLineTime = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->globalwarofflinetime(), output);
  }
  
  // optional uint64 RepetionKey = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(15, this->repetionkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BackLineID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->backlineid(), target);
  }
  
  // optional uint32 BackMapID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->backmapid(), target);
  }
  
  // optional uint32 BackPosX = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->backposx(), target);
  }
  
  // optional uint32 BackPosY = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->backposy(), target);
  }
  
  // repeated .PBRepetionMap MapInfo = 5;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->mapinfo(i), target);
  }
  
  // optional uint64 Key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->key(), target);
  }
  
  // optional uint32 CampID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->campid(), target);
  }
  
  // repeated .PBRepetionRepe RepeInfo = 8;
  for (int i = 0; i < this->repeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->repeinfo(i), target);
  }
  
  // optional uint32 InRepetion = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->inrepetion(), target);
  }
  
  // optional uint32 RepetionIndex = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->repetionindex(), target);
  }
  
  // optional uint32 CheckResult = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->checkresult(), target);
  }
  
  // optional uint32 AnswerCount = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->answercount(), target);
  }
  
  // optional uint32 GlobalSceneStatus = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->globalscenestatus(), target);
  }
  
  // optional uint32 GlobalWarOffLineTime = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->globalwarofflinetime(), target);
  }
  
  // optional uint64 RepetionKey = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(15, this->repetionkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BackLineID = 1;
    if (has_backlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backlineid());
    }
    
    // optional uint32 BackMapID = 2;
    if (has_backmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backmapid());
    }
    
    // optional uint32 BackPosX = 3;
    if (has_backposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backposx());
    }
    
    // optional uint32 BackPosY = 4;
    if (has_backposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->backposy());
    }
    
    // optional uint64 Key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->key());
    }
    
    // optional uint32 CampID = 7;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InRepetion = 9;
    if (has_inrepetion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->inrepetion());
    }
    
    // optional uint32 RepetionIndex = 10;
    if (has_repetionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionindex());
    }
    
    // optional uint32 CheckResult = 11;
    if (has_checkresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->checkresult());
    }
    
    // optional uint32 AnswerCount = 12;
    if (has_answercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->answercount());
    }
    
    // optional uint32 GlobalSceneStatus = 13;
    if (has_globalscenestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->globalscenestatus());
    }
    
    // optional uint32 GlobalWarOffLineTime = 14;
    if (has_globalwarofflinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->globalwarofflinetime());
    }
    
    // optional uint64 RepetionKey = 15;
    if (has_repetionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->repetionkey());
    }
    
  }
  // repeated .PBRepetionMap MapInfo = 5;
  total_size += 1 * this->mapinfo_size();
  for (int i = 0; i < this->mapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->mapinfo(i));
  }
  
  // repeated .PBRepetionRepe RepeInfo = 8;
  total_size += 1 * this->repeinfo_size();
  for (int i = 0; i < this->repeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->repeinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetion::MergeFrom(const PBRepetion& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapinfo_.MergeFrom(from.mapinfo_);
  repeinfo_.MergeFrom(from.repeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_backlineid(from.backlineid());
    }
    if (from._has_bit(1)) {
      set_backmapid(from.backmapid());
    }
    if (from._has_bit(2)) {
      set_backposx(from.backposx());
    }
    if (from._has_bit(3)) {
      set_backposy(from.backposy());
    }
    if (from._has_bit(5)) {
      set_key(from.key());
    }
    if (from._has_bit(6)) {
      set_campid(from.campid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_inrepetion(from.inrepetion());
    }
    if (from._has_bit(9)) {
      set_repetionindex(from.repetionindex());
    }
    if (from._has_bit(10)) {
      set_checkresult(from.checkresult());
    }
    if (from._has_bit(11)) {
      set_answercount(from.answercount());
    }
    if (from._has_bit(12)) {
      set_globalscenestatus(from.globalscenestatus());
    }
    if (from._has_bit(13)) {
      set_globalwarofflinetime(from.globalwarofflinetime());
    }
    if (from._has_bit(14)) {
      set_repetionkey(from.repetionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetion::CopyFrom(const PBRepetion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetion::Swap(PBRepetion* other) {
  if (other != this) {
    std::swap(backlineid_, other->backlineid_);
    std::swap(backmapid_, other->backmapid_);
    std::swap(backposx_, other->backposx_);
    std::swap(backposy_, other->backposy_);
    mapinfo_.Swap(&other->mapinfo_);
    std::swap(key_, other->key_);
    std::swap(campid_, other->campid_);
    repeinfo_.Swap(&other->repeinfo_);
    std::swap(inrepetion_, other->inrepetion_);
    std::swap(repetionindex_, other->repetionindex_);
    std::swap(checkresult_, other->checkresult_);
    std::swap(answercount_, other->answercount_);
    std::swap(globalscenestatus_, other->globalscenestatus_);
    std::swap(globalwarofflinetime_, other->globalwarofflinetime_);
    std::swap(repetionkey_, other->repetionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetion::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetion::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetion::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetion_reflection_;
}

// ===================================================================

const ::std::string PBMember::_default_name_;
#ifndef _MSC_VER
const int PBMember::kEntityIDFieldNumber;
const int PBMember::kCharIDFieldNumber;
const int PBMember::kNameFieldNumber;
const int PBMember::kAccountIDFieldNumber;
const int PBMember::kTypeFieldNumber;
const int PBMember::kFaceFieldNumber;
const int PBMember::kMetierFieldNumber;
const int PBMember::kLevelFieldNumber;
const int PBMember::kSexFieldNumber;
const int PBMember::kLineIDFieldNumber;
const int PBMember::kMapIDFieldNumber;
const int PBMember::kHPFieldNumber;
const int PBMember::kMPFieldNumber;
const int PBMember::kAPFieldNumber;
const int PBMember::kXPosFieldNumber;
const int PBMember::kYPosFieldNumber;
const int PBMember::kCommStateFieldNumber;
const int PBMember::kBuffListFieldNumber;
const int PBMember::kRepetionMapIndexFieldNumber;
const int PBMember::kOrderFieldNumber;
#endif  // !_MSC_VER

PBMember::PBMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMember::InitAsDefaultInstance() {  bufflist_ = const_cast< ::PBBuffList*>(&::PBBuffList::default_instance());
}

PBMember::PBMember(const PBMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMember::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  accountid_ = 0u;
  type_ = 0u;
  face_ = 0u;
  metier_ = 0u;
  level_ = 0u;
  sex_ = 0u;
  lineid_ = 0u;
  mapid_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  ap_ = 0u;
  xpos_ = 0u;
  ypos_ = 0u;
  commstate_ = 0u;
  bufflist_ = NULL;
  repetionmapindex_ = 0u;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMember::~PBMember() {
  SharedDtor();
}

void PBMember::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete bufflist_;
  }
}

const ::google::protobuf::Descriptor* PBMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMember_descriptor_;
}

const PBMember& PBMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBMember* PBMember::default_instance_ = NULL;

PBMember* PBMember::New() const {
  return new PBMember;
}

void PBMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entityid_ = 0u;
    charid_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    accountid_ = 0u;
    type_ = 0u;
    face_ = 0u;
    metier_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0u;
    lineid_ = 0u;
    mapid_ = 0u;
    hp_ = 0u;
    mp_ = 0u;
    ap_ = 0u;
    xpos_ = 0u;
    ypos_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    commstate_ = 0u;
    if (_has_bit(17)) {
      if (bufflist_ != NULL) bufflist_->::PBBuffList::Clear();
    }
    repetionmapindex_ = 0u;
    order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 EntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &entityid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_LineID;
        break;
      }
      
      // optional uint32 LineID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LineID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lineid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_MapID;
        break;
      }
      
      // optional uint32 MapID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MapID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mapid_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_HP;
        break;
      }
      
      // optional uint32 HP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hp_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_MP;
        break;
      }
      
      // optional uint32 MP = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mp_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_AP;
        break;
      }
      
      // optional uint32 AP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AP:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ap_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_XPos;
        break;
      }
      
      // optional uint32 XPos = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_XPos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &xpos_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_YPos;
        break;
      }
      
      // optional uint32 YPos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_YPos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &ypos_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_CommState;
        break;
      }
      
      // optional uint32 CommState = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CommState:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &commstate_));
        _set_bit(16);
        if (input->ExpectTag(146)) goto parse_BuffList;
        break;
      }
      
      // optional .PBBuffList BuffList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuffList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_bufflist()));
        if (input->ExpectTag(152)) goto parse_RepetionMapIndex;
        break;
      }
      
      // optional uint32 RepetionMapIndex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetionMapIndex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetionmapindex_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_Order;
        break;
      }
      
      // optional uint32 Order = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Order:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &order_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMember::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->entityid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->face(), output);
  }
  
  // optional uint32 Metier = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->metier(), output);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->level(), output);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sex(), output);
  }
  
  // optional uint32 LineID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->lineid(), output);
  }
  
  // optional uint32 MapID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->mapid(), output);
  }
  
  // optional uint32 HP = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->hp(), output);
  }
  
  // optional uint32 MP = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->mp(), output);
  }
  
  // optional uint32 AP = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->ap(), output);
  }
  
  // optional uint32 XPos = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->xpos(), output);
  }
  
  // optional uint32 YPos = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->ypos(), output);
  }
  
  // optional uint32 CommState = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->commstate(), output);
  }
  
  // optional .PBBuffList BuffList = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->bufflist(), output);
  }
  
  // optional uint32 RepetionMapIndex = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->repetionmapindex(), output);
  }
  
  // optional uint32 Order = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 EntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->entityid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 Type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 Face = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->face(), target);
  }
  
  // optional uint32 Metier = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->metier(), target);
  }
  
  // optional uint32 Level = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->level(), target);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sex(), target);
  }
  
  // optional uint32 LineID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->lineid(), target);
  }
  
  // optional uint32 MapID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->mapid(), target);
  }
  
  // optional uint32 HP = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->hp(), target);
  }
  
  // optional uint32 MP = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->mp(), target);
  }
  
  // optional uint32 AP = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->ap(), target);
  }
  
  // optional uint32 XPos = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->xpos(), target);
  }
  
  // optional uint32 YPos = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->ypos(), target);
  }
  
  // optional uint32 CommState = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->commstate(), target);
  }
  
  // optional .PBBuffList BuffList = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->bufflist(), target);
  }
  
  // optional uint32 RepetionMapIndex = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->repetionmapindex(), target);
  }
  
  // optional uint32 Order = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EntityID = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->entityid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Face = 6;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Metier = 7;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 LineID = 10;
    if (has_lineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lineid());
    }
    
    // optional uint32 MapID = 11;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mapid());
    }
    
    // optional uint32 HP = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hp());
    }
    
    // optional uint32 MP = 13;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mp());
    }
    
    // optional uint32 AP = 14;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ap());
    }
    
    // optional uint32 XPos = 15;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->xpos());
    }
    
    // optional uint32 YPos = 16;
    if (has_ypos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->ypos());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 CommState = 17;
    if (has_commstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->commstate());
    }
    
    // optional .PBBuffList BuffList = 18;
    if (has_bufflist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->bufflist());
    }
    
    // optional uint32 RepetionMapIndex = 19;
    if (has_repetionmapindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetionmapindex());
    }
    
    // optional uint32 Order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMember::MergeFrom(const PBMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entityid(from.entityid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_face(from.face());
    }
    if (from._has_bit(6)) {
      set_metier(from.metier());
    }
    if (from._has_bit(7)) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sex(from.sex());
    }
    if (from._has_bit(9)) {
      set_lineid(from.lineid());
    }
    if (from._has_bit(10)) {
      set_mapid(from.mapid());
    }
    if (from._has_bit(11)) {
      set_hp(from.hp());
    }
    if (from._has_bit(12)) {
      set_mp(from.mp());
    }
    if (from._has_bit(13)) {
      set_ap(from.ap());
    }
    if (from._has_bit(14)) {
      set_xpos(from.xpos());
    }
    if (from._has_bit(15)) {
      set_ypos(from.ypos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_commstate(from.commstate());
    }
    if (from._has_bit(17)) {
      mutable_bufflist()->::PBBuffList::MergeFrom(from.bufflist());
    }
    if (from._has_bit(18)) {
      set_repetionmapindex(from.repetionmapindex());
    }
    if (from._has_bit(19)) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMember::CopyFrom(const PBMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMember::Swap(PBMember* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(accountid_, other->accountid_);
    std::swap(type_, other->type_);
    std::swap(face_, other->face_);
    std::swap(metier_, other->metier_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(lineid_, other->lineid_);
    std::swap(mapid_, other->mapid_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(ap_, other->ap_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(commstate_, other->commstate_);
    std::swap(bufflist_, other->bufflist_);
    std::swap(repetionmapindex_, other->repetionmapindex_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMember::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMember::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMember::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMember_reflection_;
}

// ===================================================================

const ::std::string PBTeamMsg::_default_name_;
const ::std::string PBTeamMsg::_default_content_;
#ifndef _MSC_VER
const int PBTeamMsg::kTypeFieldNumber;
const int PBTeamMsg::kCharIDFieldNumber;
const int PBTeamMsg::kNameFieldNumber;
const int PBTeamMsg::kMetierFieldNumber;
const int PBTeamMsg::kLevelFieldNumber;
const int PBTeamMsg::kMaxLevelFieldNumber;
const int PBTeamMsg::kMinLevelFieldNumber;
const int PBTeamMsg::kContentFieldNumber;
const int PBTeamMsg::kCountFieldNumber;
const int PBTeamMsg::kRootStyleFieldNumber;
const int PBTeamMsg::kSubStyleFieldNumber;
#endif  // !_MSC_VER

PBTeamMsg::PBTeamMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamMsg::InitAsDefaultInstance() {}

PBTeamMsg::PBTeamMsg(const PBTeamMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  metier_ = 0u;
  level_ = 0u;
  maxlevel_ = 0u;
  minlevel_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  count_ = 0u;
  rootstyle_ = 0u;
  substyle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamMsg::~PBTeamMsg() {
  SharedDtor();
}

void PBTeamMsg::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTeamMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMsg_descriptor_;
}

const PBTeamMsg& PBTeamMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTeamMsg* PBTeamMsg::default_instance_ = NULL;

PBTeamMsg* PBTeamMsg::New() const {
  return new PBTeamMsg;
}

void PBTeamMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    charid_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    metier_ = 0u;
    level_ = 0u;
    maxlevel_ = 0u;
    minlevel_ = 0u;
    if (_has_bit(7)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0u;
    rootstyle_ = 0u;
    substyle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MaxLevel;
        break;
      }
      
      // optional uint32 MaxLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MaxLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &maxlevel_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MinLevel;
        break;
      }
      
      // optional uint32 MinLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MinLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &minlevel_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_Content;
        break;
      }
      
      // optional string Content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Content:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_content()));
        if (input->ExpectTag(72)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Count:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &count_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_RootStyle;
        break;
      }
      
      // optional uint32 RootStyle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RootStyle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rootstyle_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_SubStyle;
        break;
      }
      
      // optional uint32 SubStyle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubStyle:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &substyle_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTeamMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metier(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->maxlevel(), output);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->minlevel(), output);
  }
  
  // optional string Content = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteString(8, this->content(), output);
  }
  
  // optional uint32 Count = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->count(), output);
  }
  
  // optional uint32 RootStyle = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->rootstyle(), output);
  }
  
  // optional uint32 SubStyle = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->substyle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metier(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 MaxLevel = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->maxlevel(), target);
  }
  
  // optional uint32 MinLevel = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->minlevel(), target);
  }
  
  // optional string Content = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(8, this->content(), target);
  }
  
  // optional uint32 Count = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->count(), target);
  }
  
  // optional uint32 RootStyle = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->rootstyle(), target);
  }
  
  // optional uint32 SubStyle = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->substyle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 Metier = 4;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 MaxLevel = 6;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->maxlevel());
    }
    
    // optional uint32 MinLevel = 7;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->minlevel());
    }
    
    // optional string Content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->content());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->count());
    }
    
    // optional uint32 RootStyle = 10;
    if (has_rootstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rootstyle());
    }
    
    // optional uint32 SubStyle = 11;
    if (has_substyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->substyle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTeamMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamMsg::MergeFrom(const PBTeamMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_metier(from.metier());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_maxlevel(from.maxlevel());
    }
    if (from._has_bit(6)) {
      set_minlevel(from.minlevel());
    }
    if (from._has_bit(7)) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_count(from.count());
    }
    if (from._has_bit(9)) {
      set_rootstyle(from.rootstyle());
    }
    if (from._has_bit(10)) {
      set_substyle(from.substyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMsg::CopyFrom(const PBTeamMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMsg::Swap(PBTeamMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(metier_, other->metier_);
    std::swap(level_, other->level_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(content_, other->content_);
    std::swap(count_, other->count_);
    std::swap(rootstyle_, other->rootstyle_);
    std::swap(substyle_, other->substyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTeamMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTeamMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTeamMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMsg_reflection_;
}

// ===================================================================

const ::std::string PBStallInfo::_default_stallname_;
const ::std::string PBStallInfo::_default_adcontent_;
#ifndef _MSC_VER
const int PBStallInfo::kStallNameFieldNumber;
const int PBStallInfo::kAdContentFieldNumber;
const int PBStallInfo::kHasFlagFieldNumber;
const int PBStallInfo::kStallTypeFieldNumber;
#endif  // !_MSC_VER

PBStallInfo::PBStallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStallInfo::InitAsDefaultInstance() {}

PBStallInfo::PBStallInfo(const PBStallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStallInfo::SharedCtor() {
  _cached_size_ = 0;
  stallname_ = const_cast< ::std::string*>(&_default_stallname_);
  adcontent_ = const_cast< ::std::string*>(&_default_adcontent_);
  hasflag_ = 0u;
  stalltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStallInfo::~PBStallInfo() {
  SharedDtor();
}

void PBStallInfo::SharedDtor() {
  if (stallname_ != &_default_stallname_) {
    delete stallname_;
  }
  if (adcontent_ != &_default_adcontent_) {
    delete adcontent_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBStallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStallInfo_descriptor_;
}

const PBStallInfo& PBStallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBStallInfo* PBStallInfo::default_instance_ = NULL;

PBStallInfo* PBStallInfo::New() const {
  return new PBStallInfo;
}

void PBStallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (stallname_ != &_default_stallname_) {
        stallname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (adcontent_ != &_default_adcontent_) {
        adcontent_->clear();
      }
    }
    hasflag_ = 0u;
    stalltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string StallName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_stallname()));
        if (input->ExpectTag(18)) goto parse_AdContent;
        break;
      }
      
      // optional string AdContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AdContent:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_adcontent()));
        if (input->ExpectTag(24)) goto parse_HasFlag;
        break;
      }
      
      // optional uint32 HasFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HasFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &hasflag_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_StallType;
        break;
      }
      
      // optional int32 StallType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_StallType:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &stalltype_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBStallInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string StallName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->stallname(), output);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->adcontent(), output);
  }
  
  // optional uint32 HasFlag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->hasflag(), output);
  }
  
  // optional int32 StallType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->stalltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string StallName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->stallname(), target);
  }
  
  // optional string AdContent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->adcontent(), target);
  }
  
  // optional uint32 HasFlag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->hasflag(), target);
  }
  
  // optional int32 StallType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->stalltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStallInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StallName = 1;
    if (has_stallname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->stallname());
    }
    
    // optional string AdContent = 2;
    if (has_adcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->adcontent());
    }
    
    // optional uint32 HasFlag = 3;
    if (has_hasflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->hasflag());
    }
    
    // optional int32 StallType = 4;
    if (has_stalltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->stalltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBStallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStallInfo::MergeFrom(const PBStallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stallname(from.stallname());
    }
    if (from._has_bit(1)) {
      set_adcontent(from.adcontent());
    }
    if (from._has_bit(2)) {
      set_hasflag(from.hasflag());
    }
    if (from._has_bit(3)) {
      set_stalltype(from.stalltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStallInfo::CopyFrom(const PBStallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStallInfo::Swap(PBStallInfo* other) {
  if (other != this) {
    std::swap(stallname_, other->stallname_);
    std::swap(adcontent_, other->adcontent_);
    std::swap(hasflag_, other->hasflag_);
    std::swap(stalltype_, other->stalltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBStallInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBStallInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBStallInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBStallInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLifeSkill::kLifeSkillTypeFieldNumber;
const int PBLifeSkill::kLifeSkillLevelFieldNumber;
const int PBLifeSkill::kSpecializedDegreeFieldNumber;
const int PBLifeSkill::kLifeSkillStatusFieldNumber;
const int PBLifeSkill::kLifeSkillKindFieldNumber;
const int PBLifeSkill::kComposeIDFieldNumber;
#endif  // !_MSC_VER

PBLifeSkill::PBLifeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLifeSkill::InitAsDefaultInstance() {}

PBLifeSkill::PBLifeSkill(const PBLifeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLifeSkill::SharedCtor() {
  _cached_size_ = 0;
  lifeskilltype_ = 0u;
  lifeskilllevel_ = 0u;
  specializeddegree_ = 0u;
  lifeskillstatus_ = 0u;
  lifeskillkind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLifeSkill::~PBLifeSkill() {
  SharedDtor();
}

void PBLifeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLifeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkill_descriptor_;
}

const PBLifeSkill& PBLifeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBLifeSkill* PBLifeSkill::default_instance_ = NULL;

PBLifeSkill* PBLifeSkill::New() const {
  return new PBLifeSkill;
}

void PBLifeSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lifeskilltype_ = 0u;
    lifeskilllevel_ = 0u;
    specializeddegree_ = 0u;
    lifeskillstatus_ = 0u;
    lifeskillkind_ = 0u;
  }
  composeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLifeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LifeSkillType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilltype_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LifeSkillLevel;
        break;
      }
      
      // optional uint32 LifeSkillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskilllevel_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SpecializedDegree;
        break;
      }
      
      // optional uint32 SpecializedDegree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SpecializedDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &specializeddegree_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LifeSkillStatus;
        break;
      }
      
      // optional uint32 LifeSkillStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillstatus_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_LifeSkillKind;
        break;
      }
      
      // optional uint32 LifeSkillKind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LifeSkillKind:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lifeskillkind_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_ComposeID;
        break;
      }
      
      // repeated uint32 ComposeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ComposeID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_composeid(value);
        if (input->ExpectTag(48)) goto parse_ComposeID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLifeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLifeSkill::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LifeSkillType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->lifeskilltype(), output);
  }
  
  // optional uint32 LifeSkillLevel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->lifeskilllevel(), output);
  }
  
  // optional uint32 SpecializedDegree = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->specializeddegree(), output);
  }
  
  // optional uint32 LifeSkillStatus = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lifeskillstatus(), output);
  }
  
  // optional uint32 LifeSkillKind = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->lifeskillkind(), output);
  }
  
  // repeated uint32 ComposeID = 6;
  for (int i = 0; i < this->composeid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->composeid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLifeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LifeSkillType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->lifeskilltype(), target);
  }
  
  // optional uint32 LifeSkillLevel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->lifeskilllevel(), target);
  }
  
  // optional uint32 SpecializedDegree = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->specializeddegree(), target);
  }
  
  // optional uint32 LifeSkillStatus = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lifeskillstatus(), target);
  }
  
  // optional uint32 LifeSkillKind = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->lifeskillkind(), target);
  }
  
  // repeated uint32 ComposeID = 6;
  for (int i = 0; i < this->composeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->composeid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLifeSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LifeSkillType = 1;
    if (has_lifeskilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilltype());
    }
    
    // optional uint32 LifeSkillLevel = 2;
    if (has_lifeskilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskilllevel());
    }
    
    // optional uint32 SpecializedDegree = 3;
    if (has_specializeddegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->specializeddegree());
    }
    
    // optional uint32 LifeSkillStatus = 4;
    if (has_lifeskillstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillstatus());
    }
    
    // optional uint32 LifeSkillKind = 5;
    if (has_lifeskillkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lifeskillkind());
    }
    
  }
  // repeated uint32 ComposeID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->composeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->composeid(i));
    }
    total_size += 1 * this->composeid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLifeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLifeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLifeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLifeSkill::MergeFrom(const PBLifeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  composeid_.MergeFrom(from.composeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_lifeskilltype(from.lifeskilltype());
    }
    if (from._has_bit(1)) {
      set_lifeskilllevel(from.lifeskilllevel());
    }
    if (from._has_bit(2)) {
      set_specializeddegree(from.specializeddegree());
    }
    if (from._has_bit(3)) {
      set_lifeskillstatus(from.lifeskillstatus());
    }
    if (from._has_bit(4)) {
      set_lifeskillkind(from.lifeskillkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLifeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkill::CopyFrom(const PBLifeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkill::Swap(PBLifeSkill* other) {
  if (other != this) {
    std::swap(lifeskilltype_, other->lifeskilltype_);
    std::swap(lifeskilllevel_, other->lifeskilllevel_);
    std::swap(specializeddegree_, other->specializeddegree_);
    std::swap(lifeskillstatus_, other->lifeskillstatus_);
    std::swap(lifeskillkind_, other->lifeskillkind_);
    composeid_.Swap(&other->composeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLifeSkill::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLifeSkill::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLifeSkill::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkill_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBLifeSkillBox::kLifeSkillFieldNumber;
#endif  // !_MSC_VER

PBLifeSkillBox::PBLifeSkillBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLifeSkillBox::InitAsDefaultInstance() {}

PBLifeSkillBox::PBLifeSkillBox(const PBLifeSkillBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLifeSkillBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLifeSkillBox::~PBLifeSkillBox() {
  SharedDtor();
}

void PBLifeSkillBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBLifeSkillBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkillBox_descriptor_;
}

const PBLifeSkillBox& PBLifeSkillBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBLifeSkillBox* PBLifeSkillBox::default_instance_ = NULL;

PBLifeSkillBox* PBLifeSkillBox::New() const {
  return new PBLifeSkillBox;
}

void PBLifeSkillBox::Clear() {
  lifeskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLifeSkillBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBLifeSkill LifeSkill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_LifeSkill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_lifeskill()));
        if (input->ExpectTag(10)) goto parse_LifeSkill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLifeSkillBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBLifeSkillBox::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBLifeSkill LifeSkill = 1;
  for (int i = 0; i < this->lifeskill_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->lifeskill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLifeSkillBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBLifeSkill LifeSkill = 1;
  for (int i = 0; i < this->lifeskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->lifeskill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLifeSkillBox::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBLifeSkill LifeSkill = 1;
  total_size += 1 * this->lifeskill_size();
  for (int i = 0; i < this->lifeskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->lifeskill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBLifeSkillBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLifeSkillBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLifeSkillBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLifeSkillBox::MergeFrom(const PBLifeSkillBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  lifeskill_.MergeFrom(from.lifeskill_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLifeSkillBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkillBox::CopyFrom(const PBLifeSkillBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLifeSkillBox::Swap(PBLifeSkillBox* other) {
  if (other != this) {
    lifeskill_.Swap(&other->lifeskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBLifeSkillBox::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBLifeSkillBox::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBLifeSkillBox::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBLifeSkillBox_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBExpTimeInfo::kOffLineTimeLengthFieldNumber;
const int PBExpTimeInfo::kEffectiveOffTimeLengthFieldNumber;
const int PBExpTimeInfo::kLastEffectiveTimeLengthFieldNumber;
const int PBExpTimeInfo::kLastCalculateTimeFieldNumber;
const int PBExpTimeInfo::kBlackPillsTimeFieldNumber;
const int PBExpTimeInfo::kBlackPillIDFieldNumber;
const int PBExpTimeInfo::kExpFromOffLineFieldNumber;
#endif  // !_MSC_VER

PBExpTimeInfo::PBExpTimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBExpTimeInfo::InitAsDefaultInstance() {}

PBExpTimeInfo::PBExpTimeInfo(const PBExpTimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBExpTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  offlinetimelength_ = 0u;
  effectiveofftimelength_ = 0u;
  lasteffectivetimelength_ = 0u;
  lastcalculatetime_ = 0u;
  blackpillstime_ = 0u;
  blackpillid_ = 0u;
  expfromoffline_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBExpTimeInfo::~PBExpTimeInfo() {
  SharedDtor();
}

void PBExpTimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBExpTimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBExpTimeInfo_descriptor_;
}

const PBExpTimeInfo& PBExpTimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBExpTimeInfo* PBExpTimeInfo::default_instance_ = NULL;

PBExpTimeInfo* PBExpTimeInfo::New() const {
  return new PBExpTimeInfo;
}

void PBExpTimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offlinetimelength_ = 0u;
    effectiveofftimelength_ = 0u;
    lasteffectivetimelength_ = 0u;
    lastcalculatetime_ = 0u;
    blackpillstime_ = 0u;
    blackpillid_ = 0u;
    expfromoffline_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBExpTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 OffLineTimeLength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offlinetimelength_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_EffectiveOffTimeLength;
        break;
      }
      
      // optional uint32 EffectiveOffTimeLength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_EffectiveOffTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &effectiveofftimelength_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LastEffectiveTimeLength;
        break;
      }
      
      // optional uint32 LastEffectiveTimeLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastEffectiveTimeLength:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lasteffectivetimelength_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_LastCalculateTime;
        break;
      }
      
      // optional uint32 LastCalculateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastCalculateTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastcalculatetime_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_BlackPillsTime;
        break;
      }
      
      // optional uint32 BlackPillsTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BlackPillsTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &blackpillstime_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_BlackPillID;
        break;
      }
      
      // optional uint32 BlackPillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BlackPillID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &blackpillid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_ExpFromOffLine;
        break;
      }
      
      // optional uint32 ExpFromOffLine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpFromOffLine:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expfromoffline_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBExpTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBExpTimeInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 OffLineTimeLength = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->offlinetimelength(), output);
  }
  
  // optional uint32 EffectiveOffTimeLength = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->effectiveofftimelength(), output);
  }
  
  // optional uint32 LastEffectiveTimeLength = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lasteffectivetimelength(), output);
  }
  
  // optional uint32 LastCalculateTime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->lastcalculatetime(), output);
  }
  
  // optional uint32 BlackPillsTime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->blackpillstime(), output);
  }
  
  // optional uint32 BlackPillID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->blackpillid(), output);
  }
  
  // optional uint32 ExpFromOffLine = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->expfromoffline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBExpTimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 OffLineTimeLength = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->offlinetimelength(), target);
  }
  
  // optional uint32 EffectiveOffTimeLength = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->effectiveofftimelength(), target);
  }
  
  // optional uint32 LastEffectiveTimeLength = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lasteffectivetimelength(), target);
  }
  
  // optional uint32 LastCalculateTime = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->lastcalculatetime(), target);
  }
  
  // optional uint32 BlackPillsTime = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->blackpillstime(), target);
  }
  
  // optional uint32 BlackPillID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->blackpillid(), target);
  }
  
  // optional uint32 ExpFromOffLine = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->expfromoffline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBExpTimeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OffLineTimeLength = 1;
    if (has_offlinetimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offlinetimelength());
    }
    
    // optional uint32 EffectiveOffTimeLength = 2;
    if (has_effectiveofftimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->effectiveofftimelength());
    }
    
    // optional uint32 LastEffectiveTimeLength = 3;
    if (has_lasteffectivetimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lasteffectivetimelength());
    }
    
    // optional uint32 LastCalculateTime = 4;
    if (has_lastcalculatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastcalculatetime());
    }
    
    // optional uint32 BlackPillsTime = 5;
    if (has_blackpillstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->blackpillstime());
    }
    
    // optional uint32 BlackPillID = 6;
    if (has_blackpillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->blackpillid());
    }
    
    // optional uint32 ExpFromOffLine = 7;
    if (has_expfromoffline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expfromoffline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBExpTimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBExpTimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBExpTimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBExpTimeInfo::MergeFrom(const PBExpTimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_offlinetimelength(from.offlinetimelength());
    }
    if (from._has_bit(1)) {
      set_effectiveofftimelength(from.effectiveofftimelength());
    }
    if (from._has_bit(2)) {
      set_lasteffectivetimelength(from.lasteffectivetimelength());
    }
    if (from._has_bit(3)) {
      set_lastcalculatetime(from.lastcalculatetime());
    }
    if (from._has_bit(4)) {
      set_blackpillstime(from.blackpillstime());
    }
    if (from._has_bit(5)) {
      set_blackpillid(from.blackpillid());
    }
    if (from._has_bit(6)) {
      set_expfromoffline(from.expfromoffline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBExpTimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBExpTimeInfo::CopyFrom(const PBExpTimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBExpTimeInfo::Swap(PBExpTimeInfo* other) {
  if (other != this) {
    std::swap(offlinetimelength_, other->offlinetimelength_);
    std::swap(effectiveofftimelength_, other->effectiveofftimelength_);
    std::swap(lasteffectivetimelength_, other->lasteffectivetimelength_);
    std::swap(lastcalculatetime_, other->lastcalculatetime_);
    std::swap(blackpillstime_, other->blackpillstime_);
    std::swap(blackpillid_, other->blackpillid_);
    std::swap(expfromoffline_, other->expfromoffline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBExpTimeInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBExpTimeInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBExpTimeInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBExpTimeInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSinglePublishInfo::kPubNumFieldNumber;
const int PBSinglePublishInfo::kRecvAwardsFieldNumber;
#endif  // !_MSC_VER

PBSinglePublishInfo::PBSinglePublishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSinglePublishInfo::InitAsDefaultInstance() {}

PBSinglePublishInfo::PBSinglePublishInfo(const PBSinglePublishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSinglePublishInfo::SharedCtor() {
  _cached_size_ = 0;
  pubnum_ = 0u;
  recvawards_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSinglePublishInfo::~PBSinglePublishInfo() {
  SharedDtor();
}

void PBSinglePublishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSinglePublishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePublishInfo_descriptor_;
}

const PBSinglePublishInfo& PBSinglePublishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSinglePublishInfo* PBSinglePublishInfo::default_instance_ = NULL;

PBSinglePublishInfo* PBSinglePublishInfo::New() const {
  return new PBSinglePublishInfo;
}

void PBSinglePublishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pubnum_ = 0u;
    recvawards_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSinglePublishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PubNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &pubnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RecvAwards;
        break;
      }
      
      // optional uint32 RecvAwards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RecvAwards:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &recvawards_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSinglePublishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSinglePublishInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PubNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->pubnum(), output);
  }
  
  // optional uint32 RecvAwards = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->recvawards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSinglePublishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PubNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->pubnum(), target);
  }
  
  // optional uint32 RecvAwards = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->recvawards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSinglePublishInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PubNum = 1;
    if (has_pubnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->pubnum());
    }
    
    // optional uint32 RecvAwards = 2;
    if (has_recvawards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->recvawards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSinglePublishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSinglePublishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSinglePublishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSinglePublishInfo::MergeFrom(const PBSinglePublishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pubnum(from.pubnum());
    }
    if (from._has_bit(1)) {
      set_recvawards(from.recvawards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSinglePublishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePublishInfo::CopyFrom(const PBSinglePublishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePublishInfo::Swap(PBSinglePublishInfo* other) {
  if (other != this) {
    std::swap(pubnum_, other->pubnum_);
    std::swap(recvawards_, other->recvawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSinglePublishInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSinglePublishInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSinglePublishInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePublishInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTaskPublishInfo::kSingleDataFieldNumber;
const int PBTaskPublishInfo::kTodayPublishNumFieldNumber;
const int PBTaskPublishInfo::kOncePublishNumFieldNumber;
const int PBTaskPublishInfo::kTotalFinishNumFieldNumber;
#endif  // !_MSC_VER

PBTaskPublishInfo::PBTaskPublishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskPublishInfo::InitAsDefaultInstance() {}

PBTaskPublishInfo::PBTaskPublishInfo(const PBTaskPublishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskPublishInfo::SharedCtor() {
  _cached_size_ = 0;
  todaypublishnum_ = 0u;
  oncepublishnum_ = 0u;
  totalfinishnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskPublishInfo::~PBTaskPublishInfo() {
  SharedDtor();
}

void PBTaskPublishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTaskPublishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskPublishInfo_descriptor_;
}

const PBTaskPublishInfo& PBTaskPublishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTaskPublishInfo* PBTaskPublishInfo::default_instance_ = NULL;

PBTaskPublishInfo* PBTaskPublishInfo::New() const {
  return new PBTaskPublishInfo;
}

void PBTaskPublishInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    todaypublishnum_ = 0u;
    oncepublishnum_ = 0u;
    totalfinishnum_ = 0u;
  }
  singledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskPublishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSinglePublishInfo SingleData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SingleData:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_singledata()));
        if (input->ExpectTag(10)) goto parse_SingleData;
        if (input->ExpectTag(16)) goto parse_TodayPublishNum;
        break;
      }
      
      // optional uint32 TodayPublishNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TodayPublishNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &todaypublishnum_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_OncePublishNum;
        break;
      }
      
      // optional uint32 OncePublishNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OncePublishNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oncepublishnum_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_TotalFinishNum;
        break;
      }
      
      // optional uint32 TotalFinishNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TotalFinishNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalfinishnum_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskPublishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTaskPublishInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSinglePublishInfo SingleData = 1;
  for (int i = 0; i < this->singledata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->singledata(i), output);
  }
  
  // optional uint32 TodayPublishNum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->todaypublishnum(), output);
  }
  
  // optional uint32 OncePublishNum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->oncepublishnum(), output);
  }
  
  // optional uint32 TotalFinishNum = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->totalfinishnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskPublishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSinglePublishInfo SingleData = 1;
  for (int i = 0; i < this->singledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->singledata(i), target);
  }
  
  // optional uint32 TodayPublishNum = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->todaypublishnum(), target);
  }
  
  // optional uint32 OncePublishNum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->oncepublishnum(), target);
  }
  
  // optional uint32 TotalFinishNum = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->totalfinishnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskPublishInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 TodayPublishNum = 2;
    if (has_todaypublishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->todaypublishnum());
    }
    
    // optional uint32 OncePublishNum = 3;
    if (has_oncepublishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oncepublishnum());
    }
    
    // optional uint32 TotalFinishNum = 4;
    if (has_totalfinishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalfinishnum());
    }
    
  }
  // repeated .PBSinglePublishInfo SingleData = 1;
  total_size += 1 * this->singledata_size();
  for (int i = 0; i < this->singledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->singledata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTaskPublishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskPublishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskPublishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskPublishInfo::MergeFrom(const PBTaskPublishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  singledata_.MergeFrom(from.singledata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_todaypublishnum(from.todaypublishnum());
    }
    if (from._has_bit(2)) {
      set_oncepublishnum(from.oncepublishnum());
    }
    if (from._has_bit(3)) {
      set_totalfinishnum(from.totalfinishnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskPublishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskPublishInfo::CopyFrom(const PBTaskPublishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskPublishInfo::Swap(PBTaskPublishInfo* other) {
  if (other != this) {
    singledata_.Swap(&other->singledata_);
    std::swap(todaypublishnum_, other->todaypublishnum_);
    std::swap(oncepublishnum_, other->oncepublishnum_);
    std::swap(totalfinishnum_, other->totalfinishnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTaskPublishInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTaskPublishInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTaskPublishInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTaskPublishInfo_reflection_;
}

// ===================================================================

const ::std::string CMessagePlayerInfo::_default_role_name_;
const ::std::string CMessagePlayerInfo::_default_role_password_;
#ifndef _MSC_VER
const int CMessagePlayerInfo::kRoleIdFieldNumber;
const int CMessagePlayerInfo::kAccountIdFieldNumber;
const int CMessagePlayerInfo::kRoleNameFieldNumber;
const int CMessagePlayerInfo::kGenderIdFieldNumber;
const int CMessagePlayerInfo::kMetierIdFieldNumber;
const int CMessagePlayerInfo::kNationalityIdFieldNumber;
const int CMessagePlayerInfo::kFaceTypeFieldNumber;
const int CMessagePlayerInfo::kLineIdFieldNumber;
const int CMessagePlayerInfo::kMapIdFieldNumber;
const int CMessagePlayerInfo::kRoleLevelFieldNumber;
const int CMessagePlayerInfo::kRoleExprFieldNumber;
const int CMessagePlayerInfo::kRoleMoneyFieldNumber;
const int CMessagePlayerInfo::kPosXFieldNumber;
const int CMessagePlayerInfo::kPosYFieldNumber;
const int CMessagePlayerInfo::kIsAliveFieldNumber;
const int CMessagePlayerInfo::kLoginTimeFieldNumber;
const int CMessagePlayerInfo::kOnlineDurationFieldNumber;
const int CMessagePlayerInfo::kSaveStatusFieldNumber;
const int CMessagePlayerInfo::kSaveBitflagFieldNumber;
const int CMessagePlayerInfo::kBoundedMoneyFieldNumber;
const int CMessagePlayerInfo::kCheckSumFieldNumber;
const int CMessagePlayerInfo::kSilverYbFieldNumber;
const int CMessagePlayerInfo::kStorageMoneyFieldNumber;
const int CMessagePlayerInfo::kStorageBoundedMoneyFieldNumber;
const int CMessagePlayerInfo::kRoleStatusParamFieldNumber;
const int CMessagePlayerInfo::kCountryIdFieldNumber;
const int CMessagePlayerInfo::kRoleFamilyidFieldNumber;
const int CMessagePlayerInfo::kRoleCorpsidFieldNumber;
const int CMessagePlayerInfo::kChargedSilverYbFieldNumber;
const int CMessagePlayerInfo::kConsumedSilverYbFieldNumber;
const int CMessagePlayerInfo::kRoleProtecttimeFieldNumber;
const int CMessagePlayerInfo::kRolePasswordFieldNumber;
const int CMessagePlayerInfo::kRoleVipFlagFieldNumber;
const int CMessagePlayerInfo::kRoleVipTimeFieldNumber;
const int CMessagePlayerInfo::kRoleMarriageidFieldNumber;
const int CMessagePlayerInfo::kRoleChangecampTimeFieldNumber;
const int CMessagePlayerInfo::kRoleStatusFieldNumber;
const int CMessagePlayerInfo::kRoleSwornidFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerInfo::CMessagePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerInfo::InitAsDefaultInstance() {}

CMessagePlayerInfo::CMessagePlayerInfo(const CMessagePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  account_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&_default_role_name_);
  gender_id_ = 0u;
  metier_id_ = 0u;
  nationality_id_ = 0u;
  face_type_ = 0u;
  line_id_ = 0u;
  map_id_ = 0u;
  role_level_ = 0u;
  role_expr_ = GOOGLE_ULONGLONG(0);
  role_money_ = 0u;
  pos_x_ = 0;
  pos_y_ = 0;
  is_alive_ = 0u;
  login_time_ = 0u;
  online_duration_ = 0u;
  save_status_ = 0u;
  save_bitflag_ = 0u;
  bounded_money_ = 0u;
  check_sum_ = 0u;
  silver_yb_ = 0u;
  storage_money_ = 0u;
  storage_bounded_money_ = 0u;
  role_status_param_ = 0u;
  country_id_ = 0;
  role_familyid_ = 0u;
  role_corpsid_ = 0u;
  charged_silver_yb_ = 0u;
  consumed_silver_yb_ = 0u;
  role_protecttime_ = 0u;
  role_password_ = const_cast< ::std::string*>(&_default_role_password_);
  role_vip_flag_ = 0u;
  role_vip_time_ = 0u;
  role_marriageid_ = 0u;
  role_changecamp_time_ = 0u;
  role_status_ = 0u;
  role_swornid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerInfo::~CMessagePlayerInfo() {
  SharedDtor();
}

void CMessagePlayerInfo::SharedDtor() {
  if (role_name_ != &_default_role_name_) {
    delete role_name_;
  }
  if (role_password_ != &_default_role_password_) {
    delete role_password_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInfo_descriptor_;
}

const CMessagePlayerInfo& CMessagePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerInfo* CMessagePlayerInfo::default_instance_ = NULL;

CMessagePlayerInfo* CMessagePlayerInfo::New() const {
  return new CMessagePlayerInfo;
}

void CMessagePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    account_id_ = 0u;
    if (_has_bit(2)) {
      if (role_name_ != &_default_role_name_) {
        role_name_->clear();
      }
    }
    gender_id_ = 0u;
    metier_id_ = 0u;
    nationality_id_ = 0u;
    face_type_ = 0u;
    line_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_id_ = 0u;
    role_level_ = 0u;
    role_expr_ = GOOGLE_ULONGLONG(0);
    role_money_ = 0u;
    pos_x_ = 0;
    pos_y_ = 0;
    is_alive_ = 0u;
    login_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    online_duration_ = 0u;
    save_status_ = 0u;
    save_bitflag_ = 0u;
    bounded_money_ = 0u;
    check_sum_ = 0u;
    silver_yb_ = 0u;
    storage_money_ = 0u;
    storage_bounded_money_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    role_status_param_ = 0u;
    country_id_ = 0;
    role_familyid_ = 0u;
    role_corpsid_ = 0u;
    charged_silver_yb_ = 0u;
    consumed_silver_yb_ = 0u;
    role_protecttime_ = 0u;
    if (_has_bit(31)) {
      if (role_password_ != &_default_role_password_) {
        role_password_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    role_vip_flag_ = 0u;
    role_vip_time_ = 0u;
    role_marriageid_ = 0u;
    role_changecamp_time_ = 0u;
    role_status_ = 0u;
    role_swornid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_account_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &account_id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_name()));
        if (input->ExpectTag(32)) goto parse_gender_id;
        break;
      }
      
      // optional uint32 gender_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gender_id_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_metier_id;
        break;
      }
      
      // optional uint32 metier_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_metier_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_id_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nationality_id;
        break;
      }
      
      // optional uint32 nationality_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nationality_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationality_id_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_face_type;
        break;
      }
      
      // optional uint32 face_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_face_type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_type_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_line_id;
        break;
      }
      
      // optional uint32 line_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_line_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &line_id_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_map_id;
        break;
      }
      
      // optional uint32 map_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_map_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &map_id_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_role_level;
        break;
      }
      
      // optional uint32 role_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_level_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_role_expr;
        break;
      }
      
      // optional uint64 role_expr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_expr:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &role_expr_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_role_money;
        break;
      }
      
      // optional uint32 role_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_money_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_pos_x;
        break;
      }
      
      // optional int32 pos_x = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos_x:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pos_x_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_pos_y;
        break;
      }
      
      // optional int32 pos_y = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pos_y:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &pos_y_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_is_alive;
        break;
      }
      
      // optional uint32 is_alive = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_is_alive:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &is_alive_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_login_time;
        break;
      }
      
      // optional uint32 login_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_login_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &login_time_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_online_duration;
        break;
      }
      
      // optional uint32 online_duration = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online_duration:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &online_duration_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_save_status;
        break;
      }
      
      // optional uint32 save_status = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_save_status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &save_status_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_save_bitflag;
        break;
      }
      
      // optional uint32 save_bitflag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_save_bitflag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &save_bitflag_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_bounded_money;
        break;
      }
      
      // optional uint32 bounded_money = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_bounded_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bounded_money_));
        _set_bit(19);
        if (input->ExpectTag(168)) goto parse_check_sum;
        break;
      }
      
      // optional uint32 check_sum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_check_sum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &check_sum_));
        _set_bit(20);
        if (input->ExpectTag(176)) goto parse_silver_yb;
        break;
      }
      
      // optional uint32 silver_yb = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_silver_yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &silver_yb_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_storage_money;
        break;
      }
      
      // optional uint32 storage_money = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_storage_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storage_money_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_storage_bounded_money;
        break;
      }
      
      // optional uint32 storage_bounded_money = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_storage_bounded_money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &storage_bounded_money_));
        _set_bit(23);
        if (input->ExpectTag(200)) goto parse_role_status_param;
        break;
      }
      
      // optional uint32 role_status_param = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_status_param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_status_param_));
        _set_bit(24);
        if (input->ExpectTag(208)) goto parse_country_id;
        break;
      }
      
      // optional int32 country_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country_id:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &country_id_));
        _set_bit(25);
        if (input->ExpectTag(216)) goto parse_role_familyid;
        break;
      }
      
      // optional uint32 role_familyid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_familyid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_familyid_));
        _set_bit(26);
        if (input->ExpectTag(224)) goto parse_role_corpsid;
        break;
      }
      
      // optional uint32 role_corpsid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_corpsid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_corpsid_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_charged_silver_yb;
        break;
      }
      
      // optional uint32 charged_silver_yb = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_charged_silver_yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charged_silver_yb_));
        _set_bit(28);
        if (input->ExpectTag(240)) goto parse_consumed_silver_yb;
        break;
      }
      
      // optional uint32 consumed_silver_yb = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_consumed_silver_yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &consumed_silver_yb_));
        _set_bit(29);
        if (input->ExpectTag(248)) goto parse_role_protecttime;
        break;
      }
      
      // optional uint32 role_protecttime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_protecttime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_protecttime_));
        _set_bit(30);
        if (input->ExpectTag(258)) goto parse_role_password;
        break;
      }
      
      // optional string role_password = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_password:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_role_password()));
        if (input->ExpectTag(264)) goto parse_role_vip_flag;
        break;
      }
      
      // optional uint32 role_vip_flag = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_vip_flag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_vip_flag_));
        _set_bit(32);
        if (input->ExpectTag(272)) goto parse_role_vip_time;
        break;
      }
      
      // optional uint32 role_vip_time = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_vip_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_vip_time_));
        _set_bit(33);
        if (input->ExpectTag(280)) goto parse_role_marriageid;
        break;
      }
      
      // optional uint32 role_marriageid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_marriageid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_marriageid_));
        _set_bit(34);
        if (input->ExpectTag(288)) goto parse_role_changecamp_time;
        break;
      }
      
      // optional uint32 role_changecamp_time = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_changecamp_time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_changecamp_time_));
        _set_bit(35);
        if (input->ExpectTag(296)) goto parse_role_status;
        break;
      }
      
      // optional uint32 role_status = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_status_));
        _set_bit(36);
        if (input->ExpectTag(304)) goto parse_role_swornid;
        break;
      }
      
      // optional uint32 role_swornid = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_swornid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_swornid_));
        _set_bit(37);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 role_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->role_id(), output);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->account_id(), output);
  }
  
  // optional string role_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->role_name(), output);
  }
  
  // optional uint32 gender_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->gender_id(), output);
  }
  
  // optional uint32 metier_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->metier_id(), output);
  }
  
  // optional uint32 nationality_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->nationality_id(), output);
  }
  
  // optional uint32 face_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->face_type(), output);
  }
  
  // optional uint32 line_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->line_id(), output);
  }
  
  // optional uint32 map_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->map_id(), output);
  }
  
  // optional uint32 role_level = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->role_level(), output);
  }
  
  // optional uint64 role_expr = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(11, this->role_expr(), output);
  }
  
  // optional uint32 role_money = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->role_money(), output);
  }
  
  // optional int32 pos_x = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(13, this->pos_x(), output);
  }
  
  // optional int32 pos_y = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(14, this->pos_y(), output);
  }
  
  // optional uint32 is_alive = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->is_alive(), output);
  }
  
  // optional uint32 login_time = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(16, this->login_time(), output);
  }
  
  // optional uint32 online_duration = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(17, this->online_duration(), output);
  }
  
  // optional uint32 save_status = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->save_status(), output);
  }
  
  // optional uint32 save_bitflag = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->save_bitflag(), output);
  }
  
  // optional uint32 bounded_money = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(20, this->bounded_money(), output);
  }
  
  // optional uint32 check_sum = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(21, this->check_sum(), output);
  }
  
  // optional uint32 silver_yb = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(22, this->silver_yb(), output);
  }
  
  // optional uint32 storage_money = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(23, this->storage_money(), output);
  }
  
  // optional uint32 storage_bounded_money = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(24, this->storage_bounded_money(), output);
  }
  
  // optional uint32 role_status_param = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(25, this->role_status_param(), output);
  }
  
  // optional int32 country_id = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(26, this->country_id(), output);
  }
  
  // optional uint32 role_familyid = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(27, this->role_familyid(), output);
  }
  
  // optional uint32 role_corpsid = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(28, this->role_corpsid(), output);
  }
  
  // optional uint32 charged_silver_yb = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(29, this->charged_silver_yb(), output);
  }
  
  // optional uint32 consumed_silver_yb = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(30, this->consumed_silver_yb(), output);
  }
  
  // optional uint32 role_protecttime = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(31, this->role_protecttime(), output);
  }
  
  // optional string role_password = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormat::WriteString(32, this->role_password(), output);
  }
  
  // optional uint32 role_vip_flag = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(33, this->role_vip_flag(), output);
  }
  
  // optional uint32 role_vip_time = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(34, this->role_vip_time(), output);
  }
  
  // optional uint32 role_marriageid = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(35, this->role_marriageid(), output);
  }
  
  // optional uint32 role_changecamp_time = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(36, this->role_changecamp_time(), output);
  }
  
  // optional uint32 role_status = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(37, this->role_status(), output);
  }
  
  // optional uint32 role_swornid = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(38, this->role_swornid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->role_id(), target);
  }
  
  // optional uint32 account_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // optional string role_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->role_name(), target);
  }
  
  // optional uint32 gender_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->gender_id(), target);
  }
  
  // optional uint32 metier_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->metier_id(), target);
  }
  
  // optional uint32 nationality_id = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->nationality_id(), target);
  }
  
  // optional uint32 face_type = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->face_type(), target);
  }
  
  // optional uint32 line_id = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->line_id(), target);
  }
  
  // optional uint32 map_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->map_id(), target);
  }
  
  // optional uint32 role_level = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->role_level(), target);
  }
  
  // optional uint64 role_expr = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(11, this->role_expr(), target);
  }
  
  // optional uint32 role_money = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->role_money(), target);
  }
  
  // optional int32 pos_x = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(13, this->pos_x(), target);
  }
  
  // optional int32 pos_y = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(14, this->pos_y(), target);
  }
  
  // optional uint32 is_alive = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->is_alive(), target);
  }
  
  // optional uint32 login_time = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(16, this->login_time(), target);
  }
  
  // optional uint32 online_duration = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(17, this->online_duration(), target);
  }
  
  // optional uint32 save_status = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->save_status(), target);
  }
  
  // optional uint32 save_bitflag = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->save_bitflag(), target);
  }
  
  // optional uint32 bounded_money = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(20, this->bounded_money(), target);
  }
  
  // optional uint32 check_sum = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(21, this->check_sum(), target);
  }
  
  // optional uint32 silver_yb = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(22, this->silver_yb(), target);
  }
  
  // optional uint32 storage_money = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(23, this->storage_money(), target);
  }
  
  // optional uint32 storage_bounded_money = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(24, this->storage_bounded_money(), target);
  }
  
  // optional uint32 role_status_param = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(25, this->role_status_param(), target);
  }
  
  // optional int32 country_id = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(26, this->country_id(), target);
  }
  
  // optional uint32 role_familyid = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(27, this->role_familyid(), target);
  }
  
  // optional uint32 role_corpsid = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(28, this->role_corpsid(), target);
  }
  
  // optional uint32 charged_silver_yb = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(29, this->charged_silver_yb(), target);
  }
  
  // optional uint32 consumed_silver_yb = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(30, this->consumed_silver_yb(), target);
  }
  
  // optional uint32 role_protecttime = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(31, this->role_protecttime(), target);
  }
  
  // optional string role_password = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(32, this->role_password(), target);
  }
  
  // optional uint32 role_vip_flag = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(33, this->role_vip_flag(), target);
  }
  
  // optional uint32 role_vip_time = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(34, this->role_vip_time(), target);
  }
  
  // optional uint32 role_marriageid = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(35, this->role_marriageid(), target);
  }
  
  // optional uint32 role_changecamp_time = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(36, this->role_changecamp_time(), target);
  }
  
  // optional uint32 role_status = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(37, this->role_status(), target);
  }
  
  // optional uint32 role_swornid = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(38, this->role_swornid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_id());
    }
    
    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->account_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_name());
    }
    
    // optional uint32 gender_id = 4;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gender_id());
    }
    
    // optional uint32 metier_id = 5;
    if (has_metier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier_id());
    }
    
    // optional uint32 nationality_id = 6;
    if (has_nationality_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationality_id());
    }
    
    // optional uint32 face_type = 7;
    if (has_face_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face_type());
    }
    
    // optional uint32 line_id = 8;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->line_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 map_id = 9;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->map_id());
    }
    
    // optional uint32 role_level = 10;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_level());
    }
    
    // optional uint64 role_expr = 11;
    if (has_role_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->role_expr());
    }
    
    // optional uint32 role_money = 12;
    if (has_role_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_money());
    }
    
    // optional int32 pos_x = 13;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pos_x());
    }
    
    // optional int32 pos_y = 14;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->pos_y());
    }
    
    // optional uint32 is_alive = 15;
    if (has_is_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->is_alive());
    }
    
    // optional uint32 login_time = 16;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->login_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 online_duration = 17;
    if (has_online_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->online_duration());
    }
    
    // optional uint32 save_status = 18;
    if (has_save_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->save_status());
    }
    
    // optional uint32 save_bitflag = 19;
    if (has_save_bitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->save_bitflag());
    }
    
    // optional uint32 bounded_money = 20;
    if (has_bounded_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bounded_money());
    }
    
    // optional uint32 check_sum = 21;
    if (has_check_sum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->check_sum());
    }
    
    // optional uint32 silver_yb = 22;
    if (has_silver_yb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->silver_yb());
    }
    
    // optional uint32 storage_money = 23;
    if (has_storage_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storage_money());
    }
    
    // optional uint32 storage_bounded_money = 24;
    if (has_storage_bounded_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->storage_bounded_money());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 role_status_param = 25;
    if (has_role_status_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_status_param());
    }
    
    // optional int32 country_id = 26;
    if (has_country_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->country_id());
    }
    
    // optional uint32 role_familyid = 27;
    if (has_role_familyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_familyid());
    }
    
    // optional uint32 role_corpsid = 28;
    if (has_role_corpsid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_corpsid());
    }
    
    // optional uint32 charged_silver_yb = 29;
    if (has_charged_silver_yb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charged_silver_yb());
    }
    
    // optional uint32 consumed_silver_yb = 30;
    if (has_consumed_silver_yb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->consumed_silver_yb());
    }
    
    // optional uint32 role_protecttime = 31;
    if (has_role_protecttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_protecttime());
    }
    
    // optional string role_password = 32;
    if (has_role_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::StringSize(this->role_password());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 role_vip_flag = 33;
    if (has_role_vip_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_vip_flag());
    }
    
    // optional uint32 role_vip_time = 34;
    if (has_role_vip_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_vip_time());
    }
    
    // optional uint32 role_marriageid = 35;
    if (has_role_marriageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_marriageid());
    }
    
    // optional uint32 role_changecamp_time = 36;
    if (has_role_changecamp_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_changecamp_time());
    }
    
    // optional uint32 role_status = 37;
    if (has_role_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_status());
    }
    
    // optional uint32 role_swornid = 38;
    if (has_role_swornid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_swornid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerInfo::MergeFrom(const CMessagePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_id(from.role_id());
    }
    if (from._has_bit(1)) {
      set_account_id(from.account_id());
    }
    if (from._has_bit(2)) {
      set_role_name(from.role_name());
    }
    if (from._has_bit(3)) {
      set_gender_id(from.gender_id());
    }
    if (from._has_bit(4)) {
      set_metier_id(from.metier_id());
    }
    if (from._has_bit(5)) {
      set_nationality_id(from.nationality_id());
    }
    if (from._has_bit(6)) {
      set_face_type(from.face_type());
    }
    if (from._has_bit(7)) {
      set_line_id(from.line_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(9)) {
      set_role_level(from.role_level());
    }
    if (from._has_bit(10)) {
      set_role_expr(from.role_expr());
    }
    if (from._has_bit(11)) {
      set_role_money(from.role_money());
    }
    if (from._has_bit(12)) {
      set_pos_x(from.pos_x());
    }
    if (from._has_bit(13)) {
      set_pos_y(from.pos_y());
    }
    if (from._has_bit(14)) {
      set_is_alive(from.is_alive());
    }
    if (from._has_bit(15)) {
      set_login_time(from.login_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_online_duration(from.online_duration());
    }
    if (from._has_bit(17)) {
      set_save_status(from.save_status());
    }
    if (from._has_bit(18)) {
      set_save_bitflag(from.save_bitflag());
    }
    if (from._has_bit(19)) {
      set_bounded_money(from.bounded_money());
    }
    if (from._has_bit(20)) {
      set_check_sum(from.check_sum());
    }
    if (from._has_bit(21)) {
      set_silver_yb(from.silver_yb());
    }
    if (from._has_bit(22)) {
      set_storage_money(from.storage_money());
    }
    if (from._has_bit(23)) {
      set_storage_bounded_money(from.storage_bounded_money());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_role_status_param(from.role_status_param());
    }
    if (from._has_bit(25)) {
      set_country_id(from.country_id());
    }
    if (from._has_bit(26)) {
      set_role_familyid(from.role_familyid());
    }
    if (from._has_bit(27)) {
      set_role_corpsid(from.role_corpsid());
    }
    if (from._has_bit(28)) {
      set_charged_silver_yb(from.charged_silver_yb());
    }
    if (from._has_bit(29)) {
      set_consumed_silver_yb(from.consumed_silver_yb());
    }
    if (from._has_bit(30)) {
      set_role_protecttime(from.role_protecttime());
    }
    if (from._has_bit(31)) {
      set_role_password(from.role_password());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_role_vip_flag(from.role_vip_flag());
    }
    if (from._has_bit(33)) {
      set_role_vip_time(from.role_vip_time());
    }
    if (from._has_bit(34)) {
      set_role_marriageid(from.role_marriageid());
    }
    if (from._has_bit(35)) {
      set_role_changecamp_time(from.role_changecamp_time());
    }
    if (from._has_bit(36)) {
      set_role_status(from.role_status());
    }
    if (from._has_bit(37)) {
      set_role_swornid(from.role_swornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInfo::CopyFrom(const CMessagePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerInfo::Swap(CMessagePlayerInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(metier_id_, other->metier_id_);
    std::swap(nationality_id_, other->nationality_id_);
    std::swap(face_type_, other->face_type_);
    std::swap(line_id_, other->line_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(role_expr_, other->role_expr_);
    std::swap(role_money_, other->role_money_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(is_alive_, other->is_alive_);
    std::swap(login_time_, other->login_time_);
    std::swap(online_duration_, other->online_duration_);
    std::swap(save_status_, other->save_status_);
    std::swap(save_bitflag_, other->save_bitflag_);
    std::swap(bounded_money_, other->bounded_money_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(silver_yb_, other->silver_yb_);
    std::swap(storage_money_, other->storage_money_);
    std::swap(storage_bounded_money_, other->storage_bounded_money_);
    std::swap(role_status_param_, other->role_status_param_);
    std::swap(country_id_, other->country_id_);
    std::swap(role_familyid_, other->role_familyid_);
    std::swap(role_corpsid_, other->role_corpsid_);
    std::swap(charged_silver_yb_, other->charged_silver_yb_);
    std::swap(consumed_silver_yb_, other->consumed_silver_yb_);
    std::swap(role_protecttime_, other->role_protecttime_);
    std::swap(role_password_, other->role_password_);
    std::swap(role_vip_flag_, other->role_vip_flag_);
    std::swap(role_vip_time_, other->role_vip_time_);
    std::swap(role_marriageid_, other->role_marriageid_);
    std::swap(role_changecamp_time_, other->role_changecamp_time_);
    std::swap(role_status_, other->role_status_);
    std::swap(role_swornid_, other->role_swornid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBAwardRecord::kAwardIDFieldNumber;
const int PBAwardRecord::kTimesFieldNumber;
#endif  // !_MSC_VER

PBAwardRecord::PBAwardRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAwardRecord::InitAsDefaultInstance() {}

PBAwardRecord::PBAwardRecord(const PBAwardRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAwardRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAwardRecord::~PBAwardRecord() {
  SharedDtor();
}

void PBAwardRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBAwardRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAwardRecord_descriptor_;
}

const PBAwardRecord& PBAwardRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBAwardRecord* PBAwardRecord::default_instance_ = NULL;

PBAwardRecord* PBAwardRecord::New() const {
  return new PBAwardRecord;
}

void PBAwardRecord::Clear() {
  awardid_.Clear();
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAwardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 AwardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AwardID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_awardid(value);
        if (input->ExpectTag(8)) goto parse_AwardID;
        if (input->ExpectTag(16)) goto parse_Times;
        break;
      }
      
      // repeated uint32 Times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Times:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_times(value);
        if (input->ExpectTag(16)) goto parse_Times;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAwardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBAwardRecord::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 AwardID = 1;
  for (int i = 0; i < this->awardid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->awardid(i), output);
  }
  
  // repeated uint32 Times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->times(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAwardRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 AwardID = 1;
  for (int i = 0; i < this->awardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->awardid(i), target);
  }
  
  // repeated uint32 Times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->times(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAwardRecord::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 AwardID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->awardid(i));
    }
    total_size += 1 * this->awardid_size() + data_size;
  }
  
  // repeated uint32 Times = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->times(i));
    }
    total_size += 1 * this->times_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBAwardRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAwardRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAwardRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAwardRecord::MergeFrom(const PBAwardRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardid_.MergeFrom(from.awardid_);
  times_.MergeFrom(from.times_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAwardRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardRecord::CopyFrom(const PBAwardRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardRecord::Swap(PBAwardRecord* other) {
  if (other != this) {
    awardid_.Swap(&other->awardid_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBAwardRecord::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBAwardRecord::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBAwardRecord::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBAwardRecord_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBMatrixInfo::kMasterIDFieldNumber;
const int PBMatrixInfo::kSlaveIDFieldNumber;
const int PBMatrixInfo::kSlaveValueFieldNumber;
const int PBMatrixInfo::kSlavePointFieldNumber;
const int PBMatrixInfo::kMasterPointFieldNumber;
const int PBMatrixInfo::kSlaveTotalFieldNumber;
const int PBMatrixInfo::kMasterTotalFieldNumber;
const int PBMatrixInfo::kMasterPercentFieldNumber;
const int PBMatrixInfo::kMasterTimesFieldNumber;
const int PBMatrixInfo::kSlaveNumFieldNumber;
const int PBMatrixInfo::kMasterGiveFieldNumber;
const int PBMatrixInfo::kBeginnerNumFieldNumber;
const int PBMatrixInfo::kFormalNumFieldNumber;
#endif  // !_MSC_VER

PBMatrixInfo::PBMatrixInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMatrixInfo::InitAsDefaultInstance() {}

PBMatrixInfo::PBMatrixInfo(const PBMatrixInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMatrixInfo::SharedCtor() {
  _cached_size_ = 0;
  slavepoint_ = 0u;
  masterpoint_ = 0u;
  slavetotal_ = 0u;
  mastertotal_ = 0u;
  mastertimes_ = 0u;
  slavenum_ = 0u;
  mastergive_ = 0u;
  beginnernum_ = 0u;
  formalnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMatrixInfo::~PBMatrixInfo() {
  SharedDtor();
}

void PBMatrixInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBMatrixInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMatrixInfo_descriptor_;
}

const PBMatrixInfo& PBMatrixInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBMatrixInfo* PBMatrixInfo::default_instance_ = NULL;

PBMatrixInfo* PBMatrixInfo::New() const {
  return new PBMatrixInfo;
}

void PBMatrixInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    slavepoint_ = 0u;
    masterpoint_ = 0u;
    slavetotal_ = 0u;
    mastertotal_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mastertimes_ = 0u;
    slavenum_ = 0u;
    mastergive_ = 0u;
    beginnernum_ = 0u;
    formalnum_ = 0u;
  }
  masterid_.Clear();
  slaveid_.Clear();
  slavevalue_.Clear();
  masterpercent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMatrixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 MasterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masterid(value);
        if (input->ExpectTag(8)) goto parse_MasterID;
        if (input->ExpectTag(16)) goto parse_SlaveID;
        break;
      }
      
      // repeated uint32 SlaveID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slaveid(value);
        if (input->ExpectTag(16)) goto parse_SlaveID;
        if (input->ExpectTag(24)) goto parse_SlaveValue;
        break;
      }
      
      // repeated uint32 SlaveValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slavevalue(value);
        if (input->ExpectTag(24)) goto parse_SlaveValue;
        if (input->ExpectTag(32)) goto parse_SlavePoint;
        break;
      }
      
      // optional uint32 SlavePoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlavePoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavepoint_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MasterPoint;
        break;
      }
      
      // optional uint32 MasterPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterpoint_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SlaveTotal;
        break;
      }
      
      // optional uint32 SlaveTotal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavetotal_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_MasterTotal;
        break;
      }
      
      // optional uint32 MasterTotal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mastertotal_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_MasterPercent;
        break;
      }
      
      // repeated uint32 MasterPercent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterPercent:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masterpercent(value);
        if (input->ExpectTag(64)) goto parse_MasterPercent;
        if (input->ExpectTag(72)) goto parse_MasterTimes;
        break;
      }
      
      // optional uint32 MasterTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mastertimes_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_SlaveNum;
        break;
      }
      
      // optional uint32 SlaveNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavenum_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_MasterGive;
        break;
      }
      
      // optional uint32 MasterGive = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterGive:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mastergive_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_BeginnerNum;
        break;
      }
      
      // optional uint32 BeginnerNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeginnerNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beginnernum_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_FormalNum;
        break;
      }
      
      // optional uint32 FormalNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FormalNum:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &formalnum_));
        _set_bit(12);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMatrixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBMatrixInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 MasterID = 1;
  for (int i = 0; i < this->masterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->masterid(i), output);
  }
  
  // repeated uint32 SlaveID = 2;
  for (int i = 0; i < this->slaveid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->slaveid(i), output);
  }
  
  // repeated uint32 SlaveValue = 3;
  for (int i = 0; i < this->slavevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->slavevalue(i), output);
  }
  
  // optional uint32 SlavePoint = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->slavepoint(), output);
  }
  
  // optional uint32 MasterPoint = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->masterpoint(), output);
  }
  
  // optional uint32 SlaveTotal = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->slavetotal(), output);
  }
  
  // optional uint32 MasterTotal = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->mastertotal(), output);
  }
  
  // repeated uint32 MasterPercent = 8;
  for (int i = 0; i < this->masterpercent_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->masterpercent(i), output);
  }
  
  // optional uint32 MasterTimes = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->mastertimes(), output);
  }
  
  // optional uint32 SlaveNum = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->slavenum(), output);
  }
  
  // optional uint32 MasterGive = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->mastergive(), output);
  }
  
  // optional uint32 BeginnerNum = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->beginnernum(), output);
  }
  
  // optional uint32 FormalNum = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->formalnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMatrixInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 MasterID = 1;
  for (int i = 0; i < this->masterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->masterid(i), target);
  }
  
  // repeated uint32 SlaveID = 2;
  for (int i = 0; i < this->slaveid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->slaveid(i), target);
  }
  
  // repeated uint32 SlaveValue = 3;
  for (int i = 0; i < this->slavevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->slavevalue(i), target);
  }
  
  // optional uint32 SlavePoint = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->slavepoint(), target);
  }
  
  // optional uint32 MasterPoint = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->masterpoint(), target);
  }
  
  // optional uint32 SlaveTotal = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->slavetotal(), target);
  }
  
  // optional uint32 MasterTotal = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->mastertotal(), target);
  }
  
  // repeated uint32 MasterPercent = 8;
  for (int i = 0; i < this->masterpercent_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->masterpercent(i), target);
  }
  
  // optional uint32 MasterTimes = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->mastertimes(), target);
  }
  
  // optional uint32 SlaveNum = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->slavenum(), target);
  }
  
  // optional uint32 MasterGive = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->mastergive(), target);
  }
  
  // optional uint32 BeginnerNum = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->beginnernum(), target);
  }
  
  // optional uint32 FormalNum = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->formalnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMatrixInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 SlavePoint = 4;
    if (has_slavepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavepoint());
    }
    
    // optional uint32 MasterPoint = 5;
    if (has_masterpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterpoint());
    }
    
    // optional uint32 SlaveTotal = 6;
    if (has_slavetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavetotal());
    }
    
    // optional uint32 MasterTotal = 7;
    if (has_mastertotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mastertotal());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MasterTimes = 9;
    if (has_mastertimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mastertimes());
    }
    
    // optional uint32 SlaveNum = 10;
    if (has_slavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavenum());
    }
    
    // optional uint32 MasterGive = 11;
    if (has_mastergive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mastergive());
    }
    
    // optional uint32 BeginnerNum = 12;
    if (has_beginnernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beginnernum());
    }
    
    // optional uint32 FormalNum = 13;
    if (has_formalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->formalnum());
    }
    
  }
  // repeated uint32 MasterID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->masterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masterid(i));
    }
    total_size += 1 * this->masterid_size() + data_size;
  }
  
  // repeated uint32 SlaveID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->slaveid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slaveid(i));
    }
    total_size += 1 * this->slaveid_size() + data_size;
  }
  
  // repeated uint32 SlaveValue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slavevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slavevalue(i));
    }
    total_size += 1 * this->slavevalue_size() + data_size;
  }
  
  // repeated uint32 MasterPercent = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->masterpercent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masterpercent(i));
    }
    total_size += 1 * this->masterpercent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBMatrixInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMatrixInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMatrixInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMatrixInfo::MergeFrom(const PBMatrixInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  masterid_.MergeFrom(from.masterid_);
  slaveid_.MergeFrom(from.slaveid_);
  slavevalue_.MergeFrom(from.slavevalue_);
  masterpercent_.MergeFrom(from.masterpercent_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from._has_bit(3)) {
      set_slavepoint(from.slavepoint());
    }
    if (from._has_bit(4)) {
      set_masterpoint(from.masterpoint());
    }
    if (from._has_bit(5)) {
      set_slavetotal(from.slavetotal());
    }
    if (from._has_bit(6)) {
      set_mastertotal(from.mastertotal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_mastertimes(from.mastertimes());
    }
    if (from._has_bit(9)) {
      set_slavenum(from.slavenum());
    }
    if (from._has_bit(10)) {
      set_mastergive(from.mastergive());
    }
    if (from._has_bit(11)) {
      set_beginnernum(from.beginnernum());
    }
    if (from._has_bit(12)) {
      set_formalnum(from.formalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMatrixInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatrixInfo::CopyFrom(const PBMatrixInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatrixInfo::Swap(PBMatrixInfo* other) {
  if (other != this) {
    masterid_.Swap(&other->masterid_);
    slaveid_.Swap(&other->slaveid_);
    slavevalue_.Swap(&other->slavevalue_);
    std::swap(slavepoint_, other->slavepoint_);
    std::swap(masterpoint_, other->masterpoint_);
    std::swap(slavetotal_, other->slavetotal_);
    std::swap(mastertotal_, other->mastertotal_);
    masterpercent_.Swap(&other->masterpercent_);
    std::swap(mastertimes_, other->mastertimes_);
    std::swap(slavenum_, other->slavenum_);
    std::swap(mastergive_, other->mastergive_);
    std::swap(beginnernum_, other->beginnernum_);
    std::swap(formalnum_, other->formalnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBMatrixInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBMatrixInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBMatrixInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBMatrixInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBCharm::kCharmValueFieldNumber;
const int PBCharm::kWeekIncCharmFieldNumber;
const int PBCharm::kLastWeekIncCharmFieldNumber;
#endif  // !_MSC_VER

PBCharm::PBCharm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCharm::InitAsDefaultInstance() {}

PBCharm::PBCharm(const PBCharm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCharm::SharedCtor() {
  _cached_size_ = 0;
  charmvalue_ = 0u;
  weekinccharm_ = 0u;
  lastweekinccharm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCharm::~PBCharm() {
  SharedDtor();
}

void PBCharm::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBCharm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCharm_descriptor_;
}

const PBCharm& PBCharm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBCharm* PBCharm::default_instance_ = NULL;

PBCharm* PBCharm::New() const {
  return new PBCharm;
}

void PBCharm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charmvalue_ = 0u;
    weekinccharm_ = 0u;
    lastweekinccharm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCharm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharmValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charmvalue_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_WeekIncCharm;
        break;
      }
      
      // optional uint32 WeekIncCharm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WeekIncCharm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &weekinccharm_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_LastWeekIncCharm;
        break;
      }
      
      // optional uint32 LastWeekIncCharm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LastWeekIncCharm:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &lastweekinccharm_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCharm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBCharm::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharmValue = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charmvalue(), output);
  }
  
  // optional uint32 WeekIncCharm = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->weekinccharm(), output);
  }
  
  // optional uint32 LastWeekIncCharm = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->lastweekinccharm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCharm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharmValue = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charmvalue(), target);
  }
  
  // optional uint32 WeekIncCharm = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->weekinccharm(), target);
  }
  
  // optional uint32 LastWeekIncCharm = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->lastweekinccharm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCharm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharmValue = 1;
    if (has_charmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charmvalue());
    }
    
    // optional uint32 WeekIncCharm = 2;
    if (has_weekinccharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->weekinccharm());
    }
    
    // optional uint32 LastWeekIncCharm = 3;
    if (has_lastweekinccharm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->lastweekinccharm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBCharm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCharm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCharm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCharm::MergeFrom(const PBCharm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charmvalue(from.charmvalue());
    }
    if (from._has_bit(1)) {
      set_weekinccharm(from.weekinccharm());
    }
    if (from._has_bit(2)) {
      set_lastweekinccharm(from.lastweekinccharm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCharm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCharm::CopyFrom(const PBCharm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCharm::Swap(PBCharm* other) {
  if (other != this) {
    std::swap(charmvalue_, other->charmvalue_);
    std::swap(weekinccharm_, other->weekinccharm_);
    std::swap(lastweekinccharm_, other->lastweekinccharm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBCharm::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBCharm::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBCharm::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBCharm_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBGuideData::kLevelBakFieldNumber;
const int PBGuideData::kExpBakFieldNumber;
const int PBGuideData::kHonorBakFieldNumber;
const int PBGuideData::kAchiveBakFieldNumber;
const int PBGuideData::kKillBakFieldNumber;
#endif  // !_MSC_VER

PBGuideData::PBGuideData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGuideData::InitAsDefaultInstance() {}

PBGuideData::PBGuideData(const PBGuideData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGuideData::SharedCtor() {
  _cached_size_ = 0;
  levelbak_ = 0u;
  expbak_ = 0u;
  honorbak_ = 0u;
  achivebak_ = 0u;
  killbak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGuideData::~PBGuideData() {
  SharedDtor();
}

void PBGuideData::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBGuideData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGuideData_descriptor_;
}

const PBGuideData& PBGuideData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBGuideData* PBGuideData::default_instance_ = NULL;

PBGuideData* PBGuideData::New() const {
  return new PBGuideData;
}

void PBGuideData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelbak_ = 0u;
    expbak_ = 0u;
    honorbak_ = 0u;
    achivebak_ = 0u;
    killbak_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGuideData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 LevelBak = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &levelbak_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ExpBak;
        break;
      }
      
      // optional uint32 ExpBak = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExpBak:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &expbak_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_HonorBak;
        break;
      }
      
      // optional uint32 HonorBak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_HonorBak:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &honorbak_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AchiveBak;
        break;
      }
      
      // optional uint32 AchiveBak = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AchiveBak:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &achivebak_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_KillBak;
        break;
      }
      
      // optional uint32 KillBak = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_KillBak:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killbak_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGuideData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBGuideData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 LevelBak = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->levelbak(), output);
  }
  
  // optional uint32 ExpBak = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->expbak(), output);
  }
  
  // optional uint32 HonorBak = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->honorbak(), output);
  }
  
  // optional uint32 AchiveBak = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->achivebak(), output);
  }
  
  // optional uint32 KillBak = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->killbak(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGuideData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 LevelBak = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->levelbak(), target);
  }
  
  // optional uint32 ExpBak = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->expbak(), target);
  }
  
  // optional uint32 HonorBak = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->honorbak(), target);
  }
  
  // optional uint32 AchiveBak = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->achivebak(), target);
  }
  
  // optional uint32 KillBak = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->killbak(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGuideData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LevelBak = 1;
    if (has_levelbak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->levelbak());
    }
    
    // optional uint32 ExpBak = 2;
    if (has_expbak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->expbak());
    }
    
    // optional uint32 HonorBak = 3;
    if (has_honorbak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->honorbak());
    }
    
    // optional uint32 AchiveBak = 4;
    if (has_achivebak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->achivebak());
    }
    
    // optional uint32 KillBak = 5;
    if (has_killbak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killbak());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBGuideData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGuideData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGuideData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGuideData::MergeFrom(const PBGuideData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_levelbak(from.levelbak());
    }
    if (from._has_bit(1)) {
      set_expbak(from.expbak());
    }
    if (from._has_bit(2)) {
      set_honorbak(from.honorbak());
    }
    if (from._has_bit(3)) {
      set_achivebak(from.achivebak());
    }
    if (from._has_bit(4)) {
      set_killbak(from.killbak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGuideData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGuideData::CopyFrom(const PBGuideData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGuideData::Swap(PBGuideData* other) {
  if (other != this) {
    std::swap(levelbak_, other->levelbak_);
    std::swap(expbak_, other->expbak_);
    std::swap(honorbak_, other->honorbak_);
    std::swap(achivebak_, other->achivebak_);
    std::swap(killbak_, other->killbak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBGuideData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBGuideData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBGuideData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBGuideData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSingleTimes::kKeyFieldNumber;
const int PBSingleTimes::kValueFieldNumber;
#endif  // !_MSC_VER

PBSingleTimes::PBSingleTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSingleTimes::InitAsDefaultInstance() {}

PBSingleTimes::PBSingleTimes(const PBSingleTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSingleTimes::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSingleTimes::~PBSingleTimes() {
  SharedDtor();
}

void PBSingleTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSingleTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSingleTimes_descriptor_;
}

const PBSingleTimes& PBSingleTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSingleTimes* PBSingleTimes::default_instance_ = NULL;

PBSingleTimes* PBSingleTimes::New() const {
  return new PBSingleTimes;
}

void PBSingleTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSingleTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &key_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSingleTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSingleTimes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->key(), output);
  }
  
  // optional uint32 Value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSingleTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // optional uint32 Value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSingleTimes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->key());
    }
    
    // optional uint32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSingleTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSingleTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSingleTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSingleTimes::MergeFrom(const PBSingleTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSingleTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleTimes::CopyFrom(const PBSingleTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSingleTimes::Swap(PBSingleTimes* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSingleTimes::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSingleTimes::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSingleTimes::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSingleTimes_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTimes::kTimesinfoFieldNumber;
#endif  // !_MSC_VER

PBTimes::PBTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTimes::InitAsDefaultInstance() {}

PBTimes::PBTimes(const PBTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTimes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTimes::~PBTimes() {
  SharedDtor();
}

void PBTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTimes_descriptor_;
}

const PBTimes& PBTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTimes* PBTimes::default_instance_ = NULL;

PBTimes* PBTimes::New() const {
  return new PBTimes;
}

void PBTimes::Clear() {
  timesinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSingleTimes timesinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_timesinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_timesinfo()));
        if (input->ExpectTag(10)) goto parse_timesinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTimes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSingleTimes timesinfo = 1;
  for (int i = 0; i < this->timesinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->timesinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSingleTimes timesinfo = 1;
  for (int i = 0; i < this->timesinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->timesinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTimes::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSingleTimes timesinfo = 1;
  total_size += 1 * this->timesinfo_size();
  for (int i = 0; i < this->timesinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->timesinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTimes::MergeFrom(const PBTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  timesinfo_.MergeFrom(from.timesinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTimes::CopyFrom(const PBTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTimes::Swap(PBTimes* other) {
  if (other != this) {
    timesinfo_.Swap(&other->timesinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTimes::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTimes::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTimes::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTimes_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTreasureBowlItem::kItemIDFieldNumber;
const int PBTreasureBowlItem::kUsedTimesFieldNumber;
#endif  // !_MSC_VER

PBTreasureBowlItem::PBTreasureBowlItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTreasureBowlItem::InitAsDefaultInstance() {}

PBTreasureBowlItem::PBTreasureBowlItem(const PBTreasureBowlItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTreasureBowlItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  usedtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTreasureBowlItem::~PBTreasureBowlItem() {
  SharedDtor();
}

void PBTreasureBowlItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTreasureBowlItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTreasureBowlItem_descriptor_;
}

const PBTreasureBowlItem& PBTreasureBowlItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTreasureBowlItem* PBTreasureBowlItem::default_instance_ = NULL;

PBTreasureBowlItem* PBTreasureBowlItem::New() const {
  return new PBTreasureBowlItem;
}

void PBTreasureBowlItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    usedtimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTreasureBowlItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &itemid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_UsedTimes;
        break;
      }
      
      // optional uint32 UsedTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UsedTimes:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &usedtimes_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTreasureBowlItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTreasureBowlItem::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 UsedTimes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->usedtimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTreasureBowlItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ItemID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 UsedTimes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->usedtimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTreasureBowlItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 UsedTimes = 2;
    if (has_usedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->usedtimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTreasureBowlItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTreasureBowlItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTreasureBowlItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTreasureBowlItem::MergeFrom(const PBTreasureBowlItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_itemid(from.itemid());
    }
    if (from._has_bit(1)) {
      set_usedtimes(from.usedtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTreasureBowlItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTreasureBowlItem::CopyFrom(const PBTreasureBowlItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTreasureBowlItem::Swap(PBTreasureBowlItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(usedtimes_, other->usedtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTreasureBowlItem::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTreasureBowlItem::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTreasureBowlItem::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTreasureBowlItem_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBTreasureBowl::kTotalNumFieldNumber;
const int PBTreasureBowl::kExchangeTimeFieldNumber;
const int PBTreasureBowl::kTreasureBowlItemFieldNumber;
#endif  // !_MSC_VER

PBTreasureBowl::PBTreasureBowl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTreasureBowl::InitAsDefaultInstance() {}

PBTreasureBowl::PBTreasureBowl(const PBTreasureBowl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTreasureBowl::SharedCtor() {
  _cached_size_ = 0;
  totalnum_ = 0u;
  exchangetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTreasureBowl::~PBTreasureBowl() {
  SharedDtor();
}

void PBTreasureBowl::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBTreasureBowl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTreasureBowl_descriptor_;
}

const PBTreasureBowl& PBTreasureBowl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBTreasureBowl* PBTreasureBowl::default_instance_ = NULL;

PBTreasureBowl* PBTreasureBowl::New() const {
  return new PBTreasureBowl;
}

void PBTreasureBowl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalnum_ = 0u;
    exchangetime_ = 0u;
  }
  treasurebowlitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTreasureBowl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 TotalNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &totalnum_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ExchangeTime;
        break;
      }
      
      // optional uint32 ExchangeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ExchangeTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exchangetime_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_TreasureBowlItem;
        break;
      }
      
      // repeated .PBTreasureBowlItem TreasureBowlItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_TreasureBowlItem:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_treasurebowlitem()));
        if (input->ExpectTag(26)) goto parse_TreasureBowlItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTreasureBowl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBTreasureBowl::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 TotalNum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->totalnum(), output);
  }
  
  // optional uint32 ExchangeTime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->exchangetime(), output);
  }
  
  // repeated .PBTreasureBowlItem TreasureBowlItem = 3;
  for (int i = 0; i < this->treasurebowlitem_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->treasurebowlitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTreasureBowl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 TotalNum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->totalnum(), target);
  }
  
  // optional uint32 ExchangeTime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->exchangetime(), target);
  }
  
  // repeated .PBTreasureBowlItem TreasureBowlItem = 3;
  for (int i = 0; i < this->treasurebowlitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->treasurebowlitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTreasureBowl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalNum = 1;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->totalnum());
    }
    
    // optional uint32 ExchangeTime = 2;
    if (has_exchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exchangetime());
    }
    
  }
  // repeated .PBTreasureBowlItem TreasureBowlItem = 3;
  total_size += 1 * this->treasurebowlitem_size();
  for (int i = 0; i < this->treasurebowlitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->treasurebowlitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBTreasureBowl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTreasureBowl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTreasureBowl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTreasureBowl::MergeFrom(const PBTreasureBowl& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasurebowlitem_.MergeFrom(from.treasurebowlitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_totalnum(from.totalnum());
    }
    if (from._has_bit(1)) {
      set_exchangetime(from.exchangetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTreasureBowl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTreasureBowl::CopyFrom(const PBTreasureBowl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTreasureBowl::Swap(PBTreasureBowl* other) {
  if (other != this) {
    std::swap(totalnum_, other->totalnum_);
    std::swap(exchangetime_, other->exchangetime_);
    treasurebowlitem_.Swap(&other->treasurebowlitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBTreasureBowl::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBTreasureBowl::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBTreasureBowl::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBTreasureBowl_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetDataToClient::kRepetIndexFieldNumber;
const int PBRepetDataToClient::kRepetDataFieldNumber;
#endif  // !_MSC_VER

PBRepetDataToClient::PBRepetDataToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetDataToClient::InitAsDefaultInstance() {}

PBRepetDataToClient::PBRepetDataToClient(const PBRepetDataToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetDataToClient::SharedCtor() {
  _cached_size_ = 0;
  repetindex_ = 0u;
  repetdata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetDataToClient::~PBRepetDataToClient() {
  SharedDtor();
}

void PBRepetDataToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetDataToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetDataToClient_descriptor_;
}

const PBRepetDataToClient& PBRepetDataToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetDataToClient* PBRepetDataToClient::default_instance_ = NULL;

PBRepetDataToClient* PBRepetDataToClient::New() const {
  return new PBRepetDataToClient;
}

void PBRepetDataToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repetindex_ = 0u;
    repetdata_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetDataToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RepetIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetindex_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_RepetData;
        break;
      }
      
      // optional uint32 RepetData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RepetData:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &repetdata_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetDataToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetDataToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RepetIndex = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->repetindex(), output);
  }
  
  // optional uint32 RepetData = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->repetdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetDataToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RepetIndex = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->repetindex(), target);
  }
  
  // optional uint32 RepetData = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->repetdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetDataToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RepetIndex = 1;
    if (has_repetindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetindex());
    }
    
    // optional uint32 RepetData = 2;
    if (has_repetdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->repetdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetDataToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetDataToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetDataToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetDataToClient::MergeFrom(const PBRepetDataToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_repetindex(from.repetindex());
    }
    if (from._has_bit(1)) {
      set_repetdata(from.repetdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetDataToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetDataToClient::CopyFrom(const PBRepetDataToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetDataToClient::Swap(PBRepetDataToClient* other) {
  if (other != this) {
    std::swap(repetindex_, other->repetindex_);
    std::swap(repetdata_, other->repetdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetDataToClient::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetDataToClient::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetDataToClient::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetDataToClient_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBRepetDataList::kRepetDataToClientFieldNumber;
#endif  // !_MSC_VER

PBRepetDataList::PBRepetDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRepetDataList::InitAsDefaultInstance() {}

PBRepetDataList::PBRepetDataList(const PBRepetDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRepetDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRepetDataList::~PBRepetDataList() {
  SharedDtor();
}

void PBRepetDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBRepetDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRepetDataList_descriptor_;
}

const PBRepetDataList& PBRepetDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBRepetDataList* PBRepetDataList::default_instance_ = NULL;

PBRepetDataList* PBRepetDataList::New() const {
  return new PBRepetDataList;
}

void PBRepetDataList::Clear() {
  repetdatatoclient_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRepetDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBRepetDataToClient RepetDataToClient = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RepetDataToClient:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_repetdatatoclient()));
        if (input->ExpectTag(10)) goto parse_RepetDataToClient;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRepetDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBRepetDataList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBRepetDataToClient RepetDataToClient = 1;
  for (int i = 0; i < this->repetdatatoclient_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->repetdatatoclient(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRepetDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRepetDataToClient RepetDataToClient = 1;
  for (int i = 0; i < this->repetdatatoclient_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->repetdatatoclient(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRepetDataList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBRepetDataToClient RepetDataToClient = 1;
  total_size += 1 * this->repetdatatoclient_size();
  for (int i = 0; i < this->repetdatatoclient_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->repetdatatoclient(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBRepetDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRepetDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRepetDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRepetDataList::MergeFrom(const PBRepetDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  repetdatatoclient_.MergeFrom(from.repetdatatoclient_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRepetDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetDataList::CopyFrom(const PBRepetDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRepetDataList::Swap(PBRepetDataList* other) {
  if (other != this) {
    repetdatatoclient_.Swap(&other->repetdatatoclient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBRepetDataList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBRepetDataList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBRepetDataList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBRepetDataList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSwornMember::kRoleIDFieldNumber;
const int PBSwornMember::kTeamPosFieldNumber;
#endif  // !_MSC_VER

PBSwornMember::PBSwornMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSwornMember::InitAsDefaultInstance() {}

PBSwornMember::PBSwornMember(const PBSwornMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSwornMember::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  teampos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSwornMember::~PBSwornMember() {
  SharedDtor();
}

void PBSwornMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSwornMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSwornMember_descriptor_;
}

const PBSwornMember& PBSwornMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSwornMember* PBSwornMember::default_instance_ = NULL;

PBSwornMember* PBSwornMember::New() const {
  return new PBSwornMember;
}

void PBSwornMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    teampos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSwornMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_TeamPos;
        break;
      }
      
      // optional uint32 TeamPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TeamPos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &teampos_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSwornMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSwornMember::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 TeamPos = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->teampos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSwornMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 TeamPos = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->teampos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSwornMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 TeamPos = 2;
    if (has_teampos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->teampos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSwornMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSwornMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSwornMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSwornMember::MergeFrom(const PBSwornMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_teampos(from.teampos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSwornMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSwornMember::CopyFrom(const PBSwornMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSwornMember::Swap(PBSwornMember* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(teampos_, other->teampos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSwornMember::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSwornMember::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSwornMember::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSwornMember_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int PBSwornTeam::kSwornMemberFieldNumber;
#endif  // !_MSC_VER

PBSwornTeam::PBSwornTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSwornTeam::InitAsDefaultInstance() {}

PBSwornTeam::PBSwornTeam(const PBSwornTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSwornTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSwornTeam::~PBSwornTeam() {
  SharedDtor();
}

void PBSwornTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PBSwornTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSwornTeam_descriptor_;
}

const PBSwornTeam& PBSwornTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fpb_2ehxx();  return *default_instance_;
}

PBSwornTeam* PBSwornTeam::default_instance_ = NULL;

PBSwornTeam* PBSwornTeam::New() const {
  return new PBSwornTeam;
}

void PBSwornTeam::Clear() {
  swornmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSwornTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .PBSwornMember SwornMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornMember:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_swornmember()));
        if (input->ExpectTag(10)) goto parse_SwornMember;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSwornTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PBSwornTeam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .PBSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->swornmember(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSwornTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->swornmember(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSwornTeam::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSwornMember SwornMember = 1;
  total_size += 1 * this->swornmember_size();
  for (int i = 0; i < this->swornmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->swornmember(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PBSwornTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSwornTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSwornTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSwornTeam::MergeFrom(const PBSwornTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  swornmember_.MergeFrom(from.swornmember_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSwornTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSwornTeam::CopyFrom(const PBSwornTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSwornTeam::Swap(PBSwornTeam* other) {
  if (other != this) {
    swornmember_.Swap(&other->swornmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PBSwornTeam::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* PBSwornTeam::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PBSwornTeam::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PBSwornTeam_reflection_;
}
