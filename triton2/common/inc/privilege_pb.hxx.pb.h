// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_privilege_5fpb_2ehxx__INCLUDED
#define PROTOBUF_privilege_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_privilege_5fpb_2ehxx();
void protobuf_AssignDesc_privilege_5fpb_2ehxx();
void protobuf_ShutdownFile_privilege_5fpb_2ehxx();

class PBByteMsg;
class PBValue;
class PBAttrValue;
class CMessageUserPrivilegeNotify;
class CMessageExecPrivilegeRequest;
class CMessageExecPrivilegeResponse;
class CMessageResultSetResponse;

enum EM_GMONLINE_MSG_ID {
  ID_G2C_NOTIFY_PRIVILEGE = 16384,
  ID_C2G_REQUEST_PRIVILEGE = 16385,
  ID_G2C_RESPONSE_PRIVILEGE = 16386,
  ID_G2C_RESULTSET_RESPONSE = 16401
};
const ::google::protobuf::EnumDescriptor* EM_GMONLINE_MSG_ID_descriptor();
bool EM_GMONLINE_MSG_ID_IsValid(int value);
const EM_GMONLINE_MSG_ID EM_GMONLINE_MSG_ID_MIN = ID_G2C_NOTIFY_PRIVILEGE;
const EM_GMONLINE_MSG_ID EM_GMONLINE_MSG_ID_MAX = ID_G2C_RESULTSET_RESPONSE;

inline const ::std::string& EM_GMONLINE_MSG_ID_Name(EM_GMONLINE_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EM_GMONLINE_MSG_ID_descriptor(), value);
}
inline bool EM_GMONLINE_MSG_ID_Parse(
    const ::std::string& name, EM_GMONLINE_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EM_GMONLINE_MSG_ID>(
    EM_GMONLINE_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class PBByteMsg : public ::google::protobuf::Message {
 public:
  PBByteMsg();
  virtual ~PBByteMsg();
  
  PBByteMsg(const PBByteMsg& from);
  
  inline PBByteMsg& operator=(const PBByteMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBByteMsg& default_instance();
  void Swap(PBByteMsg* other);
  
  // implements Message ----------------------------------------------
  
  PBByteMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBByteMsg& from);
  void MergeFrom(const PBByteMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional bytes Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 id_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBByteMsg* default_instance_;
};
// -------------------------------------------------------------------

class PBValue : public ::google::protobuf::Message {
 public:
  PBValue();
  virtual ~PBValue();
  
  PBValue(const PBValue& from);
  
  inline PBValue& operator=(const PBValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBValue& default_instance();
  void Swap(PBValue* other);
  
  // implements Message ----------------------------------------------
  
  PBValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBValue& from);
  void MergeFrom(const PBValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ValueType = 1;
  inline bool has_valuetype() const;
  inline void clear_valuetype();
  static const int kValueTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 valuetype() const;
  inline void set_valuetype(::google::protobuf::uint32 value);
  
  // optional uint32 UInt32Value = 2;
  inline bool has_uint32value() const;
  inline void clear_uint32value();
  static const int kUInt32ValueFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32value() const;
  inline void set_uint32value(::google::protobuf::uint32 value);
  
  // optional uint64 UInt64Value = 3;
  inline bool has_uint64value() const;
  inline void clear_uint64value();
  static const int kUInt64ValueFieldNumber = 3;
  inline ::google::protobuf::uint64 uint64value() const;
  inline void set_uint64value(::google::protobuf::uint64 value);
  
  // optional int32 Int32Value = 4;
  inline bool has_int32value() const;
  inline void clear_int32value();
  static const int kInt32ValueFieldNumber = 4;
  inline ::google::protobuf::int32 int32value() const;
  inline void set_int32value(::google::protobuf::int32 value);
  
  // optional int64 Int64Value = 5;
  inline bool has_int64value() const;
  inline void clear_int64value();
  static const int kInt64ValueFieldNumber = 5;
  inline ::google::protobuf::int64 int64value() const;
  inline void set_int64value(::google::protobuf::int64 value);
  
  // optional float FloatValue = 6;
  inline bool has_floatvalue() const;
  inline void clear_floatvalue();
  static const int kFloatValueFieldNumber = 6;
  inline float floatvalue() const;
  inline void set_floatvalue(float value);
  
  // optional double DoubleValue = 7;
  inline bool has_doublevalue() const;
  inline void clear_doublevalue();
  static const int kDoubleValueFieldNumber = 7;
  inline double doublevalue() const;
  inline void set_doublevalue(double value);
  
  // optional string StringValue = 8;
  inline bool has_stringvalue() const;
  inline void clear_stringvalue();
  static const int kStringValueFieldNumber = 8;
  inline const ::std::string& stringvalue() const;
  inline void set_stringvalue(const ::std::string& value);
  inline void set_stringvalue(const char* value);
  inline void set_stringvalue(const char* value, size_t size);
  inline ::std::string* mutable_stringvalue();
  
  // optional .PBByteMsg MsgValue = 9;
  inline bool has_msgvalue() const;
  inline void clear_msgvalue();
  static const int kMsgValueFieldNumber = 9;
  inline const ::PBByteMsg& msgvalue() const;
  inline ::PBByteMsg* mutable_msgvalue();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 valuetype_;
  ::google::protobuf::uint32 uint32value_;
  ::google::protobuf::uint64 uint64value_;
  ::google::protobuf::int32 int32value_;
  ::google::protobuf::int64 int64value_;
  float floatvalue_;
  double doublevalue_;
  ::std::string* stringvalue_;
  static const ::std::string _default_stringvalue_;
  ::PBByteMsg* msgvalue_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBValue* default_instance_;
};
// -------------------------------------------------------------------

class PBAttrValue : public ::google::protobuf::Message {
 public:
  PBAttrValue();
  virtual ~PBAttrValue();
  
  PBAttrValue(const PBAttrValue& from);
  
  inline PBAttrValue& operator=(const PBAttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAttrValue& default_instance();
  void Swap(PBAttrValue* other);
  
  // implements Message ----------------------------------------------
  
  PBAttrValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAttrValue& from);
  void MergeFrom(const PBAttrValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .PBValue Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::PBValue& value() const;
  inline ::PBValue* mutable_value();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 id_;
  ::PBValue* value_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PBAttrValue* default_instance_;
};
// -------------------------------------------------------------------

class CMessageUserPrivilegeNotify : public ::google::protobuf::Message {
 public:
  CMessageUserPrivilegeNotify();
  virtual ~CMessageUserPrivilegeNotify();
  
  CMessageUserPrivilegeNotify(const CMessageUserPrivilegeNotify& from);
  
  inline CMessageUserPrivilegeNotify& operator=(const CMessageUserPrivilegeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageUserPrivilegeNotify& default_instance();
  void Swap(CMessageUserPrivilegeNotify* other);
  
  // implements Message ----------------------------------------------
  
  CMessageUserPrivilegeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageUserPrivilegeNotify& from);
  void MergeFrom(const CMessageUserPrivilegeNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 UserID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // repeated uint32 Privileges = 2;
  inline int privileges_size() const;
  inline void clear_privileges();
  static const int kPrivilegesFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& privileges() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_privileges();
  inline ::google::protobuf::uint32 privileges(int index) const;
  inline void set_privileges(int index, ::google::protobuf::uint32 value);
  inline void add_privileges(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > privileges_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageUserPrivilegeNotify* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExecPrivilegeRequest : public ::google::protobuf::Message {
 public:
  CMessageExecPrivilegeRequest();
  virtual ~CMessageExecPrivilegeRequest();
  
  CMessageExecPrivilegeRequest(const CMessageExecPrivilegeRequest& from);
  
  inline CMessageExecPrivilegeRequest& operator=(const CMessageExecPrivilegeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExecPrivilegeRequest& default_instance();
  void Swap(CMessageExecPrivilegeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExecPrivilegeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExecPrivilegeRequest& from);
  void MergeFrom(const CMessageExecPrivilegeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 PrivID = 1;
  inline bool has_privid() const;
  inline void clear_privid();
  static const int kPrivIDFieldNumber = 1;
  inline ::google::protobuf::uint32 privid() const;
  inline void set_privid(::google::protobuf::uint32 value);
  
  // repeated .PBAttrValue InputParam = 2;
  inline int inputparam_size() const;
  inline void clear_inputparam();
  static const int kInputParamFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::PBAttrValue >& inputparam() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBAttrValue >* mutable_inputparam();
  inline const ::PBAttrValue& inputparam(int index) const;
  inline ::PBAttrValue* mutable_inputparam(int index);
  inline ::PBAttrValue* add_inputparam();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 privid_;
  ::google::protobuf::RepeatedPtrField< ::PBAttrValue > inputparam_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExecPrivilegeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageExecPrivilegeResponse : public ::google::protobuf::Message {
 public:
  CMessageExecPrivilegeResponse();
  virtual ~CMessageExecPrivilegeResponse();
  
  CMessageExecPrivilegeResponse(const CMessageExecPrivilegeResponse& from);
  
  inline CMessageExecPrivilegeResponse& operator=(const CMessageExecPrivilegeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageExecPrivilegeResponse& default_instance();
  void Swap(CMessageExecPrivilegeResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageExecPrivilegeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageExecPrivilegeResponse& from);
  void MergeFrom(const CMessageExecPrivilegeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 Error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required uint32 PrivID = 2;
  inline bool has_privid() const;
  inline void clear_privid();
  static const int kPrivIDFieldNumber = 2;
  inline ::google::protobuf::uint32 privid() const;
  inline void set_privid(::google::protobuf::uint32 value);
  
  // optional .PBByteMsg Proto = 3;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 3;
  inline const ::PBByteMsg& proto() const;
  inline ::PBByteMsg* mutable_proto();
  
  // optional string RoleName = 4;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 privid_;
  ::PBByteMsg* proto_;
  ::std::string* rolename_;
  static const ::std::string _default_rolename_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageExecPrivilegeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageResultSetResponse : public ::google::protobuf::Message {
 public:
  CMessageResultSetResponse();
  virtual ~CMessageResultSetResponse();
  
  CMessageResultSetResponse(const CMessageResultSetResponse& from);
  
  inline CMessageResultSetResponse& operator=(const CMessageResultSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageResultSetResponse& default_instance();
  void Swap(CMessageResultSetResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMessageResultSetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageResultSetResponse& from);
  void MergeFrom(const CMessageResultSetResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 RowCount = 1 [default = 0];
  inline bool has_rowcount() const;
  inline void clear_rowcount();
  static const int kRowCountFieldNumber = 1;
  inline ::google::protobuf::uint32 rowcount() const;
  inline void set_rowcount(::google::protobuf::uint32 value);
  
  // optional uint32 ColCount = 2 [default = 0];
  inline bool has_colcount() const;
  inline void clear_colcount();
  static const int kColCountFieldNumber = 2;
  inline ::google::protobuf::uint32 colcount() const;
  inline void set_colcount(::google::protobuf::uint32 value);
  
  // repeated bytes FieldValue = 3;
  inline int fieldvalue_size() const;
  inline void clear_fieldvalue();
  static const int kFieldValueFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fieldvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fieldvalue();
  inline const ::std::string& fieldvalue(int index) const;
  inline ::std::string* mutable_fieldvalue(int index);
  inline void set_fieldvalue(int index, const ::std::string& value);
  inline void set_fieldvalue(int index, const char* value);
  inline void set_fieldvalue(int index, const void* value, size_t size);
  inline ::std::string* add_fieldvalue();
  inline void add_fieldvalue(const ::std::string& value);
  inline void add_fieldvalue(const char* value);
  inline void add_fieldvalue(const void* value, size_t size);
  
  // repeated uint32 FieldValueLen = 4;
  inline int fieldvaluelen_size() const;
  inline void clear_fieldvaluelen();
  static const int kFieldValueLenFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& fieldvaluelen() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_fieldvaluelen();
  inline ::google::protobuf::uint32 fieldvaluelen(int index) const;
  inline void set_fieldvaluelen(int index, ::google::protobuf::uint32 value);
  inline void add_fieldvaluelen(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 rowcount_;
  ::google::protobuf::uint32 colcount_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fieldvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fieldvaluelen_;
  friend void  protobuf_AddDesc_privilege_5fpb_2ehxx();
  friend void protobuf_AssignDesc_privilege_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_privilege_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageResultSetResponse* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// PBByteMsg

// required uint32 ID = 1;
inline bool PBByteMsg::has_id() const {
  return _has_bit(0);
}
inline void PBByteMsg::clear_id() {
  id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBByteMsg::id() const {
  return id_;
}
inline void PBByteMsg::set_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  id_ = value;
}

// optional bytes Content = 2;
inline bool PBByteMsg::has_content() const {
  return _has_bit(1);
}
inline void PBByteMsg::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PBByteMsg::content() const {
  return *content_;
}
inline void PBByteMsg::set_content(const ::std::string& value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PBByteMsg::set_content(const char* value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PBByteMsg::set_content(const void* value, size_t size) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBByteMsg::mutable_content() {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// -------------------------------------------------------------------

// PBValue

// required uint32 ValueType = 1;
inline bool PBValue::has_valuetype() const {
  return _has_bit(0);
}
inline void PBValue::clear_valuetype() {
  valuetype_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBValue::valuetype() const {
  return valuetype_;
}
inline void PBValue::set_valuetype(::google::protobuf::uint32 value) {
  _set_bit(0);
  valuetype_ = value;
}

// optional uint32 UInt32Value = 2;
inline bool PBValue::has_uint32value() const {
  return _has_bit(1);
}
inline void PBValue::clear_uint32value() {
  uint32value_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 PBValue::uint32value() const {
  return uint32value_;
}
inline void PBValue::set_uint32value(::google::protobuf::uint32 value) {
  _set_bit(1);
  uint32value_ = value;
}

// optional uint64 UInt64Value = 3;
inline bool PBValue::has_uint64value() const {
  return _has_bit(2);
}
inline void PBValue::clear_uint64value() {
  uint64value_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 PBValue::uint64value() const {
  return uint64value_;
}
inline void PBValue::set_uint64value(::google::protobuf::uint64 value) {
  _set_bit(2);
  uint64value_ = value;
}

// optional int32 Int32Value = 4;
inline bool PBValue::has_int32value() const {
  return _has_bit(3);
}
inline void PBValue::clear_int32value() {
  int32value_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PBValue::int32value() const {
  return int32value_;
}
inline void PBValue::set_int32value(::google::protobuf::int32 value) {
  _set_bit(3);
  int32value_ = value;
}

// optional int64 Int64Value = 5;
inline bool PBValue::has_int64value() const {
  return _has_bit(4);
}
inline void PBValue::clear_int64value() {
  int64value_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 PBValue::int64value() const {
  return int64value_;
}
inline void PBValue::set_int64value(::google::protobuf::int64 value) {
  _set_bit(4);
  int64value_ = value;
}

// optional float FloatValue = 6;
inline bool PBValue::has_floatvalue() const {
  return _has_bit(5);
}
inline void PBValue::clear_floatvalue() {
  floatvalue_ = 0;
  _clear_bit(5);
}
inline float PBValue::floatvalue() const {
  return floatvalue_;
}
inline void PBValue::set_floatvalue(float value) {
  _set_bit(5);
  floatvalue_ = value;
}

// optional double DoubleValue = 7;
inline bool PBValue::has_doublevalue() const {
  return _has_bit(6);
}
inline void PBValue::clear_doublevalue() {
  doublevalue_ = 0;
  _clear_bit(6);
}
inline double PBValue::doublevalue() const {
  return doublevalue_;
}
inline void PBValue::set_doublevalue(double value) {
  _set_bit(6);
  doublevalue_ = value;
}

// optional string StringValue = 8;
inline bool PBValue::has_stringvalue() const {
  return _has_bit(7);
}
inline void PBValue::clear_stringvalue() {
  if (stringvalue_ != &_default_stringvalue_) {
    stringvalue_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& PBValue::stringvalue() const {
  return *stringvalue_;
}
inline void PBValue::set_stringvalue(const ::std::string& value) {
  _set_bit(7);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(value);
}
inline void PBValue::set_stringvalue(const char* value) {
  _set_bit(7);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(value);
}
inline void PBValue::set_stringvalue(const char* value, size_t size) {
  _set_bit(7);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBValue::mutable_stringvalue() {
  _set_bit(7);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  return stringvalue_;
}

// optional .PBByteMsg MsgValue = 9;
inline bool PBValue::has_msgvalue() const {
  return _has_bit(8);
}
inline void PBValue::clear_msgvalue() {
  if (msgvalue_ != NULL) msgvalue_->::PBByteMsg::Clear();
  _clear_bit(8);
}
inline const ::PBByteMsg& PBValue::msgvalue() const {
  return msgvalue_ != NULL ? *msgvalue_ : *default_instance_->msgvalue_;
}
inline ::PBByteMsg* PBValue::mutable_msgvalue() {
  _set_bit(8);
  if (msgvalue_ == NULL) msgvalue_ = new ::PBByteMsg;
  return msgvalue_;
}

// -------------------------------------------------------------------

// PBAttrValue

// required uint32 ID = 1;
inline bool PBAttrValue::has_id() const {
  return _has_bit(0);
}
inline void PBAttrValue::clear_id() {
  id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 PBAttrValue::id() const {
  return id_;
}
inline void PBAttrValue::set_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  id_ = value;
}

// required .PBValue Value = 2;
inline bool PBAttrValue::has_value() const {
  return _has_bit(1);
}
inline void PBAttrValue::clear_value() {
  if (value_ != NULL) value_->::PBValue::Clear();
  _clear_bit(1);
}
inline const ::PBValue& PBAttrValue::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::PBValue* PBAttrValue::mutable_value() {
  _set_bit(1);
  if (value_ == NULL) value_ = new ::PBValue;
  return value_;
}

// -------------------------------------------------------------------

// CMessageUserPrivilegeNotify

// required uint32 UserID = 1;
inline bool CMessageUserPrivilegeNotify::has_userid() const {
  return _has_bit(0);
}
inline void CMessageUserPrivilegeNotify::clear_userid() {
  userid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageUserPrivilegeNotify::userid() const {
  return userid_;
}
inline void CMessageUserPrivilegeNotify::set_userid(::google::protobuf::uint32 value) {
  _set_bit(0);
  userid_ = value;
}

// repeated uint32 Privileges = 2;
inline int CMessageUserPrivilegeNotify::privileges_size() const {
  return privileges_.size();
}
inline void CMessageUserPrivilegeNotify::clear_privileges() {
  privileges_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageUserPrivilegeNotify::privileges() const {
  return privileges_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageUserPrivilegeNotify::mutable_privileges() {
  return &privileges_;
}
inline ::google::protobuf::uint32 CMessageUserPrivilegeNotify::privileges(int index) const {
  return privileges_.Get(index);
}
inline void CMessageUserPrivilegeNotify::set_privileges(int index, ::google::protobuf::uint32 value) {
  privileges_.Set(index, value);
}
inline void CMessageUserPrivilegeNotify::add_privileges(::google::protobuf::uint32 value) {
  privileges_.Add(value);
}

// -------------------------------------------------------------------

// CMessageExecPrivilegeRequest

// required uint32 PrivID = 1;
inline bool CMessageExecPrivilegeRequest::has_privid() const {
  return _has_bit(0);
}
inline void CMessageExecPrivilegeRequest::clear_privid() {
  privid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageExecPrivilegeRequest::privid() const {
  return privid_;
}
inline void CMessageExecPrivilegeRequest::set_privid(::google::protobuf::uint32 value) {
  _set_bit(0);
  privid_ = value;
}

// repeated .PBAttrValue InputParam = 2;
inline int CMessageExecPrivilegeRequest::inputparam_size() const {
  return inputparam_.size();
}
inline void CMessageExecPrivilegeRequest::clear_inputparam() {
  inputparam_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBAttrValue >&
CMessageExecPrivilegeRequest::inputparam() const {
  return inputparam_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBAttrValue >*
CMessageExecPrivilegeRequest::mutable_inputparam() {
  return &inputparam_;
}
inline const ::PBAttrValue& CMessageExecPrivilegeRequest::inputparam(int index) const {
  return inputparam_.Get(index);
}
inline ::PBAttrValue* CMessageExecPrivilegeRequest::mutable_inputparam(int index) {
  return inputparam_.Mutable(index);
}
inline ::PBAttrValue* CMessageExecPrivilegeRequest::add_inputparam() {
  return inputparam_.Add();
}

// -------------------------------------------------------------------

// CMessageExecPrivilegeResponse

// required int32 Error = 1;
inline bool CMessageExecPrivilegeResponse::has_error() const {
  return _has_bit(0);
}
inline void CMessageExecPrivilegeResponse::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CMessageExecPrivilegeResponse::error() const {
  return error_;
}
inline void CMessageExecPrivilegeResponse::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required uint32 PrivID = 2;
inline bool CMessageExecPrivilegeResponse::has_privid() const {
  return _has_bit(1);
}
inline void CMessageExecPrivilegeResponse::clear_privid() {
  privid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageExecPrivilegeResponse::privid() const {
  return privid_;
}
inline void CMessageExecPrivilegeResponse::set_privid(::google::protobuf::uint32 value) {
  _set_bit(1);
  privid_ = value;
}

// optional .PBByteMsg Proto = 3;
inline bool CMessageExecPrivilegeResponse::has_proto() const {
  return _has_bit(2);
}
inline void CMessageExecPrivilegeResponse::clear_proto() {
  if (proto_ != NULL) proto_->::PBByteMsg::Clear();
  _clear_bit(2);
}
inline const ::PBByteMsg& CMessageExecPrivilegeResponse::proto() const {
  return proto_ != NULL ? *proto_ : *default_instance_->proto_;
}
inline ::PBByteMsg* CMessageExecPrivilegeResponse::mutable_proto() {
  _set_bit(2);
  if (proto_ == NULL) proto_ = new ::PBByteMsg;
  return proto_;
}

// optional string RoleName = 4;
inline bool CMessageExecPrivilegeResponse::has_rolename() const {
  return _has_bit(3);
}
inline void CMessageExecPrivilegeResponse::clear_rolename() {
  if (rolename_ != &_default_rolename_) {
    rolename_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMessageExecPrivilegeResponse::rolename() const {
  return *rolename_;
}
inline void CMessageExecPrivilegeResponse::set_rolename(const ::std::string& value) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageExecPrivilegeResponse::set_rolename(const char* value) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CMessageExecPrivilegeResponse::set_rolename(const char* value, size_t size) {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageExecPrivilegeResponse::mutable_rolename() {
  _set_bit(3);
  if (rolename_ == &_default_rolename_) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}

// -------------------------------------------------------------------

// CMessageResultSetResponse

// optional uint32 RowCount = 1 [default = 0];
inline bool CMessageResultSetResponse::has_rowcount() const {
  return _has_bit(0);
}
inline void CMessageResultSetResponse::clear_rowcount() {
  rowcount_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageResultSetResponse::rowcount() const {
  return rowcount_;
}
inline void CMessageResultSetResponse::set_rowcount(::google::protobuf::uint32 value) {
  _set_bit(0);
  rowcount_ = value;
}

// optional uint32 ColCount = 2 [default = 0];
inline bool CMessageResultSetResponse::has_colcount() const {
  return _has_bit(1);
}
inline void CMessageResultSetResponse::clear_colcount() {
  colcount_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageResultSetResponse::colcount() const {
  return colcount_;
}
inline void CMessageResultSetResponse::set_colcount(::google::protobuf::uint32 value) {
  _set_bit(1);
  colcount_ = value;
}

// repeated bytes FieldValue = 3;
inline int CMessageResultSetResponse::fieldvalue_size() const {
  return fieldvalue_.size();
}
inline void CMessageResultSetResponse::clear_fieldvalue() {
  fieldvalue_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMessageResultSetResponse::fieldvalue() const {
  return fieldvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMessageResultSetResponse::mutable_fieldvalue() {
  return &fieldvalue_;
}
inline const ::std::string& CMessageResultSetResponse::fieldvalue(int index) const {
  return fieldvalue_.Get(index);
}
inline ::std::string* CMessageResultSetResponse::mutable_fieldvalue(int index) {
  return fieldvalue_.Mutable(index);
}
inline void CMessageResultSetResponse::set_fieldvalue(int index, const ::std::string& value) {
  fieldvalue_.Mutable(index)->assign(value);
}
inline void CMessageResultSetResponse::set_fieldvalue(int index, const char* value) {
  fieldvalue_.Mutable(index)->assign(value);
}
inline void CMessageResultSetResponse::set_fieldvalue(int index, const void* value, size_t size) {
  fieldvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageResultSetResponse::add_fieldvalue() {
  return fieldvalue_.Add();
}
inline void CMessageResultSetResponse::add_fieldvalue(const ::std::string& value) {
  fieldvalue_.Add()->assign(value);
}
inline void CMessageResultSetResponse::add_fieldvalue(const char* value) {
  fieldvalue_.Add()->assign(value);
}
inline void CMessageResultSetResponse::add_fieldvalue(const void* value, size_t size) {
  fieldvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// repeated uint32 FieldValueLen = 4;
inline int CMessageResultSetResponse::fieldvaluelen_size() const {
  return fieldvaluelen_.size();
}
inline void CMessageResultSetResponse::clear_fieldvaluelen() {
  fieldvaluelen_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMessageResultSetResponse::fieldvaluelen() const {
  return fieldvaluelen_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMessageResultSetResponse::mutable_fieldvaluelen() {
  return &fieldvaluelen_;
}
inline ::google::protobuf::uint32 CMessageResultSetResponse::fieldvaluelen(int index) const {
  return fieldvaluelen_.Get(index);
}
inline void CMessageResultSetResponse::set_fieldvaluelen(int index, ::google::protobuf::uint32 value) {
  fieldvaluelen_.Set(index, value);
}
inline void CMessageResultSetResponse::add_fieldvaluelen(::google::protobuf::uint32 value) {
  fieldvaluelen_.Add(value);
}

#endif  // PROTOBUF_privilege_5fpb_2ehxx__INCLUDED
