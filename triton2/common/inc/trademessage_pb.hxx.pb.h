// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_trademessage_5fpb_2ehxx__INCLUDED
#define PROTOBUF_trademessage_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "coremessage_pb.hxx.pb.h"
#include "property_pb.hxx.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();

class CMessageTradeInvite;
class CMessageTradeInviteCallBack;
class CMessageTradeInviteReply;
class CMessageNotifyTradeBegin;
class CMessageSendGoodsInfo;
class CMessageNotifyGoodsInfo;
class CMessageSendTradeMoney;
class CMessageNotifyTradeMoney;
class CMessageLockTradeInfo;
class CMessageNotifyTradeInfoLock;
class CMessageCloseTrade;
class CMessageNotifyTradeClose;
class CMessageNotifyResultCode;
class CMessageSubmitTrade;

enum TradeMessageID {
  ID_C2S_REQUEST_TRADEINVITE = 9216,
  ID_S2C_NOTIFY_INVITERTN = 9217,
  ID_C2S_REQUEST_INVITEREPLY = 9218,
  ID_S2C_NOTIFY_TRADEBEGIN = 9219,
  ID_C2S_REQUEST_SENDGOODSINFO = 9220,
  ID_S2C_NOTIFY_GOODSINFO = 9221,
  ID_C2S_REQUEST_SENDTRADEMONEY = 9222,
  ID_S2C_NOTIFY_TRADEMONEY = 9223,
  ID_C2S_REQUEST_LOCKTRADEINFO = 9224,
  ID_S2C_NOTIFY_TRADEINFOLOCK = 9225,
  ID_C2S_REQUEST_CLOSETRADE = 9232,
  ID_S2C_NOTIFY_TRADECLOSE = 9233,
  ID_C2S_REQUEST_SUBMITTRADE = 9234,
  ID_S2C_NOTIFY_RESULTCODE = 9235
};
const ::google::protobuf::EnumDescriptor* TradeMessageID_descriptor();
bool TradeMessageID_IsValid(int value);
const TradeMessageID TradeMessageID_MIN = ID_C2S_REQUEST_TRADEINVITE;
const TradeMessageID TradeMessageID_MAX = ID_S2C_NOTIFY_RESULTCODE;

inline const ::std::string& TradeMessageID_Name(TradeMessageID value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradeMessageID_descriptor(), value);
}
inline bool TradeMessageID_Parse(
    const ::std::string& name, TradeMessageID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeMessageID>(
    TradeMessageID_descriptor(), name, value);
}
// ===================================================================

class CMessageTradeInvite : public ::google::protobuf::Message {
 public:
  CMessageTradeInvite();
  virtual ~CMessageTradeInvite();
  
  CMessageTradeInvite(const CMessageTradeInvite& from);
  
  inline CMessageTradeInvite& operator=(const CMessageTradeInvite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTradeInvite& default_instance();
  void Swap(CMessageTradeInvite* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTradeInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTradeInvite& from);
  void MergeFrom(const CMessageTradeInvite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TargetEntityID = 1;
  inline bool has_targetentityid() const;
  inline void clear_targetentityid();
  static const int kTargetEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 targetentityid() const;
  inline void set_targetentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 targetentityid_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTradeInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMessageTradeInviteCallBack : public ::google::protobuf::Message {
 public:
  CMessageTradeInviteCallBack();
  virtual ~CMessageTradeInviteCallBack();
  
  CMessageTradeInviteCallBack(const CMessageTradeInviteCallBack& from);
  
  inline CMessageTradeInviteCallBack& operator=(const CMessageTradeInviteCallBack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTradeInviteCallBack& default_instance();
  void Swap(CMessageTradeInviteCallBack* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTradeInviteCallBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTradeInviteCallBack& from);
  void MergeFrom(const CMessageTradeInviteCallBack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 OriginEntityID = 1;
  inline bool has_originentityid() const;
  inline void clear_originentityid();
  static const int kOriginEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 originentityid() const;
  inline void set_originentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 originentityid_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTradeInviteCallBack* default_instance_;
};
// -------------------------------------------------------------------

class CMessageTradeInviteReply : public ::google::protobuf::Message {
 public:
  CMessageTradeInviteReply();
  virtual ~CMessageTradeInviteReply();
  
  CMessageTradeInviteReply(const CMessageTradeInviteReply& from);
  
  inline CMessageTradeInviteReply& operator=(const CMessageTradeInviteReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageTradeInviteReply& default_instance();
  void Swap(CMessageTradeInviteReply* other);
  
  // implements Message ----------------------------------------------
  
  CMessageTradeInviteReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageTradeInviteReply& from);
  void MergeFrom(const CMessageTradeInviteReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 OriginEntityID = 1;
  inline bool has_originentityid() const;
  inline void clear_originentityid();
  static const int kOriginEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 originentityid() const;
  inline void set_originentityid(::google::protobuf::uint32 value);
  
  // optional uint32 Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 originentityid_;
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageTradeInviteReply* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyTradeBegin : public ::google::protobuf::Message {
 public:
  CMessageNotifyTradeBegin();
  virtual ~CMessageNotifyTradeBegin();
  
  CMessageNotifyTradeBegin(const CMessageNotifyTradeBegin& from);
  
  inline CMessageNotifyTradeBegin& operator=(const CMessageNotifyTradeBegin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyTradeBegin& default_instance();
  void Swap(CMessageNotifyTradeBegin* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyTradeBegin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyTradeBegin& from);
  void MergeFrom(const CMessageNotifyTradeBegin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TargetEntityID = 1;
  inline bool has_targetentityid() const;
  inline void clear_targetentityid();
  static const int kTargetEntityIDFieldNumber = 1;
  inline ::google::protobuf::uint32 targetentityid() const;
  inline void set_targetentityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 targetentityid_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyTradeBegin* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSendGoodsInfo : public ::google::protobuf::Message {
 public:
  CMessageSendGoodsInfo();
  virtual ~CMessageSendGoodsInfo();
  
  CMessageSendGoodsInfo(const CMessageSendGoodsInfo& from);
  
  inline CMessageSendGoodsInfo& operator=(const CMessageSendGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSendGoodsInfo& default_instance();
  void Swap(CMessageSendGoodsInfo* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSendGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSendGoodsInfo& from);
  void MergeFrom(const CMessageSendGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TradeType = 1;
  inline bool has_tradetype() const;
  inline void clear_tradetype();
  static const int kTradeTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 tradetype() const;
  inline void set_tradetype(::google::protobuf::uint32 value);
  
  // optional uint32 TradeIndex = 2;
  inline bool has_tradeindex() const;
  inline void clear_tradeindex();
  static const int kTradeIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 tradeindex() const;
  inline void set_tradeindex(::google::protobuf::uint32 value);
  
  // optional uint32 ItemIndex = 3;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
  // optional uint32 Count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 tradetype_;
  ::google::protobuf::uint32 tradeindex_;
  ::google::protobuf::uint32 itemindex_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSendGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyGoodsInfo : public ::google::protobuf::Message {
 public:
  CMessageNotifyGoodsInfo();
  virtual ~CMessageNotifyGoodsInfo();
  
  CMessageNotifyGoodsInfo(const CMessageNotifyGoodsInfo& from);
  
  inline CMessageNotifyGoodsInfo& operator=(const CMessageNotifyGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyGoodsInfo& default_instance();
  void Swap(CMessageNotifyGoodsInfo* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyGoodsInfo& from);
  void MergeFrom(const CMessageNotifyGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes GoodsBuff = 1;
  inline bool has_goodsbuff() const;
  inline void clear_goodsbuff();
  static const int kGoodsBuffFieldNumber = 1;
  inline const ::std::string& goodsbuff() const;
  inline void set_goodsbuff(const ::std::string& value);
  inline void set_goodsbuff(const char* value);
  inline void set_goodsbuff(const void* value, size_t size);
  inline ::std::string* mutable_goodsbuff();
  
  // optional .PBItemObject Item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::PBItemObject& item() const;
  inline ::PBItemObject* mutable_item();
  
  // optional uint32 BuffLen = 3;
  inline bool has_bufflen() const;
  inline void clear_bufflen();
  static const int kBuffLenFieldNumber = 3;
  inline ::google::protobuf::uint32 bufflen() const;
  inline void set_bufflen(::google::protobuf::uint32 value);
  
  // optional uint32 Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 TradeIndex = 5;
  inline bool has_tradeindex() const;
  inline void clear_tradeindex();
  static const int kTradeIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 tradeindex() const;
  inline void set_tradeindex(::google::protobuf::uint32 value);
  
  // optional uint32 IsSelf = 6;
  inline bool has_isself() const;
  inline void clear_isself();
  static const int kIsSelfFieldNumber = 6;
  inline ::google::protobuf::uint32 isself() const;
  inline void set_isself(::google::protobuf::uint32 value);
  
  // optional uint32 ItemIndex = 7;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 7;
  inline ::google::protobuf::uint32 itemindex() const;
  inline void set_itemindex(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* goodsbuff_;
  static const ::std::string _default_goodsbuff_;
  ::PBItemObject* item_;
  ::google::protobuf::uint32 bufflen_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 tradeindex_;
  ::google::protobuf::uint32 isself_;
  ::google::protobuf::uint32 itemindex_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSendTradeMoney : public ::google::protobuf::Message {
 public:
  CMessageSendTradeMoney();
  virtual ~CMessageSendTradeMoney();
  
  CMessageSendTradeMoney(const CMessageSendTradeMoney& from);
  
  inline CMessageSendTradeMoney& operator=(const CMessageSendTradeMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSendTradeMoney& default_instance();
  void Swap(CMessageSendTradeMoney* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSendTradeMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSendTradeMoney& from);
  void MergeFrom(const CMessageSendTradeMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSendTradeMoney* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyTradeMoney : public ::google::protobuf::Message {
 public:
  CMessageNotifyTradeMoney();
  virtual ~CMessageNotifyTradeMoney();
  
  CMessageNotifyTradeMoney(const CMessageNotifyTradeMoney& from);
  
  inline CMessageNotifyTradeMoney& operator=(const CMessageNotifyTradeMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyTradeMoney& default_instance();
  void Swap(CMessageNotifyTradeMoney* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyTradeMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyTradeMoney& from);
  void MergeFrom(const CMessageNotifyTradeMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 IsSelf = 1;
  inline bool has_isself() const;
  inline void clear_isself();
  static const int kIsSelfFieldNumber = 1;
  inline ::google::protobuf::uint32 isself() const;
  inline void set_isself(::google::protobuf::uint32 value);
  
  // optional uint32 Money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 isself_;
  ::google::protobuf::uint32 money_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyTradeMoney* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLockTradeInfo : public ::google::protobuf::Message {
 public:
  CMessageLockTradeInfo();
  virtual ~CMessageLockTradeInfo();
  
  CMessageLockTradeInfo(const CMessageLockTradeInfo& from);
  
  inline CMessageLockTradeInfo& operator=(const CMessageLockTradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLockTradeInfo& default_instance();
  void Swap(CMessageLockTradeInfo* other);
  
  // implements Message ----------------------------------------------
  
  CMessageLockTradeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLockTradeInfo& from);
  void MergeFrom(const CMessageLockTradeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 LockState = 1;
  inline bool has_lockstate() const;
  inline void clear_lockstate();
  static const int kLockStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lockstate() const;
  inline void set_lockstate(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 lockstate_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageLockTradeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyTradeInfoLock : public ::google::protobuf::Message {
 public:
  CMessageNotifyTradeInfoLock();
  virtual ~CMessageNotifyTradeInfoLock();
  
  CMessageNotifyTradeInfoLock(const CMessageNotifyTradeInfoLock& from);
  
  inline CMessageNotifyTradeInfoLock& operator=(const CMessageNotifyTradeInfoLock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyTradeInfoLock& default_instance();
  void Swap(CMessageNotifyTradeInfoLock* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyTradeInfoLock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyTradeInfoLock& from);
  void MergeFrom(const CMessageNotifyTradeInfoLock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 IsSelf = 1;
  inline bool has_isself() const;
  inline void clear_isself();
  static const int kIsSelfFieldNumber = 1;
  inline ::google::protobuf::uint32 isself() const;
  inline void set_isself(::google::protobuf::uint32 value);
  
  // optional uint32 LockState = 2;
  inline bool has_lockstate() const;
  inline void clear_lockstate();
  static const int kLockStateFieldNumber = 2;
  inline ::google::protobuf::uint32 lockstate() const;
  inline void set_lockstate(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 isself_;
  ::google::protobuf::uint32 lockstate_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyTradeInfoLock* default_instance_;
};
// -------------------------------------------------------------------

class CMessageCloseTrade : public ::google::protobuf::Message {
 public:
  CMessageCloseTrade();
  virtual ~CMessageCloseTrade();
  
  CMessageCloseTrade(const CMessageCloseTrade& from);
  
  inline CMessageCloseTrade& operator=(const CMessageCloseTrade& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageCloseTrade& default_instance();
  void Swap(CMessageCloseTrade* other);
  
  // implements Message ----------------------------------------------
  
  CMessageCloseTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageCloseTrade& from);
  void MergeFrom(const CMessageCloseTrade& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageCloseTrade* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyTradeClose : public ::google::protobuf::Message {
 public:
  CMessageNotifyTradeClose();
  virtual ~CMessageNotifyTradeClose();
  
  CMessageNotifyTradeClose(const CMessageNotifyTradeClose& from);
  
  inline CMessageNotifyTradeClose& operator=(const CMessageNotifyTradeClose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyTradeClose& default_instance();
  void Swap(CMessageNotifyTradeClose* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyTradeClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyTradeClose& from);
  void MergeFrom(const CMessageNotifyTradeClose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyTradeClose* default_instance_;
};
// -------------------------------------------------------------------

class CMessageNotifyResultCode : public ::google::protobuf::Message {
 public:
  CMessageNotifyResultCode();
  virtual ~CMessageNotifyResultCode();
  
  CMessageNotifyResultCode(const CMessageNotifyResultCode& from);
  
  inline CMessageNotifyResultCode& operator=(const CMessageNotifyResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageNotifyResultCode& default_instance();
  void Swap(CMessageNotifyResultCode* other);
  
  // implements Message ----------------------------------------------
  
  CMessageNotifyResultCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageNotifyResultCode& from);
  void MergeFrom(const CMessageNotifyResultCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
  // optional uint32 EntityID = 2;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIDFieldNumber = 2;
  inline ::google::protobuf::uint32 entityid() const;
  inline void set_entityid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 code_;
  ::google::protobuf::uint32 entityid_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageNotifyResultCode* default_instance_;
};
// -------------------------------------------------------------------

class CMessageSubmitTrade : public ::google::protobuf::Message {
 public:
  CMessageSubmitTrade();
  virtual ~CMessageSubmitTrade();
  
  CMessageSubmitTrade(const CMessageSubmitTrade& from);
  
  inline CMessageSubmitTrade& operator=(const CMessageSubmitTrade& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageSubmitTrade& default_instance();
  void Swap(CMessageSubmitTrade* other);
  
  // implements Message ----------------------------------------------
  
  CMessageSubmitTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageSubmitTrade& from);
  void MergeFrom(const CMessageSubmitTrade& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_trademessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_trademessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMessageSubmitTrade* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CMessageTradeInvite

// optional uint32 TargetEntityID = 1;
inline bool CMessageTradeInvite::has_targetentityid() const {
  return _has_bit(0);
}
inline void CMessageTradeInvite::clear_targetentityid() {
  targetentityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageTradeInvite::targetentityid() const {
  return targetentityid_;
}
inline void CMessageTradeInvite::set_targetentityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  targetentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageTradeInviteCallBack

// optional uint32 OriginEntityID = 1;
inline bool CMessageTradeInviteCallBack::has_originentityid() const {
  return _has_bit(0);
}
inline void CMessageTradeInviteCallBack::clear_originentityid() {
  originentityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageTradeInviteCallBack::originentityid() const {
  return originentityid_;
}
inline void CMessageTradeInviteCallBack::set_originentityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  originentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageTradeInviteReply

// optional uint32 OriginEntityID = 1;
inline bool CMessageTradeInviteReply::has_originentityid() const {
  return _has_bit(0);
}
inline void CMessageTradeInviteReply::clear_originentityid() {
  originentityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageTradeInviteReply::originentityid() const {
  return originentityid_;
}
inline void CMessageTradeInviteReply::set_originentityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  originentityid_ = value;
}

// optional uint32 Code = 2;
inline bool CMessageTradeInviteReply::has_code() const {
  return _has_bit(1);
}
inline void CMessageTradeInviteReply::clear_code() {
  code_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageTradeInviteReply::code() const {
  return code_;
}
inline void CMessageTradeInviteReply::set_code(::google::protobuf::uint32 value) {
  _set_bit(1);
  code_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyTradeBegin

// optional uint32 TargetEntityID = 1;
inline bool CMessageNotifyTradeBegin::has_targetentityid() const {
  return _has_bit(0);
}
inline void CMessageNotifyTradeBegin::clear_targetentityid() {
  targetentityid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeBegin::targetentityid() const {
  return targetentityid_;
}
inline void CMessageNotifyTradeBegin::set_targetentityid(::google::protobuf::uint32 value) {
  _set_bit(0);
  targetentityid_ = value;
}

// -------------------------------------------------------------------

// CMessageSendGoodsInfo

// optional uint32 TradeType = 1;
inline bool CMessageSendGoodsInfo::has_tradetype() const {
  return _has_bit(0);
}
inline void CMessageSendGoodsInfo::clear_tradetype() {
  tradetype_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageSendGoodsInfo::tradetype() const {
  return tradetype_;
}
inline void CMessageSendGoodsInfo::set_tradetype(::google::protobuf::uint32 value) {
  _set_bit(0);
  tradetype_ = value;
}

// optional uint32 TradeIndex = 2;
inline bool CMessageSendGoodsInfo::has_tradeindex() const {
  return _has_bit(1);
}
inline void CMessageSendGoodsInfo::clear_tradeindex() {
  tradeindex_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageSendGoodsInfo::tradeindex() const {
  return tradeindex_;
}
inline void CMessageSendGoodsInfo::set_tradeindex(::google::protobuf::uint32 value) {
  _set_bit(1);
  tradeindex_ = value;
}

// optional uint32 ItemIndex = 3;
inline bool CMessageSendGoodsInfo::has_itemindex() const {
  return _has_bit(2);
}
inline void CMessageSendGoodsInfo::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageSendGoodsInfo::itemindex() const {
  return itemindex_;
}
inline void CMessageSendGoodsInfo::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(2);
  itemindex_ = value;
}

// optional uint32 Count = 4;
inline bool CMessageSendGoodsInfo::has_count() const {
  return _has_bit(3);
}
inline void CMessageSendGoodsInfo::clear_count() {
  count_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageSendGoodsInfo::count() const {
  return count_;
}
inline void CMessageSendGoodsInfo::set_count(::google::protobuf::uint32 value) {
  _set_bit(3);
  count_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyGoodsInfo

// optional bytes GoodsBuff = 1;
inline bool CMessageNotifyGoodsInfo::has_goodsbuff() const {
  return _has_bit(0);
}
inline void CMessageNotifyGoodsInfo::clear_goodsbuff() {
  if (goodsbuff_ != &_default_goodsbuff_) {
    goodsbuff_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMessageNotifyGoodsInfo::goodsbuff() const {
  return *goodsbuff_;
}
inline void CMessageNotifyGoodsInfo::set_goodsbuff(const ::std::string& value) {
  _set_bit(0);
  if (goodsbuff_ == &_default_goodsbuff_) {
    goodsbuff_ = new ::std::string;
  }
  goodsbuff_->assign(value);
}
inline void CMessageNotifyGoodsInfo::set_goodsbuff(const char* value) {
  _set_bit(0);
  if (goodsbuff_ == &_default_goodsbuff_) {
    goodsbuff_ = new ::std::string;
  }
  goodsbuff_->assign(value);
}
inline void CMessageNotifyGoodsInfo::set_goodsbuff(const void* value, size_t size) {
  _set_bit(0);
  if (goodsbuff_ == &_default_goodsbuff_) {
    goodsbuff_ = new ::std::string;
  }
  goodsbuff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMessageNotifyGoodsInfo::mutable_goodsbuff() {
  _set_bit(0);
  if (goodsbuff_ == &_default_goodsbuff_) {
    goodsbuff_ = new ::std::string;
  }
  return goodsbuff_;
}

// optional .PBItemObject Item = 2;
inline bool CMessageNotifyGoodsInfo::has_item() const {
  return _has_bit(1);
}
inline void CMessageNotifyGoodsInfo::clear_item() {
  if (item_ != NULL) item_->::PBItemObject::Clear();
  _clear_bit(1);
}
inline const ::PBItemObject& CMessageNotifyGoodsInfo::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PBItemObject* CMessageNotifyGoodsInfo::mutable_item() {
  _set_bit(1);
  if (item_ == NULL) item_ = new ::PBItemObject;
  return item_;
}

// optional uint32 BuffLen = 3;
inline bool CMessageNotifyGoodsInfo::has_bufflen() const {
  return _has_bit(2);
}
inline void CMessageNotifyGoodsInfo::clear_bufflen() {
  bufflen_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMessageNotifyGoodsInfo::bufflen() const {
  return bufflen_;
}
inline void CMessageNotifyGoodsInfo::set_bufflen(::google::protobuf::uint32 value) {
  _set_bit(2);
  bufflen_ = value;
}

// optional uint32 Type = 4;
inline bool CMessageNotifyGoodsInfo::has_type() const {
  return _has_bit(3);
}
inline void CMessageNotifyGoodsInfo::clear_type() {
  type_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMessageNotifyGoodsInfo::type() const {
  return type_;
}
inline void CMessageNotifyGoodsInfo::set_type(::google::protobuf::uint32 value) {
  _set_bit(3);
  type_ = value;
}

// optional uint32 TradeIndex = 5;
inline bool CMessageNotifyGoodsInfo::has_tradeindex() const {
  return _has_bit(4);
}
inline void CMessageNotifyGoodsInfo::clear_tradeindex() {
  tradeindex_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMessageNotifyGoodsInfo::tradeindex() const {
  return tradeindex_;
}
inline void CMessageNotifyGoodsInfo::set_tradeindex(::google::protobuf::uint32 value) {
  _set_bit(4);
  tradeindex_ = value;
}

// optional uint32 IsSelf = 6;
inline bool CMessageNotifyGoodsInfo::has_isself() const {
  return _has_bit(5);
}
inline void CMessageNotifyGoodsInfo::clear_isself() {
  isself_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMessageNotifyGoodsInfo::isself() const {
  return isself_;
}
inline void CMessageNotifyGoodsInfo::set_isself(::google::protobuf::uint32 value) {
  _set_bit(5);
  isself_ = value;
}

// optional uint32 ItemIndex = 7;
inline bool CMessageNotifyGoodsInfo::has_itemindex() const {
  return _has_bit(6);
}
inline void CMessageNotifyGoodsInfo::clear_itemindex() {
  itemindex_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMessageNotifyGoodsInfo::itemindex() const {
  return itemindex_;
}
inline void CMessageNotifyGoodsInfo::set_itemindex(::google::protobuf::uint32 value) {
  _set_bit(6);
  itemindex_ = value;
}

// -------------------------------------------------------------------

// CMessageSendTradeMoney

// optional uint32 Money = 1;
inline bool CMessageSendTradeMoney::has_money() const {
  return _has_bit(0);
}
inline void CMessageSendTradeMoney::clear_money() {
  money_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageSendTradeMoney::money() const {
  return money_;
}
inline void CMessageSendTradeMoney::set_money(::google::protobuf::uint32 value) {
  _set_bit(0);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyTradeMoney

// optional uint32 IsSelf = 1;
inline bool CMessageNotifyTradeMoney::has_isself() const {
  return _has_bit(0);
}
inline void CMessageNotifyTradeMoney::clear_isself() {
  isself_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeMoney::isself() const {
  return isself_;
}
inline void CMessageNotifyTradeMoney::set_isself(::google::protobuf::uint32 value) {
  _set_bit(0);
  isself_ = value;
}

// optional uint32 Money = 2;
inline bool CMessageNotifyTradeMoney::has_money() const {
  return _has_bit(1);
}
inline void CMessageNotifyTradeMoney::clear_money() {
  money_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeMoney::money() const {
  return money_;
}
inline void CMessageNotifyTradeMoney::set_money(::google::protobuf::uint32 value) {
  _set_bit(1);
  money_ = value;
}

// -------------------------------------------------------------------

// CMessageLockTradeInfo

// optional uint32 LockState = 1;
inline bool CMessageLockTradeInfo::has_lockstate() const {
  return _has_bit(0);
}
inline void CMessageLockTradeInfo::clear_lockstate() {
  lockstate_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageLockTradeInfo::lockstate() const {
  return lockstate_;
}
inline void CMessageLockTradeInfo::set_lockstate(::google::protobuf::uint32 value) {
  _set_bit(0);
  lockstate_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyTradeInfoLock

// optional uint32 IsSelf = 1;
inline bool CMessageNotifyTradeInfoLock::has_isself() const {
  return _has_bit(0);
}
inline void CMessageNotifyTradeInfoLock::clear_isself() {
  isself_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeInfoLock::isself() const {
  return isself_;
}
inline void CMessageNotifyTradeInfoLock::set_isself(::google::protobuf::uint32 value) {
  _set_bit(0);
  isself_ = value;
}

// optional uint32 LockState = 2;
inline bool CMessageNotifyTradeInfoLock::has_lockstate() const {
  return _has_bit(1);
}
inline void CMessageNotifyTradeInfoLock::clear_lockstate() {
  lockstate_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeInfoLock::lockstate() const {
  return lockstate_;
}
inline void CMessageNotifyTradeInfoLock::set_lockstate(::google::protobuf::uint32 value) {
  _set_bit(1);
  lockstate_ = value;
}

// -------------------------------------------------------------------

// CMessageCloseTrade

// optional uint32 Code = 1;
inline bool CMessageCloseTrade::has_code() const {
  return _has_bit(0);
}
inline void CMessageCloseTrade::clear_code() {
  code_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageCloseTrade::code() const {
  return code_;
}
inline void CMessageCloseTrade::set_code(::google::protobuf::uint32 value) {
  _set_bit(0);
  code_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyTradeClose

// optional uint32 Code = 1;
inline bool CMessageNotifyTradeClose::has_code() const {
  return _has_bit(0);
}
inline void CMessageNotifyTradeClose::clear_code() {
  code_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNotifyTradeClose::code() const {
  return code_;
}
inline void CMessageNotifyTradeClose::set_code(::google::protobuf::uint32 value) {
  _set_bit(0);
  code_ = value;
}

// -------------------------------------------------------------------

// CMessageNotifyResultCode

// optional uint32 Code = 1;
inline bool CMessageNotifyResultCode::has_code() const {
  return _has_bit(0);
}
inline void CMessageNotifyResultCode::clear_code() {
  code_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageNotifyResultCode::code() const {
  return code_;
}
inline void CMessageNotifyResultCode::set_code(::google::protobuf::uint32 value) {
  _set_bit(0);
  code_ = value;
}

// optional uint32 EntityID = 2;
inline bool CMessageNotifyResultCode::has_entityid() const {
  return _has_bit(1);
}
inline void CMessageNotifyResultCode::clear_entityid() {
  entityid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMessageNotifyResultCode::entityid() const {
  return entityid_;
}
inline void CMessageNotifyResultCode::set_entityid(::google::protobuf::uint32 value) {
  _set_bit(1);
  entityid_ = value;
}

// -------------------------------------------------------------------

// CMessageSubmitTrade

// optional uint32 Code = 1;
inline bool CMessageSubmitTrade::has_code() const {
  return _has_bit(0);
}
inline void CMessageSubmitTrade::clear_code() {
  code_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMessageSubmitTrade::code() const {
  return code_;
}
inline void CMessageSubmitTrade::set_code(::google::protobuf::uint32 value) {
  _set_bit(0);
  code_ = value;
}

#endif  // PROTOBUF_trademessage_5fpb_2ehxx__INCLUDED
