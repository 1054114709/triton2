// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "friendmessage_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageInviteFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFriendRequestByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendRequestByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFriendNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFriendOptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendOptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFriendResponseMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendResponseMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageInviteFriendResponseNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageInviteFriendResponseNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDelFrientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDelFrientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendErrorNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendErrorNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeFriendNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeFriendNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendGetListNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendGetListNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendGetListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendGetListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendGroupNameNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendGroupNameNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice_R_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChangeStatusNotice_R_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChangeStatusNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChangeStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChangeStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAddFriendNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAddFriendNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChgGroupNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChgGroupNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChgFriendGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendSendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendSendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendMessageNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendMessageNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendMoveToBlackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendAddBlackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendAddBlackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendChgFriendGroupNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendMoveToBlackNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendLockEnemyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendLockEnemyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendGetFriendsStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendGetFriendsStateNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendUpdateEnemyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendUpdateEnemyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeMasterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeMasterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeMasterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeMasterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeMasterNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeMasterNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetSlaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetSlaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetSlaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetSlaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSlaveLevelUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSlaveLevelUpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAnswerChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAnswerChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAnswerChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAnswerChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageQueryPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageQueryPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSlaveOnOffNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSlaveOnOffNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSlaveNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSlaveNumNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveSlaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveSlaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveSlaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveSlaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveSlaveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveSlaveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveMasterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveMasterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveMasterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveMasterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRemoveMasterNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRemoveMasterNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAlterMasterPercentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAlterMasterPercentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageAlterMasterPercentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageAlterMasterPercentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetLowPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetLowPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetLowPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetLowPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendLevelUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendLevelUpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendBlessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendBlessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendBlessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendBlessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageFriendBlessNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageFriendBlessNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyIntimacyNogify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyIntimacyNogify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageModifyLastTimeAllOnLineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageModifyLastTimeAllOnLineNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateSwornTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateSwornTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateSwornTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateSwornTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveSwornTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveSwornTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickSwornMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickSwornMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickSwornMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickSwornMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandSwornTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandSwornTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSwornMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSwornMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSwornInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSwornInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateSwornTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateSwornTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLeaveSwornTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageKickSwornMemberNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageKickSwornMemberNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeSwornNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeSwornNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeSwornNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeSwornNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageChangeSwornNameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageChangeSwornNameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageDisbandSwornTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLatestContactChangeStatusNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLatestContactChangeStatusNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLastContacterNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLastContacterNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdateLastContacterNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdateLastContacterNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUploadContacterList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUploadContacterList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageContacterStatusNotifyG2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageContacterStatusNotifyG2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRebuildSwornRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRebuildSwornRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRebuildSwornResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRebuildSwornResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRebuildSwornNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRebuildSwornNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FRIEND_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friendmessage_5fpb_2ehxx() {
  protobuf_AddDesc_friendmessage_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friendmessage_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageInviteFriendRequest_descriptor_ = file->message_type(0);
  static const int CMessageInviteFriendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequest, playerid_),
  };
  CMessageInviteFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendRequest_descriptor_,
      CMessageInviteFriendRequest::default_instance_,
      CMessageInviteFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendRequest));
  CMessageInviteFriendRequestByName_descriptor_ = file->message_type(1);
  static const int CMessageInviteFriendRequestByName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequestByName, invitedplayername_),
  };
  CMessageInviteFriendRequestByName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendRequestByName_descriptor_,
      CMessageInviteFriendRequestByName::default_instance_,
      CMessageInviteFriendRequestByName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequestByName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendRequestByName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendRequestByName));
  CMessageInviteFriendNotice_descriptor_ = file->message_type(2);
  static const int CMessageInviteFriendNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, srchead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, srcmetier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, srclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, srcsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, descharid_),
  };
  CMessageInviteFriendNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendNotice_descriptor_,
      CMessageInviteFriendNotice::default_instance_,
      CMessageInviteFriendNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendNotice));
  CMessageInviteFriendOptionRequest_descriptor_ = file->message_type(3);
  static const int CMessageInviteFriendOptionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendOptionRequest, invitingplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendOptionRequest, agreecode_),
  };
  CMessageInviteFriendOptionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendOptionRequest_descriptor_,
      CMessageInviteFriendOptionRequest::default_instance_,
      CMessageInviteFriendOptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendOptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendOptionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendOptionRequest));
  CMessageInviteFriendResponseMsg_descriptor_ = file->message_type(4);
  static const int CMessageInviteFriendResponseMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, isdesinmylst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, beinvitingplayernation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, beinvitingplayerhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, beinvitingplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, beinvitingplayersex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, isfriendlstfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, agreecode_),
  };
  CMessageInviteFriendResponseMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendResponseMsg_descriptor_,
      CMessageInviteFriendResponseMsg::default_instance_,
      CMessageInviteFriendResponseMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendResponseMsg));
  CMessageInviteFriendResponseNotice_descriptor_ = file->message_type(5);
  static const int CMessageInviteFriendResponseNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseNotice, beinvitingplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseNotice, agreecode_),
  };
  CMessageInviteFriendResponseNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageInviteFriendResponseNotice_descriptor_,
      CMessageInviteFriendResponseNotice::default_instance_,
      CMessageInviteFriendResponseNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageInviteFriendResponseNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageInviteFriendResponseNotice));
  CMessageDelFrientRequest_descriptor_ = file->message_type(6);
  static const int CMessageDelFrientRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelFrientRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelFrientRequest, charid_),
  };
  CMessageDelFrientRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDelFrientRequest_descriptor_,
      CMessageDelFrientRequest::default_instance_,
      CMessageDelFrientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelFrientRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDelFrientRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDelFrientRequest));
  CMessageFriendErrorNotice_descriptor_ = file->message_type(7);
  static const int CMessageFriendErrorNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendErrorNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendErrorNotice, errorcode_),
  };
  CMessageFriendErrorNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendErrorNotice_descriptor_,
      CMessageFriendErrorNotice::default_instance_,
      CMessageFriendErrorNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendErrorNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendErrorNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendErrorNotice));
  CMessageChangeFriendNotice_descriptor_ = file->message_type(8);
  static const int CMessageChangeFriendNotice_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, nationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, reltome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, oprcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, timeorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, bekilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, vipflag_),
  };
  CMessageChangeFriendNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeFriendNotice_descriptor_,
      CMessageChangeFriendNotice::default_instance_,
      CMessageChangeFriendNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeFriendNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeFriendNotice));
  SingleFriendData_descriptor_ = file->message_type(9);
  static const int SingleFriendData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, bekilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, nationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, timeorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, vipflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, intimacydegree_),
  };
  SingleFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFriendData_descriptor_,
      SingleFriendData::default_instance_,
      SingleFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFriendData));
  CMessageFriendGetListNotice_descriptor_ = file->message_type(10);
  static const int CMessageFriendGetListNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListNotice, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListNotice, groupname_),
  };
  CMessageFriendGetListNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendGetListNotice_descriptor_,
      CMessageFriendGetListNotice::default_instance_,
      CMessageFriendGetListNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendGetListNotice));
  CMessageFriendGetListRequest_descriptor_ = file->message_type(11);
  static const int CMessageFriendGetListRequest_offsets_[1] = {
  };
  CMessageFriendGetListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendGetListRequest_descriptor_,
      CMessageFriendGetListRequest::default_instance_,
      CMessageFriendGetListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendGetListRequest));
  CMessageFriendGroupNameNotice_descriptor_ = file->message_type(12);
  static const int CMessageFriendGroupNameNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGroupNameNotice, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGroupNameNotice, groupname_),
  };
  CMessageFriendGroupNameNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendGroupNameNotice_descriptor_,
      CMessageFriendGroupNameNotice::default_instance_,
      CMessageFriendGroupNameNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGroupNameNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGroupNameNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendGroupNameNotice));
  CMessageFriendChangeStatusNotice_R_descriptor_ = file->message_type(13);
  static const int CMessageFriendChangeStatusNotice_R_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, rels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, vipflag_),
  };
  CMessageFriendChangeStatusNotice_R_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChangeStatusNotice_R_descriptor_,
      CMessageFriendChangeStatusNotice_R::default_instance_,
      CMessageFriendChangeStatusNotice_R_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice_R, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChangeStatusNotice_R));
  CMessageFriendChangeStatusNotice_descriptor_ = file->message_type(14);
  static const int CMessageFriendChangeStatusNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, rels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, vipflag_),
  };
  CMessageFriendChangeStatusNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChangeStatusNotice_descriptor_,
      CMessageFriendChangeStatusNotice::default_instance_,
      CMessageFriendChangeStatusNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChangeStatusNotice));
  CMessageFriendChangeStatusRequest_descriptor_ = file->message_type(15);
  static const int CMessageFriendChangeStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusRequest, status_),
  };
  CMessageFriendChangeStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChangeStatusRequest_descriptor_,
      CMessageFriendChangeStatusRequest::default_instance_,
      CMessageFriendChangeStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChangeStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChangeStatusRequest));
  CMessageAddFriendNotice_descriptor_ = file->message_type(16);
  static const int CMessageAddFriendNotice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, reltome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, groupid_),
  };
  CMessageAddFriendNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAddFriendNotice_descriptor_,
      CMessageAddFriendNotice::default_instance_,
      CMessageAddFriendNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAddFriendNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAddFriendNotice));
  CMessageFriendChgGroupNameRequest_descriptor_ = file->message_type(17);
  static const int CMessageFriendChgGroupNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgGroupNameRequest, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgGroupNameRequest, groupid_),
  };
  CMessageFriendChgGroupNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChgGroupNameRequest_descriptor_,
      CMessageFriendChgGroupNameRequest::default_instance_,
      CMessageFriendChgGroupNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgGroupNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgGroupNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChgGroupNameRequest));
  CMessageFriendChgFriendGroupRequest_descriptor_ = file->message_type(18);
  static const int CMessageFriendChgFriendGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupRequest, desgroupid_),
  };
  CMessageFriendChgFriendGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChgFriendGroupRequest_descriptor_,
      CMessageFriendChgFriendGroupRequest::default_instance_,
      CMessageFriendChgFriendGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChgFriendGroupRequest));
  CMessageFriendSendMessageRequest_descriptor_ = file->message_type(19);
  static const int CMessageFriendSendMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendSendMessageRequest, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendSendMessageRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendSendMessageRequest, autoflag_),
  };
  CMessageFriendSendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendSendMessageRequest_descriptor_,
      CMessageFriendSendMessageRequest::default_instance_,
      CMessageFriendSendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendSendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendSendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendSendMessageRequest));
  CMessageFriendMessageNotice_descriptor_ = file->message_type(20);
  static const int CMessageFriendMessageNotice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, autoflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, campid_),
  };
  CMessageFriendMessageNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendMessageNotice_descriptor_,
      CMessageFriendMessageNotice::default_instance_,
      CMessageFriendMessageNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMessageNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendMessageNotice));
  CMessageFriendMoveToBlackRequest_descriptor_ = file->message_type(21);
  static const int CMessageFriendMoveToBlackRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackRequest, charid_),
  };
  CMessageFriendMoveToBlackRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendMoveToBlackRequest_descriptor_,
      CMessageFriendMoveToBlackRequest::default_instance_,
      CMessageFriendMoveToBlackRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendMoveToBlackRequest));
  CMessageFriendAddBlackRequest_descriptor_ = file->message_type(22);
  static const int CMessageFriendAddBlackRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendAddBlackRequest, desname_),
  };
  CMessageFriendAddBlackRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendAddBlackRequest_descriptor_,
      CMessageFriendAddBlackRequest::default_instance_,
      CMessageFriendAddBlackRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendAddBlackRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendAddBlackRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendAddBlackRequest));
  CMessageFriendChgFriendGroupNotice_descriptor_ = file->message_type(23);
  static const int CMessageFriendChgFriendGroupNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupNotice, desgroupid_),
  };
  CMessageFriendChgFriendGroupNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendChgFriendGroupNotice_descriptor_,
      CMessageFriendChgFriendGroupNotice::default_instance_,
      CMessageFriendChgFriendGroupNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendChgFriendGroupNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendChgFriendGroupNotice));
  CMessageFriendMoveToBlackNotice_descriptor_ = file->message_type(24);
  static const int CMessageFriendMoveToBlackNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackNotice, charid_),
  };
  CMessageFriendMoveToBlackNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendMoveToBlackNotice_descriptor_,
      CMessageFriendMoveToBlackNotice::default_instance_,
      CMessageFriendMoveToBlackNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendMoveToBlackNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendMoveToBlackNotice));
  CMessageFriendLockEnemyRequest_descriptor_ = file->message_type(25);
  static const int CMessageFriendLockEnemyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLockEnemyRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLockEnemyRequest, locktype_),
  };
  CMessageFriendLockEnemyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendLockEnemyRequest_descriptor_,
      CMessageFriendLockEnemyRequest::default_instance_,
      CMessageFriendLockEnemyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLockEnemyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLockEnemyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendLockEnemyRequest));
  CMessageFriendGetFriendsStateRequest_descriptor_ = file->message_type(26);
  static const int CMessageFriendGetFriendsStateRequest_offsets_[1] = {
  };
  CMessageFriendGetFriendsStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendGetFriendsStateRequest_descriptor_,
      CMessageFriendGetFriendsStateRequest::default_instance_,
      CMessageFriendGetFriendsStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendGetFriendsStateRequest));
  CMessageFriendGetFriendsStateNotice_descriptor_ = file->message_type(27);
  static const int CMessageFriendGetFriendsStateNotice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, rels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, vipflag_),
  };
  CMessageFriendGetFriendsStateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendGetFriendsStateNotice_descriptor_,
      CMessageFriendGetFriendsStateNotice::default_instance_,
      CMessageFriendGetFriendsStateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendGetFriendsStateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendGetFriendsStateNotice));
  CMessageFriendUpdateEnemyRequest_descriptor_ = file->message_type(28);
  static const int CMessageFriendUpdateEnemyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendUpdateEnemyRequest, killercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendUpdateEnemyRequest, delenemycharid_),
  };
  CMessageFriendUpdateEnemyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendUpdateEnemyRequest_descriptor_,
      CMessageFriendUpdateEnemyRequest::default_instance_,
      CMessageFriendUpdateEnemyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendUpdateEnemyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendUpdateEnemyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendUpdateEnemyRequest));
  CMessageChangeMasterRequest_descriptor_ = file->message_type(29);
  static const int CMessageChangeMasterRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, masterid_),
  };
  CMessageChangeMasterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeMasterRequest_descriptor_,
      CMessageChangeMasterRequest::default_instance_,
      CMessageChangeMasterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeMasterRequest));
  CMessageChangeMasterResponse_descriptor_ = file->message_type(30);
  static const int CMessageChangeMasterResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, metier_),
  };
  CMessageChangeMasterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeMasterResponse_descriptor_,
      CMessageChangeMasterResponse::default_instance_,
      CMessageChangeMasterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeMasterResponse));
  CMessageChangeMasterNotify_descriptor_ = file->message_type(31);
  static const int CMessageChangeMasterNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterNotify, slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterNotify, charid_),
  };
  CMessageChangeMasterNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeMasterNotify_descriptor_,
      CMessageChangeMasterNotify::default_instance_,
      CMessageChangeMasterNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeMasterNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeMasterNotify));
  CMessageGetSlaveRequest_descriptor_ = file->message_type(32);
  static const int CMessageGetSlaveRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, npcentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, masterid_),
  };
  CMessageGetSlaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetSlaveRequest_descriptor_,
      CMessageGetSlaveRequest::default_instance_,
      CMessageGetSlaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetSlaveRequest));
  SlaveInfo_descriptor_ = file->message_type(33);
  static const int SlaveInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, slavename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, metier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, online_),
  };
  SlaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveInfo_descriptor_,
      SlaveInfo::default_instance_,
      SlaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveInfo));
  CMessageGetSlaveResponse_descriptor_ = file->message_type(34);
  static const int CMessageGetSlaveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, master_),
  };
  CMessageGetSlaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetSlaveResponse_descriptor_,
      CMessageGetSlaveResponse::default_instance_,
      CMessageGetSlaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetSlaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetSlaveResponse));
  CMessageSlaveLevelUpNotify_descriptor_ = file->message_type(35);
  static const int CMessageSlaveLevelUpNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveLevelUpNotify, slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveLevelUpNotify, charid_),
  };
  CMessageSlaveLevelUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSlaveLevelUpNotify_descriptor_,
      CMessageSlaveLevelUpNotify::default_instance_,
      CMessageSlaveLevelUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveLevelUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveLevelUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSlaveLevelUpNotify));
  CMessageAnswerChangeNotify_descriptor_ = file->message_type(36);
  static const int CMessageAnswerChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeNotify, slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeNotify, charid_),
  };
  CMessageAnswerChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAnswerChangeNotify_descriptor_,
      CMessageAnswerChangeNotify::default_instance_,
      CMessageAnswerChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAnswerChangeNotify));
  CMessageAnswerChangeRequest_descriptor_ = file->message_type(37);
  static const int CMessageAnswerChangeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, error_),
  };
  CMessageAnswerChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAnswerChangeRequest_descriptor_,
      CMessageAnswerChangeRequest::default_instance_,
      CMessageAnswerChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAnswerChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAnswerChangeRequest));
  CMessageQueryPlayerRequest_descriptor_ = file->message_type(38);
  static const int CMessageQueryPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerRequest, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerRequest, charid_),
  };
  CMessageQueryPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryPlayerRequest_descriptor_,
      CMessageQueryPlayerRequest::default_instance_,
      CMessageQueryPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryPlayerRequest));
  CMessageQueryPlayerResponse_descriptor_ = file->message_type(39);
  static const int CMessageQueryPlayerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerResponse, charid_),
  };
  CMessageQueryPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageQueryPlayerResponse_descriptor_,
      CMessageQueryPlayerResponse::default_instance_,
      CMessageQueryPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageQueryPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageQueryPlayerResponse));
  CMessageSlaveOnOffNotify_descriptor_ = file->message_type(40);
  static const int CMessageSlaveOnOffNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, srccharname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, descharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, level_),
  };
  CMessageSlaveOnOffNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSlaveOnOffNotify_descriptor_,
      CMessageSlaveOnOffNotify::default_instance_,
      CMessageSlaveOnOffNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveOnOffNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSlaveOnOffNotify));
  CMessageSlaveNumNotify_descriptor_ = file->message_type(41);
  static const int CMessageSlaveNumNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, slavevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, slavepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, masterpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, slavetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, mastertotal_),
  };
  CMessageSlaveNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSlaveNumNotify_descriptor_,
      CMessageSlaveNumNotify::default_instance_,
      CMessageSlaveNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSlaveNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSlaveNumNotify));
  CMessageRemoveSlaveRequest_descriptor_ = file->message_type(42);
  static const int CMessageRemoveSlaveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveRequest, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveRequest, npcentityid_),
  };
  CMessageRemoveSlaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveSlaveRequest_descriptor_,
      CMessageRemoveSlaveRequest::default_instance_,
      CMessageRemoveSlaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveSlaveRequest));
  CMessageRemoveSlaveResponse_descriptor_ = file->message_type(43);
  static const int CMessageRemoveSlaveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, param_),
  };
  CMessageRemoveSlaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveSlaveResponse_descriptor_,
      CMessageRemoveSlaveResponse::default_instance_,
      CMessageRemoveSlaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveSlaveResponse));
  CMessageRemoveSlaveNotify_descriptor_ = file->message_type(44);
  static const int CMessageRemoveSlaveNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveNotify, masterid_),
  };
  CMessageRemoveSlaveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveSlaveNotify_descriptor_,
      CMessageRemoveSlaveNotify::default_instance_,
      CMessageRemoveSlaveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveSlaveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveSlaveNotify));
  CMessageRemoveMasterRequest_descriptor_ = file->message_type(45);
  static const int CMessageRemoveMasterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterRequest, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterRequest, npcentityid_),
  };
  CMessageRemoveMasterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveMasterRequest_descriptor_,
      CMessageRemoveMasterRequest::default_instance_,
      CMessageRemoveMasterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveMasterRequest));
  CMessageRemoveMasterResponse_descriptor_ = file->message_type(46);
  static const int CMessageRemoveMasterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterResponse, masterid_),
  };
  CMessageRemoveMasterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveMasterResponse_descriptor_,
      CMessageRemoveMasterResponse::default_instance_,
      CMessageRemoveMasterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveMasterResponse));
  CMessageRemoveMasterNotify_descriptor_ = file->message_type(47);
  static const int CMessageRemoveMasterNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterNotify, slaveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterNotify, param_),
  };
  CMessageRemoveMasterNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRemoveMasterNotify_descriptor_,
      CMessageRemoveMasterNotify::default_instance_,
      CMessageRemoveMasterNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRemoveMasterNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRemoveMasterNotify));
  CMessageAlterMasterPercentRequest_descriptor_ = file->message_type(48);
  static const int CMessageAlterMasterPercentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentRequest, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentRequest, percent_),
  };
  CMessageAlterMasterPercentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAlterMasterPercentRequest_descriptor_,
      CMessageAlterMasterPercentRequest::default_instance_,
      CMessageAlterMasterPercentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAlterMasterPercentRequest));
  CMessageAlterMasterPercentResponse_descriptor_ = file->message_type(49);
  static const int CMessageAlterMasterPercentResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentResponse, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentResponse, percent_),
  };
  CMessageAlterMasterPercentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageAlterMasterPercentResponse_descriptor_,
      CMessageAlterMasterPercentResponse::default_instance_,
      CMessageAlterMasterPercentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageAlterMasterPercentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageAlterMasterPercentResponse));
  CMessageGetLowPlayerRequest_descriptor_ = file->message_type(50);
  static const int CMessageGetLowPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerRequest, npcentityid_),
  };
  CMessageGetLowPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetLowPlayerRequest_descriptor_,
      CMessageGetLowPlayerRequest::default_instance_,
      CMessageGetLowPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetLowPlayerRequest));
  CMessageGetLowPlayerResponse_descriptor_ = file->message_type(51);
  static const int CMessageGetLowPlayerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerResponse, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerResponse, required_),
  };
  CMessageGetLowPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetLowPlayerResponse_descriptor_,
      CMessageGetLowPlayerResponse::default_instance_,
      CMessageGetLowPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetLowPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetLowPlayerResponse));
  CMessageFriendLevelUpNotify_descriptor_ = file->message_type(52);
  static const int CMessageFriendLevelUpNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, roleid_),
  };
  CMessageFriendLevelUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendLevelUpNotify_descriptor_,
      CMessageFriendLevelUpNotify::default_instance_,
      CMessageFriendLevelUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendLevelUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendLevelUpNotify));
  CMessageFriendBlessRequest_descriptor_ = file->message_type(53);
  static const int CMessageFriendBlessRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessRequest, roleid_),
  };
  CMessageFriendBlessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendBlessRequest_descriptor_,
      CMessageFriendBlessRequest::default_instance_,
      CMessageFriendBlessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendBlessRequest));
  CMessageFriendBlessResponse_descriptor_ = file->message_type(54);
  static const int CMessageFriendBlessResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessResponse, errcode_),
  };
  CMessageFriendBlessResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendBlessResponse_descriptor_,
      CMessageFriendBlessResponse::default_instance_,
      CMessageFriendBlessResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendBlessResponse));
  CMessageFriendBlessNotify_descriptor_ = file->message_type(55);
  static const int CMessageFriendBlessNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessNotify, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessNotify, exp_),
  };
  CMessageFriendBlessNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageFriendBlessNotify_descriptor_,
      CMessageFriendBlessNotify::default_instance_,
      CMessageFriendBlessNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageFriendBlessNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageFriendBlessNotify));
  CMessageModifyIntimacyNogify_descriptor_ = file->message_type(56);
  static const int CMessageModifyIntimacyNogify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, changevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, intimacydegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, dailyintimacy_),
  };
  CMessageModifyIntimacyNogify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyIntimacyNogify_descriptor_,
      CMessageModifyIntimacyNogify::default_instance_,
      CMessageModifyIntimacyNogify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyIntimacyNogify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyIntimacyNogify));
  CMessageModifyLastTimeAllOnLineNotify_descriptor_ = file->message_type(57);
  static const int CMessageModifyLastTimeAllOnLineNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyLastTimeAllOnLineNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyLastTimeAllOnLineNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyLastTimeAllOnLineNotify, friendid_),
  };
  CMessageModifyLastTimeAllOnLineNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageModifyLastTimeAllOnLineNotify_descriptor_,
      CMessageModifyLastTimeAllOnLineNotify::default_instance_,
      CMessageModifyLastTimeAllOnLineNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyLastTimeAllOnLineNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageModifyLastTimeAllOnLineNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageModifyLastTimeAllOnLineNotify));
  CMessageCreateSwornTeamRequest_descriptor_ = file->message_type(58);
  static const int CMessageCreateSwornTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamRequest, swornname_),
  };
  CMessageCreateSwornTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateSwornTeamRequest_descriptor_,
      CMessageCreateSwornTeamRequest::default_instance_,
      CMessageCreateSwornTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateSwornTeamRequest));
  CMessageCreateSwornTeamResponse_descriptor_ = file->message_type(59);
  static const int CMessageCreateSwornTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamResponse, errcode_),
  };
  CMessageCreateSwornTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateSwornTeamResponse_descriptor_,
      CMessageCreateSwornTeamResponse::default_instance_,
      CMessageCreateSwornTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateSwornTeamResponse));
  CMessageLeaveSwornTeamRequest_descriptor_ = file->message_type(60);
  static const int CMessageLeaveSwornTeamRequest_offsets_[1] = {
  };
  CMessageLeaveSwornTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveSwornTeamRequest_descriptor_,
      CMessageLeaveSwornTeamRequest::default_instance_,
      CMessageLeaveSwornTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveSwornTeamRequest));
  CMessageLeaveSwornTeamResponse_descriptor_ = file->message_type(61);
  static const int CMessageLeaveSwornTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamResponse, errcode_),
  };
  CMessageLeaveSwornTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveSwornTeamResponse_descriptor_,
      CMessageLeaveSwornTeamResponse::default_instance_,
      CMessageLeaveSwornTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveSwornTeamResponse));
  CMessageKickSwornMemberRequest_descriptor_ = file->message_type(62);
  static const int CMessageKickSwornMemberRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberRequest, roleid_),
  };
  CMessageKickSwornMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickSwornMemberRequest_descriptor_,
      CMessageKickSwornMemberRequest::default_instance_,
      CMessageKickSwornMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickSwornMemberRequest));
  CMessageKickSwornMemberResponse_descriptor_ = file->message_type(63);
  static const int CMessageKickSwornMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberResponse, errcode_),
  };
  CMessageKickSwornMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickSwornMemberResponse_descriptor_,
      CMessageKickSwornMemberResponse::default_instance_,
      CMessageKickSwornMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickSwornMemberResponse));
  CMessageDisbandSwornTeamRequest_descriptor_ = file->message_type(64);
  static const int CMessageDisbandSwornTeamRequest_offsets_[1] = {
  };
  CMessageDisbandSwornTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandSwornTeamRequest_descriptor_,
      CMessageDisbandSwornTeamRequest::default_instance_,
      CMessageDisbandSwornTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandSwornTeamRequest));
  CMessageDisbandSwornTeamResponse_descriptor_ = file->message_type(65);
  static const int CMessageDisbandSwornTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamResponse, errcode_),
  };
  CMessageDisbandSwornTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandSwornTeamResponse_descriptor_,
      CMessageDisbandSwornTeamResponse::default_instance_,
      CMessageDisbandSwornTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandSwornTeamResponse));
  CMsgSwornMember_descriptor_ = file->message_type(66);
  static const int CMsgSwornMember_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, rolepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, rolelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, metierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, genderid_),
  };
  CMsgSwornMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSwornMember_descriptor_,
      CMsgSwornMember::default_instance_,
      CMsgSwornMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSwornMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSwornMember));
  CMessageSwornInfoNotify_descriptor_ = file->message_type(67);
  static const int CMessageSwornInfoNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSwornInfoNotify, swornmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSwornInfoNotify, swornname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSwornInfoNotify, roleid_),
  };
  CMessageSwornInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSwornInfoNotify_descriptor_,
      CMessageSwornInfoNotify::default_instance_,
      CMessageSwornInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSwornInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSwornInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSwornInfoNotify));
  CMessageCreateSwornTeamNotify_descriptor_ = file->message_type(68);
  static const int CMessageCreateSwornTeamNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamNotify, swornmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamNotify, swornname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamNotify, masterid_),
  };
  CMessageCreateSwornTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageCreateSwornTeamNotify_descriptor_,
      CMessageCreateSwornTeamNotify::default_instance_,
      CMessageCreateSwornTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateSwornTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageCreateSwornTeamNotify));
  CMessageLeaveSwornTeamNotify_descriptor_ = file->message_type(69);
  static const int CMessageLeaveSwornTeamNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamNotify, masterid_),
  };
  CMessageLeaveSwornTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLeaveSwornTeamNotify_descriptor_,
      CMessageLeaveSwornTeamNotify::default_instance_,
      CMessageLeaveSwornTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLeaveSwornTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLeaveSwornTeamNotify));
  CMessageKickSwornMemberNotify_descriptor_ = file->message_type(70);
  static const int CMessageKickSwornMemberNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberNotify, roleid_),
  };
  CMessageKickSwornMemberNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageKickSwornMemberNotify_descriptor_,
      CMessageKickSwornMemberNotify::default_instance_,
      CMessageKickSwornMemberNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageKickSwornMemberNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageKickSwornMemberNotify));
  CMessageChangeSwornNameRequest_descriptor_ = file->message_type(71);
  static const int CMessageChangeSwornNameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameRequest, swornname_),
  };
  CMessageChangeSwornNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeSwornNameRequest_descriptor_,
      CMessageChangeSwornNameRequest::default_instance_,
      CMessageChangeSwornNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeSwornNameRequest));
  CMessageChangeSwornNameResponse_descriptor_ = file->message_type(72);
  static const int CMessageChangeSwornNameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameResponse, errcode_),
  };
  CMessageChangeSwornNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeSwornNameResponse_descriptor_,
      CMessageChangeSwornNameResponse::default_instance_,
      CMessageChangeSwornNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeSwornNameResponse));
  CMessageChangeSwornNameNotify_descriptor_ = file->message_type(73);
  static const int CMessageChangeSwornNameNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameNotify, swornname_),
  };
  CMessageChangeSwornNameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageChangeSwornNameNotify_descriptor_,
      CMessageChangeSwornNameNotify::default_instance_,
      CMessageChangeSwornNameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageChangeSwornNameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageChangeSwornNameNotify));
  CMessageDisbandSwornTeamNotify_descriptor_ = file->message_type(74);
  static const int CMessageDisbandSwornTeamNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamNotify, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamNotify, swornid_),
  };
  CMessageDisbandSwornTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageDisbandSwornTeamNotify_descriptor_,
      CMessageDisbandSwornTeamNotify::default_instance_,
      CMessageDisbandSwornTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageDisbandSwornTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageDisbandSwornTeamNotify));
  CMessageLatestContactChangeStatusNotice_descriptor_ = file->message_type(75);
  static const int CMessageLatestContactChangeStatusNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLatestContactChangeStatusNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLatestContactChangeStatusNotice, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLatestContactChangeStatusNotice, vipflag_),
  };
  CMessageLatestContactChangeStatusNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLatestContactChangeStatusNotice_descriptor_,
      CMessageLatestContactChangeStatusNotice::default_instance_,
      CMessageLatestContactChangeStatusNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLatestContactChangeStatusNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLatestContactChangeStatusNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLatestContactChangeStatusNotice));
  CMessageLastContacterNotice_descriptor_ = file->message_type(76);
  static const int CMessageLastContacterNotice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, nationid_),
  };
  CMessageLastContacterNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLastContacterNotice_descriptor_,
      CMessageLastContacterNotice::default_instance_,
      CMessageLastContacterNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLastContacterNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLastContacterNotice));
  CMessageUpdateLastContacterNotice_descriptor_ = file->message_type(77);
  static const int CMessageUpdateLastContacterNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateLastContacterNotice, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateLastContacterNotice, receiverid_),
  };
  CMessageUpdateLastContacterNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdateLastContacterNotice_descriptor_,
      CMessageUpdateLastContacterNotice::default_instance_,
      CMessageUpdateLastContacterNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateLastContacterNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdateLastContacterNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdateLastContacterNotice));
  CMessageUploadContacterList_descriptor_ = file->message_type(78);
  static const int CMessageUploadContacterList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUploadContacterList, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUploadContacterList, contacterid_),
  };
  CMessageUploadContacterList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUploadContacterList_descriptor_,
      CMessageUploadContacterList::default_instance_,
      CMessageUploadContacterList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUploadContacterList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUploadContacterList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUploadContacterList));
  CMessageContacterStatusNotifyG2S_descriptor_ = file->message_type(79);
  static const int CMessageContacterStatusNotifyG2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContacterStatusNotifyG2S, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContacterStatusNotifyG2S, playerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContacterStatusNotifyG2S, contacterid_),
  };
  CMessageContacterStatusNotifyG2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageContacterStatusNotifyG2S_descriptor_,
      CMessageContacterStatusNotifyG2S::default_instance_,
      CMessageContacterStatusNotifyG2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContacterStatusNotifyG2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageContacterStatusNotifyG2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageContacterStatusNotifyG2S));
  CMessageRebuildSwornRequest_descriptor_ = file->message_type(80);
  static const int CMessageRebuildSwornRequest_offsets_[1] = {
  };
  CMessageRebuildSwornRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRebuildSwornRequest_descriptor_,
      CMessageRebuildSwornRequest::default_instance_,
      CMessageRebuildSwornRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRebuildSwornRequest));
  CMessageRebuildSwornResponse_descriptor_ = file->message_type(81);
  static const int CMessageRebuildSwornResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornResponse, errcode_),
  };
  CMessageRebuildSwornResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRebuildSwornResponse_descriptor_,
      CMessageRebuildSwornResponse::default_instance_,
      CMessageRebuildSwornResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRebuildSwornResponse));
  CMessageRebuildSwornNotify_descriptor_ = file->message_type(82);
  static const int CMessageRebuildSwornNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornNotify, swornmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornNotify, swornname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornNotify, newmember_),
  };
  CMessageRebuildSwornNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRebuildSwornNotify_descriptor_,
      CMessageRebuildSwornNotify::default_instance_,
      CMessageRebuildSwornNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRebuildSwornNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRebuildSwornNotify));
  FRIEND_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friendmessage_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendRequest_descriptor_, &CMessageInviteFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendRequestByName_descriptor_, &CMessageInviteFriendRequestByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendNotice_descriptor_, &CMessageInviteFriendNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendOptionRequest_descriptor_, &CMessageInviteFriendOptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendResponseMsg_descriptor_, &CMessageInviteFriendResponseMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageInviteFriendResponseNotice_descriptor_, &CMessageInviteFriendResponseNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDelFrientRequest_descriptor_, &CMessageDelFrientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendErrorNotice_descriptor_, &CMessageFriendErrorNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeFriendNotice_descriptor_, &CMessageChangeFriendNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFriendData_descriptor_, &SingleFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendGetListNotice_descriptor_, &CMessageFriendGetListNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendGetListRequest_descriptor_, &CMessageFriendGetListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendGroupNameNotice_descriptor_, &CMessageFriendGroupNameNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChangeStatusNotice_R_descriptor_, &CMessageFriendChangeStatusNotice_R::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChangeStatusNotice_descriptor_, &CMessageFriendChangeStatusNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChangeStatusRequest_descriptor_, &CMessageFriendChangeStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAddFriendNotice_descriptor_, &CMessageAddFriendNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChgGroupNameRequest_descriptor_, &CMessageFriendChgGroupNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChgFriendGroupRequest_descriptor_, &CMessageFriendChgFriendGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendSendMessageRequest_descriptor_, &CMessageFriendSendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendMessageNotice_descriptor_, &CMessageFriendMessageNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendMoveToBlackRequest_descriptor_, &CMessageFriendMoveToBlackRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendAddBlackRequest_descriptor_, &CMessageFriendAddBlackRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendChgFriendGroupNotice_descriptor_, &CMessageFriendChgFriendGroupNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendMoveToBlackNotice_descriptor_, &CMessageFriendMoveToBlackNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendLockEnemyRequest_descriptor_, &CMessageFriendLockEnemyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendGetFriendsStateRequest_descriptor_, &CMessageFriendGetFriendsStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendGetFriendsStateNotice_descriptor_, &CMessageFriendGetFriendsStateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendUpdateEnemyRequest_descriptor_, &CMessageFriendUpdateEnemyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeMasterRequest_descriptor_, &CMessageChangeMasterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeMasterResponse_descriptor_, &CMessageChangeMasterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeMasterNotify_descriptor_, &CMessageChangeMasterNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetSlaveRequest_descriptor_, &CMessageGetSlaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveInfo_descriptor_, &SlaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetSlaveResponse_descriptor_, &CMessageGetSlaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSlaveLevelUpNotify_descriptor_, &CMessageSlaveLevelUpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAnswerChangeNotify_descriptor_, &CMessageAnswerChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAnswerChangeRequest_descriptor_, &CMessageAnswerChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryPlayerRequest_descriptor_, &CMessageQueryPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageQueryPlayerResponse_descriptor_, &CMessageQueryPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSlaveOnOffNotify_descriptor_, &CMessageSlaveOnOffNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSlaveNumNotify_descriptor_, &CMessageSlaveNumNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveSlaveRequest_descriptor_, &CMessageRemoveSlaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveSlaveResponse_descriptor_, &CMessageRemoveSlaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveSlaveNotify_descriptor_, &CMessageRemoveSlaveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveMasterRequest_descriptor_, &CMessageRemoveMasterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveMasterResponse_descriptor_, &CMessageRemoveMasterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRemoveMasterNotify_descriptor_, &CMessageRemoveMasterNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAlterMasterPercentRequest_descriptor_, &CMessageAlterMasterPercentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageAlterMasterPercentResponse_descriptor_, &CMessageAlterMasterPercentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetLowPlayerRequest_descriptor_, &CMessageGetLowPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetLowPlayerResponse_descriptor_, &CMessageGetLowPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendLevelUpNotify_descriptor_, &CMessageFriendLevelUpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendBlessRequest_descriptor_, &CMessageFriendBlessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendBlessResponse_descriptor_, &CMessageFriendBlessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageFriendBlessNotify_descriptor_, &CMessageFriendBlessNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyIntimacyNogify_descriptor_, &CMessageModifyIntimacyNogify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageModifyLastTimeAllOnLineNotify_descriptor_, &CMessageModifyLastTimeAllOnLineNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateSwornTeamRequest_descriptor_, &CMessageCreateSwornTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateSwornTeamResponse_descriptor_, &CMessageCreateSwornTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveSwornTeamRequest_descriptor_, &CMessageLeaveSwornTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveSwornTeamResponse_descriptor_, &CMessageLeaveSwornTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickSwornMemberRequest_descriptor_, &CMessageKickSwornMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickSwornMemberResponse_descriptor_, &CMessageKickSwornMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandSwornTeamRequest_descriptor_, &CMessageDisbandSwornTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandSwornTeamResponse_descriptor_, &CMessageDisbandSwornTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSwornMember_descriptor_, &CMsgSwornMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSwornInfoNotify_descriptor_, &CMessageSwornInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageCreateSwornTeamNotify_descriptor_, &CMessageCreateSwornTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLeaveSwornTeamNotify_descriptor_, &CMessageLeaveSwornTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageKickSwornMemberNotify_descriptor_, &CMessageKickSwornMemberNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeSwornNameRequest_descriptor_, &CMessageChangeSwornNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeSwornNameResponse_descriptor_, &CMessageChangeSwornNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageChangeSwornNameNotify_descriptor_, &CMessageChangeSwornNameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageDisbandSwornTeamNotify_descriptor_, &CMessageDisbandSwornTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLatestContactChangeStatusNotice_descriptor_, &CMessageLatestContactChangeStatusNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLastContacterNotice_descriptor_, &CMessageLastContacterNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdateLastContacterNotice_descriptor_, &CMessageUpdateLastContacterNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUploadContacterList_descriptor_, &CMessageUploadContacterList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageContacterStatusNotifyG2S_descriptor_, &CMessageContacterStatusNotifyG2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRebuildSwornRequest_descriptor_, &CMessageRebuildSwornRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRebuildSwornResponse_descriptor_, &CMessageRebuildSwornResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRebuildSwornNotify_descriptor_, &CMessageRebuildSwornNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friendmessage_5fpb_2ehxx() {
  delete CMessageInviteFriendRequest::default_instance_;
  delete CMessageInviteFriendRequest_reflection_;
  delete CMessageInviteFriendRequestByName::default_instance_;
  delete CMessageInviteFriendRequestByName_reflection_;
  delete CMessageInviteFriendNotice::default_instance_;
  delete CMessageInviteFriendNotice_reflection_;
  delete CMessageInviteFriendOptionRequest::default_instance_;
  delete CMessageInviteFriendOptionRequest_reflection_;
  delete CMessageInviteFriendResponseMsg::default_instance_;
  delete CMessageInviteFriendResponseMsg_reflection_;
  delete CMessageInviteFriendResponseNotice::default_instance_;
  delete CMessageInviteFriendResponseNotice_reflection_;
  delete CMessageDelFrientRequest::default_instance_;
  delete CMessageDelFrientRequest_reflection_;
  delete CMessageFriendErrorNotice::default_instance_;
  delete CMessageFriendErrorNotice_reflection_;
  delete CMessageChangeFriendNotice::default_instance_;
  delete CMessageChangeFriendNotice_reflection_;
  delete SingleFriendData::default_instance_;
  delete SingleFriendData_reflection_;
  delete CMessageFriendGetListNotice::default_instance_;
  delete CMessageFriendGetListNotice_reflection_;
  delete CMessageFriendGetListRequest::default_instance_;
  delete CMessageFriendGetListRequest_reflection_;
  delete CMessageFriendGroupNameNotice::default_instance_;
  delete CMessageFriendGroupNameNotice_reflection_;
  delete CMessageFriendChangeStatusNotice_R::default_instance_;
  delete CMessageFriendChangeStatusNotice_R_reflection_;
  delete CMessageFriendChangeStatusNotice::default_instance_;
  delete CMessageFriendChangeStatusNotice_reflection_;
  delete CMessageFriendChangeStatusRequest::default_instance_;
  delete CMessageFriendChangeStatusRequest_reflection_;
  delete CMessageAddFriendNotice::default_instance_;
  delete CMessageAddFriendNotice_reflection_;
  delete CMessageFriendChgGroupNameRequest::default_instance_;
  delete CMessageFriendChgGroupNameRequest_reflection_;
  delete CMessageFriendChgFriendGroupRequest::default_instance_;
  delete CMessageFriendChgFriendGroupRequest_reflection_;
  delete CMessageFriendSendMessageRequest::default_instance_;
  delete CMessageFriendSendMessageRequest_reflection_;
  delete CMessageFriendMessageNotice::default_instance_;
  delete CMessageFriendMessageNotice_reflection_;
  delete CMessageFriendMoveToBlackRequest::default_instance_;
  delete CMessageFriendMoveToBlackRequest_reflection_;
  delete CMessageFriendAddBlackRequest::default_instance_;
  delete CMessageFriendAddBlackRequest_reflection_;
  delete CMessageFriendChgFriendGroupNotice::default_instance_;
  delete CMessageFriendChgFriendGroupNotice_reflection_;
  delete CMessageFriendMoveToBlackNotice::default_instance_;
  delete CMessageFriendMoveToBlackNotice_reflection_;
  delete CMessageFriendLockEnemyRequest::default_instance_;
  delete CMessageFriendLockEnemyRequest_reflection_;
  delete CMessageFriendGetFriendsStateRequest::default_instance_;
  delete CMessageFriendGetFriendsStateRequest_reflection_;
  delete CMessageFriendGetFriendsStateNotice::default_instance_;
  delete CMessageFriendGetFriendsStateNotice_reflection_;
  delete CMessageFriendUpdateEnemyRequest::default_instance_;
  delete CMessageFriendUpdateEnemyRequest_reflection_;
  delete CMessageChangeMasterRequest::default_instance_;
  delete CMessageChangeMasterRequest_reflection_;
  delete CMessageChangeMasterResponse::default_instance_;
  delete CMessageChangeMasterResponse_reflection_;
  delete CMessageChangeMasterNotify::default_instance_;
  delete CMessageChangeMasterNotify_reflection_;
  delete CMessageGetSlaveRequest::default_instance_;
  delete CMessageGetSlaveRequest_reflection_;
  delete SlaveInfo::default_instance_;
  delete SlaveInfo_reflection_;
  delete CMessageGetSlaveResponse::default_instance_;
  delete CMessageGetSlaveResponse_reflection_;
  delete CMessageSlaveLevelUpNotify::default_instance_;
  delete CMessageSlaveLevelUpNotify_reflection_;
  delete CMessageAnswerChangeNotify::default_instance_;
  delete CMessageAnswerChangeNotify_reflection_;
  delete CMessageAnswerChangeRequest::default_instance_;
  delete CMessageAnswerChangeRequest_reflection_;
  delete CMessageQueryPlayerRequest::default_instance_;
  delete CMessageQueryPlayerRequest_reflection_;
  delete CMessageQueryPlayerResponse::default_instance_;
  delete CMessageQueryPlayerResponse_reflection_;
  delete CMessageSlaveOnOffNotify::default_instance_;
  delete CMessageSlaveOnOffNotify_reflection_;
  delete CMessageSlaveNumNotify::default_instance_;
  delete CMessageSlaveNumNotify_reflection_;
  delete CMessageRemoveSlaveRequest::default_instance_;
  delete CMessageRemoveSlaveRequest_reflection_;
  delete CMessageRemoveSlaveResponse::default_instance_;
  delete CMessageRemoveSlaveResponse_reflection_;
  delete CMessageRemoveSlaveNotify::default_instance_;
  delete CMessageRemoveSlaveNotify_reflection_;
  delete CMessageRemoveMasterRequest::default_instance_;
  delete CMessageRemoveMasterRequest_reflection_;
  delete CMessageRemoveMasterResponse::default_instance_;
  delete CMessageRemoveMasterResponse_reflection_;
  delete CMessageRemoveMasterNotify::default_instance_;
  delete CMessageRemoveMasterNotify_reflection_;
  delete CMessageAlterMasterPercentRequest::default_instance_;
  delete CMessageAlterMasterPercentRequest_reflection_;
  delete CMessageAlterMasterPercentResponse::default_instance_;
  delete CMessageAlterMasterPercentResponse_reflection_;
  delete CMessageGetLowPlayerRequest::default_instance_;
  delete CMessageGetLowPlayerRequest_reflection_;
  delete CMessageGetLowPlayerResponse::default_instance_;
  delete CMessageGetLowPlayerResponse_reflection_;
  delete CMessageFriendLevelUpNotify::default_instance_;
  delete CMessageFriendLevelUpNotify_reflection_;
  delete CMessageFriendBlessRequest::default_instance_;
  delete CMessageFriendBlessRequest_reflection_;
  delete CMessageFriendBlessResponse::default_instance_;
  delete CMessageFriendBlessResponse_reflection_;
  delete CMessageFriendBlessNotify::default_instance_;
  delete CMessageFriendBlessNotify_reflection_;
  delete CMessageModifyIntimacyNogify::default_instance_;
  delete CMessageModifyIntimacyNogify_reflection_;
  delete CMessageModifyLastTimeAllOnLineNotify::default_instance_;
  delete CMessageModifyLastTimeAllOnLineNotify_reflection_;
  delete CMessageCreateSwornTeamRequest::default_instance_;
  delete CMessageCreateSwornTeamRequest_reflection_;
  delete CMessageCreateSwornTeamResponse::default_instance_;
  delete CMessageCreateSwornTeamResponse_reflection_;
  delete CMessageLeaveSwornTeamRequest::default_instance_;
  delete CMessageLeaveSwornTeamRequest_reflection_;
  delete CMessageLeaveSwornTeamResponse::default_instance_;
  delete CMessageLeaveSwornTeamResponse_reflection_;
  delete CMessageKickSwornMemberRequest::default_instance_;
  delete CMessageKickSwornMemberRequest_reflection_;
  delete CMessageKickSwornMemberResponse::default_instance_;
  delete CMessageKickSwornMemberResponse_reflection_;
  delete CMessageDisbandSwornTeamRequest::default_instance_;
  delete CMessageDisbandSwornTeamRequest_reflection_;
  delete CMessageDisbandSwornTeamResponse::default_instance_;
  delete CMessageDisbandSwornTeamResponse_reflection_;
  delete CMsgSwornMember::default_instance_;
  delete CMsgSwornMember_reflection_;
  delete CMessageSwornInfoNotify::default_instance_;
  delete CMessageSwornInfoNotify_reflection_;
  delete CMessageCreateSwornTeamNotify::default_instance_;
  delete CMessageCreateSwornTeamNotify_reflection_;
  delete CMessageLeaveSwornTeamNotify::default_instance_;
  delete CMessageLeaveSwornTeamNotify_reflection_;
  delete CMessageKickSwornMemberNotify::default_instance_;
  delete CMessageKickSwornMemberNotify_reflection_;
  delete CMessageChangeSwornNameRequest::default_instance_;
  delete CMessageChangeSwornNameRequest_reflection_;
  delete CMessageChangeSwornNameResponse::default_instance_;
  delete CMessageChangeSwornNameResponse_reflection_;
  delete CMessageChangeSwornNameNotify::default_instance_;
  delete CMessageChangeSwornNameNotify_reflection_;
  delete CMessageDisbandSwornTeamNotify::default_instance_;
  delete CMessageDisbandSwornTeamNotify_reflection_;
  delete CMessageLatestContactChangeStatusNotice::default_instance_;
  delete CMessageLatestContactChangeStatusNotice_reflection_;
  delete CMessageLastContacterNotice::default_instance_;
  delete CMessageLastContacterNotice_reflection_;
  delete CMessageUpdateLastContacterNotice::default_instance_;
  delete CMessageUpdateLastContacterNotice_reflection_;
  delete CMessageUploadContacterList::default_instance_;
  delete CMessageUploadContacterList_reflection_;
  delete CMessageContacterStatusNotifyG2S::default_instance_;
  delete CMessageContacterStatusNotifyG2S_reflection_;
  delete CMessageRebuildSwornRequest::default_instance_;
  delete CMessageRebuildSwornRequest_reflection_;
  delete CMessageRebuildSwornResponse::default_instance_;
  delete CMessageRebuildSwornResponse_reflection_;
  delete CMessageRebuildSwornNotify::default_instance_;
  delete CMessageRebuildSwornNotify_reflection_;
}

void protobuf_AddDesc_friendmessage_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_coremessage_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024friendmessage_pb.hxx\032\022coremessage_pb.h"
    "xx\"/\n\033CMessageInviteFriendRequest\022\020\n\010Pla"
    "yerID\030\001 \001(\r\">\n!CMessageInviteFriendReque"
    "stByName\022\031\n\021InvitedPlayerName\030\001 \001(\t\"\251\001\n\032"
    "CMessageInviteFriendNotice\022\037\n\006Router\030\001 \001"
    "(\0132\017.CMessageRouter\022\017\n\007SrcHead\030\002 \001(\r\022\021\n\t"
    "SrcCharID\030\003 \001(\r\022\021\n\tSrcMetier\030\004 \001(\r\022\020\n\010Sr"
    "cLevel\030\005 \001(\r\022\016\n\006SrcSex\030\006 \001(\r\022\021\n\tDesCharI"
    "D\030\007 \001(\r\"P\n!CMessageInviteFriendOptionReq"
    "uest\022\030\n\020InvitingPlayerID\030\001 \001(\r\022\021\n\tAgreeC"
    "ode\030\002 \001(\r\"\375\001\n\037CMessageInviteFriendRespon"
    "seMsg\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\024"
    "\n\014IsDesInMyLst\030\002 \001(\r\022\036\n\026BeInvitingPlayer"
    "Nation\030\003 \001(\r\022\034\n\024BeInvitingPlayerHead\030\004 \001"
    "(\r\022\034\n\024BeInvitingPlayerName\030\005 \001(\t\022\033\n\023BeIn"
    "vitingPlayerSex\030\006 \001(\r\022\027\n\017IsFriendLstFull"
    "\030\007 \001(\r\022\021\n\tAgreeCode\030\010 \001(\r\"U\n\"CMessageInv"
    "iteFriendResponseNotice\022\034\n\024BeInvitingPla"
    "yerName\030\001 \001(\t\022\021\n\tAgreeCode\030\002 \001(\r\"8\n\030CMes"
    "sageDelFrientRequest\022\014\n\004Type\030\001 \001(\r\022\016\n\006Ch"
    "arID\030\002 \001(\r\"O\n\031CMessageFriendErrorNotice\022"
    "\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\021\n\tErro"
    "rCode\030\002 \001(\005\"\241\002\n\032CMessageChangeFriendNoti"
    "ce\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\014\n\004N"
    "ame\030\002 \001(\t\022\020\n\010NationID\030\003 \001(\r\022\013\n\003Sex\030\004 \001(\r"
    "\022\017\n\007ReltoMe\030\005 \001(\r\022\017\n\007OprCode\030\006 \001(\r\022\021\n\tTi"
    "meOrder\030\007 \001(\r\022\016\n\006IsLock\030\010 \001(\r\022\016\n\006Status\030"
    "\t \001(\r\022\016\n\006CharID\030\n \001(\r\022\020\n\010BeKilled\030\013 \001(\r\022"
    "\016\n\006Killed\030\014 \001(\r\022\014\n\004Head\030\r \001(\r\022\017\n\007GroupID"
    "\030\016 \001(\r\022\017\n\007VipFlag\030\017 \001(\r\"\376\001\n\020SingleFriend"
    "Data\022\020\n\010BeKilled\030\001 \001(\r\022\014\n\004Head\030\002 \001(\r\022\016\n\006"
    "Status\030\003 \001(\r\022\017\n\007GroupID\030\004 \001(\r\022\016\n\006CharID\030"
    "\005 \001(\r\022\014\n\004Name\030\006 \001(\t\022\020\n\010NationID\030\007 \001(\r\022\020\n"
    "\010Relation\030\010 \001(\r\022\013\n\003Sex\030\t \001(\r\022\016\n\006IsLock\030\n"
    " \001(\r\022\021\n\tTimeOrder\030\013 \001(\r\022\016\n\006Killed\030\014 \001(\r\022"
    "\017\n\007VipFlag\030\r \001(\r\022\026\n\016IntimacyDegree\030\016 \001(\r"
    "\"T\n\033CMessageFriendGetListNotice\022\"\n\007Frien"
    "ds\030\001 \003(\0132\021.SingleFriendData\022\021\n\tGroupName"
    "\030\002 \003(\t\"\036\n\034CMessageFriendGetListRequest\"C"
    "\n\035CMessageFriendGroupNameNotice\022\017\n\007Group"
    "ID\030\001 \003(\r\022\021\n\tGroupName\030\002 \003(\t\"t\n\"CMessageF"
    "riendChangeStatusNotice_R\022\037\n\006Router\030\001 \001("
    "\0132\017.CMessageRouter\022\016\n\006Status\030\002 \001(\r\022\014\n\004Re"
    "ls\030\003 \001(\r\022\017\n\007VipFlag\030\004 \001(\r\"a\n CMessageFri"
    "endChangeStatusNotice\022\016\n\006CharID\030\001 \001(\r\022\016\n"
    "\006Status\030\002 \001(\r\022\014\n\004Rels\030\003 \001(\r\022\017\n\007VipFlag\030\004"
    " \001(\r\"3\n!CMessageFriendChangeStatusReques"
    "t\022\016\n\006Status\030\001 \001(\r\"|\n\027CMessageAddFriendNo"
    "tice\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\016\n"
    "\006CharID\030\002 \001(\r\022\017\n\007ReltoMe\030\003 \001(\r\022\016\n\006Status"
    "\030\004 \001(\r\022\017\n\007GroupID\030\005 \001(\r\"E\n!CMessageFrien"
    "dChgGroupNameRequest\022\017\n\007NewName\030\001 \001(\t\022\017\n"
    "\007GroupID\030\002 \001(\r\"I\n#CMessageFriendChgFrien"
    "dGroupRequest\022\016\n\006CharID\030\001 \001(\r\022\022\n\nDesGrou"
    "pID\030\002 \001(\r\"Q\n CMessageFriendSendMessageRe"
    "quest\022\013\n\003Msg\030\001 \001(\t\022\016\n\006CharID\030\002 \001(\r\022\020\n\010Au"
    "toFlag\030\003 \001(\r\"\272\001\n\033CMessageFriendMessageNo"
    "tice\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\020\n"
    "\010AutoFlag\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\013\n\003Sex\030\004"
    " \001(\r\022\013\n\003Msg\030\005 \001(\t\022\016\n\006FaceID\030\006 \001(\r\022\014\n\004Nam"
    "e\030\007 \001(\t\022\020\n\010SendTime\030\022 \001(\r\022\016\n\006CampID\030\023 \001("
    "\r\"2\n CMessageFriendMoveToBlackRequest\022\016\n"
    "\006CharID\030\001 \001(\r\"0\n\035CMessageFriendAddBlackR"
    "equest\022\017\n\007DesName\030\001 \001(\t\"H\n\"CMessageFrien"
    "dChgFriendGroupNotice\022\016\n\006CharID\030\001 \001(\r\022\022\n"
    "\nDesGroupID\030\002 \001(\r\"1\n\037CMessageFriendMoveT"
    "oBlackNotice\022\016\n\006CharID\030\001 \001(\r\"B\n\036CMessage"
    "FriendLockEnemyRequest\022\016\n\006CharID\030\001 \001(\r\022\020"
    "\n\010LockType\030\002 \001(\r\"&\n$CMessageFriendGetFri"
    "endsStateRequest\"e\n#CMessageFriendGetFri"
    "endsStateNotice\022\016\n\006States\030\001 \003(\r\022\014\n\004Rels\030"
    "\002 \003(\r\022\017\n\007CharIDs\030\003 \003(\r\022\017\n\007VipFlag\030\004 \003(\r\""
    "P\n CMessageFriendUpdateEnemyRequest\022\024\n\014K"
    "illerCharID\030\001 \001(\r\022\026\n\016DelEnemyCharID\030\002 \001("
    "\r\"h\n\033CMessageChangeMasterRequest\022\022\n\nMast"
    "erName\030\001 \001(\t\022\016\n\006CharID\030\002 \001(\r\022\023\n\013NPCEntit"
    "yID\030\003 \001(\r\022\020\n\010MasterID\030\004 \003(\r\"\203\001\n\034CMessage"
    "ChangeMasterResponse\022\016\n\006Result\030\001 \001(\r\022\020\n\010"
    "MasterID\030\002 \001(\r\022\022\n\nMasterName\030\003 \001(\t\022\016\n\006Ch"
    "arID\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\016\n\006Metier\030\006 \001("
    "\r\"G\n\032CMessageChangeMasterNotify\022\031\n\005Slave"
    "\030\001 \001(\0132\n.SlaveInfo\022\016\n\006CharID\030\002 \001(\r\"a\n\027CM"
    "essageGetSlaveRequest\022\017\n\007SlaveID\030\001 \003(\r\022\016"
    "\n\006CharID\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001(\r\022\020\n\010M"
    "asterID\030\004 \003(\r\"y\n\tSlaveInfo\022\017\n\007SlaveID\030\001 "
    "\001(\r\022\021\n\tSlaveName\030\002 \001(\t\022\r\n\005Level\030\003 \001(\r\022\016\n"
    "\006Metier\030\004 \001(\r\022\014\n\004Face\030\005 \001(\r\022\013\n\003Sex\030\006 \001(\r"
    "\022\016\n\006Online\030\007 \001(\r\"q\n\030CMessageGetSlaveResp"
    "onse\022\016\n\006Result\030\001 \001(\r\022\031\n\005Slave\030\002 \003(\0132\n.Sl"
    "aveInfo\022\016\n\006CharID\030\003 \001(\r\022\032\n\006Master\030\004 \003(\0132"
    "\n.SlaveInfo\"G\n\032CMessageSlaveLevelUpNotif"
    "y\022\031\n\005Slave\030\001 \001(\0132\n.SlaveInfo\022\016\n\006CharID\030\002"
    " \001(\r\"G\n\032CMessageAnswerChangeNotify\022\031\n\005Sl"
    "ave\030\001 \001(\0132\n.SlaveInfo\022\016\n\006CharID\030\002 \001(\r\"]\n"
    "\033CMessageAnswerChangeRequest\022\016\n\006Result\030\001"
    " \001(\r\022\016\n\006CharID\030\002 \001(\r\022\017\n\007SlaveID\030\003 \001(\r\022\r\n"
    "\005Error\030\004 \001(\r\"=\n\032CMessageQueryPlayerReque"
    "st\022\017\n\007QueryID\030\001 \003(\r\022\016\n\006CharID\030\002 \001(\r\"G\n\033C"
    "MessageQueryPlayerResponse\022\030\n\004Info\030\001 \003(\013"
    "2\n.SlaveInfo\022\016\n\006CharID\030\002 \001(\r\"t\n\030CMessage"
    "SlaveOnOffNotify\022\021\n\tSrcCharID\030\001 \001(\r\022\023\n\013S"
    "rcCharName\030\002 \001(\t\022\016\n\006Online\030\003 \001(\r\022\021\n\tDesC"
    "harID\030\004 \003(\r\022\r\n\005Level\030\005 \001(\r\"~\n\026CMessageSl"
    "aveNumNotify\022\022\n\nSlaveValue\030\001 \003(\r\022\022\n\nSlav"
    "ePoint\030\002 \001(\r\022\023\n\013MasterPoint\030\003 \001(\r\022\022\n\nSla"
    "veTotal\030\004 \001(\r\022\023\n\013MasterTotal\030\005 \001(\r\"R\n\032CM"
    "essageRemoveSlaveRequest\022\017\n\007SlaveID\030\001 \001("
    "\r\022\016\n\006CharID\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001(\r\"]"
    "\n\033CMessageRemoveSlaveResponse\022\016\n\006Result\030"
    "\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\017\n\007SlaveID\030\003 \001(\r\022\r"
    "\n\005Param\030\004 \001(\r\"=\n\031CMessageRemoveSlaveNoti"
    "fy\022\016\n\006CharID\030\001 \001(\r\022\020\n\010MasterID\030\002 \001(\r\"T\n\033"
    "CMessageRemoveMasterRequest\022\020\n\010MasterID\030"
    "\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\023\n\013NPCEntityID\030\003 \001"
    "(\r\"P\n\034CMessageRemoveMasterResponse\022\016\n\006Re"
    "sult\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\020\n\010MasterID\030\003"
    " \001(\r\"L\n\032CMessageRemoveMasterNotify\022\016\n\006Ch"
    "arID\030\001 \001(\r\022\017\n\007SlaveID\030\002 \001(\r\022\r\n\005Param\030\003 \001"
    "(\r\"F\n!CMessageAlterMasterPercentRequest\022"
    "\020\n\010MasterID\030\001 \001(\r\022\017\n\007Percent\030\002 \001(\r\"W\n\"CM"
    "essageAlterMasterPercentResponse\022\016\n\006Resu"
    "lt\030\001 \001(\r\022\020\n\010MasterID\030\002 \001(\r\022\017\n\007Percent\030\003 "
    "\001(\r\"2\n\033CMessageGetLowPlayerRequest\022\023\n\013NP"
    "CEntityID\030\001 \001(\r\"h\n\034CMessageGetLowPlayerR"
    "esponse\022\016\n\006Result\030\001 \001(\r\022\032\n\006Player\030\002 \003(\0132"
    "\n.SlaveInfo\022\034\n\010Required\030\003 \003(\0132\n.SlaveInf"
    "o\"k\n\033CMessageFriendLevelUpNotify\022\037\n\006Rout"
    "er\030\001 \001(\0132\017.CMessageRouter\022\r\n\005Level\030\002 \001(\r"
    "\022\014\n\004Name\030\003 \001(\t\022\016\n\006RoleID\030\004 \001(\r\",\n\032CMessa"
    "geFriendBlessRequest\022\016\n\006RoleID\030\001 \001(\r\".\n\033"
    "CMessageFriendBlessResponse\022\017\n\007Errcode\030\001"
    " \001(\r\"]\n\031CMessageFriendBlessNotify\022\037\n\006Rou"
    "ter\030\001 \001(\0132\017.CMessageRouter\022\022\n\nFriendName"
    "\030\002 \001(\t\022\013\n\003Exp\030\003 \001(\r\"\267\001\n\034CMessageModifyIn"
    "timacyNogify\022\037\n\006Router\030\001 \001(\0132\017.CMessageR"
    "outer\022\023\n\013ChangeValue\030\002 \001(\r\022\026\n\016IntimacyDe"
    "gree\030\003 \001(\r\022\014\n\004Type\030\004 \001(\r\022\020\n\010FriendID\030\005 \001"
    "(\r\022\022\n\nUpdateTime\030\007 \001(\r\022\025\n\rDailyIntimacy\030"
    "\010 \001(\r\"h\n%CMessageModifyLastTimeAllOnLine"
    "Notify\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022"
    "\014\n\004Time\030\002 \001(\r\022\020\n\010FriendID\030\003 \001(\r\"3\n\036CMess"
    "ageCreateSwornTeamRequest\022\021\n\tSwornName\030\001"
    " \001(\t\"2\n\037CMessageCreateSwornTeamResponse\022"
    "\017\n\007Errcode\030\001 \001(\r\"\037\n\035CMessageLeaveSwornTe"
    "amRequest\"1\n\036CMessageLeaveSwornTeamRespo"
    "nse\022\017\n\007Errcode\030\001 \001(\r\"0\n\036CMessageKickSwor"
    "nMemberRequest\022\016\n\006RoleID\030\001 \001(\r\"2\n\037CMessa"
    "geKickSwornMemberResponse\022\017\n\007Errcode\030\001 \001"
    "(\r\"!\n\037CMessageDisbandSwornTeamRequest\"3\n"
    " CMessageDisbandSwornTeamResponse\022\017\n\007Err"
    "code\030\001 \001(\r\"\213\001\n\017CMsgSwornMember\022\016\n\006RoleID"
    "\030\001 \001(\r\022\020\n\010RoleName\030\002 \001(\t\022\017\n\007RolePos\030\003 \001("
    "\r\022\016\n\006FaceID\030\004 \001(\r\022\021\n\tRoleLevel\030\005 \001(\r\022\020\n\010"
    "MetierID\030\006 \001(\r\022\020\n\010GenderID\030\007 \001(\r\"c\n\027CMes"
    "sageSwornInfoNotify\022%\n\013SwornMember\030\001 \003(\013"
    "2\020.CMsgSwornMember\022\021\n\tSwornName\030\002 \001(\t\022\016\n"
    "\006RoleID\030\003 \001(\r\"k\n\035CMessageCreateSwornTeam"
    "Notify\022%\n\013SwornMember\030\001 \003(\0132\020.CMsgSwornM"
    "ember\022\021\n\tSwornName\030\002 \001(\t\022\020\n\010MasterID\030\003 \001"
    "(\r\"a\n\034CMessageLeaveSwornTeamNotify\022\037\n\006Ro"
    "uter\030\001 \001(\0132\017.CMessageRouter\022\016\n\006RoleID\030\002 "
    "\001(\r\022\020\n\010MasterID\030\003 \001(\r\"P\n\035CMessageKickSwo"
    "rnMemberNotify\022\037\n\006Router\030\001 \001(\0132\017.CMessag"
    "eRouter\022\016\n\006RoleID\030\002 \001(\r\"3\n\036CMessageChang"
    "eSwornNameRequest\022\021\n\tSwornName\030\001 \001(\t\"2\n\037"
    "CMessageChangeSwornNameResponse\022\017\n\007Errco"
    "de\030\001 \001(\r\"S\n\035CMessageChangeSwornNameNotif"
    "y\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter\022\021\n\tSw"
    "ornName\030\002 \001(\t\"R\n\036CMessageDisbandSwornTea"
    "mNotify\022\037\n\006Router\030\001 \001(\0132\017.CMessageRouter"
    "\022\017\n\007SwornID\030\002 \001(\r\"Z\n\'CMessageLatestConta"
    "ctChangeStatusNotice\022\016\n\006CharID\030\001 \001(\r\022\016\n\006"
    "Status\030\002 \001(\r\022\017\n\007VipFlag\030\003 \001(\r\"\213\001\n\033CMessa"
    "geLastContacterNotice\022\037\n\006Router\030\001 \001(\0132\017."
    "CMessageRouter\022\016\n\006CharID\030\002 \001(\r\022\013\n\003Sex\030\003 "
    "\001(\r\022\016\n\006FaceID\030\004 \001(\r\022\014\n\004Name\030\005 \001(\t\022\020\n\010Nat"
    "ionID\030\006 \001(\r\"I\n!CMessageUpdateLastContact"
    "erNotice\022\020\n\010SenderID\030\001 \001(\r\022\022\n\nReceiverID"
    "\030\002 \001(\r\"D\n\033CMessageUploadContacterList\022\020\n"
    "\010PlayerID\030\001 \001(\r\022\023\n\013ContacterID\030\002 \003(\r\"_\n "
    "CMessageContacterStatusNotifyG2S\022\020\n\010Play"
    "erID\030\001 \001(\r\022\024\n\014PlayerStatus\030\002 \001(\r\022\023\n\013Cont"
    "acterID\030\003 \001(\r\"\035\n\033CMessageRebuildSwornReq"
    "uest\"/\n\034CMessageRebuildSwornResponse\022\017\n\007"
    "Errcode\030\001 \001(\r\"i\n\032CMessageRebuildSwornNot"
    "ify\022%\n\013SwornMember\030\001 \003(\0132\020.CMsgSwornMemb"
    "er\022\021\n\tSwornName\030\002 \001(\t\022\021\n\tNewMember\030\003 \003(\r"
    "*\363\026\n\rFRIEND_MSG_ID\022!\n\034ID_C2S_FRIEND_INVI"
    "TE_REQUEST\020\2000\022\"\n\035ID_S2C_FRIEND_INVITE_NO"
    "TICE_R\020\2014\022 \n\033ID_C2S_FRIEND_INVITE_OPTION"
    "\020\2020\022$\n\037ID_S2S_FRIEND_INVITE_RESPONSE_R\020\203"
    "4\022)\n$ID_S2C_FRIEND_INVITE_RESPONSE_NOTIC"
    "E\020\2040\022\036\n\031ID_C2S_FRIEND_DEL_REQUEST\020\2050\022!\n\034"
    "ID_S2C_FRIEND_ERRCODE_NOTICE\020\2064\022\'\n\"ID_S2"
    "C_FRIEND_CHANGE_FRIEND_NOTICE\020\2074\022!\n\034ID_S"
    "2C_FRIEND_GETLIST_NOTICE\020\2100\022\"\n\035ID_C2S_FR"
    "IEND_GETLIST_REQUEST\020\2110\022#\n\036ID_S2C_FRIEND"
    "_GROUPNAME_NOTICE\020\2130\022(\n#ID_S2S_FRIEND_CH"
    "ANGESTATUS_NOTICE_R\020\2144\022\'\n\"ID_C2S_FRIEND_"
    "CHANGESTATUS_REQUEST\020\2150\022&\n!ID_S2C_FRIEND"
    "_CHANGESTATUS_NOTICE\020\2160\022#\n\036ID_S2S_FRIEND"
    "_ADDFRIEND_NOTICE\020\2174\022\'\n\"ID_C2S_FRIEND_CH"
    "GGROUPNAME_REQUEST\020\2200\022)\n$ID_C2S_FRIEND_C"
    "HGFRIENDGROUP_REQUEST\020\2210\022&\n!ID_C2S_FRIEN"
    "D_SENDMESSAGE_REQUEST\020\2220\022#\n\036ID_S2C_FRIEN"
    "D_MESSAGE_NOTICE_R\020\2234\022&\n!ID_C2S_FRIEND_M"
    "OVETOBLACK_REQUEST\020\2240\022#\n\036ID_C2S_FRIEND_A"
    "DDBLACK_REQUEST\020\2250\022(\n#ID_S2C_FRIEND_CHGF"
    "RIENDGROUP_NOTICE\020\2260\022%\n ID_S2C_FRIEND_MO"
    "VETOBLACK_NOTICE\020\2270\022$\n\037ID_C2S_FRIEND_LOC"
    "KENEMY_REQUEST\020\2300\022*\n%ID_C2S_FRIEND_GETFR"
    "IENDSSTATE_REQUEST\020\2310\022)\n$ID_S2C_FRIEND_G"
    "ETFRIENDSSTATE_NOTICE\020\2320\022&\n!ID_C2S_FRIEN"
    "D_UPDATEENEMY_REQUEST\020\2330\022*\n%ID_C2S_FRIEN"
    "D_ADDFRIENDBYNAME_REQUEST\020\2340\022 \n\033ID_C2S_R"
    "EQUEST_CHANGEMASTER\020\2350\022!\n\034ID_S2C_RESPONS"
    "E_CHANGEMASTER\020\2400\022\037\n\032ID_S2C_NOTIFY_CHANG"
    "EMASTER\020\2410\022\034\n\027ID_C2S_REQUEST_GETSLAVE\020\2420"
    "\022\035\n\030ID_S2C_RESPONSE_GETSLAVE\020\2430\022\037\n\032ID_S2"
    "C_NOTIFY_SLAVELEVELUP\020\2440\022\037\n\032ID_S2C_NOTIF"
    "Y_ANSWERCHANGE\020\2450\022\037\n\032ID_C2S_REQUEST_QUER"
    "YPLAYER\020\2460\022 \n\033ID_S2C_RESPONSE_QUERYPLAYE"
    "R\020\2470\022\035\n\030ID_S2C_NOTIFY_SLAVEONOFF\020\2500\022\033\n\026I"
    "D_S2C_NOTIFY_SLAVENUM\020\2510\022\037\n\032ID_C2S_REQUE"
    "ST_REMOVESLAVE\020\2520\022 \n\033ID_S2C_RESPONSE_REM"
    "OVESLAVE\020\2530\022\036\n\031ID_S2C_NOTIFY_REMOVESLAVE"
    "\020\2540\022 \n\033ID_C2S_REQUEST_REMOVEMASTER\020\2550\022!\n"
    "\034ID_S2C_RESPONSE_REMOVEMASTER\020\2560\022\037\n\032ID_S"
    "2C_NOTIFY_REMOVEMASTER\020\2570\022&\n!ID_C2S_REQU"
    "EST_ALTERMASTERPERCENT\020\2600\022\'\n\"ID_S2C_RESP"
    "ONSE_ALTERMASTERPERCENT\020\2610\022 \n\033ID_C2S_REQ"
    "UEST_GETLOWPLAYER\020\2620\022!\n\034ID_S2C_RESPONSE_"
    "GETLOWPLAYER\020\2630\022 \n\033ID_C2S_REQUEST_ANSWER"
    "CHANGE\020\2640\022 \n\033ID_S2C_NOTIFY_FRIENDLEVELUP"
    "\020\2654\022\037\n\032ID_C2S_REQUEST_FRIENDBLESS\020\2660\022 \n\033"
    "ID_S2C_RESPONSE_FRIENDBLESS\020\2670\022\036\n\031ID_S2S"
    "_NOTIFY_FRIENDBLESS\020\2704\022!\n\034ID_S2S_NOTIFY_"
    "MODIFYINTIMACY\020\2710\022*\n%ID_S2S_NOTIFY_MODIF"
    "YLASTTIMEALLONLINE\020\2720\022#\n\036ID_C2S_REQUEST_"
    "CREATESWORNTEAM\020\2730\022$\n\037ID_S2C_RESPONSE_CR"
    "EATESWORNTEAM\020\2740\022\"\n\035ID_C2S_REQUEST_LEAVE"
    "SWORNTEAM\020\2750\022#\n\036ID_S2C_RESPONSE_LEAVESWO"
    "RNTEAM\020\2760\022#\n\036ID_C2S_REQUEST_KICKSWORNMEM"
    "BER\020\3000\022$\n\037ID_S2C_RESPONSE_KICKSWORNMEMBE"
    "R\020\3010\022$\n\037ID_C2S_REQUEST_DISBANDSWORNTEAM\020"
    "\3020\022%\n ID_S2C_RESPONSE_DISBANDSWORNTEAM\020\303"
    "0\022\034\n\027ID_S2C_NOTIFY_SWORNINFO\020\3040\022!\n\034ID_S2"
    "C_NOTIFY_LEAVESWORNTEAM\020\3050\022\"\n\035ID_S2C_NOT"
    "IFY_KICKSWORNMEMBER\020\3060\022#\n\036ID_C2S_REQUEST"
    "_CHANGESWORNNAME\020\3070\022$\n\037ID_S2C_RESPONSE_C"
    "HANGESWORNNAME\020\3100\022\"\n\035ID_S2C_NOTIFY_CHANG"
    "ESWORNNAME\020\3110\022#\n\036ID_S2C_NOTIFY_DISBANDSW"
    "ORNTEAM\020\3120\022\"\n\035ID_S2C_NOTIFY_CREATESWORNT"
    "EAM\020\3130\022 \n\033ID_S2C_NOTIFY_LASTCONTACTER\020\3144"
    "\022&\n!ID_S2G_NOTIFY_UPDATELASTCONTACTER\020\3150"
    "\022&\n!ID_S2G_NOTIFY_UPLOADCONTACTERLIST\020\3160"
    "\022\"\n\035ID_G2S_NOTIFY_CONTACTERSTATUS\020\3200\022\"\n\035"
    "ID_S2C_NOTIFY_CONTACTERSTATUS\020\3210\022 \n\033ID_C"
    "2S_REQUEST_REBUILDSWORN\020\3220\022!\n\034ID_S2C_RES"
    "PONSE_REBUILDSWORN\020\3230\022\037\n\032ID_S2C_NOTIFY_R"
    "EBUILDSWORN\020\3240B\002H\001", 10418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friendmessage_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageInviteFriendRequest::default_instance_ = new CMessageInviteFriendRequest();
  CMessageInviteFriendRequestByName::default_instance_ = new CMessageInviteFriendRequestByName();
  CMessageInviteFriendNotice::default_instance_ = new CMessageInviteFriendNotice();
  CMessageInviteFriendOptionRequest::default_instance_ = new CMessageInviteFriendOptionRequest();
  CMessageInviteFriendResponseMsg::default_instance_ = new CMessageInviteFriendResponseMsg();
  CMessageInviteFriendResponseNotice::default_instance_ = new CMessageInviteFriendResponseNotice();
  CMessageDelFrientRequest::default_instance_ = new CMessageDelFrientRequest();
  CMessageFriendErrorNotice::default_instance_ = new CMessageFriendErrorNotice();
  CMessageChangeFriendNotice::default_instance_ = new CMessageChangeFriendNotice();
  SingleFriendData::default_instance_ = new SingleFriendData();
  CMessageFriendGetListNotice::default_instance_ = new CMessageFriendGetListNotice();
  CMessageFriendGetListRequest::default_instance_ = new CMessageFriendGetListRequest();
  CMessageFriendGroupNameNotice::default_instance_ = new CMessageFriendGroupNameNotice();
  CMessageFriendChangeStatusNotice_R::default_instance_ = new CMessageFriendChangeStatusNotice_R();
  CMessageFriendChangeStatusNotice::default_instance_ = new CMessageFriendChangeStatusNotice();
  CMessageFriendChangeStatusRequest::default_instance_ = new CMessageFriendChangeStatusRequest();
  CMessageAddFriendNotice::default_instance_ = new CMessageAddFriendNotice();
  CMessageFriendChgGroupNameRequest::default_instance_ = new CMessageFriendChgGroupNameRequest();
  CMessageFriendChgFriendGroupRequest::default_instance_ = new CMessageFriendChgFriendGroupRequest();
  CMessageFriendSendMessageRequest::default_instance_ = new CMessageFriendSendMessageRequest();
  CMessageFriendMessageNotice::default_instance_ = new CMessageFriendMessageNotice();
  CMessageFriendMoveToBlackRequest::default_instance_ = new CMessageFriendMoveToBlackRequest();
  CMessageFriendAddBlackRequest::default_instance_ = new CMessageFriendAddBlackRequest();
  CMessageFriendChgFriendGroupNotice::default_instance_ = new CMessageFriendChgFriendGroupNotice();
  CMessageFriendMoveToBlackNotice::default_instance_ = new CMessageFriendMoveToBlackNotice();
  CMessageFriendLockEnemyRequest::default_instance_ = new CMessageFriendLockEnemyRequest();
  CMessageFriendGetFriendsStateRequest::default_instance_ = new CMessageFriendGetFriendsStateRequest();
  CMessageFriendGetFriendsStateNotice::default_instance_ = new CMessageFriendGetFriendsStateNotice();
  CMessageFriendUpdateEnemyRequest::default_instance_ = new CMessageFriendUpdateEnemyRequest();
  CMessageChangeMasterRequest::default_instance_ = new CMessageChangeMasterRequest();
  CMessageChangeMasterResponse::default_instance_ = new CMessageChangeMasterResponse();
  CMessageChangeMasterNotify::default_instance_ = new CMessageChangeMasterNotify();
  CMessageGetSlaveRequest::default_instance_ = new CMessageGetSlaveRequest();
  SlaveInfo::default_instance_ = new SlaveInfo();
  CMessageGetSlaveResponse::default_instance_ = new CMessageGetSlaveResponse();
  CMessageSlaveLevelUpNotify::default_instance_ = new CMessageSlaveLevelUpNotify();
  CMessageAnswerChangeNotify::default_instance_ = new CMessageAnswerChangeNotify();
  CMessageAnswerChangeRequest::default_instance_ = new CMessageAnswerChangeRequest();
  CMessageQueryPlayerRequest::default_instance_ = new CMessageQueryPlayerRequest();
  CMessageQueryPlayerResponse::default_instance_ = new CMessageQueryPlayerResponse();
  CMessageSlaveOnOffNotify::default_instance_ = new CMessageSlaveOnOffNotify();
  CMessageSlaveNumNotify::default_instance_ = new CMessageSlaveNumNotify();
  CMessageRemoveSlaveRequest::default_instance_ = new CMessageRemoveSlaveRequest();
  CMessageRemoveSlaveResponse::default_instance_ = new CMessageRemoveSlaveResponse();
  CMessageRemoveSlaveNotify::default_instance_ = new CMessageRemoveSlaveNotify();
  CMessageRemoveMasterRequest::default_instance_ = new CMessageRemoveMasterRequest();
  CMessageRemoveMasterResponse::default_instance_ = new CMessageRemoveMasterResponse();
  CMessageRemoveMasterNotify::default_instance_ = new CMessageRemoveMasterNotify();
  CMessageAlterMasterPercentRequest::default_instance_ = new CMessageAlterMasterPercentRequest();
  CMessageAlterMasterPercentResponse::default_instance_ = new CMessageAlterMasterPercentResponse();
  CMessageGetLowPlayerRequest::default_instance_ = new CMessageGetLowPlayerRequest();
  CMessageGetLowPlayerResponse::default_instance_ = new CMessageGetLowPlayerResponse();
  CMessageFriendLevelUpNotify::default_instance_ = new CMessageFriendLevelUpNotify();
  CMessageFriendBlessRequest::default_instance_ = new CMessageFriendBlessRequest();
  CMessageFriendBlessResponse::default_instance_ = new CMessageFriendBlessResponse();
  CMessageFriendBlessNotify::default_instance_ = new CMessageFriendBlessNotify();
  CMessageModifyIntimacyNogify::default_instance_ = new CMessageModifyIntimacyNogify();
  CMessageModifyLastTimeAllOnLineNotify::default_instance_ = new CMessageModifyLastTimeAllOnLineNotify();
  CMessageCreateSwornTeamRequest::default_instance_ = new CMessageCreateSwornTeamRequest();
  CMessageCreateSwornTeamResponse::default_instance_ = new CMessageCreateSwornTeamResponse();
  CMessageLeaveSwornTeamRequest::default_instance_ = new CMessageLeaveSwornTeamRequest();
  CMessageLeaveSwornTeamResponse::default_instance_ = new CMessageLeaveSwornTeamResponse();
  CMessageKickSwornMemberRequest::default_instance_ = new CMessageKickSwornMemberRequest();
  CMessageKickSwornMemberResponse::default_instance_ = new CMessageKickSwornMemberResponse();
  CMessageDisbandSwornTeamRequest::default_instance_ = new CMessageDisbandSwornTeamRequest();
  CMessageDisbandSwornTeamResponse::default_instance_ = new CMessageDisbandSwornTeamResponse();
  CMsgSwornMember::default_instance_ = new CMsgSwornMember();
  CMessageSwornInfoNotify::default_instance_ = new CMessageSwornInfoNotify();
  CMessageCreateSwornTeamNotify::default_instance_ = new CMessageCreateSwornTeamNotify();
  CMessageLeaveSwornTeamNotify::default_instance_ = new CMessageLeaveSwornTeamNotify();
  CMessageKickSwornMemberNotify::default_instance_ = new CMessageKickSwornMemberNotify();
  CMessageChangeSwornNameRequest::default_instance_ = new CMessageChangeSwornNameRequest();
  CMessageChangeSwornNameResponse::default_instance_ = new CMessageChangeSwornNameResponse();
  CMessageChangeSwornNameNotify::default_instance_ = new CMessageChangeSwornNameNotify();
  CMessageDisbandSwornTeamNotify::default_instance_ = new CMessageDisbandSwornTeamNotify();
  CMessageLatestContactChangeStatusNotice::default_instance_ = new CMessageLatestContactChangeStatusNotice();
  CMessageLastContacterNotice::default_instance_ = new CMessageLastContacterNotice();
  CMessageUpdateLastContacterNotice::default_instance_ = new CMessageUpdateLastContacterNotice();
  CMessageUploadContacterList::default_instance_ = new CMessageUploadContacterList();
  CMessageContacterStatusNotifyG2S::default_instance_ = new CMessageContacterStatusNotifyG2S();
  CMessageRebuildSwornRequest::default_instance_ = new CMessageRebuildSwornRequest();
  CMessageRebuildSwornResponse::default_instance_ = new CMessageRebuildSwornResponse();
  CMessageRebuildSwornNotify::default_instance_ = new CMessageRebuildSwornNotify();
  CMessageInviteFriendRequest::default_instance_->InitAsDefaultInstance();
  CMessageInviteFriendRequestByName::default_instance_->InitAsDefaultInstance();
  CMessageInviteFriendNotice::default_instance_->InitAsDefaultInstance();
  CMessageInviteFriendOptionRequest::default_instance_->InitAsDefaultInstance();
  CMessageInviteFriendResponseMsg::default_instance_->InitAsDefaultInstance();
  CMessageInviteFriendResponseNotice::default_instance_->InitAsDefaultInstance();
  CMessageDelFrientRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendErrorNotice::default_instance_->InitAsDefaultInstance();
  CMessageChangeFriendNotice::default_instance_->InitAsDefaultInstance();
  SingleFriendData::default_instance_->InitAsDefaultInstance();
  CMessageFriendGetListNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendGetListRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendGroupNameNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendChangeStatusNotice_R::default_instance_->InitAsDefaultInstance();
  CMessageFriendChangeStatusNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendChangeStatusRequest::default_instance_->InitAsDefaultInstance();
  CMessageAddFriendNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendChgGroupNameRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendChgFriendGroupRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendSendMessageRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendMessageNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendMoveToBlackRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendAddBlackRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendChgFriendGroupNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendMoveToBlackNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendLockEnemyRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendGetFriendsStateRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendGetFriendsStateNotice::default_instance_->InitAsDefaultInstance();
  CMessageFriendUpdateEnemyRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeMasterRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeMasterResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeMasterNotify::default_instance_->InitAsDefaultInstance();
  CMessageGetSlaveRequest::default_instance_->InitAsDefaultInstance();
  SlaveInfo::default_instance_->InitAsDefaultInstance();
  CMessageGetSlaveResponse::default_instance_->InitAsDefaultInstance();
  CMessageSlaveLevelUpNotify::default_instance_->InitAsDefaultInstance();
  CMessageAnswerChangeNotify::default_instance_->InitAsDefaultInstance();
  CMessageAnswerChangeRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageQueryPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageSlaveOnOffNotify::default_instance_->InitAsDefaultInstance();
  CMessageSlaveNumNotify::default_instance_->InitAsDefaultInstance();
  CMessageRemoveSlaveRequest::default_instance_->InitAsDefaultInstance();
  CMessageRemoveSlaveResponse::default_instance_->InitAsDefaultInstance();
  CMessageRemoveSlaveNotify::default_instance_->InitAsDefaultInstance();
  CMessageRemoveMasterRequest::default_instance_->InitAsDefaultInstance();
  CMessageRemoveMasterResponse::default_instance_->InitAsDefaultInstance();
  CMessageRemoveMasterNotify::default_instance_->InitAsDefaultInstance();
  CMessageAlterMasterPercentRequest::default_instance_->InitAsDefaultInstance();
  CMessageAlterMasterPercentResponse::default_instance_->InitAsDefaultInstance();
  CMessageGetLowPlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetLowPlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageFriendLevelUpNotify::default_instance_->InitAsDefaultInstance();
  CMessageFriendBlessRequest::default_instance_->InitAsDefaultInstance();
  CMessageFriendBlessResponse::default_instance_->InitAsDefaultInstance();
  CMessageFriendBlessNotify::default_instance_->InitAsDefaultInstance();
  CMessageModifyIntimacyNogify::default_instance_->InitAsDefaultInstance();
  CMessageModifyLastTimeAllOnLineNotify::default_instance_->InitAsDefaultInstance();
  CMessageCreateSwornTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageCreateSwornTeamResponse::default_instance_->InitAsDefaultInstance();
  CMessageLeaveSwornTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageLeaveSwornTeamResponse::default_instance_->InitAsDefaultInstance();
  CMessageKickSwornMemberRequest::default_instance_->InitAsDefaultInstance();
  CMessageKickSwornMemberResponse::default_instance_->InitAsDefaultInstance();
  CMessageDisbandSwornTeamRequest::default_instance_->InitAsDefaultInstance();
  CMessageDisbandSwornTeamResponse::default_instance_->InitAsDefaultInstance();
  CMsgSwornMember::default_instance_->InitAsDefaultInstance();
  CMessageSwornInfoNotify::default_instance_->InitAsDefaultInstance();
  CMessageCreateSwornTeamNotify::default_instance_->InitAsDefaultInstance();
  CMessageLeaveSwornTeamNotify::default_instance_->InitAsDefaultInstance();
  CMessageKickSwornMemberNotify::default_instance_->InitAsDefaultInstance();
  CMessageChangeSwornNameRequest::default_instance_->InitAsDefaultInstance();
  CMessageChangeSwornNameResponse::default_instance_->InitAsDefaultInstance();
  CMessageChangeSwornNameNotify::default_instance_->InitAsDefaultInstance();
  CMessageDisbandSwornTeamNotify::default_instance_->InitAsDefaultInstance();
  CMessageLatestContactChangeStatusNotice::default_instance_->InitAsDefaultInstance();
  CMessageLastContacterNotice::default_instance_->InitAsDefaultInstance();
  CMessageUpdateLastContacterNotice::default_instance_->InitAsDefaultInstance();
  CMessageUploadContacterList::default_instance_->InitAsDefaultInstance();
  CMessageContacterStatusNotifyG2S::default_instance_->InitAsDefaultInstance();
  CMessageRebuildSwornRequest::default_instance_->InitAsDefaultInstance();
  CMessageRebuildSwornResponse::default_instance_->InitAsDefaultInstance();
  CMessageRebuildSwornNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friendmessage_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friendmessage_5fpb_2ehxx {
  StaticDescriptorInitializer_friendmessage_5fpb_2ehxx() {
    protobuf_AddDesc_friendmessage_5fpb_2ehxx();
  }
} static_descriptor_initializer_friendmessage_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* FRIEND_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIEND_MSG_ID_descriptor_;
}
bool FRIEND_MSG_ID_IsValid(int value) {
  switch(value) {
    case 6144:
    case 6146:
    case 6148:
    case 6149:
    case 6152:
    case 6153:
    case 6155:
    case 6157:
    case 6158:
    case 6160:
    case 6161:
    case 6162:
    case 6164:
    case 6165:
    case 6166:
    case 6167:
    case 6168:
    case 6169:
    case 6170:
    case 6171:
    case 6172:
    case 6173:
    case 6176:
    case 6177:
    case 6178:
    case 6179:
    case 6180:
    case 6181:
    case 6182:
    case 6183:
    case 6184:
    case 6185:
    case 6186:
    case 6187:
    case 6188:
    case 6189:
    case 6190:
    case 6191:
    case 6192:
    case 6193:
    case 6194:
    case 6195:
    case 6196:
    case 6198:
    case 6199:
    case 6201:
    case 6202:
    case 6203:
    case 6204:
    case 6205:
    case 6206:
    case 6208:
    case 6209:
    case 6210:
    case 6211:
    case 6212:
    case 6213:
    case 6214:
    case 6215:
    case 6216:
    case 6217:
    case 6218:
    case 6219:
    case 6221:
    case 6222:
    case 6224:
    case 6225:
    case 6226:
    case 6227:
    case 6228:
    case 6657:
    case 6659:
    case 6662:
    case 6663:
    case 6668:
    case 6671:
    case 6675:
    case 6709:
    case 6712:
    case 6732:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteFriendRequest::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendRequest::CMessageInviteFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendRequest::InitAsDefaultInstance() {}

CMessageInviteFriendRequest::CMessageInviteFriendRequest(const CMessageInviteFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendRequest::~CMessageInviteFriendRequest() {
  SharedDtor();
}

void CMessageInviteFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendRequest_descriptor_;
}

const CMessageInviteFriendRequest& CMessageInviteFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendRequest* CMessageInviteFriendRequest::default_instance_ = NULL;

CMessageInviteFriendRequest* CMessageInviteFriendRequest::New() const {
  return new CMessageInviteFriendRequest;
}

void CMessageInviteFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendRequest::MergeFrom(const CMessageInviteFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendRequest::CopyFrom(const CMessageInviteFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendRequest::Swap(CMessageInviteFriendRequest* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteFriendRequestByName::_default_invitedplayername_;
#ifndef _MSC_VER
const int CMessageInviteFriendRequestByName::kInvitedPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendRequestByName::CMessageInviteFriendRequestByName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendRequestByName::InitAsDefaultInstance() {}

CMessageInviteFriendRequestByName::CMessageInviteFriendRequestByName(const CMessageInviteFriendRequestByName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendRequestByName::SharedCtor() {
  _cached_size_ = 0;
  invitedplayername_ = const_cast< ::std::string*>(&_default_invitedplayername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendRequestByName::~CMessageInviteFriendRequestByName() {
  SharedDtor();
}

void CMessageInviteFriendRequestByName::SharedDtor() {
  if (invitedplayername_ != &_default_invitedplayername_) {
    delete invitedplayername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendRequestByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendRequestByName_descriptor_;
}

const CMessageInviteFriendRequestByName& CMessageInviteFriendRequestByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendRequestByName* CMessageInviteFriendRequestByName::default_instance_ = NULL;

CMessageInviteFriendRequestByName* CMessageInviteFriendRequestByName::New() const {
  return new CMessageInviteFriendRequestByName;
}

void CMessageInviteFriendRequestByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (invitedplayername_ != &_default_invitedplayername_) {
        invitedplayername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendRequestByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string InvitedPlayerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_invitedplayername()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendRequestByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendRequestByName::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string InvitedPlayerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->invitedplayername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendRequestByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string InvitedPlayerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->invitedplayername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendRequestByName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string InvitedPlayerName = 1;
    if (has_invitedplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->invitedplayername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendRequestByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendRequestByName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendRequestByName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendRequestByName::MergeFrom(const CMessageInviteFriendRequestByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_invitedplayername(from.invitedplayername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendRequestByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendRequestByName::CopyFrom(const CMessageInviteFriendRequestByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendRequestByName::Swap(CMessageInviteFriendRequestByName* other) {
  if (other != this) {
    std::swap(invitedplayername_, other->invitedplayername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendRequestByName::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendRequestByName::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendRequestByName::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendRequestByName_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteFriendNotice::kRouterFieldNumber;
const int CMessageInviteFriendNotice::kSrcHeadFieldNumber;
const int CMessageInviteFriendNotice::kSrcCharIDFieldNumber;
const int CMessageInviteFriendNotice::kSrcMetierFieldNumber;
const int CMessageInviteFriendNotice::kSrcLevelFieldNumber;
const int CMessageInviteFriendNotice::kSrcSexFieldNumber;
const int CMessageInviteFriendNotice::kDesCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendNotice::CMessageInviteFriendNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageInviteFriendNotice::CMessageInviteFriendNotice(const CMessageInviteFriendNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  srchead_ = 0u;
  srccharid_ = 0u;
  srcmetier_ = 0u;
  srclevel_ = 0u;
  srcsex_ = 0u;
  descharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendNotice::~CMessageInviteFriendNotice() {
  SharedDtor();
}

void CMessageInviteFriendNotice::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendNotice_descriptor_;
}

const CMessageInviteFriendNotice& CMessageInviteFriendNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendNotice* CMessageInviteFriendNotice::default_instance_ = NULL;

CMessageInviteFriendNotice* CMessageInviteFriendNotice::New() const {
  return new CMessageInviteFriendNotice;
}

void CMessageInviteFriendNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    srchead_ = 0u;
    srccharid_ = 0u;
    srcmetier_ = 0u;
    srclevel_ = 0u;
    srcsex_ = 0u;
    descharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_SrcHead;
        break;
      }
      
      // optional uint32 SrcHead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srchead_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SrcCharID;
        break;
      }
      
      // optional uint32 SrcCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SrcMetier;
        break;
      }
      
      // optional uint32 SrcMetier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcMetier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcmetier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_SrcLevel;
        break;
      }
      
      // optional uint32 SrcLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srclevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_SrcSex;
        break;
      }
      
      // optional uint32 SrcSex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SrcSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srcsex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DesCharID;
        break;
      }
      
      // optional uint32 DesCharID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &descharid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 SrcHead = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->srchead(), output);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->srccharid(), output);
  }
  
  // optional uint32 SrcMetier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->srcmetier(), output);
  }
  
  // optional uint32 SrcLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->srclevel(), output);
  }
  
  // optional uint32 SrcSex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->srcsex(), output);
  }
  
  // optional uint32 DesCharID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->descharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 SrcHead = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->srchead(), target);
  }
  
  // optional uint32 SrcCharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->srccharid(), target);
  }
  
  // optional uint32 SrcMetier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->srcmetier(), target);
  }
  
  // optional uint32 SrcLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->srclevel(), target);
  }
  
  // optional uint32 SrcSex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->srcsex(), target);
  }
  
  // optional uint32 DesCharID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->descharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 SrcHead = 2;
    if (has_srchead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srchead());
    }
    
    // optional uint32 SrcCharID = 3;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional uint32 SrcMetier = 4;
    if (has_srcmetier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcmetier());
    }
    
    // optional uint32 SrcLevel = 5;
    if (has_srclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srclevel());
    }
    
    // optional uint32 SrcSex = 6;
    if (has_srcsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srcsex());
    }
    
    // optional uint32 DesCharID = 7;
    if (has_descharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->descharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendNotice::MergeFrom(const CMessageInviteFriendNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_srchead(from.srchead());
    }
    if (from._has_bit(2)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(3)) {
      set_srcmetier(from.srcmetier());
    }
    if (from._has_bit(4)) {
      set_srclevel(from.srclevel());
    }
    if (from._has_bit(5)) {
      set_srcsex(from.srcsex());
    }
    if (from._has_bit(6)) {
      set_descharid(from.descharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendNotice::CopyFrom(const CMessageInviteFriendNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendNotice::Swap(CMessageInviteFriendNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(srchead_, other->srchead_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(srcmetier_, other->srcmetier_);
    std::swap(srclevel_, other->srclevel_);
    std::swap(srcsex_, other->srcsex_);
    std::swap(descharid_, other->descharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageInviteFriendOptionRequest::kInvitingPlayerIDFieldNumber;
const int CMessageInviteFriendOptionRequest::kAgreeCodeFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendOptionRequest::CMessageInviteFriendOptionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendOptionRequest::InitAsDefaultInstance() {}

CMessageInviteFriendOptionRequest::CMessageInviteFriendOptionRequest(const CMessageInviteFriendOptionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendOptionRequest::SharedCtor() {
  _cached_size_ = 0;
  invitingplayerid_ = 0u;
  agreecode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendOptionRequest::~CMessageInviteFriendOptionRequest() {
  SharedDtor();
}

void CMessageInviteFriendOptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendOptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendOptionRequest_descriptor_;
}

const CMessageInviteFriendOptionRequest& CMessageInviteFriendOptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendOptionRequest* CMessageInviteFriendOptionRequest::default_instance_ = NULL;

CMessageInviteFriendOptionRequest* CMessageInviteFriendOptionRequest::New() const {
  return new CMessageInviteFriendOptionRequest;
}

void CMessageInviteFriendOptionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invitingplayerid_ = 0u;
    agreecode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendOptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 InvitingPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &invitingplayerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AgreeCode;
        break;
      }
      
      // optional uint32 AgreeCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AgreeCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &agreecode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendOptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendOptionRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 InvitingPlayerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->invitingplayerid(), output);
  }
  
  // optional uint32 AgreeCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->agreecode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendOptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 InvitingPlayerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->invitingplayerid(), target);
  }
  
  // optional uint32 AgreeCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->agreecode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendOptionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InvitingPlayerID = 1;
    if (has_invitingplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->invitingplayerid());
    }
    
    // optional uint32 AgreeCode = 2;
    if (has_agreecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->agreecode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendOptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendOptionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendOptionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendOptionRequest::MergeFrom(const CMessageInviteFriendOptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_invitingplayerid(from.invitingplayerid());
    }
    if (from._has_bit(1)) {
      set_agreecode(from.agreecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendOptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendOptionRequest::CopyFrom(const CMessageInviteFriendOptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendOptionRequest::Swap(CMessageInviteFriendOptionRequest* other) {
  if (other != this) {
    std::swap(invitingplayerid_, other->invitingplayerid_);
    std::swap(agreecode_, other->agreecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendOptionRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendOptionRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendOptionRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendOptionRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteFriendResponseMsg::_default_beinvitingplayername_;
#ifndef _MSC_VER
const int CMessageInviteFriendResponseMsg::kRouterFieldNumber;
const int CMessageInviteFriendResponseMsg::kIsDesInMyLstFieldNumber;
const int CMessageInviteFriendResponseMsg::kBeInvitingPlayerNationFieldNumber;
const int CMessageInviteFriendResponseMsg::kBeInvitingPlayerHeadFieldNumber;
const int CMessageInviteFriendResponseMsg::kBeInvitingPlayerNameFieldNumber;
const int CMessageInviteFriendResponseMsg::kBeInvitingPlayerSexFieldNumber;
const int CMessageInviteFriendResponseMsg::kIsFriendLstFullFieldNumber;
const int CMessageInviteFriendResponseMsg::kAgreeCodeFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendResponseMsg::CMessageInviteFriendResponseMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendResponseMsg::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageInviteFriendResponseMsg::CMessageInviteFriendResponseMsg(const CMessageInviteFriendResponseMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendResponseMsg::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  isdesinmylst_ = 0u;
  beinvitingplayernation_ = 0u;
  beinvitingplayerhead_ = 0u;
  beinvitingplayername_ = const_cast< ::std::string*>(&_default_beinvitingplayername_);
  beinvitingplayersex_ = 0u;
  isfriendlstfull_ = 0u;
  agreecode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendResponseMsg::~CMessageInviteFriendResponseMsg() {
  SharedDtor();
}

void CMessageInviteFriendResponseMsg::SharedDtor() {
  if (beinvitingplayername_ != &_default_beinvitingplayername_) {
    delete beinvitingplayername_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendResponseMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendResponseMsg_descriptor_;
}

const CMessageInviteFriendResponseMsg& CMessageInviteFriendResponseMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendResponseMsg* CMessageInviteFriendResponseMsg::default_instance_ = NULL;

CMessageInviteFriendResponseMsg* CMessageInviteFriendResponseMsg::New() const {
  return new CMessageInviteFriendResponseMsg;
}

void CMessageInviteFriendResponseMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    isdesinmylst_ = 0u;
    beinvitingplayernation_ = 0u;
    beinvitingplayerhead_ = 0u;
    if (_has_bit(4)) {
      if (beinvitingplayername_ != &_default_beinvitingplayername_) {
        beinvitingplayername_->clear();
      }
    }
    beinvitingplayersex_ = 0u;
    isfriendlstfull_ = 0u;
    agreecode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendResponseMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_IsDesInMyLst;
        break;
      }
      
      // optional uint32 IsDesInMyLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsDesInMyLst:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isdesinmylst_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_BeInvitingPlayerNation;
        break;
      }
      
      // optional uint32 BeInvitingPlayerNation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeInvitingPlayerNation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beinvitingplayernation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_BeInvitingPlayerHead;
        break;
      }
      
      // optional uint32 BeInvitingPlayerHead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeInvitingPlayerHead:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beinvitingplayerhead_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_BeInvitingPlayerName;
        break;
      }
      
      // optional string BeInvitingPlayerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BeInvitingPlayerName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_beinvitingplayername()));
        if (input->ExpectTag(48)) goto parse_BeInvitingPlayerSex;
        break;
      }
      
      // optional uint32 BeInvitingPlayerSex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeInvitingPlayerSex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &beinvitingplayersex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_IsFriendLstFull;
        break;
      }
      
      // optional uint32 IsFriendLstFull = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsFriendLstFull:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &isfriendlstfull_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_AgreeCode;
        break;
      }
      
      // optional uint32 AgreeCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AgreeCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &agreecode_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendResponseMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendResponseMsg::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 IsDesInMyLst = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->isdesinmylst(), output);
  }
  
  // optional uint32 BeInvitingPlayerNation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->beinvitingplayernation(), output);
  }
  
  // optional uint32 BeInvitingPlayerHead = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->beinvitingplayerhead(), output);
  }
  
  // optional string BeInvitingPlayerName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->beinvitingplayername(), output);
  }
  
  // optional uint32 BeInvitingPlayerSex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->beinvitingplayersex(), output);
  }
  
  // optional uint32 IsFriendLstFull = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->isfriendlstfull(), output);
  }
  
  // optional uint32 AgreeCode = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->agreecode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendResponseMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 IsDesInMyLst = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->isdesinmylst(), target);
  }
  
  // optional uint32 BeInvitingPlayerNation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->beinvitingplayernation(), target);
  }
  
  // optional uint32 BeInvitingPlayerHead = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->beinvitingplayerhead(), target);
  }
  
  // optional string BeInvitingPlayerName = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->beinvitingplayername(), target);
  }
  
  // optional uint32 BeInvitingPlayerSex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->beinvitingplayersex(), target);
  }
  
  // optional uint32 IsFriendLstFull = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->isfriendlstfull(), target);
  }
  
  // optional uint32 AgreeCode = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->agreecode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendResponseMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 IsDesInMyLst = 2;
    if (has_isdesinmylst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isdesinmylst());
    }
    
    // optional uint32 BeInvitingPlayerNation = 3;
    if (has_beinvitingplayernation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beinvitingplayernation());
    }
    
    // optional uint32 BeInvitingPlayerHead = 4;
    if (has_beinvitingplayerhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beinvitingplayerhead());
    }
    
    // optional string BeInvitingPlayerName = 5;
    if (has_beinvitingplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->beinvitingplayername());
    }
    
    // optional uint32 BeInvitingPlayerSex = 6;
    if (has_beinvitingplayersex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->beinvitingplayersex());
    }
    
    // optional uint32 IsFriendLstFull = 7;
    if (has_isfriendlstfull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->isfriendlstfull());
    }
    
    // optional uint32 AgreeCode = 8;
    if (has_agreecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->agreecode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendResponseMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendResponseMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendResponseMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendResponseMsg::MergeFrom(const CMessageInviteFriendResponseMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_isdesinmylst(from.isdesinmylst());
    }
    if (from._has_bit(2)) {
      set_beinvitingplayernation(from.beinvitingplayernation());
    }
    if (from._has_bit(3)) {
      set_beinvitingplayerhead(from.beinvitingplayerhead());
    }
    if (from._has_bit(4)) {
      set_beinvitingplayername(from.beinvitingplayername());
    }
    if (from._has_bit(5)) {
      set_beinvitingplayersex(from.beinvitingplayersex());
    }
    if (from._has_bit(6)) {
      set_isfriendlstfull(from.isfriendlstfull());
    }
    if (from._has_bit(7)) {
      set_agreecode(from.agreecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendResponseMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendResponseMsg::CopyFrom(const CMessageInviteFriendResponseMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendResponseMsg::Swap(CMessageInviteFriendResponseMsg* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(isdesinmylst_, other->isdesinmylst_);
    std::swap(beinvitingplayernation_, other->beinvitingplayernation_);
    std::swap(beinvitingplayerhead_, other->beinvitingplayerhead_);
    std::swap(beinvitingplayername_, other->beinvitingplayername_);
    std::swap(beinvitingplayersex_, other->beinvitingplayersex_);
    std::swap(isfriendlstfull_, other->isfriendlstfull_);
    std::swap(agreecode_, other->agreecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendResponseMsg::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendResponseMsg::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendResponseMsg::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendResponseMsg_reflection_;
}

// ===================================================================

const ::std::string CMessageInviteFriendResponseNotice::_default_beinvitingplayername_;
#ifndef _MSC_VER
const int CMessageInviteFriendResponseNotice::kBeInvitingPlayerNameFieldNumber;
const int CMessageInviteFriendResponseNotice::kAgreeCodeFieldNumber;
#endif  // !_MSC_VER

CMessageInviteFriendResponseNotice::CMessageInviteFriendResponseNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageInviteFriendResponseNotice::InitAsDefaultInstance() {}

CMessageInviteFriendResponseNotice::CMessageInviteFriendResponseNotice(const CMessageInviteFriendResponseNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageInviteFriendResponseNotice::SharedCtor() {
  _cached_size_ = 0;
  beinvitingplayername_ = const_cast< ::std::string*>(&_default_beinvitingplayername_);
  agreecode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageInviteFriendResponseNotice::~CMessageInviteFriendResponseNotice() {
  SharedDtor();
}

void CMessageInviteFriendResponseNotice::SharedDtor() {
  if (beinvitingplayername_ != &_default_beinvitingplayername_) {
    delete beinvitingplayername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageInviteFriendResponseNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendResponseNotice_descriptor_;
}

const CMessageInviteFriendResponseNotice& CMessageInviteFriendResponseNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageInviteFriendResponseNotice* CMessageInviteFriendResponseNotice::default_instance_ = NULL;

CMessageInviteFriendResponseNotice* CMessageInviteFriendResponseNotice::New() const {
  return new CMessageInviteFriendResponseNotice;
}

void CMessageInviteFriendResponseNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (beinvitingplayername_ != &_default_beinvitingplayername_) {
        beinvitingplayername_->clear();
      }
    }
    agreecode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageInviteFriendResponseNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string BeInvitingPlayerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_beinvitingplayername()));
        if (input->ExpectTag(16)) goto parse_AgreeCode;
        break;
      }
      
      // optional uint32 AgreeCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AgreeCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &agreecode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageInviteFriendResponseNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageInviteFriendResponseNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string BeInvitingPlayerName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->beinvitingplayername(), output);
  }
  
  // optional uint32 AgreeCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->agreecode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageInviteFriendResponseNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string BeInvitingPlayerName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->beinvitingplayername(), target);
  }
  
  // optional uint32 AgreeCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->agreecode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageInviteFriendResponseNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BeInvitingPlayerName = 1;
    if (has_beinvitingplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->beinvitingplayername());
    }
    
    // optional uint32 AgreeCode = 2;
    if (has_agreecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->agreecode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageInviteFriendResponseNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageInviteFriendResponseNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageInviteFriendResponseNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageInviteFriendResponseNotice::MergeFrom(const CMessageInviteFriendResponseNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_beinvitingplayername(from.beinvitingplayername());
    }
    if (from._has_bit(1)) {
      set_agreecode(from.agreecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageInviteFriendResponseNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendResponseNotice::CopyFrom(const CMessageInviteFriendResponseNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageInviteFriendResponseNotice::Swap(CMessageInviteFriendResponseNotice* other) {
  if (other != this) {
    std::swap(beinvitingplayername_, other->beinvitingplayername_);
    std::swap(agreecode_, other->agreecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageInviteFriendResponseNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageInviteFriendResponseNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageInviteFriendResponseNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageInviteFriendResponseNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDelFrientRequest::kTypeFieldNumber;
const int CMessageDelFrientRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageDelFrientRequest::CMessageDelFrientRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDelFrientRequest::InitAsDefaultInstance() {}

CMessageDelFrientRequest::CMessageDelFrientRequest(const CMessageDelFrientRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDelFrientRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDelFrientRequest::~CMessageDelFrientRequest() {
  SharedDtor();
}

void CMessageDelFrientRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDelFrientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelFrientRequest_descriptor_;
}

const CMessageDelFrientRequest& CMessageDelFrientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDelFrientRequest* CMessageDelFrientRequest::default_instance_ = NULL;

CMessageDelFrientRequest* CMessageDelFrientRequest::New() const {
  return new CMessageDelFrientRequest;
}

void CMessageDelFrientRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDelFrientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDelFrientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDelFrientRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDelFrientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDelFrientRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDelFrientRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDelFrientRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDelFrientRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDelFrientRequest::MergeFrom(const CMessageDelFrientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDelFrientRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelFrientRequest::CopyFrom(const CMessageDelFrientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDelFrientRequest::Swap(CMessageDelFrientRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDelFrientRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDelFrientRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDelFrientRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDelFrientRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendErrorNotice::kRouterFieldNumber;
const int CMessageFriendErrorNotice::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CMessageFriendErrorNotice::CMessageFriendErrorNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendErrorNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageFriendErrorNotice::CMessageFriendErrorNotice(const CMessageFriendErrorNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendErrorNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendErrorNotice::~CMessageFriendErrorNotice() {
  SharedDtor();
}

void CMessageFriendErrorNotice::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageFriendErrorNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendErrorNotice_descriptor_;
}

const CMessageFriendErrorNotice& CMessageFriendErrorNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendErrorNotice* CMessageFriendErrorNotice::default_instance_ = NULL;

CMessageFriendErrorNotice* CMessageFriendErrorNotice::New() const {
  return new CMessageFriendErrorNotice;
}

void CMessageFriendErrorNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendErrorNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ErrorCode:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errorcode_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendErrorNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendErrorNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->errorcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendErrorNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional int32 ErrorCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->errorcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendErrorNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional int32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errorcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendErrorNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendErrorNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendErrorNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendErrorNotice::MergeFrom(const CMessageFriendErrorNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendErrorNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendErrorNotice::CopyFrom(const CMessageFriendErrorNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendErrorNotice::Swap(CMessageFriendErrorNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendErrorNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendErrorNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendErrorNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendErrorNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeFriendNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageChangeFriendNotice::kRouterFieldNumber;
const int CMessageChangeFriendNotice::kNameFieldNumber;
const int CMessageChangeFriendNotice::kNationIDFieldNumber;
const int CMessageChangeFriendNotice::kSexFieldNumber;
const int CMessageChangeFriendNotice::kReltoMeFieldNumber;
const int CMessageChangeFriendNotice::kOprCodeFieldNumber;
const int CMessageChangeFriendNotice::kTimeOrderFieldNumber;
const int CMessageChangeFriendNotice::kIsLockFieldNumber;
const int CMessageChangeFriendNotice::kStatusFieldNumber;
const int CMessageChangeFriendNotice::kCharIDFieldNumber;
const int CMessageChangeFriendNotice::kBeKilledFieldNumber;
const int CMessageChangeFriendNotice::kKilledFieldNumber;
const int CMessageChangeFriendNotice::kHeadFieldNumber;
const int CMessageChangeFriendNotice::kGroupIDFieldNumber;
const int CMessageChangeFriendNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageChangeFriendNotice::CMessageChangeFriendNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeFriendNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageChangeFriendNotice::CMessageChangeFriendNotice(const CMessageChangeFriendNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeFriendNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nationid_ = 0u;
  sex_ = 0u;
  reltome_ = 0u;
  oprcode_ = 0u;
  timeorder_ = 0u;
  islock_ = 0u;
  status_ = 0u;
  charid_ = 0u;
  bekilled_ = 0u;
  killed_ = 0u;
  head_ = 0u;
  groupid_ = 0u;
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeFriendNotice::~CMessageChangeFriendNotice() {
  SharedDtor();
}

void CMessageChangeFriendNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeFriendNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFriendNotice_descriptor_;
}

const CMessageChangeFriendNotice& CMessageChangeFriendNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeFriendNotice* CMessageChangeFriendNotice::default_instance_ = NULL;

CMessageChangeFriendNotice* CMessageChangeFriendNotice::New() const {
  return new CMessageChangeFriendNotice;
}

void CMessageChangeFriendNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    nationid_ = 0u;
    sex_ = 0u;
    reltome_ = 0u;
    oprcode_ = 0u;
    timeorder_ = 0u;
    islock_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0u;
    charid_ = 0u;
    bekilled_ = 0u;
    killed_ = 0u;
    head_ = 0u;
    groupid_ = 0u;
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeFriendNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(24)) goto parse_NationID;
        break;
      }
      
      // optional uint32 NationID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NationID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_ReltoMe;
        break;
      }
      
      // optional uint32 ReltoMe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReltoMe:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reltome_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_OprCode;
        break;
      }
      
      // optional uint32 OprCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_OprCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &oprcode_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_TimeOrder;
        break;
      }
      
      // optional uint32 TimeOrder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeorder_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_IsLock;
        break;
      }
      
      // optional uint32 IsLock = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsLock:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &islock_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_BeKilled;
        break;
      }
      
      // optional uint32 BeKilled = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BeKilled:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bekilled_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Killed;
        break;
      }
      
      // optional uint32 Killed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Killed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killed_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_Head;
        break;
      }
      
      // optional uint32 Head = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Head:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &head_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_GroupID;
        break;
      }
      
      // optional uint32 GroupID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(14);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeFriendNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeFriendNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->name(), output);
  }
  
  // optional uint32 NationID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->nationid(), output);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sex(), output);
  }
  
  // optional uint32 ReltoMe = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->reltome(), output);
  }
  
  // optional uint32 OprCode = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->oprcode(), output);
  }
  
  // optional uint32 TimeOrder = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->timeorder(), output);
  }
  
  // optional uint32 IsLock = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->islock(), output);
  }
  
  // optional uint32 Status = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->status(), output);
  }
  
  // optional uint32 CharID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->charid(), output);
  }
  
  // optional uint32 BeKilled = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->bekilled(), output);
  }
  
  // optional uint32 Killed = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->killed(), output);
  }
  
  // optional uint32 Head = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->head(), output);
  }
  
  // optional uint32 GroupID = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->groupid(), output);
  }
  
  // optional uint32 VipFlag = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(15, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeFriendNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string Name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->name(), target);
  }
  
  // optional uint32 NationID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->nationid(), target);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sex(), target);
  }
  
  // optional uint32 ReltoMe = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->reltome(), target);
  }
  
  // optional uint32 OprCode = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->oprcode(), target);
  }
  
  // optional uint32 TimeOrder = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->timeorder(), target);
  }
  
  // optional uint32 IsLock = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->islock(), target);
  }
  
  // optional uint32 Status = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->status(), target);
  }
  
  // optional uint32 CharID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->charid(), target);
  }
  
  // optional uint32 BeKilled = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->bekilled(), target);
  }
  
  // optional uint32 Killed = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->killed(), target);
  }
  
  // optional uint32 Head = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->head(), target);
  }
  
  // optional uint32 GroupID = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->groupid(), target);
  }
  
  // optional uint32 VipFlag = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(15, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeFriendNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 NationID = 3;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationid());
    }
    
    // optional uint32 Sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 ReltoMe = 5;
    if (has_reltome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reltome());
    }
    
    // optional uint32 OprCode = 6;
    if (has_oprcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->oprcode());
    }
    
    // optional uint32 TimeOrder = 7;
    if (has_timeorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeorder());
    }
    
    // optional uint32 IsLock = 8;
    if (has_islock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->islock());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 CharID = 10;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 BeKilled = 11;
    if (has_bekilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bekilled());
    }
    
    // optional uint32 Killed = 12;
    if (has_killed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killed());
    }
    
    // optional uint32 Head = 13;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->head());
    }
    
    // optional uint32 GroupID = 14;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 VipFlag = 15;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeFriendNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeFriendNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeFriendNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeFriendNotice::MergeFrom(const CMessageChangeFriendNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_nationid(from.nationid());
    }
    if (from._has_bit(3)) {
      set_sex(from.sex());
    }
    if (from._has_bit(4)) {
      set_reltome(from.reltome());
    }
    if (from._has_bit(5)) {
      set_oprcode(from.oprcode());
    }
    if (from._has_bit(6)) {
      set_timeorder(from.timeorder());
    }
    if (from._has_bit(7)) {
      set_islock(from.islock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_status(from.status());
    }
    if (from._has_bit(9)) {
      set_charid(from.charid());
    }
    if (from._has_bit(10)) {
      set_bekilled(from.bekilled());
    }
    if (from._has_bit(11)) {
      set_killed(from.killed());
    }
    if (from._has_bit(12)) {
      set_head(from.head());
    }
    if (from._has_bit(13)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(14)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeFriendNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFriendNotice::CopyFrom(const CMessageChangeFriendNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeFriendNotice::Swap(CMessageChangeFriendNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(name_, other->name_);
    std::swap(nationid_, other->nationid_);
    std::swap(sex_, other->sex_);
    std::swap(reltome_, other->reltome_);
    std::swap(oprcode_, other->oprcode_);
    std::swap(timeorder_, other->timeorder_);
    std::swap(islock_, other->islock_);
    std::swap(status_, other->status_);
    std::swap(charid_, other->charid_);
    std::swap(bekilled_, other->bekilled_);
    std::swap(killed_, other->killed_);
    std::swap(head_, other->head_);
    std::swap(groupid_, other->groupid_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeFriendNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeFriendNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeFriendNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeFriendNotice_reflection_;
}

// ===================================================================

const ::std::string SingleFriendData::_default_name_;
#ifndef _MSC_VER
const int SingleFriendData::kBeKilledFieldNumber;
const int SingleFriendData::kHeadFieldNumber;
const int SingleFriendData::kStatusFieldNumber;
const int SingleFriendData::kGroupIDFieldNumber;
const int SingleFriendData::kCharIDFieldNumber;
const int SingleFriendData::kNameFieldNumber;
const int SingleFriendData::kNationIDFieldNumber;
const int SingleFriendData::kRelationFieldNumber;
const int SingleFriendData::kSexFieldNumber;
const int SingleFriendData::kIsLockFieldNumber;
const int SingleFriendData::kTimeOrderFieldNumber;
const int SingleFriendData::kKilledFieldNumber;
const int SingleFriendData::kVipFlagFieldNumber;
const int SingleFriendData::kIntimacyDegreeFieldNumber;
#endif  // !_MSC_VER

SingleFriendData::SingleFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFriendData::InitAsDefaultInstance() {}

SingleFriendData::SingleFriendData(const SingleFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFriendData::SharedCtor() {
  _cached_size_ = 0;
  bekilled_ = 0u;
  head_ = 0u;
  status_ = 0u;
  groupid_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nationid_ = 0u;
  relation_ = 0u;
  sex_ = 0u;
  islock_ = 0u;
  timeorder_ = 0u;
  killed_ = 0u;
  vipflag_ = 0u;
  intimacydegree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFriendData::~SingleFriendData() {
  SharedDtor();
}

void SingleFriendData::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SingleFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFriendData_descriptor_;
}

const SingleFriendData& SingleFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

SingleFriendData* SingleFriendData::default_instance_ = NULL;

SingleFriendData* SingleFriendData::New() const {
  return new SingleFriendData;
}

void SingleFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bekilled_ = 0u;
    head_ = 0u;
    status_ = 0u;
    groupid_ = 0u;
    charid_ = 0u;
    if (_has_bit(5)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    nationid_ = 0u;
    relation_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = 0u;
    islock_ = 0u;
    timeorder_ = 0u;
    killed_ = 0u;
    vipflag_ = 0u;
    intimacydegree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BeKilled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bekilled_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Head;
        break;
      }
      
      // optional uint32 Head = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Head:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &head_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_GroupID;
        break;
      }
      
      // optional uint32 GroupID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_Name;
        break;
      }
      
      // optional string Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(56)) goto parse_NationID;
        break;
      }
      
      // optional uint32 NationID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NationID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Relation;
        break;
      }
      
      // optional uint32 Relation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Relation:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &relation_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_IsLock;
        break;
      }
      
      // optional uint32 IsLock = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IsLock:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &islock_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_TimeOrder;
        break;
      }
      
      // optional uint32 TimeOrder = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TimeOrder:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timeorder_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_Killed;
        break;
      }
      
      // optional uint32 Killed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Killed:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killed_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_IntimacyDegree;
        break;
      }
      
      // optional uint32 IntimacyDegree = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntimacyDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intimacydegree_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SingleFriendData::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BeKilled = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->bekilled(), output);
  }
  
  // optional uint32 Head = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->head(), output);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->status(), output);
  }
  
  // optional uint32 GroupID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->groupid(), output);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->charid(), output);
  }
  
  // optional string Name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteString(6, this->name(), output);
  }
  
  // optional uint32 NationID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->nationid(), output);
  }
  
  // optional uint32 Relation = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->relation(), output);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->sex(), output);
  }
  
  // optional uint32 IsLock = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->islock(), output);
  }
  
  // optional uint32 TimeOrder = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->timeorder(), output);
  }
  
  // optional uint32 Killed = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(12, this->killed(), output);
  }
  
  // optional uint32 VipFlag = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(13, this->vipflag(), output);
  }
  
  // optional uint32 IntimacyDegree = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(14, this->intimacydegree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BeKilled = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->bekilled(), target);
  }
  
  // optional uint32 Head = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->head(), target);
  }
  
  // optional uint32 Status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->status(), target);
  }
  
  // optional uint32 GroupID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->groupid(), target);
  }
  
  // optional uint32 CharID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->charid(), target);
  }
  
  // optional string Name = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(6, this->name(), target);
  }
  
  // optional uint32 NationID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->nationid(), target);
  }
  
  // optional uint32 Relation = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->relation(), target);
  }
  
  // optional uint32 Sex = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->sex(), target);
  }
  
  // optional uint32 IsLock = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->islock(), target);
  }
  
  // optional uint32 TimeOrder = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->timeorder(), target);
  }
  
  // optional uint32 Killed = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(12, this->killed(), target);
  }
  
  // optional uint32 VipFlag = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(13, this->vipflag(), target);
  }
  
  // optional uint32 IntimacyDegree = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(14, this->intimacydegree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFriendData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BeKilled = 1;
    if (has_bekilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bekilled());
    }
    
    // optional uint32 Head = 2;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->head());
    }
    
    // optional uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 GroupID = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 CharID = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional string Name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 NationID = 7;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationid());
    }
    
    // optional uint32 Relation = 8;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->relation());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 IsLock = 10;
    if (has_islock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->islock());
    }
    
    // optional uint32 TimeOrder = 11;
    if (has_timeorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timeorder());
    }
    
    // optional uint32 Killed = 12;
    if (has_killed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killed());
    }
    
    // optional uint32 VipFlag = 13;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
    // optional uint32 IntimacyDegree = 14;
    if (has_intimacydegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intimacydegree());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SingleFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFriendData::MergeFrom(const SingleFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bekilled(from.bekilled());
    }
    if (from._has_bit(1)) {
      set_head(from.head());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
    if (from._has_bit(3)) {
      set_groupid(from.groupid());
    }
    if (from._has_bit(4)) {
      set_charid(from.charid());
    }
    if (from._has_bit(5)) {
      set_name(from.name());
    }
    if (from._has_bit(6)) {
      set_nationid(from.nationid());
    }
    if (from._has_bit(7)) {
      set_relation(from.relation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_sex(from.sex());
    }
    if (from._has_bit(9)) {
      set_islock(from.islock());
    }
    if (from._has_bit(10)) {
      set_timeorder(from.timeorder());
    }
    if (from._has_bit(11)) {
      set_killed(from.killed());
    }
    if (from._has_bit(12)) {
      set_vipflag(from.vipflag());
    }
    if (from._has_bit(13)) {
      set_intimacydegree(from.intimacydegree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFriendData::CopyFrom(const SingleFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFriendData::Swap(SingleFriendData* other) {
  if (other != this) {
    std::swap(bekilled_, other->bekilled_);
    std::swap(head_, other->head_);
    std::swap(status_, other->status_);
    std::swap(groupid_, other->groupid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(nationid_, other->nationid_);
    std::swap(relation_, other->relation_);
    std::swap(sex_, other->sex_);
    std::swap(islock_, other->islock_);
    std::swap(timeorder_, other->timeorder_);
    std::swap(killed_, other->killed_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(intimacydegree_, other->intimacydegree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SingleFriendData::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SingleFriendData::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SingleFriendData::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SingleFriendData_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendGetListNotice::kFriendsFieldNumber;
const int CMessageFriendGetListNotice::kGroupNameFieldNumber;
#endif  // !_MSC_VER

CMessageFriendGetListNotice::CMessageFriendGetListNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendGetListNotice::InitAsDefaultInstance() {}

CMessageFriendGetListNotice::CMessageFriendGetListNotice(const CMessageFriendGetListNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendGetListNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendGetListNotice::~CMessageFriendGetListNotice() {
  SharedDtor();
}

void CMessageFriendGetListNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendGetListNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetListNotice_descriptor_;
}

const CMessageFriendGetListNotice& CMessageFriendGetListNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendGetListNotice* CMessageFriendGetListNotice::default_instance_ = NULL;

CMessageFriendGetListNotice* CMessageFriendGetListNotice::New() const {
  return new CMessageFriendGetListNotice;
}

void CMessageFriendGetListNotice::Clear() {
  friends_.Clear();
  groupname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendGetListNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SingleFriendData Friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Friends:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_friends()));
        if (input->ExpectTag(10)) goto parse_Friends;
        if (input->ExpectTag(18)) goto parse_GroupName;
        break;
      }
      
      // repeated string GroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroupName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_groupname()));
        if (input->ExpectTag(18)) goto parse_GroupName;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendGetListNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendGetListNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SingleFriendData Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->friends(i), output);
  }
  
  // repeated string GroupName = 2;
  for (int i = 0; i < this->groupname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->groupname(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendGetListNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SingleFriendData Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->friends(i), target);
  }
  
  // repeated string GroupName = 2;
  for (int i = 0; i < this->groupname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->groupname(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendGetListNotice::ByteSize() const {
  int total_size = 0;
  
  // repeated .SingleFriendData Friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  // repeated string GroupName = 2;
  total_size += 1 * this->groupname_size();
  for (int i = 0; i < this->groupname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->groupname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendGetListNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendGetListNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendGetListNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendGetListNotice::MergeFrom(const CMessageFriendGetListNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  groupname_.MergeFrom(from.groupname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendGetListNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetListNotice::CopyFrom(const CMessageFriendGetListNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetListNotice::Swap(CMessageFriendGetListNotice* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    groupname_.Swap(&other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendGetListNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendGetListNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendGetListNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetListNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageFriendGetListRequest::CMessageFriendGetListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendGetListRequest::InitAsDefaultInstance() {}

CMessageFriendGetListRequest::CMessageFriendGetListRequest(const CMessageFriendGetListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendGetListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendGetListRequest::~CMessageFriendGetListRequest() {
  SharedDtor();
}

void CMessageFriendGetListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendGetListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetListRequest_descriptor_;
}

const CMessageFriendGetListRequest& CMessageFriendGetListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendGetListRequest* CMessageFriendGetListRequest::default_instance_ = NULL;

CMessageFriendGetListRequest* CMessageFriendGetListRequest::New() const {
  return new CMessageFriendGetListRequest;
}

void CMessageFriendGetListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendGetListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageFriendGetListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendGetListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendGetListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendGetListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendGetListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendGetListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendGetListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendGetListRequest::MergeFrom(const CMessageFriendGetListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendGetListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetListRequest::CopyFrom(const CMessageFriendGetListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetListRequest::Swap(CMessageFriendGetListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendGetListRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendGetListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendGetListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetListRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendGroupNameNotice::kGroupIDFieldNumber;
const int CMessageFriendGroupNameNotice::kGroupNameFieldNumber;
#endif  // !_MSC_VER

CMessageFriendGroupNameNotice::CMessageFriendGroupNameNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendGroupNameNotice::InitAsDefaultInstance() {}

CMessageFriendGroupNameNotice::CMessageFriendGroupNameNotice(const CMessageFriendGroupNameNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendGroupNameNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendGroupNameNotice::~CMessageFriendGroupNameNotice() {
  SharedDtor();
}

void CMessageFriendGroupNameNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendGroupNameNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGroupNameNotice_descriptor_;
}

const CMessageFriendGroupNameNotice& CMessageFriendGroupNameNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendGroupNameNotice* CMessageFriendGroupNameNotice::default_instance_ = NULL;

CMessageFriendGroupNameNotice* CMessageFriendGroupNameNotice::New() const {
  return new CMessageFriendGroupNameNotice;
}

void CMessageFriendGroupNameNotice::Clear() {
  groupid_.Clear();
  groupname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendGroupNameNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_groupid(value);
        if (input->ExpectTag(8)) goto parse_GroupID;
        if (input->ExpectTag(18)) goto parse_GroupName;
        break;
      }
      
      // repeated string GroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_GroupName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_groupname()));
        if (input->ExpectTag(18)) goto parse_GroupName;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendGroupNameNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendGroupNameNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 GroupID = 1;
  for (int i = 0; i < this->groupid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->groupid(i), output);
  }
  
  // repeated string GroupName = 2;
  for (int i = 0; i < this->groupname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->groupname(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendGroupNameNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 GroupID = 1;
  for (int i = 0; i < this->groupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->groupid(i), target);
  }
  
  // repeated string GroupName = 2;
  for (int i = 0; i < this->groupname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->groupname(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendGroupNameNotice::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 GroupID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->groupid(i));
    }
    total_size += 1 * this->groupid_size() + data_size;
  }
  
  // repeated string GroupName = 2;
  total_size += 1 * this->groupname_size();
  for (int i = 0; i < this->groupname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->groupname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendGroupNameNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendGroupNameNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendGroupNameNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendGroupNameNotice::MergeFrom(const CMessageFriendGroupNameNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupid_.MergeFrom(from.groupid_);
  groupname_.MergeFrom(from.groupname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendGroupNameNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGroupNameNotice::CopyFrom(const CMessageFriendGroupNameNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGroupNameNotice::Swap(CMessageFriendGroupNameNotice* other) {
  if (other != this) {
    groupid_.Swap(&other->groupid_);
    groupname_.Swap(&other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendGroupNameNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendGroupNameNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendGroupNameNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGroupNameNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendChangeStatusNotice_R::kRouterFieldNumber;
const int CMessageFriendChangeStatusNotice_R::kStatusFieldNumber;
const int CMessageFriendChangeStatusNotice_R::kRelsFieldNumber;
const int CMessageFriendChangeStatusNotice_R::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChangeStatusNotice_R::CMessageFriendChangeStatusNotice_R()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChangeStatusNotice_R::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageFriendChangeStatusNotice_R::CMessageFriendChangeStatusNotice_R(const CMessageFriendChangeStatusNotice_R& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice_R::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  status_ = 0u;
  rels_ = 0u;
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChangeStatusNotice_R::~CMessageFriendChangeStatusNotice_R() {
  SharedDtor();
}

void CMessageFriendChangeStatusNotice_R::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice_R::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusNotice_R_descriptor_;
}

const CMessageFriendChangeStatusNotice_R& CMessageFriendChangeStatusNotice_R::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChangeStatusNotice_R* CMessageFriendChangeStatusNotice_R::default_instance_ = NULL;

CMessageFriendChangeStatusNotice_R* CMessageFriendChangeStatusNotice_R::New() const {
  return new CMessageFriendChangeStatusNotice_R;
}

void CMessageFriendChangeStatusNotice_R::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    status_ = 0u;
    rels_ = 0u;
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChangeStatusNotice_R::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Rels;
        break;
      }
      
      // optional uint32 Rels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rels:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rels_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChangeStatusNotice_R::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChangeStatusNotice_R::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->status(), output);
  }
  
  // optional uint32 Rels = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rels(), output);
  }
  
  // optional uint32 VipFlag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChangeStatusNotice_R::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional uint32 Rels = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rels(), target);
  }
  
  // optional uint32 VipFlag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChangeStatusNotice_R::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 Rels = 3;
    if (has_rels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rels());
    }
    
    // optional uint32 VipFlag = 4;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChangeStatusNotice_R::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChangeStatusNotice_R* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChangeStatusNotice_R*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChangeStatusNotice_R::MergeFrom(const CMessageFriendChangeStatusNotice_R& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_rels(from.rels());
    }
    if (from._has_bit(3)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChangeStatusNotice_R::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice_R::CopyFrom(const CMessageFriendChangeStatusNotice_R& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice_R::Swap(CMessageFriendChangeStatusNotice_R* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(status_, other->status_);
    std::swap(rels_, other->rels_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChangeStatusNotice_R::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice_R::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChangeStatusNotice_R::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusNotice_R_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendChangeStatusNotice::kCharIDFieldNumber;
const int CMessageFriendChangeStatusNotice::kStatusFieldNumber;
const int CMessageFriendChangeStatusNotice::kRelsFieldNumber;
const int CMessageFriendChangeStatusNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChangeStatusNotice::CMessageFriendChangeStatusNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChangeStatusNotice::InitAsDefaultInstance() {}

CMessageFriendChangeStatusNotice::CMessageFriendChangeStatusNotice(const CMessageFriendChangeStatusNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  status_ = 0u;
  rels_ = 0u;
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChangeStatusNotice::~CMessageFriendChangeStatusNotice() {
  SharedDtor();
}

void CMessageFriendChangeStatusNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusNotice_descriptor_;
}

const CMessageFriendChangeStatusNotice& CMessageFriendChangeStatusNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChangeStatusNotice* CMessageFriendChangeStatusNotice::default_instance_ = NULL;

CMessageFriendChangeStatusNotice* CMessageFriendChangeStatusNotice::New() const {
  return new CMessageFriendChangeStatusNotice;
}

void CMessageFriendChangeStatusNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    status_ = 0u;
    rels_ = 0u;
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChangeStatusNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Rels;
        break;
      }
      
      // optional uint32 Rels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rels:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rels_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChangeStatusNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChangeStatusNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->status(), output);
  }
  
  // optional uint32 Rels = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rels(), output);
  }
  
  // optional uint32 VipFlag = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChangeStatusNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional uint32 Rels = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rels(), target);
  }
  
  // optional uint32 VipFlag = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChangeStatusNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 Rels = 3;
    if (has_rels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rels());
    }
    
    // optional uint32 VipFlag = 4;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChangeStatusNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChangeStatusNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChangeStatusNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChangeStatusNotice::MergeFrom(const CMessageFriendChangeStatusNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_rels(from.rels());
    }
    if (from._has_bit(3)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChangeStatusNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice::CopyFrom(const CMessageFriendChangeStatusNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusNotice::Swap(CMessageFriendChangeStatusNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(rels_, other->rels_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChangeStatusNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChangeStatusNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendChangeStatusRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChangeStatusRequest::CMessageFriendChangeStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChangeStatusRequest::InitAsDefaultInstance() {}

CMessageFriendChangeStatusRequest::CMessageFriendChangeStatusRequest(const CMessageFriendChangeStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChangeStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChangeStatusRequest::~CMessageFriendChangeStatusRequest() {
  SharedDtor();
}

void CMessageFriendChangeStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusRequest_descriptor_;
}

const CMessageFriendChangeStatusRequest& CMessageFriendChangeStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChangeStatusRequest* CMessageFriendChangeStatusRequest::default_instance_ = NULL;

CMessageFriendChangeStatusRequest* CMessageFriendChangeStatusRequest::New() const {
  return new CMessageFriendChangeStatusRequest;
}

void CMessageFriendChangeStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChangeStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChangeStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChangeStatusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChangeStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChangeStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChangeStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChangeStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChangeStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChangeStatusRequest::MergeFrom(const CMessageFriendChangeStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChangeStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusRequest::CopyFrom(const CMessageFriendChangeStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChangeStatusRequest::Swap(CMessageFriendChangeStatusRequest* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChangeStatusRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChangeStatusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChangeStatusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChangeStatusRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAddFriendNotice::kRouterFieldNumber;
const int CMessageAddFriendNotice::kCharIDFieldNumber;
const int CMessageAddFriendNotice::kReltoMeFieldNumber;
const int CMessageAddFriendNotice::kStatusFieldNumber;
const int CMessageAddFriendNotice::kGroupIDFieldNumber;
#endif  // !_MSC_VER

CMessageAddFriendNotice::CMessageAddFriendNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAddFriendNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageAddFriendNotice::CMessageAddFriendNotice(const CMessageAddFriendNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAddFriendNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  charid_ = 0u;
  reltome_ = 0u;
  status_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAddFriendNotice::~CMessageAddFriendNotice() {
  SharedDtor();
}

void CMessageAddFriendNotice::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageAddFriendNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendNotice_descriptor_;
}

const CMessageAddFriendNotice& CMessageAddFriendNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAddFriendNotice* CMessageAddFriendNotice::default_instance_ = NULL;

CMessageAddFriendNotice* CMessageAddFriendNotice::New() const {
  return new CMessageAddFriendNotice;
}

void CMessageAddFriendNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    charid_ = 0u;
    reltome_ = 0u;
    status_ = 0u;
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAddFriendNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ReltoMe;
        break;
      }
      
      // optional uint32 ReltoMe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReltoMe:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &reltome_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_GroupID;
        break;
      }
      
      // optional uint32 GroupID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAddFriendNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAddFriendNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 ReltoMe = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->reltome(), output);
  }
  
  // optional uint32 Status = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->status(), output);
  }
  
  // optional uint32 GroupID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->groupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAddFriendNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 ReltoMe = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->reltome(), target);
  }
  
  // optional uint32 Status = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->status(), target);
  }
  
  // optional uint32 GroupID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->groupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAddFriendNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 ReltoMe = 3;
    if (has_reltome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->reltome());
    }
    
    // optional uint32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 GroupID = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAddFriendNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAddFriendNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAddFriendNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAddFriendNotice::MergeFrom(const CMessageAddFriendNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_reltome(from.reltome());
    }
    if (from._has_bit(3)) {
      set_status(from.status());
    }
    if (from._has_bit(4)) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAddFriendNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendNotice::CopyFrom(const CMessageAddFriendNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAddFriendNotice::Swap(CMessageAddFriendNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(charid_, other->charid_);
    std::swap(reltome_, other->reltome_);
    std::swap(status_, other->status_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAddFriendNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAddFriendNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAddFriendNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAddFriendNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendChgGroupNameRequest::_default_newname_;
#ifndef _MSC_VER
const int CMessageFriendChgGroupNameRequest::kNewNameFieldNumber;
const int CMessageFriendChgGroupNameRequest::kGroupIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChgGroupNameRequest::CMessageFriendChgGroupNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChgGroupNameRequest::InitAsDefaultInstance() {}

CMessageFriendChgGroupNameRequest::CMessageFriendChgGroupNameRequest(const CMessageFriendChgGroupNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChgGroupNameRequest::SharedCtor() {
  _cached_size_ = 0;
  newname_ = const_cast< ::std::string*>(&_default_newname_);
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChgGroupNameRequest::~CMessageFriendChgGroupNameRequest() {
  SharedDtor();
}

void CMessageFriendChgGroupNameRequest::SharedDtor() {
  if (newname_ != &_default_newname_) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChgGroupNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgGroupNameRequest_descriptor_;
}

const CMessageFriendChgGroupNameRequest& CMessageFriendChgGroupNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChgGroupNameRequest* CMessageFriendChgGroupNameRequest::default_instance_ = NULL;

CMessageFriendChgGroupNameRequest* CMessageFriendChgGroupNameRequest::New() const {
  return new CMessageFriendChgGroupNameRequest;
}

void CMessageFriendChgGroupNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (newname_ != &_default_newname_) {
        newname_->clear();
      }
    }
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChgGroupNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string NewName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_newname()));
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }
      
      // optional uint32 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &groupid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChgGroupNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChgGroupNameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string NewName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->newname(), output);
  }
  
  // optional uint32 GroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->groupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChgGroupNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string NewName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->newname(), target);
  }
  
  // optional uint32 GroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->groupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChgGroupNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string NewName = 1;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->newname());
    }
    
    // optional uint32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->groupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChgGroupNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChgGroupNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChgGroupNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChgGroupNameRequest::MergeFrom(const CMessageFriendChgGroupNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_newname(from.newname());
    }
    if (from._has_bit(1)) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChgGroupNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgGroupNameRequest::CopyFrom(const CMessageFriendChgGroupNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgGroupNameRequest::Swap(CMessageFriendChgGroupNameRequest* other) {
  if (other != this) {
    std::swap(newname_, other->newname_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChgGroupNameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChgGroupNameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChgGroupNameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgGroupNameRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendChgFriendGroupRequest::kCharIDFieldNumber;
const int CMessageFriendChgFriendGroupRequest::kDesGroupIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChgFriendGroupRequest::CMessageFriendChgFriendGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChgFriendGroupRequest::InitAsDefaultInstance() {}

CMessageFriendChgFriendGroupRequest::CMessageFriendChgFriendGroupRequest(const CMessageFriendChgFriendGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  desgroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChgFriendGroupRequest::~CMessageFriendChgFriendGroupRequest() {
  SharedDtor();
}

void CMessageFriendChgFriendGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgFriendGroupRequest_descriptor_;
}

const CMessageFriendChgFriendGroupRequest& CMessageFriendChgFriendGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChgFriendGroupRequest* CMessageFriendChgFriendGroupRequest::default_instance_ = NULL;

CMessageFriendChgFriendGroupRequest* CMessageFriendChgFriendGroupRequest::New() const {
  return new CMessageFriendChgFriendGroupRequest;
}

void CMessageFriendChgFriendGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    desgroupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChgFriendGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesGroupID;
        break;
      }
      
      // optional uint32 DesGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesGroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desgroupid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChgFriendGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChgFriendGroupRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 DesGroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desgroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChgFriendGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 DesGroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desgroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChgFriendGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 DesGroupID = 2;
    if (has_desgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desgroupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChgFriendGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChgFriendGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChgFriendGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChgFriendGroupRequest::MergeFrom(const CMessageFriendChgFriendGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_desgroupid(from.desgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChgFriendGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupRequest::CopyFrom(const CMessageFriendChgFriendGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupRequest::Swap(CMessageFriendChgFriendGroupRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(desgroupid_, other->desgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChgFriendGroupRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChgFriendGroupRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgFriendGroupRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendSendMessageRequest::_default_msg_;
#ifndef _MSC_VER
const int CMessageFriendSendMessageRequest::kMsgFieldNumber;
const int CMessageFriendSendMessageRequest::kCharIDFieldNumber;
const int CMessageFriendSendMessageRequest::kAutoFlagFieldNumber;
#endif  // !_MSC_VER

CMessageFriendSendMessageRequest::CMessageFriendSendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendSendMessageRequest::InitAsDefaultInstance() {}

CMessageFriendSendMessageRequest::CMessageFriendSendMessageRequest(const CMessageFriendSendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendSendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  charid_ = 0u;
  autoflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendSendMessageRequest::~CMessageFriendSendMessageRequest() {
  SharedDtor();
}

void CMessageFriendSendMessageRequest::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendSendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendSendMessageRequest_descriptor_;
}

const CMessageFriendSendMessageRequest& CMessageFriendSendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendSendMessageRequest* CMessageFriendSendMessageRequest::default_instance_ = NULL;

CMessageFriendSendMessageRequest* CMessageFriendSendMessageRequest::New() const {
  return new CMessageFriendSendMessageRequest;
}

void CMessageFriendSendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    charid_ = 0u;
    autoflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendSendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_AutoFlag;
        break;
      }
      
      // optional uint32 AutoFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AutoFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &autoflag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendSendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendSendMessageRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string Msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->msg(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 AutoFlag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->autoflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendSendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->msg(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 AutoFlag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->autoflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendSendMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 AutoFlag = 3;
    if (has_autoflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->autoflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendSendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendSendMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendSendMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendSendMessageRequest::MergeFrom(const CMessageFriendSendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_autoflag(from.autoflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendSendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendSendMessageRequest::CopyFrom(const CMessageFriendSendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendSendMessageRequest::Swap(CMessageFriendSendMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(charid_, other->charid_);
    std::swap(autoflag_, other->autoflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendSendMessageRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendSendMessageRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendSendMessageRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendSendMessageRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendMessageNotice::_default_msg_;
const ::std::string CMessageFriendMessageNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageFriendMessageNotice::kRouterFieldNumber;
const int CMessageFriendMessageNotice::kAutoFlagFieldNumber;
const int CMessageFriendMessageNotice::kCharIDFieldNumber;
const int CMessageFriendMessageNotice::kSexFieldNumber;
const int CMessageFriendMessageNotice::kMsgFieldNumber;
const int CMessageFriendMessageNotice::kFaceIDFieldNumber;
const int CMessageFriendMessageNotice::kNameFieldNumber;
const int CMessageFriendMessageNotice::kSendTimeFieldNumber;
const int CMessageFriendMessageNotice::kCampIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendMessageNotice::CMessageFriendMessageNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendMessageNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageFriendMessageNotice::CMessageFriendMessageNotice(const CMessageFriendMessageNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendMessageNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  autoflag_ = 0u;
  charid_ = 0u;
  sex_ = 0u;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  faceid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  sendtime_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendMessageNotice::~CMessageFriendMessageNotice() {
  SharedDtor();
}

void CMessageFriendMessageNotice::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageFriendMessageNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMessageNotice_descriptor_;
}

const CMessageFriendMessageNotice& CMessageFriendMessageNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendMessageNotice* CMessageFriendMessageNotice::default_instance_ = NULL;

CMessageFriendMessageNotice* CMessageFriendMessageNotice::New() const {
  return new CMessageFriendMessageNotice;
}

void CMessageFriendMessageNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    autoflag_ = 0u;
    charid_ = 0u;
    sex_ = 0u;
    if (_has_bit(4)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    faceid_ = 0u;
    if (_has_bit(6)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    sendtime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    campid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendMessageNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_AutoFlag;
        break;
      }
      
      // optional uint32 AutoFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AutoFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &autoflag_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Msg;
        break;
      }
      
      // optional string Msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Msg:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_msg()));
        if (input->ExpectTag(48)) goto parse_FaceID;
        break;
      }
      
      // optional uint32 FaceID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &faceid_));
        _set_bit(5);
        if (input->ExpectTag(58)) goto parse_Name;
        break;
      }
      
      // optional string Name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(144)) goto parse_SendTime;
        break;
      }
      
      // optional uint32 SendTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SendTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sendtime_));
        _set_bit(7);
        if (input->ExpectTag(152)) goto parse_CampID;
        break;
      }
      
      // optional uint32 CampID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CampID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &campid_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendMessageNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendMessageNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 AutoFlag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->autoflag(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sex(), output);
  }
  
  // optional string Msg = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->msg(), output);
  }
  
  // optional uint32 FaceID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->faceid(), output);
  }
  
  // optional string Name = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteString(7, this->name(), output);
  }
  
  // optional uint32 SendTime = 18;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(18, this->sendtime(), output);
  }
  
  // optional uint32 CampID = 19;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->campid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendMessageNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 AutoFlag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->autoflag(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 Sex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sex(), target);
  }
  
  // optional string Msg = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->msg(), target);
  }
  
  // optional uint32 FaceID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->faceid(), target);
  }
  
  // optional string Name = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(7, this->name(), target);
  }
  
  // optional uint32 SendTime = 18;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(18, this->sendtime(), target);
  }
  
  // optional uint32 CampID = 19;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->campid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendMessageNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 AutoFlag = 2;
    if (has_autoflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->autoflag());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional string Msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->msg());
    }
    
    // optional uint32 FaceID = 6;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->faceid());
    }
    
    // optional string Name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 SendTime = 18;
    if (has_sendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sendtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CampID = 19;
    if (has_campid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->campid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendMessageNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendMessageNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendMessageNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendMessageNotice::MergeFrom(const CMessageFriendMessageNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_autoflag(from.autoflag());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_sex(from.sex());
    }
    if (from._has_bit(4)) {
      set_msg(from.msg());
    }
    if (from._has_bit(5)) {
      set_faceid(from.faceid());
    }
    if (from._has_bit(6)) {
      set_name(from.name());
    }
    if (from._has_bit(7)) {
      set_sendtime(from.sendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendMessageNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMessageNotice::CopyFrom(const CMessageFriendMessageNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMessageNotice::Swap(CMessageFriendMessageNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(autoflag_, other->autoflag_);
    std::swap(charid_, other->charid_);
    std::swap(sex_, other->sex_);
    std::swap(msg_, other->msg_);
    std::swap(faceid_, other->faceid_);
    std::swap(name_, other->name_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendMessageNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendMessageNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendMessageNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMessageNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendMoveToBlackRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendMoveToBlackRequest::CMessageFriendMoveToBlackRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendMoveToBlackRequest::InitAsDefaultInstance() {}

CMessageFriendMoveToBlackRequest::CMessageFriendMoveToBlackRequest(const CMessageFriendMoveToBlackRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendMoveToBlackRequest::~CMessageFriendMoveToBlackRequest() {
  SharedDtor();
}

void CMessageFriendMoveToBlackRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMoveToBlackRequest_descriptor_;
}

const CMessageFriendMoveToBlackRequest& CMessageFriendMoveToBlackRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendMoveToBlackRequest* CMessageFriendMoveToBlackRequest::default_instance_ = NULL;

CMessageFriendMoveToBlackRequest* CMessageFriendMoveToBlackRequest::New() const {
  return new CMessageFriendMoveToBlackRequest;
}

void CMessageFriendMoveToBlackRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendMoveToBlackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendMoveToBlackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendMoveToBlackRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendMoveToBlackRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendMoveToBlackRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendMoveToBlackRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendMoveToBlackRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendMoveToBlackRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendMoveToBlackRequest::MergeFrom(const CMessageFriendMoveToBlackRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendMoveToBlackRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackRequest::CopyFrom(const CMessageFriendMoveToBlackRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackRequest::Swap(CMessageFriendMoveToBlackRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendMoveToBlackRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendMoveToBlackRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMoveToBlackRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendAddBlackRequest::_default_desname_;
#ifndef _MSC_VER
const int CMessageFriendAddBlackRequest::kDesNameFieldNumber;
#endif  // !_MSC_VER

CMessageFriendAddBlackRequest::CMessageFriendAddBlackRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendAddBlackRequest::InitAsDefaultInstance() {}

CMessageFriendAddBlackRequest::CMessageFriendAddBlackRequest(const CMessageFriendAddBlackRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendAddBlackRequest::SharedCtor() {
  _cached_size_ = 0;
  desname_ = const_cast< ::std::string*>(&_default_desname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendAddBlackRequest::~CMessageFriendAddBlackRequest() {
  SharedDtor();
}

void CMessageFriendAddBlackRequest::SharedDtor() {
  if (desname_ != &_default_desname_) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendAddBlackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendAddBlackRequest_descriptor_;
}

const CMessageFriendAddBlackRequest& CMessageFriendAddBlackRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendAddBlackRequest* CMessageFriendAddBlackRequest::default_instance_ = NULL;

CMessageFriendAddBlackRequest* CMessageFriendAddBlackRequest::New() const {
  return new CMessageFriendAddBlackRequest;
}

void CMessageFriendAddBlackRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (desname_ != &_default_desname_) {
        desname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendAddBlackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string DesName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_desname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendAddBlackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendAddBlackRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string DesName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->desname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendAddBlackRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string DesName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->desname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendAddBlackRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DesName = 1;
    if (has_desname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->desname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendAddBlackRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendAddBlackRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendAddBlackRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendAddBlackRequest::MergeFrom(const CMessageFriendAddBlackRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_desname(from.desname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendAddBlackRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendAddBlackRequest::CopyFrom(const CMessageFriendAddBlackRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendAddBlackRequest::Swap(CMessageFriendAddBlackRequest* other) {
  if (other != this) {
    std::swap(desname_, other->desname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendAddBlackRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendAddBlackRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendAddBlackRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendAddBlackRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendChgFriendGroupNotice::kCharIDFieldNumber;
const int CMessageFriendChgFriendGroupNotice::kDesGroupIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendChgFriendGroupNotice::CMessageFriendChgFriendGroupNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendChgFriendGroupNotice::InitAsDefaultInstance() {}

CMessageFriendChgFriendGroupNotice::CMessageFriendChgFriendGroupNotice(const CMessageFriendChgFriendGroupNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  desgroupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendChgFriendGroupNotice::~CMessageFriendChgFriendGroupNotice() {
  SharedDtor();
}

void CMessageFriendChgFriendGroupNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgFriendGroupNotice_descriptor_;
}

const CMessageFriendChgFriendGroupNotice& CMessageFriendChgFriendGroupNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendChgFriendGroupNotice* CMessageFriendChgFriendGroupNotice::default_instance_ = NULL;

CMessageFriendChgFriendGroupNotice* CMessageFriendChgFriendGroupNotice::New() const {
  return new CMessageFriendChgFriendGroupNotice;
}

void CMessageFriendChgFriendGroupNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    desgroupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendChgFriendGroupNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DesGroupID;
        break;
      }
      
      // optional uint32 DesGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesGroupID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &desgroupid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendChgFriendGroupNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendChgFriendGroupNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 DesGroupID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->desgroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendChgFriendGroupNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 DesGroupID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->desgroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendChgFriendGroupNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 DesGroupID = 2;
    if (has_desgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->desgroupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendChgFriendGroupNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendChgFriendGroupNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendChgFriendGroupNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendChgFriendGroupNotice::MergeFrom(const CMessageFriendChgFriendGroupNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_desgroupid(from.desgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendChgFriendGroupNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupNotice::CopyFrom(const CMessageFriendChgFriendGroupNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendChgFriendGroupNotice::Swap(CMessageFriendChgFriendGroupNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(desgroupid_, other->desgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendChgFriendGroupNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendChgFriendGroupNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendChgFriendGroupNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendChgFriendGroupNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendMoveToBlackNotice::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendMoveToBlackNotice::CMessageFriendMoveToBlackNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendMoveToBlackNotice::InitAsDefaultInstance() {}

CMessageFriendMoveToBlackNotice::CMessageFriendMoveToBlackNotice(const CMessageFriendMoveToBlackNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendMoveToBlackNotice::~CMessageFriendMoveToBlackNotice() {
  SharedDtor();
}

void CMessageFriendMoveToBlackNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMoveToBlackNotice_descriptor_;
}

const CMessageFriendMoveToBlackNotice& CMessageFriendMoveToBlackNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendMoveToBlackNotice* CMessageFriendMoveToBlackNotice::default_instance_ = NULL;

CMessageFriendMoveToBlackNotice* CMessageFriendMoveToBlackNotice::New() const {
  return new CMessageFriendMoveToBlackNotice;
}

void CMessageFriendMoveToBlackNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendMoveToBlackNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendMoveToBlackNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendMoveToBlackNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendMoveToBlackNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendMoveToBlackNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendMoveToBlackNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendMoveToBlackNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendMoveToBlackNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendMoveToBlackNotice::MergeFrom(const CMessageFriendMoveToBlackNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendMoveToBlackNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackNotice::CopyFrom(const CMessageFriendMoveToBlackNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendMoveToBlackNotice::Swap(CMessageFriendMoveToBlackNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendMoveToBlackNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendMoveToBlackNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendMoveToBlackNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendMoveToBlackNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendLockEnemyRequest::kCharIDFieldNumber;
const int CMessageFriendLockEnemyRequest::kLockTypeFieldNumber;
#endif  // !_MSC_VER

CMessageFriendLockEnemyRequest::CMessageFriendLockEnemyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendLockEnemyRequest::InitAsDefaultInstance() {}

CMessageFriendLockEnemyRequest::CMessageFriendLockEnemyRequest(const CMessageFriendLockEnemyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendLockEnemyRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  locktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendLockEnemyRequest::~CMessageFriendLockEnemyRequest() {
  SharedDtor();
}

void CMessageFriendLockEnemyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendLockEnemyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendLockEnemyRequest_descriptor_;
}

const CMessageFriendLockEnemyRequest& CMessageFriendLockEnemyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendLockEnemyRequest* CMessageFriendLockEnemyRequest::default_instance_ = NULL;

CMessageFriendLockEnemyRequest* CMessageFriendLockEnemyRequest::New() const {
  return new CMessageFriendLockEnemyRequest;
}

void CMessageFriendLockEnemyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    locktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendLockEnemyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_LockType;
        break;
      }
      
      // optional uint32 LockType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LockType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &locktype_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendLockEnemyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendLockEnemyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 LockType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->locktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendLockEnemyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 LockType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->locktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendLockEnemyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 LockType = 2;
    if (has_locktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->locktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendLockEnemyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendLockEnemyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendLockEnemyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendLockEnemyRequest::MergeFrom(const CMessageFriendLockEnemyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_locktype(from.locktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendLockEnemyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendLockEnemyRequest::CopyFrom(const CMessageFriendLockEnemyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendLockEnemyRequest::Swap(CMessageFriendLockEnemyRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(locktype_, other->locktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendLockEnemyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendLockEnemyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendLockEnemyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendLockEnemyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageFriendGetFriendsStateRequest::CMessageFriendGetFriendsStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendGetFriendsStateRequest::InitAsDefaultInstance() {}

CMessageFriendGetFriendsStateRequest::CMessageFriendGetFriendsStateRequest(const CMessageFriendGetFriendsStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendGetFriendsStateRequest::~CMessageFriendGetFriendsStateRequest() {
  SharedDtor();
}

void CMessageFriendGetFriendsStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetFriendsStateRequest_descriptor_;
}

const CMessageFriendGetFriendsStateRequest& CMessageFriendGetFriendsStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendGetFriendsStateRequest* CMessageFriendGetFriendsStateRequest::default_instance_ = NULL;

CMessageFriendGetFriendsStateRequest* CMessageFriendGetFriendsStateRequest::New() const {
  return new CMessageFriendGetFriendsStateRequest;
}

void CMessageFriendGetFriendsStateRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendGetFriendsStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageFriendGetFriendsStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendGetFriendsStateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendGetFriendsStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendGetFriendsStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendGetFriendsStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendGetFriendsStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendGetFriendsStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendGetFriendsStateRequest::MergeFrom(const CMessageFriendGetFriendsStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendGetFriendsStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateRequest::CopyFrom(const CMessageFriendGetFriendsStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateRequest::Swap(CMessageFriendGetFriendsStateRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendGetFriendsStateRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendGetFriendsStateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetFriendsStateRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendGetFriendsStateNotice::kStatesFieldNumber;
const int CMessageFriendGetFriendsStateNotice::kRelsFieldNumber;
const int CMessageFriendGetFriendsStateNotice::kCharIDsFieldNumber;
const int CMessageFriendGetFriendsStateNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageFriendGetFriendsStateNotice::CMessageFriendGetFriendsStateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendGetFriendsStateNotice::InitAsDefaultInstance() {}

CMessageFriendGetFriendsStateNotice::CMessageFriendGetFriendsStateNotice(const CMessageFriendGetFriendsStateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendGetFriendsStateNotice::~CMessageFriendGetFriendsStateNotice() {
  SharedDtor();
}

void CMessageFriendGetFriendsStateNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetFriendsStateNotice_descriptor_;
}

const CMessageFriendGetFriendsStateNotice& CMessageFriendGetFriendsStateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendGetFriendsStateNotice* CMessageFriendGetFriendsStateNotice::default_instance_ = NULL;

CMessageFriendGetFriendsStateNotice* CMessageFriendGetFriendsStateNotice::New() const {
  return new CMessageFriendGetFriendsStateNotice;
}

void CMessageFriendGetFriendsStateNotice::Clear() {
  states_.Clear();
  rels_.Clear();
  charids_.Clear();
  vipflag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendGetFriendsStateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 States = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_States:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_states(value);
        if (input->ExpectTag(8)) goto parse_States;
        if (input->ExpectTag(16)) goto parse_Rels;
        break;
      }
      
      // repeated uint32 Rels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rels:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_rels(value);
        if (input->ExpectTag(16)) goto parse_Rels;
        if (input->ExpectTag(24)) goto parse_CharIDs;
        break;
      }
      
      // repeated uint32 CharIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharIDs:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_charids(value);
        if (input->ExpectTag(24)) goto parse_CharIDs;
        if (input->ExpectTag(32)) goto parse_VipFlag;
        break;
      }
      
      // repeated uint32 VipFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_vipflag(value);
        if (input->ExpectTag(32)) goto parse_VipFlag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendGetFriendsStateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendGetFriendsStateNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 States = 1;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->states(i), output);
  }
  
  // repeated uint32 Rels = 2;
  for (int i = 0; i < this->rels_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->rels(i), output);
  }
  
  // repeated uint32 CharIDs = 3;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charids(i), output);
  }
  
  // repeated uint32 VipFlag = 4;
  for (int i = 0; i < this->vipflag_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->vipflag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendGetFriendsStateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 States = 1;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->states(i), target);
  }
  
  // repeated uint32 Rels = 2;
  for (int i = 0; i < this->rels_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->rels(i), target);
  }
  
  // repeated uint32 CharIDs = 3;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charids(i), target);
  }
  
  // repeated uint32 VipFlag = 4;
  for (int i = 0; i < this->vipflag_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->vipflag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendGetFriendsStateNotice::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 States = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->states(i));
    }
    total_size += 1 * this->states_size() + data_size;
  }
  
  // repeated uint32 Rels = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->rels(i));
    }
    total_size += 1 * this->rels_size() + data_size;
  }
  
  // repeated uint32 CharIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }
  
  // repeated uint32 VipFlag = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vipflag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->vipflag(i));
    }
    total_size += 1 * this->vipflag_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendGetFriendsStateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendGetFriendsStateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendGetFriendsStateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendGetFriendsStateNotice::MergeFrom(const CMessageFriendGetFriendsStateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  rels_.MergeFrom(from.rels_);
  charids_.MergeFrom(from.charids_);
  vipflag_.MergeFrom(from.vipflag_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendGetFriendsStateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateNotice::CopyFrom(const CMessageFriendGetFriendsStateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendGetFriendsStateNotice::Swap(CMessageFriendGetFriendsStateNotice* other) {
  if (other != this) {
    states_.Swap(&other->states_);
    rels_.Swap(&other->rels_);
    charids_.Swap(&other->charids_);
    vipflag_.Swap(&other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendGetFriendsStateNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendGetFriendsStateNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendGetFriendsStateNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendGetFriendsStateNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendUpdateEnemyRequest::kKillerCharIDFieldNumber;
const int CMessageFriendUpdateEnemyRequest::kDelEnemyCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendUpdateEnemyRequest::CMessageFriendUpdateEnemyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendUpdateEnemyRequest::InitAsDefaultInstance() {}

CMessageFriendUpdateEnemyRequest::CMessageFriendUpdateEnemyRequest(const CMessageFriendUpdateEnemyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendUpdateEnemyRequest::SharedCtor() {
  _cached_size_ = 0;
  killercharid_ = 0u;
  delenemycharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendUpdateEnemyRequest::~CMessageFriendUpdateEnemyRequest() {
  SharedDtor();
}

void CMessageFriendUpdateEnemyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendUpdateEnemyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendUpdateEnemyRequest_descriptor_;
}

const CMessageFriendUpdateEnemyRequest& CMessageFriendUpdateEnemyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendUpdateEnemyRequest* CMessageFriendUpdateEnemyRequest::default_instance_ = NULL;

CMessageFriendUpdateEnemyRequest* CMessageFriendUpdateEnemyRequest::New() const {
  return new CMessageFriendUpdateEnemyRequest;
}

void CMessageFriendUpdateEnemyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killercharid_ = 0u;
    delenemycharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendUpdateEnemyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 KillerCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &killercharid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_DelEnemyCharID;
        break;
      }
      
      // optional uint32 DelEnemyCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DelEnemyCharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &delenemycharid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendUpdateEnemyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendUpdateEnemyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 KillerCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->killercharid(), output);
  }
  
  // optional uint32 DelEnemyCharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->delenemycharid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendUpdateEnemyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 KillerCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->killercharid(), target);
  }
  
  // optional uint32 DelEnemyCharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->delenemycharid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendUpdateEnemyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 KillerCharID = 1;
    if (has_killercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->killercharid());
    }
    
    // optional uint32 DelEnemyCharID = 2;
    if (has_delenemycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->delenemycharid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendUpdateEnemyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendUpdateEnemyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendUpdateEnemyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendUpdateEnemyRequest::MergeFrom(const CMessageFriendUpdateEnemyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_killercharid(from.killercharid());
    }
    if (from._has_bit(1)) {
      set_delenemycharid(from.delenemycharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendUpdateEnemyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendUpdateEnemyRequest::CopyFrom(const CMessageFriendUpdateEnemyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendUpdateEnemyRequest::Swap(CMessageFriendUpdateEnemyRequest* other) {
  if (other != this) {
    std::swap(killercharid_, other->killercharid_);
    std::swap(delenemycharid_, other->delenemycharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendUpdateEnemyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendUpdateEnemyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendUpdateEnemyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendUpdateEnemyRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeMasterRequest::_default_mastername_;
#ifndef _MSC_VER
const int CMessageChangeMasterRequest::kMasterNameFieldNumber;
const int CMessageChangeMasterRequest::kCharIDFieldNumber;
const int CMessageChangeMasterRequest::kNPCEntityIDFieldNumber;
const int CMessageChangeMasterRequest::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeMasterRequest::CMessageChangeMasterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeMasterRequest::InitAsDefaultInstance() {}

CMessageChangeMasterRequest::CMessageChangeMasterRequest(const CMessageChangeMasterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeMasterRequest::SharedCtor() {
  _cached_size_ = 0;
  mastername_ = const_cast< ::std::string*>(&_default_mastername_);
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeMasterRequest::~CMessageChangeMasterRequest() {
  SharedDtor();
}

void CMessageChangeMasterRequest::SharedDtor() {
  if (mastername_ != &_default_mastername_) {
    delete mastername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeMasterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterRequest_descriptor_;
}

const CMessageChangeMasterRequest& CMessageChangeMasterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeMasterRequest* CMessageChangeMasterRequest::default_instance_ = NULL;

CMessageChangeMasterRequest* CMessageChangeMasterRequest::New() const {
  return new CMessageChangeMasterRequest;
}

void CMessageChangeMasterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (mastername_ != &_default_mastername_) {
        mastername_->clear();
      }
    }
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  masterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeMasterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string MasterName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mastername()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MasterID;
        break;
      }
      
      // repeated uint32 MasterID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masterid(value);
        if (input->ExpectTag(32)) goto parse_MasterID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeMasterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeMasterRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string MasterName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->mastername(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  // repeated uint32 MasterID = 4;
  for (int i = 0; i < this->masterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->masterid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeMasterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MasterName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->mastername(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  // repeated uint32 MasterID = 4;
  for (int i = 0; i < this->masterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->masterid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeMasterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MasterName = 1;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mastername());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  // repeated uint32 MasterID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->masterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masterid(i));
    }
    total_size += 1 * this->masterid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeMasterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeMasterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeMasterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeMasterRequest::MergeFrom(const CMessageChangeMasterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  masterid_.MergeFrom(from.masterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mastername(from.mastername());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeMasterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterRequest::CopyFrom(const CMessageChangeMasterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterRequest::Swap(CMessageChangeMasterRequest* other) {
  if (other != this) {
    std::swap(mastername_, other->mastername_);
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    masterid_.Swap(&other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeMasterRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeMasterRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeMasterRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterRequest_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeMasterResponse::_default_mastername_;
#ifndef _MSC_VER
const int CMessageChangeMasterResponse::kResultFieldNumber;
const int CMessageChangeMasterResponse::kMasterIDFieldNumber;
const int CMessageChangeMasterResponse::kMasterNameFieldNumber;
const int CMessageChangeMasterResponse::kCharIDFieldNumber;
const int CMessageChangeMasterResponse::kLevelFieldNumber;
const int CMessageChangeMasterResponse::kMetierFieldNumber;
#endif  // !_MSC_VER

CMessageChangeMasterResponse::CMessageChangeMasterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeMasterResponse::InitAsDefaultInstance() {}

CMessageChangeMasterResponse::CMessageChangeMasterResponse(const CMessageChangeMasterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeMasterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  masterid_ = 0u;
  mastername_ = const_cast< ::std::string*>(&_default_mastername_);
  charid_ = 0u;
  level_ = 0u;
  metier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeMasterResponse::~CMessageChangeMasterResponse() {
  SharedDtor();
}

void CMessageChangeMasterResponse::SharedDtor() {
  if (mastername_ != &_default_mastername_) {
    delete mastername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeMasterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterResponse_descriptor_;
}

const CMessageChangeMasterResponse& CMessageChangeMasterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeMasterResponse* CMessageChangeMasterResponse::default_instance_ = NULL;

CMessageChangeMasterResponse* CMessageChangeMasterResponse::New() const {
  return new CMessageChangeMasterResponse;
}

void CMessageChangeMasterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    masterid_ = 0u;
    if (_has_bit(2)) {
      if (mastername_ != &_default_mastername_) {
        mastername_->clear();
      }
    }
    charid_ = 0u;
    level_ = 0u;
    metier_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeMasterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_MasterName;
        break;
      }
      
      // optional string MasterName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_MasterName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_mastername()));
        if (input->ExpectTag(32)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeMasterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeMasterResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->masterid(), output);
  }
  
  // optional string MasterName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->mastername(), output);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->charid(), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeMasterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->masterid(), target);
  }
  
  // optional string MasterName = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->mastername(), target);
  }
  
  // optional uint32 CharID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->charid(), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 Metier = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeMasterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 MasterID = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
    // optional string MasterName = 3;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->mastername());
    }
    
    // optional uint32 CharID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Metier = 6;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeMasterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeMasterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeMasterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeMasterResponse::MergeFrom(const CMessageChangeMasterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_masterid(from.masterid());
    }
    if (from._has_bit(2)) {
      set_mastername(from.mastername());
    }
    if (from._has_bit(3)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
    if (from._has_bit(5)) {
      set_metier(from.metier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeMasterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterResponse::CopyFrom(const CMessageChangeMasterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterResponse::Swap(CMessageChangeMasterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(masterid_, other->masterid_);
    std::swap(mastername_, other->mastername_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(metier_, other->metier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeMasterResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeMasterResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeMasterResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeMasterNotify::kSlaveFieldNumber;
const int CMessageChangeMasterNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageChangeMasterNotify::CMessageChangeMasterNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeMasterNotify::InitAsDefaultInstance() {  slave_ = const_cast< ::SlaveInfo*>(&::SlaveInfo::default_instance());
}

CMessageChangeMasterNotify::CMessageChangeMasterNotify(const CMessageChangeMasterNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeMasterNotify::SharedCtor() {
  _cached_size_ = 0;
  slave_ = NULL;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeMasterNotify::~CMessageChangeMasterNotify() {
  SharedDtor();
}

void CMessageChangeMasterNotify::SharedDtor() {
  if (this != default_instance_) {
    delete slave_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeMasterNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterNotify_descriptor_;
}

const CMessageChangeMasterNotify& CMessageChangeMasterNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeMasterNotify* CMessageChangeMasterNotify::default_instance_ = NULL;

CMessageChangeMasterNotify* CMessageChangeMasterNotify::New() const {
  return new CMessageChangeMasterNotify;
}

void CMessageChangeMasterNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (slave_ != NULL) slave_->::SlaveInfo::Clear();
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeMasterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .SlaveInfo Slave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_slave()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeMasterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeMasterNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->slave(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeMasterNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->slave(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeMasterNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SlaveInfo Slave = 1;
    if (has_slave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->slave());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeMasterNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeMasterNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeMasterNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeMasterNotify::MergeFrom(const CMessageChangeMasterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_slave()->::SlaveInfo::MergeFrom(from.slave());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeMasterNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterNotify::CopyFrom(const CMessageChangeMasterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeMasterNotify::Swap(CMessageChangeMasterNotify* other) {
  if (other != this) {
    std::swap(slave_, other->slave_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeMasterNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeMasterNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeMasterNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeMasterNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetSlaveRequest::kSlaveIDFieldNumber;
const int CMessageGetSlaveRequest::kCharIDFieldNumber;
const int CMessageGetSlaveRequest::kNPCEntityIDFieldNumber;
const int CMessageGetSlaveRequest::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetSlaveRequest::CMessageGetSlaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetSlaveRequest::InitAsDefaultInstance() {}

CMessageGetSlaveRequest::CMessageGetSlaveRequest(const CMessageGetSlaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetSlaveRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetSlaveRequest::~CMessageGetSlaveRequest() {
  SharedDtor();
}

void CMessageGetSlaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetSlaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetSlaveRequest_descriptor_;
}

const CMessageGetSlaveRequest& CMessageGetSlaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetSlaveRequest* CMessageGetSlaveRequest::default_instance_ = NULL;

CMessageGetSlaveRequest* CMessageGetSlaveRequest::New() const {
  return new CMessageGetSlaveRequest;
}

void CMessageGetSlaveRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  slaveid_.Clear();
  masterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetSlaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 SlaveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slaveid(value);
        if (input->ExpectTag(8)) goto parse_SlaveID;
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_MasterID;
        break;
      }
      
      // repeated uint32 MasterID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_masterid(value);
        if (input->ExpectTag(32)) goto parse_MasterID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetSlaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetSlaveRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 SlaveID = 1;
  for (int i = 0; i < this->slaveid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slaveid(i), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  // repeated uint32 MasterID = 4;
  for (int i = 0; i < this->masterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->masterid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetSlaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 SlaveID = 1;
  for (int i = 0; i < this->slaveid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slaveid(i), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  // repeated uint32 MasterID = 4;
  for (int i = 0; i < this->masterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->masterid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetSlaveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  // repeated uint32 SlaveID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->slaveid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slaveid(i));
    }
    total_size += 1 * this->slaveid_size() + data_size;
  }
  
  // repeated uint32 MasterID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->masterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->masterid(i));
    }
    total_size += 1 * this->masterid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetSlaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetSlaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetSlaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetSlaveRequest::MergeFrom(const CMessageGetSlaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  slaveid_.MergeFrom(from.slaveid_);
  masterid_.MergeFrom(from.masterid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetSlaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetSlaveRequest::CopyFrom(const CMessageGetSlaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetSlaveRequest::Swap(CMessageGetSlaveRequest* other) {
  if (other != this) {
    slaveid_.Swap(&other->slaveid_);
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    masterid_.Swap(&other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetSlaveRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetSlaveRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetSlaveRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetSlaveRequest_reflection_;
}

// ===================================================================

const ::std::string SlaveInfo::_default_slavename_;
#ifndef _MSC_VER
const int SlaveInfo::kSlaveIDFieldNumber;
const int SlaveInfo::kSlaveNameFieldNumber;
const int SlaveInfo::kLevelFieldNumber;
const int SlaveInfo::kMetierFieldNumber;
const int SlaveInfo::kFaceFieldNumber;
const int SlaveInfo::kSexFieldNumber;
const int SlaveInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

SlaveInfo::SlaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveInfo::InitAsDefaultInstance() {}

SlaveInfo::SlaveInfo(const SlaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveInfo::SharedCtor() {
  _cached_size_ = 0;
  slaveid_ = 0u;
  slavename_ = const_cast< ::std::string*>(&_default_slavename_);
  level_ = 0u;
  metier_ = 0u;
  face_ = 0u;
  sex_ = 0u;
  online_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveInfo::~SlaveInfo() {
  SharedDtor();
}

void SlaveInfo::SharedDtor() {
  if (slavename_ != &_default_slavename_) {
    delete slavename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SlaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveInfo_descriptor_;
}

const SlaveInfo& SlaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

SlaveInfo* SlaveInfo::default_instance_ = NULL;

SlaveInfo* SlaveInfo::New() const {
  return new SlaveInfo;
}

void SlaveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slaveid_ = 0u;
    if (_has_bit(1)) {
      if (slavename_ != &_default_slavename_) {
        slavename_->clear();
      }
    }
    level_ = 0u;
    metier_ = 0u;
    face_ = 0u;
    sex_ = 0u;
    online_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SlaveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SlaveName;
        break;
      }
      
      // optional string SlaveName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SlaveName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_slavename()));
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Metier;
        break;
      }
      
      // optional uint32 Metier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Metier:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metier_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Face;
        break;
      }
      
      // optional uint32 Face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Face:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &face_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Online;
        break;
      }
      
      // optional uint32 Online = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Online:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &online_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SlaveInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slaveid(), output);
  }
  
  // optional string SlaveName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->slavename(), output);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->metier(), output);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->face(), output);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->sex(), output);
  }
  
  // optional uint32 Online = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->online(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slaveid(), target);
  }
  
  // optional string SlaveName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->slavename(), target);
  }
  
  // optional uint32 Level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 Metier = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->metier(), target);
  }
  
  // optional uint32 Face = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->face(), target);
  }
  
  // optional uint32 Sex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->sex(), target);
  }
  
  // optional uint32 Online = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->online(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SlaveID = 1;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional string SlaveName = 2;
    if (has_slavename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->slavename());
    }
    
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 Metier = 4;
    if (has_metier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metier());
    }
    
    // optional uint32 Face = 5;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->face());
    }
    
    // optional uint32 Sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 Online = 7;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->online());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SlaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveInfo::MergeFrom(const SlaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(1)) {
      set_slavename(from.slavename());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_metier(from.metier());
    }
    if (from._has_bit(4)) {
      set_face(from.face());
    }
    if (from._has_bit(5)) {
      set_sex(from.sex());
    }
    if (from._has_bit(6)) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveInfo::CopyFrom(const SlaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveInfo::Swap(SlaveInfo* other) {
  if (other != this) {
    std::swap(slaveid_, other->slaveid_);
    std::swap(slavename_, other->slavename_);
    std::swap(level_, other->level_);
    std::swap(metier_, other->metier_);
    std::swap(face_, other->face_);
    std::swap(sex_, other->sex_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SlaveInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* SlaveInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SlaveInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SlaveInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetSlaveResponse::kResultFieldNumber;
const int CMessageGetSlaveResponse::kSlaveFieldNumber;
const int CMessageGetSlaveResponse::kCharIDFieldNumber;
const int CMessageGetSlaveResponse::kMasterFieldNumber;
#endif  // !_MSC_VER

CMessageGetSlaveResponse::CMessageGetSlaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetSlaveResponse::InitAsDefaultInstance() {}

CMessageGetSlaveResponse::CMessageGetSlaveResponse(const CMessageGetSlaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetSlaveResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetSlaveResponse::~CMessageGetSlaveResponse() {
  SharedDtor();
}

void CMessageGetSlaveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetSlaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetSlaveResponse_descriptor_;
}

const CMessageGetSlaveResponse& CMessageGetSlaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetSlaveResponse* CMessageGetSlaveResponse::default_instance_ = NULL;

CMessageGetSlaveResponse* CMessageGetSlaveResponse::New() const {
  return new CMessageGetSlaveResponse;
}

void CMessageGetSlaveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    charid_ = 0u;
  }
  slave_.Clear();
  master_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetSlaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Slave;
        break;
      }
      
      // repeated .SlaveInfo Slave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Slave:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_slave()));
        if (input->ExpectTag(18)) goto parse_Slave;
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Master;
        break;
      }
      
      // repeated .SlaveInfo Master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Master:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_master()));
        if (input->ExpectTag(34)) goto parse_Master;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetSlaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetSlaveResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // repeated .SlaveInfo Slave = 2;
  for (int i = 0; i < this->slave_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->slave(i), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // repeated .SlaveInfo Master = 4;
  for (int i = 0; i < this->master_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->master(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetSlaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated .SlaveInfo Slave = 2;
  for (int i = 0; i < this->slave_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->slave(i), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // repeated .SlaveInfo Master = 4;
  for (int i = 0; i < this->master_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->master(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetSlaveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .SlaveInfo Slave = 2;
  total_size += 1 * this->slave_size();
  for (int i = 0; i < this->slave_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->slave(i));
  }
  
  // repeated .SlaveInfo Master = 4;
  total_size += 1 * this->master_size();
  for (int i = 0; i < this->master_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->master(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetSlaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetSlaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetSlaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetSlaveResponse::MergeFrom(const CMessageGetSlaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  slave_.MergeFrom(from.slave_);
  master_.MergeFrom(from.master_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetSlaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetSlaveResponse::CopyFrom(const CMessageGetSlaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetSlaveResponse::Swap(CMessageGetSlaveResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    slave_.Swap(&other->slave_);
    std::swap(charid_, other->charid_);
    master_.Swap(&other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetSlaveResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetSlaveResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetSlaveResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetSlaveResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSlaveLevelUpNotify::kSlaveFieldNumber;
const int CMessageSlaveLevelUpNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageSlaveLevelUpNotify::CMessageSlaveLevelUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSlaveLevelUpNotify::InitAsDefaultInstance() {  slave_ = const_cast< ::SlaveInfo*>(&::SlaveInfo::default_instance());
}

CMessageSlaveLevelUpNotify::CMessageSlaveLevelUpNotify(const CMessageSlaveLevelUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSlaveLevelUpNotify::SharedCtor() {
  _cached_size_ = 0;
  slave_ = NULL;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSlaveLevelUpNotify::~CMessageSlaveLevelUpNotify() {
  SharedDtor();
}

void CMessageSlaveLevelUpNotify::SharedDtor() {
  if (this != default_instance_) {
    delete slave_;
  }
}

const ::google::protobuf::Descriptor* CMessageSlaveLevelUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveLevelUpNotify_descriptor_;
}

const CMessageSlaveLevelUpNotify& CMessageSlaveLevelUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSlaveLevelUpNotify* CMessageSlaveLevelUpNotify::default_instance_ = NULL;

CMessageSlaveLevelUpNotify* CMessageSlaveLevelUpNotify::New() const {
  return new CMessageSlaveLevelUpNotify;
}

void CMessageSlaveLevelUpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (slave_ != NULL) slave_->::SlaveInfo::Clear();
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSlaveLevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .SlaveInfo Slave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_slave()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSlaveLevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSlaveLevelUpNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->slave(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSlaveLevelUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->slave(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSlaveLevelUpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SlaveInfo Slave = 1;
    if (has_slave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->slave());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSlaveLevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSlaveLevelUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSlaveLevelUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSlaveLevelUpNotify::MergeFrom(const CMessageSlaveLevelUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_slave()->::SlaveInfo::MergeFrom(from.slave());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSlaveLevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveLevelUpNotify::CopyFrom(const CMessageSlaveLevelUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveLevelUpNotify::Swap(CMessageSlaveLevelUpNotify* other) {
  if (other != this) {
    std::swap(slave_, other->slave_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSlaveLevelUpNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSlaveLevelUpNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSlaveLevelUpNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveLevelUpNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAnswerChangeNotify::kSlaveFieldNumber;
const int CMessageAnswerChangeNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageAnswerChangeNotify::CMessageAnswerChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAnswerChangeNotify::InitAsDefaultInstance() {  slave_ = const_cast< ::SlaveInfo*>(&::SlaveInfo::default_instance());
}

CMessageAnswerChangeNotify::CMessageAnswerChangeNotify(const CMessageAnswerChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAnswerChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  slave_ = NULL;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAnswerChangeNotify::~CMessageAnswerChangeNotify() {
  SharedDtor();
}

void CMessageAnswerChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete slave_;
  }
}

const ::google::protobuf::Descriptor* CMessageAnswerChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAnswerChangeNotify_descriptor_;
}

const CMessageAnswerChangeNotify& CMessageAnswerChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAnswerChangeNotify* CMessageAnswerChangeNotify::default_instance_ = NULL;

CMessageAnswerChangeNotify* CMessageAnswerChangeNotify::New() const {
  return new CMessageAnswerChangeNotify;
}

void CMessageAnswerChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (slave_ != NULL) slave_->::SlaveInfo::Clear();
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAnswerChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .SlaveInfo Slave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_slave()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAnswerChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAnswerChangeNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->slave(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAnswerChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SlaveInfo Slave = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->slave(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAnswerChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SlaveInfo Slave = 1;
    if (has_slave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->slave());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAnswerChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAnswerChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAnswerChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAnswerChangeNotify::MergeFrom(const CMessageAnswerChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_slave()->::SlaveInfo::MergeFrom(from.slave());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAnswerChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAnswerChangeNotify::CopyFrom(const CMessageAnswerChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAnswerChangeNotify::Swap(CMessageAnswerChangeNotify* other) {
  if (other != this) {
    std::swap(slave_, other->slave_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAnswerChangeNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAnswerChangeNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAnswerChangeNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAnswerChangeNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAnswerChangeRequest::kResultFieldNumber;
const int CMessageAnswerChangeRequest::kCharIDFieldNumber;
const int CMessageAnswerChangeRequest::kSlaveIDFieldNumber;
const int CMessageAnswerChangeRequest::kErrorFieldNumber;
#endif  // !_MSC_VER

CMessageAnswerChangeRequest::CMessageAnswerChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAnswerChangeRequest::InitAsDefaultInstance() {}

CMessageAnswerChangeRequest::CMessageAnswerChangeRequest(const CMessageAnswerChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAnswerChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  charid_ = 0u;
  slaveid_ = 0u;
  error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAnswerChangeRequest::~CMessageAnswerChangeRequest() {
  SharedDtor();
}

void CMessageAnswerChangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAnswerChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAnswerChangeRequest_descriptor_;
}

const CMessageAnswerChangeRequest& CMessageAnswerChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAnswerChangeRequest* CMessageAnswerChangeRequest::default_instance_ = NULL;

CMessageAnswerChangeRequest* CMessageAnswerChangeRequest::New() const {
  return new CMessageAnswerChangeRequest;
}

void CMessageAnswerChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    charid_ = 0u;
    slaveid_ = 0u;
    error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAnswerChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SlaveID;
        break;
      }
      
      // optional uint32 SlaveID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Error;
        break;
      }
      
      // optional uint32 Error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Error:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &error_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAnswerChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAnswerChangeRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 SlaveID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->slaveid(), output);
  }
  
  // optional uint32 Error = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAnswerChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 SlaveID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->slaveid(), target);
  }
  
  // optional uint32 Error = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAnswerChangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SlaveID = 3;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional uint32 Error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAnswerChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAnswerChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAnswerChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAnswerChangeRequest::MergeFrom(const CMessageAnswerChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(3)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAnswerChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAnswerChangeRequest::CopyFrom(const CMessageAnswerChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAnswerChangeRequest::Swap(CMessageAnswerChangeRequest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(slaveid_, other->slaveid_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAnswerChangeRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAnswerChangeRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAnswerChangeRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAnswerChangeRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryPlayerRequest::kQueryIDFieldNumber;
const int CMessageQueryPlayerRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryPlayerRequest::CMessageQueryPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryPlayerRequest::InitAsDefaultInstance() {}

CMessageQueryPlayerRequest::CMessageQueryPlayerRequest(const CMessageQueryPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryPlayerRequest::~CMessageQueryPlayerRequest() {
  SharedDtor();
}

void CMessageQueryPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryPlayerRequest_descriptor_;
}

const CMessageQueryPlayerRequest& CMessageQueryPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryPlayerRequest* CMessageQueryPlayerRequest::default_instance_ = NULL;

CMessageQueryPlayerRequest* CMessageQueryPlayerRequest::New() const {
  return new CMessageQueryPlayerRequest;
}

void CMessageQueryPlayerRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    charid_ = 0u;
  }
  queryid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 QueryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_QueryID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_queryid(value);
        if (input->ExpectTag(8)) goto parse_QueryID;
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 QueryID = 1;
  for (int i = 0; i < this->queryid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->queryid(i), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 QueryID = 1;
  for (int i = 0; i < this->queryid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->queryid(i), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated uint32 QueryID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->queryid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->queryid(i));
    }
    total_size += 1 * this->queryid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryPlayerRequest::MergeFrom(const CMessageQueryPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  queryid_.MergeFrom(from.queryid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryPlayerRequest::CopyFrom(const CMessageQueryPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryPlayerRequest::Swap(CMessageQueryPlayerRequest* other) {
  if (other != this) {
    queryid_.Swap(&other->queryid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryPlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageQueryPlayerResponse::kInfoFieldNumber;
const int CMessageQueryPlayerResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CMessageQueryPlayerResponse::CMessageQueryPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageQueryPlayerResponse::InitAsDefaultInstance() {}

CMessageQueryPlayerResponse::CMessageQueryPlayerResponse(const CMessageQueryPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageQueryPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageQueryPlayerResponse::~CMessageQueryPlayerResponse() {
  SharedDtor();
}

void CMessageQueryPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageQueryPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryPlayerResponse_descriptor_;
}

const CMessageQueryPlayerResponse& CMessageQueryPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageQueryPlayerResponse* CMessageQueryPlayerResponse::default_instance_ = NULL;

CMessageQueryPlayerResponse* CMessageQueryPlayerResponse::New() const {
  return new CMessageQueryPlayerResponse;
}

void CMessageQueryPlayerResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    charid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageQueryPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .SlaveInfo Info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_info()));
        if (input->ExpectTag(10)) goto parse_Info;
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageQueryPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageQueryPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SlaveInfo Info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->info(i), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageQueryPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SlaveInfo Info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->info(i), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageQueryPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
  }
  // repeated .SlaveInfo Info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageQueryPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageQueryPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageQueryPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageQueryPlayerResponse::MergeFrom(const CMessageQueryPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageQueryPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryPlayerResponse::CopyFrom(const CMessageQueryPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageQueryPlayerResponse::Swap(CMessageQueryPlayerResponse* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageQueryPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageQueryPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageQueryPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageQueryPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageSlaveOnOffNotify::_default_srccharname_;
#ifndef _MSC_VER
const int CMessageSlaveOnOffNotify::kSrcCharIDFieldNumber;
const int CMessageSlaveOnOffNotify::kSrcCharNameFieldNumber;
const int CMessageSlaveOnOffNotify::kOnlineFieldNumber;
const int CMessageSlaveOnOffNotify::kDesCharIDFieldNumber;
const int CMessageSlaveOnOffNotify::kLevelFieldNumber;
#endif  // !_MSC_VER

CMessageSlaveOnOffNotify::CMessageSlaveOnOffNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSlaveOnOffNotify::InitAsDefaultInstance() {}

CMessageSlaveOnOffNotify::CMessageSlaveOnOffNotify(const CMessageSlaveOnOffNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSlaveOnOffNotify::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  srccharname_ = const_cast< ::std::string*>(&_default_srccharname_);
  online_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSlaveOnOffNotify::~CMessageSlaveOnOffNotify() {
  SharedDtor();
}

void CMessageSlaveOnOffNotify::SharedDtor() {
  if (srccharname_ != &_default_srccharname_) {
    delete srccharname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSlaveOnOffNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveOnOffNotify_descriptor_;
}

const CMessageSlaveOnOffNotify& CMessageSlaveOnOffNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSlaveOnOffNotify* CMessageSlaveOnOffNotify::default_instance_ = NULL;

CMessageSlaveOnOffNotify* CMessageSlaveOnOffNotify::New() const {
  return new CMessageSlaveOnOffNotify;
}

void CMessageSlaveOnOffNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    if (_has_bit(1)) {
      if (srccharname_ != &_default_srccharname_) {
        srccharname_->clear();
      }
    }
    online_ = 0u;
    level_ = 0u;
  }
  descharid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSlaveOnOffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SrcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &srccharid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SrcCharName;
        break;
      }
      
      // optional string SrcCharName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SrcCharName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_srccharname()));
        if (input->ExpectTag(24)) goto parse_Online;
        break;
      }
      
      // optional uint32 Online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Online:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &online_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_DesCharID;
        break;
      }
      
      // repeated uint32 DesCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DesCharID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_descharid(value);
        if (input->ExpectTag(32)) goto parse_DesCharID;
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSlaveOnOffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSlaveOnOffNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->srccharid(), output);
  }
  
  // optional string SrcCharName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->srccharname(), output);
  }
  
  // optional uint32 Online = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->online(), output);
  }
  
  // repeated uint32 DesCharID = 4;
  for (int i = 0; i < this->descharid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->descharid(i), output);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSlaveOnOffNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SrcCharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->srccharid(), target);
  }
  
  // optional string SrcCharName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->srccharname(), target);
  }
  
  // optional uint32 Online = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->online(), target);
  }
  
  // repeated uint32 DesCharID = 4;
  for (int i = 0; i < this->descharid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->descharid(i), target);
  }
  
  // optional uint32 Level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSlaveOnOffNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->srccharid());
    }
    
    // optional string SrcCharName = 2;
    if (has_srccharname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->srccharname());
    }
    
    // optional uint32 Online = 3;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->online());
    }
    
    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
  }
  // repeated uint32 DesCharID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->descharid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->descharid(i));
    }
    total_size += 1 * this->descharid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSlaveOnOffNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSlaveOnOffNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSlaveOnOffNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSlaveOnOffNotify::MergeFrom(const CMessageSlaveOnOffNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  descharid_.MergeFrom(from.descharid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srccharid(from.srccharid());
    }
    if (from._has_bit(1)) {
      set_srccharname(from.srccharname());
    }
    if (from._has_bit(2)) {
      set_online(from.online());
    }
    if (from._has_bit(4)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSlaveOnOffNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveOnOffNotify::CopyFrom(const CMessageSlaveOnOffNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveOnOffNotify::Swap(CMessageSlaveOnOffNotify* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(srccharname_, other->srccharname_);
    std::swap(online_, other->online_);
    descharid_.Swap(&other->descharid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSlaveOnOffNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSlaveOnOffNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSlaveOnOffNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveOnOffNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSlaveNumNotify::kSlaveValueFieldNumber;
const int CMessageSlaveNumNotify::kSlavePointFieldNumber;
const int CMessageSlaveNumNotify::kMasterPointFieldNumber;
const int CMessageSlaveNumNotify::kSlaveTotalFieldNumber;
const int CMessageSlaveNumNotify::kMasterTotalFieldNumber;
#endif  // !_MSC_VER

CMessageSlaveNumNotify::CMessageSlaveNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSlaveNumNotify::InitAsDefaultInstance() {}

CMessageSlaveNumNotify::CMessageSlaveNumNotify(const CMessageSlaveNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSlaveNumNotify::SharedCtor() {
  _cached_size_ = 0;
  slavepoint_ = 0u;
  masterpoint_ = 0u;
  slavetotal_ = 0u;
  mastertotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSlaveNumNotify::~CMessageSlaveNumNotify() {
  SharedDtor();
}

void CMessageSlaveNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSlaveNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveNumNotify_descriptor_;
}

const CMessageSlaveNumNotify& CMessageSlaveNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSlaveNumNotify* CMessageSlaveNumNotify::default_instance_ = NULL;

CMessageSlaveNumNotify* CMessageSlaveNumNotify::New() const {
  return new CMessageSlaveNumNotify;
}

void CMessageSlaveNumNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    slavepoint_ = 0u;
    masterpoint_ = 0u;
    slavetotal_ = 0u;
    mastertotal_ = 0u;
  }
  slavevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSlaveNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated uint32 SlaveValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveValue:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_slavevalue(value);
        if (input->ExpectTag(8)) goto parse_SlaveValue;
        if (input->ExpectTag(16)) goto parse_SlavePoint;
        break;
      }
      
      // optional uint32 SlavePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlavePoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavepoint_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MasterPoint;
        break;
      }
      
      // optional uint32 MasterPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterPoint:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterpoint_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SlaveTotal;
        break;
      }
      
      // optional uint32 SlaveTotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slavetotal_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_MasterTotal;
        break;
      }
      
      // optional uint32 MasterTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterTotal:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &mastertotal_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSlaveNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSlaveNumNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 SlaveValue = 1;
  for (int i = 0; i < this->slavevalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slavevalue(i), output);
  }
  
  // optional uint32 SlavePoint = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->slavepoint(), output);
  }
  
  // optional uint32 MasterPoint = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->masterpoint(), output);
  }
  
  // optional uint32 SlaveTotal = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->slavetotal(), output);
  }
  
  // optional uint32 MasterTotal = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->mastertotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSlaveNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 SlaveValue = 1;
  for (int i = 0; i < this->slavevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slavevalue(i), target);
  }
  
  // optional uint32 SlavePoint = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->slavepoint(), target);
  }
  
  // optional uint32 MasterPoint = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->masterpoint(), target);
  }
  
  // optional uint32 SlaveTotal = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->slavetotal(), target);
  }
  
  // optional uint32 MasterTotal = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->mastertotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSlaveNumNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 SlavePoint = 2;
    if (has_slavepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavepoint());
    }
    
    // optional uint32 MasterPoint = 3;
    if (has_masterpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterpoint());
    }
    
    // optional uint32 SlaveTotal = 4;
    if (has_slavetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slavetotal());
    }
    
    // optional uint32 MasterTotal = 5;
    if (has_mastertotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->mastertotal());
    }
    
  }
  // repeated uint32 SlaveValue = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->slavevalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->slavevalue(i));
    }
    total_size += 1 * this->slavevalue_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSlaveNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSlaveNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSlaveNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSlaveNumNotify::MergeFrom(const CMessageSlaveNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  slavevalue_.MergeFrom(from.slavevalue_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_slavepoint(from.slavepoint());
    }
    if (from._has_bit(2)) {
      set_masterpoint(from.masterpoint());
    }
    if (from._has_bit(3)) {
      set_slavetotal(from.slavetotal());
    }
    if (from._has_bit(4)) {
      set_mastertotal(from.mastertotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSlaveNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveNumNotify::CopyFrom(const CMessageSlaveNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSlaveNumNotify::Swap(CMessageSlaveNumNotify* other) {
  if (other != this) {
    slavevalue_.Swap(&other->slavevalue_);
    std::swap(slavepoint_, other->slavepoint_);
    std::swap(masterpoint_, other->masterpoint_);
    std::swap(slavetotal_, other->slavetotal_);
    std::swap(mastertotal_, other->mastertotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSlaveNumNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSlaveNumNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSlaveNumNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSlaveNumNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveSlaveRequest::kSlaveIDFieldNumber;
const int CMessageRemoveSlaveRequest::kCharIDFieldNumber;
const int CMessageRemoveSlaveRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveSlaveRequest::CMessageRemoveSlaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveSlaveRequest::InitAsDefaultInstance() {}

CMessageRemoveSlaveRequest::CMessageRemoveSlaveRequest(const CMessageRemoveSlaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveSlaveRequest::SharedCtor() {
  _cached_size_ = 0;
  slaveid_ = 0u;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveSlaveRequest::~CMessageRemoveSlaveRequest() {
  SharedDtor();
}

void CMessageRemoveSlaveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveRequest_descriptor_;
}

const CMessageRemoveSlaveRequest& CMessageRemoveSlaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveSlaveRequest* CMessageRemoveSlaveRequest::default_instance_ = NULL;

CMessageRemoveSlaveRequest* CMessageRemoveSlaveRequest::New() const {
  return new CMessageRemoveSlaveRequest;
}

void CMessageRemoveSlaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slaveid_ = 0u;
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveSlaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SlaveID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveSlaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveSlaveRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->slaveid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveSlaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SlaveID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->slaveid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveSlaveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SlaveID = 1;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveSlaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveSlaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveSlaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveSlaveRequest::MergeFrom(const CMessageRemoveSlaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveSlaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveRequest::CopyFrom(const CMessageRemoveSlaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveRequest::Swap(CMessageRemoveSlaveRequest* other) {
  if (other != this) {
    std::swap(slaveid_, other->slaveid_);
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveSlaveRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveSlaveRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveSlaveResponse::kResultFieldNumber;
const int CMessageRemoveSlaveResponse::kCharIDFieldNumber;
const int CMessageRemoveSlaveResponse::kSlaveIDFieldNumber;
const int CMessageRemoveSlaveResponse::kParamFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveSlaveResponse::CMessageRemoveSlaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveSlaveResponse::InitAsDefaultInstance() {}

CMessageRemoveSlaveResponse::CMessageRemoveSlaveResponse(const CMessageRemoveSlaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveSlaveResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  charid_ = 0u;
  slaveid_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveSlaveResponse::~CMessageRemoveSlaveResponse() {
  SharedDtor();
}

void CMessageRemoveSlaveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveResponse_descriptor_;
}

const CMessageRemoveSlaveResponse& CMessageRemoveSlaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveSlaveResponse* CMessageRemoveSlaveResponse::default_instance_ = NULL;

CMessageRemoveSlaveResponse* CMessageRemoveSlaveResponse::New() const {
  return new CMessageRemoveSlaveResponse;
}

void CMessageRemoveSlaveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    charid_ = 0u;
    slaveid_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveSlaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_SlaveID;
        break;
      }
      
      // optional uint32 SlaveID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveSlaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveSlaveResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 SlaveID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->slaveid(), output);
  }
  
  // optional uint32 Param = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveSlaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 SlaveID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->slaveid(), target);
  }
  
  // optional uint32 Param = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveSlaveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SlaveID = 3;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional uint32 Param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveSlaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveSlaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveSlaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveSlaveResponse::MergeFrom(const CMessageRemoveSlaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(3)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveSlaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveResponse::CopyFrom(const CMessageRemoveSlaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveResponse::Swap(CMessageRemoveSlaveResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(slaveid_, other->slaveid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveSlaveResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveSlaveResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveSlaveNotify::kCharIDFieldNumber;
const int CMessageRemoveSlaveNotify::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveSlaveNotify::CMessageRemoveSlaveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveSlaveNotify::InitAsDefaultInstance() {}

CMessageRemoveSlaveNotify::CMessageRemoveSlaveNotify(const CMessageRemoveSlaveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveSlaveNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  masterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveSlaveNotify::~CMessageRemoveSlaveNotify() {
  SharedDtor();
}

void CMessageRemoveSlaveNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveNotify_descriptor_;
}

const CMessageRemoveSlaveNotify& CMessageRemoveSlaveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveSlaveNotify* CMessageRemoveSlaveNotify::default_instance_ = NULL;

CMessageRemoveSlaveNotify* CMessageRemoveSlaveNotify::New() const {
  return new CMessageRemoveSlaveNotify;
}

void CMessageRemoveSlaveNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    masterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveSlaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveSlaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveSlaveNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->masterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveSlaveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->masterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveSlaveNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MasterID = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveSlaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveSlaveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveSlaveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveSlaveNotify::MergeFrom(const CMessageRemoveSlaveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveSlaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveNotify::CopyFrom(const CMessageRemoveSlaveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveSlaveNotify::Swap(CMessageRemoveSlaveNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveSlaveNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveSlaveNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveSlaveNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveSlaveNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveMasterRequest::kMasterIDFieldNumber;
const int CMessageRemoveMasterRequest::kCharIDFieldNumber;
const int CMessageRemoveMasterRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveMasterRequest::CMessageRemoveMasterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveMasterRequest::InitAsDefaultInstance() {}

CMessageRemoveMasterRequest::CMessageRemoveMasterRequest(const CMessageRemoveMasterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveMasterRequest::SharedCtor() {
  _cached_size_ = 0;
  masterid_ = 0u;
  charid_ = 0u;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveMasterRequest::~CMessageRemoveMasterRequest() {
  SharedDtor();
}

void CMessageRemoveMasterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterRequest_descriptor_;
}

const CMessageRemoveMasterRequest& CMessageRemoveMasterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveMasterRequest* CMessageRemoveMasterRequest::default_instance_ = NULL;

CMessageRemoveMasterRequest* CMessageRemoveMasterRequest::New() const {
  return new CMessageRemoveMasterRequest;
}

void CMessageRemoveMasterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    masterid_ = 0u;
    charid_ = 0u;
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveMasterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MasterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_NPCEntityID;
        break;
      }
      
      // optional uint32 NPCEntityID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NPCEntityID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveMasterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveMasterRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->masterid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveMasterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->masterid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 NPCEntityID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveMasterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MasterID = 1;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 NPCEntityID = 3;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveMasterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveMasterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveMasterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveMasterRequest::MergeFrom(const CMessageRemoveMasterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_masterid(from.masterid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveMasterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterRequest::CopyFrom(const CMessageRemoveMasterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterRequest::Swap(CMessageRemoveMasterRequest* other) {
  if (other != this) {
    std::swap(masterid_, other->masterid_);
    std::swap(charid_, other->charid_);
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveMasterRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveMasterRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveMasterResponse::kResultFieldNumber;
const int CMessageRemoveMasterResponse::kCharIDFieldNumber;
const int CMessageRemoveMasterResponse::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveMasterResponse::CMessageRemoveMasterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveMasterResponse::InitAsDefaultInstance() {}

CMessageRemoveMasterResponse::CMessageRemoveMasterResponse(const CMessageRemoveMasterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveMasterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  charid_ = 0u;
  masterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveMasterResponse::~CMessageRemoveMasterResponse() {
  SharedDtor();
}

void CMessageRemoveMasterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterResponse_descriptor_;
}

const CMessageRemoveMasterResponse& CMessageRemoveMasterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveMasterResponse* CMessageRemoveMasterResponse::default_instance_ = NULL;

CMessageRemoveMasterResponse* CMessageRemoveMasterResponse::New() const {
  return new CMessageRemoveMasterResponse;
}

void CMessageRemoveMasterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    charid_ = 0u;
    masterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveMasterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveMasterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveMasterResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->masterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveMasterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->masterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveMasterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 MasterID = 3;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveMasterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveMasterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveMasterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveMasterResponse::MergeFrom(const CMessageRemoveMasterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveMasterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterResponse::CopyFrom(const CMessageRemoveMasterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterResponse::Swap(CMessageRemoveMasterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveMasterResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveMasterResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRemoveMasterNotify::kCharIDFieldNumber;
const int CMessageRemoveMasterNotify::kSlaveIDFieldNumber;
const int CMessageRemoveMasterNotify::kParamFieldNumber;
#endif  // !_MSC_VER

CMessageRemoveMasterNotify::CMessageRemoveMasterNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRemoveMasterNotify::InitAsDefaultInstance() {}

CMessageRemoveMasterNotify::CMessageRemoveMasterNotify(const CMessageRemoveMasterNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRemoveMasterNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  slaveid_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRemoveMasterNotify::~CMessageRemoveMasterNotify() {
  SharedDtor();
}

void CMessageRemoveMasterNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterNotify_descriptor_;
}

const CMessageRemoveMasterNotify& CMessageRemoveMasterNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRemoveMasterNotify* CMessageRemoveMasterNotify::default_instance_ = NULL;

CMessageRemoveMasterNotify* CMessageRemoveMasterNotify::New() const {
  return new CMessageRemoveMasterNotify;
}

void CMessageRemoveMasterNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    slaveid_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRemoveMasterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SlaveID;
        break;
      }
      
      // optional uint32 SlaveID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SlaveID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &slaveid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Param;
        break;
      }
      
      // optional uint32 Param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRemoveMasterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRemoveMasterNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 SlaveID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->slaveid(), output);
  }
  
  // optional uint32 Param = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRemoveMasterNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 SlaveID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->slaveid(), target);
  }
  
  // optional uint32 Param = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRemoveMasterNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SlaveID = 2;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->slaveid());
    }
    
    // optional uint32 Param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRemoveMasterNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRemoveMasterNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRemoveMasterNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRemoveMasterNotify::MergeFrom(const CMessageRemoveMasterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_slaveid(from.slaveid());
    }
    if (from._has_bit(2)) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRemoveMasterNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterNotify::CopyFrom(const CMessageRemoveMasterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRemoveMasterNotify::Swap(CMessageRemoveMasterNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(slaveid_, other->slaveid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRemoveMasterNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRemoveMasterNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRemoveMasterNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRemoveMasterNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAlterMasterPercentRequest::kMasterIDFieldNumber;
const int CMessageAlterMasterPercentRequest::kPercentFieldNumber;
#endif  // !_MSC_VER

CMessageAlterMasterPercentRequest::CMessageAlterMasterPercentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAlterMasterPercentRequest::InitAsDefaultInstance() {}

CMessageAlterMasterPercentRequest::CMessageAlterMasterPercentRequest(const CMessageAlterMasterPercentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAlterMasterPercentRequest::SharedCtor() {
  _cached_size_ = 0;
  masterid_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAlterMasterPercentRequest::~CMessageAlterMasterPercentRequest() {
  SharedDtor();
}

void CMessageAlterMasterPercentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAlterMasterPercentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAlterMasterPercentRequest_descriptor_;
}

const CMessageAlterMasterPercentRequest& CMessageAlterMasterPercentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAlterMasterPercentRequest* CMessageAlterMasterPercentRequest::default_instance_ = NULL;

CMessageAlterMasterPercentRequest* CMessageAlterMasterPercentRequest::New() const {
  return new CMessageAlterMasterPercentRequest;
}

void CMessageAlterMasterPercentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    masterid_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAlterMasterPercentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 MasterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAlterMasterPercentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAlterMasterPercentRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->masterid(), output);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAlterMasterPercentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MasterID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->masterid(), target);
  }
  
  // optional uint32 Percent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAlterMasterPercentRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MasterID = 1;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
    // optional uint32 Percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAlterMasterPercentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAlterMasterPercentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAlterMasterPercentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAlterMasterPercentRequest::MergeFrom(const CMessageAlterMasterPercentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_masterid(from.masterid());
    }
    if (from._has_bit(1)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAlterMasterPercentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAlterMasterPercentRequest::CopyFrom(const CMessageAlterMasterPercentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAlterMasterPercentRequest::Swap(CMessageAlterMasterPercentRequest* other) {
  if (other != this) {
    std::swap(masterid_, other->masterid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAlterMasterPercentRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAlterMasterPercentRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAlterMasterPercentRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAlterMasterPercentRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageAlterMasterPercentResponse::kResultFieldNumber;
const int CMessageAlterMasterPercentResponse::kMasterIDFieldNumber;
const int CMessageAlterMasterPercentResponse::kPercentFieldNumber;
#endif  // !_MSC_VER

CMessageAlterMasterPercentResponse::CMessageAlterMasterPercentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageAlterMasterPercentResponse::InitAsDefaultInstance() {}

CMessageAlterMasterPercentResponse::CMessageAlterMasterPercentResponse(const CMessageAlterMasterPercentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageAlterMasterPercentResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  masterid_ = 0u;
  percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageAlterMasterPercentResponse::~CMessageAlterMasterPercentResponse() {
  SharedDtor();
}

void CMessageAlterMasterPercentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageAlterMasterPercentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageAlterMasterPercentResponse_descriptor_;
}

const CMessageAlterMasterPercentResponse& CMessageAlterMasterPercentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageAlterMasterPercentResponse* CMessageAlterMasterPercentResponse::default_instance_ = NULL;

CMessageAlterMasterPercentResponse* CMessageAlterMasterPercentResponse::New() const {
  return new CMessageAlterMasterPercentResponse;
}

void CMessageAlterMasterPercentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    masterid_ = 0u;
    percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageAlterMasterPercentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }
      
      // optional uint32 Percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Percent:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &percent_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageAlterMasterPercentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageAlterMasterPercentResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->masterid(), output);
  }
  
  // optional uint32 Percent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageAlterMasterPercentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional uint32 MasterID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->masterid(), target);
  }
  
  // optional uint32 Percent = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageAlterMasterPercentResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 MasterID = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
    // optional uint32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->percent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageAlterMasterPercentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageAlterMasterPercentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageAlterMasterPercentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageAlterMasterPercentResponse::MergeFrom(const CMessageAlterMasterPercentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_masterid(from.masterid());
    }
    if (from._has_bit(2)) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageAlterMasterPercentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAlterMasterPercentResponse::CopyFrom(const CMessageAlterMasterPercentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageAlterMasterPercentResponse::Swap(CMessageAlterMasterPercentResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(masterid_, other->masterid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageAlterMasterPercentResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageAlterMasterPercentResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageAlterMasterPercentResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageAlterMasterPercentResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetLowPlayerRequest::kNPCEntityIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetLowPlayerRequest::CMessageGetLowPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetLowPlayerRequest::InitAsDefaultInstance() {}

CMessageGetLowPlayerRequest::CMessageGetLowPlayerRequest(const CMessageGetLowPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetLowPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  npcentityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetLowPlayerRequest::~CMessageGetLowPlayerRequest() {
  SharedDtor();
}

void CMessageGetLowPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetLowPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetLowPlayerRequest_descriptor_;
}

const CMessageGetLowPlayerRequest& CMessageGetLowPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetLowPlayerRequest* CMessageGetLowPlayerRequest::default_instance_ = NULL;

CMessageGetLowPlayerRequest* CMessageGetLowPlayerRequest::New() const {
  return new CMessageGetLowPlayerRequest;
}

void CMessageGetLowPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcentityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetLowPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 NPCEntityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &npcentityid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetLowPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetLowPlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 NPCEntityID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->npcentityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetLowPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 NPCEntityID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->npcentityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetLowPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NPCEntityID = 1;
    if (has_npcentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->npcentityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetLowPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetLowPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetLowPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetLowPlayerRequest::MergeFrom(const CMessageGetLowPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_npcentityid(from.npcentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetLowPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetLowPlayerRequest::CopyFrom(const CMessageGetLowPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetLowPlayerRequest::Swap(CMessageGetLowPlayerRequest* other) {
  if (other != this) {
    std::swap(npcentityid_, other->npcentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetLowPlayerRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetLowPlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetLowPlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetLowPlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetLowPlayerResponse::kResultFieldNumber;
const int CMessageGetLowPlayerResponse::kPlayerFieldNumber;
const int CMessageGetLowPlayerResponse::kRequiredFieldNumber;
#endif  // !_MSC_VER

CMessageGetLowPlayerResponse::CMessageGetLowPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetLowPlayerResponse::InitAsDefaultInstance() {}

CMessageGetLowPlayerResponse::CMessageGetLowPlayerResponse(const CMessageGetLowPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetLowPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetLowPlayerResponse::~CMessageGetLowPlayerResponse() {
  SharedDtor();
}

void CMessageGetLowPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetLowPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetLowPlayerResponse_descriptor_;
}

const CMessageGetLowPlayerResponse& CMessageGetLowPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetLowPlayerResponse* CMessageGetLowPlayerResponse::default_instance_ = NULL;

CMessageGetLowPlayerResponse* CMessageGetLowPlayerResponse::New() const {
  return new CMessageGetLowPlayerResponse;
}

void CMessageGetLowPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  player_.Clear();
  required_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetLowPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Player;
        break;
      }
      
      // repeated .SlaveInfo Player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Player:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_player()));
        if (input->ExpectTag(18)) goto parse_Player;
        if (input->ExpectTag(26)) goto parse_Required;
        break;
      }
      
      // repeated .SlaveInfo Required = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Required:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_required()));
        if (input->ExpectTag(26)) goto parse_Required;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetLowPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetLowPlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // repeated .SlaveInfo Player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->player(i), output);
  }
  
  // repeated .SlaveInfo Required = 3;
  for (int i = 0; i < this->required_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->required(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetLowPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated .SlaveInfo Player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->player(i), target);
  }
  
  // repeated .SlaveInfo Required = 3;
  for (int i = 0; i < this->required_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->required(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetLowPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  // repeated .SlaveInfo Player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->player(i));
  }
  
  // repeated .SlaveInfo Required = 3;
  total_size += 1 * this->required_size();
  for (int i = 0; i < this->required_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->required(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetLowPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetLowPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetLowPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetLowPlayerResponse::MergeFrom(const CMessageGetLowPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  required_.MergeFrom(from.required_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetLowPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetLowPlayerResponse::CopyFrom(const CMessageGetLowPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetLowPlayerResponse::Swap(CMessageGetLowPlayerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    player_.Swap(&other->player_);
    required_.Swap(&other->required_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetLowPlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetLowPlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetLowPlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetLowPlayerResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendLevelUpNotify::_default_name_;
#ifndef _MSC_VER
const int CMessageFriendLevelUpNotify::kRouterFieldNumber;
const int CMessageFriendLevelUpNotify::kLevelFieldNumber;
const int CMessageFriendLevelUpNotify::kNameFieldNumber;
const int CMessageFriendLevelUpNotify::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendLevelUpNotify::CMessageFriendLevelUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendLevelUpNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageFriendLevelUpNotify::CMessageFriendLevelUpNotify(const CMessageFriendLevelUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendLevelUpNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendLevelUpNotify::~CMessageFriendLevelUpNotify() {
  SharedDtor();
}

void CMessageFriendLevelUpNotify::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageFriendLevelUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendLevelUpNotify_descriptor_;
}

const CMessageFriendLevelUpNotify& CMessageFriendLevelUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendLevelUpNotify* CMessageFriendLevelUpNotify::default_instance_ = NULL;

CMessageFriendLevelUpNotify* CMessageFriendLevelUpNotify::New() const {
  return new CMessageFriendLevelUpNotify;
}

void CMessageFriendLevelUpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    level_ = 0u;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendLevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(32)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendLevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendLevelUpNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->level(), output);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->name(), output);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendLevelUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 Level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional string Name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->name(), target);
  }
  
  // optional uint32 RoleID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendLevelUpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 RoleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendLevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendLevelUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendLevelUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendLevelUpNotify::MergeFrom(const CMessageFriendLevelUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_level(from.level());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendLevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendLevelUpNotify::CopyFrom(const CMessageFriendLevelUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendLevelUpNotify::Swap(CMessageFriendLevelUpNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendLevelUpNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendLevelUpNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendLevelUpNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendLevelUpNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendBlessRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageFriendBlessRequest::CMessageFriendBlessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendBlessRequest::InitAsDefaultInstance() {}

CMessageFriendBlessRequest::CMessageFriendBlessRequest(const CMessageFriendBlessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendBlessRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendBlessRequest::~CMessageFriendBlessRequest() {
  SharedDtor();
}

void CMessageFriendBlessRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendBlessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessRequest_descriptor_;
}

const CMessageFriendBlessRequest& CMessageFriendBlessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendBlessRequest* CMessageFriendBlessRequest::default_instance_ = NULL;

CMessageFriendBlessRequest* CMessageFriendBlessRequest::New() const {
  return new CMessageFriendBlessRequest;
}

void CMessageFriendBlessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendBlessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendBlessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendBlessRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendBlessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendBlessRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendBlessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendBlessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendBlessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendBlessRequest::MergeFrom(const CMessageFriendBlessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendBlessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessRequest::CopyFrom(const CMessageFriendBlessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessRequest::Swap(CMessageFriendBlessRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendBlessRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendBlessRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendBlessRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageFriendBlessResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageFriendBlessResponse::CMessageFriendBlessResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendBlessResponse::InitAsDefaultInstance() {}

CMessageFriendBlessResponse::CMessageFriendBlessResponse(const CMessageFriendBlessResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendBlessResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendBlessResponse::~CMessageFriendBlessResponse() {
  SharedDtor();
}

void CMessageFriendBlessResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageFriendBlessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessResponse_descriptor_;
}

const CMessageFriendBlessResponse& CMessageFriendBlessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendBlessResponse* CMessageFriendBlessResponse::default_instance_ = NULL;

CMessageFriendBlessResponse* CMessageFriendBlessResponse::New() const {
  return new CMessageFriendBlessResponse;
}

void CMessageFriendBlessResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendBlessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendBlessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendBlessResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendBlessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendBlessResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendBlessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendBlessResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendBlessResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendBlessResponse::MergeFrom(const CMessageFriendBlessResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendBlessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessResponse::CopyFrom(const CMessageFriendBlessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessResponse::Swap(CMessageFriendBlessResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendBlessResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendBlessResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendBlessResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageFriendBlessNotify::_default_friendname_;
#ifndef _MSC_VER
const int CMessageFriendBlessNotify::kRouterFieldNumber;
const int CMessageFriendBlessNotify::kFriendNameFieldNumber;
const int CMessageFriendBlessNotify::kExpFieldNumber;
#endif  // !_MSC_VER

CMessageFriendBlessNotify::CMessageFriendBlessNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageFriendBlessNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageFriendBlessNotify::CMessageFriendBlessNotify(const CMessageFriendBlessNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageFriendBlessNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  friendname_ = const_cast< ::std::string*>(&_default_friendname_);
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageFriendBlessNotify::~CMessageFriendBlessNotify() {
  SharedDtor();
}

void CMessageFriendBlessNotify::SharedDtor() {
  if (friendname_ != &_default_friendname_) {
    delete friendname_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageFriendBlessNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessNotify_descriptor_;
}

const CMessageFriendBlessNotify& CMessageFriendBlessNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageFriendBlessNotify* CMessageFriendBlessNotify::default_instance_ = NULL;

CMessageFriendBlessNotify* CMessageFriendBlessNotify::New() const {
  return new CMessageFriendBlessNotify;
}

void CMessageFriendBlessNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (friendname_ != &_default_friendname_) {
        friendname_->clear();
      }
    }
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageFriendBlessNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_FriendName;
        break;
      }
      
      // optional string FriendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FriendName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_friendname()));
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }
      
      // optional uint32 Exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Exp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &exp_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageFriendBlessNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageFriendBlessNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string FriendName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->friendname(), output);
  }
  
  // optional uint32 Exp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageFriendBlessNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string FriendName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->friendname(), target);
  }
  
  // optional uint32 Exp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageFriendBlessNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string FriendName = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->friendname());
    }
    
    // optional uint32 Exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageFriendBlessNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageFriendBlessNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageFriendBlessNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageFriendBlessNotify::MergeFrom(const CMessageFriendBlessNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_friendname(from.friendname());
    }
    if (from._has_bit(2)) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageFriendBlessNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessNotify::CopyFrom(const CMessageFriendBlessNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageFriendBlessNotify::Swap(CMessageFriendBlessNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(friendname_, other->friendname_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageFriendBlessNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageFriendBlessNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageFriendBlessNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageFriendBlessNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyIntimacyNogify::kRouterFieldNumber;
const int CMessageModifyIntimacyNogify::kChangeValueFieldNumber;
const int CMessageModifyIntimacyNogify::kIntimacyDegreeFieldNumber;
const int CMessageModifyIntimacyNogify::kTypeFieldNumber;
const int CMessageModifyIntimacyNogify::kFriendIDFieldNumber;
const int CMessageModifyIntimacyNogify::kUpdateTimeFieldNumber;
const int CMessageModifyIntimacyNogify::kDailyIntimacyFieldNumber;
#endif  // !_MSC_VER

CMessageModifyIntimacyNogify::CMessageModifyIntimacyNogify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyIntimacyNogify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageModifyIntimacyNogify::CMessageModifyIntimacyNogify(const CMessageModifyIntimacyNogify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyIntimacyNogify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  changevalue_ = 0u;
  intimacydegree_ = 0u;
  type_ = 0u;
  friendid_ = 0u;
  updatetime_ = 0u;
  dailyintimacy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyIntimacyNogify::~CMessageModifyIntimacyNogify() {
  SharedDtor();
}

void CMessageModifyIntimacyNogify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageModifyIntimacyNogify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyIntimacyNogify_descriptor_;
}

const CMessageModifyIntimacyNogify& CMessageModifyIntimacyNogify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyIntimacyNogify* CMessageModifyIntimacyNogify::default_instance_ = NULL;

CMessageModifyIntimacyNogify* CMessageModifyIntimacyNogify::New() const {
  return new CMessageModifyIntimacyNogify;
}

void CMessageModifyIntimacyNogify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    changevalue_ = 0u;
    intimacydegree_ = 0u;
    type_ = 0u;
    friendid_ = 0u;
    updatetime_ = 0u;
    dailyintimacy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyIntimacyNogify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_ChangeValue;
        break;
      }
      
      // optional uint32 ChangeValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ChangeValue:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &changevalue_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_IntimacyDegree;
        break;
      }
      
      // optional uint32 IntimacyDegree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_IntimacyDegree:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &intimacydegree_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_FriendID;
        break;
      }
      
      // optional uint32 FriendID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FriendID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &friendid_));
        _set_bit(4);
        if (input->ExpectTag(56)) goto parse_UpdateTime;
        break;
      }
      
      // optional uint32 UpdateTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpdateTime:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &updatetime_));
        _set_bit(5);
        if (input->ExpectTag(64)) goto parse_DailyIntimacy;
        break;
      }
      
      // optional uint32 DailyIntimacy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DailyIntimacy:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &dailyintimacy_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyIntimacyNogify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyIntimacyNogify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 ChangeValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->changevalue(), output);
  }
  
  // optional uint32 IntimacyDegree = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->intimacydegree(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 FriendID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->friendid(), output);
  }
  
  // optional uint32 UpdateTime = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->updatetime(), output);
  }
  
  // optional uint32 DailyIntimacy = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->dailyintimacy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyIntimacyNogify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 ChangeValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->changevalue(), target);
  }
  
  // optional uint32 IntimacyDegree = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->intimacydegree(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 FriendID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->friendid(), target);
  }
  
  // optional uint32 UpdateTime = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->updatetime(), target);
  }
  
  // optional uint32 DailyIntimacy = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->dailyintimacy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyIntimacyNogify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 ChangeValue = 2;
    if (has_changevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->changevalue());
    }
    
    // optional uint32 IntimacyDegree = 3;
    if (has_intimacydegree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->intimacydegree());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 FriendID = 5;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->friendid());
    }
    
    // optional uint32 UpdateTime = 7;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->updatetime());
    }
    
    // optional uint32 DailyIntimacy = 8;
    if (has_dailyintimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->dailyintimacy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyIntimacyNogify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyIntimacyNogify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyIntimacyNogify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyIntimacyNogify::MergeFrom(const CMessageModifyIntimacyNogify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_changevalue(from.changevalue());
    }
    if (from._has_bit(2)) {
      set_intimacydegree(from.intimacydegree());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_friendid(from.friendid());
    }
    if (from._has_bit(5)) {
      set_updatetime(from.updatetime());
    }
    if (from._has_bit(6)) {
      set_dailyintimacy(from.dailyintimacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyIntimacyNogify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyIntimacyNogify::CopyFrom(const CMessageModifyIntimacyNogify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyIntimacyNogify::Swap(CMessageModifyIntimacyNogify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(changevalue_, other->changevalue_);
    std::swap(intimacydegree_, other->intimacydegree_);
    std::swap(type_, other->type_);
    std::swap(friendid_, other->friendid_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(dailyintimacy_, other->dailyintimacy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyIntimacyNogify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyIntimacyNogify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyIntimacyNogify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyIntimacyNogify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageModifyLastTimeAllOnLineNotify::kRouterFieldNumber;
const int CMessageModifyLastTimeAllOnLineNotify::kTimeFieldNumber;
const int CMessageModifyLastTimeAllOnLineNotify::kFriendIDFieldNumber;
#endif  // !_MSC_VER

CMessageModifyLastTimeAllOnLineNotify::CMessageModifyLastTimeAllOnLineNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageModifyLastTimeAllOnLineNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageModifyLastTimeAllOnLineNotify::CMessageModifyLastTimeAllOnLineNotify(const CMessageModifyLastTimeAllOnLineNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageModifyLastTimeAllOnLineNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  time_ = 0u;
  friendid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageModifyLastTimeAllOnLineNotify::~CMessageModifyLastTimeAllOnLineNotify() {
  SharedDtor();
}

void CMessageModifyLastTimeAllOnLineNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageModifyLastTimeAllOnLineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyLastTimeAllOnLineNotify_descriptor_;
}

const CMessageModifyLastTimeAllOnLineNotify& CMessageModifyLastTimeAllOnLineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageModifyLastTimeAllOnLineNotify* CMessageModifyLastTimeAllOnLineNotify::default_instance_ = NULL;

CMessageModifyLastTimeAllOnLineNotify* CMessageModifyLastTimeAllOnLineNotify::New() const {
  return new CMessageModifyLastTimeAllOnLineNotify;
}

void CMessageModifyLastTimeAllOnLineNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    time_ = 0u;
    friendid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageModifyLastTimeAllOnLineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Time:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &time_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_FriendID;
        break;
      }
      
      // optional uint32 FriendID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FriendID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &friendid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageModifyLastTimeAllOnLineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageModifyLastTimeAllOnLineNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->time(), output);
  }
  
  // optional uint32 FriendID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->friendid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageModifyLastTimeAllOnLineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 Time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional uint32 FriendID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->friendid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageModifyLastTimeAllOnLineNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->time());
    }
    
    // optional uint32 FriendID = 3;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->friendid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageModifyLastTimeAllOnLineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageModifyLastTimeAllOnLineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageModifyLastTimeAllOnLineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageModifyLastTimeAllOnLineNotify::MergeFrom(const CMessageModifyLastTimeAllOnLineNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageModifyLastTimeAllOnLineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyLastTimeAllOnLineNotify::CopyFrom(const CMessageModifyLastTimeAllOnLineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageModifyLastTimeAllOnLineNotify::Swap(CMessageModifyLastTimeAllOnLineNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(time_, other->time_);
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageModifyLastTimeAllOnLineNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageModifyLastTimeAllOnLineNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageModifyLastTimeAllOnLineNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageModifyLastTimeAllOnLineNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCreateSwornTeamRequest::_default_swornname_;
#ifndef _MSC_VER
const int CMessageCreateSwornTeamRequest::kSwornNameFieldNumber;
#endif  // !_MSC_VER

CMessageCreateSwornTeamRequest::CMessageCreateSwornTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateSwornTeamRequest::InitAsDefaultInstance() {}

CMessageCreateSwornTeamRequest::CMessageCreateSwornTeamRequest(const CMessageCreateSwornTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateSwornTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateSwornTeamRequest::~CMessageCreateSwornTeamRequest() {
  SharedDtor();
}

void CMessageCreateSwornTeamRequest::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamRequest_descriptor_;
}

const CMessageCreateSwornTeamRequest& CMessageCreateSwornTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateSwornTeamRequest* CMessageCreateSwornTeamRequest::default_instance_ = NULL;

CMessageCreateSwornTeamRequest* CMessageCreateSwornTeamRequest::New() const {
  return new CMessageCreateSwornTeamRequest;
}

void CMessageCreateSwornTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateSwornTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SwornName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateSwornTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateSwornTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SwornName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->swornname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateSwornTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SwornName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->swornname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateSwornTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SwornName = 1;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateSwornTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateSwornTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateSwornTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateSwornTeamRequest::MergeFrom(const CMessageCreateSwornTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swornname(from.swornname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateSwornTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamRequest::CopyFrom(const CMessageCreateSwornTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamRequest::Swap(CMessageCreateSwornTeamRequest* other) {
  if (other != this) {
    std::swap(swornname_, other->swornname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateSwornTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateSwornTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageCreateSwornTeamResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageCreateSwornTeamResponse::CMessageCreateSwornTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateSwornTeamResponse::InitAsDefaultInstance() {}

CMessageCreateSwornTeamResponse::CMessageCreateSwornTeamResponse(const CMessageCreateSwornTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateSwornTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateSwornTeamResponse::~CMessageCreateSwornTeamResponse() {
  SharedDtor();
}

void CMessageCreateSwornTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamResponse_descriptor_;
}

const CMessageCreateSwornTeamResponse& CMessageCreateSwornTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateSwornTeamResponse* CMessageCreateSwornTeamResponse::default_instance_ = NULL;

CMessageCreateSwornTeamResponse* CMessageCreateSwornTeamResponse::New() const {
  return new CMessageCreateSwornTeamResponse;
}

void CMessageCreateSwornTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateSwornTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateSwornTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateSwornTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateSwornTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateSwornTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateSwornTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateSwornTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateSwornTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateSwornTeamResponse::MergeFrom(const CMessageCreateSwornTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateSwornTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamResponse::CopyFrom(const CMessageCreateSwornTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamResponse::Swap(CMessageCreateSwornTeamResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateSwornTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateSwornTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageLeaveSwornTeamRequest::CMessageLeaveSwornTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveSwornTeamRequest::InitAsDefaultInstance() {}

CMessageLeaveSwornTeamRequest::CMessageLeaveSwornTeamRequest(const CMessageLeaveSwornTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveSwornTeamRequest::~CMessageLeaveSwornTeamRequest() {
  SharedDtor();
}

void CMessageLeaveSwornTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamRequest_descriptor_;
}

const CMessageLeaveSwornTeamRequest& CMessageLeaveSwornTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveSwornTeamRequest* CMessageLeaveSwornTeamRequest::default_instance_ = NULL;

CMessageLeaveSwornTeamRequest* CMessageLeaveSwornTeamRequest::New() const {
  return new CMessageLeaveSwornTeamRequest;
}

void CMessageLeaveSwornTeamRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveSwornTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageLeaveSwornTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveSwornTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveSwornTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveSwornTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveSwornTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveSwornTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveSwornTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveSwornTeamRequest::MergeFrom(const CMessageLeaveSwornTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveSwornTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamRequest::CopyFrom(const CMessageLeaveSwornTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamRequest::Swap(CMessageLeaveSwornTeamRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveSwornTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveSwornTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveSwornTeamResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveSwornTeamResponse::CMessageLeaveSwornTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveSwornTeamResponse::InitAsDefaultInstance() {}

CMessageLeaveSwornTeamResponse::CMessageLeaveSwornTeamResponse(const CMessageLeaveSwornTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveSwornTeamResponse::~CMessageLeaveSwornTeamResponse() {
  SharedDtor();
}

void CMessageLeaveSwornTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamResponse_descriptor_;
}

const CMessageLeaveSwornTeamResponse& CMessageLeaveSwornTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveSwornTeamResponse* CMessageLeaveSwornTeamResponse::default_instance_ = NULL;

CMessageLeaveSwornTeamResponse* CMessageLeaveSwornTeamResponse::New() const {
  return new CMessageLeaveSwornTeamResponse;
}

void CMessageLeaveSwornTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveSwornTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveSwornTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveSwornTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveSwornTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveSwornTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveSwornTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveSwornTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveSwornTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveSwornTeamResponse::MergeFrom(const CMessageLeaveSwornTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveSwornTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamResponse::CopyFrom(const CMessageLeaveSwornTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamResponse::Swap(CMessageLeaveSwornTeamResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveSwornTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveSwornTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickSwornMemberRequest::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickSwornMemberRequest::CMessageKickSwornMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickSwornMemberRequest::InitAsDefaultInstance() {}

CMessageKickSwornMemberRequest::CMessageKickSwornMemberRequest(const CMessageKickSwornMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickSwornMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickSwornMemberRequest::~CMessageKickSwornMemberRequest() {
  SharedDtor();
}

void CMessageKickSwornMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberRequest_descriptor_;
}

const CMessageKickSwornMemberRequest& CMessageKickSwornMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickSwornMemberRequest* CMessageKickSwornMemberRequest::default_instance_ = NULL;

CMessageKickSwornMemberRequest* CMessageKickSwornMemberRequest::New() const {
  return new CMessageKickSwornMemberRequest;
}

void CMessageKickSwornMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickSwornMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickSwornMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickSwornMemberRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickSwornMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickSwornMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickSwornMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickSwornMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickSwornMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickSwornMemberRequest::MergeFrom(const CMessageKickSwornMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickSwornMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberRequest::CopyFrom(const CMessageKickSwornMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberRequest::Swap(CMessageKickSwornMemberRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickSwornMemberRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickSwornMemberRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickSwornMemberResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageKickSwornMemberResponse::CMessageKickSwornMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickSwornMemberResponse::InitAsDefaultInstance() {}

CMessageKickSwornMemberResponse::CMessageKickSwornMemberResponse(const CMessageKickSwornMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickSwornMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickSwornMemberResponse::~CMessageKickSwornMemberResponse() {
  SharedDtor();
}

void CMessageKickSwornMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberResponse_descriptor_;
}

const CMessageKickSwornMemberResponse& CMessageKickSwornMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickSwornMemberResponse* CMessageKickSwornMemberResponse::default_instance_ = NULL;

CMessageKickSwornMemberResponse* CMessageKickSwornMemberResponse::New() const {
  return new CMessageKickSwornMemberResponse;
}

void CMessageKickSwornMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickSwornMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickSwornMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickSwornMemberResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickSwornMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickSwornMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickSwornMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickSwornMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickSwornMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickSwornMemberResponse::MergeFrom(const CMessageKickSwornMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickSwornMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberResponse::CopyFrom(const CMessageKickSwornMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberResponse::Swap(CMessageKickSwornMemberResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickSwornMemberResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickSwornMemberResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageDisbandSwornTeamRequest::CMessageDisbandSwornTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandSwornTeamRequest::InitAsDefaultInstance() {}

CMessageDisbandSwornTeamRequest::CMessageDisbandSwornTeamRequest(const CMessageDisbandSwornTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandSwornTeamRequest::~CMessageDisbandSwornTeamRequest() {
  SharedDtor();
}

void CMessageDisbandSwornTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamRequest_descriptor_;
}

const CMessageDisbandSwornTeamRequest& CMessageDisbandSwornTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandSwornTeamRequest* CMessageDisbandSwornTeamRequest::default_instance_ = NULL;

CMessageDisbandSwornTeamRequest* CMessageDisbandSwornTeamRequest::New() const {
  return new CMessageDisbandSwornTeamRequest;
}

void CMessageDisbandSwornTeamRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandSwornTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageDisbandSwornTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandSwornTeamRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandSwornTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandSwornTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandSwornTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandSwornTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandSwornTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandSwornTeamRequest::MergeFrom(const CMessageDisbandSwornTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandSwornTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamRequest::CopyFrom(const CMessageDisbandSwornTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamRequest::Swap(CMessageDisbandSwornTeamRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandSwornTeamRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandSwornTeamRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandSwornTeamResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandSwornTeamResponse::CMessageDisbandSwornTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandSwornTeamResponse::InitAsDefaultInstance() {}

CMessageDisbandSwornTeamResponse::CMessageDisbandSwornTeamResponse(const CMessageDisbandSwornTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandSwornTeamResponse::~CMessageDisbandSwornTeamResponse() {
  SharedDtor();
}

void CMessageDisbandSwornTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamResponse_descriptor_;
}

const CMessageDisbandSwornTeamResponse& CMessageDisbandSwornTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandSwornTeamResponse* CMessageDisbandSwornTeamResponse::default_instance_ = NULL;

CMessageDisbandSwornTeamResponse* CMessageDisbandSwornTeamResponse::New() const {
  return new CMessageDisbandSwornTeamResponse;
}

void CMessageDisbandSwornTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandSwornTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandSwornTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandSwornTeamResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandSwornTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandSwornTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandSwornTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandSwornTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandSwornTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandSwornTeamResponse::MergeFrom(const CMessageDisbandSwornTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandSwornTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamResponse::CopyFrom(const CMessageDisbandSwornTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamResponse::Swap(CMessageDisbandSwornTeamResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandSwornTeamResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandSwornTeamResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamResponse_reflection_;
}

// ===================================================================

const ::std::string CMsgSwornMember::_default_rolename_;
#ifndef _MSC_VER
const int CMsgSwornMember::kRoleIDFieldNumber;
const int CMsgSwornMember::kRoleNameFieldNumber;
const int CMsgSwornMember::kRolePosFieldNumber;
const int CMsgSwornMember::kFaceIDFieldNumber;
const int CMsgSwornMember::kRoleLevelFieldNumber;
const int CMsgSwornMember::kMetierIDFieldNumber;
const int CMsgSwornMember::kGenderIDFieldNumber;
#endif  // !_MSC_VER

CMsgSwornMember::CMsgSwornMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSwornMember::InitAsDefaultInstance() {}

CMsgSwornMember::CMsgSwornMember(const CMsgSwornMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSwornMember::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&_default_rolename_);
  rolepos_ = 0u;
  faceid_ = 0u;
  rolelevel_ = 0u;
  metierid_ = 0u;
  genderid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSwornMember::~CMsgSwornMember() {
  SharedDtor();
}

void CMsgSwornMember::SharedDtor() {
  if (rolename_ != &_default_rolename_) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMsgSwornMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSwornMember_descriptor_;
}

const CMsgSwornMember& CMsgSwornMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMsgSwornMember* CMsgSwornMember::default_instance_ = NULL;

CMsgSwornMember* CMsgSwornMember::New() const {
  return new CMsgSwornMember;
}

void CMsgSwornMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (rolename_ != &_default_rolename_) {
        rolename_->clear();
      }
    }
    rolepos_ = 0u;
    faceid_ = 0u;
    rolelevel_ = 0u;
    metierid_ = 0u;
    genderid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSwornMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_RoleName;
        break;
      }
      
      // optional string RoleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RoleName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_rolename()));
        if (input->ExpectTag(24)) goto parse_RolePos;
        break;
      }
      
      // optional uint32 RolePos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RolePos:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolepos_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FaceID;
        break;
      }
      
      // optional uint32 FaceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &faceid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleLevel;
        break;
      }
      
      // optional uint32 RoleLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleLevel:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rolelevel_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_MetierID;
        break;
      }
      
      // optional uint32 MetierID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MetierID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &metierid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_GenderID;
        break;
      }
      
      // optional uint32 GenderID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GenderID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &genderid_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSwornMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMsgSwornMember::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->rolename(), output);
  }
  
  // optional uint32 RolePos = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rolepos(), output);
  }
  
  // optional uint32 FaceID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->faceid(), output);
  }
  
  // optional uint32 RoleLevel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->rolelevel(), output);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->metierid(), output);
  }
  
  // optional uint32 GenderID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->genderid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSwornMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional string RoleName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->rolename(), target);
  }
  
  // optional uint32 RolePos = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rolepos(), target);
  }
  
  // optional uint32 FaceID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->faceid(), target);
  }
  
  // optional uint32 RoleLevel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->rolelevel(), target);
  }
  
  // optional uint32 MetierID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->metierid(), target);
  }
  
  // optional uint32 GenderID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->genderid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSwornMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional string RoleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->rolename());
    }
    
    // optional uint32 RolePos = 3;
    if (has_rolepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolepos());
    }
    
    // optional uint32 FaceID = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->faceid());
    }
    
    // optional uint32 RoleLevel = 5;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rolelevel());
    }
    
    // optional uint32 MetierID = 6;
    if (has_metierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->metierid());
    }
    
    // optional uint32 GenderID = 7;
    if (has_genderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->genderid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMsgSwornMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSwornMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSwornMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSwornMember::MergeFrom(const CMsgSwornMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_rolename(from.rolename());
    }
    if (from._has_bit(2)) {
      set_rolepos(from.rolepos());
    }
    if (from._has_bit(3)) {
      set_faceid(from.faceid());
    }
    if (from._has_bit(4)) {
      set_rolelevel(from.rolelevel());
    }
    if (from._has_bit(5)) {
      set_metierid(from.metierid());
    }
    if (from._has_bit(6)) {
      set_genderid(from.genderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSwornMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSwornMember::CopyFrom(const CMsgSwornMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSwornMember::Swap(CMsgSwornMember* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolepos_, other->rolepos_);
    std::swap(faceid_, other->faceid_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(metierid_, other->metierid_);
    std::swap(genderid_, other->genderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMsgSwornMember::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMsgSwornMember::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMsgSwornMember::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMsgSwornMember_reflection_;
}

// ===================================================================

const ::std::string CMessageSwornInfoNotify::_default_swornname_;
#ifndef _MSC_VER
const int CMessageSwornInfoNotify::kSwornMemberFieldNumber;
const int CMessageSwornInfoNotify::kSwornNameFieldNumber;
const int CMessageSwornInfoNotify::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageSwornInfoNotify::CMessageSwornInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSwornInfoNotify::InitAsDefaultInstance() {}

CMessageSwornInfoNotify::CMessageSwornInfoNotify(const CMessageSwornInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSwornInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSwornInfoNotify::~CMessageSwornInfoNotify() {
  SharedDtor();
}

void CMessageSwornInfoNotify::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSwornInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSwornInfoNotify_descriptor_;
}

const CMessageSwornInfoNotify& CMessageSwornInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageSwornInfoNotify* CMessageSwornInfoNotify::default_instance_ = NULL;

CMessageSwornInfoNotify* CMessageSwornInfoNotify::New() const {
  return new CMessageSwornInfoNotify;
}

void CMessageSwornInfoNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
    roleid_ = 0u;
  }
  swornmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSwornInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CMsgSwornMember SwornMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornMember:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_swornmember()));
        if (input->ExpectTag(10)) goto parse_SwornMember;
        if (input->ExpectTag(18)) goto parse_SwornName;
        break;
      }
      
      // optional string SwornName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSwornInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSwornInfoNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->swornmember(i), output);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->swornname(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSwornInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->swornmember(i), target);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->swornname(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSwornInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string SwornName = 2;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  // repeated .CMsgSwornMember SwornMember = 1;
  total_size += 1 * this->swornmember_size();
  for (int i = 0; i < this->swornmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->swornmember(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSwornInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSwornInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSwornInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSwornInfoNotify::MergeFrom(const CMessageSwornInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  swornmember_.MergeFrom(from.swornmember_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_swornname(from.swornname());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSwornInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSwornInfoNotify::CopyFrom(const CMessageSwornInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSwornInfoNotify::Swap(CMessageSwornInfoNotify* other) {
  if (other != this) {
    swornmember_.Swap(&other->swornmember_);
    std::swap(swornname_, other->swornname_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSwornInfoNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSwornInfoNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSwornInfoNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSwornInfoNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageCreateSwornTeamNotify::_default_swornname_;
#ifndef _MSC_VER
const int CMessageCreateSwornTeamNotify::kSwornMemberFieldNumber;
const int CMessageCreateSwornTeamNotify::kSwornNameFieldNumber;
const int CMessageCreateSwornTeamNotify::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageCreateSwornTeamNotify::CMessageCreateSwornTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageCreateSwornTeamNotify::InitAsDefaultInstance() {}

CMessageCreateSwornTeamNotify::CMessageCreateSwornTeamNotify(const CMessageCreateSwornTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageCreateSwornTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  masterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageCreateSwornTeamNotify::~CMessageCreateSwornTeamNotify() {
  SharedDtor();
}

void CMessageCreateSwornTeamNotify::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamNotify_descriptor_;
}

const CMessageCreateSwornTeamNotify& CMessageCreateSwornTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageCreateSwornTeamNotify* CMessageCreateSwornTeamNotify::default_instance_ = NULL;

CMessageCreateSwornTeamNotify* CMessageCreateSwornTeamNotify::New() const {
  return new CMessageCreateSwornTeamNotify;
}

void CMessageCreateSwornTeamNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
    masterid_ = 0u;
  }
  swornmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageCreateSwornTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CMsgSwornMember SwornMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornMember:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_swornmember()));
        if (input->ExpectTag(10)) goto parse_SwornMember;
        if (input->ExpectTag(18)) goto parse_SwornName;
        break;
      }
      
      // optional string SwornName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectTag(24)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageCreateSwornTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageCreateSwornTeamNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->swornmember(i), output);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->swornname(), output);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->masterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageCreateSwornTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->swornmember(i), target);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->swornname(), target);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->masterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageCreateSwornTeamNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string SwornName = 2;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
    // optional uint32 MasterID = 3;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
  }
  // repeated .CMsgSwornMember SwornMember = 1;
  total_size += 1 * this->swornmember_size();
  for (int i = 0; i < this->swornmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->swornmember(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageCreateSwornTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageCreateSwornTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageCreateSwornTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageCreateSwornTeamNotify::MergeFrom(const CMessageCreateSwornTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  swornmember_.MergeFrom(from.swornmember_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_swornname(from.swornname());
    }
    if (from._has_bit(2)) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageCreateSwornTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamNotify::CopyFrom(const CMessageCreateSwornTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateSwornTeamNotify::Swap(CMessageCreateSwornTeamNotify* other) {
  if (other != this) {
    swornmember_.Swap(&other->swornmember_);
    std::swap(swornname_, other->swornname_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageCreateSwornTeamNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageCreateSwornTeamNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageCreateSwornTeamNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateSwornTeamNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLeaveSwornTeamNotify::kRouterFieldNumber;
const int CMessageLeaveSwornTeamNotify::kRoleIDFieldNumber;
const int CMessageLeaveSwornTeamNotify::kMasterIDFieldNumber;
#endif  // !_MSC_VER

CMessageLeaveSwornTeamNotify::CMessageLeaveSwornTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLeaveSwornTeamNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageLeaveSwornTeamNotify::CMessageLeaveSwornTeamNotify(const CMessageLeaveSwornTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  roleid_ = 0u;
  masterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLeaveSwornTeamNotify::~CMessageLeaveSwornTeamNotify() {
  SharedDtor();
}

void CMessageLeaveSwornTeamNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamNotify_descriptor_;
}

const CMessageLeaveSwornTeamNotify& CMessageLeaveSwornTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLeaveSwornTeamNotify* CMessageLeaveSwornTeamNotify::default_instance_ = NULL;

CMessageLeaveSwornTeamNotify* CMessageLeaveSwornTeamNotify::New() const {
  return new CMessageLeaveSwornTeamNotify;
}

void CMessageLeaveSwornTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    roleid_ = 0u;
    masterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLeaveSwornTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_MasterID;
        break;
      }
      
      // optional uint32 MasterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_MasterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &masterid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLeaveSwornTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLeaveSwornTeamNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->masterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLeaveSwornTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  // optional uint32 MasterID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->masterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLeaveSwornTeamNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 MasterID = 3;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->masterid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLeaveSwornTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLeaveSwornTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLeaveSwornTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLeaveSwornTeamNotify::MergeFrom(const CMessageLeaveSwornTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(2)) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLeaveSwornTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamNotify::CopyFrom(const CMessageLeaveSwornTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLeaveSwornTeamNotify::Swap(CMessageLeaveSwornTeamNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(roleid_, other->roleid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLeaveSwornTeamNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLeaveSwornTeamNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLeaveSwornTeamNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLeaveSwornTeamNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageKickSwornMemberNotify::kRouterFieldNumber;
const int CMessageKickSwornMemberNotify::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageKickSwornMemberNotify::CMessageKickSwornMemberNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageKickSwornMemberNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageKickSwornMemberNotify::CMessageKickSwornMemberNotify(const CMessageKickSwornMemberNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageKickSwornMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageKickSwornMemberNotify::~CMessageKickSwornMemberNotify() {
  SharedDtor();
}

void CMessageKickSwornMemberNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberNotify_descriptor_;
}

const CMessageKickSwornMemberNotify& CMessageKickSwornMemberNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageKickSwornMemberNotify* CMessageKickSwornMemberNotify::default_instance_ = NULL;

CMessageKickSwornMemberNotify* CMessageKickSwornMemberNotify::New() const {
  return new CMessageKickSwornMemberNotify;
}

void CMessageKickSwornMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageKickSwornMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageKickSwornMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageKickSwornMemberNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageKickSwornMemberNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 RoleID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageKickSwornMemberNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageKickSwornMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageKickSwornMemberNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageKickSwornMemberNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageKickSwornMemberNotify::MergeFrom(const CMessageKickSwornMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageKickSwornMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberNotify::CopyFrom(const CMessageKickSwornMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageKickSwornMemberNotify::Swap(CMessageKickSwornMemberNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageKickSwornMemberNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageKickSwornMemberNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageKickSwornMemberNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageKickSwornMemberNotify_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeSwornNameRequest::_default_swornname_;
#ifndef _MSC_VER
const int CMessageChangeSwornNameRequest::kSwornNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeSwornNameRequest::CMessageChangeSwornNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeSwornNameRequest::InitAsDefaultInstance() {}

CMessageChangeSwornNameRequest::CMessageChangeSwornNameRequest(const CMessageChangeSwornNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeSwornNameRequest::SharedCtor() {
  _cached_size_ = 0;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeSwornNameRequest::~CMessageChangeSwornNameRequest() {
  SharedDtor();
}

void CMessageChangeSwornNameRequest::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameRequest_descriptor_;
}

const CMessageChangeSwornNameRequest& CMessageChangeSwornNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeSwornNameRequest* CMessageChangeSwornNameRequest::default_instance_ = NULL;

CMessageChangeSwornNameRequest* CMessageChangeSwornNameRequest::New() const {
  return new CMessageChangeSwornNameRequest;
}

void CMessageChangeSwornNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeSwornNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional string SwornName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeSwornNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeSwornNameRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string SwornName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteString(1, this->swornname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeSwornNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SwornName = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(1, this->swornname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeSwornNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SwornName = 1;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeSwornNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeSwornNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeSwornNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeSwornNameRequest::MergeFrom(const CMessageChangeSwornNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_swornname(from.swornname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeSwornNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameRequest::CopyFrom(const CMessageChangeSwornNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameRequest::Swap(CMessageChangeSwornNameRequest* other) {
  if (other != this) {
    std::swap(swornname_, other->swornname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeSwornNameRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeSwornNameRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageChangeSwornNameResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageChangeSwornNameResponse::CMessageChangeSwornNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeSwornNameResponse::InitAsDefaultInstance() {}

CMessageChangeSwornNameResponse::CMessageChangeSwornNameResponse(const CMessageChangeSwornNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeSwornNameResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeSwornNameResponse::~CMessageChangeSwornNameResponse() {
  SharedDtor();
}

void CMessageChangeSwornNameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameResponse_descriptor_;
}

const CMessageChangeSwornNameResponse& CMessageChangeSwornNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeSwornNameResponse* CMessageChangeSwornNameResponse::default_instance_ = NULL;

CMessageChangeSwornNameResponse* CMessageChangeSwornNameResponse::New() const {
  return new CMessageChangeSwornNameResponse;
}

void CMessageChangeSwornNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeSwornNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeSwornNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeSwornNameResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeSwornNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeSwornNameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeSwornNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeSwornNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeSwornNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeSwornNameResponse::MergeFrom(const CMessageChangeSwornNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeSwornNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameResponse::CopyFrom(const CMessageChangeSwornNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameResponse::Swap(CMessageChangeSwornNameResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeSwornNameResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeSwornNameResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageChangeSwornNameNotify::_default_swornname_;
#ifndef _MSC_VER
const int CMessageChangeSwornNameNotify::kRouterFieldNumber;
const int CMessageChangeSwornNameNotify::kSwornNameFieldNumber;
#endif  // !_MSC_VER

CMessageChangeSwornNameNotify::CMessageChangeSwornNameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageChangeSwornNameNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageChangeSwornNameNotify::CMessageChangeSwornNameNotify(const CMessageChangeSwornNameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageChangeSwornNameNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageChangeSwornNameNotify::~CMessageChangeSwornNameNotify() {
  SharedDtor();
}

void CMessageChangeSwornNameNotify::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameNotify_descriptor_;
}

const CMessageChangeSwornNameNotify& CMessageChangeSwornNameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageChangeSwornNameNotify* CMessageChangeSwornNameNotify::default_instance_ = NULL;

CMessageChangeSwornNameNotify* CMessageChangeSwornNameNotify::New() const {
  return new CMessageChangeSwornNameNotify;
}

void CMessageChangeSwornNameNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    if (_has_bit(1)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageChangeSwornNameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(18)) goto parse_SwornName;
        break;
      }
      
      // optional string SwornName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageChangeSwornNameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageChangeSwornNameNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->swornname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageChangeSwornNameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->swornname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageChangeSwornNameNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional string SwornName = 2;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageChangeSwornNameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageChangeSwornNameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageChangeSwornNameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageChangeSwornNameNotify::MergeFrom(const CMessageChangeSwornNameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_swornname(from.swornname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageChangeSwornNameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameNotify::CopyFrom(const CMessageChangeSwornNameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageChangeSwornNameNotify::Swap(CMessageChangeSwornNameNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(swornname_, other->swornname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageChangeSwornNameNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageChangeSwornNameNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageChangeSwornNameNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageChangeSwornNameNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageDisbandSwornTeamNotify::kRouterFieldNumber;
const int CMessageDisbandSwornTeamNotify::kSwornIDFieldNumber;
#endif  // !_MSC_VER

CMessageDisbandSwornTeamNotify::CMessageDisbandSwornTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageDisbandSwornTeamNotify::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageDisbandSwornTeamNotify::CMessageDisbandSwornTeamNotify(const CMessageDisbandSwornTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  swornid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageDisbandSwornTeamNotify::~CMessageDisbandSwornTeamNotify() {
  SharedDtor();
}

void CMessageDisbandSwornTeamNotify::SharedDtor() {
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamNotify_descriptor_;
}

const CMessageDisbandSwornTeamNotify& CMessageDisbandSwornTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageDisbandSwornTeamNotify* CMessageDisbandSwornTeamNotify::default_instance_ = NULL;

CMessageDisbandSwornTeamNotify* CMessageDisbandSwornTeamNotify::New() const {
  return new CMessageDisbandSwornTeamNotify;
}

void CMessageDisbandSwornTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    swornid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageDisbandSwornTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_SwornID;
        break;
      }
      
      // optional uint32 SwornID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SwornID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &swornid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageDisbandSwornTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageDisbandSwornTeamNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 SwornID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->swornid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageDisbandSwornTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 SwornID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->swornid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageDisbandSwornTeamNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 SwornID = 2;
    if (has_swornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->swornid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageDisbandSwornTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageDisbandSwornTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageDisbandSwornTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageDisbandSwornTeamNotify::MergeFrom(const CMessageDisbandSwornTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_swornid(from.swornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageDisbandSwornTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamNotify::CopyFrom(const CMessageDisbandSwornTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageDisbandSwornTeamNotify::Swap(CMessageDisbandSwornTeamNotify* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(swornid_, other->swornid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageDisbandSwornTeamNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageDisbandSwornTeamNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageDisbandSwornTeamNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageDisbandSwornTeamNotify_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLatestContactChangeStatusNotice::kCharIDFieldNumber;
const int CMessageLatestContactChangeStatusNotice::kStatusFieldNumber;
const int CMessageLatestContactChangeStatusNotice::kVipFlagFieldNumber;
#endif  // !_MSC_VER

CMessageLatestContactChangeStatusNotice::CMessageLatestContactChangeStatusNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLatestContactChangeStatusNotice::InitAsDefaultInstance() {}

CMessageLatestContactChangeStatusNotice::CMessageLatestContactChangeStatusNotice(const CMessageLatestContactChangeStatusNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLatestContactChangeStatusNotice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  status_ = 0u;
  vipflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLatestContactChangeStatusNotice::~CMessageLatestContactChangeStatusNotice() {
  SharedDtor();
}

void CMessageLatestContactChangeStatusNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLatestContactChangeStatusNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLatestContactChangeStatusNotice_descriptor_;
}

const CMessageLatestContactChangeStatusNotice& CMessageLatestContactChangeStatusNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLatestContactChangeStatusNotice* CMessageLatestContactChangeStatusNotice::default_instance_ = NULL;

CMessageLatestContactChangeStatusNotice* CMessageLatestContactChangeStatusNotice::New() const {
  return new CMessageLatestContactChangeStatusNotice;
}

void CMessageLatestContactChangeStatusNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    status_ = 0u;
    vipflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLatestContactChangeStatusNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 CharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }
      
      // optional uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Status:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &status_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_VipFlag;
        break;
      }
      
      // optional uint32 VipFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_VipFlag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &vipflag_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLatestContactChangeStatusNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLatestContactChangeStatusNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->charid(), output);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->status(), output);
  }
  
  // optional uint32 VipFlag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->vipflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLatestContactChangeStatusNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CharID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->charid(), target);
  }
  
  // optional uint32 Status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional uint32 VipFlag = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->vipflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLatestContactChangeStatusNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CharID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->status());
    }
    
    // optional uint32 VipFlag = 3;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->vipflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLatestContactChangeStatusNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLatestContactChangeStatusNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLatestContactChangeStatusNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLatestContactChangeStatusNotice::MergeFrom(const CMessageLatestContactChangeStatusNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_charid(from.charid());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_vipflag(from.vipflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLatestContactChangeStatusNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLatestContactChangeStatusNotice::CopyFrom(const CMessageLatestContactChangeStatusNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLatestContactChangeStatusNotice::Swap(CMessageLatestContactChangeStatusNotice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(status_, other->status_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLatestContactChangeStatusNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLatestContactChangeStatusNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLatestContactChangeStatusNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLatestContactChangeStatusNotice_reflection_;
}

// ===================================================================

const ::std::string CMessageLastContacterNotice::_default_name_;
#ifndef _MSC_VER
const int CMessageLastContacterNotice::kRouterFieldNumber;
const int CMessageLastContacterNotice::kCharIDFieldNumber;
const int CMessageLastContacterNotice::kSexFieldNumber;
const int CMessageLastContacterNotice::kFaceIDFieldNumber;
const int CMessageLastContacterNotice::kNameFieldNumber;
const int CMessageLastContacterNotice::kNationIDFieldNumber;
#endif  // !_MSC_VER

CMessageLastContacterNotice::CMessageLastContacterNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLastContacterNotice::InitAsDefaultInstance() {  router_ = const_cast< ::CMessageRouter*>(&::CMessageRouter::default_instance());
}

CMessageLastContacterNotice::CMessageLastContacterNotice(const CMessageLastContacterNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLastContacterNotice::SharedCtor() {
  _cached_size_ = 0;
  router_ = NULL;
  charid_ = 0u;
  sex_ = 0u;
  faceid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLastContacterNotice::~CMessageLastContacterNotice() {
  SharedDtor();
}

void CMessageLastContacterNotice::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete router_;
  }
}

const ::google::protobuf::Descriptor* CMessageLastContacterNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLastContacterNotice_descriptor_;
}

const CMessageLastContacterNotice& CMessageLastContacterNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageLastContacterNotice* CMessageLastContacterNotice::default_instance_ = NULL;

CMessageLastContacterNotice* CMessageLastContacterNotice::New() const {
  return new CMessageLastContacterNotice;
}

void CMessageLastContacterNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (router_ != NULL) router_->::CMessageRouter::Clear();
    }
    charid_ = 0u;
    sex_ = 0u;
    faceid_ = 0u;
    if (_has_bit(4)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    nationid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLastContacterNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional .CMessageRouter Router = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_router()));
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Sex;
        break;
      }
      
      // optional uint32 Sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Sex:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sex_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_FaceID;
        break;
      }
      
      // optional uint32 FaceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FaceID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &faceid_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }
      
      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_name()));
        if (input->ExpectTag(48)) goto parse_NationID;
        break;
      }
      
      // optional uint32 NationID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NationID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &nationid_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLastContacterNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLastContacterNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->router(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // optional uint32 Sex = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->sex(), output);
  }
  
  // optional uint32 FaceID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->faceid(), output);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->name(), output);
  }
  
  // optional uint32 NationID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->nationid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLastContacterNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMessageRouter Router = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->router(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // optional uint32 Sex = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->sex(), target);
  }
  
  // optional uint32 FaceID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->faceid(), target);
  }
  
  // optional string Name = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->name(), target);
  }
  
  // optional uint32 NationID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->nationid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLastContacterNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMessageRouter Router = 1;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->router());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 Sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sex());
    }
    
    // optional uint32 FaceID = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->faceid());
    }
    
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->name());
    }
    
    // optional uint32 NationID = 6;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->nationid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLastContacterNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLastContacterNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLastContacterNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLastContacterNotice::MergeFrom(const CMessageLastContacterNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_router()->::CMessageRouter::MergeFrom(from.router());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(2)) {
      set_sex(from.sex());
    }
    if (from._has_bit(3)) {
      set_faceid(from.faceid());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
    if (from._has_bit(5)) {
      set_nationid(from.nationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLastContacterNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLastContacterNotice::CopyFrom(const CMessageLastContacterNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLastContacterNotice::Swap(CMessageLastContacterNotice* other) {
  if (other != this) {
    std::swap(router_, other->router_);
    std::swap(charid_, other->charid_);
    std::swap(sex_, other->sex_);
    std::swap(faceid_, other->faceid_);
    std::swap(name_, other->name_);
    std::swap(nationid_, other->nationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLastContacterNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLastContacterNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLastContacterNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLastContacterNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdateLastContacterNotice::kSenderIDFieldNumber;
const int CMessageUpdateLastContacterNotice::kReceiverIDFieldNumber;
#endif  // !_MSC_VER

CMessageUpdateLastContacterNotice::CMessageUpdateLastContacterNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdateLastContacterNotice::InitAsDefaultInstance() {}

CMessageUpdateLastContacterNotice::CMessageUpdateLastContacterNotice(const CMessageUpdateLastContacterNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdateLastContacterNotice::SharedCtor() {
  _cached_size_ = 0;
  senderid_ = 0u;
  receiverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdateLastContacterNotice::~CMessageUpdateLastContacterNotice() {
  SharedDtor();
}

void CMessageUpdateLastContacterNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdateLastContacterNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateLastContacterNotice_descriptor_;
}

const CMessageUpdateLastContacterNotice& CMessageUpdateLastContacterNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdateLastContacterNotice* CMessageUpdateLastContacterNotice::default_instance_ = NULL;

CMessageUpdateLastContacterNotice* CMessageUpdateLastContacterNotice::New() const {
  return new CMessageUpdateLastContacterNotice;
}

void CMessageUpdateLastContacterNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderid_ = 0u;
    receiverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdateLastContacterNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SenderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &senderid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ReceiverID;
        break;
      }
      
      // optional uint32 ReceiverID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ReceiverID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &receiverid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdateLastContacterNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdateLastContacterNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SenderID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->senderid(), output);
  }
  
  // optional uint32 ReceiverID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->receiverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdateLastContacterNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SenderID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->senderid(), target);
  }
  
  // optional uint32 ReceiverID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->receiverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdateLastContacterNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SenderID = 1;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->senderid());
    }
    
    // optional uint32 ReceiverID = 2;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->receiverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdateLastContacterNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdateLastContacterNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdateLastContacterNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdateLastContacterNotice::MergeFrom(const CMessageUpdateLastContacterNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_senderid(from.senderid());
    }
    if (from._has_bit(1)) {
      set_receiverid(from.receiverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdateLastContacterNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateLastContacterNotice::CopyFrom(const CMessageUpdateLastContacterNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdateLastContacterNotice::Swap(CMessageUpdateLastContacterNotice* other) {
  if (other != this) {
    std::swap(senderid_, other->senderid_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdateLastContacterNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdateLastContacterNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdateLastContacterNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdateLastContacterNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUploadContacterList::kPlayerIDFieldNumber;
const int CMessageUploadContacterList::kContacterIDFieldNumber;
#endif  // !_MSC_VER

CMessageUploadContacterList::CMessageUploadContacterList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUploadContacterList::InitAsDefaultInstance() {}

CMessageUploadContacterList::CMessageUploadContacterList(const CMessageUploadContacterList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUploadContacterList::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUploadContacterList::~CMessageUploadContacterList() {
  SharedDtor();
}

void CMessageUploadContacterList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUploadContacterList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUploadContacterList_descriptor_;
}

const CMessageUploadContacterList& CMessageUploadContacterList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageUploadContacterList* CMessageUploadContacterList::default_instance_ = NULL;

CMessageUploadContacterList* CMessageUploadContacterList::New() const {
  return new CMessageUploadContacterList;
}

void CMessageUploadContacterList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  contacterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUploadContacterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ContacterID;
        break;
      }
      
      // repeated uint32 ContacterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContacterID:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_contacterid(value);
        if (input->ExpectTag(16)) goto parse_ContacterID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUploadContacterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUploadContacterList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // repeated uint32 ContacterID = 2;
  for (int i = 0; i < this->contacterid_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->contacterid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUploadContacterList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // repeated uint32 ContacterID = 2;
  for (int i = 0; i < this->contacterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->contacterid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUploadContacterList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
  }
  // repeated uint32 ContacterID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->contacterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->contacterid(i));
    }
    total_size += 1 * this->contacterid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUploadContacterList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUploadContacterList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUploadContacterList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUploadContacterList::MergeFrom(const CMessageUploadContacterList& from) {
  GOOGLE_CHECK_NE(&from, this);
  contacterid_.MergeFrom(from.contacterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUploadContacterList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUploadContacterList::CopyFrom(const CMessageUploadContacterList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUploadContacterList::Swap(CMessageUploadContacterList* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    contacterid_.Swap(&other->contacterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUploadContacterList::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUploadContacterList::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUploadContacterList::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUploadContacterList_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageContacterStatusNotifyG2S::kPlayerIDFieldNumber;
const int CMessageContacterStatusNotifyG2S::kPlayerStatusFieldNumber;
const int CMessageContacterStatusNotifyG2S::kContacterIDFieldNumber;
#endif  // !_MSC_VER

CMessageContacterStatusNotifyG2S::CMessageContacterStatusNotifyG2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageContacterStatusNotifyG2S::InitAsDefaultInstance() {}

CMessageContacterStatusNotifyG2S::CMessageContacterStatusNotifyG2S(const CMessageContacterStatusNotifyG2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageContacterStatusNotifyG2S::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playerstatus_ = 0u;
  contacterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageContacterStatusNotifyG2S::~CMessageContacterStatusNotifyG2S() {
  SharedDtor();
}

void CMessageContacterStatusNotifyG2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageContacterStatusNotifyG2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageContacterStatusNotifyG2S_descriptor_;
}

const CMessageContacterStatusNotifyG2S& CMessageContacterStatusNotifyG2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageContacterStatusNotifyG2S* CMessageContacterStatusNotifyG2S::default_instance_ = NULL;

CMessageContacterStatusNotifyG2S* CMessageContacterStatusNotifyG2S::New() const {
  return new CMessageContacterStatusNotifyG2S;
}

void CMessageContacterStatusNotifyG2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    playerstatus_ = 0u;
    contacterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageContacterStatusNotifyG2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_PlayerStatus;
        break;
      }
      
      // optional uint32 PlayerStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PlayerStatus:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &playerstatus_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ContacterID;
        break;
      }
      
      // optional uint32 ContacterID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ContacterID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &contacterid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageContacterStatusNotifyG2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageContacterStatusNotifyG2S::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 PlayerStatus = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->playerstatus(), output);
  }
  
  // optional uint32 ContacterID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->contacterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageContacterStatusNotifyG2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 PlayerID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 PlayerStatus = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->playerstatus(), target);
  }
  
  // optional uint32 ContacterID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->contacterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageContacterStatusNotifyG2S::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 PlayerStatus = 2;
    if (has_playerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->playerstatus());
    }
    
    // optional uint32 ContacterID = 3;
    if (has_contacterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->contacterid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageContacterStatusNotifyG2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageContacterStatusNotifyG2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageContacterStatusNotifyG2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageContacterStatusNotifyG2S::MergeFrom(const CMessageContacterStatusNotifyG2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_playerid(from.playerid());
    }
    if (from._has_bit(1)) {
      set_playerstatus(from.playerstatus());
    }
    if (from._has_bit(2)) {
      set_contacterid(from.contacterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageContacterStatusNotifyG2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContacterStatusNotifyG2S::CopyFrom(const CMessageContacterStatusNotifyG2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageContacterStatusNotifyG2S::Swap(CMessageContacterStatusNotifyG2S* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playerstatus_, other->playerstatus_);
    std::swap(contacterid_, other->contacterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageContacterStatusNotifyG2S::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageContacterStatusNotifyG2S::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageContacterStatusNotifyG2S::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageContacterStatusNotifyG2S_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMessageRebuildSwornRequest::CMessageRebuildSwornRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRebuildSwornRequest::InitAsDefaultInstance() {}

CMessageRebuildSwornRequest::CMessageRebuildSwornRequest(const CMessageRebuildSwornRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRebuildSwornRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRebuildSwornRequest::~CMessageRebuildSwornRequest() {
  SharedDtor();
}

void CMessageRebuildSwornRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornRequest_descriptor_;
}

const CMessageRebuildSwornRequest& CMessageRebuildSwornRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRebuildSwornRequest* CMessageRebuildSwornRequest::default_instance_ = NULL;

CMessageRebuildSwornRequest* CMessageRebuildSwornRequest::New() const {
  return new CMessageRebuildSwornRequest;
}

void CMessageRebuildSwornRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRebuildSwornRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMessageRebuildSwornRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRebuildSwornRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRebuildSwornRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRebuildSwornRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRebuildSwornRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRebuildSwornRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRebuildSwornRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRebuildSwornRequest::MergeFrom(const CMessageRebuildSwornRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRebuildSwornRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornRequest::CopyFrom(const CMessageRebuildSwornRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornRequest::Swap(CMessageRebuildSwornRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRebuildSwornRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRebuildSwornRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageRebuildSwornResponse::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CMessageRebuildSwornResponse::CMessageRebuildSwornResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRebuildSwornResponse::InitAsDefaultInstance() {}

CMessageRebuildSwornResponse::CMessageRebuildSwornResponse(const CMessageRebuildSwornResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRebuildSwornResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRebuildSwornResponse::~CMessageRebuildSwornResponse() {
  SharedDtor();
}

void CMessageRebuildSwornResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornResponse_descriptor_;
}

const CMessageRebuildSwornResponse& CMessageRebuildSwornResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRebuildSwornResponse* CMessageRebuildSwornResponse::default_instance_ = NULL;

CMessageRebuildSwornResponse* CMessageRebuildSwornResponse::New() const {
  return new CMessageRebuildSwornResponse;
}

void CMessageRebuildSwornResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRebuildSwornResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRebuildSwornResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRebuildSwornResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRebuildSwornResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Errcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRebuildSwornResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRebuildSwornResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRebuildSwornResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRebuildSwornResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRebuildSwornResponse::MergeFrom(const CMessageRebuildSwornResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRebuildSwornResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornResponse::CopyFrom(const CMessageRebuildSwornResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornResponse::Swap(CMessageRebuildSwornResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRebuildSwornResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRebuildSwornResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornResponse_reflection_;
}

// ===================================================================

const ::std::string CMessageRebuildSwornNotify::_default_swornname_;
#ifndef _MSC_VER
const int CMessageRebuildSwornNotify::kSwornMemberFieldNumber;
const int CMessageRebuildSwornNotify::kSwornNameFieldNumber;
const int CMessageRebuildSwornNotify::kNewMemberFieldNumber;
#endif  // !_MSC_VER

CMessageRebuildSwornNotify::CMessageRebuildSwornNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageRebuildSwornNotify::InitAsDefaultInstance() {}

CMessageRebuildSwornNotify::CMessageRebuildSwornNotify(const CMessageRebuildSwornNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageRebuildSwornNotify::SharedCtor() {
  _cached_size_ = 0;
  swornname_ = const_cast< ::std::string*>(&_default_swornname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRebuildSwornNotify::~CMessageRebuildSwornNotify() {
  SharedDtor();
}

void CMessageRebuildSwornNotify::SharedDtor() {
  if (swornname_ != &_default_swornname_) {
    delete swornname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornNotify_descriptor_;
}

const CMessageRebuildSwornNotify& CMessageRebuildSwornNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friendmessage_5fpb_2ehxx();  return *default_instance_;
}

CMessageRebuildSwornNotify* CMessageRebuildSwornNotify::default_instance_ = NULL;

CMessageRebuildSwornNotify* CMessageRebuildSwornNotify::New() const {
  return new CMessageRebuildSwornNotify;
}

void CMessageRebuildSwornNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (swornname_ != &_default_swornname_) {
        swornname_->clear();
      }
    }
  }
  swornmember_.Clear();
  newmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRebuildSwornNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .CMsgSwornMember SwornMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornMember:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_swornmember()));
        if (input->ExpectTag(10)) goto parse_SwornMember;
        if (input->ExpectTag(18)) goto parse_SwornName;
        break;
      }
      
      // optional string SwornName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SwornName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_swornname()));
        if (input->ExpectTag(24)) goto parse_NewMember;
        break;
      }
      
      // repeated uint32 NewMember = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_NewMember:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_newmember(value);
        if (input->ExpectTag(24)) goto parse_NewMember;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageRebuildSwornNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageRebuildSwornNotify::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->swornmember(i), output);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->swornname(), output);
  }
  
  // repeated uint32 NewMember = 3;
  for (int i = 0; i < this->newmember_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->newmember(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageRebuildSwornNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSwornMember SwornMember = 1;
  for (int i = 0; i < this->swornmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->swornmember(i), target);
  }
  
  // optional string SwornName = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->swornname(), target);
  }
  
  // repeated uint32 NewMember = 3;
  for (int i = 0; i < this->newmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->newmember(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageRebuildSwornNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string SwornName = 2;
    if (has_swornname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->swornname());
    }
    
  }
  // repeated .CMsgSwornMember SwornMember = 1;
  total_size += 1 * this->swornmember_size();
  for (int i = 0; i < this->swornmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->swornmember(i));
  }
  
  // repeated uint32 NewMember = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newmember_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->newmember(i));
    }
    total_size += 1 * this->newmember_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageRebuildSwornNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRebuildSwornNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRebuildSwornNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRebuildSwornNotify::MergeFrom(const CMessageRebuildSwornNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  swornmember_.MergeFrom(from.swornmember_);
  newmember_.MergeFrom(from.newmember_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_swornname(from.swornname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRebuildSwornNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornNotify::CopyFrom(const CMessageRebuildSwornNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRebuildSwornNotify::Swap(CMessageRebuildSwornNotify* other) {
  if (other != this) {
    swornmember_.Swap(&other->swornmember_);
    std::swap(swornname_, other->swornname_);
    newmember_.Swap(&other->newmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageRebuildSwornNotify::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageRebuildSwornNotify::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageRebuildSwornNotify::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageRebuildSwornNotify_reflection_;
}
