// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "db_msg_pb.hxx.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>
#ifdef LEAK_CHK_DEBUG_NEW
#include "debug_new.h"
#endif

namespace {

const ::google::protobuf::Descriptor* CMessageExecuteSqlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExecuteSqlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageExecuteSqlResponse3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageExecuteSqlResponse3_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerItemInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerItemInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageLoadPlayerItemInfoResponse_emErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSavePlayerItemInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSavePlayerItemInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMessageSavePlayerItemInfoResponse_emErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMessagePlayerProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessagePlayerProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSavePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSavePlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageSavePlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageSavePlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerPropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoadPlayerPropertyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdatePlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageGetBourseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageGetBourseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseInfoNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseInfoNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseAddDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseAddDoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseS2DIncAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseS2DIncAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseS2DDecAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseS2DDecAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseS2DGetAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseS2DGetAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseD2SAccountNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseD2SAccountNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageUpdatePlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBoursePlayerListNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBoursePlayerListNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBoursePlayerListGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBoursePlayerListGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2DBourseDecBuyDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2DBourseDecBuyDoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageS2DBourseDecSellDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageS2DBourseDecSellDoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageBourseLogQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageBourseLogQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageD2SBourseLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageD2SBourseLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DB_MSG_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SQLTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* emPackageIdx_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* emReSaveFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatrixSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatrixParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fmsg_5fpb_2ehxx() {
  protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_msg_pb.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageExecuteSqlRequest_descriptor_ = file->message_type(0);
  static const int CMessageExecuteSqlRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, bufsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, latestautoincid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, sqltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, sessiontype_),
  };
  CMessageExecuteSqlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExecuteSqlRequest_descriptor_,
      CMessageExecuteSqlRequest::default_instance_,
      CMessageExecuteSqlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExecuteSqlRequest));
  CMessageExecuteSqlResponse3_descriptor_ = file->message_type(1);
  static const int CMessageExecuteSqlResponse3_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, rowcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, colcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, fieldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, fieldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, fieldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, fieldvaluelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, latestautoincid_),
  };
  CMessageExecuteSqlResponse3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageExecuteSqlResponse3_descriptor_,
      CMessageExecuteSqlResponse3::default_instance_,
      CMessageExecuteSqlResponse3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageExecuteSqlResponse3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageExecuteSqlResponse3));
  CMessageLoadPlayerItemInfoRequest_descriptor_ = file->message_type(2);
  static const int CMessageLoadPlayerItemInfoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, packageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, sessionid_),
  };
  CMessageLoadPlayerItemInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerItemInfoRequest_descriptor_,
      CMessageLoadPlayerItemInfoRequest::default_instance_,
      CMessageLoadPlayerItemInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerItemInfoRequest));
  CMessageLoadPlayerItemInfoResponse_descriptor_ = file->message_type(3);
  static const int CMessageLoadPlayerItemInfoResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, packageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, itembox_),
  };
  CMessageLoadPlayerItemInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerItemInfoResponse_descriptor_,
      CMessageLoadPlayerItemInfoResponse::default_instance_,
      CMessageLoadPlayerItemInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerItemInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerItemInfoResponse));
  CMessageLoadPlayerItemInfoResponse_emErrorCode_descriptor_ = CMessageLoadPlayerItemInfoResponse_descriptor_->enum_type(0);
  CMessageSavePlayerItemInfoRequest_descriptor_ = file->message_type(4);
  static const int CMessageSavePlayerItemInfoRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, packageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, itembox_),
  };
  CMessageSavePlayerItemInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSavePlayerItemInfoRequest_descriptor_,
      CMessageSavePlayerItemInfoRequest::default_instance_,
      CMessageSavePlayerItemInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSavePlayerItemInfoRequest));
  CMessageSavePlayerItemInfoResponse_descriptor_ = file->message_type(5);
  static const int CMessageSavePlayerItemInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, packageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, sessionid_),
  };
  CMessageSavePlayerItemInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSavePlayerItemInfoResponse_descriptor_,
      CMessageSavePlayerItemInfoResponse::default_instance_,
      CMessageSavePlayerItemInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerItemInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSavePlayerItemInfoResponse));
  CMessageSavePlayerItemInfoResponse_emErrorCode_descriptor_ = CMessageSavePlayerItemInfoResponse_descriptor_->enum_type(0);
  CMessagePlayerProperty_descriptor_ = file->message_type(6);
  static const int CMessagePlayerProperty_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_cdgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_mw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_lifeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_statistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_monster_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_tele_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_wizard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, save_bitflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_repetion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_exptimeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_treasurebowl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, role_spiritinfo_),
  };
  CMessagePlayerProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessagePlayerProperty_descriptor_,
      CMessagePlayerProperty::default_instance_,
      CMessagePlayerProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessagePlayerProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessagePlayerProperty));
  CMessageSavePlayerRequest_descriptor_ = file->message_type(7);
  static const int CMessageSavePlayerRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, detailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, callback_),
  };
  CMessageSavePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSavePlayerRequest_descriptor_,
      CMessageSavePlayerRequest::default_instance_,
      CMessageSavePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSavePlayerRequest));
  CMessageLoadPlayerInfoRequest_descriptor_ = file->message_type(8);
  static const int CMessageLoadPlayerInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoRequest, sessionid_),
  };
  CMessageLoadPlayerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerInfoRequest_descriptor_,
      CMessageLoadPlayerInfoRequest::default_instance_,
      CMessageLoadPlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerInfoRequest));
  CMessageLoadPlayerInfoResponse_descriptor_ = file->message_type(9);
  static const int CMessageLoadPlayerInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, resultcode_),
  };
  CMessageLoadPlayerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerInfoResponse_descriptor_,
      CMessageLoadPlayerInfoResponse::default_instance_,
      CMessageLoadPlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerInfoResponse));
  CMessageSavePlayerResponse_descriptor_ = file->message_type(10);
  static const int CMessageSavePlayerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerResponse, resultcode_),
  };
  CMessageSavePlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageSavePlayerResponse_descriptor_,
      CMessageSavePlayerResponse::default_instance_,
      CMessageSavePlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageSavePlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageSavePlayerResponse));
  CMessageLoadPlayerPropertyRequest_descriptor_ = file->message_type(11);
  static const int CMessageLoadPlayerPropertyRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyRequest, detailid_),
  };
  CMessageLoadPlayerPropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerPropertyRequest_descriptor_,
      CMessageLoadPlayerPropertyRequest::default_instance_,
      CMessageLoadPlayerPropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerPropertyRequest));
  CMessageLoadPlayerPropertyResponse_descriptor_ = file->message_type(12);
  static const int CMessageLoadPlayerPropertyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, resultcode_),
  };
  CMessageLoadPlayerPropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoadPlayerPropertyResponse_descriptor_,
      CMessageLoadPlayerPropertyResponse::default_instance_,
      CMessageLoadPlayerPropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoadPlayerPropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoadPlayerPropertyResponse));
  CMessageUpdatePlayerInfoRequest_descriptor_ = file->message_type(13);
  static const int CMessageUpdatePlayerInfoRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, updatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, detailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, subtype_),
  };
  CMessageUpdatePlayerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdatePlayerInfoRequest_descriptor_,
      CMessageUpdatePlayerInfoRequest::default_instance_,
      CMessageUpdatePlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdatePlayerInfoRequest));
  CMessageGetBourseInfo_descriptor_ = file->message_type(14);
  static const int CMessageGetBourseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetBourseInfo, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetBourseInfo, accountid_),
  };
  CMessageGetBourseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageGetBourseInfo_descriptor_,
      CMessageGetBourseInfo::default_instance_,
      CMessageGetBourseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetBourseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageGetBourseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageGetBourseInfo));
  CMessageBourseInfoNotice_descriptor_ = file->message_type(15);
  static const int CMessageBourseInfoNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseInfoNotice, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseInfoNotice, buylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseInfoNotice, selllist_),
  };
  CMessageBourseInfoNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseInfoNotice_descriptor_,
      CMessageBourseInfoNotice::default_instance_,
      CMessageBourseInfoNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseInfoNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseInfoNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseInfoNotice));
  CMessageBourseAddDoc_descriptor_ = file->message_type(16);
  static const int CMessageBourseAddDoc_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, taxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, gameid_),
  };
  CMessageBourseAddDoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseAddDoc_descriptor_,
      CMessageBourseAddDoc::default_instance_,
      CMessageBourseAddDoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseAddDoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseAddDoc));
  CMessageBourseS2DIncAccount_descriptor_ = file->message_type(17);
  static const int CMessageBourseS2DIncAccount_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, roleid_),
  };
  CMessageBourseS2DIncAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseS2DIncAccount_descriptor_,
      CMessageBourseS2DIncAccount::default_instance_,
      CMessageBourseS2DIncAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DIncAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseS2DIncAccount));
  CMessageBourseS2DDecAccount_descriptor_ = file->message_type(18);
  static const int CMessageBourseS2DDecAccount_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, roleid_),
  };
  CMessageBourseS2DDecAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseS2DDecAccount_descriptor_,
      CMessageBourseS2DDecAccount::default_instance_,
      CMessageBourseS2DDecAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DDecAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseS2DDecAccount));
  CMessageBourseS2DGetAccount_descriptor_ = file->message_type(19);
  static const int CMessageBourseS2DGetAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DGetAccount, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DGetAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DGetAccount, code_),
  };
  CMessageBourseS2DGetAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseS2DGetAccount_descriptor_,
      CMessageBourseS2DGetAccount::default_instance_,
      CMessageBourseS2DGetAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DGetAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseS2DGetAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseS2DGetAccount));
  CMessageBourseD2SAccountNotice_descriptor_ = file->message_type(20);
  static const int CMessageBourseD2SAccountNotice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, yb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, parame1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, parame2_),
  };
  CMessageBourseD2SAccountNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseD2SAccountNotice_descriptor_,
      CMessageBourseD2SAccountNotice::default_instance_,
      CMessageBourseD2SAccountNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseD2SAccountNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseD2SAccountNotice));
  CMessageUpdatePlayerInfoResponse_descriptor_ = file->message_type(21);
  static const int CMessageUpdatePlayerInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoResponse, resultcode_),
  };
  CMessageUpdatePlayerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageUpdatePlayerInfoResponse_descriptor_,
      CMessageUpdatePlayerInfoResponse::default_instance_,
      CMessageUpdatePlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageUpdatePlayerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageUpdatePlayerInfoResponse));
  CMessageBoursePlayerListNotice_descriptor_ = file->message_type(22);
  static const int CMessageBoursePlayerListNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListNotice, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListNotice, buylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListNotice, selllist_),
  };
  CMessageBoursePlayerListNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBoursePlayerListNotice_descriptor_,
      CMessageBoursePlayerListNotice::default_instance_,
      CMessageBoursePlayerListNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBoursePlayerListNotice));
  CMessageBoursePlayerListGet_descriptor_ = file->message_type(23);
  static const int CMessageBoursePlayerListGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListGet, accountid_),
  };
  CMessageBoursePlayerListGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBoursePlayerListGet_descriptor_,
      CMessageBoursePlayerListGet::default_instance_,
      CMessageBoursePlayerListGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBoursePlayerListGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBoursePlayerListGet));
  CMessageBourseTrade_descriptor_ = file->message_type(24);
  static const int CMessageBourseTrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, buyprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, rating_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, worldid_),
  };
  CMessageBourseTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseTrade_descriptor_,
      CMessageBourseTrade::default_instance_,
      CMessageBourseTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseTrade));
  CMessageS2DBourseDecBuyDoc_descriptor_ = file->message_type(25);
  static const int CMessageS2DBourseDecBuyDoc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecBuyDoc, doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecBuyDoc, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecBuyDoc, roleid_),
  };
  CMessageS2DBourseDecBuyDoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2DBourseDecBuyDoc_descriptor_,
      CMessageS2DBourseDecBuyDoc::default_instance_,
      CMessageS2DBourseDecBuyDoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecBuyDoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecBuyDoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2DBourseDecBuyDoc));
  CMessageS2DBourseDecSellDoc_descriptor_ = file->message_type(26);
  static const int CMessageS2DBourseDecSellDoc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecSellDoc, doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecSellDoc, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecSellDoc, roleid_),
  };
  CMessageS2DBourseDecSellDoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageS2DBourseDecSellDoc_descriptor_,
      CMessageS2DBourseDecSellDoc::default_instance_,
      CMessageS2DBourseDecSellDoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecSellDoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageS2DBourseDecSellDoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageS2DBourseDecSellDoc));
  CMessageBourseLogQuery_descriptor_ = file->message_type(27);
  static const int CMessageBourseLogQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseLogQuery, accountid_),
  };
  CMessageBourseLogQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageBourseLogQuery_descriptor_,
      CMessageBourseLogQuery::default_instance_,
      CMessageBourseLogQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseLogQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageBourseLogQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageBourseLogQuery));
  CMessageD2SBourseLog_descriptor_ = file->message_type(28);
  static const int CMessageD2SBourseLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageD2SBourseLog, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageD2SBourseLog, buy_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageD2SBourseLog, sell_log_),
  };
  CMessageD2SBourseLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageD2SBourseLog_descriptor_,
      CMessageD2SBourseLog::default_instance_,
      CMessageD2SBourseLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageD2SBourseLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageD2SBourseLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageD2SBourseLog));
  DB_MSG_ID_descriptor_ = file->enum_type(0);
  SQLTYPE_descriptor_ = file->enum_type(1);
  emPackageIdx_descriptor_ = file->enum_type(2);
  emReSaveFlag_descriptor_ = file->enum_type(3);
  UpdateType_descriptor_ = file->enum_type(4);
  MatrixSubType_descriptor_ = file->enum_type(5);
  MatrixParam_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fmsg_5fpb_2ehxx);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExecuteSqlRequest_descriptor_, &CMessageExecuteSqlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageExecuteSqlResponse3_descriptor_, &CMessageExecuteSqlResponse3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerItemInfoRequest_descriptor_, &CMessageLoadPlayerItemInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerItemInfoResponse_descriptor_, &CMessageLoadPlayerItemInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSavePlayerItemInfoRequest_descriptor_, &CMessageSavePlayerItemInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSavePlayerItemInfoResponse_descriptor_, &CMessageSavePlayerItemInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessagePlayerProperty_descriptor_, &CMessagePlayerProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSavePlayerRequest_descriptor_, &CMessageSavePlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerInfoRequest_descriptor_, &CMessageLoadPlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerInfoResponse_descriptor_, &CMessageLoadPlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageSavePlayerResponse_descriptor_, &CMessageSavePlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerPropertyRequest_descriptor_, &CMessageLoadPlayerPropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoadPlayerPropertyResponse_descriptor_, &CMessageLoadPlayerPropertyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdatePlayerInfoRequest_descriptor_, &CMessageUpdatePlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageGetBourseInfo_descriptor_, &CMessageGetBourseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseInfoNotice_descriptor_, &CMessageBourseInfoNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseAddDoc_descriptor_, &CMessageBourseAddDoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseS2DIncAccount_descriptor_, &CMessageBourseS2DIncAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseS2DDecAccount_descriptor_, &CMessageBourseS2DDecAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseS2DGetAccount_descriptor_, &CMessageBourseS2DGetAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseD2SAccountNotice_descriptor_, &CMessageBourseD2SAccountNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageUpdatePlayerInfoResponse_descriptor_, &CMessageUpdatePlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBoursePlayerListNotice_descriptor_, &CMessageBoursePlayerListNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBoursePlayerListGet_descriptor_, &CMessageBoursePlayerListGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseTrade_descriptor_, &CMessageBourseTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2DBourseDecBuyDoc_descriptor_, &CMessageS2DBourseDecBuyDoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageS2DBourseDecSellDoc_descriptor_, &CMessageS2DBourseDecSellDoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageBourseLogQuery_descriptor_, &CMessageBourseLogQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageD2SBourseLog_descriptor_, &CMessageD2SBourseLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fmsg_5fpb_2ehxx() {
  delete CMessageExecuteSqlRequest::default_instance_;
  delete CMessageExecuteSqlRequest_reflection_;
  delete CMessageExecuteSqlResponse3::default_instance_;
  delete CMessageExecuteSqlResponse3_reflection_;
  delete CMessageLoadPlayerItemInfoRequest::default_instance_;
  delete CMessageLoadPlayerItemInfoRequest_reflection_;
  delete CMessageLoadPlayerItemInfoResponse::default_instance_;
  delete CMessageLoadPlayerItemInfoResponse_reflection_;
  delete CMessageSavePlayerItemInfoRequest::default_instance_;
  delete CMessageSavePlayerItemInfoRequest_reflection_;
  delete CMessageSavePlayerItemInfoResponse::default_instance_;
  delete CMessageSavePlayerItemInfoResponse_reflection_;
  delete CMessagePlayerProperty::default_instance_;
  delete CMessagePlayerProperty_reflection_;
  delete CMessageSavePlayerRequest::default_instance_;
  delete CMessageSavePlayerRequest_reflection_;
  delete CMessageLoadPlayerInfoRequest::default_instance_;
  delete CMessageLoadPlayerInfoRequest_reflection_;
  delete CMessageLoadPlayerInfoResponse::default_instance_;
  delete CMessageLoadPlayerInfoResponse_reflection_;
  delete CMessageSavePlayerResponse::default_instance_;
  delete CMessageSavePlayerResponse_reflection_;
  delete CMessageLoadPlayerPropertyRequest::default_instance_;
  delete CMessageLoadPlayerPropertyRequest_reflection_;
  delete CMessageLoadPlayerPropertyResponse::default_instance_;
  delete CMessageLoadPlayerPropertyResponse_reflection_;
  delete CMessageUpdatePlayerInfoRequest::default_instance_;
  delete CMessageUpdatePlayerInfoRequest_reflection_;
  delete CMessageGetBourseInfo::default_instance_;
  delete CMessageGetBourseInfo_reflection_;
  delete CMessageBourseInfoNotice::default_instance_;
  delete CMessageBourseInfoNotice_reflection_;
  delete CMessageBourseAddDoc::default_instance_;
  delete CMessageBourseAddDoc_reflection_;
  delete CMessageBourseS2DIncAccount::default_instance_;
  delete CMessageBourseS2DIncAccount_reflection_;
  delete CMessageBourseS2DDecAccount::default_instance_;
  delete CMessageBourseS2DDecAccount_reflection_;
  delete CMessageBourseS2DGetAccount::default_instance_;
  delete CMessageBourseS2DGetAccount_reflection_;
  delete CMessageBourseD2SAccountNotice::default_instance_;
  delete CMessageBourseD2SAccountNotice_reflection_;
  delete CMessageUpdatePlayerInfoResponse::default_instance_;
  delete CMessageUpdatePlayerInfoResponse_reflection_;
  delete CMessageBoursePlayerListNotice::default_instance_;
  delete CMessageBoursePlayerListNotice_reflection_;
  delete CMessageBoursePlayerListGet::default_instance_;
  delete CMessageBoursePlayerListGet_reflection_;
  delete CMessageBourseTrade::default_instance_;
  delete CMessageBourseTrade_reflection_;
  delete CMessageS2DBourseDecBuyDoc::default_instance_;
  delete CMessageS2DBourseDecBuyDoc_reflection_;
  delete CMessageS2DBourseDecSellDoc::default_instance_;
  delete CMessageS2DBourseDecSellDoc_reflection_;
  delete CMessageBourseLogQuery::default_instance_;
  delete CMessageBourseLogQuery_reflection_;
  delete CMessageD2SBourseLog::default_instance_;
  delete CMessageD2SBourseLog_reflection_;
}

void protobuf_AddDesc_db_5fmsg_5fpb_2ehxx() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_property_5fpb_2ehxx();
  ::protobuf_AddDesc_boursemessage_5fpb_2ehxx();
  #ifndef _NO_PROTOBUF_STR_
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdb_msg_pb.hxx\032\017property_pb.hxx\032\024bourse"
    "message_pb.hxx\"\277\001\n\031CMessageExecuteSqlReq"
    "uest\022\021\n\tSessionID\030\001 \001(\r\022\013\n\003SQL\030\002 \001(\t\022\017\n\007"
    "BufSize\030\003 \001(\r\022\016\n\006Buffer\030\004 \001(\014\022\020\n\010Callbac"
    "k\030\005 \001(\r\022\027\n\017LatestAutoIncID\030\006 \001(\r\022!\n\007SqlT"
    "ype\030\007 \001(\0162\010.SQLTYPE:\006SELECT\022\023\n\013SessionTy"
    "pe\030\010 \001(\r\"\330\001\n\033CMessageExecuteSqlResponse3"
    "\022\021\n\tSessionID\030\001 \001(\r\022\022\n\nResultCode\030\002 \001(\r\022"
    "\023\n\010RowCount\030\003 \001(\r:\0010\022\023\n\010ColCount\030\004 \001(\r:\001"
    "0\022\021\n\tFieldName\030\005 \003(\t\022\021\n\tFieldType\030\006 \003(\r\022"
    "\022\n\nFieldValue\030\007 \003(\014\022\025\n\rFieldValueLen\030\010 \003"
    "(\r\022\027\n\017LatestAutoIncID\030\t \001(\r\"m\n!CMessageL"
    "oadPlayerItemInfoRequest\022\021\n\tAccountID\030\001 "
    "\001(\r\022\016\n\006CharID\030\002 \001(\r\022\022\n\nPackageIdx\030\003 \003(\r\022"
    "\021\n\tSessionID\030\004 \001(\r\"\204\002\n\"CMessageLoadPlaye"
    "rItemInfoResponse\022\017\n\007ErrCode\030\001 \001(\005\022\021\n\tAc"
    "countID\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\021\n\tSession"
    "ID\030\004 \001(\r\022\022\n\nPackageIdx\030\005 \003(\r\022\033\n\007ItemBox\030"
    "\006 \003(\0132\n.PBItemBox\"f\n\013emErrorCode\022\n\n\006SUCC"
    "ES\020\000\022\027\n\nSQL_FAILED\020\377\377\377\377\377\377\377\377\377\001\022\031\n\014RECORD_"
    "EMPTY\020\376\377\377\377\377\377\377\377\377\001\022\027\n\nDATA_CRASH\020\375\377\377\377\377\377\377\377\377"
    "\001\"\212\001\n!CMessageSavePlayerItemInfoRequest\022"
    "\021\n\tAccountID\030\001 \001(\r\022\016\n\006CharID\030\002 \001(\r\022\022\n\nPa"
    "ckageIdx\030\003 \003(\r\022\021\n\tSessionID\030\004 \001(\r\022\033\n\007Ite"
    "mBox\030\006 \003(\0132\n.PBItemBox\"\213\002\n\"CMessageSaveP"
    "layerItemInfoResponse\022\017\n\007ErrCode\030\001 \001(\005\022\021"
    "\n\tAccountID\030\002 \001(\r\022\016\n\006CharID\030\003 \001(\r\022\022\n\nPac"
    "kageIdx\030\004 \003(\r\022\021\n\tSessionID\030\005 \001(\r\"\211\001\n\013emE"
    "rrorCode\022\n\n\006SUCCES\020\000\022\027\n\nSQL_FAILED\020\377\377\377\377\377"
    "\377\377\377\377\001\022\034\n\017SERALIZE_FAILED\020\376\377\377\377\377\377\377\377\377\001\022\032\n\rF"
    "ILTER_FAILED\020\375\377\377\377\377\377\377\377\377\001\022\033\n\016INVALID_PKGID"
    "X\020\374\377\377\377\377\377\377\377\377\001\"\236\010\n\026CMessagePlayerProperty\022"
    "\017\n\007role_hp\030\001 \001(\r\022\017\n\007role_mp\030\002 \001(\r\022\017\n\007rol"
    "e_ap\030\003 \001(\r\022&\n\nrole_basic\030\004 \001(\0132\022.PBPlaye"
    "rBasicInfo\022 \n\nrole_skill\030\005 \001(\0132\014.PBSkill"
    "List\022\036\n\trole_buff\030\006 \001(\0132\013.PBBuffList\022*\n\014"
    "role_cdgroup\030\007 \001(\0132\024.PBPlayerCDGroupInfo"
    "\022\"\n\010role_pvp\030\010 \001(\0132\020.PBPlayerPVPInfo\022&\n\n"
    "role_title\030\t \001(\0132\022.PBPlayerTitleInfo\022,\n\r"
    "role_activity\030\n \001(\0132\025.PBPlayerActivityIn"
    "fo\022(\n\013role_talent\030\013 \001(\0132\023.PBPlayerTalent"
    "Info\022 \n\007role_mw\030\014 \001(\0132\017.PBPlayerMWInfo\022\'"
    "\n\016role_lifeskill\030\r \001(\0132\017.PBLifeSkillBox\022"
    ".\n\016role_statistic\030\016 \001(\0132\026.PBPlayerStatis"
    "ticInfo\0221\n\023role_monster_record\030\017 \001(\0132\024.P"
    "BMonsterRecordInfo\022%\n\rrole_tele_pos\030\020 \001("
    "\0132\016.PBTelePosInfo\022\036\n\013role_wizard\030\021 \001(\0132\t"
    ".PBWizard\022(\n\013role_client\030\022 \001(\0132\023.PBPlaye"
    "rClientInfo\022\024\n\014save_bitflag\030\023 \001(\r\022\036\n\013rol"
    "e_friend\030\024 \001(\0132\t.PBFriend\022\"\n\rrole_repeti"
    "on\030\025 \001(\0132\013.PBRepetion\022\036\n\trole_task\030\026 \001(\013"
    "2\013.PBTaskList\022\"\n\013role_matrix\030\027 \001(\0132\r.PBM"
    "atrixInfo\022\034\n\nrole_charm\030\030 \001(\0132\010.PBCharm\022"
    " \n\nrole_guide\030\031 \001(\0132\014.PBGuideData\022\034\n\nrol"
    "e_times\030\032 \001(\0132\010.PBTimes\022(\n\020role_exptimei"
    "nfo\030\033 \001(\0132\016.PBExpTimeInfo\022*\n\021role_treasu"
    "rebowl\030\034 \001(\0132\017.PBTreasureBowl\022&\n\017role_sp"
    "iritinfo\030\035 \001(\0132\r.PBSpiritInfo\"\260\001\n\031CMessa"
    "geSavePlayerRequest\022\016\n\006RoleID\030\001 \001(\r\022!\n\004I"
    "nfo\030\002 \001(\0132\023.CMessagePlayerInfo\022)\n\010Proper"
    "ty\030\003 \001(\0132\027.CMessagePlayerProperty\022\021\n\tSes"
    "sionID\030\004 \001(\r\022\020\n\010DetailID\030\005 \001(\r\022\020\n\010CallBa"
    "ck\030\006 \001(\r\"B\n\035CMessageLoadPlayerInfoReques"
    "t\022\016\n\006RoleID\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r\"z\n\036"
    "CMessageLoadPlayerInfoResponse\022\016\n\006RoleID"
    "\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r\022!\n\004Info\030\003 \001(\0132"
    "\023.CMessagePlayerInfo\022\022\n\nResultCode\030\004 \001(\r"
    "\"S\n\032CMessageSavePlayerResponse\022\016\n\006RoleID"
    "\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r\022\022\n\nResultCode\030"
    "\003 \001(\r\"X\n!CMessageLoadPlayerPropertyReque"
    "st\022\016\n\006RoleID\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r\022\020\n"
    "\010DetailID\030\004 \001(\r\"\206\001\n\"CMessageLoadPlayerPr"
    "opertyResponse\022\016\n\006RoleID\030\001 \001(\r\022\021\n\tSessio"
    "nID\030\002 \001(\r\022)\n\010Property\030\003 \001(\0132\027.CMessagePl"
    "ayerProperty\022\022\n\nResultCode\030\004 \001(\r\"\252\001\n\037CMe"
    "ssageUpdatePlayerInfoRequest\022\016\n\006RoleID\030\001"
    " \001(\r\022\021\n\tSessionID\030\002 \001(\r\022\022\n\nUpdateType\030\003 "
    "\001(\r\022\016\n\006Param1\030\004 \001(\r\022\016\n\006Param2\030\005 \001(\r\022\r\n\005V"
    "alue\030\006 \001(\r\022\020\n\010DetailID\030\007 \001(\r\022\017\n\007SubType\030"
    "\010 \001(\r\"=\n\025CMessageGetBourseInfo\022\021\n\tSessio"
    "nID\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\"z\n\030CMessage"
    "BourseInfoNotice\022\021\n\tSessionID\030\001 \001(\r\022$\n\007B"
    "uyList\030\002 \001(\0132\023.PBBourseDetailList\022%\n\010Sel"
    "lList\030\003 \001(\0132\023.PBBourseDetailList\"\331\001\n\024CMe"
    "ssageBourseAddDoc\022\021\n\tSessionID\030\001 \001(\r\022\021\n\t"
    "AccountID\030\002 \001(\r\022\037\n\006Detail\030\003 \001(\0132\017.PBBour"
    "seDetail\022\014\n\004Type\030\004 \001(\r\022\013\n\003Tax\030\005 \001(\r\022\016\n\006R"
    "oleID\030\006 \001(\r\022\r\n\005Level\030\007 \001(\r\022\017\n\007WorldID\030\010 "
    "\001(\r\022\020\n\010ServerID\030\t \001(\r\022\r\n\005TaxID\030\n \001(\r\022\016\n\006"
    "GameID\030\013 \001(\r\"n\n\033CMessageBourseS2DIncAcco"
    "unt\022\021\n\tSessionID\030\001 \001(\r\022\r\n\005Money\030\002 \001(\r\022\n\n"
    "\002Yb\030\003 \001(\r\022\021\n\tAccountID\030\004 \001(\r\022\016\n\006RoleID\030\005"
    " \001(\r\"n\n\033CMessageBourseS2DDecAccount\022\021\n\tS"
    "essionID\030\001 \001(\r\022\r\n\005Money\030\002 \001(\r\022\n\n\002Yb\030\003 \001("
    "\r\022\021\n\tAccountID\030\004 \001(\r\022\016\n\006RoleID\030\005 \001(\r\"Q\n\033"
    "CMessageBourseS2DGetAccount\022\021\n\tSessionID"
    "\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\014\n\004Code\030\003 \001(\r\""
    "\241\001\n\036CMessageBourseD2SAccountNotice\022\021\n\tSe"
    "ssionID\030\001 \001(\r\022\r\n\005Money\030\002 \001(\r\022\n\n\002Yb\030\003 \001(\r"
    "\022\021\n\tAccountID\030\004 \001(\r\022\014\n\004Code\030\005 \001(\r\022\016\n\006Res"
    "ult\030\006 \001(\r\022\017\n\007Parame1\030\007 \001(\r\022\017\n\007Parame2\030\010 "
    "\001(\r\"Y\n CMessageUpdatePlayerInfoResponse\022"
    "\016\n\006RoleID\030\001 \001(\r\022\021\n\tSessionID\030\002 \001(\r\022\022\n\nRe"
    "sultCode\030\003 \001(\r\"\200\001\n\036CMessageBoursePlayerL"
    "istNotice\022\021\n\tAccountID\030\001 \001(\r\022$\n\007BuyList\030"
    "\002 \001(\0132\023.PBBourseDetailList\022%\n\010SellList\030\003"
    " \001(\0132\023.PBBourseDetailList\"0\n\033CMessageBou"
    "rsePlayerListGet\022\021\n\tAccountID\030\001 \001(\r\"^\n\023C"
    "MessageBourseTrade\022\020\n\010BuyPrice\030\001 \001(\r\022\021\n\t"
    "SellPrice\030\002 \001(\r\022\021\n\tRating_id\030\003 \001(\r\022\017\n\007Wo"
    "rldid\030\004 \001(\r\"L\n\032CMessageS2DBourseDecBuyDo"
    "c\022\013\n\003Doc\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\016\n\006Rol"
    "eID\030\003 \001(\r\"M\n\033CMessageS2DBourseDecSellDoc"
    "\022\013\n\003Doc\030\001 \001(\r\022\021\n\tAccountID\030\002 \001(\r\022\016\n\006Role"
    "ID\030\003 \001(\r\"+\n\026CMessageBourseLogQuery\022\021\n\tAc"
    "countID\030\001 \001(\r\"v\n\024CMessageD2SBourseLog\022\021\n"
    "\tAccountID\030\001 \001(\r\022$\n\007buy_log\030\002 \001(\0132\023.PBBo"
    "urseDetailList\022%\n\010sell_log\030\003 \001(\0132\023.PBBou"
    "rseDetailList*\303\007\n\tDB_MSG_ID\022\037\n\031ID_S2S_EX"
    "ECUTESQL_REQUEST\020\376\203\002\022 \n\032ID_S2S_EXECUTESQ"
    "L_RESPONSE\020\377\203\002\022\'\n!ID_S2D_LOADPLAYERITEMI"
    "NFO_REQUEST\020\202\370\001\022(\n\"ID_D2S_LOADPLAYERITEM"
    "INFO_RESPONSE\020\203\370\001\022\'\n!ID_S2D_SAVEPLAYERIT"
    "EMINFO_REQUEST\020\204\370\001\022(\n\"ID_D2S_SAVEPLAYERI"
    "TEMINFO_RESPONSE\020\205\370\001\022#\n\035ID_S2D_LOADPLAYE"
    "RINFO_REQUEST\020\206\370\001\022$\n\036ID_D2S_LOADPLAYERIN"
    "FO_RESPONSE\020\207\370\001\022\037\n\031ID_S2D_SAVEPLAYER_REQ"
    "UEST\020\210\370\001\022 \n\032ID_D2S_SAVEPLAYER_RESPONSE\020\211"
    "\370\001\022\'\n!ID_S2D_LOADPLAYERPROPERTY_REQUEST\020"
    "\212\370\001\022(\n\"ID_D2S_LOADPLAYERPROPERTY_RESPONS"
    "E\020\213\370\001\022%\n\037ID_S2D_UPDATEPLAYERINFO_REQUEST"
    "\020\216\370\001\022&\n ID_D2S_UPDATEPLAYERINFO_RESPONSE"
    "\020\220\370\001\022\033\n\025ID_G2D_GETBOURSE_INFO\020\221\370\001\022\037\n\031ID_"
    "S2D_BOURSE_INC_ACCOUNT\020\223\370\001\022\037\n\031ID_S2D_BOU"
    "RSE_DEC_ACCOUNT\020\224\370\001\022\037\n\031ID_S2D_BOURSE_GET"
    "_ACCOUNT\020\225\370\001\022\"\n\034ID_D2S_BOURSE_ACCOUNT_NO"
    "TICE\020\226\370\001\022\033\n\025ID_S2D_BOURSE_ADD_DOC\020\227\370\001\022#\n"
    "\035ID_S2D_BOURSE_PLAYER_LIST_GET\020\230\370\001\022!\n\033ID"
    "_D2S_BOURSE_PLAYER_NOTICE\020\231\370\001\022\031\n\023ID_G2D_"
    "BOURSE_TRADE\020\232\370\001\022\037\n\031ID_S2D_BOURSE_DEC_BU"
    "Y_DOC\020\233\370\001\022 \n\032ID_S2D_BOURSE_DEC_SELL_DOC\020"
    "\234\370\001\022\035\n\027ID_S2D_BOURSE_LOG_QUERY\020\235\370\001\022\027\n\021ID"
    "_D2S_BOURSE_LOG\020\236\370\001*9\n\007SQLTYPE\022\n\n\006SELECT"
    "\020\001\022\n\n\006INSERT\020\002\022\n\n\006UPDATE\020\003\022\n\n\006DELETE\020\004*a"
    "\n\014emPackageIdx\022\025\n\021PACKAGE_EQUIPMENT\020\000\022\023\n"
    "\017PACKAGE_BAGGAGE\020\001\022\023\n\017PACKAGE_STORAGE\020\002\022"
    "\020\n\014PACKAGE_TASK\020\003*\314\001\n\014emReSaveFlag\022\032\n\026SA"
    "VE_PACKAGE_EQUIPMENT\020\000\022\030\n\024SAVE_PACKAGE_B"
    "AGGAGE\020\001\022\030\n\024SAVE_PACKAGE_STORAGE\020\002\022\025\n\021SA"
    "VE_PACKAGE_TASK\020\003\022\024\n\020SAVE_PLAYER_INFO\020\004\022"
    "\023\n\017SAVE_PLAYER_PRO\020\005\022\021\n\rSAVE_ITEM_NUM\020\006\022"
    "\027\n\023SAVE_ITEM_FULL_FLAG\020?*\306\002\n\nUpdateType\022"
    "\r\n\tBasicInfo\020\001\022\r\n\tSkillList\020\002\022\014\n\010BuffLis"
    "t\020\003\022\013\n\007CDGroup\020\004\022\013\n\007PVPInfo\020\005\022\r\n\tTitleIn"
    "fo\020\006\022\020\n\014ActivityInfo\020\007\022\016\n\nTalentInfo\020\010\022\n"
    "\n\006MWInfo\020\t\022\r\n\tLifeSkill\020\n\022\017\n\013StasticInfo"
    "\020\013\022\017\n\013MonsterInfo\020\014\022\017\n\013TelePosInfo\020\r\022\n\n\006"
    "Wizard\020\016\022\016\n\nClientInfo\020\017\022\n\n\006Friend\020\020\022\014\n\010"
    "Repetion\020\021\022\014\n\010TaskList\020\022\022\016\n\nMatrixInfo\020\023"
    "\022\t\n\005Charm\020\024\022\t\n\005Guide\020\025\022\t\n\005Times\020\026*f\n\rMat"
    "rixSubType\022\020\n\014RemoveMaster\020\001\022\017\n\013RemoveSl"
    "ave\020\002\022\022\n\016AddMasterPoint\020\003\022\017\n\013AddSlaveNum"
    "\020\004\022\r\n\tAddFormal\020\005*>\n\013MatrixParam\022\017\n\013Begi"
    "nnerNum\020\001\022\r\n\tFormalNum\020\002\022\017\n\013EducatedNum\020"
    "\003B\002H\001", 6565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_msg_pb.hxx", &protobuf_RegisterTypes);
  #endif
  CMessageExecuteSqlRequest::default_instance_ = new CMessageExecuteSqlRequest();
  CMessageExecuteSqlResponse3::default_instance_ = new CMessageExecuteSqlResponse3();
  CMessageLoadPlayerItemInfoRequest::default_instance_ = new CMessageLoadPlayerItemInfoRequest();
  CMessageLoadPlayerItemInfoResponse::default_instance_ = new CMessageLoadPlayerItemInfoResponse();
  CMessageSavePlayerItemInfoRequest::default_instance_ = new CMessageSavePlayerItemInfoRequest();
  CMessageSavePlayerItemInfoResponse::default_instance_ = new CMessageSavePlayerItemInfoResponse();
  CMessagePlayerProperty::default_instance_ = new CMessagePlayerProperty();
  CMessageSavePlayerRequest::default_instance_ = new CMessageSavePlayerRequest();
  CMessageLoadPlayerInfoRequest::default_instance_ = new CMessageLoadPlayerInfoRequest();
  CMessageLoadPlayerInfoResponse::default_instance_ = new CMessageLoadPlayerInfoResponse();
  CMessageSavePlayerResponse::default_instance_ = new CMessageSavePlayerResponse();
  CMessageLoadPlayerPropertyRequest::default_instance_ = new CMessageLoadPlayerPropertyRequest();
  CMessageLoadPlayerPropertyResponse::default_instance_ = new CMessageLoadPlayerPropertyResponse();
  CMessageUpdatePlayerInfoRequest::default_instance_ = new CMessageUpdatePlayerInfoRequest();
  CMessageGetBourseInfo::default_instance_ = new CMessageGetBourseInfo();
  CMessageBourseInfoNotice::default_instance_ = new CMessageBourseInfoNotice();
  CMessageBourseAddDoc::default_instance_ = new CMessageBourseAddDoc();
  CMessageBourseS2DIncAccount::default_instance_ = new CMessageBourseS2DIncAccount();
  CMessageBourseS2DDecAccount::default_instance_ = new CMessageBourseS2DDecAccount();
  CMessageBourseS2DGetAccount::default_instance_ = new CMessageBourseS2DGetAccount();
  CMessageBourseD2SAccountNotice::default_instance_ = new CMessageBourseD2SAccountNotice();
  CMessageUpdatePlayerInfoResponse::default_instance_ = new CMessageUpdatePlayerInfoResponse();
  CMessageBoursePlayerListNotice::default_instance_ = new CMessageBoursePlayerListNotice();
  CMessageBoursePlayerListGet::default_instance_ = new CMessageBoursePlayerListGet();
  CMessageBourseTrade::default_instance_ = new CMessageBourseTrade();
  CMessageS2DBourseDecBuyDoc::default_instance_ = new CMessageS2DBourseDecBuyDoc();
  CMessageS2DBourseDecSellDoc::default_instance_ = new CMessageS2DBourseDecSellDoc();
  CMessageBourseLogQuery::default_instance_ = new CMessageBourseLogQuery();
  CMessageD2SBourseLog::default_instance_ = new CMessageD2SBourseLog();
  CMessageExecuteSqlRequest::default_instance_->InitAsDefaultInstance();
  CMessageExecuteSqlResponse3::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerItemInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerItemInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageSavePlayerItemInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageSavePlayerItemInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessagePlayerProperty::default_instance_->InitAsDefaultInstance();
  CMessageSavePlayerRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageSavePlayerResponse::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerPropertyRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoadPlayerPropertyResponse::default_instance_->InitAsDefaultInstance();
  CMessageUpdatePlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageGetBourseInfo::default_instance_->InitAsDefaultInstance();
  CMessageBourseInfoNotice::default_instance_->InitAsDefaultInstance();
  CMessageBourseAddDoc::default_instance_->InitAsDefaultInstance();
  CMessageBourseS2DIncAccount::default_instance_->InitAsDefaultInstance();
  CMessageBourseS2DDecAccount::default_instance_->InitAsDefaultInstance();
  CMessageBourseS2DGetAccount::default_instance_->InitAsDefaultInstance();
  CMessageBourseD2SAccountNotice::default_instance_->InitAsDefaultInstance();
  CMessageUpdatePlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageBoursePlayerListNotice::default_instance_->InitAsDefaultInstance();
  CMessageBoursePlayerListGet::default_instance_->InitAsDefaultInstance();
  CMessageBourseTrade::default_instance_->InitAsDefaultInstance();
  CMessageS2DBourseDecBuyDoc::default_instance_->InitAsDefaultInstance();
  CMessageS2DBourseDecSellDoc::default_instance_->InitAsDefaultInstance();
  CMessageBourseLogQuery::default_instance_->InitAsDefaultInstance();
  CMessageD2SBourseLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fmsg_5fpb_2ehxx);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fmsg_5fpb_2ehxx {
  StaticDescriptorInitializer_db_5fmsg_5fpb_2ehxx() {
    protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();
  }
} static_descriptor_initializer_db_5fmsg_5fpb_2ehxx_;

const ::google::protobuf::EnumDescriptor* DB_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_MSG_ID_descriptor_;
}
bool DB_MSG_ID_IsValid(int value) {
  switch(value) {
    case 31746:
    case 31747:
    case 31748:
    case 31749:
    case 31750:
    case 31751:
    case 31752:
    case 31753:
    case 31754:
    case 31755:
    case 31758:
    case 31760:
    case 31761:
    case 31763:
    case 31764:
    case 31765:
    case 31766:
    case 31767:
    case 31768:
    case 31769:
    case 31770:
    case 31771:
    case 31772:
    case 31773:
    case 31774:
    case 33278:
    case 33279:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SQLTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SQLTYPE_descriptor_;
}
bool SQLTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* emPackageIdx_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPackageIdx_descriptor_;
}
bool emPackageIdx_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* emReSaveFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emReSaveFlag_descriptor_;
}
bool emReSaveFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 63:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UpdateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateType_descriptor_;
}
bool UpdateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatrixSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixSubType_descriptor_;
}
bool MatrixSubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatrixParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixParam_descriptor_;
}
bool MatrixParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string CMessageExecuteSqlRequest::_default_sql_;
const ::std::string CMessageExecuteSqlRequest::_default_buffer_;
#ifndef _MSC_VER
const int CMessageExecuteSqlRequest::kSessionIDFieldNumber;
const int CMessageExecuteSqlRequest::kSQLFieldNumber;
const int CMessageExecuteSqlRequest::kBufSizeFieldNumber;
const int CMessageExecuteSqlRequest::kBufferFieldNumber;
const int CMessageExecuteSqlRequest::kCallbackFieldNumber;
const int CMessageExecuteSqlRequest::kLatestAutoIncIDFieldNumber;
const int CMessageExecuteSqlRequest::kSqlTypeFieldNumber;
const int CMessageExecuteSqlRequest::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

CMessageExecuteSqlRequest::CMessageExecuteSqlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExecuteSqlRequest::InitAsDefaultInstance() {}

CMessageExecuteSqlRequest::CMessageExecuteSqlRequest(const CMessageExecuteSqlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExecuteSqlRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  sql_ = const_cast< ::std::string*>(&_default_sql_);
  bufsize_ = 0u;
  buffer_ = const_cast< ::std::string*>(&_default_buffer_);
  callback_ = 0u;
  latestautoincid_ = 0u;
  sqltype_ = 1;
  sessiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExecuteSqlRequest::~CMessageExecuteSqlRequest() {
  SharedDtor();
}

void CMessageExecuteSqlRequest::SharedDtor() {
  if (sql_ != &_default_sql_) {
    delete sql_;
  }
  if (buffer_ != &_default_buffer_) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExecuteSqlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecuteSqlRequest_descriptor_;
}

const CMessageExecuteSqlRequest& CMessageExecuteSqlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageExecuteSqlRequest* CMessageExecuteSqlRequest::default_instance_ = NULL;

CMessageExecuteSqlRequest* CMessageExecuteSqlRequest::New() const {
  return new CMessageExecuteSqlRequest;
}

void CMessageExecuteSqlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    if (_has_bit(1)) {
      if (sql_ != &_default_sql_) {
        sql_->clear();
      }
    }
    bufsize_ = 0u;
    if (_has_bit(3)) {
      if (buffer_ != &_default_buffer_) {
        buffer_->clear();
      }
    }
    callback_ = 0u;
    latestautoincid_ = 0u;
    sqltype_ = 1;
    sessiontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExecuteSqlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_SQL;
        break;
      }
      
      // optional string SQL = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SQL:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_sql()));
        if (input->ExpectTag(24)) goto parse_BufSize;
        break;
      }
      
      // optional uint32 BufSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_BufSize:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &bufsize_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_Buffer;
        break;
      }
      
      // optional bytes Buffer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Buffer:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_buffer()));
        if (input->ExpectTag(40)) goto parse_Callback;
        break;
      }
      
      // optional uint32 Callback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Callback:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &callback_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_LatestAutoIncID;
        break;
      }
      
      // optional uint32 LatestAutoIncID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LatestAutoIncID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &latestautoincid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_SqlType;
        break;
      }
      
      // optional .SQLTYPE SqlType = 7 [default = SELECT];
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SqlType:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (SQLTYPE_IsValid(value)) {
          set_sqltype(static_cast< SQLTYPE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_SessionType;
        break;
      }
      
      // optional uint32 SessionType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessiontype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExecuteSqlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExecuteSqlRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional string SQL = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->sql(), output);
  }
  
  // optional uint32 BufSize = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->bufsize(), output);
  }
  
  // optional bytes Buffer = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->buffer(), output);
  }
  
  // optional uint32 Callback = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->callback(), output);
  }
  
  // optional uint32 LatestAutoIncID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->latestautoincid(), output);
  }
  
  // optional .SQLTYPE SqlType = 7 [default = SELECT];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(7, this->sqltype(), output);
  }
  
  // optional uint32 SessionType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->sessiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExecuteSqlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional string SQL = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->sql(), target);
  }
  
  // optional uint32 BufSize = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->bufsize(), target);
  }
  
  // optional bytes Buffer = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->buffer(), target);
  }
  
  // optional uint32 Callback = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->callback(), target);
  }
  
  // optional uint32 LatestAutoIncID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->latestautoincid(), target);
  }
  
  // optional .SQLTYPE SqlType = 7 [default = SELECT];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(7, this->sqltype(), target);
  }
  
  // optional uint32 SessionType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->sessiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExecuteSqlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional string SQL = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->sql());
    }
    
    // optional uint32 BufSize = 3;
    if (has_bufsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->bufsize());
    }
    
    // optional bytes Buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->buffer());
    }
    
    // optional uint32 Callback = 5;
    if (has_callback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->callback());
    }
    
    // optional uint32 LatestAutoIncID = 6;
    if (has_latestautoincid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->latestautoincid());
    }
    
    // optional .SQLTYPE SqlType = 7 [default = SELECT];
    if (has_sqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->sqltype());
    }
    
    // optional uint32 SessionType = 8;
    if (has_sessiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessiontype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExecuteSqlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExecuteSqlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExecuteSqlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExecuteSqlRequest::MergeFrom(const CMessageExecuteSqlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_sql(from.sql());
    }
    if (from._has_bit(2)) {
      set_bufsize(from.bufsize());
    }
    if (from._has_bit(3)) {
      set_buffer(from.buffer());
    }
    if (from._has_bit(4)) {
      set_callback(from.callback());
    }
    if (from._has_bit(5)) {
      set_latestautoincid(from.latestautoincid());
    }
    if (from._has_bit(6)) {
      set_sqltype(from.sqltype());
    }
    if (from._has_bit(7)) {
      set_sessiontype(from.sessiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExecuteSqlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecuteSqlRequest::CopyFrom(const CMessageExecuteSqlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecuteSqlRequest::Swap(CMessageExecuteSqlRequest* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(sql_, other->sql_);
    std::swap(bufsize_, other->bufsize_);
    std::swap(buffer_, other->buffer_);
    std::swap(callback_, other->callback_);
    std::swap(latestautoincid_, other->latestautoincid_);
    std::swap(sqltype_, other->sqltype_);
    std::swap(sessiontype_, other->sessiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExecuteSqlRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExecuteSqlRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExecuteSqlRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecuteSqlRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageExecuteSqlResponse3::kSessionIDFieldNumber;
const int CMessageExecuteSqlResponse3::kResultCodeFieldNumber;
const int CMessageExecuteSqlResponse3::kRowCountFieldNumber;
const int CMessageExecuteSqlResponse3::kColCountFieldNumber;
const int CMessageExecuteSqlResponse3::kFieldNameFieldNumber;
const int CMessageExecuteSqlResponse3::kFieldTypeFieldNumber;
const int CMessageExecuteSqlResponse3::kFieldValueFieldNumber;
const int CMessageExecuteSqlResponse3::kFieldValueLenFieldNumber;
const int CMessageExecuteSqlResponse3::kLatestAutoIncIDFieldNumber;
#endif  // !_MSC_VER

CMessageExecuteSqlResponse3::CMessageExecuteSqlResponse3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageExecuteSqlResponse3::InitAsDefaultInstance() {}

CMessageExecuteSqlResponse3::CMessageExecuteSqlResponse3(const CMessageExecuteSqlResponse3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageExecuteSqlResponse3::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  resultcode_ = 0u;
  rowcount_ = 0u;
  colcount_ = 0u;
  latestautoincid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageExecuteSqlResponse3::~CMessageExecuteSqlResponse3() {
  SharedDtor();
}

void CMessageExecuteSqlResponse3::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageExecuteSqlResponse3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecuteSqlResponse3_descriptor_;
}

const CMessageExecuteSqlResponse3& CMessageExecuteSqlResponse3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageExecuteSqlResponse3* CMessageExecuteSqlResponse3::default_instance_ = NULL;

CMessageExecuteSqlResponse3* CMessageExecuteSqlResponse3::New() const {
  return new CMessageExecuteSqlResponse3;
}

void CMessageExecuteSqlResponse3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    resultcode_ = 0u;
    rowcount_ = 0u;
    colcount_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    latestautoincid_ = 0u;
  }
  fieldname_.Clear();
  fieldtype_.Clear();
  fieldvalue_.Clear();
  fieldvaluelen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageExecuteSqlResponse3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RowCount;
        break;
      }
      
      // optional uint32 RowCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RowCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rowcount_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_ColCount;
        break;
      }
      
      // optional uint32 ColCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ColCount:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &colcount_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_FieldName;
        break;
      }
      
      // repeated string FieldName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FieldName:
        DO_(::google::protobuf::internal::WireFormat::ReadString(
             input, add_fieldname()));
        if (input->ExpectTag(42)) goto parse_FieldName;
        if (input->ExpectTag(48)) goto parse_FieldType;
        break;
      }
      
      // repeated uint32 FieldType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FieldType:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fieldtype(value);
        if (input->ExpectTag(48)) goto parse_FieldType;
        if (input->ExpectTag(58)) goto parse_FieldValue;
        break;
      }
      
      // repeated bytes FieldValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_FieldValue:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_fieldvalue()));
        if (input->ExpectTag(58)) goto parse_FieldValue;
        if (input->ExpectTag(64)) goto parse_FieldValueLen;
        break;
      }
      
      // repeated uint32 FieldValueLen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_FieldValueLen:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_fieldvaluelen(value);
        if (input->ExpectTag(64)) goto parse_FieldValueLen;
        if (input->ExpectTag(72)) goto parse_LatestAutoIncID;
        break;
      }
      
      // optional uint32 LatestAutoIncID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_LatestAutoIncID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &latestautoincid_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageExecuteSqlResponse3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageExecuteSqlResponse3::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->resultcode(), output);
  }
  
  // optional uint32 RowCount = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rowcount(), output);
  }
  
  // optional uint32 ColCount = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->colcount(), output);
  }
  
  // repeated string FieldName = 5;
  for (int i = 0; i < this->fieldname_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteString(5, this->fieldname(i), output);
  }
  
  // repeated uint32 FieldType = 6;
  for (int i = 0; i < this->fieldtype_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->fieldtype(i), output);
  }
  
  // repeated bytes FieldValue = 7;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->fieldvalue(i), output);
  }
  
  // repeated uint32 FieldValueLen = 8;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->fieldvaluelen(i), output);
  }
  
  // optional uint32 LatestAutoIncID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->latestautoincid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageExecuteSqlResponse3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 ResultCode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->resultcode(), target);
  }
  
  // optional uint32 RowCount = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rowcount(), target);
  }
  
  // optional uint32 ColCount = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->colcount(), target);
  }
  
  // repeated string FieldName = 5;
  for (int i = 0; i < this->fieldname_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(5, this->fieldname(i), target);
  }
  
  // repeated uint32 FieldType = 6;
  for (int i = 0; i < this->fieldtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->fieldtype(i), target);
  }
  
  // repeated bytes FieldValue = 7;
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->fieldvalue(i), target);
  }
  
  // repeated uint32 FieldValueLen = 8;
  for (int i = 0; i < this->fieldvaluelen_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->fieldvaluelen(i), target);
  }
  
  // optional uint32 LatestAutoIncID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->latestautoincid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageExecuteSqlResponse3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 ResultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
    // optional uint32 RowCount = 3 [default = 0];
    if (has_rowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rowcount());
    }
    
    // optional uint32 ColCount = 4 [default = 0];
    if (has_colcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->colcount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LatestAutoIncID = 9;
    if (has_latestautoincid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->latestautoincid());
    }
    
  }
  // repeated string FieldName = 5;
  total_size += 1 * this->fieldname_size();
  for (int i = 0; i < this->fieldname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::StringSize(
      this->fieldname(i));
  }
  
  // repeated uint32 FieldType = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->fieldtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fieldtype(i));
    }
    total_size += 1 * this->fieldtype_size() + data_size;
  }
  
  // repeated bytes FieldValue = 7;
  total_size += 1 * this->fieldvalue_size();
  for (int i = 0; i < this->fieldvalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->fieldvalue(i));
  }
  
  // repeated uint32 FieldValueLen = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->fieldvaluelen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->fieldvaluelen(i));
    }
    total_size += 1 * this->fieldvaluelen_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageExecuteSqlResponse3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageExecuteSqlResponse3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageExecuteSqlResponse3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageExecuteSqlResponse3::MergeFrom(const CMessageExecuteSqlResponse3& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldname_.MergeFrom(from.fieldname_);
  fieldtype_.MergeFrom(from.fieldtype_);
  fieldvalue_.MergeFrom(from.fieldvalue_);
  fieldvaluelen_.MergeFrom(from.fieldvaluelen_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_resultcode(from.resultcode());
    }
    if (from._has_bit(2)) {
      set_rowcount(from.rowcount());
    }
    if (from._has_bit(3)) {
      set_colcount(from.colcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_latestautoincid(from.latestautoincid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageExecuteSqlResponse3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecuteSqlResponse3::CopyFrom(const CMessageExecuteSqlResponse3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageExecuteSqlResponse3::Swap(CMessageExecuteSqlResponse3* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(rowcount_, other->rowcount_);
    std::swap(colcount_, other->colcount_);
    fieldname_.Swap(&other->fieldname_);
    fieldtype_.Swap(&other->fieldtype_);
    fieldvalue_.Swap(&other->fieldvalue_);
    fieldvaluelen_.Swap(&other->fieldvaluelen_);
    std::swap(latestautoincid_, other->latestautoincid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageExecuteSqlResponse3::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageExecuteSqlResponse3::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageExecuteSqlResponse3::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageExecuteSqlResponse3_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoadPlayerItemInfoRequest::kAccountIDFieldNumber;
const int CMessageLoadPlayerItemInfoRequest::kCharIDFieldNumber;
const int CMessageLoadPlayerItemInfoRequest::kPackageIdxFieldNumber;
const int CMessageLoadPlayerItemInfoRequest::kSessionIDFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerItemInfoRequest::CMessageLoadPlayerItemInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerItemInfoRequest::InitAsDefaultInstance() {}

CMessageLoadPlayerItemInfoRequest::CMessageLoadPlayerItemInfoRequest(const CMessageLoadPlayerItemInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerItemInfoRequest::~CMessageLoadPlayerItemInfoRequest() {
  SharedDtor();
}

void CMessageLoadPlayerItemInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerItemInfoRequest_descriptor_;
}

const CMessageLoadPlayerItemInfoRequest& CMessageLoadPlayerItemInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerItemInfoRequest* CMessageLoadPlayerItemInfoRequest::default_instance_ = NULL;

CMessageLoadPlayerItemInfoRequest* CMessageLoadPlayerItemInfoRequest::New() const {
  return new CMessageLoadPlayerItemInfoRequest;
}

void CMessageLoadPlayerItemInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    sessionid_ = 0u;
  }
  packageidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerItemInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PackageIdx;
        break;
      }
      
      // repeated uint32 PackageIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackageIdx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_packageidx(value);
        if (input->ExpectTag(24)) goto parse_PackageIdx;
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerItemInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerItemInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // repeated uint32 PackageIdx = 3;
  for (int i = 0; i < this->packageidx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->packageidx(i), output);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerItemInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // repeated uint32 PackageIdx = 3;
  for (int i = 0; i < this->packageidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->packageidx(i), target);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerItemInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
  }
  // repeated uint32 PackageIdx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->packageidx(i));
    }
    total_size += 1 * this->packageidx_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerItemInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerItemInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerItemInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerItemInfoRequest::MergeFrom(const CMessageLoadPlayerItemInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageidx_.MergeFrom(from.packageidx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerItemInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoRequest::CopyFrom(const CMessageLoadPlayerItemInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoRequest::Swap(CMessageLoadPlayerItemInfoRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    packageidx_.Swap(&other->packageidx_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerItemInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerItemInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerItemInfoRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageLoadPlayerItemInfoResponse_emErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerItemInfoResponse_emErrorCode_descriptor_;
}
bool CMessageLoadPlayerItemInfoResponse_emErrorCode_IsValid(int value) {
  switch(value) {
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::SUCCES;
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::SQL_FAILED;
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::RECORD_EMPTY;
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::DATA_CRASH;
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::emErrorCode_MIN;
const CMessageLoadPlayerItemInfoResponse_emErrorCode CMessageLoadPlayerItemInfoResponse::emErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageLoadPlayerItemInfoResponse::kErrCodeFieldNumber;
const int CMessageLoadPlayerItemInfoResponse::kAccountIDFieldNumber;
const int CMessageLoadPlayerItemInfoResponse::kCharIDFieldNumber;
const int CMessageLoadPlayerItemInfoResponse::kSessionIDFieldNumber;
const int CMessageLoadPlayerItemInfoResponse::kPackageIdxFieldNumber;
const int CMessageLoadPlayerItemInfoResponse::kItemBoxFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerItemInfoResponse::CMessageLoadPlayerItemInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerItemInfoResponse::InitAsDefaultInstance() {}

CMessageLoadPlayerItemInfoResponse::CMessageLoadPlayerItemInfoResponse(const CMessageLoadPlayerItemInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerItemInfoResponse::~CMessageLoadPlayerItemInfoResponse() {
  SharedDtor();
}

void CMessageLoadPlayerItemInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerItemInfoResponse_descriptor_;
}

const CMessageLoadPlayerItemInfoResponse& CMessageLoadPlayerItemInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerItemInfoResponse* CMessageLoadPlayerItemInfoResponse::default_instance_ = NULL;

CMessageLoadPlayerItemInfoResponse* CMessageLoadPlayerItemInfoResponse::New() const {
  return new CMessageLoadPlayerItemInfoResponse;
}

void CMessageLoadPlayerItemInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    accountid_ = 0u;
    charid_ = 0u;
    sessionid_ = 0u;
  }
  packageidx_.Clear();
  itembox_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ErrCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_PackageIdx;
        break;
      }
      
      // repeated uint32 PackageIdx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackageIdx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_packageidx(value);
        if (input->ExpectTag(40)) goto parse_PackageIdx;
        if (input->ExpectTag(50)) goto parse_ItemBox;
        break;
      }
      
      // repeated .PBItemBox ItemBox = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemBox:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itembox()));
        if (input->ExpectTag(50)) goto parse_ItemBox;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerItemInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ErrCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->errcode(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sessionid(), output);
  }
  
  // repeated uint32 PackageIdx = 5;
  for (int i = 0; i < this->packageidx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->packageidx(i), output);
  }
  
  // repeated .PBItemBox ItemBox = 6;
  for (int i = 0; i < this->itembox_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->itembox(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerItemInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sessionid(), target);
  }
  
  // repeated uint32 PackageIdx = 5;
  for (int i = 0; i < this->packageidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->packageidx(i), target);
  }
  
  // repeated .PBItemBox ItemBox = 6;
  for (int i = 0; i < this->itembox_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->itembox(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerItemInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errcode());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
  }
  // repeated uint32 PackageIdx = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->packageidx(i));
    }
    total_size += 1 * this->packageidx_size() + data_size;
  }
  
  // repeated .PBItemBox ItemBox = 6;
  total_size += 1 * this->itembox_size();
  for (int i = 0; i < this->itembox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itembox(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerItemInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerItemInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerItemInfoResponse::MergeFrom(const CMessageLoadPlayerItemInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageidx_.MergeFrom(from.packageidx_);
  itembox_.MergeFrom(from.itembox_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoResponse::CopyFrom(const CMessageLoadPlayerItemInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerItemInfoResponse::Swap(CMessageLoadPlayerItemInfoResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(sessionid_, other->sessionid_);
    packageidx_.Swap(&other->packageidx_);
    itembox_.Swap(&other->itembox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerItemInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerItemInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerItemInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerItemInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSavePlayerItemInfoRequest::kAccountIDFieldNumber;
const int CMessageSavePlayerItemInfoRequest::kCharIDFieldNumber;
const int CMessageSavePlayerItemInfoRequest::kPackageIdxFieldNumber;
const int CMessageSavePlayerItemInfoRequest::kSessionIDFieldNumber;
const int CMessageSavePlayerItemInfoRequest::kItemBoxFieldNumber;
#endif  // !_MSC_VER

CMessageSavePlayerItemInfoRequest::CMessageSavePlayerItemInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSavePlayerItemInfoRequest::InitAsDefaultInstance() {}

CMessageSavePlayerItemInfoRequest::CMessageSavePlayerItemInfoRequest(const CMessageSavePlayerItemInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSavePlayerItemInfoRequest::~CMessageSavePlayerItemInfoRequest() {
  SharedDtor();
}

void CMessageSavePlayerItemInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerItemInfoRequest_descriptor_;
}

const CMessageSavePlayerItemInfoRequest& CMessageSavePlayerItemInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageSavePlayerItemInfoRequest* CMessageSavePlayerItemInfoRequest::default_instance_ = NULL;

CMessageSavePlayerItemInfoRequest* CMessageSavePlayerItemInfoRequest::New() const {
  return new CMessageSavePlayerItemInfoRequest;
}

void CMessageSavePlayerItemInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    charid_ = 0u;
    sessionid_ = 0u;
  }
  packageidx_.Clear();
  itembox_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSavePlayerItemInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_PackageIdx;
        break;
      }
      
      // repeated uint32 PackageIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackageIdx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_packageidx(value);
        if (input->ExpectTag(24)) goto parse_PackageIdx;
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(3);
        if (input->ExpectTag(50)) goto parse_ItemBox;
        break;
      }
      
      // repeated .PBItemBox ItemBox = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ItemBox:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_itembox()));
        if (input->ExpectTag(50)) goto parse_ItemBox;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSavePlayerItemInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSavePlayerItemInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->charid(), output);
  }
  
  // repeated uint32 PackageIdx = 3;
  for (int i = 0; i < this->packageidx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->packageidx(i), output);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sessionid(), output);
  }
  
  // repeated .PBItemBox ItemBox = 6;
  for (int i = 0; i < this->itembox_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->itembox(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSavePlayerItemInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 CharID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->charid(), target);
  }
  
  // repeated uint32 PackageIdx = 3;
  for (int i = 0; i < this->packageidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->packageidx(i), target);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sessionid(), target);
  }
  
  // repeated .PBItemBox ItemBox = 6;
  for (int i = 0; i < this->itembox_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->itembox(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSavePlayerItemInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
  }
  // repeated uint32 PackageIdx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->packageidx(i));
    }
    total_size += 1 * this->packageidx_size() + data_size;
  }
  
  // repeated .PBItemBox ItemBox = 6;
  total_size += 1 * this->itembox_size();
  for (int i = 0; i < this->itembox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->itembox(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSavePlayerItemInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSavePlayerItemInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSavePlayerItemInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSavePlayerItemInfoRequest::MergeFrom(const CMessageSavePlayerItemInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageidx_.MergeFrom(from.packageidx_);
  itembox_.MergeFrom(from.itembox_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      set_charid(from.charid());
    }
    if (from._has_bit(3)) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSavePlayerItemInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoRequest::CopyFrom(const CMessageSavePlayerItemInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoRequest::Swap(CMessageSavePlayerItemInfoRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    packageidx_.Swap(&other->packageidx_);
    std::swap(sessionid_, other->sessionid_);
    itembox_.Swap(&other->itembox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSavePlayerItemInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSavePlayerItemInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerItemInfoRequest_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMessageSavePlayerItemInfoResponse_emErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerItemInfoResponse_emErrorCode_descriptor_;
}
bool CMessageSavePlayerItemInfoResponse_emErrorCode_IsValid(int value) {
  switch(value) {
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::SUCCES;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::SQL_FAILED;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::SERALIZE_FAILED;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::FILTER_FAILED;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::INVALID_PKGIDX;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::emErrorCode_MIN;
const CMessageSavePlayerItemInfoResponse_emErrorCode CMessageSavePlayerItemInfoResponse::emErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMessageSavePlayerItemInfoResponse::kErrCodeFieldNumber;
const int CMessageSavePlayerItemInfoResponse::kAccountIDFieldNumber;
const int CMessageSavePlayerItemInfoResponse::kCharIDFieldNumber;
const int CMessageSavePlayerItemInfoResponse::kPackageIdxFieldNumber;
const int CMessageSavePlayerItemInfoResponse::kSessionIDFieldNumber;
#endif  // !_MSC_VER

CMessageSavePlayerItemInfoResponse::CMessageSavePlayerItemInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSavePlayerItemInfoResponse::InitAsDefaultInstance() {}

CMessageSavePlayerItemInfoResponse::CMessageSavePlayerItemInfoResponse(const CMessageSavePlayerItemInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  accountid_ = 0u;
  charid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSavePlayerItemInfoResponse::~CMessageSavePlayerItemInfoResponse() {
  SharedDtor();
}

void CMessageSavePlayerItemInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerItemInfoResponse_descriptor_;
}

const CMessageSavePlayerItemInfoResponse& CMessageSavePlayerItemInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageSavePlayerItemInfoResponse* CMessageSavePlayerItemInfoResponse::default_instance_ = NULL;

CMessageSavePlayerItemInfoResponse* CMessageSavePlayerItemInfoResponse::New() const {
  return new CMessageSavePlayerItemInfoResponse;
}

void CMessageSavePlayerItemInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    accountid_ = 0u;
    charid_ = 0u;
    sessionid_ = 0u;
  }
  packageidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSavePlayerItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional int32 ErrCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &errcode_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_CharID;
        break;
      }
      
      // optional uint32 CharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CharID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &charid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_PackageIdx;
        break;
      }
      
      // repeated uint32 PackageIdx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_PackageIdx:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(input, &value));
        add_packageidx(value);
        if (input->ExpectTag(32)) goto parse_PackageIdx;
        if (input->ExpectTag(40)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSavePlayerItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSavePlayerItemInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ErrCode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->errcode(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->charid(), output);
  }
  
  // repeated uint32 PackageIdx = 4;
  for (int i = 0; i < this->packageidx_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->packageidx(i), output);
  }
  
  // optional uint32 SessionID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSavePlayerItemInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrCode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 CharID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->charid(), target);
  }
  
  // repeated uint32 PackageIdx = 4;
  for (int i = 0; i < this->packageidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->packageidx(i), target);
  }
  
  // optional uint32 SessionID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSavePlayerItemInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->errcode());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 CharID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->charid());
    }
    
    // optional uint32 SessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
  }
  // repeated uint32 PackageIdx = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageidx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormat::UInt32Size(
        this->packageidx(i));
    }
    total_size += 1 * this->packageidx_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSavePlayerItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSavePlayerItemInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSavePlayerItemInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSavePlayerItemInfoResponse::MergeFrom(const CMessageSavePlayerItemInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageidx_.MergeFrom(from.packageidx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errcode(from.errcode());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_charid(from.charid());
    }
    if (from._has_bit(4)) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSavePlayerItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoResponse::CopyFrom(const CMessageSavePlayerItemInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerItemInfoResponse::Swap(CMessageSavePlayerItemInfoResponse* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    packageidx_.Swap(&other->packageidx_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSavePlayerItemInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSavePlayerItemInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSavePlayerItemInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerItemInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessagePlayerProperty::kRoleHpFieldNumber;
const int CMessagePlayerProperty::kRoleMpFieldNumber;
const int CMessagePlayerProperty::kRoleApFieldNumber;
const int CMessagePlayerProperty::kRoleBasicFieldNumber;
const int CMessagePlayerProperty::kRoleSkillFieldNumber;
const int CMessagePlayerProperty::kRoleBuffFieldNumber;
const int CMessagePlayerProperty::kRoleCdgroupFieldNumber;
const int CMessagePlayerProperty::kRolePvpFieldNumber;
const int CMessagePlayerProperty::kRoleTitleFieldNumber;
const int CMessagePlayerProperty::kRoleActivityFieldNumber;
const int CMessagePlayerProperty::kRoleTalentFieldNumber;
const int CMessagePlayerProperty::kRoleMwFieldNumber;
const int CMessagePlayerProperty::kRoleLifeskillFieldNumber;
const int CMessagePlayerProperty::kRoleStatisticFieldNumber;
const int CMessagePlayerProperty::kRoleMonsterRecordFieldNumber;
const int CMessagePlayerProperty::kRoleTelePosFieldNumber;
const int CMessagePlayerProperty::kRoleWizardFieldNumber;
const int CMessagePlayerProperty::kRoleClientFieldNumber;
const int CMessagePlayerProperty::kSaveBitflagFieldNumber;
const int CMessagePlayerProperty::kRoleFriendFieldNumber;
const int CMessagePlayerProperty::kRoleRepetionFieldNumber;
const int CMessagePlayerProperty::kRoleTaskFieldNumber;
const int CMessagePlayerProperty::kRoleMatrixFieldNumber;
const int CMessagePlayerProperty::kRoleCharmFieldNumber;
const int CMessagePlayerProperty::kRoleGuideFieldNumber;
const int CMessagePlayerProperty::kRoleTimesFieldNumber;
const int CMessagePlayerProperty::kRoleExptimeinfoFieldNumber;
const int CMessagePlayerProperty::kRoleTreasurebowlFieldNumber;
const int CMessagePlayerProperty::kRoleSpiritinfoFieldNumber;
#endif  // !_MSC_VER

CMessagePlayerProperty::CMessagePlayerProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessagePlayerProperty::InitAsDefaultInstance() {  role_basic_ = const_cast< ::PBPlayerBasicInfo*>(&::PBPlayerBasicInfo::default_instance());
  role_skill_ = const_cast< ::PBSkillList*>(&::PBSkillList::default_instance());
  role_buff_ = const_cast< ::PBBuffList*>(&::PBBuffList::default_instance());
  role_cdgroup_ = const_cast< ::PBPlayerCDGroupInfo*>(&::PBPlayerCDGroupInfo::default_instance());
  role_pvp_ = const_cast< ::PBPlayerPVPInfo*>(&::PBPlayerPVPInfo::default_instance());
  role_title_ = const_cast< ::PBPlayerTitleInfo*>(&::PBPlayerTitleInfo::default_instance());
  role_activity_ = const_cast< ::PBPlayerActivityInfo*>(&::PBPlayerActivityInfo::default_instance());
  role_talent_ = const_cast< ::PBPlayerTalentInfo*>(&::PBPlayerTalentInfo::default_instance());
  role_mw_ = const_cast< ::PBPlayerMWInfo*>(&::PBPlayerMWInfo::default_instance());
  role_lifeskill_ = const_cast< ::PBLifeSkillBox*>(&::PBLifeSkillBox::default_instance());
  role_statistic_ = const_cast< ::PBPlayerStatisticInfo*>(&::PBPlayerStatisticInfo::default_instance());
  role_monster_record_ = const_cast< ::PBMonsterRecordInfo*>(&::PBMonsterRecordInfo::default_instance());
  role_tele_pos_ = const_cast< ::PBTelePosInfo*>(&::PBTelePosInfo::default_instance());
  role_wizard_ = const_cast< ::PBWizard*>(&::PBWizard::default_instance());
  role_client_ = const_cast< ::PBPlayerClientInfo*>(&::PBPlayerClientInfo::default_instance());
  role_friend_ = const_cast< ::PBFriend*>(&::PBFriend::default_instance());
  role_repetion_ = const_cast< ::PBRepetion*>(&::PBRepetion::default_instance());
  role_task_ = const_cast< ::PBTaskList*>(&::PBTaskList::default_instance());
  role_matrix_ = const_cast< ::PBMatrixInfo*>(&::PBMatrixInfo::default_instance());
  role_charm_ = const_cast< ::PBCharm*>(&::PBCharm::default_instance());
  role_guide_ = const_cast< ::PBGuideData*>(&::PBGuideData::default_instance());
  role_times_ = const_cast< ::PBTimes*>(&::PBTimes::default_instance());
  role_exptimeinfo_ = const_cast< ::PBExpTimeInfo*>(&::PBExpTimeInfo::default_instance());
  role_treasurebowl_ = const_cast< ::PBTreasureBowl*>(&::PBTreasureBowl::default_instance());
  role_spiritinfo_ = const_cast< ::PBSpiritInfo*>(&::PBSpiritInfo::default_instance());
}

CMessagePlayerProperty::CMessagePlayerProperty(const CMessagePlayerProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessagePlayerProperty::SharedCtor() {
  _cached_size_ = 0;
  role_hp_ = 0u;
  role_mp_ = 0u;
  role_ap_ = 0u;
  role_basic_ = NULL;
  role_skill_ = NULL;
  role_buff_ = NULL;
  role_cdgroup_ = NULL;
  role_pvp_ = NULL;
  role_title_ = NULL;
  role_activity_ = NULL;
  role_talent_ = NULL;
  role_mw_ = NULL;
  role_lifeskill_ = NULL;
  role_statistic_ = NULL;
  role_monster_record_ = NULL;
  role_tele_pos_ = NULL;
  role_wizard_ = NULL;
  role_client_ = NULL;
  save_bitflag_ = 0u;
  role_friend_ = NULL;
  role_repetion_ = NULL;
  role_task_ = NULL;
  role_matrix_ = NULL;
  role_charm_ = NULL;
  role_guide_ = NULL;
  role_times_ = NULL;
  role_exptimeinfo_ = NULL;
  role_treasurebowl_ = NULL;
  role_spiritinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessagePlayerProperty::~CMessagePlayerProperty() {
  SharedDtor();
}

void CMessagePlayerProperty::SharedDtor() {
  if (this != default_instance_) {
    delete role_basic_;
    delete role_skill_;
    delete role_buff_;
    delete role_cdgroup_;
    delete role_pvp_;
    delete role_title_;
    delete role_activity_;
    delete role_talent_;
    delete role_mw_;
    delete role_lifeskill_;
    delete role_statistic_;
    delete role_monster_record_;
    delete role_tele_pos_;
    delete role_wizard_;
    delete role_client_;
    delete role_friend_;
    delete role_repetion_;
    delete role_task_;
    delete role_matrix_;
    delete role_charm_;
    delete role_guide_;
    delete role_times_;
    delete role_exptimeinfo_;
    delete role_treasurebowl_;
    delete role_spiritinfo_;
  }
}

const ::google::protobuf::Descriptor* CMessagePlayerProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerProperty_descriptor_;
}

const CMessagePlayerProperty& CMessagePlayerProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessagePlayerProperty* CMessagePlayerProperty::default_instance_ = NULL;

CMessagePlayerProperty* CMessagePlayerProperty::New() const {
  return new CMessagePlayerProperty;
}

void CMessagePlayerProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_hp_ = 0u;
    role_mp_ = 0u;
    role_ap_ = 0u;
    if (_has_bit(3)) {
      if (role_basic_ != NULL) role_basic_->::PBPlayerBasicInfo::Clear();
    }
    if (_has_bit(4)) {
      if (role_skill_ != NULL) role_skill_->::PBSkillList::Clear();
    }
    if (_has_bit(5)) {
      if (role_buff_ != NULL) role_buff_->::PBBuffList::Clear();
    }
    if (_has_bit(6)) {
      if (role_cdgroup_ != NULL) role_cdgroup_->::PBPlayerCDGroupInfo::Clear();
    }
    if (_has_bit(7)) {
      if (role_pvp_ != NULL) role_pvp_->::PBPlayerPVPInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (role_title_ != NULL) role_title_->::PBPlayerTitleInfo::Clear();
    }
    if (_has_bit(9)) {
      if (role_activity_ != NULL) role_activity_->::PBPlayerActivityInfo::Clear();
    }
    if (_has_bit(10)) {
      if (role_talent_ != NULL) role_talent_->::PBPlayerTalentInfo::Clear();
    }
    if (_has_bit(11)) {
      if (role_mw_ != NULL) role_mw_->::PBPlayerMWInfo::Clear();
    }
    if (_has_bit(12)) {
      if (role_lifeskill_ != NULL) role_lifeskill_->::PBLifeSkillBox::Clear();
    }
    if (_has_bit(13)) {
      if (role_statistic_ != NULL) role_statistic_->::PBPlayerStatisticInfo::Clear();
    }
    if (_has_bit(14)) {
      if (role_monster_record_ != NULL) role_monster_record_->::PBMonsterRecordInfo::Clear();
    }
    if (_has_bit(15)) {
      if (role_tele_pos_ != NULL) role_tele_pos_->::PBTelePosInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (role_wizard_ != NULL) role_wizard_->::PBWizard::Clear();
    }
    if (_has_bit(17)) {
      if (role_client_ != NULL) role_client_->::PBPlayerClientInfo::Clear();
    }
    save_bitflag_ = 0u;
    if (_has_bit(19)) {
      if (role_friend_ != NULL) role_friend_->::PBFriend::Clear();
    }
    if (_has_bit(20)) {
      if (role_repetion_ != NULL) role_repetion_->::PBRepetion::Clear();
    }
    if (_has_bit(21)) {
      if (role_task_ != NULL) role_task_->::PBTaskList::Clear();
    }
    if (_has_bit(22)) {
      if (role_matrix_ != NULL) role_matrix_->::PBMatrixInfo::Clear();
    }
    if (_has_bit(23)) {
      if (role_charm_ != NULL) role_charm_->::PBCharm::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (role_guide_ != NULL) role_guide_->::PBGuideData::Clear();
    }
    if (_has_bit(25)) {
      if (role_times_ != NULL) role_times_->::PBTimes::Clear();
    }
    if (_has_bit(26)) {
      if (role_exptimeinfo_ != NULL) role_exptimeinfo_->::PBExpTimeInfo::Clear();
    }
    if (_has_bit(27)) {
      if (role_treasurebowl_ != NULL) role_treasurebowl_->::PBTreasureBowl::Clear();
    }
    if (_has_bit(28)) {
      if (role_spiritinfo_ != NULL) role_spiritinfo_->::PBSpiritInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessagePlayerProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 role_hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_hp_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_role_mp;
        break;
      }
      
      // optional uint32 role_mp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_mp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_mp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_role_ap;
        break;
      }
      
      // optional uint32 role_ap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_role_ap:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &role_ap_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_role_basic;
        break;
      }
      
      // optional .PBPlayerBasicInfo role_basic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_basic:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_basic()));
        if (input->ExpectTag(42)) goto parse_role_skill;
        break;
      }
      
      // optional .PBSkillList role_skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_skill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_skill()));
        if (input->ExpectTag(50)) goto parse_role_buff;
        break;
      }
      
      // optional .PBBuffList role_buff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_buff:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_buff()));
        if (input->ExpectTag(58)) goto parse_role_cdgroup;
        break;
      }
      
      // optional .PBPlayerCDGroupInfo role_cdgroup = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_cdgroup:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_cdgroup()));
        if (input->ExpectTag(66)) goto parse_role_pvp;
        break;
      }
      
      // optional .PBPlayerPVPInfo role_pvp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_pvp:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_pvp()));
        if (input->ExpectTag(74)) goto parse_role_title;
        break;
      }
      
      // optional .PBPlayerTitleInfo role_title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_title:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_title()));
        if (input->ExpectTag(82)) goto parse_role_activity;
        break;
      }
      
      // optional .PBPlayerActivityInfo role_activity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_activity:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_activity()));
        if (input->ExpectTag(90)) goto parse_role_talent;
        break;
      }
      
      // optional .PBPlayerTalentInfo role_talent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_talent:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_talent()));
        if (input->ExpectTag(98)) goto parse_role_mw;
        break;
      }
      
      // optional .PBPlayerMWInfo role_mw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_mw:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_mw()));
        if (input->ExpectTag(106)) goto parse_role_lifeskill;
        break;
      }
      
      // optional .PBLifeSkillBox role_lifeskill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_lifeskill:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_lifeskill()));
        if (input->ExpectTag(114)) goto parse_role_statistic;
        break;
      }
      
      // optional .PBPlayerStatisticInfo role_statistic = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_statistic:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_statistic()));
        if (input->ExpectTag(122)) goto parse_role_monster_record;
        break;
      }
      
      // optional .PBMonsterRecordInfo role_monster_record = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_monster_record:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_monster_record()));
        if (input->ExpectTag(130)) goto parse_role_tele_pos;
        break;
      }
      
      // optional .PBTelePosInfo role_tele_pos = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_tele_pos:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_tele_pos()));
        if (input->ExpectTag(138)) goto parse_role_wizard;
        break;
      }
      
      // optional .PBWizard role_wizard = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_wizard:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_wizard()));
        if (input->ExpectTag(146)) goto parse_role_client;
        break;
      }
      
      // optional .PBPlayerClientInfo role_client = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_client:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_client()));
        if (input->ExpectTag(152)) goto parse_save_bitflag;
        break;
      }
      
      // optional uint32 save_bitflag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_save_bitflag:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &save_bitflag_));
        _set_bit(18);
        if (input->ExpectTag(162)) goto parse_role_friend;
        break;
      }
      
      // optional .PBFriend role_friend = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_friend:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_friend()));
        if (input->ExpectTag(170)) goto parse_role_repetion;
        break;
      }
      
      // optional .PBRepetion role_repetion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_repetion:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_repetion()));
        if (input->ExpectTag(178)) goto parse_role_task;
        break;
      }
      
      // optional .PBTaskList role_task = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_task:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_task()));
        if (input->ExpectTag(186)) goto parse_role_matrix;
        break;
      }
      
      // optional .PBMatrixInfo role_matrix = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_matrix:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_matrix()));
        if (input->ExpectTag(194)) goto parse_role_charm;
        break;
      }
      
      // optional .PBCharm role_charm = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_charm:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_charm()));
        if (input->ExpectTag(202)) goto parse_role_guide;
        break;
      }
      
      // optional .PBGuideData role_guide = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_guide:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_guide()));
        if (input->ExpectTag(210)) goto parse_role_times;
        break;
      }
      
      // optional .PBTimes role_times = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_times:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_times()));
        if (input->ExpectTag(218)) goto parse_role_exptimeinfo;
        break;
      }
      
      // optional .PBExpTimeInfo role_exptimeinfo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_exptimeinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_exptimeinfo()));
        if (input->ExpectTag(226)) goto parse_role_treasurebowl;
        break;
      }
      
      // optional .PBTreasureBowl role_treasurebowl = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_treasurebowl:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_treasurebowl()));
        if (input->ExpectTag(234)) goto parse_role_spiritinfo;
        break;
      }
      
      // optional .PBSpiritInfo role_spiritinfo = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_role_spiritinfo:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_role_spiritinfo()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessagePlayerProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessagePlayerProperty::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 role_hp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->role_hp(), output);
  }
  
  // optional uint32 role_mp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->role_mp(), output);
  }
  
  // optional uint32 role_ap = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->role_ap(), output);
  }
  
  // optional .PBPlayerBasicInfo role_basic = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->role_basic(), output);
  }
  
  // optional .PBSkillList role_skill = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->role_skill(), output);
  }
  
  // optional .PBBuffList role_buff = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->role_buff(), output);
  }
  
  // optional .PBPlayerCDGroupInfo role_cdgroup = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(7, this->role_cdgroup(), output);
  }
  
  // optional .PBPlayerPVPInfo role_pvp = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(8, this->role_pvp(), output);
  }
  
  // optional .PBPlayerTitleInfo role_title = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(9, this->role_title(), output);
  }
  
  // optional .PBPlayerActivityInfo role_activity = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(10, this->role_activity(), output);
  }
  
  // optional .PBPlayerTalentInfo role_talent = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(11, this->role_talent(), output);
  }
  
  // optional .PBPlayerMWInfo role_mw = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(12, this->role_mw(), output);
  }
  
  // optional .PBLifeSkillBox role_lifeskill = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(13, this->role_lifeskill(), output);
  }
  
  // optional .PBPlayerStatisticInfo role_statistic = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(14, this->role_statistic(), output);
  }
  
  // optional .PBMonsterRecordInfo role_monster_record = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(15, this->role_monster_record(), output);
  }
  
  // optional .PBTelePosInfo role_tele_pos = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(16, this->role_tele_pos(), output);
  }
  
  // optional .PBWizard role_wizard = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(17, this->role_wizard(), output);
  }
  
  // optional .PBPlayerClientInfo role_client = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(18, this->role_client(), output);
  }
  
  // optional uint32 save_bitflag = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(19, this->save_bitflag(), output);
  }
  
  // optional .PBFriend role_friend = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(20, this->role_friend(), output);
  }
  
  // optional .PBRepetion role_repetion = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(21, this->role_repetion(), output);
  }
  
  // optional .PBTaskList role_task = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(22, this->role_task(), output);
  }
  
  // optional .PBMatrixInfo role_matrix = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(23, this->role_matrix(), output);
  }
  
  // optional .PBCharm role_charm = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(24, this->role_charm(), output);
  }
  
  // optional .PBGuideData role_guide = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(25, this->role_guide(), output);
  }
  
  // optional .PBTimes role_times = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(26, this->role_times(), output);
  }
  
  // optional .PBExpTimeInfo role_exptimeinfo = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(27, this->role_exptimeinfo(), output);
  }
  
  // optional .PBTreasureBowl role_treasurebowl = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(28, this->role_treasurebowl(), output);
  }
  
  // optional .PBSpiritInfo role_spiritinfo = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(29, this->role_spiritinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessagePlayerProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_hp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->role_hp(), target);
  }
  
  // optional uint32 role_mp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->role_mp(), target);
  }
  
  // optional uint32 role_ap = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->role_ap(), target);
  }
  
  // optional .PBPlayerBasicInfo role_basic = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->role_basic(), target);
  }
  
  // optional .PBSkillList role_skill = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->role_skill(), target);
  }
  
  // optional .PBBuffList role_buff = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->role_buff(), target);
  }
  
  // optional .PBPlayerCDGroupInfo role_cdgroup = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(7, this->role_cdgroup(), target);
  }
  
  // optional .PBPlayerPVPInfo role_pvp = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(8, this->role_pvp(), target);
  }
  
  // optional .PBPlayerTitleInfo role_title = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(9, this->role_title(), target);
  }
  
  // optional .PBPlayerActivityInfo role_activity = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(10, this->role_activity(), target);
  }
  
  // optional .PBPlayerTalentInfo role_talent = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(11, this->role_talent(), target);
  }
  
  // optional .PBPlayerMWInfo role_mw = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(12, this->role_mw(), target);
  }
  
  // optional .PBLifeSkillBox role_lifeskill = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(13, this->role_lifeskill(), target);
  }
  
  // optional .PBPlayerStatisticInfo role_statistic = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(14, this->role_statistic(), target);
  }
  
  // optional .PBMonsterRecordInfo role_monster_record = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(15, this->role_monster_record(), target);
  }
  
  // optional .PBTelePosInfo role_tele_pos = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(16, this->role_tele_pos(), target);
  }
  
  // optional .PBWizard role_wizard = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(17, this->role_wizard(), target);
  }
  
  // optional .PBPlayerClientInfo role_client = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(18, this->role_client(), target);
  }
  
  // optional uint32 save_bitflag = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(19, this->save_bitflag(), target);
  }
  
  // optional .PBFriend role_friend = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(20, this->role_friend(), target);
  }
  
  // optional .PBRepetion role_repetion = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(21, this->role_repetion(), target);
  }
  
  // optional .PBTaskList role_task = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(22, this->role_task(), target);
  }
  
  // optional .PBMatrixInfo role_matrix = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(23, this->role_matrix(), target);
  }
  
  // optional .PBCharm role_charm = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(24, this->role_charm(), target);
  }
  
  // optional .PBGuideData role_guide = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(25, this->role_guide(), target);
  }
  
  // optional .PBTimes role_times = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(26, this->role_times(), target);
  }
  
  // optional .PBExpTimeInfo role_exptimeinfo = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(27, this->role_exptimeinfo(), target);
  }
  
  // optional .PBTreasureBowl role_treasurebowl = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(28, this->role_treasurebowl(), target);
  }
  
  // optional .PBSpiritInfo role_spiritinfo = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(29, this->role_spiritinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessagePlayerProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_hp = 1;
    if (has_role_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_hp());
    }
    
    // optional uint32 role_mp = 2;
    if (has_role_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_mp());
    }
    
    // optional uint32 role_ap = 3;
    if (has_role_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->role_ap());
    }
    
    // optional .PBPlayerBasicInfo role_basic = 4;
    if (has_role_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_basic());
    }
    
    // optional .PBSkillList role_skill = 5;
    if (has_role_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_skill());
    }
    
    // optional .PBBuffList role_buff = 6;
    if (has_role_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_buff());
    }
    
    // optional .PBPlayerCDGroupInfo role_cdgroup = 7;
    if (has_role_cdgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_cdgroup());
    }
    
    // optional .PBPlayerPVPInfo role_pvp = 8;
    if (has_role_pvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_pvp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBPlayerTitleInfo role_title = 9;
    if (has_role_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_title());
    }
    
    // optional .PBPlayerActivityInfo role_activity = 10;
    if (has_role_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_activity());
    }
    
    // optional .PBPlayerTalentInfo role_talent = 11;
    if (has_role_talent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_talent());
    }
    
    // optional .PBPlayerMWInfo role_mw = 12;
    if (has_role_mw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_mw());
    }
    
    // optional .PBLifeSkillBox role_lifeskill = 13;
    if (has_role_lifeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_lifeskill());
    }
    
    // optional .PBPlayerStatisticInfo role_statistic = 14;
    if (has_role_statistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_statistic());
    }
    
    // optional .PBMonsterRecordInfo role_monster_record = 15;
    if (has_role_monster_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_monster_record());
    }
    
    // optional .PBTelePosInfo role_tele_pos = 16;
    if (has_role_tele_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_tele_pos());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBWizard role_wizard = 17;
    if (has_role_wizard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_wizard());
    }
    
    // optional .PBPlayerClientInfo role_client = 18;
    if (has_role_client()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_client());
    }
    
    // optional uint32 save_bitflag = 19;
    if (has_save_bitflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->save_bitflag());
    }
    
    // optional .PBFriend role_friend = 20;
    if (has_role_friend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_friend());
    }
    
    // optional .PBRepetion role_repetion = 21;
    if (has_role_repetion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_repetion());
    }
    
    // optional .PBTaskList role_task = 22;
    if (has_role_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_task());
    }
    
    // optional .PBMatrixInfo role_matrix = 23;
    if (has_role_matrix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_matrix());
    }
    
    // optional .PBCharm role_charm = 24;
    if (has_role_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_charm());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PBGuideData role_guide = 25;
    if (has_role_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_guide());
    }
    
    // optional .PBTimes role_times = 26;
    if (has_role_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_times());
    }
    
    // optional .PBExpTimeInfo role_exptimeinfo = 27;
    if (has_role_exptimeinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_exptimeinfo());
    }
    
    // optional .PBTreasureBowl role_treasurebowl = 28;
    if (has_role_treasurebowl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_treasurebowl());
    }
    
    // optional .PBSpiritInfo role_spiritinfo = 29;
    if (has_role_spiritinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->role_spiritinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessagePlayerProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessagePlayerProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessagePlayerProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessagePlayerProperty::MergeFrom(const CMessagePlayerProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_role_hp(from.role_hp());
    }
    if (from._has_bit(1)) {
      set_role_mp(from.role_mp());
    }
    if (from._has_bit(2)) {
      set_role_ap(from.role_ap());
    }
    if (from._has_bit(3)) {
      mutable_role_basic()->::PBPlayerBasicInfo::MergeFrom(from.role_basic());
    }
    if (from._has_bit(4)) {
      mutable_role_skill()->::PBSkillList::MergeFrom(from.role_skill());
    }
    if (from._has_bit(5)) {
      mutable_role_buff()->::PBBuffList::MergeFrom(from.role_buff());
    }
    if (from._has_bit(6)) {
      mutable_role_cdgroup()->::PBPlayerCDGroupInfo::MergeFrom(from.role_cdgroup());
    }
    if (from._has_bit(7)) {
      mutable_role_pvp()->::PBPlayerPVPInfo::MergeFrom(from.role_pvp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_role_title()->::PBPlayerTitleInfo::MergeFrom(from.role_title());
    }
    if (from._has_bit(9)) {
      mutable_role_activity()->::PBPlayerActivityInfo::MergeFrom(from.role_activity());
    }
    if (from._has_bit(10)) {
      mutable_role_talent()->::PBPlayerTalentInfo::MergeFrom(from.role_talent());
    }
    if (from._has_bit(11)) {
      mutable_role_mw()->::PBPlayerMWInfo::MergeFrom(from.role_mw());
    }
    if (from._has_bit(12)) {
      mutable_role_lifeskill()->::PBLifeSkillBox::MergeFrom(from.role_lifeskill());
    }
    if (from._has_bit(13)) {
      mutable_role_statistic()->::PBPlayerStatisticInfo::MergeFrom(from.role_statistic());
    }
    if (from._has_bit(14)) {
      mutable_role_monster_record()->::PBMonsterRecordInfo::MergeFrom(from.role_monster_record());
    }
    if (from._has_bit(15)) {
      mutable_role_tele_pos()->::PBTelePosInfo::MergeFrom(from.role_tele_pos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_role_wizard()->::PBWizard::MergeFrom(from.role_wizard());
    }
    if (from._has_bit(17)) {
      mutable_role_client()->::PBPlayerClientInfo::MergeFrom(from.role_client());
    }
    if (from._has_bit(18)) {
      set_save_bitflag(from.save_bitflag());
    }
    if (from._has_bit(19)) {
      mutable_role_friend()->::PBFriend::MergeFrom(from.role_friend());
    }
    if (from._has_bit(20)) {
      mutable_role_repetion()->::PBRepetion::MergeFrom(from.role_repetion());
    }
    if (from._has_bit(21)) {
      mutable_role_task()->::PBTaskList::MergeFrom(from.role_task());
    }
    if (from._has_bit(22)) {
      mutable_role_matrix()->::PBMatrixInfo::MergeFrom(from.role_matrix());
    }
    if (from._has_bit(23)) {
      mutable_role_charm()->::PBCharm::MergeFrom(from.role_charm());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_role_guide()->::PBGuideData::MergeFrom(from.role_guide());
    }
    if (from._has_bit(25)) {
      mutable_role_times()->::PBTimes::MergeFrom(from.role_times());
    }
    if (from._has_bit(26)) {
      mutable_role_exptimeinfo()->::PBExpTimeInfo::MergeFrom(from.role_exptimeinfo());
    }
    if (from._has_bit(27)) {
      mutable_role_treasurebowl()->::PBTreasureBowl::MergeFrom(from.role_treasurebowl());
    }
    if (from._has_bit(28)) {
      mutable_role_spiritinfo()->::PBSpiritInfo::MergeFrom(from.role_spiritinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessagePlayerProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerProperty::CopyFrom(const CMessagePlayerProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessagePlayerProperty::Swap(CMessagePlayerProperty* other) {
  if (other != this) {
    std::swap(role_hp_, other->role_hp_);
    std::swap(role_mp_, other->role_mp_);
    std::swap(role_ap_, other->role_ap_);
    std::swap(role_basic_, other->role_basic_);
    std::swap(role_skill_, other->role_skill_);
    std::swap(role_buff_, other->role_buff_);
    std::swap(role_cdgroup_, other->role_cdgroup_);
    std::swap(role_pvp_, other->role_pvp_);
    std::swap(role_title_, other->role_title_);
    std::swap(role_activity_, other->role_activity_);
    std::swap(role_talent_, other->role_talent_);
    std::swap(role_mw_, other->role_mw_);
    std::swap(role_lifeskill_, other->role_lifeskill_);
    std::swap(role_statistic_, other->role_statistic_);
    std::swap(role_monster_record_, other->role_monster_record_);
    std::swap(role_tele_pos_, other->role_tele_pos_);
    std::swap(role_wizard_, other->role_wizard_);
    std::swap(role_client_, other->role_client_);
    std::swap(save_bitflag_, other->save_bitflag_);
    std::swap(role_friend_, other->role_friend_);
    std::swap(role_repetion_, other->role_repetion_);
    std::swap(role_task_, other->role_task_);
    std::swap(role_matrix_, other->role_matrix_);
    std::swap(role_charm_, other->role_charm_);
    std::swap(role_guide_, other->role_guide_);
    std::swap(role_times_, other->role_times_);
    std::swap(role_exptimeinfo_, other->role_exptimeinfo_);
    std::swap(role_treasurebowl_, other->role_treasurebowl_);
    std::swap(role_spiritinfo_, other->role_spiritinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessagePlayerProperty::IsInitialized() const {
  
  if (has_role_task()) {
    if (!this->role_task().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessagePlayerProperty::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessagePlayerProperty::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessagePlayerProperty_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSavePlayerRequest::kRoleIDFieldNumber;
const int CMessageSavePlayerRequest::kInfoFieldNumber;
const int CMessageSavePlayerRequest::kPropertyFieldNumber;
const int CMessageSavePlayerRequest::kSessionIDFieldNumber;
const int CMessageSavePlayerRequest::kDetailIDFieldNumber;
const int CMessageSavePlayerRequest::kCallBackFieldNumber;
#endif  // !_MSC_VER

CMessageSavePlayerRequest::CMessageSavePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSavePlayerRequest::InitAsDefaultInstance() {  info_ = const_cast< ::CMessagePlayerInfo*>(&::CMessagePlayerInfo::default_instance());
  property_ = const_cast< ::CMessagePlayerProperty*>(&::CMessagePlayerProperty::default_instance());
}

CMessageSavePlayerRequest::CMessageSavePlayerRequest(const CMessageSavePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSavePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  info_ = NULL;
  property_ = NULL;
  sessionid_ = 0u;
  detailid_ = 0u;
  callback_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSavePlayerRequest::~CMessageSavePlayerRequest() {
  SharedDtor();
}

void CMessageSavePlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete property_;
  }
}

const ::google::protobuf::Descriptor* CMessageSavePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerRequest_descriptor_;
}

const CMessageSavePlayerRequest& CMessageSavePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageSavePlayerRequest* CMessageSavePlayerRequest::default_instance_ = NULL;

CMessageSavePlayerRequest* CMessageSavePlayerRequest::New() const {
  return new CMessageSavePlayerRequest;
}

void CMessageSavePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    if (_has_bit(1)) {
      if (info_ != NULL) info_->::CMessagePlayerInfo::Clear();
    }
    if (_has_bit(2)) {
      if (property_ != NULL) property_->::CMessagePlayerProperty::Clear();
    }
    sessionid_ = 0u;
    detailid_ = 0u;
    callback_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSavePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_Info;
        break;
      }
      
      // optional .CMessagePlayerInfo Info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_info()));
        if (input->ExpectTag(26)) goto parse_Property;
        break;
      }
      
      // optional .CMessagePlayerProperty Property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_property()));
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_DetailID;
        break;
      }
      
      // optional uint32 DetailID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DetailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &detailid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_CallBack;
        break;
      }
      
      // optional uint32 CallBack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_CallBack:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &callback_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSavePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSavePlayerRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional .CMessagePlayerInfo Info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->info(), output);
  }
  
  // optional .CMessagePlayerProperty Property = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->property(), output);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->sessionid(), output);
  }
  
  // optional uint32 DetailID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->detailid(), output);
  }
  
  // optional uint32 CallBack = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->callback(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSavePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional .CMessagePlayerInfo Info = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->info(), target);
  }
  
  // optional .CMessagePlayerProperty Property = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->property(), target);
  }
  
  // optional uint32 SessionID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->sessionid(), target);
  }
  
  // optional uint32 DetailID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->detailid(), target);
  }
  
  // optional uint32 CallBack = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->callback(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSavePlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional .CMessagePlayerInfo Info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional .CMessagePlayerProperty Property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->property());
    }
    
    // optional uint32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 DetailID = 5;
    if (has_detailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->detailid());
    }
    
    // optional uint32 CallBack = 6;
    if (has_callback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->callback());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSavePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSavePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSavePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSavePlayerRequest::MergeFrom(const CMessageSavePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      mutable_info()->::CMessagePlayerInfo::MergeFrom(from.info());
    }
    if (from._has_bit(2)) {
      mutable_property()->::CMessagePlayerProperty::MergeFrom(from.property());
    }
    if (from._has_bit(3)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(4)) {
      set_detailid(from.detailid());
    }
    if (from._has_bit(5)) {
      set_callback(from.callback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSavePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerRequest::CopyFrom(const CMessageSavePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerRequest::Swap(CMessageSavePlayerRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(info_, other->info_);
    std::swap(property_, other->property_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(detailid_, other->detailid_);
    std::swap(callback_, other->callback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSavePlayerRequest::IsInitialized() const {
  
  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessageSavePlayerRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSavePlayerRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoadPlayerInfoRequest::kRoleIDFieldNumber;
const int CMessageLoadPlayerInfoRequest::kSessionIDFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerInfoRequest::CMessageLoadPlayerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerInfoRequest::InitAsDefaultInstance() {}

CMessageLoadPlayerInfoRequest::CMessageLoadPlayerInfoRequest(const CMessageLoadPlayerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerInfoRequest::~CMessageLoadPlayerInfoRequest() {
  SharedDtor();
}

void CMessageLoadPlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerInfoRequest_descriptor_;
}

const CMessageLoadPlayerInfoRequest& CMessageLoadPlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerInfoRequest* CMessageLoadPlayerInfoRequest::default_instance_ = NULL;

CMessageLoadPlayerInfoRequest* CMessageLoadPlayerInfoRequest::New() const {
  return new CMessageLoadPlayerInfoRequest;
}

void CMessageLoadPlayerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerInfoRequest::MergeFrom(const CMessageLoadPlayerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoRequest::CopyFrom(const CMessageLoadPlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoRequest::Swap(CMessageLoadPlayerInfoRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoadPlayerInfoResponse::kRoleIDFieldNumber;
const int CMessageLoadPlayerInfoResponse::kSessionIDFieldNumber;
const int CMessageLoadPlayerInfoResponse::kInfoFieldNumber;
const int CMessageLoadPlayerInfoResponse::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerInfoResponse::CMessageLoadPlayerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerInfoResponse::InitAsDefaultInstance() {  info_ = const_cast< ::CMessagePlayerInfo*>(&::CMessagePlayerInfo::default_instance());
}

CMessageLoadPlayerInfoResponse::CMessageLoadPlayerInfoResponse(const CMessageLoadPlayerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  info_ = NULL;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerInfoResponse::~CMessageLoadPlayerInfoResponse() {
  SharedDtor();
}

void CMessageLoadPlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerInfoResponse_descriptor_;
}

const CMessageLoadPlayerInfoResponse& CMessageLoadPlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerInfoResponse* CMessageLoadPlayerInfoResponse::default_instance_ = NULL;

CMessageLoadPlayerInfoResponse* CMessageLoadPlayerInfoResponse::New() const {
  return new CMessageLoadPlayerInfoResponse;
}

void CMessageLoadPlayerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    if (_has_bit(2)) {
      if (info_ != NULL) info_->::CMessagePlayerInfo::Clear();
    }
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Info;
        break;
      }
      
      // optional .CMessagePlayerInfo Info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_info()));
        if (input->ExpectTag(32)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional .CMessagePlayerInfo Info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->info(), output);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional .CMessagePlayerInfo Info = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->info(), target);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional .CMessagePlayerInfo Info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional uint32 ResultCode = 4;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerInfoResponse::MergeFrom(const CMessageLoadPlayerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      mutable_info()->::CMessagePlayerInfo::MergeFrom(from.info());
    }
    if (from._has_bit(3)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoResponse::CopyFrom(const CMessageLoadPlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerInfoResponse::Swap(CMessageLoadPlayerInfoResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(info_, other->info_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageSavePlayerResponse::kRoleIDFieldNumber;
const int CMessageSavePlayerResponse::kSessionIDFieldNumber;
const int CMessageSavePlayerResponse::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageSavePlayerResponse::CMessageSavePlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageSavePlayerResponse::InitAsDefaultInstance() {}

CMessageSavePlayerResponse::CMessageSavePlayerResponse(const CMessageSavePlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageSavePlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageSavePlayerResponse::~CMessageSavePlayerResponse() {
  SharedDtor();
}

void CMessageSavePlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageSavePlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerResponse_descriptor_;
}

const CMessageSavePlayerResponse& CMessageSavePlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageSavePlayerResponse* CMessageSavePlayerResponse::default_instance_ = NULL;

CMessageSavePlayerResponse* CMessageSavePlayerResponse::New() const {
  return new CMessageSavePlayerResponse;
}

void CMessageSavePlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageSavePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageSavePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageSavePlayerResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageSavePlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageSavePlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 ResultCode = 3;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageSavePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageSavePlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageSavePlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageSavePlayerResponse::MergeFrom(const CMessageSavePlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageSavePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerResponse::CopyFrom(const CMessageSavePlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageSavePlayerResponse::Swap(CMessageSavePlayerResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageSavePlayerResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageSavePlayerResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageSavePlayerResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageSavePlayerResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoadPlayerPropertyRequest::kRoleIDFieldNumber;
const int CMessageLoadPlayerPropertyRequest::kSessionIDFieldNumber;
const int CMessageLoadPlayerPropertyRequest::kDetailIDFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerPropertyRequest::CMessageLoadPlayerPropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerPropertyRequest::InitAsDefaultInstance() {}

CMessageLoadPlayerPropertyRequest::CMessageLoadPlayerPropertyRequest(const CMessageLoadPlayerPropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  detailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerPropertyRequest::~CMessageLoadPlayerPropertyRequest() {
  SharedDtor();
}

void CMessageLoadPlayerPropertyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerPropertyRequest_descriptor_;
}

const CMessageLoadPlayerPropertyRequest& CMessageLoadPlayerPropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerPropertyRequest* CMessageLoadPlayerPropertyRequest::default_instance_ = NULL;

CMessageLoadPlayerPropertyRequest* CMessageLoadPlayerPropertyRequest::New() const {
  return new CMessageLoadPlayerPropertyRequest;
}

void CMessageLoadPlayerPropertyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    detailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerPropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(32)) goto parse_DetailID;
        break;
      }
      
      // optional uint32 DetailID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DetailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &detailid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerPropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerPropertyRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional uint32 DetailID = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->detailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerPropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional uint32 DetailID = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->detailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerPropertyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 DetailID = 4;
    if (has_detailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->detailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerPropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerPropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerPropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerPropertyRequest::MergeFrom(const CMessageLoadPlayerPropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      set_detailid(from.detailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerPropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyRequest::CopyFrom(const CMessageLoadPlayerPropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyRequest::Swap(CMessageLoadPlayerPropertyRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(detailid_, other->detailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerPropertyRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerPropertyRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerPropertyRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageLoadPlayerPropertyResponse::kRoleIDFieldNumber;
const int CMessageLoadPlayerPropertyResponse::kSessionIDFieldNumber;
const int CMessageLoadPlayerPropertyResponse::kPropertyFieldNumber;
const int CMessageLoadPlayerPropertyResponse::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageLoadPlayerPropertyResponse::CMessageLoadPlayerPropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageLoadPlayerPropertyResponse::InitAsDefaultInstance() {  property_ = const_cast< ::CMessagePlayerProperty*>(&::CMessagePlayerProperty::default_instance());
}

CMessageLoadPlayerPropertyResponse::CMessageLoadPlayerPropertyResponse(const CMessageLoadPlayerPropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  property_ = NULL;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoadPlayerPropertyResponse::~CMessageLoadPlayerPropertyResponse() {
  SharedDtor();
}

void CMessageLoadPlayerPropertyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete property_;
  }
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerPropertyResponse_descriptor_;
}

const CMessageLoadPlayerPropertyResponse& CMessageLoadPlayerPropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageLoadPlayerPropertyResponse* CMessageLoadPlayerPropertyResponse::default_instance_ = NULL;

CMessageLoadPlayerPropertyResponse* CMessageLoadPlayerPropertyResponse::New() const {
  return new CMessageLoadPlayerPropertyResponse;
}

void CMessageLoadPlayerPropertyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    if (_has_bit(2)) {
      if (property_ != NULL) property_->::CMessagePlayerProperty::Clear();
    }
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoadPlayerPropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Property;
        break;
      }
      
      // optional .CMessagePlayerProperty Property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Property:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_property()));
        if (input->ExpectTag(32)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageLoadPlayerPropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageLoadPlayerPropertyResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional .CMessagePlayerProperty Property = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->property(), output);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageLoadPlayerPropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional .CMessagePlayerProperty Property = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->property(), target);
  }
  
  // optional uint32 ResultCode = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageLoadPlayerPropertyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional .CMessagePlayerProperty Property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->property());
    }
    
    // optional uint32 ResultCode = 4;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageLoadPlayerPropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoadPlayerPropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoadPlayerPropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoadPlayerPropertyResponse::MergeFrom(const CMessageLoadPlayerPropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      mutable_property()->::CMessagePlayerProperty::MergeFrom(from.property());
    }
    if (from._has_bit(3)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoadPlayerPropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyResponse::CopyFrom(const CMessageLoadPlayerPropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoadPlayerPropertyResponse::Swap(CMessageLoadPlayerPropertyResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(property_, other->property_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageLoadPlayerPropertyResponse::IsInitialized() const {
  
  if (has_property()) {
    if (!this->property().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CMessageLoadPlayerPropertyResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageLoadPlayerPropertyResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoadPlayerPropertyResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdatePlayerInfoRequest::kRoleIDFieldNumber;
const int CMessageUpdatePlayerInfoRequest::kSessionIDFieldNumber;
const int CMessageUpdatePlayerInfoRequest::kUpdateTypeFieldNumber;
const int CMessageUpdatePlayerInfoRequest::kParam1FieldNumber;
const int CMessageUpdatePlayerInfoRequest::kParam2FieldNumber;
const int CMessageUpdatePlayerInfoRequest::kValueFieldNumber;
const int CMessageUpdatePlayerInfoRequest::kDetailIDFieldNumber;
const int CMessageUpdatePlayerInfoRequest::kSubTypeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdatePlayerInfoRequest::CMessageUpdatePlayerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdatePlayerInfoRequest::InitAsDefaultInstance() {}

CMessageUpdatePlayerInfoRequest::CMessageUpdatePlayerInfoRequest(const CMessageUpdatePlayerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  updatetype_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  value_ = 0u;
  detailid_ = 0u;
  subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdatePlayerInfoRequest::~CMessageUpdatePlayerInfoRequest() {
  SharedDtor();
}

void CMessageUpdatePlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePlayerInfoRequest_descriptor_;
}

const CMessageUpdatePlayerInfoRequest& CMessageUpdatePlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdatePlayerInfoRequest* CMessageUpdatePlayerInfoRequest::default_instance_ = NULL;

CMessageUpdatePlayerInfoRequest* CMessageUpdatePlayerInfoRequest::New() const {
  return new CMessageUpdatePlayerInfoRequest;
}

void CMessageUpdatePlayerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    updatetype_ = 0u;
    param1_ = 0u;
    param2_ = 0u;
    value_ = 0u;
    detailid_ = 0u;
    subtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdatePlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_UpdateType;
        break;
      }
      
      // optional uint32 UpdateType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_UpdateType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &updatetype_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Param1;
        break;
      }
      
      // optional uint32 Param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param1_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Param2;
        break;
      }
      
      // optional uint32 Param2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Param2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &param2_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Value;
        break;
      }
      
      // optional uint32 Value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Value:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &value_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_DetailID;
        break;
      }
      
      // optional uint32 DetailID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_DetailID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &detailid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_SubType;
        break;
      }
      
      // optional uint32 SubType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SubType:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &subtype_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdatePlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdatePlayerInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional uint32 UpdateType = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->updatetype(), output);
  }
  
  // optional uint32 Param1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->param1(), output);
  }
  
  // optional uint32 Param2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->param2(), output);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->value(), output);
  }
  
  // optional uint32 DetailID = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->detailid(), output);
  }
  
  // optional uint32 SubType = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->subtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdatePlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional uint32 UpdateType = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->updatetype(), target);
  }
  
  // optional uint32 Param1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->param1(), target);
  }
  
  // optional uint32 Param2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->param2(), target);
  }
  
  // optional uint32 Value = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->value(), target);
  }
  
  // optional uint32 DetailID = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->detailid(), target);
  }
  
  // optional uint32 SubType = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->subtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdatePlayerInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 UpdateType = 3;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->updatetype());
    }
    
    // optional uint32 Param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param1());
    }
    
    // optional uint32 Param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->param2());
    }
    
    // optional uint32 Value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->value());
    }
    
    // optional uint32 DetailID = 7;
    if (has_detailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->detailid());
    }
    
    // optional uint32 SubType = 8;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->subtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdatePlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdatePlayerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdatePlayerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdatePlayerInfoRequest::MergeFrom(const CMessageUpdatePlayerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      set_updatetype(from.updatetype());
    }
    if (from._has_bit(3)) {
      set_param1(from.param1());
    }
    if (from._has_bit(4)) {
      set_param2(from.param2());
    }
    if (from._has_bit(5)) {
      set_value(from.value());
    }
    if (from._has_bit(6)) {
      set_detailid(from.detailid());
    }
    if (from._has_bit(7)) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdatePlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoRequest::CopyFrom(const CMessageUpdatePlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoRequest::Swap(CMessageUpdatePlayerInfoRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(updatetype_, other->updatetype_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(value_, other->value_);
    std::swap(detailid_, other->detailid_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdatePlayerInfoRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdatePlayerInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePlayerInfoRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageGetBourseInfo::kSessionIDFieldNumber;
const int CMessageGetBourseInfo::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CMessageGetBourseInfo::CMessageGetBourseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageGetBourseInfo::InitAsDefaultInstance() {}

CMessageGetBourseInfo::CMessageGetBourseInfo(const CMessageGetBourseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageGetBourseInfo::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageGetBourseInfo::~CMessageGetBourseInfo() {
  SharedDtor();
}

void CMessageGetBourseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageGetBourseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetBourseInfo_descriptor_;
}

const CMessageGetBourseInfo& CMessageGetBourseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageGetBourseInfo* CMessageGetBourseInfo::default_instance_ = NULL;

CMessageGetBourseInfo* CMessageGetBourseInfo::New() const {
  return new CMessageGetBourseInfo;
}

void CMessageGetBourseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageGetBourseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageGetBourseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageGetBourseInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageGetBourseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageGetBourseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageGetBourseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageGetBourseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageGetBourseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageGetBourseInfo::MergeFrom(const CMessageGetBourseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageGetBourseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetBourseInfo::CopyFrom(const CMessageGetBourseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageGetBourseInfo::Swap(CMessageGetBourseInfo* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageGetBourseInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageGetBourseInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageGetBourseInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageGetBourseInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseInfoNotice::kSessionIDFieldNumber;
const int CMessageBourseInfoNotice::kBuyListFieldNumber;
const int CMessageBourseInfoNotice::kSellListFieldNumber;
#endif  // !_MSC_VER

CMessageBourseInfoNotice::CMessageBourseInfoNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseInfoNotice::InitAsDefaultInstance() {  buylist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
  selllist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
}

CMessageBourseInfoNotice::CMessageBourseInfoNotice(const CMessageBourseInfoNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseInfoNotice::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  buylist_ = NULL;
  selllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseInfoNotice::~CMessageBourseInfoNotice() {
  SharedDtor();
}

void CMessageBourseInfoNotice::SharedDtor() {
  if (this != default_instance_) {
    delete buylist_;
    delete selllist_;
  }
}

const ::google::protobuf::Descriptor* CMessageBourseInfoNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseInfoNotice_descriptor_;
}

const CMessageBourseInfoNotice& CMessageBourseInfoNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseInfoNotice* CMessageBourseInfoNotice::default_instance_ = NULL;

CMessageBourseInfoNotice* CMessageBourseInfoNotice::New() const {
  return new CMessageBourseInfoNotice;
}

void CMessageBourseInfoNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    if (_has_bit(1)) {
      if (buylist_ != NULL) buylist_->::PBBourseDetailList::Clear();
    }
    if (_has_bit(2)) {
      if (selllist_ != NULL) selllist_->::PBBourseDetailList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseInfoNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuyList;
        break;
      }
      
      // optional .PBBourseDetailList BuyList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuyList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buylist()));
        if (input->ExpectTag(26)) goto parse_SellList;
        break;
      }
      
      // optional .PBBourseDetailList SellList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SellList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_selllist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseInfoNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseInfoNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buylist(), output);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->selllist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseInfoNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buylist(), target);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->selllist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseInfoNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional .PBBourseDetailList BuyList = 2;
    if (has_buylist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buylist());
    }
    
    // optional .PBBourseDetailList SellList = 3;
    if (has_selllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->selllist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseInfoNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseInfoNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseInfoNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseInfoNotice::MergeFrom(const CMessageBourseInfoNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      mutable_buylist()->::PBBourseDetailList::MergeFrom(from.buylist());
    }
    if (from._has_bit(2)) {
      mutable_selllist()->::PBBourseDetailList::MergeFrom(from.selllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseInfoNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseInfoNotice::CopyFrom(const CMessageBourseInfoNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseInfoNotice::Swap(CMessageBourseInfoNotice* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(buylist_, other->buylist_);
    std::swap(selllist_, other->selllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseInfoNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseInfoNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseInfoNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseInfoNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseAddDoc::kSessionIDFieldNumber;
const int CMessageBourseAddDoc::kAccountIDFieldNumber;
const int CMessageBourseAddDoc::kDetailFieldNumber;
const int CMessageBourseAddDoc::kTypeFieldNumber;
const int CMessageBourseAddDoc::kTaxFieldNumber;
const int CMessageBourseAddDoc::kRoleIDFieldNumber;
const int CMessageBourseAddDoc::kLevelFieldNumber;
const int CMessageBourseAddDoc::kWorldIDFieldNumber;
const int CMessageBourseAddDoc::kServerIDFieldNumber;
const int CMessageBourseAddDoc::kTaxIDFieldNumber;
const int CMessageBourseAddDoc::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMessageBourseAddDoc::CMessageBourseAddDoc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseAddDoc::InitAsDefaultInstance() {  detail_ = const_cast< ::PBBourseDetail*>(&::PBBourseDetail::default_instance());
}

CMessageBourseAddDoc::CMessageBourseAddDoc(const CMessageBourseAddDoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseAddDoc::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  accountid_ = 0u;
  detail_ = NULL;
  type_ = 0u;
  tax_ = 0u;
  roleid_ = 0u;
  level_ = 0u;
  worldid_ = 0u;
  serverid_ = 0u;
  taxid_ = 0u;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseAddDoc::~CMessageBourseAddDoc() {
  SharedDtor();
}

void CMessageBourseAddDoc::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

const ::google::protobuf::Descriptor* CMessageBourseAddDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseAddDoc_descriptor_;
}

const CMessageBourseAddDoc& CMessageBourseAddDoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseAddDoc* CMessageBourseAddDoc::default_instance_ = NULL;

CMessageBourseAddDoc* CMessageBourseAddDoc::New() const {
  return new CMessageBourseAddDoc;
}

void CMessageBourseAddDoc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    accountid_ = 0u;
    if (_has_bit(2)) {
      if (detail_ != NULL) detail_->::PBBourseDetail::Clear();
    }
    type_ = 0u;
    tax_ = 0u;
    roleid_ = 0u;
    level_ = 0u;
    worldid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serverid_ = 0u;
    taxid_ = 0u;
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseAddDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_Detail;
        break;
      }
      
      // optional .PBBourseDetail Detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_Detail:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_detail()));
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Type:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &type_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Tax;
        break;
      }
      
      // optional uint32 Tax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Tax:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &tax_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }
      
      // optional uint32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Level:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &level_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_WorldID;
        break;
      }
      
      // optional uint32 WorldID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_WorldID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_ServerID;
        break;
      }
      
      // optional uint32 ServerID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ServerID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &serverid_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_TaxID;
        break;
      }
      
      // optional uint32 TaxID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_TaxID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &taxid_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_GameID;
        break;
      }
      
      // optional uint32 GameID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_GameID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &gameid_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseAddDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseAddDoc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional .PBBourseDetail Detail = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->detail(), output);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 Tax = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->tax(), output);
  }
  
  // optional uint32 RoleID = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->roleid(), output);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 WorldID = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->worldid(), output);
  }
  
  // optional uint32 ServerID = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->serverid(), output);
  }
  
  // optional uint32 TaxID = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(10, this->taxid(), output);
  }
  
  // optional uint32 GameID = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(11, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseAddDoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional .PBBourseDetail Detail = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->detail(), target);
  }
  
  // optional uint32 Type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 Tax = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->tax(), target);
  }
  
  // optional uint32 RoleID = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->roleid(), target);
  }
  
  // optional uint32 Level = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 WorldID = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->worldid(), target);
  }
  
  // optional uint32 ServerID = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->serverid(), target);
  }
  
  // optional uint32 TaxID = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(10, this->taxid(), target);
  }
  
  // optional uint32 GameID = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(11, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseAddDoc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional .PBBourseDetail Detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->detail());
    }
    
    // optional uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->type());
    }
    
    // optional uint32 Tax = 5;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->tax());
    }
    
    // optional uint32 RoleID = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->level());
    }
    
    // optional uint32 WorldID = 8;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ServerID = 9;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->serverid());
    }
    
    // optional uint32 TaxID = 10;
    if (has_taxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->taxid());
    }
    
    // optional uint32 GameID = 11;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseAddDoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseAddDoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseAddDoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseAddDoc::MergeFrom(const CMessageBourseAddDoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      mutable_detail()->::PBBourseDetail::MergeFrom(from.detail());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_tax(from.tax());
    }
    if (from._has_bit(5)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(6)) {
      set_level(from.level());
    }
    if (from._has_bit(7)) {
      set_worldid(from.worldid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_serverid(from.serverid());
    }
    if (from._has_bit(9)) {
      set_taxid(from.taxid());
    }
    if (from._has_bit(10)) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseAddDoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseAddDoc::CopyFrom(const CMessageBourseAddDoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseAddDoc::Swap(CMessageBourseAddDoc* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(accountid_, other->accountid_);
    std::swap(detail_, other->detail_);
    std::swap(type_, other->type_);
    std::swap(tax_, other->tax_);
    std::swap(roleid_, other->roleid_);
    std::swap(level_, other->level_);
    std::swap(worldid_, other->worldid_);
    std::swap(serverid_, other->serverid_);
    std::swap(taxid_, other->taxid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseAddDoc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseAddDoc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseAddDoc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseAddDoc_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseS2DIncAccount::kSessionIDFieldNumber;
const int CMessageBourseS2DIncAccount::kMoneyFieldNumber;
const int CMessageBourseS2DIncAccount::kYbFieldNumber;
const int CMessageBourseS2DIncAccount::kAccountIDFieldNumber;
const int CMessageBourseS2DIncAccount::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageBourseS2DIncAccount::CMessageBourseS2DIncAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseS2DIncAccount::InitAsDefaultInstance() {}

CMessageBourseS2DIncAccount::CMessageBourseS2DIncAccount(const CMessageBourseS2DIncAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseS2DIncAccount::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  money_ = 0u;
  yb_ = 0u;
  accountid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseS2DIncAccount::~CMessageBourseS2DIncAccount() {
  SharedDtor();
}

void CMessageBourseS2DIncAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseS2DIncAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DIncAccount_descriptor_;
}

const CMessageBourseS2DIncAccount& CMessageBourseS2DIncAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseS2DIncAccount* CMessageBourseS2DIncAccount::default_instance_ = NULL;

CMessageBourseS2DIncAccount* CMessageBourseS2DIncAccount::New() const {
  return new CMessageBourseS2DIncAccount;
}

void CMessageBourseS2DIncAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    money_ = 0u;
    yb_ = 0u;
    accountid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseS2DIncAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Yb;
        break;
      }
      
      // optional uint32 Yb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yb_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseS2DIncAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseS2DIncAccount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->yb(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseS2DIncAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->yb(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseS2DIncAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Yb = 3;
    if (has_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yb());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseS2DIncAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseS2DIncAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseS2DIncAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseS2DIncAccount::MergeFrom(const CMessageBourseS2DIncAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_yb(from.yb());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseS2DIncAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DIncAccount::CopyFrom(const CMessageBourseS2DIncAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DIncAccount::Swap(CMessageBourseS2DIncAccount* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(money_, other->money_);
    std::swap(yb_, other->yb_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseS2DIncAccount::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseS2DIncAccount::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseS2DIncAccount::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DIncAccount_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseS2DDecAccount::kSessionIDFieldNumber;
const int CMessageBourseS2DDecAccount::kMoneyFieldNumber;
const int CMessageBourseS2DDecAccount::kYbFieldNumber;
const int CMessageBourseS2DDecAccount::kAccountIDFieldNumber;
const int CMessageBourseS2DDecAccount::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageBourseS2DDecAccount::CMessageBourseS2DDecAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseS2DDecAccount::InitAsDefaultInstance() {}

CMessageBourseS2DDecAccount::CMessageBourseS2DDecAccount(const CMessageBourseS2DDecAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseS2DDecAccount::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  money_ = 0u;
  yb_ = 0u;
  accountid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseS2DDecAccount::~CMessageBourseS2DDecAccount() {
  SharedDtor();
}

void CMessageBourseS2DDecAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseS2DDecAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DDecAccount_descriptor_;
}

const CMessageBourseS2DDecAccount& CMessageBourseS2DDecAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseS2DDecAccount* CMessageBourseS2DDecAccount::default_instance_ = NULL;

CMessageBourseS2DDecAccount* CMessageBourseS2DDecAccount::New() const {
  return new CMessageBourseS2DDecAccount;
}

void CMessageBourseS2DDecAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    money_ = 0u;
    yb_ = 0u;
    accountid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseS2DDecAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Yb;
        break;
      }
      
      // optional uint32 Yb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yb_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseS2DDecAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseS2DDecAccount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->yb(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseS2DDecAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->yb(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseS2DDecAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Yb = 3;
    if (has_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yb());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseS2DDecAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseS2DDecAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseS2DDecAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseS2DDecAccount::MergeFrom(const CMessageBourseS2DDecAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_yb(from.yb());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseS2DDecAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DDecAccount::CopyFrom(const CMessageBourseS2DDecAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DDecAccount::Swap(CMessageBourseS2DDecAccount* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(money_, other->money_);
    std::swap(yb_, other->yb_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseS2DDecAccount::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseS2DDecAccount::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseS2DDecAccount::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DDecAccount_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseS2DGetAccount::kSessionIDFieldNumber;
const int CMessageBourseS2DGetAccount::kAccountIDFieldNumber;
const int CMessageBourseS2DGetAccount::kCodeFieldNumber;
#endif  // !_MSC_VER

CMessageBourseS2DGetAccount::CMessageBourseS2DGetAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseS2DGetAccount::InitAsDefaultInstance() {}

CMessageBourseS2DGetAccount::CMessageBourseS2DGetAccount(const CMessageBourseS2DGetAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseS2DGetAccount::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  accountid_ = 0u;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseS2DGetAccount::~CMessageBourseS2DGetAccount() {
  SharedDtor();
}

void CMessageBourseS2DGetAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseS2DGetAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DGetAccount_descriptor_;
}

const CMessageBourseS2DGetAccount& CMessageBourseS2DGetAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseS2DGetAccount* CMessageBourseS2DGetAccount::default_instance_ = NULL;

CMessageBourseS2DGetAccount* CMessageBourseS2DGetAccount::New() const {
  return new CMessageBourseS2DGetAccount;
}

void CMessageBourseS2DGetAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    accountid_ = 0u;
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseS2DGetAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseS2DGetAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseS2DGetAccount::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseS2DGetAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 Code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseS2DGetAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseS2DGetAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseS2DGetAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseS2DGetAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseS2DGetAccount::MergeFrom(const CMessageBourseS2DGetAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseS2DGetAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DGetAccount::CopyFrom(const CMessageBourseS2DGetAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseS2DGetAccount::Swap(CMessageBourseS2DGetAccount* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(accountid_, other->accountid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseS2DGetAccount::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseS2DGetAccount::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseS2DGetAccount::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseS2DGetAccount_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseD2SAccountNotice::kSessionIDFieldNumber;
const int CMessageBourseD2SAccountNotice::kMoneyFieldNumber;
const int CMessageBourseD2SAccountNotice::kYbFieldNumber;
const int CMessageBourseD2SAccountNotice::kAccountIDFieldNumber;
const int CMessageBourseD2SAccountNotice::kCodeFieldNumber;
const int CMessageBourseD2SAccountNotice::kResultFieldNumber;
const int CMessageBourseD2SAccountNotice::kParame1FieldNumber;
const int CMessageBourseD2SAccountNotice::kParame2FieldNumber;
#endif  // !_MSC_VER

CMessageBourseD2SAccountNotice::CMessageBourseD2SAccountNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseD2SAccountNotice::InitAsDefaultInstance() {}

CMessageBourseD2SAccountNotice::CMessageBourseD2SAccountNotice(const CMessageBourseD2SAccountNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseD2SAccountNotice::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = 0u;
  money_ = 0u;
  yb_ = 0u;
  accountid_ = 0u;
  code_ = 0u;
  result_ = 0u;
  parame1_ = 0u;
  parame2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseD2SAccountNotice::~CMessageBourseD2SAccountNotice() {
  SharedDtor();
}

void CMessageBourseD2SAccountNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseD2SAccountNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseD2SAccountNotice_descriptor_;
}

const CMessageBourseD2SAccountNotice& CMessageBourseD2SAccountNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseD2SAccountNotice* CMessageBourseD2SAccountNotice::default_instance_ = NULL;

CMessageBourseD2SAccountNotice* CMessageBourseD2SAccountNotice::New() const {
  return new CMessageBourseD2SAccountNotice;
}

void CMessageBourseD2SAccountNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = 0u;
    money_ = 0u;
    yb_ = 0u;
    accountid_ = 0u;
    code_ = 0u;
    result_ = 0u;
    parame1_ = 0u;
    parame2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseD2SAccountNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_Money;
        break;
      }
      
      // optional uint32 Money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Money:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &money_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Yb;
        break;
      }
      
      // optional uint32 Yb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Yb:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &yb_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_Code;
        break;
      }
      
      // optional uint32 Code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Code:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &code_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_Result;
        break;
      }
      
      // optional uint32 Result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_Parame1;
        break;
      }
      
      // optional uint32 Parame1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame1:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame1_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_Parame2;
        break;
      }
      
      // optional uint32 Parame2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Parame2:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &parame2_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseD2SAccountNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseD2SAccountNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->sessionid(), output);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->money(), output);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->yb(), output);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->accountid(), output);
  }
  
  // optional uint32 Code = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->code(), output);
  }
  
  // optional uint32 Result = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->result(), output);
  }
  
  // optional uint32 Parame1 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(7, this->parame1(), output);
  }
  
  // optional uint32 Parame2 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->parame2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseD2SAccountNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SessionID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->sessionid(), target);
  }
  
  // optional uint32 Money = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->money(), target);
  }
  
  // optional uint32 Yb = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->yb(), target);
  }
  
  // optional uint32 AccountID = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->accountid(), target);
  }
  
  // optional uint32 Code = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->code(), target);
  }
  
  // optional uint32 Result = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->result(), target);
  }
  
  // optional uint32 Parame1 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(7, this->parame1(), target);
  }
  
  // optional uint32 Parame2 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->parame2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseD2SAccountNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 Money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->money());
    }
    
    // optional uint32 Yb = 3;
    if (has_yb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->yb());
    }
    
    // optional uint32 AccountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 Code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->code());
    }
    
    // optional uint32 Result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional uint32 Parame1 = 7;
    if (has_parame1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame1());
    }
    
    // optional uint32 Parame2 = 8;
    if (has_parame2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->parame2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseD2SAccountNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseD2SAccountNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseD2SAccountNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseD2SAccountNotice::MergeFrom(const CMessageBourseD2SAccountNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_money(from.money());
    }
    if (from._has_bit(2)) {
      set_yb(from.yb());
    }
    if (from._has_bit(3)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(4)) {
      set_code(from.code());
    }
    if (from._has_bit(5)) {
      set_result(from.result());
    }
    if (from._has_bit(6)) {
      set_parame1(from.parame1());
    }
    if (from._has_bit(7)) {
      set_parame2(from.parame2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseD2SAccountNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseD2SAccountNotice::CopyFrom(const CMessageBourseD2SAccountNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseD2SAccountNotice::Swap(CMessageBourseD2SAccountNotice* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(money_, other->money_);
    std::swap(yb_, other->yb_);
    std::swap(accountid_, other->accountid_);
    std::swap(code_, other->code_);
    std::swap(result_, other->result_);
    std::swap(parame1_, other->parame1_);
    std::swap(parame2_, other->parame2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseD2SAccountNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseD2SAccountNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseD2SAccountNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseD2SAccountNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageUpdatePlayerInfoResponse::kRoleIDFieldNumber;
const int CMessageUpdatePlayerInfoResponse::kSessionIDFieldNumber;
const int CMessageUpdatePlayerInfoResponse::kResultCodeFieldNumber;
#endif  // !_MSC_VER

CMessageUpdatePlayerInfoResponse::CMessageUpdatePlayerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageUpdatePlayerInfoResponse::InitAsDefaultInstance() {}

CMessageUpdatePlayerInfoResponse::CMessageUpdatePlayerInfoResponse(const CMessageUpdatePlayerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0u;
  sessionid_ = 0u;
  resultcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageUpdatePlayerInfoResponse::~CMessageUpdatePlayerInfoResponse() {
  SharedDtor();
}

void CMessageUpdatePlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePlayerInfoResponse_descriptor_;
}

const CMessageUpdatePlayerInfoResponse& CMessageUpdatePlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageUpdatePlayerInfoResponse* CMessageUpdatePlayerInfoResponse::default_instance_ = NULL;

CMessageUpdatePlayerInfoResponse* CMessageUpdatePlayerInfoResponse::New() const {
  return new CMessageUpdatePlayerInfoResponse;
}

void CMessageUpdatePlayerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0u;
    sessionid_ = 0u;
    resultcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageUpdatePlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SessionID;
        break;
      }
      
      // optional uint32 SessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SessionID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sessionid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_ResultCode;
        break;
      }
      
      // optional uint32 ResultCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ResultCode:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &resultcode_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageUpdatePlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageUpdatePlayerInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->roleid(), output);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sessionid(), output);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->resultcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageUpdatePlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 RoleID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->roleid(), target);
  }
  
  // optional uint32 SessionID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sessionid(), target);
  }
  
  // optional uint32 ResultCode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->resultcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageUpdatePlayerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RoleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
    // optional uint32 SessionID = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sessionid());
    }
    
    // optional uint32 ResultCode = 3;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->resultcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageUpdatePlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageUpdatePlayerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageUpdatePlayerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageUpdatePlayerInfoResponse::MergeFrom(const CMessageUpdatePlayerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_roleid(from.roleid());
    }
    if (from._has_bit(1)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(2)) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageUpdatePlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoResponse::CopyFrom(const CMessageUpdatePlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageUpdatePlayerInfoResponse::Swap(CMessageUpdatePlayerInfoResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageUpdatePlayerInfoResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageUpdatePlayerInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageUpdatePlayerInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageUpdatePlayerInfoResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBoursePlayerListNotice::kAccountIDFieldNumber;
const int CMessageBoursePlayerListNotice::kBuyListFieldNumber;
const int CMessageBoursePlayerListNotice::kSellListFieldNumber;
#endif  // !_MSC_VER

CMessageBoursePlayerListNotice::CMessageBoursePlayerListNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBoursePlayerListNotice::InitAsDefaultInstance() {  buylist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
  selllist_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
}

CMessageBoursePlayerListNotice::CMessageBoursePlayerListNotice(const CMessageBoursePlayerListNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBoursePlayerListNotice::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  buylist_ = NULL;
  selllist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBoursePlayerListNotice::~CMessageBoursePlayerListNotice() {
  SharedDtor();
}

void CMessageBoursePlayerListNotice::SharedDtor() {
  if (this != default_instance_) {
    delete buylist_;
    delete selllist_;
  }
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerListNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerListNotice_descriptor_;
}

const CMessageBoursePlayerListNotice& CMessageBoursePlayerListNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBoursePlayerListNotice* CMessageBoursePlayerListNotice::default_instance_ = NULL;

CMessageBoursePlayerListNotice* CMessageBoursePlayerListNotice::New() const {
  return new CMessageBoursePlayerListNotice;
}

void CMessageBoursePlayerListNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (_has_bit(1)) {
      if (buylist_ != NULL) buylist_->::PBBourseDetailList::Clear();
    }
    if (_has_bit(2)) {
      if (selllist_ != NULL) selllist_->::PBBourseDetailList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBoursePlayerListNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_BuyList;
        break;
      }
      
      // optional .PBBourseDetailList BuyList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_BuyList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buylist()));
        if (input->ExpectTag(26)) goto parse_SellList;
        break;
      }
      
      // optional .PBBourseDetailList SellList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_SellList:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_selllist()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBoursePlayerListNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBoursePlayerListNotice::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buylist(), output);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->selllist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBoursePlayerListNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional .PBBourseDetailList BuyList = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buylist(), target);
  }
  
  // optional .PBBourseDetailList SellList = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->selllist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBoursePlayerListNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional .PBBourseDetailList BuyList = 2;
    if (has_buylist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buylist());
    }
    
    // optional .PBBourseDetailList SellList = 3;
    if (has_selllist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->selllist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBoursePlayerListNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBoursePlayerListNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBoursePlayerListNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBoursePlayerListNotice::MergeFrom(const CMessageBoursePlayerListNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      mutable_buylist()->::PBBourseDetailList::MergeFrom(from.buylist());
    }
    if (from._has_bit(2)) {
      mutable_selllist()->::PBBourseDetailList::MergeFrom(from.selllist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBoursePlayerListNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerListNotice::CopyFrom(const CMessageBoursePlayerListNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerListNotice::Swap(CMessageBoursePlayerListNotice* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(buylist_, other->buylist_);
    std::swap(selllist_, other->selllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBoursePlayerListNotice::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerListNotice::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBoursePlayerListNotice::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerListNotice_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBoursePlayerListGet::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CMessageBoursePlayerListGet::CMessageBoursePlayerListGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBoursePlayerListGet::InitAsDefaultInstance() {}

CMessageBoursePlayerListGet::CMessageBoursePlayerListGet(const CMessageBoursePlayerListGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBoursePlayerListGet::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBoursePlayerListGet::~CMessageBoursePlayerListGet() {
  SharedDtor();
}

void CMessageBoursePlayerListGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerListGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerListGet_descriptor_;
}

const CMessageBoursePlayerListGet& CMessageBoursePlayerListGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBoursePlayerListGet* CMessageBoursePlayerListGet::default_instance_ = NULL;

CMessageBoursePlayerListGet* CMessageBoursePlayerListGet::New() const {
  return new CMessageBoursePlayerListGet;
}

void CMessageBoursePlayerListGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBoursePlayerListGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBoursePlayerListGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBoursePlayerListGet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBoursePlayerListGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBoursePlayerListGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBoursePlayerListGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBoursePlayerListGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBoursePlayerListGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBoursePlayerListGet::MergeFrom(const CMessageBoursePlayerListGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBoursePlayerListGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerListGet::CopyFrom(const CMessageBoursePlayerListGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBoursePlayerListGet::Swap(CMessageBoursePlayerListGet* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBoursePlayerListGet::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBoursePlayerListGet::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBoursePlayerListGet::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBoursePlayerListGet_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseTrade::kBuyPriceFieldNumber;
const int CMessageBourseTrade::kSellPriceFieldNumber;
const int CMessageBourseTrade::kRatingIdFieldNumber;
const int CMessageBourseTrade::kWorldidFieldNumber;
#endif  // !_MSC_VER

CMessageBourseTrade::CMessageBourseTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseTrade::InitAsDefaultInstance() {}

CMessageBourseTrade::CMessageBourseTrade(const CMessageBourseTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseTrade::SharedCtor() {
  _cached_size_ = 0;
  buyprice_ = 0u;
  sellprice_ = 0u;
  rating_id_ = 0u;
  worldid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseTrade::~CMessageBourseTrade() {
  SharedDtor();
}

void CMessageBourseTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseTrade_descriptor_;
}

const CMessageBourseTrade& CMessageBourseTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseTrade* CMessageBourseTrade::default_instance_ = NULL;

CMessageBourseTrade* CMessageBourseTrade::New() const {
  return new CMessageBourseTrade;
}

void CMessageBourseTrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyprice_ = 0u;
    sellprice_ = 0u;
    rating_id_ = 0u;
    worldid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 BuyPrice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &buyprice_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_SellPrice;
        break;
      }
      
      // optional uint32 SellPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_SellPrice:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &sellprice_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_Rating_id;
        break;
      }
      
      // optional uint32 Rating_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Rating_id:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &rating_id_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_Worldid;
        break;
      }
      
      // optional uint32 Worldid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_Worldid:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &worldid_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseTrade::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 BuyPrice = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->buyprice(), output);
  }
  
  // optional uint32 SellPrice = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->sellprice(), output);
  }
  
  // optional uint32 Rating_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->rating_id(), output);
  }
  
  // optional uint32 Worldid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(4, this->worldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 BuyPrice = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->buyprice(), target);
  }
  
  // optional uint32 SellPrice = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->sellprice(), target);
  }
  
  // optional uint32 Rating_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->rating_id(), target);
  }
  
  // optional uint32 Worldid = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(4, this->worldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseTrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyPrice = 1;
    if (has_buyprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->buyprice());
    }
    
    // optional uint32 SellPrice = 2;
    if (has_sellprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->sellprice());
    }
    
    // optional uint32 Rating_id = 3;
    if (has_rating_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->rating_id());
    }
    
    // optional uint32 Worldid = 4;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->worldid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseTrade::MergeFrom(const CMessageBourseTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_buyprice(from.buyprice());
    }
    if (from._has_bit(1)) {
      set_sellprice(from.sellprice());
    }
    if (from._has_bit(2)) {
      set_rating_id(from.rating_id());
    }
    if (from._has_bit(3)) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseTrade::CopyFrom(const CMessageBourseTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseTrade::Swap(CMessageBourseTrade* other) {
  if (other != this) {
    std::swap(buyprice_, other->buyprice_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(rating_id_, other->rating_id_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseTrade::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseTrade::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseTrade::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseTrade_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2DBourseDecBuyDoc::kDocFieldNumber;
const int CMessageS2DBourseDecBuyDoc::kAccountIDFieldNumber;
const int CMessageS2DBourseDecBuyDoc::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageS2DBourseDecBuyDoc::CMessageS2DBourseDecBuyDoc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2DBourseDecBuyDoc::InitAsDefaultInstance() {}

CMessageS2DBourseDecBuyDoc::CMessageS2DBourseDecBuyDoc(const CMessageS2DBourseDecBuyDoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2DBourseDecBuyDoc::SharedCtor() {
  _cached_size_ = 0;
  doc_ = 0u;
  accountid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2DBourseDecBuyDoc::~CMessageS2DBourseDecBuyDoc() {
  SharedDtor();
}

void CMessageS2DBourseDecBuyDoc::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2DBourseDecBuyDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2DBourseDecBuyDoc_descriptor_;
}

const CMessageS2DBourseDecBuyDoc& CMessageS2DBourseDecBuyDoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2DBourseDecBuyDoc* CMessageS2DBourseDecBuyDoc::default_instance_ = NULL;

CMessageS2DBourseDecBuyDoc* CMessageS2DBourseDecBuyDoc::New() const {
  return new CMessageS2DBourseDecBuyDoc;
}

void CMessageS2DBourseDecBuyDoc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doc_ = 0u;
    accountid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2DBourseDecBuyDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Doc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &doc_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2DBourseDecBuyDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2DBourseDecBuyDoc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Doc = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->doc(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2DBourseDecBuyDoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Doc = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->doc(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2DBourseDecBuyDoc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Doc = 1;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->doc());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2DBourseDecBuyDoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2DBourseDecBuyDoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2DBourseDecBuyDoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2DBourseDecBuyDoc::MergeFrom(const CMessageS2DBourseDecBuyDoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_doc(from.doc());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2DBourseDecBuyDoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2DBourseDecBuyDoc::CopyFrom(const CMessageS2DBourseDecBuyDoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2DBourseDecBuyDoc::Swap(CMessageS2DBourseDecBuyDoc* other) {
  if (other != this) {
    std::swap(doc_, other->doc_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2DBourseDecBuyDoc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2DBourseDecBuyDoc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2DBourseDecBuyDoc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2DBourseDecBuyDoc_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageS2DBourseDecSellDoc::kDocFieldNumber;
const int CMessageS2DBourseDecSellDoc::kAccountIDFieldNumber;
const int CMessageS2DBourseDecSellDoc::kRoleIDFieldNumber;
#endif  // !_MSC_VER

CMessageS2DBourseDecSellDoc::CMessageS2DBourseDecSellDoc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageS2DBourseDecSellDoc::InitAsDefaultInstance() {}

CMessageS2DBourseDecSellDoc::CMessageS2DBourseDecSellDoc(const CMessageS2DBourseDecSellDoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageS2DBourseDecSellDoc::SharedCtor() {
  _cached_size_ = 0;
  doc_ = 0u;
  accountid_ = 0u;
  roleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageS2DBourseDecSellDoc::~CMessageS2DBourseDecSellDoc() {
  SharedDtor();
}

void CMessageS2DBourseDecSellDoc::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageS2DBourseDecSellDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2DBourseDecSellDoc_descriptor_;
}

const CMessageS2DBourseDecSellDoc& CMessageS2DBourseDecSellDoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageS2DBourseDecSellDoc* CMessageS2DBourseDecSellDoc::default_instance_ = NULL;

CMessageS2DBourseDecSellDoc* CMessageS2DBourseDecSellDoc::New() const {
  return new CMessageS2DBourseDecSellDoc;
}

void CMessageS2DBourseDecSellDoc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doc_ = 0u;
    accountid_ = 0u;
    roleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageS2DBourseDecSellDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 Doc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &doc_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }
      
      // optional uint32 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_AccountID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_RoleID;
        break;
      }
      
      // optional uint32 RoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_RoleID:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &roleid_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageS2DBourseDecSellDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageS2DBourseDecSellDoc::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 Doc = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->doc(), output);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(3, this->roleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageS2DBourseDecSellDoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Doc = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->doc(), target);
  }
  
  // optional uint32 AccountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 RoleID = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(3, this->roleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageS2DBourseDecSellDoc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Doc = 1;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->doc());
    }
    
    // optional uint32 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 RoleID = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->roleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageS2DBourseDecSellDoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageS2DBourseDecSellDoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageS2DBourseDecSellDoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageS2DBourseDecSellDoc::MergeFrom(const CMessageS2DBourseDecSellDoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_doc(from.doc());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageS2DBourseDecSellDoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2DBourseDecSellDoc::CopyFrom(const CMessageS2DBourseDecSellDoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageS2DBourseDecSellDoc::Swap(CMessageS2DBourseDecSellDoc* other) {
  if (other != this) {
    std::swap(doc_, other->doc_);
    std::swap(accountid_, other->accountid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageS2DBourseDecSellDoc::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageS2DBourseDecSellDoc::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageS2DBourseDecSellDoc::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageS2DBourseDecSellDoc_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageBourseLogQuery::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CMessageBourseLogQuery::CMessageBourseLogQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageBourseLogQuery::InitAsDefaultInstance() {}

CMessageBourseLogQuery::CMessageBourseLogQuery(const CMessageBourseLogQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageBourseLogQuery::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageBourseLogQuery::~CMessageBourseLogQuery() {
  SharedDtor();
}

void CMessageBourseLogQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CMessageBourseLogQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseLogQuery_descriptor_;
}

const CMessageBourseLogQuery& CMessageBourseLogQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageBourseLogQuery* CMessageBourseLogQuery::default_instance_ = NULL;

CMessageBourseLogQuery* CMessageBourseLogQuery::New() const {
  return new CMessageBourseLogQuery;
}

void CMessageBourseLogQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageBourseLogQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageBourseLogQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageBourseLogQuery::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageBourseLogQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageBourseLogQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageBourseLogQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageBourseLogQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageBourseLogQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageBourseLogQuery::MergeFrom(const CMessageBourseLogQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageBourseLogQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseLogQuery::CopyFrom(const CMessageBourseLogQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageBourseLogQuery::Swap(CMessageBourseLogQuery* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageBourseLogQuery::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageBourseLogQuery::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageBourseLogQuery::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageBourseLogQuery_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CMessageD2SBourseLog::kAccountIDFieldNumber;
const int CMessageD2SBourseLog::kBuyLogFieldNumber;
const int CMessageD2SBourseLog::kSellLogFieldNumber;
#endif  // !_MSC_VER

CMessageD2SBourseLog::CMessageD2SBourseLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMessageD2SBourseLog::InitAsDefaultInstance() {  buy_log_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
  sell_log_ = const_cast< ::PBBourseDetailList*>(&::PBBourseDetailList::default_instance());
}

CMessageD2SBourseLog::CMessageD2SBourseLog(const CMessageD2SBourseLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMessageD2SBourseLog::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  buy_log_ = NULL;
  sell_log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageD2SBourseLog::~CMessageD2SBourseLog() {
  SharedDtor();
}

void CMessageD2SBourseLog::SharedDtor() {
  if (this != default_instance_) {
    delete buy_log_;
    delete sell_log_;
  }
}

const ::google::protobuf::Descriptor* CMessageD2SBourseLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageD2SBourseLog_descriptor_;
}

const CMessageD2SBourseLog& CMessageD2SBourseLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fmsg_5fpb_2ehxx();  return *default_instance_;
}

CMessageD2SBourseLog* CMessageD2SBourseLog::default_instance_ = NULL;

CMessageD2SBourseLog* CMessageD2SBourseLog::New() const {
  return new CMessageD2SBourseLog;
}

void CMessageD2SBourseLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (_has_bit(1)) {
      if (buy_log_ != NULL) buy_log_->::PBBourseDetailList::Clear();
    }
    if (_has_bit(2)) {
      if (sell_log_ != NULL) sell_log_->::PBBourseDetailList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageD2SBourseLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &accountid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_buy_log;
        break;
      }
      
      // optional .PBBourseDetailList buy_log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_buy_log:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_buy_log()));
        if (input->ExpectTag(26)) goto parse_sell_log;
        break;
      }
      
      // optional .PBBourseDetailList sell_log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sell_log:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_sell_log()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMessageD2SBourseLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CMessageD2SBourseLog::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional .PBBourseDetailList buy_log = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->buy_log(), output);
  }
  
  // optional .PBBourseDetailList sell_log = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->sell_log(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMessageD2SBourseLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 AccountID = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional .PBBourseDetailList buy_log = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->buy_log(), target);
  }
  
  // optional .PBBourseDetailList sell_log = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->sell_log(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMessageD2SBourseLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->accountid());
    }
    
    // optional .PBBourseDetailList buy_log = 2;
    if (has_buy_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->buy_log());
    }
    
    // optional .PBBourseDetailList sell_log = 3;
    if (has_sell_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->sell_log());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CMessageD2SBourseLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageD2SBourseLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageD2SBourseLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageD2SBourseLog::MergeFrom(const CMessageD2SBourseLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(1)) {
      mutable_buy_log()->::PBBourseDetailList::MergeFrom(from.buy_log());
    }
    if (from._has_bit(2)) {
      mutable_sell_log()->::PBBourseDetailList::MergeFrom(from.sell_log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageD2SBourseLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageD2SBourseLog::CopyFrom(const CMessageD2SBourseLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageD2SBourseLog::Swap(CMessageD2SBourseLog* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(buy_log_, other->buy_log_);
    std::swap(sell_log_, other->sell_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CMessageD2SBourseLog::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* CMessageD2SBourseLog::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CMessageD2SBourseLog::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CMessageD2SBourseLog_reflection_;
}
