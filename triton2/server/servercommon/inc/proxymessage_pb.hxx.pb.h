// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_proxymessage_5fpb_2ehxx__INCLUDED
#define PROTOBUF_proxymessage_5fpb_2ehxx__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proxymessage_5fpb_2ehxx();
void protobuf_AssignDesc_proxymessage_5fpb_2ehxx();
void protobuf_ShutdownFile_proxymessage_5fpb_2ehxx();

class CProxyHead;

enum EMProxyEntityType {
  CET_PROXYSERVER = 1,
  CET_GAMESERVER = 2,
  CET_DBSERVER = 3,
  CET_OTHERSERVER = 4,
  CET_GLOBALPROXY = 6,
  CET_DUNGEON = 7
};
const ::google::protobuf::EnumDescriptor* EMProxyEntityType_descriptor();
bool EMProxyEntityType_IsValid(int value);
const EMProxyEntityType EMProxyEntityType_MIN = CET_PROXYSERVER;
const EMProxyEntityType EMProxyEntityType_MAX = CET_DUNGEON;

inline const ::std::string& EMProxyEntityType_Name(EMProxyEntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMProxyEntityType_descriptor(), value);
}
inline bool EMProxyEntityType_Parse(
    const ::std::string& name, EMProxyEntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMProxyEntityType>(
    EMProxyEntityType_descriptor(), name, value);
}
enum EMProxyCmd {
  CMD_NULL = 0,
  CMD_REGKEY = 1,
  CMD_START = 2,
  CMD_REGSERVER = 3,
  CMD_KEEPALIVE = 4
};
const ::google::protobuf::EnumDescriptor* EMProxyCmd_descriptor();
bool EMProxyCmd_IsValid(int value);
const EMProxyCmd EMProxyCmd_MIN = CMD_NULL;
const EMProxyCmd EMProxyCmd_MAX = CMD_KEEPALIVE;

inline const ::std::string& EMProxyCmd_Name(EMProxyCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMProxyCmd_descriptor(), value);
}
inline bool EMProxyCmd_Parse(
    const ::std::string& name, EMProxyCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMProxyCmd>(
    EMProxyCmd_descriptor(), name, value);
}
enum EMTransType {
  TRANS_P2P = 0,
  TRANS_P2G = 2,
  TRANS_BROADCAST = 3,
  TRANS_BYKEY = 4
};
const ::google::protobuf::EnumDescriptor* EMTransType_descriptor();
bool EMTransType_IsValid(int value);
const EMTransType EMTransType_MIN = TRANS_P2P;
const EMTransType EMTransType_MAX = TRANS_BYKEY;

inline const ::std::string& EMTransType_Name(EMTransType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMTransType_descriptor(), value);
}
inline bool EMTransType_Parse(
    const ::std::string& name, EMTransType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMTransType>(
    EMTransType_descriptor(), name, value);
}
// ===================================================================

class CProxyHead : public ::google::protobuf::Message {
 public:
  CProxyHead();
  virtual ~CProxyHead();
  
  CProxyHead(const CProxyHead& from);
  
  inline CProxyHead& operator=(const CProxyHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CProxyHead& default_instance();
  void Swap(CProxyHead* other);
  
  // implements Message ----------------------------------------------
  
  CProxyHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProxyHead& from);
  void MergeFrom(const CProxyHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 TotalLength = 1;
  inline bool has_totallength() const;
  inline void clear_totallength();
  static const int kTotalLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 totallength() const;
  inline void set_totallength(::google::protobuf::uint32 value);
  
  // optional uint32 SrcFE = 2;
  inline bool has_srcfe() const;
  inline void clear_srcfe();
  static const int kSrcFEFieldNumber = 2;
  inline ::google::protobuf::uint32 srcfe() const;
  inline void set_srcfe(::google::protobuf::uint32 value);
  
  // optional uint32 SrcID = 3;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);
  
  // optional uint32 DstFE = 4;
  inline bool has_dstfe() const;
  inline void clear_dstfe();
  static const int kDstFEFieldNumber = 4;
  inline ::google::protobuf::uint32 dstfe() const;
  inline void set_dstfe(::google::protobuf::uint32 value);
  
  // optional .EMTransType TransferType = 5;
  inline bool has_transfertype() const;
  inline void clear_transfertype();
  static const int kTransferTypeFieldNumber = 5;
  inline EMTransType transfertype() const;
  inline void set_transfertype(EMTransType value);
  
  // optional uint32 DstID = 6;
  inline bool has_dstid() const;
  inline void clear_dstid();
  static const int kDstIDFieldNumber = 6;
  inline ::google::protobuf::uint32 dstid() const;
  inline void set_dstid(::google::protobuf::uint32 value);
  
  // optional uint32 Uin = 7;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 7;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);
  
  // optional .EMProxyCmd OpFlag = 8;
  inline bool has_opflag() const;
  inline void clear_opflag();
  static const int kOpFlagFieldNumber = 8;
  inline EMProxyCmd opflag() const;
  inline void set_opflag(EMProxyCmd value);
  
  // optional uint32 OptLength = 9 [default = 0];
  inline bool has_optlength() const;
  inline void clear_optlength();
  static const int kOptLengthFieldNumber = 9;
  inline ::google::protobuf::uint32 optlength() const;
  inline void set_optlength(::google::protobuf::uint32 value);
  
  // optional bytes Option = 10;
  inline bool has_option() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 10;
  inline const ::std::string& option() const;
  inline void set_option(const ::std::string& value);
  inline void set_option(const char* value);
  inline void set_option(const void* value, size_t size);
  inline ::std::string* mutable_option();
  
  // optional uint32 SrcGameID = 11;
  inline bool has_srcgameid() const;
  inline void clear_srcgameid();
  static const int kSrcGameIDFieldNumber = 11;
  inline ::google::protobuf::uint32 srcgameid() const;
  inline void set_srcgameid(::google::protobuf::uint32 value);
  
  // optional uint32 DesGameID = 12;
  inline bool has_desgameid() const;
  inline void clear_desgameid();
  static const int kDesGameIDFieldNumber = 12;
  inline ::google::protobuf::uint32 desgameid() const;
  inline void set_desgameid(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 totallength_;
  ::google::protobuf::uint32 srcfe_;
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 dstfe_;
  int transfertype_;
  ::google::protobuf::uint32 dstid_;
  ::google::protobuf::uint32 uin_;
  int opflag_;
  ::google::protobuf::uint32 optlength_;
  ::std::string* option_;
  static const ::std::string _default_option_;
  ::google::protobuf::uint32 srcgameid_;
  ::google::protobuf::uint32 desgameid_;
  friend void  protobuf_AddDesc_proxymessage_5fpb_2ehxx();
  friend void protobuf_AssignDesc_proxymessage_5fpb_2ehxx();
  friend void protobuf_ShutdownFile_proxymessage_5fpb_2ehxx();
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CProxyHead* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// CProxyHead

// optional uint32 TotalLength = 1;
inline bool CProxyHead::has_totallength() const {
  return _has_bit(0);
}
inline void CProxyHead::clear_totallength() {
  totallength_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CProxyHead::totallength() const {
  return totallength_;
}
inline void CProxyHead::set_totallength(::google::protobuf::uint32 value) {
  _set_bit(0);
  totallength_ = value;
}

// optional uint32 SrcFE = 2;
inline bool CProxyHead::has_srcfe() const {
  return _has_bit(1);
}
inline void CProxyHead::clear_srcfe() {
  srcfe_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CProxyHead::srcfe() const {
  return srcfe_;
}
inline void CProxyHead::set_srcfe(::google::protobuf::uint32 value) {
  _set_bit(1);
  srcfe_ = value;
}

// optional uint32 SrcID = 3;
inline bool CProxyHead::has_srcid() const {
  return _has_bit(2);
}
inline void CProxyHead::clear_srcid() {
  srcid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CProxyHead::srcid() const {
  return srcid_;
}
inline void CProxyHead::set_srcid(::google::protobuf::uint32 value) {
  _set_bit(2);
  srcid_ = value;
}

// optional uint32 DstFE = 4;
inline bool CProxyHead::has_dstfe() const {
  return _has_bit(3);
}
inline void CProxyHead::clear_dstfe() {
  dstfe_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CProxyHead::dstfe() const {
  return dstfe_;
}
inline void CProxyHead::set_dstfe(::google::protobuf::uint32 value) {
  _set_bit(3);
  dstfe_ = value;
}

// optional .EMTransType TransferType = 5;
inline bool CProxyHead::has_transfertype() const {
  return _has_bit(4);
}
inline void CProxyHead::clear_transfertype() {
  transfertype_ = 0;
  _clear_bit(4);
}
inline EMTransType CProxyHead::transfertype() const {
  return static_cast< EMTransType >(transfertype_);
}
inline void CProxyHead::set_transfertype(EMTransType value) {
  GOOGLE_DCHECK(EMTransType_IsValid(value));
  _set_bit(4);
  transfertype_ = value;
}

// optional uint32 DstID = 6;
inline bool CProxyHead::has_dstid() const {
  return _has_bit(5);
}
inline void CProxyHead::clear_dstid() {
  dstid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CProxyHead::dstid() const {
  return dstid_;
}
inline void CProxyHead::set_dstid(::google::protobuf::uint32 value) {
  _set_bit(5);
  dstid_ = value;
}

// optional uint32 Uin = 7;
inline bool CProxyHead::has_uin() const {
  return _has_bit(6);
}
inline void CProxyHead::clear_uin() {
  uin_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CProxyHead::uin() const {
  return uin_;
}
inline void CProxyHead::set_uin(::google::protobuf::uint32 value) {
  _set_bit(6);
  uin_ = value;
}

// optional .EMProxyCmd OpFlag = 8;
inline bool CProxyHead::has_opflag() const {
  return _has_bit(7);
}
inline void CProxyHead::clear_opflag() {
  opflag_ = 0;
  _clear_bit(7);
}
inline EMProxyCmd CProxyHead::opflag() const {
  return static_cast< EMProxyCmd >(opflag_);
}
inline void CProxyHead::set_opflag(EMProxyCmd value) {
  GOOGLE_DCHECK(EMProxyCmd_IsValid(value));
  _set_bit(7);
  opflag_ = value;
}

// optional uint32 OptLength = 9 [default = 0];
inline bool CProxyHead::has_optlength() const {
  return _has_bit(8);
}
inline void CProxyHead::clear_optlength() {
  optlength_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CProxyHead::optlength() const {
  return optlength_;
}
inline void CProxyHead::set_optlength(::google::protobuf::uint32 value) {
  _set_bit(8);
  optlength_ = value;
}

// optional bytes Option = 10;
inline bool CProxyHead::has_option() const {
  return _has_bit(9);
}
inline void CProxyHead::clear_option() {
  if (option_ != &_default_option_) {
    option_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& CProxyHead::option() const {
  return *option_;
}
inline void CProxyHead::set_option(const ::std::string& value) {
  _set_bit(9);
  if (option_ == &_default_option_) {
    option_ = new ::std::string;
  }
  option_->assign(value);
}
inline void CProxyHead::set_option(const char* value) {
  _set_bit(9);
  if (option_ == &_default_option_) {
    option_ = new ::std::string;
  }
  option_->assign(value);
}
inline void CProxyHead::set_option(const void* value, size_t size) {
  _set_bit(9);
  if (option_ == &_default_option_) {
    option_ = new ::std::string;
  }
  option_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProxyHead::mutable_option() {
  _set_bit(9);
  if (option_ == &_default_option_) {
    option_ = new ::std::string;
  }
  return option_;
}

// optional uint32 SrcGameID = 11;
inline bool CProxyHead::has_srcgameid() const {
  return _has_bit(10);
}
inline void CProxyHead::clear_srcgameid() {
  srcgameid_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CProxyHead::srcgameid() const {
  return srcgameid_;
}
inline void CProxyHead::set_srcgameid(::google::protobuf::uint32 value) {
  _set_bit(10);
  srcgameid_ = value;
}

// optional uint32 DesGameID = 12;
inline bool CProxyHead::has_desgameid() const {
  return _has_bit(11);
}
inline void CProxyHead::clear_desgameid() {
  desgameid_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 CProxyHead::desgameid() const {
  return desgameid_;
}
inline void CProxyHead::set_desgameid(::google::protobuf::uint32 value) {
  _set_bit(11);
  desgameid_ = value;
}

#endif  // PROTOBUF_proxymessage_5fpb_2ehxx__INCLUDED
